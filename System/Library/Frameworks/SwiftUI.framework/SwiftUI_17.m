void *__swift_memcpy265_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x109uLL);
}

uint64_t assignWithTake for TabEntry(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 264);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
    if (*(_QWORD *)(a1 + 72))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    if (!*(_QWORD *)(a1 + 176))
      goto LABEL_11;
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
LABEL_11:
  v5 = *(unsigned __int8 *)(a2 + 264);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    memcpy((void *)a1, (const void *)a2, 0x108uLL);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(_BYTE *)(a1 + 264) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for TabEntry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 265))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 264);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TabEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 249) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 265) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 265) = 0;
    if (a2)
      *(_BYTE *)(result + 264) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TabEntry(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 264);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for TabEntry(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 256) = 0;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }
  *(_BYTE *)(result + 264) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TabEntry()
{
  return &type metadata for TabEntry;
}

ValueMetadata *type metadata accessor for TabItem.TraitKey()
{
  return &type metadata for TabItem.TraitKey;
}

uint64_t associated type witness table accessor for View.Body : View in TabItem.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabEntry.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  _OWORD __dst[17];
  _BYTE __src[264];
  char v14;

  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if ((v14 & 1) != 0)
  {
    memcpy(__dst, __src, 0x108uLL);
    strcpy((char *)v11, "TabItemGroup ");
    HIWORD(v11[1]) = -4864;
    v1._countAndFlagsBits = TabItemGroup.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2 = v11[0];
    outlined destroy of TabItemGroup((uint64_t)__dst);
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    strcpy((char *)v11, "TabItem ");
    BYTE1(v11[1]) = 0;
    WORD1(v11[1]) = 0;
    HIDWORD(v11[1]) = -402653184;
    v3._countAndFlagsBits = TabItem.platformIdentifier.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 0x3D6E656464696820;
    v4._object = (void *)0xE800000000000000;
    String.append(_:)(v4);
    v5 = TabEntry.hidden.getter();
    v6 = (v5 & 1) == 0;
    if ((v5 & 1) != 0)
      v7 = 1702195828;
    else
      v7 = 0x65736C6166;
    if (v6)
      v8 = 0xE500000000000000;
    else
      v8 = 0xE400000000000000;
    v9 = v8;
    String.append(_:)(*(Swift::String *)&v7);
    swift_bridgeObjectRelease();
    v2 = v11[0];
    outlined destroy of TabItem((uint64_t)__dst);
  }
  return v2;
}

uint64_t TabEntry.hidden.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD __dst[17];
  _BYTE __src[264];
  char v15;

  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if ((v15 & 1) != 0)
  {
    memcpy(__dst, __src, 0x108uLL);
    outlined init with copy of TabItem?((uint64_t)&__dst[3], (uint64_t)v9);
    if (v12)
    {
      v1 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v1 != -1)
        swift_once();
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v2 = v5;
      outlined consume of TabCustomizationID?(v6, v7, v8);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
      outlined destroy of TabItem((uint64_t)v9);
    }
    else
    {
      outlined destroy of TabItemGroup((uint64_t)__dst);
      outlined destroy of TabItem?((uint64_t)v9);
      return 0;
    }
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    v3 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v2 = v9[1];
    outlined consume of TabCustomizationID?(v10, v11, v12);
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)__dst);
  }
  return v2;
}

uint64_t TabEntry.platformIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[17];
  _BYTE __src[264];
  char v5;

  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if ((v5 & 1) != 0)
  {
    memcpy(v3, __src, 0x108uLL);
    v1 = *((_QWORD *)&v3[1] + 1);
    outlined copy of TabCustomizationID.Base();
    outlined destroy of TabItemGroup((uint64_t)v3);
  }
  else
  {
    v3[4] = *(_OWORD *)&__src[64];
    v3[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&v3[6] = *(_QWORD *)&__src[96];
    v3[0] = *(_OWORD *)__src;
    v3[1] = *(_OWORD *)&__src[16];
    v3[2] = *(_OWORD *)&__src[32];
    v3[3] = *(_OWORD *)&__src[48];
    v1 = TabItem.platformIdentifier.getter();
    outlined destroy of TabItem((uint64_t)v3);
  }
  return v1;
}

uint64_t TabEntry.presentationCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[11];
  _BYTE v15[16];
  _OWORD __dst[17];
  _BYTE __src[264];
  char v18;

  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if ((v18 & 1) == 0)
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    v8 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v8 == -1)
    {
LABEL_8:
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v14[0] + 16);
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)__dst);
      return v9;
    }
LABEL_18:
    swift_once();
    goto LABEL_8;
  }
  memcpy(__dst, __src, 0x108uLL);
  v1 = swift_bridgeObjectRetain();
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_Sis5NeverOTg503_s7d18UI21UIKitAdaptablef146View33_BC84A4987A84428C24F1F51C778C096CLLV27dismissPresentationIfNeeded11coordinatoryAA0eF17Coordinator_PhoneCyAA08AdaptiveeF8StrategyVG_tFSiAA0E5G54Ocfu_33_88b05e132e72830fd289708f1134f08dAMSiTf3nnnpk_nTf1cn_n(v1, v15);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(v2 + 32);
    while (1)
    {
      v6 = *v5++;
      v7 = __OFADD__(v4, v6);
      v4 += v6;
      if (v7)
        goto LABEL_17;
      if (!--v3)
        goto LABEL_10;
    }
  }
  v4 = 0;
LABEL_10:
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem?((uint64_t)&__dst[3], (uint64_t)v14);
  if (!v14[3])
  {
    outlined destroy of TabItemGroup((uint64_t)__dst);
    outlined destroy of TabItem?((uint64_t)v14);
    return v4;
  }
  v10 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v14);
  v11 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of TabItemGroup((uint64_t)__dst);
  v9 = v4 + v11;
  if (__OFADD__(v4, v11))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return v9;
}

uint64_t TabItem.platformIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  char v6;

  v0 = dispatch thunk of CustomStringConvertible.description.getter();
  v1 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v1 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
      && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
    {
      ViewTraitCollection.value<A>(for:defaultValue:)();
      outlined copy of TabCustomizationID?(v3, v4, v5);
      outlined consume of TabCustomizationID?(v3, v4, v5);
      swift_bridgeObjectRelease();
      if (v5 != 255)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for searchPlatformIdentifier != -1)
      swift_once();
    v0 = static TabItem.searchPlatformIdentifier;
    swift_bridgeObjectRetain();
  }
  return v0;
}

uint64_t TabEntry.resolvedCustomizationID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _OWORD __dst[17];
  _BYTE __src[264];
  char v9;

  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if ((v9 & 1) != 0)
  {
    memcpy(__dst, __src, 0x108uLL);
    v1 = *((_QWORD *)&__dst[1] + 1);
    outlined copy of TabCustomizationID.Base();
    outlined destroy of TabItemGroup((uint64_t)__dst);
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0)
      goto LABEL_7;
    v2 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v2 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v1 = v4;
    outlined copy of TabCustomizationID?(v4, v5, v6);
    outlined consume of TabCustomizationID?(v4, v5, v6);
    swift_bridgeObjectRelease();
    if (v6 == 255)
LABEL_7:
      v1 = TabItem.platformIdentifier.getter();
    outlined destroy of TabItem((uint64_t)__dst);
  }
  return v1;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabItem.TraitKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of PlatformItem((uint64_t)&static TabItem.TraitKey.defaultValue, a1);
}

uint64_t TabItem.RootView.WrappedView.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _OWORD v4[6];
  uint64_t v5;
  _OWORD v6[6];
  uint64_t v7;
  char v8;

  result = outlined init with copy of TabItem.RootView.WrappedView(v1, (uint64_t)v6);
  if ((v8 & 1) != 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)&v6[0];
    *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    v4[4] = v6[4];
    v4[5] = v6[5];
    v5 = v7;
    v4[0] = v6[0];
    v4[1] = v6[1];
    v4[2] = v6[2];
    v4[3] = v6[3];
    outlined init with copy of _ViewList_View((uint64_t)v4, a1);
    *(_BYTE *)(a1 + 88) = 0;
    return outlined destroy of TabItem((uint64_t)v4);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TabItem.RootView()
{
  type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>(0);
  lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance TabItem.RootView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  _BYTE v5[96];
  _BYTE v6[96];

  TabItem.RootView.WrappedView.wrappedValue.getter((uint64_t)v5);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v5, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
  v3 = *(_BYTE *)(v1 + 105);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>);
  *(_BYTE *)(a1 + 89) = v3;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>);
}

uint64_t outlined destroy of TabItem?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for TabItem?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>)
  {
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
  }
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, (void (*)(uint64_t))type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
}

uint64_t outlined init with copy of TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TabItem.RootView.WrappedView(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>, (uint64_t)&protocol witness table for UpdateEnvironmentToAllowedBehaviors);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>();
    v2[0] = MEMORY[0x1E0CE0A30];
    v2[1] = &protocol witness table for TabItemGroup.HostView;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t sub_1876D6A44()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier>, lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for SearchAdjustmentModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier>, type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>);
}

uint64_t EnvironmentValues.displayMenuAsPalette.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1E1AE10F8, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1E1AE10F8, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.displayMenuAsPalette.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1E1AE10F8, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static PalettePickerStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1876D6D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[28];

  type metadata accessor for _GraphValue();
  v24 = _GraphValue.value.getter();
  *(_QWORD *)(v9 - 176) = v0;
  *(_DWORD *)(v9 - 168) = v32;
  *(_QWORD *)(v9 - 160) = v5;
  *(_DWORD *)(v9 - 152) = v6;
  *(_DWORD *)(v9 - 148) = v7;
  v28 = v7;
  *(_DWORD *)(v9 - 144) = v8;
  *(_DWORD *)(v9 - 140) = v31;
  *(_QWORD *)(v9 - 136) = v1;
  *(_QWORD *)(v9 - 128) = v2;
  v27 = v3;
  *(_DWORD *)(v9 - 120) = v3;
  *(_DWORD *)(v9 - 116) = v30;
  *(_DWORD *)(v9 - 112) = v29;
  *(_DWORD *)(v9 - 108) = v4;
  *(_DWORD *)(v9 - 104) = v38;
  *(_DWORD *)(v9 - 100) = v40;
  *(_DWORD *)(v9 - 96) = v39;
  swift_getKeyPath();
  v23 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)(v9 - 176) = v37;
  *(_DWORD *)(v9 - 168) = v32;
  *(_QWORD *)(v9 - 160) = v36;
  *(_DWORD *)(v9 - 152) = v35;
  *(_DWORD *)(v9 - 148) = v7;
  *(_DWORD *)(v9 - 144) = v34;
  *(_DWORD *)(v9 - 140) = v31;
  *(_QWORD *)(v9 - 136) = v1;
  *(_QWORD *)(v9 - 128) = v2;
  *(_DWORD *)(v9 - 120) = v3;
  *(_DWORD *)(v9 - 116) = v30;
  *(_DWORD *)(v9 - 112) = v29;
  *(_DWORD *)(v9 - 108) = v33;
  *(_DWORD *)(v9 - 104) = v38;
  *(_DWORD *)(v9 - 100) = v40;
  *(_DWORD *)(v9 - 96) = v39;
  swift_getKeyPath();
  v10 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v9 - 176) = v24;
  *(_DWORD *)(v9 - 172) = v23;
  *(_DWORD *)(v9 - 168) = v10;
  type metadata accessor for ResolvedPicker(255, v26, v25, v11);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255);
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v17 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<SegmentedPickerStyle>, (uint64_t)&type metadata for SegmentedPickerStyle, (uint64_t)&protocol witness table for SegmentedPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
  type metadata accessor for ModifiedContent();
  v19 = type metadata accessor for PalettePickerStyle.Body(0, v26, v25, v18);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PalettePickerStyle.Body<A>, v19);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v9 - 176) = v37;
  *(_DWORD *)(v9 - 168) = v32;
  *(_QWORD *)(v9 - 160) = v36;
  *(_DWORD *)(v9 - 152) = v35;
  *(_DWORD *)(v9 - 148) = v28;
  *(_DWORD *)(v9 - 144) = v34;
  *(_DWORD *)(v9 - 140) = v31;
  *(_QWORD *)(v9 - 136) = v1;
  *(_QWORD *)(v9 - 128) = v2;
  *(_DWORD *)(v9 - 120) = v27;
  *(_DWORD *)(v9 - 116) = v30;
  *(_DWORD *)(v9 - 112) = v29;
  *(_DWORD *)(v9 - 108) = v33;
  *(_DWORD *)(v9 - 104) = v38;
  *(_DWORD *)(v9 - 100) = v40;
  *(_DWORD *)(v9 - 96) = v39;
  v20 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v9 - 192) = &protocol witness table for ResolvedPicker<A>;
  *(_QWORD *)(v9 - 184) = v20;
  v21 = MEMORY[0x1E0CE2E70];
  v45[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v9 - 192);
  v45[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v44[0] = MEMORY[0x18D75FFDC](v21, v13, v45);
  v44[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>();
  v43[0] = MEMORY[0x18D75FFDC](v21, v14, v44);
  v43[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v42[0] = MEMORY[0x18D75FFDC](v21, v15, v43);
  v42[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v41[0] = MEMORY[0x18D75FFDC](v21, v16, v42);
  v41[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>();
  MEMORY[0x18D75FFDC](v21, v17, v41);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE3238], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<MenuPickerStyle>, (uint64_t)&type metadata for MenuPickerStyle, (uint64_t)&protocol witness table for MenuPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for PalettePickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PalettePickerStyle.Body);
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for PickerStyleWriter<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

void static PalettePickerStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1876D7314()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[26];

  type metadata accessor for _GraphValue();
  v21 = _GraphValue.value.getter();
  *(_QWORD *)(v7 - 176) = v2;
  *(_DWORD *)(v7 - 168) = v4;
  v27 = v0;
  v28 = v4;
  *(_QWORD *)(v7 - 160) = v3;
  *(_DWORD *)(v7 - 152) = v0;
  *(_DWORD *)(v7 - 148) = v1;
  v26 = v1;
  *(_DWORD *)(v7 - 144) = v5;
  *(_DWORD *)(v7 - 140) = v6;
  *(_QWORD *)(v7 - 136) = v34;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v25 = v2;
  *(_QWORD *)(v7 - 176) = v2;
  *(_DWORD *)(v7 - 168) = v4;
  *(_QWORD *)(v7 - 160) = v3;
  *(_DWORD *)(v7 - 152) = v0;
  *(_DWORD *)(v7 - 148) = v1;
  *(_DWORD *)(v7 - 144) = v5;
  *(_DWORD *)(v7 - 140) = v6;
  *(_QWORD *)(v7 - 136) = v34;
  swift_getKeyPath();
  swift_retain();
  v8 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)(v7 - 176) = v21;
  *(_DWORD *)(v7 - 172) = v20;
  *(_DWORD *)(v7 - 168) = v9;
  type metadata accessor for ResolvedPicker(255, v24, v23, v10);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v22 = type metadata accessor for ModifiedContent();
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255);
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<SegmentedPickerStyle>, (uint64_t)&type metadata for SegmentedPickerStyle, (uint64_t)&protocol witness table for SegmentedPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
  type metadata accessor for ModifiedContent();
  v17 = type metadata accessor for PalettePickerStyle.Body(0, v24, v23, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PalettePickerStyle.Body<A>, v17);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 176) = v25;
  *(_DWORD *)(v7 - 168) = v28;
  *(_QWORD *)(v7 - 160) = v8;
  *(_DWORD *)(v7 - 152) = v27;
  *(_DWORD *)(v7 - 148) = v26;
  *(_DWORD *)(v7 - 144) = v5;
  *(_DWORD *)(v7 - 140) = v6;
  *(_QWORD *)(v7 - 136) = v34;
  *(_QWORD *)(v7 - 128) = v33;
  *(_QWORD *)(v7 - 120) = v32;
  *(_DWORD *)(v7 - 112) = v31;
  *(_QWORD *)(v7 - 104) = v30;
  *(_BYTE *)(v7 - 96) = v29;
  v40[0] = &protocol witness table for ResolvedPicker<A>;
  v40[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v18 = MEMORY[0x1E0CE2E70];
  v39[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v40);
  v39[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v38[0] = MEMORY[0x18D75FFDC](v18, v22, v39);
  v38[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>();
  v37[0] = MEMORY[0x18D75FFDC](v18, v12, v38);
  v37[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v36[0] = MEMORY[0x18D75FFDC](v18, v13, v37);
  v36[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v35[0] = MEMORY[0x18D75FFDC](v18, v14, v36);
  v35[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>();
  MEMORY[0x18D75FFDC](v18, v15, v35);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void PalettePickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1876D7758(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void PalettePickerStyle.Body.value.getter(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[11];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  ValueMetadata *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;

  v14 = a2;
  v13 = a1;
  v12 = a5;
  v11 = HIDWORD(a1);
  v10 = type metadata accessor for PickerStyleConfiguration(0, a3, a4, a4);
  v9[9] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v7);
  v9[8] = (char *)v9 - v8;
  v15 = &type metadata for PalettePickerStyle;
  v16 = a3;
  v17 = &protocol witness table for PalettePickerStyle;
  v18 = a4;
  v9[3] = a4;
  type metadata accessor for _PickerValue();
}

void sub_1876D7860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 464) = (char *)&a9 - v12;
  v14 = type metadata accessor for ResolvedPicker(0, v9, v10, v13);
  *(_QWORD *)(v11 - 448) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 400) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v18 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 392) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v11 - 480) = (char *)&a9 - v20;
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255);
  v21 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 360) = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v11 - 456) = (char *)&a9 - v23;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v24 = type metadata accessor for ModifiedContent();
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v11 - 416) = v24;
  *(_QWORD *)(v11 - 352) = v25;
  MEMORY[0x1E0C80A78](v24, v24);
  *(_QWORD *)(v11 - 440) = (char *)&a9 - v26;
  v27 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 336) = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v11 - 368) = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  *(_QWORD *)(v11 - 384) = (char *)&a9 - v29;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v30 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 344) = v30;
  *(_QWORD *)(v11 - 328) = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  *(_QWORD *)(v11 - 376) = (char *)&a9 - v32;
  *(_QWORD *)(v11 - 488) = v9;
  PalettePickerStyle.Body.base.getter();
}

void sub_1876D7B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 - 432);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 424) + 32))(v5, v1, *(_QWORD *)(v4 - 408));
  v7 = ResolvedPicker.init(configuration:)(v5, v2, v3, v6, v0);
  View.pickerStyle<A, B>(_:in:)(v7, v8);
}

uint64_t sub_1876D7BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 448) + 8))(v0, v1);
  swift_getKeyPath();
  *(_BYTE *)(v8 - 240) = 1;
  v9 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v8 - 104) = v3;
  *(_QWORD *)(v8 - 96) = v9;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8 - 104);
  v12 = *(_QWORD *)(v8 - 480);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 400) + 8))(v4, v7);
  v13 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  *(_QWORD *)(v8 - 120) = v11;
  *(_QWORD *)(v8 - 112) = v13;
  v14 = MEMORY[0x18D75FFDC](v10, v6, v8 - 120);
  v15 = lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle();
  v16 = *(_QWORD *)(v8 - 456);
  View.labelStyle<A>(_:)(v15, v6, (uint64_t)&type metadata for TitleAndIconLabelStyle, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 392) + 8))(v12, v6);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v8 - 488);
  *(_QWORD *)(v17 + 24) = v5;
  v18 = *(_QWORD *)(v8 - 320);
  *(_DWORD *)(v17 + 32) = *(_QWORD *)(v8 - 304);
  *(_DWORD *)(v17 + 36) = v18;
  *(_DWORD *)(v17 + 40) = *(_DWORD *)(v8 - 292);
  v19 = lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>();
  *(_QWORD *)(v8 - 136) = v14;
  *(_QWORD *)(v8 - 128) = v19;
  v20 = MEMORY[0x18D75FFDC](v10, v2, v8 - 136);
  v21 = *(_QWORD *)(v8 - 440);
  View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)partial apply for closure #1 in PalettePickerStyle.Body.value.getter, v17, v2, (uint64_t)&type metadata for LayoutPlatformItemListFlags, v20, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 360) + 8))(v16, v2);
  *(_QWORD *)(v8 - 240) = *(unsigned __int16 *)AGGraphGetValue();
  *(_OWORD *)(v8 - 232) = 0u;
  *(_OWORD *)(v8 - 216) = 0u;
  *(_OWORD *)(v8 - 200) = 0u;
  *(_OWORD *)(v8 - 184) = 0u;
  *(_OWORD *)(v8 - 168) = 0u;
  *(_OWORD *)(v8 - 152) = 0u;
  *(_QWORD *)(v8 - 256) = v20;
  *(_QWORD *)(v8 - 248) = &protocol witness table for PlatformItemListTransformModifier<A>;
  v22 = v10;
  v23 = v10;
  v24 = *(_QWORD *)(v8 - 416);
  v25 = MEMORY[0x18D75FFDC](v23, v24, v8 - 256);
  v26 = *(_QWORD *)(v8 - 384);
  View.platformItemSystemType(_:)(v8 - 240, v24, v25);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 352) + 8))(v21, v24);
  swift_getKeyPath();
  *(_QWORD *)(v8 - 272) = v25;
  *(_QWORD *)(v8 - 264) = &protocol witness table for PlatformItemListTransformModifier<A>;
  v27 = v22;
  v28 = v22;
  v29 = *(_QWORD *)(v8 - 368);
  v30 = MEMORY[0x18D75FFDC](v27, v29, v8 - 272);
  v31 = *(_QWORD *)(v8 - 376);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 336) + 8))(v26, v29);
  v32 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>();
  *(_QWORD *)(v8 - 288) = v30;
  *(_QWORD *)(v8 - 280) = v32;
  v33 = *(_QWORD *)(v8 - 344);
  v34 = MEMORY[0x18D75FFDC](v28, v33, v8 - 288);
  View.pickerStyle<A>(_:)(v34, v33, (uint64_t)&type metadata for SegmentedPickerStyle, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 328) + 8))(v31, v33);
}

void closure #1 in PalettePickerStyle.Body.value.getter(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;

  if (*(_BYTE *)AGGraphGetValue() == 2)
  {
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_10:
        v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      for (i = 0; i != v3; ++i)
      {
        if (i >= v2[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        v5 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
        v6 = (char *)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        v7 = *(_QWORD *)(v5 + 72) * i;
        v8 = *(void **)&v6[v7];
        *(_QWORD *)&v6[v7] = 0;

      }
      *(_QWORD *)a1 = v2;
    }
  }
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PalettePickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  type metadata accessor for ResolvedPicker(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<SegmentedPickerStyle>, (uint64_t)&type metadata for SegmentedPickerStyle, (uint64_t)&protocol witness table for SegmentedPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
  v4 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance PalettePickerStyle.Body<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  PalettePickerStyle.Body.value.getter(*(_QWORD *)v2, *(_DWORD *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for PalettePickerStyle()
{
  return &type metadata for PalettePickerStyle;
}

void base witness table accessor for _AttributeBody in PalettePickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1876D81C0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PalettePickerStyle.Body.value.getter(uint64_t a1)
{
  closure #1 in PalettePickerStyle.Body.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1E1AE10F8, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for DisplayMenuAsPaletteKey()
{
  return &unk_1E1AE10F8;
}

uint64_t Tab.init<>(value:content:systemItem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v29 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Tab(0, a3, v18, MEMORY[0x1E0CE7C38]);
  v28 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, a1, a3, v21);
  v30 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v30, (uint64_t)v11, v24, a3, a4, MEMORY[0x1E0CE7C38], (uint64_t)v23);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
  v25 = v29;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v29, v23, v19);
  *(_BYTE *)(v25 + *(int *)(v19 + 56)) = 0;
  return result;
}

uint64_t Tab.init<>(content:systemItem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 1;
  (*(void (**)(char *, double))(v8 + 32))(v7, v5);
  v9 = MEMORY[0x1E0CE7C38];
  Tab.init<>(role:content:tabItem:)(&v13, (uint64_t)v7, v10, a2, MEMORY[0x1E0CE7C38], a3);
  result = type metadata accessor for Tab(0, MEMORY[0x1E0DEDCE8], a2, v9);
  a3[*(int *)(result + 56)] = 0;
  return result;
}

uint64_t Tab.init<>(role:content:tabItem:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  char v11;
  int *v12;

  v11 = *a1;
  v12 = (int *)type metadata accessor for Tab(0, MEMORY[0x1E0DEDCE8], a4, a5);
  a6[v12[14]] = 1;
  *a6 = 1;
  a6[1] = v11;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a6[v12[12]], a2, a4);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(&a6[v12[13]], a3, a5);
}

uint64_t Tab.init(value:role:content:tabItem:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v19 = *a2;
  v13 = *(_QWORD *)(a5 - 8);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v14(a8, 1, 1, a5);
  v15 = (int *)type metadata accessor for Tab(0, a5, a6, a7);
  v16 = v15[11];
  *(_BYTE *)(a8 + v16) = 1;
  *(_BYTE *)(a8 + v15[14]) = 1;
  v17 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a8, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(a8, a1, a5);
  v14(a8, 0, 1, a5);
  *(_BYTE *)(a8 + v16) = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8 + v15[12], a3, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a8 + v15[13], a4, a7);
}

uint64_t Tab<>.init<A>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Tab<>.init<A>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A, B>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A, B>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A, B>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return Tab<>.init<A, B>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(uint64_t)@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  char v36;
  char v37;

  v30[1] = a4;
  v31 = a5;
  v30[0] = a3;
  v34 = a7;
  v33 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a9 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, v19, a9, v15);
  v37 = 1;
  a6(v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Text.init(_:tableName:bundle:comment:)();
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35[0] = v21;
  v35[1] = v23;
  v35[2] = v27;
  v35[3] = v25;
  v35[4] = v28;
  v36 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v37, (uint64_t)v12, (uint64_t)v35, a9, v33, (uint64_t)&type metadata for DefaultTabLabel, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, a9);
}

uint64_t Tab<>.init<>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, void (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  char v38;
  char v39;

  v32 = a5;
  v33 = a4;
  v31 = a3;
  v36 = a6;
  v35 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a9 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v17;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v16, v20, a9, v14);
  v39 = v18;
  a7(v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = Text.init(_:tableName:bundle:comment:)();
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37[0] = v22;
  v37[1] = v24;
  v37[2] = v28;
  v37[3] = v26;
  v37[4] = v29;
  v38 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v16, &v39, (uint64_t)v11, (uint64_t)v37, a9, v35, (uint64_t)&type metadata for DefaultTabLabel, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v32, a9);
}

uint64_t Tab<>.init<A>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(uint64_t)@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  char v38;
  char v39;

  v31 = a6;
  v32 = a4;
  v33 = a5;
  v30 = a3;
  v36 = a8;
  v35 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v29 = (uint64_t)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Optional();
  v15 = MEMORY[0x1E0C80A78](v34, v14);
  v17 = (char *)&v29 - v16;
  v18 = *(_QWORD *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v29 - v16, a6, a11, v15);
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, a11);
  v39 = 1;
  a7(v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = Text.init(_:tableName:bundle:comment:)();
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37[0] = v20;
  v37[1] = v22;
  v37[2] = v26;
  v37[3] = v24;
  v37[4] = v27;
  v38 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v39, v29, (uint64_t)v37, v34, v35, (uint64_t)&type metadata for DefaultTabLabel, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v31, a11);
}

uint64_t Tab<>.init<A>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X7>, uint64_t a8@<X8>, void (*a9)(uint64_t), uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[2];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  char v39;
  char v40[9];

  v32 = a6;
  v33 = a4;
  v34 = a5;
  v31 = a3;
  v30[1] = a1;
  v37 = a8;
  v36 = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v30[0] = (uint64_t)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Optional();
  v16 = MEMORY[0x1E0C80A78](v35, v15);
  v18 = (char *)v30 - v17;
  LOBYTE(a7) = *a7;
  v19 = *(_QWORD *)(a12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)v30 - v17, a6, a12, v16);
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a12);
  v40[0] = (char)a7;
  a9(v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Text.init(_:tableName:bundle:comment:)();
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38[0] = v21;
  v38[1] = v23;
  v38[2] = v27;
  v38[3] = v25;
  v38[4] = v28;
  v39 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v18, v40, v30[0], (uint64_t)v38, v35, v36, (uint64_t)&type metadata for DefaultTabLabel, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v32, a12);
}

uint64_t Tab<>.init<A>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(uint64_t);
  uint64_t v35;
  void (*v36)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45;

  v39 = a3;
  v40 = a7;
  v34 = a5;
  v35 = a1;
  v41 = a8;
  v37 = a12;
  v38 = a2;
  v36 = a13;
  v15 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v28, v29, v30, v26);
  v45 = 1;
  v34(v31);
  v32 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v35, a9);
  v36(&v42, v17, v38, v39, a9, v37);
  v43 = v43;
  v44 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v28, &v45, (uint64_t)v21, (uint64_t)&v42, a6, v40, (uint64_t)&type metadata for DefaultTabLabel, v41);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v32, a9);
}

uint64_t Tab<>.init<A>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Tab<>.init<A>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  void (*v38)(uint64_t);
  void (*v39)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;

  v37[1] = a6;
  v38 = a5;
  v41 = a2;
  v42 = a3;
  v37[0] = a1;
  v43 = a8;
  v39 = a14;
  v40 = a13;
  v16 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v23 - 8);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *v30;
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v29, v32, v33, v27);
  v47 = v31;
  v38(v34);
  v35 = v37[0];
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 16))(v18, v37[0], a10);
  v39(&v44, v18, v41, v42, a10, v40);
  v45 = v45;
  v46 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v29, &v47, (uint64_t)v22, (uint64_t)&v44, a7, a9, (uint64_t)&type metadata for DefaultTabLabel, v43);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a4, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v35, a10);
}

uint64_t Tab<>.init<A, B>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A, B>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A, B>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  void (*v35)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  char v44[9];

  v38 = a3;
  v39 = a6;
  v32 = a4;
  v33 = a5;
  v40 = a8;
  v36 = a11;
  v37 = a2;
  v34 = a1;
  v35 = a13;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v31 - v25;
  v27 = *(_QWORD *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))((char *)&v31 - v25, a4, a9, v24);
  v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v26, 0, 1, a9);
  v44[0] = 1;
  v33(v28);
  v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v34, a7);
  v35(&v41, v17, v37, v38, a7, v36);
  v42 = v42;
  v43 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v26, v44, (uint64_t)v21, (uint64_t)&v41, v22, v39, (uint64_t)&type metadata for DefaultTabLabel, v40);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v32, a9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v29, a7);
}

uint64_t Tab<>.init<A, B>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return Tab<>.init<A, B>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A, B>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  void (*v37)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46[9];

  v40 = a3;
  v41 = a8;
  v35 = a7;
  v36 = a6;
  v34 = a1;
  v42 = a9;
  v38 = a13;
  v39 = a2;
  v37 = a15;
  v17 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Optional();
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v33 - v27;
  LOBYTE(a5) = *a5;
  v29 = *(_QWORD *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v33 - v27, a4, a11, v26);
  v30 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v28, 0, 1, a11);
  v46[0] = (char)a5;
  v36(v30);
  v31 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v34, a10);
  v37(&v43, v19, v39, v40, a10, v38);
  v44 = v44;
  v45 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v28, v46, (uint64_t)v23, (uint64_t)&v43, v24, v41, (uint64_t)&type metadata for DefaultTabLabel, v42);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a4, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v31, a10);
}

uint64_t Tab<>.init<>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(uint64_t)@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  char v40;
  char v41;

  v35 = a4;
  v36 = a6;
  LODWORD(v34) = a3;
  v38 = a8;
  v37 = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a10 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v20, v21, a10, v18);
  v41 = 1;
  a7(v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = Text.init(_:tableName:bundle:comment:)();
  v33 = v24;
  v34 = v23;
  v32 = v25;
  v27 = v26 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v28 = swift_allocObject();
  v29 = v35;
  *(_QWORD *)(v28 + 16) = v35;
  *(_QWORD *)(v28 + 24) = a5;
  *(_DWORD *)(v28 + 32) = 0;
  *(_BYTE *)(v28 + 36) = 1;
  *(_OWORD *)(v28 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v28 + 56) = v29;
  *(_QWORD *)(v28 + 64) = a5;
  *(_OWORD *)(v28 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v28 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39[0] = v34;
  v39[1] = v33;
  v39[2] = v27;
  v39[3] = v32;
  v39[4] = v28;
  v40 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v20, &v41, (uint64_t)v14, (uint64_t)v39, a10, v37, (uint64_t)&type metadata for DefaultTabLabel, v38);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v36, a10);
}

uint64_t Tab<>.init<>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, void (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  char v41;
  char v42;

  v36 = a4;
  v37 = a6;
  LODWORD(v35) = a3;
  v34 = a1;
  v39 = a7;
  v38 = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a10 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v20;
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v19, v22, a10, v17);
  v42 = v21;
  a8(v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = Text.init(_:tableName:bundle:comment:)();
  v34 = v25;
  v35 = v24;
  v33 = v26;
  v28 = v27 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v29 = swift_allocObject();
  v30 = v36;
  *(_QWORD *)(v29 + 16) = v36;
  *(_QWORD *)(v29 + 24) = a5;
  *(_DWORD *)(v29 + 32) = 0;
  *(_BYTE *)(v29 + 36) = 1;
  *(_OWORD *)(v29 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v29 + 56) = v30;
  *(_QWORD *)(v29 + 64) = a5;
  *(_OWORD *)(v29 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v29 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40[0] = v35;
  v40[1] = v34;
  v40[2] = v28;
  v40[3] = v33;
  v40[4] = v29;
  v41 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v19, &v42, (uint64_t)v13, (uint64_t)v40, a10, v38, (uint64_t)&type metadata for DefaultTabLabel, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v37, a10);
}

uint64_t Tab<>.init<A>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(uint64_t)@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  char v39;
  char v40;

  v33 = a4;
  v34 = a6;
  LODWORD(v31) = a3;
  v30 = a1;
  v37 = a8;
  v36 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v32 = (uint64_t)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Optional();
  v16 = MEMORY[0x1E0C80A78](v35, v15);
  v18 = (char *)&v30 - v17;
  v19 = *(_QWORD *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v30 - v17, a6, a11, v16);
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a11);
  v40 = 1;
  a7(v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Text.init(_:tableName:bundle:comment:)();
  v30 = v22;
  v31 = v21;
  v24 = v23;
  v26 = v25 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v27 = swift_allocObject();
  v28 = v33;
  *(_QWORD *)(v27 + 16) = v33;
  *(_QWORD *)(v27 + 24) = a5;
  *(_DWORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 36) = 1;
  *(_OWORD *)(v27 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v27 + 56) = v28;
  *(_QWORD *)(v27 + 64) = a5;
  *(_OWORD *)(v27 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v27 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38[0] = v31;
  v38[1] = v30;
  v38[2] = v26;
  v38[3] = v24;
  v38[4] = v27;
  v39 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v18, &v40, v32, (uint64_t)v38, v35, v36, (uint64_t)&type metadata for DefaultTabLabel, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v34, a11);
}

uint64_t Tab<>.init<A>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X7>, uint64_t a8@<X8>, void (*a9)(uint64_t), uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  char v41;
  char v42[9];

  v35 = a4;
  v36 = a6;
  LODWORD(v33) = a3;
  v39 = a8;
  v31 = a9;
  v32 = a1;
  v38 = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v34 = (uint64_t)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Optional();
  v17 = MEMORY[0x1E0C80A78](v37, v16);
  v19 = (char *)&v31 - v18;
  LOBYTE(a7) = *a7;
  v20 = *(_QWORD *)(a12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v31 - v18, a6, a12, v17);
  v21 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, a12);
  v42[0] = (char)a7;
  v31(v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = Text.init(_:tableName:bundle:comment:)();
  v32 = v23;
  v33 = v22;
  v25 = v24;
  v27 = v26 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v28 = swift_allocObject();
  v29 = v35;
  *(_QWORD *)(v28 + 16) = v35;
  *(_QWORD *)(v28 + 24) = a5;
  *(_DWORD *)(v28 + 32) = 0;
  *(_BYTE *)(v28 + 36) = 1;
  *(_OWORD *)(v28 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v28 + 56) = v29;
  *(_QWORD *)(v28 + 64) = a5;
  *(_OWORD *)(v28 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v28 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40[0] = v33;
  v40[1] = v32;
  v40[2] = v27;
  v40[3] = v25;
  v40[4] = v28;
  v41 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v19, v42, v34, (uint64_t)v40, v37, v38, (uint64_t)&type metadata for DefaultTabLabel, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v36, a12);
}

uint64_t Tab<>.init<>(value:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[15];
  char v24;

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = &v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, double))(v13 + 16))(v18, a1, v19, v16);
  v24 = 1;
  a2(v20);
  Tab.init(value:role:content:tabItem:)((uint64_t)v18, &v24, (uint64_t)v11, v21, a3, a4, MEMORY[0x1E0CE7C38], a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
}

uint64_t Tab<>.init<A>(value:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;

  v20 = a5;
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v20 - v14, a1, a4, v13);
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, a4);
  v21 = 1;
  a2(v17);
  Tab.init(value:role:content:tabItem:)((uint64_t)v15, &v21, (uint64_t)v10, v18, v11, a3, MEMORY[0x1E0CE7C38], v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

uint64_t Tab<>.init<>(value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v25[2];
  uint64_t v26;
  char v27;
  char v28;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v20;
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v19, a1, v22, v17);
  v28 = v21;
  a3(v23);
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v27 = v21;
  Tab.init(value:role:content:tabItem:)((uint64_t)v19, &v28, (uint64_t)v12, (uint64_t)v25, a4, a5, (uint64_t)&type metadata for DefaultTabLabel, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

uint64_t Tab<>.init<A>(value:role:content:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  _BYTE *v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  char v25;
  char v26;

  v9 = a2;
  v22 = a6;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - v16;
  LOBYTE(v9) = *v9;
  v18 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v21 - v16, a1, a5, v15);
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, a5);
  v26 = (char)v9;
  a3(v19);
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v25 = (char)v9;
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v26, (uint64_t)v12, (uint64_t)v23, v13, a4, (uint64_t)&type metadata for DefaultTabLabel, v22);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a5);
}

uint64_t Tab<>.init(value:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  char v33;

  v30 = a4;
  v31 = a3;
  v32 = a8;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v25, a1, v26, v23);
  v33 = 1;
  v28 = a2(v27);
  v31(v28);
  Tab.init(value:role:content:tabItem:)((uint64_t)v25, &v33, (uint64_t)v18, (uint64_t)v14, a5, a6, a7, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a5);
}

uint64_t Tab<>.init(value:role:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[3];
  void (*v34)(uint64_t);
  uint64_t v35;
  char v36;

  v33[2] = a6;
  v34 = a5;
  v33[1] = a4;
  v35 = a9;
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v20 - 8);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *v27;
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v26, a1, v29, v24);
  v36 = v28;
  v31 = a3(v30);
  v34(v31);
  Tab.init(value:role:content:tabItem:)((uint64_t)v26, &v36, (uint64_t)v19, (uint64_t)v15, a7, a8, a10, v35);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(a1, a7);
}

uint64_t Tab<>.init<A>(value:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  char v33;

  v30 = a5;
  v31 = a4;
  v28 = a3;
  v29 = a2;
  v32 = a9;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Optional();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v28 - v22;
  v24 = *(_QWORD *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))((char *)&v28 - v22, a1, a8, v21);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v23, 0, 1, a8);
  v33 = 1;
  v26 = v29(v25);
  v31(v26);
  Tab.init(value:role:content:tabItem:)((uint64_t)v23, &v33, (uint64_t)v18, (uint64_t)v14, v19, a6, a7, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(a1, a8);
}

uint64_t Tab<>.init<A>(value:role:content:label:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  _BYTE *v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;

  v29 = a8;
  v30 = a7;
  v27[1] = a5;
  v28 = a4;
  v27[0] = a3;
  v10 = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Optional();
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v27 - v21;
  LOBYTE(v10) = *v10;
  v23 = *(_QWORD *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)v27 - v21, a1, a9, v20);
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v22, 0, 1, a9);
  v31 = (char)v10;
  v25 = ((uint64_t (*)(uint64_t))v27[0])(v24);
  v28(v25);
  Tab.init(value:role:content:tabItem:)((uint64_t)v22, &v31, (uint64_t)v17, (uint64_t)v13, v18, a6, v30, v29);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(a1, a9);
}

void Tab<>._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for Tab<>.TabIdentifiedView();
}

uint64_t sub_1876DA94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v2 + 16))(v6, v3, v5, v12);
  v15 = type metadata accessor for Tab(0, v4, v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, v6, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Tab<A, B, C><>.TabIdentifiedView, a1);
  View.tabViewTag<A>(_:)(v3, a1, v4, *(_QWORD *)(v9 - 136));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a1);
}

void type metadata accessor for Tab<>.TabIdentifiedView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t View.tabViewTag<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = a2;
  v20[1] = a4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v20 - v9;
  v11 = type metadata accessor for TagValueTraitKey.Value();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)v20 - v15;
  if (a3 == MEMORY[0x1E0DEDCE8])
  {
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(MEMORY[0x1E0DEDCE8] - 8) + 56))(v16, 1, 1, MEMORY[0x1E0DEDCE8]);
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v14);
  v17 = *(_QWORD *)(a3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, a3);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v16, v10, a3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a3);
LABEL_5:
    v19 = type metadata accessor for TagValueTraitKey();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v19);
    View._trait<A>(_:_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  __break(1u);
  return result;
}

void Tab<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[3];

  v4[0] = a2;
  v4[1] = a3;
  v4[2] = a4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Tab<A, B, C>, a1, v4);
  specialized TabContent.bodyError()();
}

uint64_t sub_1876DAC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

void protocol witness for TabContent._identifiedView.getter in conformance <> Tab<A, B, C>(uint64_t a1, uint64_t a2)
{
  Tab<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for TabContent.body.getter in conformance <> Tab<A, B, C>(uint64_t a1, uint64_t a2)
{
  Tab<>.body.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 24));
}

uint64_t Tab<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, _BYTE *a6@<X8>, uint64_t a7)
{
  return Tab<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A>(_:image:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, _BYTE *a6@<X8>, uint64_t a7, uint64_t a8)
{
  return Tab<>.init<A>(_:image:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>, uint64_t a4)
{
  double v4;
  uint64_t v5;
  char *v6;
  void (*v7)(double);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE *v18;
  _QWORD v19[5];
  char v20;
  char v21;

  v18 = a3;
  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = 1;
  v7(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19[0] = v8;
  v19[1] = v10;
  v19[2] = v14;
  v19[3] = v12;
  v19[4] = v15;
  v20 = 1;
  return Tab.init<>(role:content:tabItem:)(&v21, (uint64_t)v6, (uint64_t)v19, a4, (uint64_t)&type metadata for DefaultTabLabel, v18);
}

uint64_t Tab<>.init<>(_:image:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>, uint64_t a4, uint64_t a5)
{
  double v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void (*v9)(double);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE *v20;
  _QWORD v21[5];
  char v22;
  char v23;

  v20 = a3;
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *v8;
  v9(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = Text.init(_:tableName:bundle:comment:)();
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21[0] = v10;
  v21[1] = v12;
  v21[2] = v16;
  v21[3] = v14;
  v21[4] = v17;
  v22 = 1;
  return Tab.init<>(role:content:tabItem:)(&v23, (uint64_t)v7, (uint64_t)v21, a5, (uint64_t)&type metadata for DefaultTabLabel, v20);
}

uint64_t Tab<>.init<A>(_:systemImage:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, _BYTE *a6@<X8>, uint64_t a7)
{
  return Tab<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, _BYTE *a6@<X8>, uint64_t a7, void (*a8)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(double);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v27 = a3;
  v28 = a6;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = 1;
  v20(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a5);
  a8(&v29, v14, a2, v27, a5, a7);
  v21 = v29;
  v22 = v30;
  v23 = v31;
  v24 = v32;
  v25 = v33;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a5);
  v29 = v21;
  v30 = v22;
  v31 = v23;
  v32 = v24;
  v33 = v25;
  v34 = 1;
  return Tab.init<>(role:content:tabItem:)(&v35, (uint64_t)v19, (uint64_t)&v29, a4, (uint64_t)&type metadata for DefaultTabLabel, v28);
}

uint64_t Tab<>.init<A>(_:systemImage:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, _BYTE *a6@<X8>, uint64_t a7, uint64_t a8)
{
  return Tab<>.init<A>(_:image:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, _BYTE *a6@<X8>, uint64_t a7, uint64_t a8, void (*a9)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(double);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  v29 = a4;
  v30 = a6;
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *v21;
  v22(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a5);
  a9(&v31, v15, a2, a3, a5, a8);
  v23 = v31;
  v24 = v32;
  v25 = v33;
  v26 = v34;
  v27 = v35;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a5);
  v31 = v23;
  v32 = v24;
  v33 = v25;
  v34 = v26;
  v35 = v27;
  v36 = 1;
  return Tab.init<>(role:content:tabItem:)(&v37, (uint64_t)v20, (uint64_t)&v31, v29, (uint64_t)&type metadata for DefaultTabLabel, v30);
}

uint64_t Tab<>.init<>(_:systemImage:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, _BYTE *a5@<X8>, uint64_t a6)
{
  double v8;
  uint64_t v9;
  char *v10;
  void (*v11)(double);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD v24[5];
  char v25;
  char v26;

  v23 = a5;
  v22 = a6;
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = 1;
  v11(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_DWORD *)(v18 + 32) = 0;
  *(_BYTE *)(v18 + 36) = 1;
  *(_OWORD *)(v18 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v18 + 56) = a3;
  *(_QWORD *)(v18 + 64) = a4;
  *(_OWORD *)(v18 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v18 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24[0] = v21;
  v24[1] = v13;
  v24[2] = v17;
  v24[3] = v15;
  v24[4] = v18;
  v25 = 1;
  return Tab.init<>(role:content:tabItem:)(&v26, (uint64_t)v10, (uint64_t)v24, v22, (uint64_t)&type metadata for DefaultTabLabel, v23);
}

uint64_t Tab<>.init<>(_:systemImage:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, _BYTE *a5@<X8>, uint64_t a6, uint64_t a7)
{
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void (*v13)(double);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD v26[5];
  char v27;
  char v28;

  v25 = a5;
  v24 = a7;
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *v12;
  v13(v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = Text.init(_:tableName:bundle:comment:)();
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  *(_DWORD *)(v20 + 32) = 0;
  *(_BYTE *)(v20 + 36) = 1;
  *(_OWORD *)(v20 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  *(_OWORD *)(v20 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v20 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26[0] = v23;
  v26[1] = v15;
  v26[2] = v19;
  v26[3] = v17;
  v26[4] = v20;
  v27 = 1;
  return Tab.init<>(role:content:tabItem:)(&v28, (uint64_t)v11, (uint64_t)v26, v24, (uint64_t)&type metadata for DefaultTabLabel, v25);
}

uint64_t Tab<>.init<>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  double v6;
  uint64_t v7;
  char *v8;
  void (*v9)(double);
  uint64_t v10;
  uint64_t v12;
  char v13;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 1;
  v9(v6);
  return Tab.init<>(role:content:tabItem:)(&v13, (uint64_t)v8, v10, a3, MEMORY[0x1E0CE7C38], a4);
}

uint64_t Tab<>.init<>(role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  double v6;
  uint64_t v7;
  char *v8;
  char v9;
  char *v10;
  void (*v11)(double);
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  char v16;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v10;
  v9 = v16;
  v11(v6);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v15 = v9;
  return Tab.init<>(role:content:tabItem:)(&v16, (uint64_t)v8, (uint64_t)v13, a3, (uint64_t)&type metadata for DefaultTabLabel, a4);
}

uint64_t Tab<>.init(content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _BYTE *a6@<X8>)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t (*v17)(double);
  uint64_t v18;
  _BYTE v20[15];
  char v21;

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = 1;
  v18 = v17(v14);
  a3(v18);
  return Tab.init<>(role:content:tabItem:)(&v21, (uint64_t)v16, (uint64_t)v11, a4, a5, a6);
}

uint64_t Tab<>.init(role:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, _BYTE *a6@<X8>)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t (*v18)(double);
  uint64_t v19;
  _BYTE v21[15];
  char v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *v17;
  v19 = v18(v14);
  a3(v19);
  return Tab.init<>(role:content:tabItem:)(&v22, (uint64_t)v16, (uint64_t)v11, a4, a5, a6);
}

void Tab<>.TabIdentifiedView.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[49];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[3];

  v17[17] = a3;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  v17[15] = *(_QWORD *)(a1 - 8);
  v17[16] = v3;
  MEMORY[0x1E0C80A78](a1, a2);
  v17[14] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 40);
  v17[18] = *(_QWORD *)(v5 + 24);
  v17[19] = v6;
  v7 = v5;
  v8 = type metadata accessor for VStack();
  v17[13] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v17[12] = (char *)v17 - v10;
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v21[0] = *(_QWORD *)(v7 + 48);
  v21[1] = &protocol witness table for UpdateDefaultTabFill;
  v15 = MEMORY[0x1E0CE2E70];
  v20[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v21);
  v20[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v19[0] = MEMORY[0x18D75FFDC](v15, v12, v20);
  v19[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v18[0] = MEMORY[0x18D75FFDC](v15, v13, v19);
  v18[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  v16 = MEMORY[0x18D75FFDC](v15, v14, v18);
  v17[43] = &type metadata for LabelPlatformItemsStrategy;
  v17[44] = v14;
  v17[45] = &type metadata for TabItem.TraitKey;
  v17[46] = &protocol witness table for LabelPlatformItemsStrategy;
  v17[47] = v16;
  v17[48] = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
}

void sub_1876DBA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9[3] = v13;
  v16 = type metadata accessor for ModifiedContent();
  v17 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  v18 = type metadata accessor for ModifiedContent();
  v9[10] = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v9[4] = (char *)&a9 - v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v13, v20);
  v9[2] = v22;
  *(_QWORD *)(v15 - 216) = v22;
  *(_QWORD *)(v15 - 208) = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  v23 = MEMORY[0x18D75FFDC](v11, v16, v15 - 216);
  v24 = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  *(_QWORD *)(v15 - 232) = v23;
  *(_QWORD *)(v15 - 224) = v24;
  *(_QWORD *)(v15 - 248) = MEMORY[0x18D75FFDC](v11, v17, v15 - 232);
  *(_QWORD *)(v15 - 240) = &protocol witness table for _ContainerValueWritingModifier<A>;
  v9[7] = v18;
  v25 = MEMORY[0x18D75FFDC](v11, v18, v15 - 248);
  v9[5] = v25;
  *(_QWORD *)(v15 - 200) = v18;
  *(_QWORD *)(v15 - 192) = &type metadata for TabOptions.TraitKey;
  *(_QWORD *)(v15 - 184) = v25;
  *(_QWORD *)(v15 - 176) = &protocol witness table for TabOptions.TraitKey;
  v26 = MEMORY[0x18D75FF88](0, v15 - 200, MEMORY[0x1E0CE6E38], 0);
  v27 = *(_QWORD *)(v26 - 8);
  v9[8] = v26;
  v9[9] = v27;
  MEMORY[0x1E0C80A78](v26, v28);
  v9[1] = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v9[6] = (char *)&a9 - v32;
  v33 = *(_QWORD *)(v10 + 16);
  v34 = v9[18];
  v9[30] = v33;
  v9[31] = v34;
  v35 = v12;
  v9[32] = v12;
  v36 = v9[19];
  v9[33] = v36;
  v9[34] = v14;
  v37 = v14;
  v38 = v9[11];
  v9[35] = v38;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v9[22] = v33;
  v9[23] = v34;
  v9[24] = v35;
  v9[25] = v36;
  v9[26] = v37;
  v9[27] = v38;
  View.tabItem<A>(_:)((uint64_t)partial apply for closure #2 in Tab<>.TabIdentifiedView.body.getter, (uint64_t)(v9 + 20), v35, v9[2], v37, v9[4]);
}

uint64_t sub_1876DBC74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v0[13] + 8))(v1, v2);
  v11 = v0[14];
  v10 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v3, v4);
  v12 = v10;
  v13 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = (char *)swift_allocObject();
  v15 = v0[18];
  *((_QWORD *)v14 + 2) = v6;
  *((_QWORD *)v14 + 3) = v15;
  v16 = v0[19];
  *((_QWORD *)v14 + 4) = v8;
  *((_QWORD *)v14 + 5) = v16;
  *((_QWORD *)v14 + 6) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v14[v13], v11, v4);
  v17 = v0[1];
  v18 = v0[7];
  v19 = v0[5];
  View.transformTrait<A>(_:transform:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v0[10] + 8))(v5, v18);
  *(_QWORD *)(v9 - 200) = v18;
  *(_QWORD *)(v9 - 192) = &type metadata for TabOptions.TraitKey;
  *(_QWORD *)(v9 - 184) = v19;
  *(_QWORD *)(v9 - 176) = &protocol witness table for TabOptions.TraitKey;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v21 = v0[6];
  v22 = v0[8];
  static ViewBuilder.buildExpression<A>(_:)(v17, v22, OpaqueTypeConformance2);
  v23 = *(void (**)(uint64_t, uint64_t))(v0[9] + 8);
  v23(v17, v22);
  static ViewBuilder.buildBlock<A>(_:)(v21, v22, v0[17]);
  return ((uint64_t (*)(uint64_t, uint64_t))v23)(v21, v22);
}

uint64_t closure #1 in Tab<>.TabIdentifiedView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Tab(0, v12, v13, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 48), a3, a4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t closure #2 in Tab<>.TabIdentifiedView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Tab(0, v12, v13, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 52), a3, a4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabOptions.TraitKey@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  char v7;
  char v8;
  unsigned __int8 v9;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = HIBYTE(static TabOptions.TraitKey.defaultValue);
  v3 = qword_1EDF00118;
  v4 = unk_1EDF00120;
  v5 = *(__int16 *)((char *)&word_1EDF00128 + 1);
  v6 = qword_1EDF00130;
  v7 = word_1EDF00138;
  v8 = HIBYTE(word_1EDF00138);
  *(_BYTE *)a1 = static TabOptions.TraitKey.defaultValue;
  *(_BYTE *)(a1 + 1) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = word_1EDF00128;
  *(_BYTE *)(a1 + 24) = word_1EDF00128;
  *(_WORD *)(a1 + 25) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 41) = v8;
  outlined copy of TabCustomizationID?(v3, v4, v9);
  return swift_bridgeObjectRetain();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> Tab<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a3 - 24);
  v5 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v6 = v3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Tab<A, B, C>, a1, &v5);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> Tab<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Tab()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Tab(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Tab);
}

void sub_1876DC1A0()
{
  type metadata accessor for Tab<>.TabIdentifiedView();
}

uint64_t sub_1876DC1DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v2 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v2);
  v3 = type metadata accessor for _TraitWritingModifier();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Tab<A, B, C><>.TabIdentifiedView, a1);
  v6[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v3);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
}

uint64_t type metadata completion function for Tab<>.TabIdentifiedView(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for Tab(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Tab(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v10 + 80));
  if (v13 <= 7
    && v12 + ((v9 + v11 + ((v8 + v6 + 1) & ~v8)) & ~v11) + 1 <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    v22 = a3[4];
    v23 = a3[3];
    v20 = ~v8;
    v21 = ~v11;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)a1 + v6 + v8 + 1) & v20, ((unint64_t)a2 + v6 + v8 + 1) & v20, v23);
    v17 = ((((unint64_t)a1 + v6 + v8 + 1) & v20) + v9 + v11) & v21;
    v18 = ((((unint64_t)a2 + v6 + v8 + 1) & v20) + v9 + v11) & v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v17, v18, v22);
    *(_BYTE *)(v17 + v12) = *(_BYTE *)(v18 + v12);
  }
  else
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for Tab(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2[2];
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = a1 + *(_QWORD *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84))
    ++v7;
  v8 = (v7 + *(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v8
                                                                                       + *(_QWORD *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

char *initializeWithCopy for Tab(char *a1, char *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = &a1[v11];
  v13 = &a2[v11];
  *v12 = *v13;
  v14 = *(_QWORD *)(a3[3] - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (unint64_t)&v12[v15 + 1] & ~v15;
  v17 = (unint64_t)&v13[v15 + 1] & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v16, v17);
  v18 = *(_QWORD *)(v14 + 64);
  v19 = *(_QWORD *)(a3[4] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v19 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v19 + 64));
  return a1;
}

char *assignWithCopy for Tab(char *a1, char *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = &a1[v12];
  v14 = &a2[v12];
  *v13 = *v14;
  v15 = *(_QWORD *)(a3[3] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (unint64_t)&v13[v16 + 1] & ~v16;
  v18 = (unint64_t)&v14[v16 + 1] & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v17, v18);
  v19 = *(_QWORD *)(v15 + 64);
  v20 = *(_QWORD *)(a3[4] - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v19 + v21;
  v23 = (v22 + v17) & ~v21;
  v24 = (v22 + v18) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v23, v24);
  *(_BYTE *)(v23 + *(_QWORD *)(v20 + 64)) = *(_BYTE *)(v24 + *(_QWORD *)(v20 + 64));
  return a1;
}

char *initializeWithTake for Tab(char *a1, char *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = &a1[v11];
  v13 = &a2[v11];
  *v12 = *v13;
  v14 = *(_QWORD *)(a3[3] - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (unint64_t)&v12[v15 + 1] & ~v15;
  v17 = (unint64_t)&v13[v15 + 1] & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v16, v17);
  v18 = *(_QWORD *)(v14 + 64);
  v19 = *(_QWORD *)(a3[4] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v19 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v19 + 64));
  return a1;
}

char *assignWithTake for Tab(char *a1, char *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = &a1[v12];
  v14 = &a2[v12];
  *v13 = *v14;
  v15 = *(_QWORD *)(a3[3] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (unint64_t)&v13[v16 + 1] & ~v16;
  v18 = (unint64_t)&v14[v16 + 1] & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v17, v18);
  v19 = *(_QWORD *)(v15 + 64);
  v20 = *(_QWORD *)(a3[4] - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v19 + v21;
  v23 = (v22 + v17) & ~v21;
  v24 = (v22 + v18) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 40))(v23, v24);
  *(_BYTE *)(v23 + *(_QWORD *)(v20 + 64)) = *(_BYTE *)(v24 + *(_QWORD *)(v20 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v9)
    v12 = v9;
  else
    v12 = *(_DWORD *)(v10 + 84);
  v13 = a3[4];
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) > v12)
    v12 = *(_DWORD *)(v14 + 84);
  if (v8)
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = *(_QWORD *)(v10 + 64);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = a2 - v12;
  if (a2 <= v12)
    goto LABEL_31;
  v20 = *(_QWORD *)(v14 + 64) + ((v17 + v18 + ((v15 + v16 + 1) & ~v16)) & ~v18) + 1;
  v21 = 8 * v20;
  if (v20 <= 3)
  {
    v23 = ((v19 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      v22 = *(_DWORD *)(a1 + v20);
      if (!v22)
        goto LABEL_31;
      goto LABEL_22;
    }
    if (v23 > 0xFF)
    {
      v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20))
        goto LABEL_31;
      goto LABEL_22;
    }
    if (v23 < 2)
    {
LABEL_31:
      if (v12)
      {
        if (v9 == v12)
        {
          v26 = (*(uint64_t (**)(void))(v7 + 48))();
          if (v26 >= 2)
            return v26 - 1;
          else
            return 0;
        }
        else
        {
          v27 = (a1 + v15 + v16 + 1) & ~v16;
          if ((_DWORD)v11 == v12)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v27, v11, v5);
          else
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v14 + 48))((v27 + v17 + v18) & ~v18, *(unsigned int *)(v14 + 84), v13);
        }
      }
      return 0;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20))
    goto LABEL_31;
LABEL_22:
  v24 = (v22 - 1) << v21;
  if (v20 > 3)
    v24 = 0;
  if (*(_DWORD *)(v14 + 64)
     + (((_DWORD)v17 + (_DWORD)v18 + (((_DWORD)v15 + (_DWORD)v16 + 1) & ~(_DWORD)v16)) & ~(_DWORD)v18) != -1)
  {
    if (v20 <= 3)
      v25 = *(_DWORD *)(v14 + 64) + ((v17 + v18 + ((v15 + v16 + 1) & ~(_DWORD)v16)) & ~(_DWORD)v18) + 1;
    else
      v25 = 4;
    __asm { BR              X11 }
  }
  return v12 + v24 + 1;
}

void storeEnumTagSinglePayload for Tab(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0u;
  v8 = a4[2];
  v7 = a4[3];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v12 + 84) <= v11)
    v13 = v11;
  else
    v13 = *(_DWORD *)(v12 + 84);
  v14 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v14 + 84) > v13)
    v13 = *(_DWORD *)(v14 + 84);
  if (v10)
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  v16 = *(_QWORD *)(v14 + 64)
      + ((*(_QWORD *)(v12 + 64)
        + *(unsigned __int8 *)(v14 + 80)
        + ((v15 + *(unsigned __int8 *)(v12 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + 1;
  if (a3 > v13)
  {
    if (v16 > 3)
    {
      v6 = 1u;
      if (v13 >= a2)
LABEL_28:
        __asm { BR              X23 }
LABEL_21:
      v18 = ~v13 + a2;
      if (v16 < 4)
      {
        if (*(_DWORD *)(v14 + 64)
           + ((*(_DWORD *)(v12 + 64)
             + *(unsigned __int8 *)(v14 + 80)
             + (((_DWORD)v15 + *(unsigned __int8 *)(v12 + 80) + 1) & ~*(unsigned __int8 *)(v12 + 80))) & ~*(unsigned __int8 *)(v14 + 80)) != -1)
        {
          v19 = v18 & ~(-1 << (8 * v16));
          bzero(a1, v16);
          if ((_DWORD)v16 == 3)
          {
            *a1 = v19;
            *((_BYTE *)a1 + 2) = BYTE2(v19);
          }
          else if ((_DWORD)v16 == 2)
          {
            *a1 = v19;
          }
          else
          {
            *(_BYTE *)a1 = v19;
          }
        }
      }
      else
      {
        bzero(a1, v16);
        *(_DWORD *)a1 = v18;
      }
      __asm { BR              X10 }
    }
    v17 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v17))
    {
      v6 = 4u;
      if (v13 >= a2)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v13 >= a2)
    goto LABEL_28;
  goto LABEL_21;
}

void sub_1876DCEF8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1876DCF00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t associated type witness table accessor for View.Body : View in Tab<A, B, C><>.TabIdentifiedView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter()
{
  return partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Tab<>.TabIdentifiedView.body.getter);
}

uint64_t partial apply for closure #2 in Tab<>.TabIdentifiedView.body.getter()
{
  return partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in Tab<>.TabIdentifiedView.body.getter);
}

uint64_t partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_1876DCF8C()
{
  type metadata accessor for Tab<>.TabIdentifiedView();
}

uint64_t sub_1876DCFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = (*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + v4;
  v6 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v2 + v4, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v2 + v4, v3);
  v7 = type metadata accessor for Tab(0, v3, v1, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(v7 + 48), v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v5 + *(int *)(v7 + 52));
  return swift_deallocObject();
}

void partial apply for closure #3 in Tab<>.TabIdentifiedView.body.getter()
{
  type metadata accessor for Tab<>.TabIdentifiedView();
}

uint64_t sub_1876DD0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v6 = v2 + ((v5 + 56) & ~v5);
  result = type metadata accessor for Tab(0, v3, v4, v8);
  *(_BYTE *)(v1 + 40) = *(_BYTE *)(v6 + *(int *)(result + 56));
  *(_BYTE *)(v1 + 41) = *(_BYTE *)(v6 + *(int *)(result + 44));
  return result;
}

uint64_t destroy for TabOptions(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) != 255)
    outlined consume of TabCustomizationID.Base();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TabOptions(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    outlined copy of TabCustomizationID.Base();
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v5;
  }
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TabOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  int v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v6 == 255)
    {
      v8 = *v5;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_OWORD *)v4 = v8;
    }
    else
    {
      v12 = v6 & 1;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      outlined copy of TabCustomizationID.Base();
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v14;
      *(_BYTE *)(a1 + 24) = v12;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of TabCustomizationID(a1 + 8);
    v7 = *((_BYTE *)v5 + 16);
    *(_OWORD *)v4 = *v5;
    *(_BYTE *)(v4 + 16) = v7;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    outlined copy of TabCustomizationID.Base();
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_BYTE *)(a1 + 24) = v9;
    outlined consume of TabCustomizationID.Base();
  }
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t outlined destroy of TabCustomizationID(uint64_t a1)
{
  destroy for TabCustomizationID();
  return a1;
}

uint64_t assignWithTake for TabOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = a1 + 8;
  v5 = a2 + 8;
  if (*(unsigned __int8 *)(a1 + 24) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 24);
    if (v6 != 255)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
      *(_BYTE *)(a1 + 24) = v6 & 1;
      outlined consume of TabCustomizationID.Base();
      goto LABEL_6;
    }
    outlined destroy of TabCustomizationID(a1 + 8);
  }
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
LABEL_6:
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 42))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 42) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabOptions()
{
  return &type metadata for TabOptions;
}

ValueMetadata *type metadata accessor for TabOptions.TraitKey()
{
  return &type metadata for TabOptions.TraitKey;
}

void sub_1876DD4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 32);
  type metadata accessor for VStack();
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v10[0] = v1;
  v10[1] = &protocol witness table for UpdateDefaultTabFill;
  v6 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v9[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v8[0] = MEMORY[0x18D75FFDC](v6, v3, v9);
  v8[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7[0] = MEMORY[0x18D75FFDC](v6, v4, v8);
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  MEMORY[0x18D75FFDC](v6, v5, v7);
  type metadata accessor for PlatformItemTraitWriter();
}

uint64_t sub_1876DD62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[26];

  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v0);
  v9[1] = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  v8[0] = MEMORY[0x18D75FFDC](v1, v2, v9);
  v8[1] = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  v7[0] = MEMORY[0x18D75FFDC](v1, v3, v8);
  v7[1] = &protocol witness table for _ContainerValueWritingModifier<A>;
  v5 = MEMORY[0x18D75FFDC](v1, v4, v7);
  v9[2] = v4;
  v9[3] = &type metadata for TabOptions.TraitKey;
  v9[4] = v5;
  v9[5] = &protocol witness table for TabOptions.TraitKey;
  return swift_getOpaqueTypeConformance2();
}

uint64_t DropCoordinator.init(operation:items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v9 = type metadata accessor for DropCoordinator.Operation(0, a3, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a5, a1, v9);
  result = type metadata accessor for DropCoordinator(0, a3, v10, v11);
  *(_QWORD *)(a5 + *(int *)(result + 28)) = a2;
  return result;
}

uint64_t type metadata accessor for DropCoordinator.Operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropCoordinator.Operation);
}

uint64_t type metadata accessor for DropCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropCoordinator);
}

uint64_t type metadata completion function for DropCoordinator.Operation()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DropCoordinator.Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    *((_BYTE *)v3 + v5) = v10 == 1;
  }
  else
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithCopy for DropCoordinator.Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 16))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t assignWithCopy for DropCoordinator.Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t initializeWithTake for DropCoordinator.Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 32))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t assignWithTake for DropCoordinator.Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DropCoordinator.Operation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 < 0xFF)
    goto LABEL_19;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_19:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_19;
LABEL_12:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876DDD0C + 4 * byte_187C50F61[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for DropCoordinator.Operation(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for DropCoordinator.Operation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876DDF30 + 4 * byte_187C50F6F[v3]))();
}

void destructiveInjectEnumTag for DropCoordinator.Operation(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata completion function for DropCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for DropCoordinator.Operation(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DropCoordinator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    v12 = v10 == 1;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = v12;
    *(_QWORD *)(((unint64_t)v4 + v6 + 8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 8) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DropCoordinator(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DropCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v9 = v7 == 1;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, a2);
  *(_BYTE *)(a1 + v6) = v9;
  *(_QWORD *)((v6 + 8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DropCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  *(_QWORD *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DropCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v9 = v7 == 1;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a1, a2);
  *(_BYTE *)(a1 + v6) = v9;
  *(_QWORD *)((v6 + 8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DropCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  *(_QWORD *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DropCoordinator(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if ((a2 & 0x80000000) == 0)
    goto LABEL_3;
  v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  v7 = v6 & 0xFFFFFFF8;
  v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 4)
  {
    v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_3;
  }
  else if (v10 == 2)
  {
    v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_3;
  }
  else
  {
    v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_3:
      v4 = *(_QWORD *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF)
        LODWORD(v4) = -1;
      return (v4 + 1);
    }
  }
  v12 = v11 - 1;
  if (v7)
  {
    v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void storeEnumTagSinglePayload for DropCoordinator(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if (a3 < 0)
  {
    v6 = a3 - 2147483646;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) & 0xFFFFFFF8) != 0xFFFFFFF0)
      v6 = 2;
    if (v6 >= 0x10000)
      v7 = 4;
    else
      v7 = 2;
    if (v6 < 0x100)
      v5 = 1;
    else
      v5 = v7;
    if ((a2 & 0x80000000) == 0)
LABEL_3:
      __asm { BR              X11 }
  }
  else
  {
    v5 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_3;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v8 = a2 ^ 0x80000000;
    bzero(a1, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v8;
  }
  __asm { BR              X10 }
}

void sub_1876DE7D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x1876DE7C4);
  JUMPOUT(0x1876DE7B0);
}

void sub_1876DE7E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876DE7C4);
}

void sub_1876DE7EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876DE7C4);
}

uint64_t View.tabViewSidebarHeader<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return View.tabViewSidebarHeader<A>(content:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:), a7);
}

uint64_t EnvironmentValues.tabSidebarAccessoryViewConfiguration.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.tabSidebarAccessoryViewConfiguration : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = EnvironmentValues.tabSidebarAccessoryViewConfiguration.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1876DE990@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = EnvironmentValues.tabSidebarAccessoryViewConfiguration.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.tabSidebarAccessoryViewConfiguration : EnvironmentValues()
{
  swift_retain();
  swift_retain();
  swift_retain();
  specialized EnvironmentValues._set<A>(_:for:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.tabViewSidebarHeader<A>(content:)(uint64_t *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v6 = AnyView.init<A>(_:)();
  result = swift_release();
  *a1 = v6;
  return result;
}

uint64_t partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(uint64_t a1)
{
  return partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(a1, (uint64_t (*)(uint64_t, uint64_t, _QWORD))closure #1 in View.tabViewSidebarHeader<A>(content:));
}

uint64_t View.tabViewSidebarFooter<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return View.tabViewSidebarHeader<A>(content:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in View.tabViewSidebarFooter<A>(content:), a7);
}

uint64_t View.tabViewSidebarHeader<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(double);
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[3];

  v24[2] = a7;
  v24[0] = a6;
  v24[1] = a8;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v24 - v17;
  v19(v16);
  swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v18, a4);
  v20 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = a3;
  *((_QWORD *)v21 + 3) = a4;
  v22 = v24[0];
  *((_QWORD *)v21 + 4) = a5;
  *((_QWORD *)v21 + 5) = v22;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[v20], v13, a4);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, a4);
}

uint64_t closure #1 in View.tabViewSidebarFooter<A>(content:)(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v6 = AnyView.init<A>(_:)();
  result = swift_release();
  *(_QWORD *)(a1 + 8) = v6;
  return result;
}

uint64_t partial apply for closure #1 in View.tabViewSidebarFooter<A>(content:)(uint64_t a1)
{
  return partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(a1, (uint64_t (*)(uint64_t, uint64_t, _QWORD))closure #1 in View.tabViewSidebarFooter<A>(content:));
}

uint64_t View.tabViewSidebarBottomBar<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return View.tabViewSidebarHeader<A>(content:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in View.tabViewSidebarBottomBar<A>(content:), a7);
}

uint64_t closure #1 in View.tabViewSidebarBottomBar<A>(content:)(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v6 = AnyView.init<A>(_:)();
  result = swift_release();
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t partial apply for closure #1 in View.tabViewSidebarBottomBar<A>(content:)(uint64_t a1)
{
  return partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(a1, (uint64_t (*)(uint64_t, uint64_t, _QWORD))closure #1 in View.tabViewSidebarBottomBar<A>(content:));
}

uint64_t partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) - 8) + 80);
  return a2(a1, v2 + ((v3 + 48) & ~v3), *(_QWORD *)(v2 + 16));
}

uint64_t View.tabViewSidebarVisibility(_:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.tabViewSidebarVisibility.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.tabViewSidebarVisibility : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = EnvironmentValues.tabViewSidebarVisibility.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1876DEFD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = EnvironmentValues.tabViewSidebarVisibility.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.tabViewSidebarVisibility : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t sub_1876DF068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1876DF140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<Visibility>?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<Visibility>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<Visibility>?>)
  {
    type metadata accessor for Binding<Visibility>?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<Visibility>?>);
  }
}

void type metadata accessor for Binding<Visibility>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Visibility>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Binding<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Visibility>?);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<Visibility>?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TabSidebarAccessoryViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TabSidebarAccessoryViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TabSidebarAccessoryViewConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TabSidebarAccessoryViewConfiguration()
{
  return &type metadata for TabSidebarAccessoryViewConfiguration;
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v3 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

ValueMetadata *type metadata accessor for TabSidebarAccessoryViewConfiguration.Key()
{
  return &type metadata for TabSidebarAccessoryViewConfiguration.Key;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_tabViewSidebarVisibility()
{
  return &type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility;
}

id MapKitPlatformItem.text.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  _BYTE v4[216];
  id v5[27];

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v5) == 1)
    return 0;
  v1 = v5[0];
  v2 = v5[0];
  return v1;
}

id MapKitPlatformItem.secondaryText.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  _BYTE v4[216];
  uint64_t v5;
  id v6;

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(&v5) == 1)
    return 0;
  v1 = v6;
  v2 = v6;
  return v1;
}

id MapKitPlatformItem.iconText.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  _BYTE v4[216];
  uint64_t v5[2];
  id v6;

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v5) == 1)
    return 0;
  v1 = v6;
  v2 = v6;
  return v1;
}

uint64_t MapKitPlatformItem.prioritizeImage.getter()
{
  uint64_t v0;
  _BOOL4 v1;
  _BYTE v3[216];
  uint64_t v4[25];
  unsigned __int8 v5;

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  v1 = _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v4) == 1;
  return (v1 | v5) & 1;
}

UIImage_optional __swiftcall MapKitPlatformItem.makeUIImage()()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t v2;
  objc_class *v3;
  void *v4;
  char v5;
  uint64_t v6;
  _BYTE v7[5];
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  _BYTE v12[216];
  uint64_t v13[3];
  _BYTE v14[192];
  UIImage_optional result;

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v13) == 1
    || (outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v14, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?), _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v9) == 1))
  {
    v2 = 0;
  }
  else if (v11)
  {
    swift_unknownObjectRetain();
    objc_opt_self();
    v2 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    v4 = v9;
    v5 = v10;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    v6 = v8;
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
    outlined copy of GraphicsImage.Contents?(v4, v5);
    swift_retain();
    v2 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v6);
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v4, v5);
  }
  v3 = (objc_class *)v2;
  result.value.super.isa = v3;
  result.is_nil = v1;
  return result;
}

void MapKitPlatformItemReader.init(content:source:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  swift_retain();
  static Alignment.center.getter();
  type metadata accessor for MapKitPlatformItemReader();
}

uint64_t sub_1876DFA90()
{
  ZStack.init(alignment:content:)();
  return swift_release();
}

void type metadata accessor for MapKitPlatformItemReader()
{
  JUMPOUT(0x18D75FF28);
}

void MapKitPlatformItemReader.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ValueMetadata *v16;
  uint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;
  uint64_t v20;
  uint64_t v21;

  v15 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v10[2] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v5[2];
  v7 = v5[5];
  v12 = v5[3];
  v13 = v7;
  v8 = type metadata accessor for ZStack();
  v14 = v8;
  v9 = *(_QWORD *)(a1 + 32);
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v8);
  v16 = &type metadata for LabelPlatformItemsStrategy;
  v17 = v6;
  v18 = v8;
  v19 = &protocol witness table for LabelPlatformItemsStrategy;
  v20 = v9;
  v21 = v11;
  type metadata accessor for PlatformItemsReader();
}

void sub_1876DFBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v15 - 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (uint64_t *)((char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v15 - 264) = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 16))(v14, v13, v10, v20);
  v21 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = v9;
  v23 = v9;
  v24 = *(_QWORD *)(v15 - 232);
  v25 = *(_QWORD *)(v15 - 224);
  *((_QWORD *)v22 + 3) = v24;
  *((_QWORD *)v22 + 4) = v12;
  *((_QWORD *)v22 + 5) = v25;
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 264) + 32))(&v22[v21], *(_QWORD *)(v15 - 256), v10);
  *(_QWORD *)(v15 - 176) = v23;
  *(_QWORD *)(v15 - 168) = v24;
  *(_QWORD *)(v15 - 160) = v12;
  *(_QWORD *)(v15 - 152) = v25;
  *(_QWORD *)(v15 - 144) = *(_QWORD *)(v15 - 248);
  PlatformItemsReader.init(for:content:source:)(v26, (uint64_t)partial apply for closure #1 in MapKitPlatformItemReader.body.getter, (uint64_t)v22, (uint64_t)&type metadata for LabelPlatformItemsStrategy, v17);
}

uint64_t sub_1876DFCC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v2, v1, &protocol witness table for PlatformItemsReader<A, B, C>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 8);
  v4(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, *(_QWORD *)(v3 - 200));
  return v4(v0, v1);
}

uint64_t closure #1 in MapKitPlatformItemReader.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void (**v15)(_BYTE *);
  void (*v16)(_BYTE *);
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[336];

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v20[-v13];
  v16 = *v15;
  outlined init with copy of PlatformItem(v17, (uint64_t)v20);
  v16(v20);
  outlined destroy of MapKitPlatformItem((uint64_t)v20);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v18 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v18(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a3, a5);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v14, a3);
}

void sub_1876DFE30()
{
  type metadata accessor for MapKitPlatformItemReader();
}

uint64_t sub_1876DFE70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 48) & ~v3);
  swift_release();
  v5 = *(int *)(a1 + 52);
  v6 = type metadata accessor for _VariadicView.Tree();
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4 + v5 + *(int *)(v6 + 44));
  return swift_deallocObject();
}

void partial apply for closure #1 in MapKitPlatformItemReader.body.getter()
{
  type metadata accessor for MapKitPlatformItemReader();
}

uint64_t sub_1876DFF48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return closure #1 in MapKitPlatformItemReader.body.getter(v1, v2 + ((v6 + 48) & ~v6), v4, v5, v3);
}

void closure #2 in MapKitPlatformItemReader.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ZStack();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for MapKitPlatformItemReader();
}

uint64_t sub_1876E0018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v1 + *(int *)(a1 + 52);
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v3);
  static ViewBuilder.buildExpression<A>(_:)(v6, v3, v7);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
}

void partial apply for closure #2 in MapKitPlatformItemReader.body.getter()
{
  closure #2 in MapKitPlatformItemReader.body.getter();
}

uint64_t static MapKitPlatformItem.makePlatformItem<A>(inputs:source:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t Source;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v20 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v9 = *((_DWORD *)a1 + 6);
  v24 = *((_DWORD *)a1 + 7);
  v10 = *((_DWORD *)a1 + 8);
  v11 = *((_DWORD *)a1 + 9);
  v22 = a1[6];
  v23 = a1[5];
  v21 = *((_DWORD *)a1 + 14);
  v30 = *((_DWORD *)a1 + 16);
  v31 = *((_DWORD *)a1 + 15);
  v28 = *((_DWORD *)a1 + 18);
  v29 = *((_DWORD *)a1 + 17);
  v26 = *((_DWORD *)a1 + 20);
  v27 = *((_DWORD *)a1 + 19);
  type metadata accessor for _GraphValue();
  LODWORD(v36) = _GraphValue.value.getter();
  v33 = type metadata accessor for ZStack();
  v25 = v33;
  Source = type metadata accessor for MapKitPlatformItem.MakeSource(0, a3, a4, v12);
  v35 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MapKitPlatformItem.MakeSource<A>, Source);
  v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v32, Source, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  v36 = v6;
  LODWORD(v37) = v7;
  v38 = v8;
  *(_QWORD *)&v39 = __PAIR64__(v24, v9);
  *((_QWORD *)&v39 + 1) = __PAIR64__(v11, v10);
  *(_QWORD *)&v40 = v23;
  *((_QWORD *)&v40 + 1) = v22;
  *(_QWORD *)&v41 = __PAIR64__(v31, v21);
  *((_QWORD *)&v41 + 1) = __PAIR64__(v29, v30);
  v42 = __PAIR64__(v27, v28);
  v43 = v26;
  PreferenceKeys.init()();
  v55 = v53;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  v36 = v20;
  LODWORD(v37) = v7;
  v38 = v8;
  *(_QWORD *)&v39 = __PAIR64__(v24, v9);
  *((_QWORD *)&v39 + 1) = __PAIR64__(v11, v10);
  *(_QWORD *)&v40 = v23;
  *((_QWORD *)&v40 + 1) = v22;
  *(_QWORD *)&v41 = __PAIR64__(v31, v21);
  *((_QWORD *)&v41 + 1) = __PAIR64__(v29, v30);
  v42 = __PAIR64__(v27, v28);
  v43 = v26;
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferencesInputs.init(hostKeys:)();
  v15 = v36;
  v16 = (int)v37;
  swift_bridgeObjectRelease();
  *((_QWORD *)&v59 + 1) = v15;
  LODWORD(v60) = v16;
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<PlatformItems.Key>);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v36 |= 0xB3uLL;
  PropertyList.subscript.setter();
  LOBYTE(v36) = 1;
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  PropertyList.subscript.setter();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  PreferenceKeys.add(_:)();
  _GraphValue.init(_:)();
  v36 = v55;
  LODWORD(v37) = v56;
  v38 = v57;
  v39 = v58;
  v40 = v59;
  v41 = v60;
  v42 = v61;
  v43 = v62;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v25);
  static View.makeDebuggableView(view:inputs:)();
  v36 = v53;
  LODWORD(v37) = v54;
  swift_bridgeObjectRetain();
  v17 = PreferencesOutputs.subscript.getter();
  if ((v17 & 0x100000000) != 0)
  {
    v18 = *MEMORY[0x1E0CFED28];
  }
  else
  {
    LODWORD(v36) = v17;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem();
    v18 = Attribute.init<A>(body:value:flags:update:)();
  }
  swift_bridgeObjectRelease_n();
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)&v53);
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v47 = 1;
  v48 = 0;
  v37 = &outlined read-only object #0 of static MapKitPlatformItem.makePlatformItem<A>(inputs:source:);
  v38 = 0;
  LODWORD(v39) = 0;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v53, (uint64_t)&v39 + 8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  v49 = 0;
  v50 = 1;
  v51 = 0;
  v52 = 0;
  LODWORD(v36) = v18;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of MapKitPlatformItem.Child((uint64_t)&v36);
  _GraphValue.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t MapKitPlatformItem.MakeSource.value.getter()
{
  static Alignment.center.getter();
  return ZStack.init(alignment:content:)();
}

uint64_t closure #1 in MapKitPlatformItem.MakeSource.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - v12;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a2);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a3);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MapKitPlatformItem.MakeSource<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ZStack();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance MapKitPlatformItem.MakeSource<A>()
{
  return MapKitPlatformItem.MakeSource.value.getter();
}

uint64_t MapKitPlatformItem.Child.updateValue()()
{
  _DWORD *v0;
  int v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  int v6;
  _BYTE __src[344];
  _OWORD __dst[21];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*v0 == *MEMORY[0x1E0CFED28])
  {
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)__src);
    memset(&__dst[15], 0, 48);
    __dst[18] = xmmword_187BFE310;
    *(_QWORD *)&__dst[0] = &outlined read-only object #0 of MapKitPlatformItem.Child.updateValue();
    *((_QWORD *)&__dst[0] + 1) = 0;
    LODWORD(__dst[1]) = 0;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)__src, (uint64_t)&__dst[1] + 8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    v1 = 0;
    *(_QWORD *)&__dst[19] = 0;
    BYTE8(__dst[19]) = 1;
    __dst[20] = 0uLL;
  }
  else
  {
    Value = AGGraphGetValue();
    v4 = v3;
    outlined init with copy of PlatformItem(Value, (uint64_t)__src);
    v1 = v4 & 1;
    __src[336] = v4 & 1;
    memcpy(__dst, __src, sizeof(__dst));
  }
  memcpy(__src, __dst, 0x150uLL);
  v5 = (uint64_t)(v0 + 2);
  v6 = specialized static UnaryPlatformItemsStrategy.hasChanges(from:to:)(v0 + 2, __src);
  if (!AGGraphGetOutputValue() || (v1 & v6) != 0)
  {
    outlined init with copy of PlatformItem((uint64_t)__src, (uint64_t)__dst);
    AGGraphSetOutputValue();
    outlined destroy of MapKitPlatformItem((uint64_t)__dst);
  }
  return outlined assign with take of PlatformItem((uint64_t)__src, v5);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance MapKitPlatformItem.Child@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t type metadata accessor for MapKitPlatformItem.MakeSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapKitPlatformItem.MakeSource);
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTextRepresentable, &type metadata for PlatformItemsTextRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsImageRepresentable, &type metadata for PlatformItemsImageRepresentable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.PlatformItemsFeaturesKey, &type metadata for _ViewInputs.PlatformItemsFeaturesKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.PlatformItemsFeaturesKey, &type metadata for _ViewInputs.PlatformItemsFeaturesKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.RequestsPlatformItemsKey, &type metadata for _ViewInputs.RequestsPlatformItemsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.RequestsPlatformItemsKey, &type metadata for _ViewInputs.RequestsPlatformItemsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.RequestsPlatformItemsKey, &type metadata for _ViewInputs.RequestsPlatformItemsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.RequestsPlatformItemsKey, &type metadata for _ViewInputs.RequestsPlatformItemsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewInputs.RequestsPlatformItemsKey, &type metadata for _ViewInputs.RequestsPlatformItemsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child;
  if (!lazy protocol witness table cache variable for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MapKitPlatformItem.Child, &unk_1E1ACA200);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child);
  }
  return result;
}

uint64_t outlined destroy of MapKitPlatformItem.Child(uint64_t a1)
{
  destroy for PlatformItemTraitWriter.AddTrait(a1);
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in MapKitPlatformItemReader<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for MapKitPlatformItem(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;

  swift_bridgeObjectRelease();
  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)1)
  {

    v3 = *(_QWORD *)(a1 + 168);
    if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v4 = *(unsigned __int8 *)(a1 + 56);
      if (v4 != 255)
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 48), v4);
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), v3);
      swift_unknownObjectRelease();
      swift_release();

    }
    swift_release();
  }
  if (*(_QWORD *)(a1 + 288) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MapKitPlatformItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v14;
  _OWORD *v15;
  id *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = a2 + 24;
  v6 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 == (void *)1)
  {
    v7 = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a1 + 200) = v7;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(v5 + 192);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(v5 + 208);
    v8 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a1 + 136) = v8;
    v9 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a1 + 168) = v9;
    v10 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a1 + 72) = v10;
    v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 104) = v11;
    v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 40) = v12;
  }
  else
  {
    v13 = *(void **)(a2 + 32);
    v14 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v14;
    v15 = (_OWORD *)(a1 + 48);
    v16 = (id *)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 168);
    v18 = v6;
    v19 = v13;
    v20 = v14;
    if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
    {
      v21 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      v22 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v22;
      v23 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v23;
      v24 = *(_OWORD *)(a2 + 64);
      *v15 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 64) = v24;
      v25 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v25;
    }
    else
    {
      v26 = *(unsigned __int8 *)(a2 + 56);
      if (v26 == 255)
      {
        *(_QWORD *)v15 = *v16;
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      }
      else
      {
        v27 = *v16;
        outlined copy of GraphicsImage.Contents(*v16, *(_BYTE *)(a2 + 56));
        *(_QWORD *)(a1 + 48) = v27;
        *(_BYTE *)(a1 + 56) = v26;
      }
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
      *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
      v28 = *(_OWORD *)(a2 + 112);
      v29 = *(_OWORD *)(a2 + 128);
      *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
      *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
      *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
      *(_OWORD *)(a1 + 112) = v28;
      *(_OWORD *)(a1 + 128) = v29;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
      {
        v30 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v30;
      }
      else
      {
        v31 = *(_QWORD *)(a2 + 152);
        v32 = *(_QWORD *)(a2 + 160);
        v33 = *(_QWORD *)(a2 + 176);
        outlined copy of AccessibilityImageLabel(v31, v32, v17);
        *(_QWORD *)(a1 + 152) = v31;
        *(_QWORD *)(a1 + 160) = v32;
        *(_QWORD *)(a1 + 168) = v17;
        *(_QWORD *)(a1 + 176) = v33;
      }
      v34 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v34;
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      v35 = *(void **)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v35;
      *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
      *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      v36 = v35;
    }
    *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    swift_retain();
  }
  v37 = *(_QWORD *)(a2 + 288);
  if (v37 == 1)
  {
    v38 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v38;
    v39 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v39;
  }
  else
  {
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v40 = (_OWORD *)(a1 + 264);
    v41 = (_OWORD *)(a2 + 264);
    if (v37)
    {
      v42 = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 288) = v37;
      *(_QWORD *)(a1 + 296) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v40, v41);
    }
    else
    {
      v43 = *(_OWORD *)(a2 + 280);
      *v40 = *v41;
      *(_OWORD *)(a1 + 280) = v43;
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    }
  }
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  v44 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v44;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapKitPlatformItem(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  void *v5;
  void *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void *v29;
  _OWORD *v30;
  id *v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  _OWORD *v52;
  id *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  id v76;
  int v77;
  id v78;
  void *v79;
  char v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  id v92;
  id v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  void *v103;
  id v104;
  id v105;
  char v106;
  id v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  void *v127;
  void *v128;
  id v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = (_OWORD *)(a2 + 24);
  v6 = *(void **)(a2 + 24);
  if (v5 == (void *)1)
  {
    if (v6 == (void *)1)
    {
      v8 = *(_OWORD *)(a2 + 40);
      *v4 = *v7;
      *(_OWORD *)(a1 + 40) = v8;
      v9 = *(_OWORD *)(a2 + 56);
      v10 = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v11;
      *(_OWORD *)(a1 + 56) = v9;
      *(_OWORD *)(a1 + 72) = v10;
      v12 = *(_OWORD *)(a2 + 120);
      v13 = *(_OWORD *)(a2 + 136);
      v14 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v14;
      *(_OWORD *)(a1 + 120) = v12;
      *(_OWORD *)(a1 + 136) = v13;
      v15 = *(_OWORD *)(a2 + 184);
      v16 = *(_OWORD *)(a2 + 200);
      v17 = *(_OWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 200) = v16;
      *(_OWORD *)(a1 + 216) = v17;
      *(_OWORD *)(a1 + 184) = v15;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v6;
      v28 = *(void **)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v28;
      v29 = *(void **)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v29;
      v30 = (_OWORD *)(a1 + 48);
      v31 = (id *)(a2 + 48);
      v32 = *(_QWORD *)(a2 + 168);
      v33 = v6;
      v34 = v28;
      v35 = v29;
      if (v32 >> 1 == 4294967294)
      {
        v36 = *(_OWORD *)v31;
        v37 = *(_OWORD *)(a2 + 64);
        v38 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v38;
        *v30 = v36;
        *(_OWORD *)(a1 + 64) = v37;
        v39 = *(_OWORD *)(a2 + 112);
        v40 = *(_OWORD *)(a2 + 128);
        v41 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 160) = v41;
        *(_OWORD *)(a1 + 112) = v39;
        *(_OWORD *)(a1 + 128) = v40;
        v42 = *(_OWORD *)(a2 + 176);
        v43 = *(_OWORD *)(a2 + 192);
        v44 = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        *(_OWORD *)(a1 + 192) = v43;
        *(_OWORD *)(a1 + 208) = v44;
        *(_OWORD *)(a1 + 176) = v42;
      }
      else
      {
        v64 = *(unsigned __int8 *)(a2 + 56);
        if (v64 == 255)
        {
          v81 = *v31;
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          *(_QWORD *)v30 = v81;
        }
        else
        {
          v65 = *v31;
          outlined copy of GraphicsImage.Contents(*v31, *(_BYTE *)(a2 + 56));
          *(_QWORD *)(a1 + 48) = v65;
          *(_BYTE *)(a1 + 56) = v64;
        }
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
        v82 = *(_OWORD *)(a2 + 92);
        *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
        *(_OWORD *)(a1 + 92) = v82;
        v83 = *(_OWORD *)(a2 + 112);
        v84 = *(_OWORD *)(a2 + 128);
        *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
        *(_OWORD *)(a1 + 112) = v83;
        *(_OWORD *)(a1 + 128) = v84;
        *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
        *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
        *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
        v85 = *(_QWORD *)(a2 + 168);
        if (v85 >> 1 == 0xFFFFFFFF)
        {
          v86 = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
          *(_OWORD *)(a1 + 168) = v86;
        }
        else
        {
          v87 = *(_QWORD *)(a2 + 152);
          v88 = *(_QWORD *)(a2 + 160);
          v89 = *(_QWORD *)(a2 + 176);
          outlined copy of AccessibilityImageLabel(v87, v88, *(_QWORD *)(a2 + 168));
          *(_QWORD *)(a1 + 152) = v87;
          *(_QWORD *)(a1 + 160) = v88;
          *(_QWORD *)(a1 + 168) = v85;
          *(_QWORD *)(a1 + 176) = v89;
        }
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
        *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
        v90 = *(_DWORD *)(a2 + 204);
        *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
        *(_DWORD *)(a1 + 204) = v90;
        v91 = *(void **)(a2 + 216);
        *(_QWORD *)(a1 + 216) = v91;
        *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
        *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v92 = v91;
      }
      *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_retain();
    }
  }
  else if (v6 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 24);
    v18 = *(_OWORD *)(a2 + 40);
    *v4 = *v7;
    *(_OWORD *)(a1 + 40) = v18;
    v19 = *(_OWORD *)(a2 + 104);
    v21 = *(_OWORD *)(a2 + 56);
    v20 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v19;
    *(_OWORD *)(a1 + 56) = v21;
    *(_OWORD *)(a1 + 72) = v20;
    v22 = *(_OWORD *)(a2 + 168);
    v24 = *(_OWORD *)(a2 + 120);
    v23 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v22;
    *(_OWORD *)(a1 + 120) = v24;
    *(_OWORD *)(a1 + 136) = v23;
    v26 = *(_OWORD *)(a2 + 200);
    v25 = *(_OWORD *)(a2 + 216);
    v27 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 200) = v26;
    *(_OWORD *)(a1 + 216) = v25;
    *(_OWORD *)(a1 + 184) = v27;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v6;
    v45 = v6;

    v46 = *(void **)(a1 + 32);
    v47 = *(void **)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v47;
    v48 = v47;

    v49 = *(void **)(a1 + 40);
    v50 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v50;
    v51 = v50;

    v52 = (_OWORD *)(a1 + 48);
    v53 = (id *)(a2 + 48);
    v54 = *(_QWORD *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 168) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        v55 = *(_OWORD *)v53;
        v56 = *(_OWORD *)(a2 + 64);
        v57 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v57;
        *v52 = v55;
        *(_OWORD *)(a1 + 64) = v56;
        v58 = *(_OWORD *)(a2 + 112);
        v59 = *(_OWORD *)(a2 + 128);
        v60 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 160) = v60;
        *(_OWORD *)(a1 + 112) = v58;
        *(_OWORD *)(a1 + 128) = v59;
        v61 = *(_OWORD *)(a2 + 176);
        v62 = *(_OWORD *)(a2 + 192);
        v63 = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        *(_OWORD *)(a1 + 192) = v62;
        *(_OWORD *)(a1 + 208) = v63;
        *(_OWORD *)(a1 + 176) = v61;
      }
      else
      {
        v75 = *(unsigned __int8 *)(a2 + 56);
        if (v75 == 255)
        {
          v93 = *v53;
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          *(_QWORD *)v52 = v93;
        }
        else
        {
          v76 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 56));
          *(_QWORD *)(a1 + 48) = v76;
          *(_BYTE *)(a1 + 56) = v75;
        }
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
        v94 = *(_OWORD *)(a2 + 92);
        *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
        *(_OWORD *)(a1 + 92) = v94;
        v95 = *(_OWORD *)(a2 + 112);
        v96 = *(_OWORD *)(a2 + 128);
        *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
        *(_OWORD *)(a1 + 112) = v95;
        *(_OWORD *)(a1 + 128) = v96;
        *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
        *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
        *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
        v97 = *(_QWORD *)(a2 + 168);
        if (v97 >> 1 == 0xFFFFFFFF)
        {
          v98 = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
          *(_OWORD *)(a1 + 168) = v98;
        }
        else
        {
          v99 = *(_QWORD *)(a2 + 152);
          v100 = *(_QWORD *)(a2 + 160);
          v101 = *(_QWORD *)(a2 + 176);
          outlined copy of AccessibilityImageLabel(v99, v100, *(_QWORD *)(a2 + 168));
          *(_QWORD *)(a1 + 152) = v99;
          *(_QWORD *)(a1 + 160) = v100;
          *(_QWORD *)(a1 + 168) = v97;
          *(_QWORD *)(a1 + 176) = v101;
        }
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
        *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
        v102 = *(_DWORD *)(a2 + 204);
        *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
        *(_DWORD *)(a1 + 204) = v102;
        v103 = *(void **)(a2 + 216);
        *(_QWORD *)(a1 + 216) = v103;
        *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
        *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v104 = v103;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(a1 + 48);
      v66 = *(_OWORD *)(a2 + 96);
      v68 = *(_OWORD *)v53;
      v67 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v66;
      *v52 = v68;
      *(_OWORD *)(a1 + 64) = v67;
      v69 = *(_OWORD *)(a2 + 160);
      v71 = *(_OWORD *)(a2 + 112);
      v70 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v69;
      *(_OWORD *)(a1 + 112) = v71;
      *(_OWORD *)(a1 + 128) = v70;
      v73 = *(_OWORD *)(a2 + 192);
      v72 = *(_OWORD *)(a2 + 208);
      v74 = *(_OWORD *)(a2 + 176);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      *(_OWORD *)(a1 + 192) = v73;
      *(_OWORD *)(a1 + 208) = v72;
      *(_OWORD *)(a1 + 176) = v74;
    }
    else
    {
      v77 = *(unsigned __int8 *)(a2 + 56);
      if (*(unsigned __int8 *)(a1 + 56) == 255)
      {
        if (v77 == 255)
        {
          v107 = *v53;
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          *(_QWORD *)v52 = v107;
        }
        else
        {
          v105 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 56));
          *(_QWORD *)(a1 + 48) = v105;
          *(_BYTE *)(a1 + 56) = v77;
        }
      }
      else if (v77 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1 + 48);
        v106 = *(_BYTE *)(a2 + 56);
        *(_QWORD *)v52 = *v53;
        *(_BYTE *)(a1 + 56) = v106;
      }
      else
      {
        v78 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 56));
        v79 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v78;
        v80 = *(_BYTE *)(a1 + 56);
        *(_BYTE *)(a1 + 56) = v77;
        outlined consume of GraphicsImage.Contents(v79, v80);
      }
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      v108 = *(_OWORD *)(a2 + 92);
      *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
      *(_OWORD *)(a1 + 92) = v108;
      v109 = *(_OWORD *)(a2 + 112);
      v110 = *(_OWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v109;
      *(_OWORD *)(a1 + 128) = v110;
      *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
      *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
      *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
      v111 = (_OWORD *)(a1 + 152);
      v112 = (_OWORD *)(a2 + 152);
      v113 = *(_QWORD *)(a2 + 168);
      v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(a1 + 168) >> 1 == 0xFFFFFFFFLL)
      {
        if (v114 == 0x1FFFFFFFELL)
        {
          v115 = *(_OWORD *)(a2 + 168);
          *v111 = *v112;
          *(_OWORD *)(a1 + 168) = v115;
        }
        else
        {
          v117 = *(_QWORD *)(a2 + 152);
          v118 = *(_QWORD *)(a2 + 160);
          v119 = *(_QWORD *)(a2 + 176);
          outlined copy of AccessibilityImageLabel(v117, v118, *(_QWORD *)(a2 + 168));
          *(_QWORD *)(a1 + 152) = v117;
          *(_QWORD *)(a1 + 160) = v118;
          *(_QWORD *)(a1 + 168) = v113;
          *(_QWORD *)(a1 + 176) = v119;
        }
      }
      else if (v114 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(a1 + 152);
        v116 = *(_OWORD *)(a2 + 168);
        *v111 = *v112;
        *(_OWORD *)(a1 + 168) = v116;
      }
      else
      {
        v120 = *(_QWORD *)(a2 + 152);
        v121 = *(_QWORD *)(a2 + 160);
        v122 = *(_QWORD *)(a2 + 176);
        outlined copy of AccessibilityImageLabel(v120, v121, *(_QWORD *)(a2 + 168));
        v123 = *(_QWORD *)(a1 + 152);
        v124 = *(_QWORD *)(a1 + 160);
        v125 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 152) = v120;
        *(_QWORD *)(a1 + 160) = v121;
        *(_QWORD *)(a1 + 168) = v113;
        *(_QWORD *)(a1 + 176) = v122;
        outlined consume of AccessibilityImageLabel(v123, v124, v125);
      }
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
      v126 = *(_DWORD *)(a2 + 204);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_DWORD *)(a1 + 204) = v126;
      v127 = *(void **)(a1 + 216);
      v128 = *(void **)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v128;
      v129 = v128;

      *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
      *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
    }
    *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    swift_retain();
    swift_release();
  }
  v130 = (__int128 *)(a1 + 240);
  v131 = (__int128 *)(a2 + 240);
  v132 = *(_QWORD *)(a1 + 288);
  v133 = *(_QWORD *)(a2 + 288);
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      v134 = *v131;
      v135 = *(_OWORD *)(a2 + 256);
      v136 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v136;
LABEL_47:
      *v130 = v134;
      v130[1] = v135;
      goto LABEL_59;
    }
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v140 = (_OWORD *)(a1 + 264);
    v141 = (__int128 *)(a2 + 264);
    v142 = *(_QWORD *)(a2 + 288);
    if (v142)
    {
      *(_QWORD *)(a1 + 288) = v142;
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      (**(void (***)(_OWORD *, __int128 *))(v142 - 8))(v140, v141);
    }
    else
    {
      v145 = *v141;
      v146 = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *v140 = v145;
      *(_OWORD *)(a1 + 280) = v146;
    }
  }
  else
  {
    if (v133 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent(a1 + 240);
      v137 = *(_OWORD *)(a2 + 288);
      v139 = *v131;
      v138 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v137;
      *v130 = v139;
      *(_OWORD *)(a1 + 256) = v138;
      goto LABEL_59;
    }
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
    *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v130 = (__int128 *)(a1 + 264);
    v143 = (__int128 *)(a2 + 264);
    v144 = *(_QWORD *)(a2 + 288);
    if (!v132)
    {
      if (v144)
      {
        *(_QWORD *)(a1 + 288) = v144;
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
        (**(void (***)(uint64_t, uint64_t))(v144 - 8))(a1 + 264, a2 + 264);
        goto LABEL_59;
      }
      v134 = *v143;
      v135 = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      goto LABEL_47;
    }
    if (v144)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 264), (uint64_t *)(a2 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 264);
      v147 = *(_QWORD *)(a2 + 296);
      v148 = *(_OWORD *)(a2 + 280);
      *v130 = *v143;
      *(_OWORD *)(a1 + 280) = v148;
      *(_QWORD *)(a1 + 296) = v147;
    }
  }
LABEL_59:
  v149 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v149;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  return a1;
}

void *__swift_memcpy336_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x150uLL);
}

uint64_t assignWithTake for MapKitPlatformItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  void *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  if (v5 == (void *)1)
    goto LABEL_4;
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 24);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v6;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v7 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v7;
    v8 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v8;
    v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 24) = v4;

  v12 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  v13 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v14 = (_QWORD *)(a1 + 48);
  v15 = (_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 168) >> 1 == 4294967294)
    goto LABEL_8;
  if (*(_QWORD *)(a2 + 168) >> 1 != 4294967294)
  {
    v21 = *(unsigned __int8 *)(a1 + 56);
    if (v21 != 255)
    {
      v22 = *(unsigned __int8 *)(a2 + 56);
      if (v22 != 255)
      {
        v23 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *v15;
        *(_BYTE *)(a1 + 56) = v22;
        outlined consume of GraphicsImage.Contents(v23, v21);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 48);
    }
    *v14 = *v15;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
    *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
    v24 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v24;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
    v25 = *(_QWORD *)(a1 + 168);
    *(_WORD *)(a1 + 146) = *(_WORD *)(a2 + 146);
    if (v25 >> 1 != 0xFFFFFFFF)
    {
      v26 = *(_QWORD *)(a2 + 168);
      if (v26 >> 1 != 0xFFFFFFFF)
      {
        v28 = *(_QWORD *)(a2 + 176);
        v29 = *(_QWORD *)(a1 + 152);
        v30 = *(_QWORD *)(a1 + 160);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 168) = v26;
        *(_QWORD *)(a1 + 176) = v28;
        outlined consume of AccessibilityImageLabel(v29, v30, v25);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 152);
    }
    v27 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v27;
LABEL_19:
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_release();
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v31 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);

    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
    *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 48);
LABEL_8:
  v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v16;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
  v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v17;
  v18 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v18;
  v19 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 64) = v19;
  v20 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v20;
LABEL_20:
  *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
LABEL_21:
  v32 = *(_QWORD *)(a1 + 288);
  if (v32 == 1)
  {
LABEL_24:
    v34 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v34;
    v35 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v35;
    goto LABEL_30;
  }
  v33 = *(_QWORD *)(a2 + 288);
  if (v33 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 240);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  if (v32)
  {
    v36 = a1 + 264;
    if (v33)
      __swift_destroy_boxed_opaque_existential_1(v36);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v36);
  }
  v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
LABEL_30:
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapKitPlatformItem(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 336))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapKitPlatformItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 336) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 336) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MapKitPlatformItem()
{
  return &type metadata for MapKitPlatformItem;
}

uint64_t type metadata completion function for MapKitPlatformItemReader()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MapKitPlatformItemReader(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(unint64_t, unint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 16;
  v10 = v8 & v9;
  v11 = v6 & 0x100000;
  v12 = *a2;
  if (v7 > 7 || v11 != 0 || ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + v10 > 0x18)
  {
    *a1 = v12;
    a1 = (_QWORD *)(v12 + v10);
    swift_retain();
  }
  else
  {
    v15 = ~v7;
    v16 = a2[1];
    *a1 = v12;
    a1[1] = v16;
    v17 = (_OWORD *)(v8 & ((unint64_t)a1 + 23));
    v18 = (_OWORD *)(v8 & ((unint64_t)a2 + 23));
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v9) & v15;
    v20 = ((unint64_t)v18 + v9) & v15;
    v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v21(v19, v20, v4);
  }
  return a1;
}

uint64_t destroy for MapKitPlatformItemReader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  return (*(uint64_t (**)(unint64_t))(v4 + 8))((*(unsigned __int8 *)(v4 + 80)
                                                               + ((a1 + (*(unsigned __int8 *)(v4 + 80) | 7) + 16) & ~(*(unsigned __int8 *)(v4 + 80) | 7))
                                                               + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

_QWORD *initializeWithCopy for MapKitPlatformItemReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 16;
  v9 = (_OWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (_OWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v11 = ((unint64_t)v9 + v7 + 16) & ~v7;
  v12 = ((unint64_t)v10 + v7 + 16) & ~v7;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v13(v11, v12, v5);
  return a1;
}

_QWORD *assignWithCopy for MapKitPlatformItemReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v10 = (_QWORD *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  v11 = (_QWORD *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *v10 = *v11;
  v10[1] = v11[1];
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v10 + v8 + 16) & ~v8, ((unint64_t)v11 + v8 + 16) & ~v8);
  return a1;
}

_OWORD *initializeWithTake for MapKitPlatformItemReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 16;
  v7 = (_OWORD *)(((unint64_t)a1 + v6) & ~(v5 | 7));
  v8 = (_OWORD *)(((unint64_t)a2 + v6) & ~(v5 | 7));
  *v7 = *v8;
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)v7 + v5 + 16) & ~v5, ((unint64_t)v8 + v5 + 16) & ~v5);
  return a1;
}

_OWORD *assignWithTake for MapKitPlatformItemReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 16;
  v9 = (_QWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (_QWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v9 + v7 + 16) & ~v7, ((unint64_t)v10 + v7 + 16) & ~v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapKitPlatformItemReader(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 16;
  v10 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v11 = (v9 & ~v7) + *(_QWORD *)(v4 + 64) + (v9 & ~v8);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(_WORD *)((char *)a1 + v11))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v7);
      v17 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v17) = -1;
      return (v17 + 1);
    }
  }
  v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((_BYTE *)a1 + v11))
    goto LABEL_22;
LABEL_15:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v6 + v16 + 1;
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876E21D8 + 4 * byte_187C510AC[(v11 - 1)]))();
}

void storeEnumTagSinglePayload for MapKitPlatformItemReader(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7));
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7)));
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7)));
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_1876E24C8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1876E24B4);
}

void sub_1876E24D0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1876E24B4);
}

void sub_1876E24E0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1876E24B4);
}

_UNKNOWN **sub_1876E24EC()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

uint64_t initializeWithCopy for MapKitPlatformItem.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v14;
  _OWORD *v15;
  id *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  id v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = a2 + 32;
  v6 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 == (void *)1)
  {
    v7 = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v5 + 192);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(v5 + 208);
    v8 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a1 + 144) = v8;
    v9 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a1 + 176) = v9;
    v10 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a1 + 80) = v10;
    v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    v13 = *(void **)(a2 + 40);
    v14 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    v15 = (_OWORD *)(a1 + 56);
    v16 = (id *)(a2 + 56);
    v17 = *(_QWORD *)(a2 + 176);
    v18 = v6;
    v19 = v13;
    v20 = v14;
    if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
    {
      v21 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v21;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      v22 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v22;
      v23 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v23;
      v24 = *(_OWORD *)(a2 + 72);
      *v15 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 72) = v24;
      v25 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v25;
    }
    else
    {
      v26 = *(unsigned __int8 *)(a2 + 64);
      if (v26 == 255)
      {
        *(_QWORD *)v15 = *v16;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      }
      else
      {
        v27 = *v16;
        outlined copy of GraphicsImage.Contents(*v16, *(_BYTE *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v27;
        *(_BYTE *)(a1 + 64) = v26;
      }
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
      *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      v28 = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      *(_OWORD *)(a1 + 136) = v28;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
      {
        v29 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v29;
      }
      else
      {
        v30 = *(_QWORD *)(a2 + 160);
        v31 = *(_QWORD *)(a2 + 168);
        v32 = *(_QWORD *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v30, v31, v17);
        *(_QWORD *)(a1 + 160) = v30;
        *(_QWORD *)(a1 + 168) = v31;
        *(_QWORD *)(a1 + 176) = v17;
        *(_QWORD *)(a1 + 184) = v32;
      }
      v33 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v33;
      *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      v34 = *(void **)(a2 + 224);
      *(_QWORD *)(a1 + 224) = v34;
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
      swift_unknownObjectRetain();
      swift_retain();
      v35 = v34;
    }
    *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_retain();
  }
  v36 = *(_QWORD *)(a2 + 296);
  if (v36 == 1)
  {
    v37 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v37;
    v38 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v38;
  }
  else
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v39 = (_OWORD *)(a1 + 272);
    v40 = (_OWORD *)(a2 + 272);
    if (v36)
    {
      v41 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v36;
      *(_QWORD *)(a1 + 304) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v39, v40);
    }
    else
    {
      v42 = *(_OWORD *)(a2 + 288);
      *v39 = *v40;
      *(_OWORD *)(a1 + 288) = v42;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    }
  }
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v43 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v43;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapKitPlatformItem.Child(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  void *v5;
  void *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void *v29;
  _OWORD *v30;
  id *v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  _OWORD *v52;
  id *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  id v76;
  int v77;
  id v78;
  void *v79;
  char v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  id v92;
  id v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  void *v103;
  id v104;
  id v105;
  char v106;
  id v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  void *v127;
  void *v128;
  id v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v7 = (_OWORD *)(a2 + 32);
  v6 = *(void **)(a2 + 32);
  if (v5 == (void *)1)
  {
    if (v6 == (void *)1)
    {
      v8 = *(_OWORD *)(a2 + 48);
      *v4 = *v7;
      *(_OWORD *)(a1 + 48) = v8;
      v9 = *(_OWORD *)(a2 + 64);
      v10 = *(_OWORD *)(a2 + 80);
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 80) = v10;
      v12 = *(_OWORD *)(a2 + 128);
      v13 = *(_OWORD *)(a2 + 144);
      v14 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 144) = v13;
      v15 = *(_OWORD *)(a2 + 192);
      v16 = *(_OWORD *)(a2 + 208);
      v17 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 208) = v16;
      *(_OWORD *)(a1 + 224) = v17;
      *(_OWORD *)(a1 + 192) = v15;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v6;
      v28 = *(void **)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v28;
      v29 = *(void **)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v29;
      v30 = (_OWORD *)(a1 + 56);
      v31 = (id *)(a2 + 56);
      v32 = *(_QWORD *)(a2 + 176);
      v33 = v6;
      v34 = v28;
      v35 = v29;
      if (v32 >> 1 == 4294967294)
      {
        v36 = *(_OWORD *)v31;
        v37 = *(_OWORD *)(a2 + 72);
        v38 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v38;
        *v30 = v36;
        *(_OWORD *)(a1 + 72) = v37;
        v39 = *(_OWORD *)(a2 + 120);
        v40 = *(_OWORD *)(a2 + 136);
        v41 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v41;
        *(_OWORD *)(a1 + 120) = v39;
        *(_OWORD *)(a1 + 136) = v40;
        v42 = *(_OWORD *)(a2 + 184);
        v43 = *(_OWORD *)(a2 + 200);
        v44 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v43;
        *(_OWORD *)(a1 + 216) = v44;
        *(_OWORD *)(a1 + 184) = v42;
      }
      else
      {
        v64 = *(unsigned __int8 *)(a2 + 64);
        if (v64 == 255)
        {
          v81 = *v31;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)v30 = v81;
        }
        else
        {
          v65 = *v31;
          outlined copy of GraphicsImage.Contents(*v31, *(_BYTE *)(a2 + 64));
          *(_QWORD *)(a1 + 56) = v65;
          *(_BYTE *)(a1 + 64) = v64;
        }
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        v82 = *(_OWORD *)(a2 + 100);
        *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v82;
        v83 = *(_OWORD *)(a2 + 120);
        v84 = *(_OWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v84;
        *(_OWORD *)(a1 + 120) = v83;
        *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
        *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
        *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
        v85 = *(_QWORD *)(a2 + 176);
        if (v85 >> 1 == 0xFFFFFFFF)
        {
          v86 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v86;
        }
        else
        {
          v87 = *(_QWORD *)(a2 + 160);
          v88 = *(_QWORD *)(a2 + 168);
          v89 = *(_QWORD *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v87, v88, *(_QWORD *)(a2 + 176));
          *(_QWORD *)(a1 + 160) = v87;
          *(_QWORD *)(a1 + 168) = v88;
          *(_QWORD *)(a1 + 176) = v85;
          *(_QWORD *)(a1 + 184) = v89;
        }
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
        *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
        v90 = *(_DWORD *)(a2 + 212);
        *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v90;
        v91 = *(void **)(a2 + 224);
        *(_QWORD *)(a1 + 224) = v91;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        v92 = v91;
      }
      *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_retain();
    }
  }
  else if (v6 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    *v4 = *v7;
    *(_OWORD *)(a1 + 48) = v18;
    v19 = *(_OWORD *)(a2 + 112);
    v21 = *(_OWORD *)(a2 + 64);
    v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = v20;
    v22 = *(_OWORD *)(a2 + 176);
    v24 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    v26 = *(_OWORD *)(a2 + 208);
    v25 = *(_OWORD *)(a2 + 224);
    v27 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v26;
    *(_OWORD *)(a1 + 224) = v25;
    *(_OWORD *)(a1 + 192) = v27;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
    v45 = v6;

    v46 = *(void **)(a1 + 40);
    v47 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v47;
    v48 = v47;

    v49 = *(void **)(a1 + 48);
    v50 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v50;
    v51 = v50;

    v52 = (_OWORD *)(a1 + 56);
    v53 = (id *)(a2 + 56);
    v54 = *(_QWORD *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 176) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        v55 = *(_OWORD *)v53;
        v56 = *(_OWORD *)(a2 + 72);
        v57 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v57;
        *v52 = v55;
        *(_OWORD *)(a1 + 72) = v56;
        v58 = *(_OWORD *)(a2 + 120);
        v59 = *(_OWORD *)(a2 + 136);
        v60 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v60;
        *(_OWORD *)(a1 + 120) = v58;
        *(_OWORD *)(a1 + 136) = v59;
        v61 = *(_OWORD *)(a2 + 184);
        v62 = *(_OWORD *)(a2 + 200);
        v63 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v62;
        *(_OWORD *)(a1 + 216) = v63;
        *(_OWORD *)(a1 + 184) = v61;
      }
      else
      {
        v75 = *(unsigned __int8 *)(a2 + 64);
        if (v75 == 255)
        {
          v93 = *v53;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)v52 = v93;
        }
        else
        {
          v76 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 64));
          *(_QWORD *)(a1 + 56) = v76;
          *(_BYTE *)(a1 + 64) = v75;
        }
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        v94 = *(_OWORD *)(a2 + 100);
        *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v94;
        v95 = *(_OWORD *)(a2 + 120);
        v96 = *(_OWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v96;
        *(_OWORD *)(a1 + 120) = v95;
        *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
        *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
        *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
        v97 = *(_QWORD *)(a2 + 176);
        if (v97 >> 1 == 0xFFFFFFFF)
        {
          v98 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v98;
        }
        else
        {
          v99 = *(_QWORD *)(a2 + 160);
          v100 = *(_QWORD *)(a2 + 168);
          v101 = *(_QWORD *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v99, v100, *(_QWORD *)(a2 + 176));
          *(_QWORD *)(a1 + 160) = v99;
          *(_QWORD *)(a1 + 168) = v100;
          *(_QWORD *)(a1 + 176) = v97;
          *(_QWORD *)(a1 + 184) = v101;
        }
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
        *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
        v102 = *(_DWORD *)(a2 + 212);
        *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v102;
        v103 = *(void **)(a2 + 224);
        *(_QWORD *)(a1 + 224) = v103;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        v104 = v103;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(a1 + 56);
      v66 = *(_OWORD *)(a2 + 104);
      v68 = *(_OWORD *)v53;
      v67 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v66;
      *v52 = v68;
      *(_OWORD *)(a1 + 72) = v67;
      v69 = *(_OWORD *)(a2 + 168);
      v71 = *(_OWORD *)(a2 + 120);
      v70 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v69;
      *(_OWORD *)(a1 + 120) = v71;
      *(_OWORD *)(a1 + 136) = v70;
      v73 = *(_OWORD *)(a2 + 200);
      v72 = *(_OWORD *)(a2 + 216);
      v74 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      *(_OWORD *)(a1 + 200) = v73;
      *(_OWORD *)(a1 + 216) = v72;
      *(_OWORD *)(a1 + 184) = v74;
    }
    else
    {
      v77 = *(unsigned __int8 *)(a2 + 64);
      if (*(unsigned __int8 *)(a1 + 64) == 255)
      {
        if (v77 == 255)
        {
          v107 = *v53;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)v52 = v107;
        }
        else
        {
          v105 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 64));
          *(_QWORD *)(a1 + 56) = v105;
          *(_BYTE *)(a1 + 64) = v77;
        }
      }
      else if (v77 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1 + 56);
        v106 = *(_BYTE *)(a2 + 64);
        *(_QWORD *)v52 = *v53;
        *(_BYTE *)(a1 + 64) = v106;
      }
      else
      {
        v78 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 64));
        v79 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v78;
        v80 = *(_BYTE *)(a1 + 64);
        *(_BYTE *)(a1 + 64) = v77;
        outlined consume of GraphicsImage.Contents(v79, v80);
      }
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v108 = *(_OWORD *)(a2 + 100);
      *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
      *(_OWORD *)(a1 + 100) = v108;
      v109 = *(_OWORD *)(a2 + 120);
      v110 = *(_OWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = v110;
      *(_OWORD *)(a1 + 120) = v109;
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      v111 = (_OWORD *)(a1 + 160);
      v112 = (_OWORD *)(a2 + 160);
      v113 = *(_QWORD *)(a2 + 176);
      v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(a1 + 176) >> 1 == 0xFFFFFFFFLL)
      {
        if (v114 == 0x1FFFFFFFELL)
        {
          v115 = *(_OWORD *)(a2 + 176);
          *v111 = *v112;
          *(_OWORD *)(a1 + 176) = v115;
        }
        else
        {
          v117 = *(_QWORD *)(a2 + 160);
          v118 = *(_QWORD *)(a2 + 168);
          v119 = *(_QWORD *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v117, v118, *(_QWORD *)(a2 + 176));
          *(_QWORD *)(a1 + 160) = v117;
          *(_QWORD *)(a1 + 168) = v118;
          *(_QWORD *)(a1 + 176) = v113;
          *(_QWORD *)(a1 + 184) = v119;
        }
      }
      else if (v114 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(a1 + 160);
        v116 = *(_OWORD *)(a2 + 176);
        *v111 = *v112;
        *(_OWORD *)(a1 + 176) = v116;
      }
      else
      {
        v120 = *(_QWORD *)(a2 + 160);
        v121 = *(_QWORD *)(a2 + 168);
        v122 = *(_QWORD *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v120, v121, *(_QWORD *)(a2 + 176));
        v123 = *(_QWORD *)(a1 + 160);
        v124 = *(_QWORD *)(a1 + 168);
        v125 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 160) = v120;
        *(_QWORD *)(a1 + 168) = v121;
        *(_QWORD *)(a1 + 176) = v113;
        *(_QWORD *)(a1 + 184) = v122;
        outlined consume of AccessibilityImageLabel(v123, v124, v125);
      }
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
      v126 = *(_DWORD *)(a2 + 212);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = v126;
      v127 = *(void **)(a1 + 224);
      v128 = *(void **)(a2 + 224);
      *(_QWORD *)(a1 + 224) = v128;
      v129 = v128;

      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
    }
    *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_retain();
    swift_release();
  }
  v130 = (__int128 *)(a1 + 248);
  v131 = (__int128 *)(a2 + 248);
  v132 = *(_QWORD *)(a1 + 296);
  v133 = *(_QWORD *)(a2 + 296);
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      v134 = *v131;
      v135 = *(_OWORD *)(a2 + 264);
      v136 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v136;
LABEL_47:
      *v130 = v134;
      v130[1] = v135;
      goto LABEL_59;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v140 = (_OWORD *)(a1 + 272);
    v141 = (__int128 *)(a2 + 272);
    v142 = *(_QWORD *)(a2 + 296);
    if (v142)
    {
      *(_QWORD *)(a1 + 296) = v142;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      (**(void (***)(_OWORD *, __int128 *))(v142 - 8))(v140, v141);
    }
    else
    {
      v145 = *v141;
      v146 = *(_OWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *v140 = v145;
      *(_OWORD *)(a1 + 288) = v146;
    }
  }
  else
  {
    if (v133 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent(a1 + 248);
      v137 = *(_OWORD *)(a2 + 296);
      v139 = *v131;
      v138 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v137;
      *v130 = v139;
      *(_OWORD *)(a1 + 264) = v138;
      goto LABEL_59;
    }
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v130 = (__int128 *)(a1 + 272);
    v143 = (__int128 *)(a2 + 272);
    v144 = *(_QWORD *)(a2 + 296);
    if (!v132)
    {
      if (v144)
      {
        *(_QWORD *)(a1 + 296) = v144;
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        (**(void (***)(uint64_t, uint64_t))(v144 - 8))(a1 + 272, a2 + 272);
        goto LABEL_59;
      }
      v134 = *v143;
      v135 = *(_OWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      goto LABEL_47;
    }
    if (v144)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 272), (uint64_t *)(a2 + 272));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 272);
      v147 = *(_QWORD *)(a2 + 304);
      v148 = *(_OWORD *)(a2 + 288);
      *v130 = *v143;
      *(_OWORD *)(a1 + 288) = v148;
      *(_QWORD *)(a1 + 304) = v147;
    }
  }
LABEL_59:
  v149 = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v149;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  return a1;
}

uint64_t assignWithTake for MapKitPlatformItem.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (v5 == (void *)1)
    goto LABEL_4;
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 32) = v4;

  v12 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v13 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v14 = (_QWORD *)(a1 + 56);
  v15 = (_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 176) >> 1 == 4294967294)
    goto LABEL_8;
  if (*(_QWORD *)(a2 + 176) >> 1 != 4294967294)
  {
    v21 = *(unsigned __int8 *)(a1 + 64);
    if (v21 != 255)
    {
      v22 = *(unsigned __int8 *)(a2 + 64);
      if (v22 != 255)
      {
        v23 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *v15;
        *(_BYTE *)(a1 + 64) = v22;
        outlined consume of GraphicsImage.Contents(v23, v21);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 56);
    }
    *v14 = *v15;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_14:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    v24 = *(_QWORD *)(a1 + 176);
    *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
    if (v24 >> 1 != 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)(a2 + 176);
      if (v25 >> 1 != 0xFFFFFFFF)
      {
        v27 = *(_QWORD *)(a2 + 184);
        v28 = *(_QWORD *)(a1 + 160);
        v29 = *(_QWORD *)(a1 + 168);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = v25;
        *(_QWORD *)(a1 + 184) = v27;
        outlined consume of AccessibilityImageLabel(v28, v29, v24);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 160);
    }
    v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
LABEL_19:
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_release();
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v30 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);

    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 56);
LABEL_8:
  v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v17;
  v18 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v18;
  v19 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 72) = v19;
  v20 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v20;
LABEL_20:
  *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_release();
LABEL_21:
  v31 = *(_QWORD *)(a1 + 296);
  if (v31 == 1)
  {
LABEL_24:
    v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    v34 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v34;
    goto LABEL_30;
  }
  v32 = *(_QWORD *)(a2 + 296);
  if (v32 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 248);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  if (v31)
  {
    v35 = a1 + 272;
    if (v32)
      __swift_destroy_boxed_opaque_existential_1(v35);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v35);
  }
  v36 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v36;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
LABEL_30:
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  return a1;
}

void *type metadata accessor for MapKitPlatformItem.Child()
{
  return &unk_1E1ACA200;
}

void base witness table accessor for _AttributeBody in MapKitPlatformItem.MakeSource<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in MapKitPlatformItem.MakeSource.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in MapKitPlatformItem.MakeSource.value.getter(*(unsigned int *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined destroy of MapKitPlatformItem(uint64_t a1)
{
  destroy for MapKitPlatformItem(a1);
  return a1;
}

uint64_t ClarityUIScene.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ClarityUIScene.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  _OWORD v23[2];
  __n128 v24;
  __n128 v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(0x5579746972616C43, 0xE900000000000049, 0, 0, 1, (uint64_t)&v19);
  v23[0] = v20;
  v23[1] = v21;
  v22 = v19;
  v26 = *((_QWORD *)&v21 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((__n128 *)((char *)v23 + 8), &v25);
  outlined init with take of SceneID(&v22, &v24);
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v6 = type metadata accessor for ResolvedUISceneAdaptor(0, v3, v4, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUISceneAdaptor<A>, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v12, v6, (uint64_t)&v15);
  outlined release of SceneID((uint64_t)&v24);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)&v25);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  v7 = v15;
  v8 = v16;
  v9 = v17;
  v10 = v18;
  v12 = v15;
  LOBYTE(v13) = v16;
  *((_QWORD *)&v13 + 1) = v17;
  v14 = v18;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v12, v6, a2);
  outlined consume of SceneID(v7.n128_i64[0], v7.n128_i64[1], v8);
  outlined consume of UISceneAdaptorConfiguration.Kind(v9, v10);
  return swift_release();
}

__n128 *outlined init with take of UISceneAdaptorConfiguration.Kind(__n128 *a1, __n128 *a2)
{
  __swift_memcpy16_8(a2, a1);
  return a2;
}

__n128 *outlined init with take of SceneID(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8(a2, a1);
  return a2;
}

uint64_t outlined release of SceneID(uint64_t a1)
{
  outlined consume of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined release of UISceneAdaptorConfiguration.Kind(uint64_t a1)
{
  outlined consume of UISceneAdaptorConfiguration.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ClarityUIScene<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ClarityUIScene(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876E3790 + 4 * byte_187C51278[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ClarityUIScene(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ClarityUIScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClarityUIScene);
}

void sub_1876E399C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ResolvedUISceneAdaptor(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.GroupItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void **, uint64_t, uint64_t);
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _OWORD *v25;
  _OWORD *v26;
  unint64_t v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  __int128 v39;
  void *v40;
  id v41;
  int v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  void (*v94)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(_BYTE *, uint64_t, uint64_t);
  uint64_t v109;
  void *v110;
  int *v111;
  uint64_t v112;
  _BYTE *v113;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2 + 2;
    v9 = *((unsigned __int8 *)a2 + 56);
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      v10 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 40) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 16, (uint64_t)(a2 + 2));
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
      v12 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *v8;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
    *(_WORD *)(a1 + 58) = *((_WORD *)a2 + 29);
    v13 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v13;
    v14 = *(int *)(a3 + 44);
    v15 = (void **)(a1 + v14);
    v16 = (void **)((char *)a2 + v14);
    v17 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      return a1;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v39 = *(_OWORD *)(v16 + 3);
      *(_OWORD *)(v15 + 3) = v39;
      (**(void (***)(void **, void **))(v39 - 8))(v15, v16);
      v15[5] = v16[5];
      v15[6] = v16[6];
      v15[7] = v16[7];
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      v40 = v16[10];
      v15[10] = v40;
      swift_retain();
      swift_bridgeObjectRetain();
      v41 = v40;
LABEL_54:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      return a1;
    }
    v105 = v18;
    v21 = *v16;
    v22 = v16[1];
    *v15 = *v16;
    v15[1] = v22;
    v23 = v16[3];
    v15[2] = v16[2];
    v15[3] = v23;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    v24 = v16[6];
    v15[5] = v16[5];
    v15[6] = v24;
    *((_BYTE *)v15 + 56) = *((_BYTE *)v16 + 56);
    v25 = v15 + 8;
    v26 = v16 + 8;
    v27 = (unint64_t)v16[23];
    v28 = v21;
    v29 = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v27 >> 1 == 4294967294)
    {
      v30 = *((_OWORD *)v16 + 13);
      *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 13) = v30;
      *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
      *(_DWORD *)((char *)v15 + 239) = *(_DWORD *)((char *)v16 + 239);
      v31 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v31;
      v32 = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 11) = v32;
      v33 = *((_OWORD *)v16 + 5);
      *v25 = *v26;
      *((_OWORD *)v15 + 5) = v33;
      v34 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 7) = v34;
      v35 = v16[32];
      if (v35)
      {
LABEL_11:
        v15[31] = v16[31];
        v15[32] = v35;
        v36 = v16[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v36 >= 2)
          v37 = v36;
        v15[33] = v36;
        *((_DWORD *)v15 + 68) = *((_DWORD *)v16 + 68);
        *((_BYTE *)v15 + 276) = *((_BYTE *)v16 + 276);
        *(_WORD *)((char *)v15 + 277) = *(_WORD *)((char *)v16 + 277);
        v38 = v16[36];
        v15[35] = v16[35];
        v15[36] = v38;
        swift_retain();
        swift_retain();
LABEL_23:
        v53 = (unint64_t)v16[41];
        if (v53 >> 2 == 0xFFFFFFFF)
        {
          v54 = *(_OWORD *)(v16 + 47);
          *(_OWORD *)(v15 + 45) = *(_OWORD *)(v16 + 45);
          *(_OWORD *)(v15 + 47) = v54;
          v15[49] = v16[49];
          v55 = *(_OWORD *)(v16 + 39);
          *(_OWORD *)(v15 + 37) = *(_OWORD *)(v16 + 37);
          *(_OWORD *)(v15 + 39) = v55;
          v56 = *(_OWORD *)(v16 + 43);
          *(_OWORD *)(v15 + 41) = *(_OWORD *)(v16 + 41);
          *(_OWORD *)(v15 + 43) = v56;
        }
        else
        {
          v57 = v16[37];
          v58 = (uint64_t)v16[38];
          v100 = (uint64_t)v16[40];
          v101 = (uint64_t)v16[39];
          v59 = (uint64_t)v16[42];
          v60 = (uint64_t)v16[43];
          v61 = v16[44];
          v102 = (uint64_t)v16[45];
          v103 = (uint64_t)v16[46];
          v107 = (uint64_t)v16[47];
          v110 = v16[48];
          v112 = (uint64_t)v16[49];
          outlined copy of PlatformItemList.Item.SystemItem(v57, v58, v101, v100, v53, v59, v60, (char)v61, v102, v103, v107, (char)v110, v112);
          v15[37] = v57;
          v15[38] = (void *)v58;
          v15[39] = (void *)v101;
          v15[40] = (void *)v100;
          v15[41] = (void *)v53;
          v15[42] = (void *)v59;
          v15[43] = (void *)v60;
          v15[44] = v61;
          v15[45] = (void *)v102;
          v15[46] = (void *)v103;
          v15[47] = (void *)v107;
          v15[48] = v110;
          v15[49] = (void *)v112;
        }
        v62 = v16[51];
        if (v62 == (void *)1)
        {
          v63 = *((_OWORD *)v16 + 28);
          *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
          *((_OWORD *)v15 + 28) = v63;
          *((_BYTE *)v15 + 464) = *((_BYTE *)v16 + 464);
          v64 = *((_OWORD *)v16 + 26);
          *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
          *((_OWORD *)v15 + 26) = v64;
LABEL_36:
          v70 = v16[60];
          v15[59] = v16[59];
          v15[60] = v70;
          v15[61] = v16[61];
          *((_BYTE *)v15 + 496) = *((_BYTE *)v16 + 496);
          v71 = v16[63];
          swift_bridgeObjectRetain();
          if (v71)
          {
            v72 = v16[64];
            v15[63] = v71;
            v15[64] = v72;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v15 + 63) = *(_OWORD *)(v16 + 63);
          }
          *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
          v73 = v16[66];
          if (v73)
          {
            v15[66] = v73;
            v15[67] = v16[67];
            v15[68] = v16[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
            v15[68] = v16[68];
          }
          v74 = v16[69];
          v106 = v17;
          if (v74 == (void *)1)
          {
            *(_OWORD *)(v15 + 69) = *(_OWORD *)(v16 + 69);
            v15[71] = v16[71];
          }
          else
          {
            v15[69] = v74;
            v75 = v16[70];
            swift_retain();
            if (v75)
            {
              v76 = v16[71];
              v15[70] = v75;
              v15[71] = v76;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v15 + 35) = *((_OWORD *)v16 + 35);
            }
          }
          v77 = v16[72];
          v15[72] = v77;
          v15[73] = v16[73];
          v15[74] = v16[74];
          v15[75] = v16[75];
          v15[76] = v16[76];
          v15[77] = v16[77];
          v15[78] = v16[78];
          *((_WORD *)v15 + 316) = *((_WORD *)v16 + 316);
          *((_BYTE *)v15 + 634) = *((_BYTE *)v16 + 634);
          v111 = (int *)type metadata accessor for PlatformItemList.Item();
          v78 = v111[28];
          v113 = (char *)v15 + v78;
          v79 = (char *)v16 + v78;
          v80 = type metadata accessor for CommandOperation();
          v104 = *(_QWORD *)(v80 - 8);
          v108 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v104 + 48);
          v81 = v77;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v108(v79, 1, v80))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v113, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
            v18 = v105;
            v17 = v106;
          }
          else
          {
            *v113 = *v79;
            v83 = *(int *)(v80 + 20);
            v84 = v79;
            v85 = &v113[v83];
            v86 = &v84[v83];
            v109 = v80;
            v87 = *(_QWORD *)&v84[v83];
            v88 = *(_QWORD *)&v84[v83 + 8];
            v89 = v84[v83 + 16];
            outlined copy of Text.Storage(v87, v88, v89);
            *(_QWORD *)v85 = v87;
            *((_QWORD *)v85 + 1) = v88;
            v85[16] = v89;
            *((_QWORD *)v85 + 3) = *((_QWORD *)v86 + 3);
            v90 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v91 = &v85[v90];
            v92 = &v86[v90];
            v93 = type metadata accessor for UUID();
            v94 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
            swift_bridgeObjectRetain();
            v94(v91, v92, v93);
            v95 = *(int *)(v109 + 24);
            v96 = &v113[v95];
            v97 = &v84[v95];
            if (*v97)
            {
              v98 = v97[1];
              *v96 = *v97;
              v96[1] = v98;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v96 = *(_OWORD *)v97;
            }
            v18 = v105;
            v17 = v106;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v113, 0, 1, v109);
          }
          *((_BYTE *)v15 + v111[29]) = *((_BYTE *)v16 + v111[29]);
          *((_BYTE *)v15 + v111[30]) = *((_BYTE *)v16 + v111[30]);
          *((_BYTE *)v15 + v111[31]) = *((_BYTE *)v16 + v111[31]);
          *((_BYTE *)v15 + v111[32]) = *((_BYTE *)v16 + v111[32]);
          *(void **)((char *)v15 + v111[33]) = *(void **)((char *)v16 + v111[33]);
          swift_retain();
          goto LABEL_54;
        }
        *((_DWORD *)v15 + 100) = *((_DWORD *)v16 + 100);
        *((_BYTE *)v15 + 404) = *((_BYTE *)v16 + 404);
        if (v62)
        {
          v65 = v16[52];
          v15[51] = v62;
          v15[52] = v65;
          swift_retain();
          v66 = v16[53];
          if (v66)
            goto LABEL_30;
        }
        else
        {
          *(_OWORD *)(v15 + 51) = *(_OWORD *)(v16 + 51);
          v66 = v16[53];
          if (v66)
          {
LABEL_30:
            v67 = v16[54];
            v15[53] = v66;
            v15[54] = v67;
            swift_retain();
            v68 = v16[55];
            if (v68)
            {
LABEL_31:
              v69 = v16[56];
              v15[55] = v68;
              v15[56] = v69;
              swift_retain();
LABEL_35:
              v15[57] = v16[57];
              *((_BYTE *)v15 + 464) = *((_BYTE *)v16 + 464);
              goto LABEL_36;
            }
LABEL_34:
            *(_OWORD *)(v15 + 55) = *(_OWORD *)(v16 + 55);
            goto LABEL_35;
          }
        }
        *(_OWORD *)(v15 + 53) = *(_OWORD *)(v16 + 53);
        v68 = v16[55];
        if (v68)
          goto LABEL_31;
        goto LABEL_34;
      }
    }
    else
    {
      v42 = *((unsigned __int8 *)v16 + 72);
      if (v42 == 255)
      {
        *(_QWORD *)v25 = *(_QWORD *)v26;
        *((_BYTE *)v15 + 72) = *((_BYTE *)v16 + 72);
      }
      else
      {
        v43 = v16[8];
        outlined copy of GraphicsImage.Contents(v43, *((_BYTE *)v16 + 72));
        v15[8] = v43;
        *((_BYTE *)v15 + 72) = v42;
        v27 = (unint64_t)v16[23];
      }
      v15[10] = v16[10];
      *(_OWORD *)(v15 + 11) = *(_OWORD *)(v16 + 11);
      *((_BYTE *)v15 + 104) = *((_BYTE *)v16 + 104);
      *(_OWORD *)((char *)v15 + 108) = *(_OWORD *)((char *)v16 + 108);
      *((_BYTE *)v15 + 124) = *((_BYTE *)v16 + 124);
      v44 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v44;
      *((_WORD *)v15 + 80) = *((_WORD *)v16 + 80);
      *((_BYTE *)v15 + 162) = *((_BYTE *)v16 + 162);
      *((_BYTE *)v15 + 163) = *((_BYTE *)v16 + 163);
      if (v27 >> 1 == 0xFFFFFFFF)
      {
        v45 = *(_OWORD *)(v16 + 23);
        *(_OWORD *)(v15 + 21) = *(_OWORD *)(v16 + 21);
        *(_OWORD *)(v15 + 23) = v45;
      }
      else
      {
        v46 = (uint64_t)v16[21];
        v47 = (uint64_t)v16[22];
        v48 = v16[24];
        outlined copy of AccessibilityImageLabel(v46, v47, v27);
        v15[21] = (void *)v46;
        v15[22] = (void *)v47;
        v15[23] = (void *)v27;
        v15[24] = v48;
      }
      v49 = v16[26];
      v15[25] = v16[25];
      v15[26] = v49;
      *((_WORD *)v15 + 108) = *((_WORD *)v16 + 108);
      *((_DWORD *)v15 + 55) = *((_DWORD *)v16 + 55);
      *((_BYTE *)v15 + 224) = *((_BYTE *)v16 + 224);
      v50 = v16[29];
      v15[29] = v50;
      *((_WORD *)v15 + 120) = *((_WORD *)v16 + 120);
      *((_BYTE *)v15 + 242) = *((_BYTE *)v16 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v51 = v50;
      v35 = v16[32];
      if (v35)
        goto LABEL_11;
    }
    v52 = *(_OWORD *)(v16 + 33);
    *(_OWORD *)(v15 + 31) = *(_OWORD *)(v16 + 31);
    *(_OWORD *)(v15 + 33) = v52;
    *(_OWORD *)(v15 + 35) = *(_OWORD *)(v16 + 35);
    goto LABEL_23;
  }
  v11 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

void destroy for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 56) == 1)
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v4);
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }

    swift_bridgeObjectRelease();
    swift_release();
    v6 = *(_QWORD *)(v4 + 184);
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v8 = *(unsigned __int8 *)(v4 + 72);
      if (v8 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
        v6 = *(_QWORD *)(v4 + 184);
        v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v7 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v6);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      v9 = *(void **)(v4 + 264);
      if ((unint64_t)v9 >= 2)

      swift_release();
      swift_release();
    }
    v10 = *(_QWORD *)(v4 + 328);
    if (v10 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(_QWORD *)(v4 + 304), *(_QWORD *)(v4 + 312), *(_QWORD *)(v4 + 320), v10, *(_QWORD *)(v4 + 336), *(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 352), *(_QWORD *)(v4 + 360), *(_QWORD *)(v4 + 368), *(_QWORD *)(v4 + 376), *(_QWORD *)(v4 + 384), *(_QWORD *)(v4 + 392));
    v11 = *(_QWORD *)(v4 + 408);
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 504))
          swift_release();
        if (*(_QWORD *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v4 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v4 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        v13 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
        {
          v14 = v12 + *(int *)(v13 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
          swift_bridgeObjectRelease();
          v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v16 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
          if (*(_QWORD *)(v12 + *(int *)(v13 + 24)))
            swift_release();
        }
        swift_release();
        return;
      }
      swift_release();
    }
    if (*(_QWORD *)(v4 + 424))
      swift_release();
    if (*(_QWORD *)(v4 + 440))
      swift_release();
    goto LABEL_24;
  }
}

uint64_t initializeWithCopy for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(void **, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _OWORD *v23;
  _OWORD *v24;
  unint64_t v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  __int128 v37;
  void *v38;
  id v39;
  int v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  _BYTE *v83;
  char *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char *v90;
  _BYTE *v91;
  uint64_t v92;
  void (*v93)(char *, _BYTE *, uint64_t);
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  unsigned int (*v109)(_BYTE *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v7);
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    v10 = v7[1];
    *(_OWORD *)(a1 + 16) = *v7;
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v7 + 25);
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  v12 = *(int *)(a3 + 44);
  v13 = (char *)(a1 + v12);
  v14 = (void **)(a2 + v12);
  v15 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (!v17(v14, 1, v15))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v37 = *(_OWORD *)(v14 + 3);
      *(_OWORD *)(v13 + 24) = v37;
      (**(void (***)(void *, const void *))(v37 - 8))(v13, v14);
      *((_QWORD *)v13 + 5) = v14[5];
      *((_QWORD *)v13 + 6) = v14[6];
      *((_QWORD *)v13 + 7) = v14[7];
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      v38 = v14[10];
      *((_QWORD *)v13 + 10) = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      v39 = v38;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      return a1;
    }
    v106 = v16;
    v19 = *v14;
    v20 = v14[1];
    *(_QWORD *)v13 = *v14;
    *((_QWORD *)v13 + 1) = v20;
    v21 = v14[3];
    *((_QWORD *)v13 + 2) = v14[2];
    *((_QWORD *)v13 + 3) = v21;
    v13[32] = *((_BYTE *)v14 + 32);
    v22 = v14[6];
    *((_QWORD *)v13 + 5) = v14[5];
    *((_QWORD *)v13 + 6) = v22;
    v13[56] = *((_BYTE *)v14 + 56);
    v23 = v13 + 64;
    v24 = v14 + 8;
    v25 = (unint64_t)v14[23];
    v26 = v19;
    v27 = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v25 >> 1 == 4294967294)
    {
      v28 = *((_OWORD *)v14 + 13);
      *((_OWORD *)v13 + 12) = *((_OWORD *)v14 + 12);
      *((_OWORD *)v13 + 13) = v28;
      *((_OWORD *)v13 + 14) = *((_OWORD *)v14 + 14);
      *(_DWORD *)(v13 + 239) = *(_DWORD *)((char *)v14 + 239);
      v29 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v29;
      v30 = *((_OWORD *)v14 + 11);
      *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
      *((_OWORD *)v13 + 11) = v30;
      v31 = *((_OWORD *)v14 + 5);
      *v23 = *v24;
      *((_OWORD *)v13 + 5) = v31;
      v32 = *((_OWORD *)v14 + 7);
      *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
      *((_OWORD *)v13 + 7) = v32;
      v33 = v14[32];
      if (v33)
      {
LABEL_9:
        *((_QWORD *)v13 + 31) = v14[31];
        *((_QWORD *)v13 + 32) = v33;
        v34 = v14[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v34 >= 2)
          v35 = v34;
        *((_QWORD *)v13 + 33) = v34;
        *((_DWORD *)v13 + 68) = *((_DWORD *)v14 + 68);
        v13[276] = *((_BYTE *)v14 + 276);
        *(_WORD *)(v13 + 277) = *(_WORD *)((char *)v14 + 277);
        v36 = v14[36];
        *((_QWORD *)v13 + 35) = v14[35];
        *((_QWORD *)v13 + 36) = v36;
        swift_retain();
        swift_retain();
LABEL_21:
        v51 = (unint64_t)v14[41];
        if (v51 >> 2 == 0xFFFFFFFF)
        {
          v52 = *(_OWORD *)(v14 + 47);
          *(_OWORD *)(v13 + 360) = *(_OWORD *)(v14 + 45);
          *(_OWORD *)(v13 + 376) = v52;
          *((_QWORD *)v13 + 49) = v14[49];
          v53 = *(_OWORD *)(v14 + 39);
          *(_OWORD *)(v13 + 296) = *(_OWORD *)(v14 + 37);
          *(_OWORD *)(v13 + 312) = v53;
          v54 = *(_OWORD *)(v14 + 43);
          *(_OWORD *)(v13 + 328) = *(_OWORD *)(v14 + 41);
          *(_OWORD *)(v13 + 344) = v54;
        }
        else
        {
          v55 = v14[37];
          v56 = (uint64_t)v14[38];
          v99 = (uint64_t)v14[40];
          v100 = (uint64_t)v14[39];
          v57 = (uint64_t)v14[42];
          v58 = (uint64_t)v14[43];
          v59 = v14[44];
          v101 = (uint64_t)v14[45];
          v102 = (uint64_t)v14[46];
          v104 = (uint64_t)v14[47];
          v108 = v14[48];
          v111 = (uint64_t)v14[49];
          outlined copy of PlatformItemList.Item.SystemItem(v55, v56, v100, v99, v51, v57, v58, (char)v59, v101, v102, v104, (char)v108, v111);
          *((_QWORD *)v13 + 37) = v55;
          *((_QWORD *)v13 + 38) = v56;
          *((_QWORD *)v13 + 39) = v100;
          *((_QWORD *)v13 + 40) = v99;
          *((_QWORD *)v13 + 41) = v51;
          *((_QWORD *)v13 + 42) = v57;
          *((_QWORD *)v13 + 43) = v58;
          *((_QWORD *)v13 + 44) = v59;
          *((_QWORD *)v13 + 45) = v101;
          *((_QWORD *)v13 + 46) = v102;
          *((_QWORD *)v13 + 47) = v104;
          *((_QWORD *)v13 + 48) = v108;
          *((_QWORD *)v13 + 49) = v111;
        }
        v60 = v14[51];
        if (v60 == (void *)1)
        {
          v61 = *((_OWORD *)v14 + 28);
          *((_OWORD *)v13 + 27) = *((_OWORD *)v14 + 27);
          *((_OWORD *)v13 + 28) = v61;
          v13[464] = *((_BYTE *)v14 + 464);
          v62 = *((_OWORD *)v14 + 26);
          *((_OWORD *)v13 + 25) = *((_OWORD *)v14 + 25);
          *((_OWORD *)v13 + 26) = v62;
LABEL_34:
          v68 = v14[60];
          *((_QWORD *)v13 + 59) = v14[59];
          *((_QWORD *)v13 + 60) = v68;
          *((_QWORD *)v13 + 61) = v14[61];
          v13[496] = *((_BYTE *)v14 + 496);
          v69 = v14[63];
          swift_bridgeObjectRetain();
          if (v69)
          {
            v70 = v14[64];
            *((_QWORD *)v13 + 63) = v69;
            *((_QWORD *)v13 + 64) = v70;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 63);
          }
          *((_WORD *)v13 + 260) = *((_WORD *)v14 + 260);
          v71 = v14[66];
          if (v71)
          {
            *((_QWORD *)v13 + 66) = v71;
            *((_QWORD *)v13 + 67) = v14[67];
            *((_QWORD *)v13 + 68) = v14[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v13 + 33) = *((_OWORD *)v14 + 33);
            *((_QWORD *)v13 + 68) = v14[68];
          }
          v72 = v14[69];
          v107 = v15;
          if (v72 == (void *)1)
          {
            *(_OWORD *)(v13 + 552) = *(_OWORD *)(v14 + 69);
            *((_QWORD *)v13 + 71) = v14[71];
          }
          else
          {
            *((_QWORD *)v13 + 69) = v72;
            v73 = v14[70];
            swift_retain();
            if (v73)
            {
              v74 = v14[71];
              *((_QWORD *)v13 + 70) = v73;
              *((_QWORD *)v13 + 71) = v74;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v13 + 35) = *((_OWORD *)v14 + 35);
            }
          }
          v75 = v14[72];
          *((_QWORD *)v13 + 72) = v75;
          *((_QWORD *)v13 + 73) = v14[73];
          *((_QWORD *)v13 + 74) = v14[74];
          *((_QWORD *)v13 + 75) = v14[75];
          *((_QWORD *)v13 + 76) = v14[76];
          *((_QWORD *)v13 + 77) = v14[77];
          *((_QWORD *)v13 + 78) = v14[78];
          *((_WORD *)v13 + 316) = *((_WORD *)v14 + 316);
          v13[634] = *((_BYTE *)v14 + 634);
          v105 = type metadata accessor for PlatformItemList.Item();
          v76 = *(int *)(v105 + 112);
          v112 = &v13[v76];
          v77 = (char *)v14 + v76;
          v78 = type metadata accessor for CommandOperation();
          v103 = *(_QWORD *)(v78 - 8);
          v109 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v103 + 48);
          v79 = v75;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v109(v77, 1, v78))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v112, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
            v16 = v106;
            v15 = v107;
            v81 = (int *)v105;
          }
          else
          {
            *v112 = *v77;
            v82 = *(int *)(v78 + 20);
            v83 = v77;
            v84 = &v112[v82];
            v85 = &v83[v82];
            v110 = v78;
            v86 = *(_QWORD *)&v83[v82];
            v87 = *(_QWORD *)&v83[v82 + 8];
            v88 = v83[v82 + 16];
            outlined copy of Text.Storage(v86, v87, v88);
            *(_QWORD *)v84 = v86;
            *((_QWORD *)v84 + 1) = v87;
            v84[16] = v88;
            *((_QWORD *)v84 + 3) = *((_QWORD *)v85 + 3);
            v89 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v90 = &v84[v89];
            v91 = &v85[v89];
            v92 = type metadata accessor for UUID();
            v93 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
            swift_bridgeObjectRetain();
            v93(v90, v91, v92);
            v94 = *(int *)(v110 + 24);
            v95 = &v112[v94];
            v96 = &v83[v94];
            if (*v96)
            {
              v97 = v96[1];
              *(_QWORD *)v95 = *v96;
              *((_QWORD *)v95 + 1) = v97;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v95 = *(_OWORD *)v96;
            }
            v16 = v106;
            v15 = v107;
            v81 = (int *)v105;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v112, 0, 1, v110);
          }
          v13[v81[29]] = *((_BYTE *)v14 + v81[29]);
          v13[v81[30]] = *((_BYTE *)v14 + v81[30]);
          v13[v81[31]] = *((_BYTE *)v14 + v81[31]);
          v13[v81[32]] = *((_BYTE *)v14 + v81[32]);
          *(_QWORD *)&v13[v81[33]] = *(void **)((char *)v14 + v81[33]);
          swift_retain();
          goto LABEL_52;
        }
        *((_DWORD *)v13 + 100) = *((_DWORD *)v14 + 100);
        v13[404] = *((_BYTE *)v14 + 404);
        if (v60)
        {
          v63 = v14[52];
          *((_QWORD *)v13 + 51) = v60;
          *((_QWORD *)v13 + 52) = v63;
          swift_retain();
          v64 = v14[53];
          if (v64)
            goto LABEL_28;
        }
        else
        {
          *(_OWORD *)(v13 + 408) = *(_OWORD *)(v14 + 51);
          v64 = v14[53];
          if (v64)
          {
LABEL_28:
            v65 = v14[54];
            *((_QWORD *)v13 + 53) = v64;
            *((_QWORD *)v13 + 54) = v65;
            swift_retain();
            v66 = v14[55];
            if (v66)
            {
LABEL_29:
              v67 = v14[56];
              *((_QWORD *)v13 + 55) = v66;
              *((_QWORD *)v13 + 56) = v67;
              swift_retain();
LABEL_33:
              *((_QWORD *)v13 + 57) = v14[57];
              v13[464] = *((_BYTE *)v14 + 464);
              goto LABEL_34;
            }
LABEL_32:
            *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 55);
            goto LABEL_33;
          }
        }
        *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 53);
        v66 = v14[55];
        if (v66)
          goto LABEL_29;
        goto LABEL_32;
      }
    }
    else
    {
      v40 = *((unsigned __int8 *)v14 + 72);
      if (v40 == 255)
      {
        *(_QWORD *)v23 = *(_QWORD *)v24;
        v13[72] = *((_BYTE *)v14 + 72);
      }
      else
      {
        v41 = v14[8];
        outlined copy of GraphicsImage.Contents(v41, *((_BYTE *)v14 + 72));
        *((_QWORD *)v13 + 8) = v41;
        v13[72] = v40;
        v25 = (unint64_t)v14[23];
      }
      *((_QWORD *)v13 + 10) = v14[10];
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 11);
      v13[104] = *((_BYTE *)v14 + 104);
      *(_OWORD *)(v13 + 108) = *(_OWORD *)((char *)v14 + 108);
      v13[124] = *((_BYTE *)v14 + 124);
      v42 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v42;
      *((_WORD *)v13 + 80) = *((_WORD *)v14 + 80);
      v13[162] = *((_BYTE *)v14 + 162);
      v13[163] = *((_BYTE *)v14 + 163);
      if (v25 >> 1 == 0xFFFFFFFF)
      {
        v43 = *(_OWORD *)(v14 + 23);
        *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 21);
        *(_OWORD *)(v13 + 184) = v43;
      }
      else
      {
        v44 = (uint64_t)v14[21];
        v45 = (uint64_t)v14[22];
        v46 = v14[24];
        outlined copy of AccessibilityImageLabel(v44, v45, v25);
        *((_QWORD *)v13 + 21) = v44;
        *((_QWORD *)v13 + 22) = v45;
        *((_QWORD *)v13 + 23) = v25;
        *((_QWORD *)v13 + 24) = v46;
      }
      v47 = v14[26];
      *((_QWORD *)v13 + 25) = v14[25];
      *((_QWORD *)v13 + 26) = v47;
      *((_WORD *)v13 + 108) = *((_WORD *)v14 + 108);
      *((_DWORD *)v13 + 55) = *((_DWORD *)v14 + 55);
      v13[224] = *((_BYTE *)v14 + 224);
      v48 = v14[29];
      *((_QWORD *)v13 + 29) = v48;
      *((_WORD *)v13 + 120) = *((_WORD *)v14 + 120);
      v13[242] = *((_BYTE *)v14 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v49 = v48;
      v33 = v14[32];
      if (v33)
        goto LABEL_9;
    }
    v50 = *(_OWORD *)(v14 + 33);
    *(_OWORD *)(v13 + 248) = *(_OWORD *)(v14 + 31);
    *(_OWORD *)(v13 + 264) = v50;
    *(_OWORD *)(v13 + 280) = *(_OWORD *)(v14 + 35);
    goto LABEL_21;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void **, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  void *v20;
  _OWORD *v21;
  id *v22;
  unint64_t v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  id v36;
  int v37;
  void *v38;
  void *v39;
  _OWORD *v40;
  id *v41;
  unint64_t v42;
  id v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  void *v55;
  id v56;
  int v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  int v62;
  id v63;
  id v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  int v73;
  void *v74;
  id v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  __int128 v102;
  void *v103;
  _OWORD *v104;
  __int128 v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  void (*v125)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  id v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  int v140;
  void *v141;
  id v142;
  void *v143;
  id v144;
  int v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  __int128 v172;
  void *v173;
  _OWORD *v174;
  __int128 v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  _BYTE *v193;
  _BYTE *v194;
  uint64_t v195;
  void (*v196)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  void *__dstb;
  _BYTE *__dst;
  void *__dstc;
  int *__dsta;
  uint64_t v216;
  void *v217;
  unsigned int (*v218)(_BYTE *, uint64_t, uint64_t);
  uint64_t v219;
  void *v220;
  unsigned int (*v221)(_BYTE *, uint64_t, uint64_t);
  int *v222;
  void *v223;
  _BYTE *v224;
  uint64_t v225;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 16);
    if (*(_BYTE *)(a2 + 56) == 1)
    {
      v6 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 16);
      v8 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 44);
  v10 = (void **)(a1 + v9);
  v11 = (void **)(a2 + v9);
  v12 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (v16)
    {
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_10:
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, v17);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      return a1;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v54 = v11[3];
      v10[3] = v54;
      v10[4] = v11[4];
      (**((void (***)(void **, void **))v54 - 1))(v10, v11);
      v10[5] = v11[5];
      *((_DWORD *)v10 + 12) = *((_DWORD *)v11 + 12);
      *((_DWORD *)v10 + 13) = *((_DWORD *)v11 + 13);
      v10[7] = v11[7];
      v10[8] = v11[8];
      v10[9] = v11[9];
      v55 = v11[10];
      v10[10] = v55;
      swift_retain();
      swift_bridgeObjectRetain();
      v56 = v55;
LABEL_65:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      return a1;
    }
    v216 = v13;
    v19 = *v11;
    *v10 = *v11;
    v20 = v11[1];
    v10[1] = v20;
    v10[2] = v11[2];
    v10[3] = v11[3];
    *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
    v10[5] = v11[5];
    v10[6] = v11[6];
    *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
    v21 = v10 + 8;
    v22 = v11 + 8;
    v23 = (unint64_t)v11[23];
    v24 = v19;
    v25 = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v23 >> 1 == 4294967294)
    {
      v26 = *(_OWORD *)v22;
      v27 = *((_OWORD *)v11 + 5);
      v28 = *((_OWORD *)v11 + 7);
      *((_OWORD *)v10 + 6) = *((_OWORD *)v11 + 6);
      *((_OWORD *)v10 + 7) = v28;
      *v21 = v26;
      *((_OWORD *)v10 + 5) = v27;
      v29 = *((_OWORD *)v11 + 8);
      v30 = *((_OWORD *)v11 + 9);
      v31 = *((_OWORD *)v11 + 11);
      *((_OWORD *)v10 + 10) = *((_OWORD *)v11 + 10);
      *((_OWORD *)v10 + 11) = v31;
      *((_OWORD *)v10 + 8) = v29;
      *((_OWORD *)v10 + 9) = v30;
      v32 = *((_OWORD *)v11 + 12);
      v33 = *((_OWORD *)v11 + 13);
      v34 = *((_OWORD *)v11 + 14);
      *(_DWORD *)((char *)v10 + 239) = *(_DWORD *)((char *)v11 + 239);
      *((_OWORD *)v10 + 13) = v33;
      *((_OWORD *)v10 + 14) = v34;
      *((_OWORD *)v10 + 12) = v32;
      if (v11[32])
      {
LABEL_14:
        v10[31] = v11[31];
        v10[32] = v11[32];
        v35 = v11[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v35 >= 2)
          v36 = v35;
        v10[33] = v35;
        v37 = *((_DWORD *)v11 + 68);
        *((_BYTE *)v10 + 276) = *((_BYTE *)v11 + 276);
        *((_DWORD *)v10 + 68) = v37;
        *((_BYTE *)v10 + 277) = *((_BYTE *)v11 + 277);
        *((_BYTE *)v10 + 278) = *((_BYTE *)v11 + 278);
        v10[35] = v11[35];
        v10[36] = v11[36];
        swift_retain();
        swift_retain();
LABEL_33:
        v78 = (unint64_t)v11[41];
        v225 = v12;
        if (v78 >> 2 == 0xFFFFFFFF)
        {
          v79 = *(_OWORD *)(v11 + 37);
          v80 = *(_OWORD *)(v11 + 41);
          *(_OWORD *)(v10 + 39) = *(_OWORD *)(v11 + 39);
          *(_OWORD *)(v10 + 41) = v80;
          *(_OWORD *)(v10 + 37) = v79;
          v81 = *(_OWORD *)(v11 + 43);
          v82 = *(_OWORD *)(v11 + 45);
          v83 = *(_OWORD *)(v11 + 47);
          v10[49] = v11[49];
          *(_OWORD *)(v10 + 45) = v82;
          *(_OWORD *)(v10 + 47) = v83;
          *(_OWORD *)(v10 + 43) = v81;
        }
        else
        {
          v84 = v11[37];
          v85 = (uint64_t)v11[38];
          v86 = (uint64_t)v11[39];
          v87 = (uint64_t)v11[42];
          v88 = (uint64_t)v11[43];
          v89 = v11[44];
          v201 = (uint64_t)v11[40];
          v202 = (uint64_t)v11[45];
          v205 = (uint64_t)v11[46];
          v208 = (uint64_t)v11[47];
          __dstb = v11[48];
          v220 = v11[49];
          outlined copy of PlatformItemList.Item.SystemItem(v84, v85, v86, v201, v78, v87, v88, (char)v89, v202, v205, v208, (char)__dstb, (uint64_t)v220);
          v10[37] = v84;
          v10[38] = (void *)v85;
          v10[39] = (void *)v86;
          v10[40] = (void *)v201;
          v10[41] = (void *)v78;
          v10[42] = (void *)v87;
          v10[43] = (void *)v88;
          v10[44] = v89;
          v10[45] = (void *)v202;
          v10[46] = (void *)v205;
          v10[47] = (void *)v208;
          v10[48] = __dstb;
          v10[49] = v220;
        }
        if (v11[51] == (void *)1)
        {
          *((_OWORD *)v10 + 25) = *((_OWORD *)v11 + 25);
          v90 = *((_OWORD *)v11 + 26);
          v91 = *((_OWORD *)v11 + 27);
          v92 = *((_OWORD *)v11 + 28);
          *((_BYTE *)v10 + 464) = *((_BYTE *)v11 + 464);
          *((_OWORD *)v10 + 27) = v91;
          *((_OWORD *)v10 + 28) = v92;
          *((_OWORD *)v10 + 26) = v90;
          goto LABEL_46;
        }
        *((_BYTE *)v10 + 400) = *((_BYTE *)v11 + 400);
        *((_BYTE *)v10 + 401) = *((_BYTE *)v11 + 401);
        *((_BYTE *)v10 + 402) = *((_BYTE *)v11 + 402);
        *((_BYTE *)v10 + 403) = *((_BYTE *)v11 + 403);
        *((_BYTE *)v10 + 404) = *((_BYTE *)v11 + 404);
        v93 = v11[51];
        if (v93)
        {
          v94 = v11[52];
          v10[51] = v93;
          v10[52] = v94;
          swift_retain();
          v95 = v11[53];
          if (v95)
            goto LABEL_40;
        }
        else
        {
          *(_OWORD *)(v10 + 51) = *(_OWORD *)(v11 + 51);
          v95 = v11[53];
          if (v95)
          {
LABEL_40:
            v96 = v11[54];
            v10[53] = v95;
            v10[54] = v96;
            swift_retain();
            v97 = v11[55];
            if (v97)
            {
LABEL_41:
              v98 = v11[56];
              v10[55] = v97;
              v10[56] = v98;
              swift_retain();
LABEL_45:
              v10[57] = v11[57];
              *((_BYTE *)v10 + 464) = *((_BYTE *)v11 + 464);
LABEL_46:
              v10[59] = v11[59];
              v10[60] = v11[60];
              v10[61] = v11[61];
              *((_BYTE *)v10 + 496) = *((_BYTE *)v11 + 496);
              v99 = v11[63];
              swift_bridgeObjectRetain();
              if (v99)
              {
                v100 = v11[64];
                v10[63] = v99;
                v10[64] = v100;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(v10 + 63) = *(_OWORD *)(v11 + 63);
              }
              *((_WORD *)v10 + 260) = *((_WORD *)v11 + 260);
              v101 = v11[66];
              if (v101)
              {
                v10[66] = v101;
                v10[67] = v11[67];
                v10[68] = v11[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v102 = *((_OWORD *)v11 + 33);
                v10[68] = v11[68];
                *((_OWORD *)v10 + 33) = v102;
              }
              v103 = v11[69];
              if (v103 == (void *)1)
              {
                v104 = v10 + 69;
                v105 = *(_OWORD *)(v11 + 69);
                v10[71] = v11[71];
              }
              else
              {
                v10[69] = v103;
                v106 = v11[70];
                swift_retain();
                if (v106)
                {
                  v107 = v11[71];
                  v10[70] = v106;
                  v10[71] = v107;
                  swift_retain();
LABEL_58:
                  v108 = v11[72];
                  v10[72] = v108;
                  v10[73] = v11[73];
                  v10[74] = v11[74];
                  v10[75] = v11[75];
                  v10[76] = v11[76];
                  v10[77] = v11[77];
                  v10[78] = v11[78];
                  *((_BYTE *)v10 + 632) = *((_BYTE *)v11 + 632);
                  *((_BYTE *)v10 + 633) = *((_BYTE *)v11 + 633);
                  *((_BYTE *)v10 + 634) = *((_BYTE *)v11 + 634);
                  v109 = type metadata accessor for PlatformItemList.Item();
                  v110 = *(int *)(v109 + 112);
                  v209 = (int *)v109;
                  __dst = (char *)v10 + v110;
                  v111 = (char *)v11 + v110;
                  v112 = type metadata accessor for CommandOperation();
                  v206 = *(_QWORD *)(v112 - 8);
                  v221 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v206 + 48);
                  v113 = v108;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v221(v111, 1, v112))
                  {
                    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
                    memcpy(__dst, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
                    v12 = v225;
                    v13 = v216;
                  }
                  else
                  {
                    *__dst = *v111;
                    v115 = *(int *)(v112 + 20);
                    v116 = &__dst[v115];
                    v117 = &v111[v115];
                    v203 = v111;
                    v222 = (int *)v112;
                    v118 = *(_QWORD *)&v111[v115];
                    v119 = *((_QWORD *)v117 + 1);
                    v120 = v117[16];
                    outlined copy of Text.Storage(v118, v119, v120);
                    *(_QWORD *)v116 = v118;
                    *((_QWORD *)v116 + 1) = v119;
                    v116[16] = v120;
                    *((_QWORD *)v116 + 3) = *((_QWORD *)v117 + 3);
                    v121 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v122 = &v116[v121];
                    v123 = &v117[v121];
                    v124 = type metadata accessor for UUID();
                    v125 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v125(v122, v123, v124);
                    v126 = v222[6];
                    v127 = &__dst[v126];
                    v128 = &v203[v126];
                    if (*v128)
                    {
                      v129 = v128[1];
                      *v127 = *v128;
                      v127[1] = v129;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v127 = *(_OWORD *)v128;
                    }
                    v12 = v225;
                    v13 = v216;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v206 + 56))(__dst, 0, 1, v222);
                  }
                  *((_BYTE *)v10 + v209[29]) = *((_BYTE *)v11 + v209[29]);
                  *((_BYTE *)v10 + v209[30]) = *((_BYTE *)v11 + v209[30]);
                  *((_BYTE *)v10 + v209[31]) = *((_BYTE *)v11 + v209[31]);
                  *((_BYTE *)v10 + v209[32]) = *((_BYTE *)v11 + v209[32]);
                  *(void **)((char *)v10 + v209[33]) = *(void **)((char *)v11 + v209[33]);
                  swift_retain();
                  goto LABEL_65;
                }
                v104 = v10 + 70;
                v105 = *((_OWORD *)v11 + 35);
              }
              *v104 = v105;
              goto LABEL_58;
            }
LABEL_44:
            *(_OWORD *)(v10 + 55) = *(_OWORD *)(v11 + 55);
            goto LABEL_45;
          }
        }
        *(_OWORD *)(v10 + 53) = *(_OWORD *)(v11 + 53);
        v97 = v11[55];
        if (v97)
          goto LABEL_41;
        goto LABEL_44;
      }
    }
    else
    {
      v57 = *((unsigned __int8 *)v11 + 72);
      if (v57 == 255)
      {
        v64 = *v22;
        *((_BYTE *)v10 + 72) = *((_BYTE *)v11 + 72);
        *(_QWORD *)v21 = v64;
      }
      else
      {
        v58 = *v22;
        outlined copy of GraphicsImage.Contents(*v22, *((_BYTE *)v11 + 72));
        v10[8] = v58;
        *((_BYTE *)v10 + 72) = v57;
      }
      v10[10] = v11[10];
      *(_OWORD *)(v10 + 11) = *(_OWORD *)(v11 + 11);
      *((_BYTE *)v10 + 104) = *((_BYTE *)v11 + 104);
      v65 = *(_OWORD *)((char *)v11 + 108);
      *((_BYTE *)v10 + 124) = *((_BYTE *)v11 + 124);
      *(_OWORD *)((char *)v10 + 108) = v65;
      v66 = *((_OWORD *)v11 + 8);
      v67 = *((_OWORD *)v11 + 9);
      *((_BYTE *)v10 + 160) = *((_BYTE *)v11 + 160);
      *((_OWORD *)v10 + 8) = v66;
      *((_OWORD *)v10 + 9) = v67;
      *((_BYTE *)v10 + 161) = *((_BYTE *)v11 + 161);
      *((_BYTE *)v10 + 162) = *((_BYTE *)v11 + 162);
      *((_BYTE *)v10 + 163) = *((_BYTE *)v11 + 163);
      v68 = (unint64_t)v11[23];
      if (v68 >> 1 == 0xFFFFFFFF)
      {
        v69 = *(_OWORD *)(v11 + 23);
        *(_OWORD *)(v10 + 21) = *(_OWORD *)(v11 + 21);
        *(_OWORD *)(v10 + 23) = v69;
      }
      else
      {
        v70 = (uint64_t)v11[21];
        v71 = (uint64_t)v11[22];
        v72 = v11[24];
        outlined copy of AccessibilityImageLabel(v70, v71, (uint64_t)v11[23]);
        v10[21] = (void *)v70;
        v10[22] = (void *)v71;
        v10[23] = (void *)v68;
        v10[24] = v72;
      }
      v10[25] = v11[25];
      v10[26] = v11[26];
      *((_BYTE *)v10 + 216) = *((_BYTE *)v11 + 216);
      *((_BYTE *)v10 + 217) = *((_BYTE *)v11 + 217);
      v73 = *((_DWORD *)v11 + 55);
      *((_BYTE *)v10 + 224) = *((_BYTE *)v11 + 224);
      *((_DWORD *)v10 + 55) = v73;
      v74 = v11[29];
      v10[29] = v74;
      *((_WORD *)v10 + 120) = *((_WORD *)v11 + 120);
      *((_BYTE *)v10 + 242) = *((_BYTE *)v11 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v75 = v74;
      if (v11[32])
        goto LABEL_14;
    }
    v76 = *(_OWORD *)(v11 + 31);
    v77 = *(_OWORD *)(v11 + 35);
    *(_OWORD *)(v10 + 33) = *(_OWORD *)(v11 + 33);
    *(_OWORD *)(v10 + 35) = v77;
    *(_OWORD *)(v10 + 31) = v76;
    goto LABEL_33;
  }
  if (v16)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_10;
  }
  if (a1 == a2)
    return a1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v59 = v11[3];
    v10[3] = v59;
    v10[4] = v11[4];
    (**((void (***)(void **, void **))v59 - 1))(v10, v11);
    v10[5] = v11[5];
    *((_DWORD *)v10 + 12) = *((_DWORD *)v11 + 12);
    *((_DWORD *)v10 + 13) = *((_DWORD *)v11 + 13);
    v10[7] = v11[7];
    v10[8] = v11[8];
    v10[9] = v11[9];
    v60 = v11[10];
    v10[10] = v60;
    swift_retain();
    swift_bridgeObjectRetain();
    v61 = v60;
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  v38 = *v11;
  *v10 = *v11;
  v39 = v11[1];
  v10[1] = v39;
  v10[2] = v11[2];
  v10[3] = v11[3];
  *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
  v10[5] = v11[5];
  v10[6] = v11[6];
  *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
  v40 = v10 + 8;
  v41 = v11 + 8;
  v42 = (unint64_t)v11[23];
  v43 = v38;
  v44 = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v42 >> 1 == 4294967294)
  {
    v45 = *(_OWORD *)v41;
    v46 = *((_OWORD *)v11 + 5);
    v47 = *((_OWORD *)v11 + 7);
    *((_OWORD *)v10 + 6) = *((_OWORD *)v11 + 6);
    *((_OWORD *)v10 + 7) = v47;
    *v40 = v45;
    *((_OWORD *)v10 + 5) = v46;
    v48 = *((_OWORD *)v11 + 8);
    v49 = *((_OWORD *)v11 + 9);
    v50 = *((_OWORD *)v11 + 11);
    *((_OWORD *)v10 + 10) = *((_OWORD *)v11 + 10);
    *((_OWORD *)v10 + 11) = v50;
    *((_OWORD *)v10 + 8) = v48;
    *((_OWORD *)v10 + 9) = v49;
    v51 = *((_OWORD *)v11 + 12);
    v52 = *((_OWORD *)v11 + 13);
    v53 = *((_OWORD *)v11 + 14);
    *(_DWORD *)((char *)v10 + 239) = *(_DWORD *)((char *)v11 + 239);
    *((_OWORD *)v10 + 13) = v52;
    *((_OWORD *)v10 + 14) = v53;
    *((_OWORD *)v10 + 12) = v51;
  }
  else
  {
    v62 = *((unsigned __int8 *)v11 + 72);
    if (v62 == 255)
    {
      v131 = *v41;
      *((_BYTE *)v10 + 72) = *((_BYTE *)v11 + 72);
      *(_QWORD *)v40 = v131;
    }
    else
    {
      v63 = *v41;
      outlined copy of GraphicsImage.Contents(*v41, *((_BYTE *)v11 + 72));
      v10[8] = v63;
      *((_BYTE *)v10 + 72) = v62;
    }
    v10[10] = v11[10];
    *(_OWORD *)(v10 + 11) = *(_OWORD *)(v11 + 11);
    *((_BYTE *)v10 + 104) = *((_BYTE *)v11 + 104);
    v132 = *(_OWORD *)((char *)v11 + 108);
    *((_BYTE *)v10 + 124) = *((_BYTE *)v11 + 124);
    *(_OWORD *)((char *)v10 + 108) = v132;
    v133 = *((_OWORD *)v11 + 8);
    v134 = *((_OWORD *)v11 + 9);
    *((_BYTE *)v10 + 160) = *((_BYTE *)v11 + 160);
    *((_OWORD *)v10 + 8) = v133;
    *((_OWORD *)v10 + 9) = v134;
    *((_BYTE *)v10 + 161) = *((_BYTE *)v11 + 161);
    *((_BYTE *)v10 + 162) = *((_BYTE *)v11 + 162);
    *((_BYTE *)v10 + 163) = *((_BYTE *)v11 + 163);
    v135 = (unint64_t)v11[23];
    if (v135 >> 1 == 0xFFFFFFFF)
    {
      v136 = *(_OWORD *)(v11 + 23);
      *(_OWORD *)(v10 + 21) = *(_OWORD *)(v11 + 21);
      *(_OWORD *)(v10 + 23) = v136;
    }
    else
    {
      v137 = (uint64_t)v11[21];
      v138 = (uint64_t)v11[22];
      v139 = v11[24];
      outlined copy of AccessibilityImageLabel(v137, v138, (uint64_t)v11[23]);
      v10[21] = (void *)v137;
      v10[22] = (void *)v138;
      v10[23] = (void *)v135;
      v10[24] = v139;
    }
    v10[25] = v11[25];
    v10[26] = v11[26];
    *((_BYTE *)v10 + 216) = *((_BYTE *)v11 + 216);
    *((_BYTE *)v10 + 217) = *((_BYTE *)v11 + 217);
    v140 = *((_DWORD *)v11 + 55);
    *((_BYTE *)v10 + 224) = *((_BYTE *)v11 + 224);
    *((_DWORD *)v10 + 55) = v140;
    v141 = v11[29];
    v10[29] = v141;
    *((_WORD *)v10 + 120) = *((_WORD *)v11 + 120);
    *((_BYTE *)v10 + 242) = *((_BYTE *)v11 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v142 = v141;
  }
  if (v11[32])
  {
    v10[31] = v11[31];
    v10[32] = v11[32];
    v143 = v11[33];
    swift_bridgeObjectRetain();
    if ((unint64_t)v143 >= 2)
      v144 = v143;
    v10[33] = v143;
    v145 = *((_DWORD *)v11 + 68);
    *((_BYTE *)v10 + 276) = *((_BYTE *)v11 + 276);
    *((_DWORD *)v10 + 68) = v145;
    *((_BYTE *)v10 + 277) = *((_BYTE *)v11 + 277);
    *((_BYTE *)v10 + 278) = *((_BYTE *)v11 + 278);
    v10[35] = v11[35];
    v10[36] = v11[36];
    swift_retain();
    swift_retain();
  }
  else
  {
    v146 = *(_OWORD *)(v11 + 31);
    v147 = *(_OWORD *)(v11 + 35);
    *(_OWORD *)(v10 + 33) = *(_OWORD *)(v11 + 33);
    *(_OWORD *)(v10 + 35) = v147;
    *(_OWORD *)(v10 + 31) = v146;
  }
  v148 = (unint64_t)v11[41];
  if (v148 >> 2 == 0xFFFFFFFF)
  {
    v149 = *(_OWORD *)(v11 + 37);
    v150 = *(_OWORD *)(v11 + 41);
    *(_OWORD *)(v10 + 39) = *(_OWORD *)(v11 + 39);
    *(_OWORD *)(v10 + 41) = v150;
    *(_OWORD *)(v10 + 37) = v149;
    v151 = *(_OWORD *)(v11 + 43);
    v152 = *(_OWORD *)(v11 + 45);
    v153 = *(_OWORD *)(v11 + 47);
    v10[49] = v11[49];
    *(_OWORD *)(v10 + 45) = v152;
    *(_OWORD *)(v10 + 47) = v153;
    *(_OWORD *)(v10 + 43) = v151;
  }
  else
  {
    v154 = v11[37];
    v155 = (uint64_t)v11[38];
    v156 = (uint64_t)v11[39];
    v158 = (uint64_t)v11[42];
    v157 = (uint64_t)v11[43];
    v159 = v11[44];
    v204 = (uint64_t)v11[40];
    v207 = (uint64_t)v11[45];
    v210 = (uint64_t)v11[46];
    __dstc = v11[47];
    v217 = v11[48];
    v223 = v11[49];
    outlined copy of PlatformItemList.Item.SystemItem(v154, v155, v156, v204, v148, v158, v157, (char)v159, v207, v210, (uint64_t)__dstc, (char)v217, (uint64_t)v223);
    v10[37] = v154;
    v10[38] = (void *)v155;
    v10[39] = (void *)v156;
    v10[40] = (void *)v204;
    v10[41] = (void *)v148;
    v10[42] = (void *)v158;
    v10[43] = (void *)v157;
    v10[44] = v159;
    v10[45] = (void *)v207;
    v10[46] = (void *)v210;
    v10[47] = __dstc;
    v10[48] = v217;
    v10[49] = v223;
  }
  if (v11[51] == (void *)1)
  {
    *((_OWORD *)v10 + 25) = *((_OWORD *)v11 + 25);
    v160 = *((_OWORD *)v11 + 26);
    v161 = *((_OWORD *)v11 + 27);
    v162 = *((_OWORD *)v11 + 28);
    *((_BYTE *)v10 + 464) = *((_BYTE *)v11 + 464);
    *((_OWORD *)v10 + 27) = v161;
    *((_OWORD *)v10 + 28) = v162;
    *((_OWORD *)v10 + 26) = v160;
  }
  else
  {
    *((_BYTE *)v10 + 400) = *((_BYTE *)v11 + 400);
    *((_BYTE *)v10 + 401) = *((_BYTE *)v11 + 401);
    *((_BYTE *)v10 + 402) = *((_BYTE *)v11 + 402);
    *((_BYTE *)v10 + 403) = *((_BYTE *)v11 + 403);
    *((_BYTE *)v10 + 404) = *((_BYTE *)v11 + 404);
    v163 = v11[51];
    if (v163)
    {
      v164 = v11[52];
      v10[51] = v163;
      v10[52] = v164;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 51) = *(_OWORD *)(v11 + 51);
    }
    v165 = v11[53];
    if (v165)
    {
      v166 = v11[54];
      v10[53] = v165;
      v10[54] = v166;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 53) = *(_OWORD *)(v11 + 53);
    }
    v167 = v11[55];
    if (v167)
    {
      v168 = v11[56];
      v10[55] = v167;
      v10[56] = v168;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 55) = *(_OWORD *)(v11 + 55);
    }
    v10[57] = v11[57];
    *((_BYTE *)v10 + 464) = *((_BYTE *)v11 + 464);
  }
  v10[59] = v11[59];
  v10[60] = v11[60];
  v10[61] = v11[61];
  *((_BYTE *)v10 + 496) = *((_BYTE *)v11 + 496);
  v169 = v11[63];
  swift_bridgeObjectRetain();
  if (v169)
  {
    v170 = v11[64];
    v10[63] = v169;
    v10[64] = v170;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v10 + 63) = *(_OWORD *)(v11 + 63);
  }
  *((_WORD *)v10 + 260) = *((_WORD *)v11 + 260);
  v171 = v11[66];
  if (v171)
  {
    v10[66] = v171;
    v10[67] = v11[67];
    v10[68] = v11[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v172 = *((_OWORD *)v11 + 33);
    v10[68] = v11[68];
    *((_OWORD *)v10 + 33) = v172;
  }
  v173 = v11[69];
  if (v173 == (void *)1)
  {
    v174 = v10 + 69;
    v175 = *(_OWORD *)(v11 + 69);
    v10[71] = v11[71];
LABEL_103:
    *v174 = v175;
    goto LABEL_104;
  }
  v10[69] = v173;
  v176 = v11[70];
  swift_retain();
  if (!v176)
  {
    v174 = v10 + 70;
    v175 = *((_OWORD *)v11 + 35);
    goto LABEL_103;
  }
  v177 = v11[71];
  v10[70] = v176;
  v10[71] = v177;
  swift_retain();
LABEL_104:
  v178 = v11[72];
  v10[72] = v178;
  v10[73] = v11[73];
  v10[74] = v11[74];
  v10[75] = v11[75];
  v10[76] = v11[76];
  v10[77] = v11[77];
  v10[78] = v11[78];
  *((_BYTE *)v10 + 632) = *((_BYTE *)v11 + 632);
  *((_BYTE *)v10 + 633) = *((_BYTE *)v11 + 633);
  *((_BYTE *)v10 + 634) = *((_BYTE *)v11 + 634);
  __dsta = (int *)type metadata accessor for PlatformItemList.Item();
  v179 = __dsta[28];
  v224 = (char *)v10 + v179;
  v180 = (char *)v11 + v179;
  v181 = type metadata accessor for CommandOperation();
  v211 = *(_QWORD *)(v181 - 8);
  v218 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v211 + 48);
  v182 = v178;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v218(v180, 1, v181))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v224, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    v184 = __dsta;
  }
  else
  {
    *v224 = *v180;
    v185 = *(int *)(v181 + 20);
    v186 = v180;
    v187 = &v224[v185];
    v188 = &v186[v185];
    v219 = v181;
    v189 = *(_QWORD *)&v186[v185];
    v190 = *(_QWORD *)&v186[v185 + 8];
    v191 = v186[v185 + 16];
    outlined copy of Text.Storage(v189, v190, v191);
    *(_QWORD *)v187 = v189;
    *((_QWORD *)v187 + 1) = v190;
    v187[16] = v191;
    *((_QWORD *)v187 + 3) = *((_QWORD *)v188 + 3);
    v192 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v193 = &v187[v192];
    v194 = &v188[v192];
    v195 = type metadata accessor for UUID();
    v196 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v195 - 8) + 16);
    swift_bridgeObjectRetain();
    v196(v193, v194, v195);
    v197 = *(int *)(v219 + 24);
    v198 = &v224[v197];
    v199 = &v186[v197];
    if (*v199)
    {
      v200 = v199[1];
      *v198 = *v199;
      v198[1] = v200;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v198 = *(_OWORD *)v199;
    }
    v184 = __dsta;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v224, 0, 1, v219);
  }
  *((_BYTE *)v10 + v184[29]) = *((_BYTE *)v11 + v184[29]);
  *((_BYTE *)v10 + v184[30]) = *((_BYTE *)v11 + v184[30]);
  *((_BYTE *)v10 + v184[31]) = *((_BYTE *)v11 + v184[31]);
  *((_BYTE *)v10 + v184[32]) = *((_BYTE *)v11 + v184[32]);
  *(void **)((char *)v10 + v184[33]) = *(void **)((char *)v11 + v184[33]);
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t initializeWithTake for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _BYTE *v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  v5 = *(int *)(a3 + 44);
  v6 = (_OWORD *)(a1 + v5);
  v7 = (_OWORD *)(a2 + v5);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = v7[1];
      *v6 = *v7;
      v6[1] = v11;
      *((_BYTE *)v6 + 32) = *((_BYTE *)v7 + 32);
      v12 = *((_QWORD *)v7 + 6);
      *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
      *((_QWORD *)v6 + 6) = v12;
      *((_BYTE *)v6 + 56) = *((_BYTE *)v7 + 56);
      v13 = v7[13];
      v6[12] = v7[12];
      v6[13] = v13;
      v6[14] = v7[14];
      *(_DWORD *)((char *)v6 + 239) = *(_DWORD *)((char *)v7 + 239);
      v14 = v7[9];
      v6[8] = v7[8];
      v6[9] = v14;
      v15 = v7[11];
      v6[10] = v7[10];
      v6[11] = v15;
      v16 = v7[5];
      v6[4] = v7[4];
      v6[5] = v16;
      v17 = v7[7];
      v6[6] = v7[6];
      v6[7] = v17;
      *(_OWORD *)((char *)v6 + 248) = *(_OWORD *)((char *)v7 + 248);
      v18 = *(_OWORD *)((char *)v7 + 280);
      *(_OWORD *)((char *)v6 + 264) = *(_OWORD *)((char *)v7 + 264);
      *(_OWORD *)((char *)v6 + 280) = v18;
      v19 = *(_OWORD *)((char *)v7 + 376);
      *(_OWORD *)((char *)v6 + 360) = *(_OWORD *)((char *)v7 + 360);
      *(_OWORD *)((char *)v6 + 376) = v19;
      *((_QWORD *)v6 + 49) = *((_QWORD *)v7 + 49);
      v20 = *(_OWORD *)((char *)v7 + 312);
      *(_OWORD *)((char *)v6 + 296) = *(_OWORD *)((char *)v7 + 296);
      *(_OWORD *)((char *)v6 + 312) = v20;
      v21 = *(_OWORD *)((char *)v7 + 344);
      *(_OWORD *)((char *)v6 + 328) = *(_OWORD *)((char *)v7 + 328);
      *(_OWORD *)((char *)v6 + 344) = v21;
      v22 = v7[28];
      v6[27] = v7[27];
      v6[28] = v22;
      *((_BYTE *)v6 + 464) = *((_BYTE *)v7 + 464);
      v23 = v7[26];
      v6[25] = v7[25];
      v6[26] = v23;
      *(_OWORD *)((char *)v6 + 472) = *(_OWORD *)((char *)v7 + 472);
      *(_OWORD *)((char *)v6 + 481) = *(_OWORD *)((char *)v7 + 481);
      v24 = *((_QWORD *)v7 + 63);
      if (v24)
      {
        v25 = *((_QWORD *)v7 + 64);
        *((_QWORD *)v6 + 63) = v24;
        *((_QWORD *)v6 + 64) = v25;
      }
      else
      {
        *(_OWORD *)((char *)v6 + 504) = *(_OWORD *)((char *)v7 + 504);
      }
      *((_WORD *)v6 + 260) = *((_WORD *)v7 + 260);
      v6[33] = v7[33];
      *((_QWORD *)v6 + 68) = *((_QWORD *)v7 + 68);
      *((_QWORD *)v6 + 71) = *((_QWORD *)v7 + 71);
      *(_OWORD *)((char *)v6 + 552) = *(_OWORD *)((char *)v7 + 552);
      *((_QWORD *)v6 + 72) = *((_QWORD *)v7 + 72);
      *(_OWORD *)((char *)v6 + 584) = *(_OWORD *)((char *)v7 + 584);
      *(_OWORD *)((char *)v6 + 600) = *(_OWORD *)((char *)v7 + 600);
      *((_QWORD *)v6 + 77) = *((_QWORD *)v7 + 77);
      *((_QWORD *)v6 + 78) = *((_QWORD *)v7 + 78);
      *((_BYTE *)v6 + 632) = *((_BYTE *)v7 + 632);
      *(_WORD *)((char *)v6 + 633) = *(_WORD *)((char *)v7 + 633);
      v26 = (int *)type metadata accessor for PlatformItemList.Item();
      v27 = v26[28];
      v28 = (char *)v6 + v27;
      v29 = (char *)v7 + v27;
      v30 = type metadata accessor for CommandOperation();
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v46 = v31;
        *v28 = *v29;
        v33 = *(int *)(v30 + 20);
        v34 = &v28[v33];
        v48 = v28;
        v35 = &v29[v33];
        v36 = *(_OWORD *)&v29[v33 + 16];
        *v34 = *(_OWORD *)&v29[v33];
        v34[1] = v36;
        v37 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v38 = (char *)v34 + v37;
        v47 = &v35[v37];
        v39 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v38, v47, v39);
        v40 = *(int *)(v30 + 24);
        v41 = &v48[v40];
        v42 = (uint64_t *)&v29[v40];
        v43 = *v42;
        if (*v42)
        {
          v44 = v42[1];
          *v41 = v43;
          v41[1] = v44;
        }
        else
        {
          *(_OWORD *)v41 = *(_OWORD *)v42;
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v48, 0, 1, v30);
      }
      *((_BYTE *)v6 + v26[29]) = *((_BYTE *)v7 + v26[29]);
      *((_BYTE *)v6 + v26[30]) = *((_BYTE *)v7 + v26[30]);
      *((_BYTE *)v6 + v26[31]) = *((_BYTE *)v7 + v26[31]);
      *((_BYTE *)v6 + v26[32]) = *((_BYTE *)v7 + v26[32]);
      *(_QWORD *)((char *)v6 + v26[33]) = *(_QWORD *)((char *)v7 + v26[33]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(_QWORD *)(v9 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_OWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  size_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _BYTE *v59;
  __int128 v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  _OWORD *v78;
  _BYTE *v79;
  __int128 v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  char *v93;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 44);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  v12 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (v16)
    {
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_8:
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, v17);
      v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
LABEL_9:
      memcpy(v10, v11, v19);
      return a1;
    }
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = v11[1];
      *v10 = *v11;
      v10[1] = v20;
      *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
      v21 = *((_QWORD *)v11 + 6);
      *((_QWORD *)v10 + 5) = *((_QWORD *)v11 + 5);
      *((_QWORD *)v10 + 6) = v21;
      *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
      v22 = v11[13];
      v10[12] = v11[12];
      v10[13] = v22;
      v10[14] = v11[14];
      *(_DWORD *)((char *)v10 + 239) = *(_DWORD *)((char *)v11 + 239);
      v23 = v11[9];
      v10[8] = v11[8];
      v10[9] = v23;
      v24 = v11[11];
      v10[10] = v11[10];
      v10[11] = v24;
      v25 = v11[5];
      v10[4] = v11[4];
      v10[5] = v25;
      v26 = v11[7];
      v10[6] = v11[6];
      v10[7] = v26;
      *(_OWORD *)((char *)v10 + 248) = *(_OWORD *)((char *)v11 + 248);
      v27 = *(_OWORD *)((char *)v11 + 280);
      *(_OWORD *)((char *)v10 + 264) = *(_OWORD *)((char *)v11 + 264);
      *(_OWORD *)((char *)v10 + 280) = v27;
      v28 = *(_OWORD *)((char *)v11 + 376);
      *(_OWORD *)((char *)v10 + 360) = *(_OWORD *)((char *)v11 + 360);
      *(_OWORD *)((char *)v10 + 376) = v28;
      *((_QWORD *)v10 + 49) = *((_QWORD *)v11 + 49);
      v29 = *(_OWORD *)((char *)v11 + 312);
      *(_OWORD *)((char *)v10 + 296) = *(_OWORD *)((char *)v11 + 296);
      *(_OWORD *)((char *)v10 + 312) = v29;
      v30 = *(_OWORD *)((char *)v11 + 344);
      *(_OWORD *)((char *)v10 + 328) = *(_OWORD *)((char *)v11 + 328);
      *(_OWORD *)((char *)v10 + 344) = v30;
      v31 = v11[28];
      v10[27] = v11[27];
      v10[28] = v31;
      *((_BYTE *)v10 + 464) = *((_BYTE *)v11 + 464);
      v32 = v11[26];
      v10[25] = v11[25];
      v10[26] = v32;
      *(_OWORD *)((char *)v10 + 472) = *(_OWORD *)((char *)v11 + 472);
      *(_OWORD *)((char *)v10 + 481) = *(_OWORD *)((char *)v11 + 481);
      v33 = *((_QWORD *)v11 + 63);
      if (v33)
      {
        v34 = *((_QWORD *)v11 + 64);
        *((_QWORD *)v10 + 63) = v33;
        *((_QWORD *)v10 + 64) = v34;
      }
      else
      {
        *(_OWORD *)((char *)v10 + 504) = *(_OWORD *)((char *)v11 + 504);
      }
      *((_WORD *)v10 + 260) = *((_WORD *)v11 + 260);
      v10[33] = v11[33];
      *((_QWORD *)v10 + 68) = *((_QWORD *)v11 + 68);
      *((_QWORD *)v10 + 71) = *((_QWORD *)v11 + 71);
      *(_OWORD *)((char *)v10 + 552) = *(_OWORD *)((char *)v11 + 552);
      *((_QWORD *)v10 + 72) = *((_QWORD *)v11 + 72);
      *(_OWORD *)((char *)v10 + 584) = *(_OWORD *)((char *)v11 + 584);
      *(_OWORD *)((char *)v10 + 600) = *(_OWORD *)((char *)v11 + 600);
      *((_QWORD *)v10 + 77) = *((_QWORD *)v11 + 77);
      *((_QWORD *)v10 + 78) = *((_QWORD *)v11 + 78);
      *((_BYTE *)v10 + 632) = *((_BYTE *)v11 + 632);
      *(_WORD *)((char *)v10 + 633) = *(_WORD *)((char *)v11 + 633);
      v50 = (int *)type metadata accessor for PlatformItemList.Item();
      v51 = v50[28];
      v52 = (char *)v10 + v51;
      v53 = (char *)v11 + v51;
      v54 = type metadata accessor for CommandOperation();
      v55 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v90 = v55;
        v92 = v52;
        *v52 = *v53;
        v57 = *(int *)(v54 + 20);
        v58 = &v52[v57];
        v59 = &v53[v57];
        v60 = *(_OWORD *)&v53[v57 + 16];
        *v58 = *(_OWORD *)&v53[v57];
        v58[1] = v60;
        v61 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v89 = (char *)v58 + v61;
        v62 = &v59[v61];
        v63 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v89, v62, v63);
        v64 = *(int *)(v54 + 24);
        v65 = &v92[v64];
        v66 = (uint64_t *)&v53[v64];
        v67 = *v66;
        if (*v66)
        {
          v68 = v66[1];
          *v65 = v67;
          v65[1] = v68;
        }
        else
        {
          *(_OWORD *)v65 = *(_OWORD *)v66;
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v54);
      }
      *((_BYTE *)v10 + v50[29]) = *((_BYTE *)v11 + v50[29]);
      *((_BYTE *)v10 + v50[30]) = *((_BYTE *)v11 + v50[30]);
      *((_BYTE *)v10 + v50[31]) = *((_BYTE *)v11 + v50[31]);
      *((_BYTE *)v10 + v50[32]) = *((_BYTE *)v11 + v50[32]);
      *(_QWORD *)((char *)v10 + v50[33]) = *(_QWORD *)((char *)v11 + v50[33]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(v13 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  else
  {
    if (v16)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_8;
    }
    if (a1 == a2)
      return a1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v19 = *(_QWORD *)(v13 + 64);
      goto LABEL_9;
    }
    v35 = v11[1];
    *v10 = *v11;
    v10[1] = v35;
    *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
    v36 = *((_QWORD *)v11 + 6);
    *((_QWORD *)v10 + 5) = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 6) = v36;
    *((_BYTE *)v10 + 56) = *((_BYTE *)v11 + 56);
    v37 = v11[13];
    v10[12] = v11[12];
    v10[13] = v37;
    v10[14] = v11[14];
    *(_DWORD *)((char *)v10 + 239) = *(_DWORD *)((char *)v11 + 239);
    v38 = v11[9];
    v10[8] = v11[8];
    v10[9] = v38;
    v39 = v11[11];
    v10[10] = v11[10];
    v10[11] = v39;
    v40 = v11[5];
    v10[4] = v11[4];
    v10[5] = v40;
    v41 = v11[7];
    v10[6] = v11[6];
    v10[7] = v41;
    *(_OWORD *)((char *)v10 + 248) = *(_OWORD *)((char *)v11 + 248);
    v42 = *(_OWORD *)((char *)v11 + 280);
    *(_OWORD *)((char *)v10 + 264) = *(_OWORD *)((char *)v11 + 264);
    *(_OWORD *)((char *)v10 + 280) = v42;
    v43 = *(_OWORD *)((char *)v11 + 376);
    *(_OWORD *)((char *)v10 + 360) = *(_OWORD *)((char *)v11 + 360);
    *(_OWORD *)((char *)v10 + 376) = v43;
    *((_QWORD *)v10 + 49) = *((_QWORD *)v11 + 49);
    v44 = *(_OWORD *)((char *)v11 + 312);
    *(_OWORD *)((char *)v10 + 296) = *(_OWORD *)((char *)v11 + 296);
    *(_OWORD *)((char *)v10 + 312) = v44;
    v45 = *(_OWORD *)((char *)v11 + 344);
    *(_OWORD *)((char *)v10 + 328) = *(_OWORD *)((char *)v11 + 328);
    *(_OWORD *)((char *)v10 + 344) = v45;
    v46 = v11[28];
    v10[27] = v11[27];
    v10[28] = v46;
    *((_BYTE *)v10 + 464) = *((_BYTE *)v11 + 464);
    v47 = v11[26];
    v10[25] = v11[25];
    v10[26] = v47;
    *(_OWORD *)((char *)v10 + 472) = *(_OWORD *)((char *)v11 + 472);
    *(_OWORD *)((char *)v10 + 481) = *(_OWORD *)((char *)v11 + 481);
    v48 = *((_QWORD *)v11 + 63);
    if (v48)
    {
      v49 = *((_QWORD *)v11 + 64);
      *((_QWORD *)v10 + 63) = v48;
      *((_QWORD *)v10 + 64) = v49;
    }
    else
    {
      *(_OWORD *)((char *)v10 + 504) = *(_OWORD *)((char *)v11 + 504);
    }
    *((_WORD *)v10 + 260) = *((_WORD *)v11 + 260);
    v10[33] = v11[33];
    *((_QWORD *)v10 + 68) = *((_QWORD *)v11 + 68);
    *((_QWORD *)v10 + 71) = *((_QWORD *)v11 + 71);
    *(_OWORD *)((char *)v10 + 552) = *(_OWORD *)((char *)v11 + 552);
    *((_QWORD *)v10 + 72) = *((_QWORD *)v11 + 72);
    *(_OWORD *)((char *)v10 + 584) = *(_OWORD *)((char *)v11 + 584);
    *(_OWORD *)((char *)v10 + 600) = *(_OWORD *)((char *)v11 + 600);
    *((_QWORD *)v10 + 77) = *((_QWORD *)v11 + 77);
    *((_QWORD *)v10 + 78) = *((_QWORD *)v11 + 78);
    *((_BYTE *)v10 + 632) = *((_BYTE *)v11 + 632);
    *(_WORD *)((char *)v10 + 633) = *(_WORD *)((char *)v11 + 633);
    v69 = (int *)type metadata accessor for PlatformItemList.Item();
    v70 = v69[28];
    v71 = (char *)v10 + v70;
    v72 = (char *)v11 + v70;
    v73 = type metadata accessor for CommandOperation();
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v91 = v74;
      *v71 = *v72;
      v77 = *(int *)(v73 + 20);
      v78 = &v71[v77];
      v79 = &v72[v77];
      v80 = *(_OWORD *)&v72[v77 + 16];
      *v78 = *(_OWORD *)&v72[v77];
      v78[1] = v80;
      v81 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v93 = (char *)v78 + v81;
      v82 = &v79[v81];
      v83 = type metadata accessor for UUID();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v93, v82, v83);
      v84 = *(int *)(v73 + 24);
      v85 = &v71[v84];
      v86 = (uint64_t *)&v72[v84];
      v87 = *v86;
      if (*v86)
      {
        v88 = v86[1];
        *v85 = v87;
        v85[1] = v88;
      }
      else
      {
        *(_OWORD *)v85 = *(_OWORD *)v86;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v71, 0, 1, v73);
    }
    *((_BYTE *)v10 + v69[29]) = *((_BYTE *)v11 + v69[29]);
    *((_BYTE *)v10 + v69[30]) = *((_BYTE *)v11 + v69[30]);
    *((_BYTE *)v10 + v69[31]) = *((_BYTE *)v11 + v69[31]);
    *((_BYTE *)v10 + v69[32]) = *((_BYTE *)v11 + v69[32]);
    *(_QWORD *)((char *)v10 + v69[33]) = *(_QWORD *)((char *)v11 + v69[33]);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.GroupItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876E6B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.GroupItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876E6C1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ToolbarStorage.GroupItem.CollapsedContent(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  _OWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char *v81;
  _BYTE *v82;
  uint64_t v83;
  void (*v84)(char *, _BYTE *, uint64_t);
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned int (*v94)(_BYTE *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  int *v97;
  char *__dsta;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v25 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v25;
      (**(void (***)(char *, char **))(v25 - 8))(a1, a2);
      *((_QWORD *)a1 + 5) = a2[5];
      *((_QWORD *)a1 + 6) = a2[6];
      *((_QWORD *)a1 + 7) = a2[7];
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      v26 = a2[10];
      *((_QWORD *)a1 + 10) = v26;
      swift_retain();
      swift_bridgeObjectRetain();
      v27 = v26;
LABEL_49:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v6 = *a2;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = a2[3];
    *((_QWORD *)a1 + 2) = a2[2];
    *((_QWORD *)a1 + 3) = v8;
    a1[32] = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v9;
    a1[56] = *((_BYTE *)a2 + 56);
    v10 = a1 + 64;
    v11 = a2 + 8;
    v12 = (unint64_t)a2[23];
    v13 = v6;
    v14 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v12 >> 1 == 4294967294)
    {
      v15 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v15;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      v16 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v16;
      v17 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v17;
      v18 = *((_OWORD *)a2 + 5);
      *v10 = *v11;
      *((_OWORD *)a1 + 5) = v18;
      v19 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v19;
      v20 = a2[32];
      if (v20)
      {
LABEL_5:
        *((_QWORD *)a1 + 31) = a2[31];
        *((_QWORD *)a1 + 32) = v20;
        v21 = a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v21 >= 2)
          v22 = v21;
        *((_QWORD *)a1 + 33) = v21;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        a1[276] = *((_BYTE *)a2 + 276);
        *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
        v23 = a2[36];
        *((_QWORD *)a1 + 35) = a2[35];
        *((_QWORD *)a1 + 36) = v23;
        swift_retain();
        swift_retain();
LABEL_18:
        v39 = (unint64_t)a2[41];
        if (v39 >> 2 == 0xFFFFFFFF)
        {
          v40 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 376) = v40;
          *((_QWORD *)a1 + 49) = a2[49];
          v41 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 312) = v41;
          v42 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 344) = v42;
        }
        else
        {
          v43 = a2[37];
          v44 = (uint64_t)a2[38];
          v45 = (uint64_t)a2[39];
          v46 = (uint64_t)a2[40];
          v47 = (uint64_t)a2[42];
          v48 = (uint64_t)a2[43];
          v49 = a2[44];
          v90 = (uint64_t)a2[45];
          v91 = (uint64_t)a2[46];
          v93 = (uint64_t)a2[47];
          v96 = a2[48];
          __dsta = a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v43, v44, v45, v46, v39, v47, v48, (char)v49, v90, v91, v93, (char)v96, (uint64_t)__dsta);
          *((_QWORD *)a1 + 37) = v43;
          *((_QWORD *)a1 + 38) = v44;
          *((_QWORD *)a1 + 39) = v45;
          *((_QWORD *)a1 + 40) = v46;
          *((_QWORD *)a1 + 41) = v39;
          *((_QWORD *)a1 + 42) = v47;
          *((_QWORD *)a1 + 43) = v48;
          *((_QWORD *)a1 + 44) = v49;
          *((_QWORD *)a1 + 45) = v90;
          *((_QWORD *)a1 + 46) = v91;
          *((_QWORD *)a1 + 47) = v93;
          *((_QWORD *)a1 + 48) = v96;
          *((_QWORD *)a1 + 49) = __dsta;
        }
        v50 = a2[51];
        if (v50 == (char *)1)
        {
          v51 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v51;
          a1[464] = *((_BYTE *)a2 + 464);
          v52 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v52;
LABEL_31:
          v58 = a2[60];
          *((_QWORD *)a1 + 59) = a2[59];
          *((_QWORD *)a1 + 60) = v58;
          *((_QWORD *)a1 + 61) = a2[61];
          a1[496] = *((_BYTE *)a2 + 496);
          v59 = a2[63];
          swift_bridgeObjectRetain();
          if (v59)
          {
            v60 = a2[64];
            *((_QWORD *)a1 + 63) = v59;
            *((_QWORD *)a1 + 64) = v60;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          v61 = a2[66];
          if (v61)
          {
            *((_QWORD *)a1 + 66) = v61;
            *((_QWORD *)a1 + 67) = a2[67];
            *((_QWORD *)a1 + 68) = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            *((_QWORD *)a1 + 68) = a2[68];
          }
          v62 = a2[69];
          if (v62 == (char *)1)
          {
            *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
            *((_QWORD *)a1 + 71) = a2[71];
          }
          else
          {
            *((_QWORD *)a1 + 69) = v62;
            v63 = a2[70];
            swift_retain();
            if (v63)
            {
              v64 = a2[71];
              *((_QWORD *)a1 + 70) = v63;
              *((_QWORD *)a1 + 71) = v64;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          v65 = a2[72];
          *((_QWORD *)a1 + 72) = v65;
          *((_QWORD *)a1 + 73) = a2[73];
          *((_QWORD *)a1 + 74) = a2[74];
          *((_QWORD *)a1 + 75) = a2[75];
          *((_QWORD *)a1 + 76) = a2[76];
          *((_QWORD *)a1 + 77) = a2[77];
          *((_QWORD *)a1 + 78) = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          a1[634] = *((_BYTE *)a2 + 634);
          v66 = type metadata accessor for PlatformItemList.Item();
          v67 = *(int *)(v66 + 112);
          v97 = (int *)v66;
          __dst = &a1[v67];
          v68 = (char *)a2 + v67;
          v69 = type metadata accessor for CommandOperation();
          v70 = *(_QWORD *)(v69 - 8);
          v94 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48);
          v71 = v65;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v94(v68, 1, v69))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
          }
          else
          {
            v92 = v68;
            v95 = v70;
            *__dst = *v68;
            v73 = *(int *)(v69 + 20);
            v74 = &__dst[v73];
            v75 = &v68[v73];
            v76 = v69;
            v77 = *(_QWORD *)&v68[v73];
            v78 = *((_QWORD *)v75 + 1);
            v79 = v75[16];
            outlined copy of Text.Storage(v77, v78, v79);
            *(_QWORD *)v74 = v77;
            *((_QWORD *)v74 + 1) = v78;
            v74[16] = v79;
            *((_QWORD *)v74 + 3) = *((_QWORD *)v75 + 3);
            v80 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v81 = &v74[v80];
            v82 = &v75[v80];
            v83 = type metadata accessor for UUID();
            v84 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v83 - 8) + 16);
            swift_bridgeObjectRetain();
            v84(v81, v82, v83);
            v85 = *(int *)(v76 + 24);
            v86 = &__dst[v85];
            v87 = &v92[v85];
            if (*v87)
            {
              v88 = v87[1];
              *(_QWORD *)v86 = *v87;
              *((_QWORD *)v86 + 1) = v88;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v86 = *(_OWORD *)v87;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v76);
          }
          a1[v97[29]] = *((_BYTE *)a2 + v97[29]);
          a1[v97[30]] = *((_BYTE *)a2 + v97[30]);
          a1[v97[31]] = *((_BYTE *)a2 + v97[31]);
          a1[v97[32]] = *((_BYTE *)a2 + v97[32]);
          *(_QWORD *)&a1[v97[33]] = *(char **)((char *)a2 + v97[33]);
          swift_retain();
          goto LABEL_49;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        a1[404] = *((_BYTE *)a2 + 404);
        if (v50)
        {
          v53 = a2[52];
          *((_QWORD *)a1 + 51) = v50;
          *((_QWORD *)a1 + 52) = v53;
          swift_retain();
          v54 = a2[53];
          if (v54)
            goto LABEL_25;
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
          v54 = a2[53];
          if (v54)
          {
LABEL_25:
            v55 = a2[54];
            *((_QWORD *)a1 + 53) = v54;
            *((_QWORD *)a1 + 54) = v55;
            swift_retain();
            v56 = a2[55];
            if (v56)
            {
LABEL_26:
              v57 = a2[56];
              *((_QWORD *)a1 + 55) = v56;
              *((_QWORD *)a1 + 56) = v57;
              swift_retain();
LABEL_30:
              *((_QWORD *)a1 + 57) = a2[57];
              a1[464] = *((_BYTE *)a2 + 464);
              goto LABEL_31;
            }
LABEL_29:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
            goto LABEL_30;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
        v56 = a2[55];
        if (v56)
          goto LABEL_26;
        goto LABEL_29;
      }
    }
    else
    {
      v28 = *((unsigned __int8 *)a2 + 72);
      if (v28 == 255)
      {
        *(_QWORD *)v10 = *(_QWORD *)v11;
        a1[72] = *((_BYTE *)a2 + 72);
      }
      else
      {
        v29 = a2[8];
        outlined copy of GraphicsImage.Contents(v29, *((_BYTE *)a2 + 72));
        *((_QWORD *)a1 + 8) = v29;
        a1[72] = v28;
        v12 = (unint64_t)a2[23];
      }
      *((_QWORD *)a1 + 10) = a2[10];
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      a1[104] = *((_BYTE *)a2 + 104);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      a1[124] = *((_BYTE *)a2 + 124);
      v30 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v30;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      a1[162] = *((_BYTE *)a2 + 162);
      a1[163] = *((_BYTE *)a2 + 163);
      if (v12 >> 1 == 0xFFFFFFFF)
      {
        v31 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 184) = v31;
      }
      else
      {
        v32 = (uint64_t)a2[21];
        v33 = (uint64_t)a2[22];
        v34 = a2[24];
        outlined copy of AccessibilityImageLabel(v32, v33, v12);
        *((_QWORD *)a1 + 21) = v32;
        *((_QWORD *)a1 + 22) = v33;
        *((_QWORD *)a1 + 23) = v12;
        *((_QWORD *)a1 + 24) = v34;
      }
      v35 = a2[26];
      *((_QWORD *)a1 + 25) = a2[25];
      *((_QWORD *)a1 + 26) = v35;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      a1[224] = *((_BYTE *)a2 + 224);
      v36 = a2[29];
      *((_QWORD *)a1 + 29) = v36;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      a1[242] = *((_BYTE *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v37 = v36;
      v20 = a2[32];
      if (v20)
        goto LABEL_5;
    }
    v38 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v38;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_18;
  }
  v24 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

void destroy for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }

  swift_bridgeObjectRelease();
  swift_release();
  v2 = *(_QWORD *)(a1 + 184);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      v2 = *(_QWORD *)(a1 + 184);
      v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v2);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2)

    swift_release();
    swift_release();
  }
  v6 = *(_QWORD *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v6, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  v7 = *(_QWORD *)(a1 + 408);
  if (!v7)
    goto LABEL_17;
  if (v7 != 1)
  {
    swift_release();
LABEL_17:
    if (*(_QWORD *)(a1 + 424))
      swift_release();
    if (*(_QWORD *)(a1 + 440))
      swift_release();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 504))
    swift_release();
  if (*(_QWORD *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  v9 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = v8 + *(int *)(v9 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
    v11 = v10 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    if (*(_QWORD *)(v8 + *(int *)(v9 + 24)))
      swift_release();
  }
  swift_release();
}

uint64_t initializeWithCopy for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  id v24;
  int v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  void (*v81)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  unsigned int (*v91)(_BYTE *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  int *v94;
  void *__dsta;
  _BYTE *__dst;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v22 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v22;
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v23 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = v23;
    goto LABEL_47;
  }
  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = (_QWORD *)(a1 + 64);
  v9 = (_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 184);
  v11 = v4;
  v12 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10 >> 1 != 4294967294)
  {
    v25 = *(unsigned __int8 *)(a2 + 72);
    if (v25 == 255)
    {
      *v8 = *v9;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    }
    else
    {
      v26 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v26, *(_BYTE *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v26;
      *(_BYTE *)(a1 + 72) = v25;
      v10 = *(_QWORD *)(a2 + 184);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    v27 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v27;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    if (v10 >> 1 == 0xFFFFFFFF)
    {
      v28 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v28;
    }
    else
    {
      v29 = *(_QWORD *)(a2 + 168);
      v30 = *(_QWORD *)(a2 + 176);
      v31 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v29, v30, v10);
      *(_QWORD *)(a1 + 168) = v29;
      *(_QWORD *)(a1 + 176) = v30;
      *(_QWORD *)(a1 + 184) = v10;
      *(_QWORD *)(a1 + 192) = v31;
    }
    v32 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v32;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    v33 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v33;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v34 = v33;
    v18 = *(_QWORD *)(a2 + 256);
    if (v18)
      goto LABEL_4;
LABEL_15:
    v35 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v35;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_16;
  }
  v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  v14 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v14;
  v15 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v15;
  v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 80) = v16;
  v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v17;
  v18 = *(_QWORD *)(a2 + 256);
  if (!v18)
    goto LABEL_15;
LABEL_4:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v18;
  v19 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v19 >= 2)
    v20 = v19;
  *(_QWORD *)(a1 + 264) = v19;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  v21 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v21;
  swift_retain();
  swift_retain();
LABEL_16:
  v36 = *(_QWORD *)(a2 + 328);
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    v37 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v37;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v38 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v38;
    v39 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v39;
  }
  else
  {
    v40 = *(void **)(a2 + 296);
    v41 = *(_QWORD *)(a2 + 304);
    v42 = *(_QWORD *)(a2 + 312);
    v43 = *(_QWORD *)(a2 + 320);
    v44 = *(_QWORD *)(a2 + 336);
    v45 = *(_QWORD *)(a2 + 344);
    v46 = *(_QWORD *)(a2 + 352);
    v87 = *(_QWORD *)(a2 + 360);
    v88 = *(_QWORD *)(a2 + 368);
    v90 = *(_QWORD *)(a2 + 376);
    v93 = *(_QWORD *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v44, v45, v46, v87, v88, v90, v93, (uint64_t)__dsta);
    *(_QWORD *)(a1 + 296) = v40;
    *(_QWORD *)(a1 + 304) = v41;
    *(_QWORD *)(a1 + 312) = v42;
    *(_QWORD *)(a1 + 320) = v43;
    *(_QWORD *)(a1 + 328) = v36;
    *(_QWORD *)(a1 + 336) = v44;
    *(_QWORD *)(a1 + 344) = v45;
    *(_QWORD *)(a1 + 352) = v46;
    *(_QWORD *)(a1 + 360) = v87;
    *(_QWORD *)(a1 + 368) = v88;
    *(_QWORD *)(a1 + 376) = v90;
    *(_QWORD *)(a1 + 384) = v93;
    *(_QWORD *)(a1 + 392) = __dsta;
  }
  v47 = *(_QWORD *)(a2 + 408);
  if (v47 != 1)
  {
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
    if (v47)
    {
      v50 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v47;
      *(_QWORD *)(a1 + 416) = v50;
      swift_retain();
      v51 = *(_QWORD *)(a2 + 424);
      if (v51)
        goto LABEL_23;
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      v51 = *(_QWORD *)(a2 + 424);
      if (v51)
      {
LABEL_23:
        v52 = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 424) = v51;
        *(_QWORD *)(a1 + 432) = v52;
        swift_retain();
        v53 = *(_QWORD *)(a2 + 440);
        if (v53)
        {
LABEL_24:
          v54 = *(_QWORD *)(a2 + 448);
          *(_QWORD *)(a1 + 440) = v53;
          *(_QWORD *)(a1 + 448) = v54;
          swift_retain();
LABEL_28:
          *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
          *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    v53 = *(_QWORD *)(a2 + 440);
    if (v53)
      goto LABEL_24;
    goto LABEL_27;
  }
  v48 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v48;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v49 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v49;
LABEL_29:
  v55 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v55;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v56 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v56)
  {
    v57 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v56;
    *(_QWORD *)(a1 + 512) = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v58 = *(_QWORD *)(a2 + 528);
  if (v58)
  {
    *(_QWORD *)(a1 + 528) = v58;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  v59 = *(_QWORD *)(a2 + 552);
  if (v59 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v59;
    v60 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (v60)
    {
      v61 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v60;
      *(_QWORD *)(a1 + 568) = v61;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  v62 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v62;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v63 = type metadata accessor for PlatformItemList.Item();
  v64 = *(int *)(v63 + 112);
  v94 = (int *)v63;
  __dst = (_BYTE *)(a1 + v64);
  v65 = (_BYTE *)(a2 + v64);
  v66 = type metadata accessor for CommandOperation();
  v67 = *(_QWORD *)(v66 - 8);
  v91 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48);
  v68 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v91(v65, 1, v66))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v89 = v65;
    v92 = v67;
    *__dst = *v65;
    v70 = *(int *)(v66 + 20);
    v71 = &__dst[v70];
    v72 = &v65[v70];
    v73 = v66;
    v74 = *(_QWORD *)&v65[v70];
    v75 = *((_QWORD *)v72 + 1);
    v76 = v72[16];
    outlined copy of Text.Storage(v74, v75, v76);
    *(_QWORD *)v71 = v74;
    *((_QWORD *)v71 + 1) = v75;
    v71[16] = v76;
    *((_QWORD *)v71 + 3) = *((_QWORD *)v72 + 3);
    v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v78 = &v71[v77];
    v79 = &v72[v77];
    v80 = type metadata accessor for UUID();
    v81 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
    swift_bridgeObjectRetain();
    v81(v78, v79, v80);
    v82 = *(int *)(v73 + 24);
    v83 = &__dst[v82];
    v84 = &v89[v82];
    if (*v84)
    {
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v83 = *(_OWORD *)v84;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v73);
  }
  *(_BYTE *)(a1 + v94[29]) = *(_BYTE *)(a2 + v94[29]);
  *(_BYTE *)(a1 + v94[30]) = *(_BYTE *)(a2 + v94[30]);
  *(_BYTE *)(a1 + v94[31]) = *(_BYTE *)(a2 + v94[31]);
  *(_BYTE *)(a1 + v94[32]) = *(_BYTE *)(a2 + v94[32]);
  *(_QWORD *)(a1 + v94[33]) = *(_QWORD *)(a2 + v94[33]);
  swift_retain();
LABEL_47:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _OWORD *v6;
  id *v7;
  unint64_t v8;
  id v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  id v21;
  int v22;
  uint64_t v23;
  void *v24;
  id v25;
  int v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  void (*v92)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  unsigned int (*v102)(_BYTE *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  int *v105;
  void *__dsta;
  _BYTE *__dst;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v23 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v24 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      v25 = v24;
LABEL_49:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v6 = (_OWORD *)(a1 + 64);
    v7 = (id *)(a2 + 64);
    v8 = *(_QWORD *)(a2 + 184);
    v9 = v4;
    v10 = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v8 >> 1 == 4294967294)
    {
      v11 = *(_OWORD *)v7;
      v12 = *(_OWORD *)(a2 + 80);
      v13 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v13;
      *v6 = v11;
      *(_OWORD *)(a1 + 80) = v12;
      v14 = *(_OWORD *)(a2 + 128);
      v15 = *(_OWORD *)(a2 + 144);
      v16 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v16;
      *(_OWORD *)(a1 + 128) = v14;
      *(_OWORD *)(a1 + 144) = v15;
      v17 = *(_OWORD *)(a2 + 192);
      v18 = *(_OWORD *)(a2 + 208);
      v19 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v18;
      *(_OWORD *)(a1 + 224) = v19;
      *(_OWORD *)(a1 + 192) = v17;
      if (*(_QWORD *)(a2 + 256))
      {
LABEL_5:
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        v20 = *(void **)(a2 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v20 >= 2)
          v21 = v20;
        *(_QWORD *)(a1 + 264) = v20;
        v22 = *(_DWORD *)(a2 + 272);
        *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
        *(_DWORD *)(a1 + 272) = v22;
        *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
        *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
        *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        swift_retain();
        swift_retain();
LABEL_17:
        v42 = *(_QWORD *)(a2 + 328);
        if (v42 >> 2 == 0xFFFFFFFF)
        {
          v43 = *(_OWORD *)(a2 + 296);
          v44 = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 328) = v44;
          *(_OWORD *)(a1 + 296) = v43;
          v45 = *(_OWORD *)(a2 + 344);
          v46 = *(_OWORD *)(a2 + 360);
          v47 = *(_OWORD *)(a2 + 376);
          *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
          *(_OWORD *)(a1 + 360) = v46;
          *(_OWORD *)(a1 + 376) = v47;
          *(_OWORD *)(a1 + 344) = v45;
        }
        else
        {
          v48 = *(void **)(a2 + 296);
          v49 = *(_QWORD *)(a2 + 304);
          v50 = *(_QWORD *)(a2 + 312);
          v51 = *(_QWORD *)(a2 + 320);
          v52 = *(_QWORD *)(a2 + 336);
          v53 = *(_QWORD *)(a2 + 344);
          v54 = *(_QWORD *)(a2 + 352);
          v98 = *(_QWORD *)(a2 + 360);
          v99 = *(_QWORD *)(a2 + 368);
          v101 = *(_QWORD *)(a2 + 376);
          v104 = *(_QWORD *)(a2 + 384);
          __dsta = *(void **)(a2 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v48, v49, v50, v51, v42, v52, v53, v54, v98, v99, v101, v104, (uint64_t)__dsta);
          *(_QWORD *)(a1 + 296) = v48;
          *(_QWORD *)(a1 + 304) = v49;
          *(_QWORD *)(a1 + 312) = v50;
          *(_QWORD *)(a1 + 320) = v51;
          *(_QWORD *)(a1 + 328) = v42;
          *(_QWORD *)(a1 + 336) = v52;
          *(_QWORD *)(a1 + 344) = v53;
          *(_QWORD *)(a1 + 352) = v54;
          *(_QWORD *)(a1 + 360) = v98;
          *(_QWORD *)(a1 + 368) = v99;
          *(_QWORD *)(a1 + 376) = v101;
          *(_QWORD *)(a1 + 384) = v104;
          *(_QWORD *)(a1 + 392) = __dsta;
        }
        if (*(_QWORD *)(a2 + 408) == 1)
        {
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          v55 = *(_OWORD *)(a2 + 416);
          v56 = *(_OWORD *)(a2 + 432);
          v57 = *(_OWORD *)(a2 + 448);
          *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
          *(_OWORD *)(a1 + 432) = v56;
          *(_OWORD *)(a1 + 448) = v57;
          *(_OWORD *)(a1 + 416) = v55;
          goto LABEL_30;
        }
        *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
        *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
        *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
        *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
        *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
        v58 = *(_QWORD *)(a2 + 408);
        if (v58)
        {
          v59 = *(_QWORD *)(a2 + 416);
          *(_QWORD *)(a1 + 408) = v58;
          *(_QWORD *)(a1 + 416) = v59;
          swift_retain();
          v60 = *(_QWORD *)(a2 + 424);
          if (v60)
            goto LABEL_24;
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
          v60 = *(_QWORD *)(a2 + 424);
          if (v60)
          {
LABEL_24:
            v61 = *(_QWORD *)(a2 + 432);
            *(_QWORD *)(a1 + 424) = v60;
            *(_QWORD *)(a1 + 432) = v61;
            swift_retain();
            v62 = *(_QWORD *)(a2 + 440);
            if (v62)
            {
LABEL_25:
              v63 = *(_QWORD *)(a2 + 448);
              *(_QWORD *)(a1 + 440) = v62;
              *(_QWORD *)(a1 + 448) = v63;
              swift_retain();
LABEL_29:
              *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
              *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_30:
              *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
              *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
              *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
              *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
              v64 = *(_QWORD *)(a2 + 504);
              swift_bridgeObjectRetain();
              if (v64)
              {
                v65 = *(_QWORD *)(a2 + 512);
                *(_QWORD *)(a1 + 504) = v64;
                *(_QWORD *)(a1 + 512) = v65;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
              }
              *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
              v66 = *(_QWORD *)(a2 + 528);
              if (v66)
              {
                *(_QWORD *)(a1 + 528) = v66;
                *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
                *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v67 = *(_OWORD *)(a2 + 528);
                *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
                *(_OWORD *)(a1 + 528) = v67;
              }
              v68 = *(_QWORD *)(a2 + 552);
              if (v68 == 1)
              {
                v69 = (_OWORD *)(a1 + 552);
                v70 = *(_OWORD *)(a2 + 552);
                *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
              }
              else
              {
                *(_QWORD *)(a1 + 552) = v68;
                v71 = *(_QWORD *)(a2 + 560);
                swift_retain();
                if (v71)
                {
                  v72 = *(_QWORD *)(a2 + 568);
                  *(_QWORD *)(a1 + 560) = v71;
                  *(_QWORD *)(a1 + 568) = v72;
                  swift_retain();
LABEL_42:
                  v73 = *(void **)(a2 + 576);
                  *(_QWORD *)(a1 + 576) = v73;
                  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
                  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
                  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
                  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
                  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
                  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
                  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
                  *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
                  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
                  v74 = type metadata accessor for PlatformItemList.Item();
                  v75 = *(int *)(v74 + 112);
                  v105 = (int *)v74;
                  __dst = (_BYTE *)(a1 + v75);
                  v76 = (_BYTE *)(a2 + v75);
                  v77 = type metadata accessor for CommandOperation();
                  v78 = *(_QWORD *)(v77 - 8);
                  v102 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48);
                  v79 = v73;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v102(v76, 1, v77))
                  {
                    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
                    memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
                  }
                  else
                  {
                    v100 = v76;
                    v103 = v78;
                    *__dst = *v76;
                    v81 = *(int *)(v77 + 20);
                    v82 = &__dst[v81];
                    v83 = &v76[v81];
                    v84 = v77;
                    v85 = *(_QWORD *)&v76[v81];
                    v86 = *((_QWORD *)v83 + 1);
                    v87 = v83[16];
                    outlined copy of Text.Storage(v85, v86, v87);
                    *(_QWORD *)v82 = v85;
                    *((_QWORD *)v82 + 1) = v86;
                    v82[16] = v87;
                    *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
                    v88 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v89 = &v82[v88];
                    v90 = &v83[v88];
                    v91 = type metadata accessor for UUID();
                    v92 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v91 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v92(v89, v90, v91);
                    v93 = *(int *)(v84 + 24);
                    v94 = &__dst[v93];
                    v95 = &v100[v93];
                    if (*v95)
                    {
                      v96 = v95[1];
                      *v94 = *v95;
                      v94[1] = v96;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v94 = *(_OWORD *)v95;
                    }
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v103 + 56))(__dst, 0, 1, v84);
                  }
                  *(_BYTE *)(a1 + v105[29]) = *(_BYTE *)(a2 + v105[29]);
                  *(_BYTE *)(a1 + v105[30]) = *(_BYTE *)(a2 + v105[30]);
                  *(_BYTE *)(a1 + v105[31]) = *(_BYTE *)(a2 + v105[31]);
                  *(_BYTE *)(a1 + v105[32]) = *(_BYTE *)(a2 + v105[32]);
                  *(_QWORD *)(a1 + v105[33]) = *(_QWORD *)(a2 + v105[33]);
                  swift_retain();
                  goto LABEL_49;
                }
                v69 = (_OWORD *)(a1 + 560);
                v70 = *(_OWORD *)(a2 + 560);
              }
              *v69 = v70;
              goto LABEL_42;
            }
LABEL_28:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
            goto LABEL_29;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
        v62 = *(_QWORD *)(a2 + 440);
        if (v62)
          goto LABEL_25;
        goto LABEL_28;
      }
    }
    else
    {
      v26 = *(unsigned __int8 *)(a2 + 72);
      if (v26 == 255)
      {
        v28 = *v7;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v6 = v28;
      }
      else
      {
        v27 = *v7;
        outlined copy of GraphicsImage.Contents(*v7, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v27;
        *(_BYTE *)(a1 + 72) = v26;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v29 = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v29;
      v30 = *(_OWORD *)(a2 + 128);
      v31 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v30;
      *(_OWORD *)(a1 + 144) = v31;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      v32 = *(_QWORD *)(a2 + 184);
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        v33 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v33;
      }
      else
      {
        v34 = *(_QWORD *)(a2 + 168);
        v35 = *(_QWORD *)(a2 + 176);
        v36 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v34, v35, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v34;
        *(_QWORD *)(a1 + 176) = v35;
        *(_QWORD *)(a1 + 184) = v32;
        *(_QWORD *)(a1 + 192) = v36;
      }
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v37 = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v37;
      v38 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v38;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v39 = v38;
      if (*(_QWORD *)(a2 + 256))
        goto LABEL_5;
    }
    v40 = *(_OWORD *)(a2 + 248);
    v41 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v41;
    *(_OWORD *)(a1 + 248) = v40;
    goto LABEL_17;
  }
  return a1;
}

char *initializeWithTake for ToolbarStorage.GroupItem.CollapsedContent(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
    a1[32] = a2[32];
    v7 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a1 + 6) = v7;
    a1[56] = a2[56];
    v8 = *((_OWORD *)a2 + 13);
    *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
    *((_OWORD *)a1 + 13) = v8;
    *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    v9 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v9;
    v10 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v10;
    v11 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v11;
    v12 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v12;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    v13 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v13;
    v14 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v14;
    *((_QWORD *)a1 + 49) = *((_QWORD *)a2 + 49);
    v15 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v15;
    v16 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v16;
    v17 = *((_OWORD *)a2 + 28);
    *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
    *((_OWORD *)a1 + 28) = v17;
    a1[464] = a2[464];
    v18 = *((_OWORD *)a2 + 26);
    *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
    *((_OWORD *)a1 + 26) = v18;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
    v19 = *((_QWORD *)a2 + 63);
    if (v19)
    {
      v20 = *((_QWORD *)a2 + 64);
      *((_QWORD *)a1 + 63) = v19;
      *((_QWORD *)a1 + 64) = v20;
    }
    else
    {
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    }
    *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((_QWORD *)a1 + 68) = *((_QWORD *)a2 + 68);
    *((_QWORD *)a1 + 71) = *((_QWORD *)a2 + 71);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *((_QWORD *)a1 + 72) = *((_QWORD *)a2 + 72);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *((_QWORD *)a1 + 77) = *((_QWORD *)a2 + 77);
    *((_QWORD *)a1 + 78) = *((_QWORD *)a2 + 78);
    a1[632] = a2[632];
    *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
    v21 = (int *)type metadata accessor for PlatformItemList.Item();
    v22 = v21[28];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v25 = type metadata accessor for CommandOperation();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      v28 = *(int *)(v25 + 20);
      v29 = &v23[v28];
      v30 = &v24[v28];
      v31 = *(_OWORD *)&v24[v28 + 16];
      *(_OWORD *)v29 = *(_OWORD *)&v24[v28];
      *((_OWORD *)v29 + 1) = v31;
      v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v33 = &v29[v32];
      v34 = &v30[v32];
      v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      v36 = *(int *)(v25 + 24);
      v37 = &v23[v36];
      v38 = &v24[v36];
      v39 = *(_QWORD *)v38;
      if (*(_QWORD *)v38)
      {
        v40 = *((_QWORD *)v38 + 1);
        *(_QWORD *)v37 = v39;
        *((_QWORD *)v37 + 1) = v40;
      }
      else
      {
        *(_OWORD *)v37 = *(_OWORD *)v38;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    a1[v21[29]] = a2[v21[29]];
    a1[v21[30]] = a2[v21[30]];
    a1[v21[31]] = a2[v21[31]];
    a1[v21[32]] = a2[v21[32]];
    *(_QWORD *)&a1[v21[33]] = *(_QWORD *)&a2[v21[33]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ToolbarStorage.GroupItem.CollapsedContent(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      a1[32] = a2[32];
      v7 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v7;
      a1[56] = a2[56];
      v8 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v8;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      v9 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v9;
      v10 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v10;
      v11 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v11;
      v12 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v12;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      v13 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v13;
      v14 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v14;
      *((_QWORD *)a1 + 49) = *((_QWORD *)a2 + 49);
      v15 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = v15;
      v16 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v16;
      v17 = *((_OWORD *)a2 + 28);
      *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
      *((_OWORD *)a1 + 28) = v17;
      a1[464] = a2[464];
      v18 = *((_OWORD *)a2 + 26);
      *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
      *((_OWORD *)a1 + 26) = v18;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
      v19 = *((_QWORD *)a2 + 63);
      if (v19)
      {
        v20 = *((_QWORD *)a2 + 64);
        *((_QWORD *)a1 + 63) = v19;
        *((_QWORD *)a1 + 64) = v20;
      }
      else
      {
        *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      }
      *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
      *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
      *((_QWORD *)a1 + 68) = *((_QWORD *)a2 + 68);
      *((_QWORD *)a1 + 71) = *((_QWORD *)a2 + 71);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *((_QWORD *)a1 + 72) = *((_QWORD *)a2 + 72);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
      *((_QWORD *)a1 + 77) = *((_QWORD *)a2 + 77);
      *((_QWORD *)a1 + 78) = *((_QWORD *)a2 + 78);
      a1[632] = a2[632];
      *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
      v21 = (int *)type metadata accessor for PlatformItemList.Item();
      v22 = v21[28];
      v23 = &a1[v22];
      v24 = &a2[v22];
      v25 = type metadata accessor for CommandOperation();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        *v23 = *v24;
        v28 = *(int *)(v25 + 20);
        v29 = &v23[v28];
        v30 = &v24[v28];
        v31 = *(_OWORD *)&v24[v28 + 16];
        *(_OWORD *)v29 = *(_OWORD *)&v24[v28];
        *((_OWORD *)v29 + 1) = v31;
        v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v33 = &v29[v32];
        v34 = &v30[v32];
        v35 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
        v36 = *(int *)(v25 + 24);
        v37 = &v23[v36];
        v38 = &v24[v36];
        v39 = *(_QWORD *)v38;
        if (*(_QWORD *)v38)
        {
          v40 = *((_QWORD *)v38 + 1);
          *(_QWORD *)v37 = v39;
          *((_QWORD *)v37 + 1) = v40;
        }
        else
        {
          *(_OWORD *)v37 = *(_OWORD *)v38;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      a1[v21[29]] = a2[v21[29]];
      a1[v21[30]] = a2[v21[30]];
      a1[v21[31]] = a2[v21[31]];
      a1[v21[32]] = a2[v21[32]];
      *(_QWORD *)&a1[v21[33]] = *(_QWORD *)&a2[v21[33]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.Item(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(void **, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _OWORD *v29;
  _OWORD *v30;
  unint64_t v31;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  void (*v106)(void **, _QWORD, uint64_t, int *);
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  void *v117;
  unsigned int (*v118)(_BYTE *, uint64_t, uint64_t);
  void *__dsta;
  _BYTE *__dst;
  int *v121;
  uint64_t *v122;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = (_OWORD *)(a1 + 48);
    v9 = a2 + 6;
    v10 = *((unsigned __int8 *)a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10 == 1)
    {
      v11 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v4 + 72) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v4 + 48, (uint64_t)(a2 + 6));
      *(_BYTE *)(v4 + 88) = 1;
    }
    else
    {
      v13 = *((_OWORD *)a2 + 4);
      *v8 = *v9;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + 73) = *(_OWORD *)((char *)a2 + 73);
    }
    *(_DWORD *)(v4 + 89) = *(_DWORD *)((char *)a2 + 89);
    *(_QWORD *)(v4 + 96) = a2[12];
    v14 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(v4 + 128) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v4 + 104, (uint64_t)(a2 + 13));
    *(_QWORD *)(v4 + 144) = a2[18];
    *(_QWORD *)(v4 + 152) = a2[19];
    *(_QWORD *)(v4 + 160) = a2[20];
    *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 21);
    v15 = (void *)a2[23];
    v16 = v6[12];
    v17 = (void **)(v4 + v16);
    v122 = a2;
    v18 = (void **)((char *)a2 + v16);
    *(_QWORD *)(v4 + 184) = v15;
    v19 = type metadata accessor for PlatformItemList.Item();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v20 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v15;
    if (v21(v18, 1, v19))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v122;
LABEL_52:
      swift_weakCopyInit();
      v107 = v6[15];
      *(_BYTE *)(v4 + v6[14]) = *((_BYTE *)v24 + v6[14]);
      *(_BYTE *)(v4 + v107) = *((_BYTE *)v24 + v107);
      return v4;
    }
    v115 = v20;
    v121 = (int *)v19;
    v116 = v6;
    v25 = *v18;
    v26 = v18[1];
    *v17 = *v18;
    v17[1] = v26;
    v27 = v18[3];
    v17[2] = v18[2];
    v17[3] = v27;
    *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
    v28 = v18[6];
    v17[5] = v18[5];
    v17[6] = v28;
    *((_BYTE *)v17 + 56) = *((_BYTE *)v18 + 56);
    v29 = v17 + 8;
    v30 = v18 + 8;
    v31 = (unint64_t)v18[23];
    v32 = v25;
    v33 = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v31 >> 1 == 4294967294)
    {
      v34 = *((_OWORD *)v18 + 13);
      *((_OWORD *)v17 + 12) = *((_OWORD *)v18 + 12);
      *((_OWORD *)v17 + 13) = v34;
      *((_OWORD *)v17 + 14) = *((_OWORD *)v18 + 14);
      *(_DWORD *)((char *)v17 + 239) = *(_DWORD *)((char *)v18 + 239);
      v35 = *((_OWORD *)v18 + 9);
      *((_OWORD *)v17 + 8) = *((_OWORD *)v18 + 8);
      *((_OWORD *)v17 + 9) = v35;
      v36 = *((_OWORD *)v18 + 11);
      *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
      *((_OWORD *)v17 + 11) = v36;
      v37 = *((_OWORD *)v18 + 5);
      *v29 = *v30;
      *((_OWORD *)v17 + 5) = v37;
      v38 = *((_OWORD *)v18 + 7);
      *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
      *((_OWORD *)v17 + 7) = v38;
      v39 = v18[32];
      if (v39)
      {
LABEL_10:
        v17[31] = v18[31];
        v17[32] = v39;
        v40 = v18[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v40 >= 2)
          v41 = v40;
        v17[33] = v40;
        *((_DWORD *)v17 + 68) = *((_DWORD *)v18 + 68);
        *((_BYTE *)v17 + 276) = *((_BYTE *)v18 + 276);
        *(_WORD *)((char *)v17 + 277) = *(_WORD *)((char *)v18 + 277);
        v42 = v18[36];
        v17[35] = v18[35];
        v17[36] = v42;
        swift_retain();
        swift_retain();
LABEL_21:
        v54 = (unint64_t)v18[41];
        if (v54 >> 2 == 0xFFFFFFFF)
        {
          v55 = *(_OWORD *)(v18 + 47);
          *(_OWORD *)(v17 + 45) = *(_OWORD *)(v18 + 45);
          *(_OWORD *)(v17 + 47) = v55;
          v17[49] = v18[49];
          v56 = *(_OWORD *)(v18 + 39);
          *(_OWORD *)(v17 + 37) = *(_OWORD *)(v18 + 37);
          *(_OWORD *)(v17 + 39) = v56;
          v57 = *(_OWORD *)(v18 + 43);
          *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
          *(_OWORD *)(v17 + 43) = v57;
        }
        else
        {
          v58 = v18[37];
          v59 = (uint64_t)v18[38];
          v60 = (uint64_t)v18[40];
          v62 = (uint64_t)v18[42];
          v61 = (uint64_t)v18[43];
          v63 = v18[44];
          v109 = (uint64_t)v18[39];
          v110 = (uint64_t)v18[45];
          v111 = (uint64_t)v18[46];
          v113 = (uint64_t)v18[47];
          v117 = v18[48];
          __dsta = v18[49];
          outlined copy of PlatformItemList.Item.SystemItem(v58, v59, v109, v60, v54, v62, v61, (char)v63, v110, v111, v113, (char)v117, (uint64_t)__dsta);
          v17[37] = v58;
          v17[38] = (void *)v59;
          v17[39] = (void *)v109;
          v17[40] = (void *)v60;
          v17[41] = (void *)v54;
          v17[42] = (void *)v62;
          v17[43] = (void *)v61;
          v17[44] = v63;
          v17[45] = (void *)v110;
          v17[46] = (void *)v111;
          v17[47] = (void *)v113;
          v17[48] = v117;
          v17[49] = __dsta;
        }
        v64 = v18[51];
        if (v64 == (void *)1)
        {
          v65 = *((_OWORD *)v18 + 28);
          *((_OWORD *)v17 + 27) = *((_OWORD *)v18 + 27);
          *((_OWORD *)v17 + 28) = v65;
          *((_BYTE *)v17 + 464) = *((_BYTE *)v18 + 464);
          v66 = *((_OWORD *)v18 + 26);
          *((_OWORD *)v17 + 25) = *((_OWORD *)v18 + 25);
          *((_OWORD *)v17 + 26) = v66;
LABEL_34:
          v72 = v18[60];
          v17[59] = v18[59];
          v17[60] = v72;
          v17[61] = v18[61];
          *((_BYTE *)v17 + 496) = *((_BYTE *)v18 + 496);
          v73 = v18[63];
          swift_bridgeObjectRetain();
          if (v73)
          {
            v74 = v18[64];
            v17[63] = v73;
            v17[64] = v74;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v17 + 63) = *(_OWORD *)(v18 + 63);
          }
          *((_WORD *)v17 + 260) = *((_WORD *)v18 + 260);
          v75 = v18[66];
          if (v75)
          {
            v17[66] = v75;
            v17[67] = v18[67];
            v17[68] = v18[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v17 + 33) = *((_OWORD *)v18 + 33);
            v17[68] = v18[68];
          }
          v76 = v18[69];
          if (v76 == (void *)1)
          {
            *(_OWORD *)(v17 + 69) = *(_OWORD *)(v18 + 69);
            v17[71] = v18[71];
          }
          else
          {
            v17[69] = v76;
            v77 = v18[70];
            swift_retain();
            if (v77)
            {
              v78 = v18[71];
              v17[70] = v77;
              v17[71] = v78;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v17 + 35) = *((_OWORD *)v18 + 35);
            }
          }
          v79 = v18[72];
          v17[72] = v79;
          v17[73] = v18[73];
          v17[74] = v18[74];
          v17[75] = v18[75];
          v17[76] = v18[76];
          v17[77] = v18[77];
          v17[78] = v18[78];
          *((_WORD *)v17 + 316) = *((_WORD *)v18 + 316);
          *((_BYTE *)v17 + 634) = *((_BYTE *)v18 + 634);
          v80 = v121[28];
          __dst = (char *)v17 + v80;
          v81 = (char *)v18 + v80;
          v82 = type metadata accessor for CommandOperation();
          v114 = *(_QWORD *)(v82 - 8);
          v118 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v114 + 48);
          v83 = v79;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v118(v81, 1, v82))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(__dst, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
            v85 = v115;
            v6 = v116;
            v86 = v121;
            v24 = v122;
          }
          else
          {
            v87 = v81;
            v112 = v81;
            *__dst = *v81;
            v88 = *(int *)(v82 + 20);
            v89 = &__dst[v88];
            v90 = &v87[v88];
            v91 = *(_QWORD *)&v87[v88];
            v92 = *(_QWORD *)&v87[v88 + 8];
            v93 = v87[v88 + 16];
            outlined copy of Text.Storage(v91, v92, v93);
            *(_QWORD *)v89 = v91;
            *((_QWORD *)v89 + 1) = v92;
            v89[16] = v93;
            *((_QWORD *)v89 + 3) = *((_QWORD *)v90 + 3);
            v94 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v95 = &v89[v94];
            v96 = &v90[v94];
            v97 = v82;
            v98 = type metadata accessor for UUID();
            v99 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
            swift_bridgeObjectRetain();
            v100 = v98;
            v101 = v97;
            v99(v95, v96, v100);
            v102 = *(int *)(v97 + 24);
            v103 = &__dst[v102];
            v104 = &v112[v102];
            if (*v104)
            {
              v105 = v104[1];
              *v103 = *v104;
              v103[1] = v105;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v103 = *(_OWORD *)v104;
            }
            v85 = v115;
            v6 = v116;
            v86 = v121;
            v24 = v122;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v114 + 56))(__dst, 0, 1, v101);
          }
          *((_BYTE *)v17 + v86[29]) = *((_BYTE *)v18 + v86[29]);
          *((_BYTE *)v17 + v86[30]) = *((_BYTE *)v18 + v86[30]);
          *((_BYTE *)v17 + v86[31]) = *((_BYTE *)v18 + v86[31]);
          *((_BYTE *)v17 + v86[32]) = *((_BYTE *)v18 + v86[32]);
          *(void **)((char *)v17 + v86[33]) = *(void **)((char *)v18 + v86[33]);
          v106 = *(void (**)(void **, _QWORD, uint64_t, int *))(v85 + 56);
          swift_retain();
          v106(v17, 0, 1, v86);
          goto LABEL_52;
        }
        *((_DWORD *)v17 + 100) = *((_DWORD *)v18 + 100);
        *((_BYTE *)v17 + 404) = *((_BYTE *)v18 + 404);
        if (v64)
        {
          v67 = v18[52];
          v17[51] = v64;
          v17[52] = v67;
          swift_retain();
          v68 = v18[53];
          if (v68)
            goto LABEL_28;
        }
        else
        {
          *(_OWORD *)(v17 + 51) = *(_OWORD *)(v18 + 51);
          v68 = v18[53];
          if (v68)
          {
LABEL_28:
            v69 = v18[54];
            v17[53] = v68;
            v17[54] = v69;
            swift_retain();
            v70 = v18[55];
            if (v70)
            {
LABEL_29:
              v71 = v18[56];
              v17[55] = v70;
              v17[56] = v71;
              swift_retain();
LABEL_33:
              v17[57] = v18[57];
              *((_BYTE *)v17 + 464) = *((_BYTE *)v18 + 464);
              goto LABEL_34;
            }
LABEL_32:
            *(_OWORD *)(v17 + 55) = *(_OWORD *)(v18 + 55);
            goto LABEL_33;
          }
        }
        *(_OWORD *)(v17 + 53) = *(_OWORD *)(v18 + 53);
        v70 = v18[55];
        if (v70)
          goto LABEL_29;
        goto LABEL_32;
      }
    }
    else
    {
      v43 = *((unsigned __int8 *)v18 + 72);
      if (v43 == 255)
      {
        *(_QWORD *)v29 = *(_QWORD *)v30;
        *((_BYTE *)v17 + 72) = *((_BYTE *)v18 + 72);
      }
      else
      {
        v44 = v18[8];
        outlined copy of GraphicsImage.Contents(v44, *((_BYTE *)v18 + 72));
        v17[8] = v44;
        *((_BYTE *)v17 + 72) = v43;
        v31 = (unint64_t)v18[23];
      }
      v17[10] = v18[10];
      *(_OWORD *)(v17 + 11) = *(_OWORD *)(v18 + 11);
      *((_BYTE *)v17 + 104) = *((_BYTE *)v18 + 104);
      *(_OWORD *)((char *)v17 + 108) = *(_OWORD *)((char *)v18 + 108);
      *((_BYTE *)v17 + 124) = *((_BYTE *)v18 + 124);
      v45 = *((_OWORD *)v18 + 9);
      *((_OWORD *)v17 + 8) = *((_OWORD *)v18 + 8);
      *((_OWORD *)v17 + 9) = v45;
      *((_WORD *)v17 + 80) = *((_WORD *)v18 + 80);
      *((_BYTE *)v17 + 162) = *((_BYTE *)v18 + 162);
      *((_BYTE *)v17 + 163) = *((_BYTE *)v18 + 163);
      if (v31 >> 1 == 0xFFFFFFFF)
      {
        v46 = *(_OWORD *)(v18 + 23);
        *(_OWORD *)(v17 + 21) = *(_OWORD *)(v18 + 21);
        *(_OWORD *)(v17 + 23) = v46;
      }
      else
      {
        v47 = (uint64_t)v18[21];
        v48 = (uint64_t)v18[22];
        v49 = v18[24];
        outlined copy of AccessibilityImageLabel(v47, v48, v31);
        v17[21] = (void *)v47;
        v17[22] = (void *)v48;
        v17[23] = (void *)v31;
        v17[24] = v49;
      }
      v50 = v18[26];
      v17[25] = v18[25];
      v17[26] = v50;
      *((_WORD *)v17 + 108) = *((_WORD *)v18 + 108);
      *((_DWORD *)v17 + 55) = *((_DWORD *)v18 + 55);
      *((_BYTE *)v17 + 224) = *((_BYTE *)v18 + 224);
      v51 = v18[29];
      v17[29] = v51;
      *((_WORD *)v17 + 120) = *((_WORD *)v18 + 120);
      *((_BYTE *)v17 + 242) = *((_BYTE *)v18 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v52 = v51;
      v39 = v18[32];
      if (v39)
        goto LABEL_10;
    }
    v53 = *(_OWORD *)(v18 + 33);
    *(_OWORD *)(v17 + 31) = *(_OWORD *)(v18 + 31);
    *(_OWORD *)(v17 + 33) = v53;
    *(_OWORD *)(v17 + 35) = *(_OWORD *)(v18 + 35);
    goto LABEL_21;
  }
  v12 = *a2;
  *(_QWORD *)v4 = *a2;
  v4 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v4;
}

uint64_t destroy for ToolbarStorage.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 88) == 1)
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  swift_release();
  swift_bridgeObjectRelease();

  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for PlatformItemList.Item();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {

    swift_bridgeObjectRelease();
    swift_release();
    v6 = *(_QWORD *)(v4 + 184);
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v8 = *(unsigned __int8 *)(v4 + 72);
      if (v8 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
        v6 = *(_QWORD *)(v4 + 184);
        v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v7 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v6);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      v9 = *(void **)(v4 + 264);
      if ((unint64_t)v9 >= 2)

      swift_release();
      swift_release();
    }
    v10 = *(_QWORD *)(v4 + 328);
    if (v10 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(_QWORD *)(v4 + 304), *(_QWORD *)(v4 + 312), *(_QWORD *)(v4 + 320), v10, *(_QWORD *)(v4 + 336), *(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 352), *(_QWORD *)(v4 + 360), *(_QWORD *)(v4 + 368), *(_QWORD *)(v4 + 376), *(_QWORD *)(v4 + 384), *(_QWORD *)(v4 + 392));
    v11 = *(_QWORD *)(v4 + 408);
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 504))
          swift_release();
        if (*(_QWORD *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v4 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v4 + *(int *)(v5 + 112);
        v13 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
        {
          v14 = v12 + *(int *)(v13 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
          swift_bridgeObjectRelease();
          v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v16 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
          if (*(_QWORD *)(v12 + *(int *)(v13 + 24)))
            swift_release();
        }
        swift_release();
        return swift_weakDestroy();
      }
      swift_release();
    }
    if (*(_QWORD *)(v4 + 424))
      swift_release();
    if (*(_QWORD *)(v4 + 440))
      swift_release();
    goto LABEL_23;
  }
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void **, uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  int v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  void (*v94)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(void **, _QWORD, uint64_t, int *);
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int (*v107)(_BYTE *, uint64_t, uint64_t);
  uint64_t v108;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  _BYTE *v114;
  int *v115;
  uint64_t v116;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(unsigned __int8 *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v10;
    (**(void (***)(uint64_t, _OWORD *))(v10 - 8))(a1 + 48, v8);
    *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    v11 = v8[1];
    *v7 = *v8;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v8 + 25);
  }
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 104, a2 + 104);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v13 = *(void **)(a2 + 184);
  v14 = a3[12];
  v15 = (void **)(a1 + v14);
  v116 = a2;
  v16 = (void **)(a2 + v14);
  *(_QWORD *)(a1 + 184) = v13;
  v17 = type metadata accessor for PlatformItemList.Item();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v18 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = v13;
  if (v19(v16, 1, v17))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_50;
  }
  v111 = v18;
  v115 = (int *)v17;
  v112 = a3;
  v22 = *v16;
  v23 = v16[1];
  *v15 = *v16;
  v15[1] = v23;
  v24 = v16[3];
  v15[2] = v16[2];
  v15[3] = v24;
  *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
  v25 = v16[6];
  v15[5] = v16[5];
  v15[6] = v25;
  *((_BYTE *)v15 + 56) = *((_BYTE *)v16 + 56);
  v26 = v15 + 8;
  v27 = v16 + 8;
  v28 = (unint64_t)v16[23];
  v29 = v22;
  v30 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v28 >> 1 != 4294967294)
  {
    v40 = *((unsigned __int8 *)v16 + 72);
    if (v40 == 255)
    {
      *v26 = *v27;
      *((_BYTE *)v15 + 72) = *((_BYTE *)v16 + 72);
    }
    else
    {
      v41 = v16[8];
      outlined copy of GraphicsImage.Contents(v41, *((_BYTE *)v16 + 72));
      v15[8] = v41;
      *((_BYTE *)v15 + 72) = v40;
      v28 = (unint64_t)v16[23];
    }
    v15[10] = v16[10];
    *(_OWORD *)(v15 + 11) = *(_OWORD *)(v16 + 11);
    *((_BYTE *)v15 + 104) = *((_BYTE *)v16 + 104);
    *(_OWORD *)((char *)v15 + 108) = *(_OWORD *)((char *)v16 + 108);
    *((_BYTE *)v15 + 124) = *((_BYTE *)v16 + 124);
    v42 = *((_OWORD *)v16 + 9);
    *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
    *((_OWORD *)v15 + 9) = v42;
    *((_WORD *)v15 + 80) = *((_WORD *)v16 + 80);
    *((_BYTE *)v15 + 162) = *((_BYTE *)v16 + 162);
    *((_BYTE *)v15 + 163) = *((_BYTE *)v16 + 163);
    if (v28 >> 1 == 0xFFFFFFFF)
    {
      v43 = *(_OWORD *)(v16 + 23);
      *(_OWORD *)(v15 + 21) = *(_OWORD *)(v16 + 21);
      *(_OWORD *)(v15 + 23) = v43;
    }
    else
    {
      v44 = (uint64_t)v16[21];
      v45 = (uint64_t)v16[22];
      v46 = v16[24];
      outlined copy of AccessibilityImageLabel(v44, v45, v28);
      v15[21] = (void *)v44;
      v15[22] = (void *)v45;
      v15[23] = (void *)v28;
      v15[24] = v46;
    }
    v47 = v16[26];
    v15[25] = v16[25];
    v15[26] = v47;
    *((_WORD *)v15 + 108) = *((_WORD *)v16 + 108);
    *((_DWORD *)v15 + 55) = *((_DWORD *)v16 + 55);
    *((_BYTE *)v15 + 224) = *((_BYTE *)v16 + 224);
    v48 = v16[29];
    v15[29] = v48;
    *((_WORD *)v15 + 120) = *((_WORD *)v16 + 120);
    *((_BYTE *)v15 + 242) = *((_BYTE *)v16 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v49 = v48;
    v36 = v16[32];
    if (v36)
      goto LABEL_8;
LABEL_18:
    v50 = *(_OWORD *)(v16 + 33);
    *(_OWORD *)(v15 + 31) = *(_OWORD *)(v16 + 31);
    *(_OWORD *)(v15 + 33) = v50;
    *(_OWORD *)(v15 + 35) = *(_OWORD *)(v16 + 35);
    goto LABEL_19;
  }
  v31 = *((_OWORD *)v16 + 13);
  *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
  *((_OWORD *)v15 + 13) = v31;
  *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
  *(_DWORD *)((char *)v15 + 239) = *(_DWORD *)((char *)v16 + 239);
  v32 = *((_OWORD *)v16 + 9);
  *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
  *((_OWORD *)v15 + 9) = v32;
  v33 = *((_OWORD *)v16 + 11);
  *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
  *((_OWORD *)v15 + 11) = v33;
  v34 = *((_OWORD *)v16 + 5);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *((_OWORD *)v15 + 5) = v34;
  v35 = *((_OWORD *)v16 + 7);
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  *((_OWORD *)v15 + 7) = v35;
  v36 = v16[32];
  if (!v36)
    goto LABEL_18;
LABEL_8:
  v15[31] = v16[31];
  v15[32] = v36;
  v37 = v16[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v37 >= 2)
    v38 = v37;
  v15[33] = v37;
  *((_DWORD *)v15 + 68) = *((_DWORD *)v16 + 68);
  *((_BYTE *)v15 + 276) = *((_BYTE *)v16 + 276);
  *(_WORD *)((char *)v15 + 277) = *(_WORD *)((char *)v16 + 277);
  v39 = v16[36];
  v15[35] = v16[35];
  v15[36] = v39;
  swift_retain();
  swift_retain();
LABEL_19:
  v51 = (unint64_t)v16[41];
  if (v51 >> 2 == 0xFFFFFFFF)
  {
    v52 = *(_OWORD *)(v16 + 47);
    *(_OWORD *)(v15 + 45) = *(_OWORD *)(v16 + 45);
    *(_OWORD *)(v15 + 47) = v52;
    v15[49] = v16[49];
    v53 = *(_OWORD *)(v16 + 39);
    *(_OWORD *)(v15 + 37) = *(_OWORD *)(v16 + 37);
    *(_OWORD *)(v15 + 39) = v53;
    v54 = *(_OWORD *)(v16 + 43);
    *(_OWORD *)(v15 + 41) = *(_OWORD *)(v16 + 41);
    *(_OWORD *)(v15 + 43) = v54;
  }
  else
  {
    v55 = v16[37];
    v56 = (uint64_t)v16[38];
    v57 = (uint64_t)v16[39];
    v58 = (uint64_t)v16[42];
    v59 = v16[44];
    v102 = (uint64_t)v16[40];
    v103 = (uint64_t)v16[45];
    v104 = (uint64_t)v16[46];
    v106 = (uint64_t)v16[47];
    __dsta = v16[48];
    v113 = (uint64_t)v16[49];
    v60 = (uint64_t)v16[43];
    outlined copy of PlatformItemList.Item.SystemItem(v55, v56, v57, v102, v51, v58, v60, (char)v59, v103, v104, v106, (char)__dsta, v113);
    v15[37] = v55;
    v15[38] = (void *)v56;
    v15[39] = (void *)v57;
    v15[40] = (void *)v102;
    v15[41] = (void *)v51;
    v15[42] = (void *)v58;
    v15[43] = (void *)v60;
    v15[44] = v59;
    v15[45] = (void *)v103;
    v15[46] = (void *)v104;
    v15[47] = (void *)v106;
    v15[48] = __dsta;
    v15[49] = (void *)v113;
  }
  v61 = v16[51];
  if (v61 != (void *)1)
  {
    *((_DWORD *)v15 + 100) = *((_DWORD *)v16 + 100);
    *((_BYTE *)v15 + 404) = *((_BYTE *)v16 + 404);
    if (v61)
    {
      v64 = v16[52];
      v15[51] = v61;
      v15[52] = v64;
      swift_retain();
      v65 = v16[53];
      if (v65)
        goto LABEL_26;
    }
    else
    {
      *(_OWORD *)(v15 + 51) = *(_OWORD *)(v16 + 51);
      v65 = v16[53];
      if (v65)
      {
LABEL_26:
        v66 = v16[54];
        v15[53] = v65;
        v15[54] = v66;
        swift_retain();
        v67 = v16[55];
        if (v67)
        {
LABEL_27:
          v68 = v16[56];
          v15[55] = v67;
          v15[56] = v68;
          swift_retain();
LABEL_31:
          v15[57] = v16[57];
          *((_BYTE *)v15 + 464) = *((_BYTE *)v16 + 464);
          goto LABEL_32;
        }
LABEL_30:
        *(_OWORD *)(v15 + 55) = *(_OWORD *)(v16 + 55);
        goto LABEL_31;
      }
    }
    *(_OWORD *)(v15 + 53) = *(_OWORD *)(v16 + 53);
    v67 = v16[55];
    if (v67)
      goto LABEL_27;
    goto LABEL_30;
  }
  v62 = *((_OWORD *)v16 + 28);
  *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
  *((_OWORD *)v15 + 28) = v62;
  *((_BYTE *)v15 + 464) = *((_BYTE *)v16 + 464);
  v63 = *((_OWORD *)v16 + 26);
  *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
  *((_OWORD *)v15 + 26) = v63;
LABEL_32:
  v69 = v16[60];
  v15[59] = v16[59];
  v15[60] = v69;
  v15[61] = v16[61];
  *((_BYTE *)v15 + 496) = *((_BYTE *)v16 + 496);
  v70 = v16[63];
  swift_bridgeObjectRetain();
  if (v70)
  {
    v71 = v16[64];
    v15[63] = v70;
    v15[64] = v71;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v15 + 63) = *(_OWORD *)(v16 + 63);
  }
  *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
  v72 = v16[66];
  if (v72)
  {
    v15[66] = v72;
    v15[67] = v16[67];
    v15[68] = v16[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
    v15[68] = v16[68];
  }
  v73 = v16[69];
  if (v73 == (void *)1)
  {
    *(_OWORD *)(v15 + 69) = *(_OWORD *)(v16 + 69);
    v15[71] = v16[71];
  }
  else
  {
    v15[69] = v73;
    v74 = v16[70];
    swift_retain();
    if (v74)
    {
      v75 = v16[71];
      v15[70] = v74;
      v15[71] = v75;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v15 + 35) = *((_OWORD *)v16 + 35);
    }
  }
  v76 = v16[72];
  v15[72] = v76;
  v15[73] = v16[73];
  v15[74] = v16[74];
  v15[75] = v16[75];
  v15[76] = v16[76];
  v15[77] = v16[77];
  v15[78] = v16[78];
  *((_WORD *)v15 + 316) = *((_WORD *)v16 + 316);
  *((_BYTE *)v15 + 634) = *((_BYTE *)v16 + 634);
  v77 = v115[28];
  __dst = (char *)v15 + v77;
  v114 = (char *)v16 + v77;
  v78 = type metadata accessor for CommandOperation();
  v79 = *(_QWORD *)(v78 - 8);
  v107 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48);
  v80 = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v107(v114, 1, v78))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v114, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    v82 = v111;
    a3 = v112;
    v83 = v115;
  }
  else
  {
    v105 = v79;
    v108 = v78;
    *__dst = *v114;
    v84 = *(int *)(v78 + 20);
    v85 = &__dst[v84];
    v86 = &v114[v84];
    v87 = *(_QWORD *)&v114[v84];
    v88 = *(_QWORD *)&v114[v84 + 8];
    v89 = v114[v84 + 16];
    outlined copy of Text.Storage(*(_QWORD *)v86, *((_QWORD *)v86 + 1), v86[16]);
    *(_QWORD *)v85 = v87;
    *((_QWORD *)v85 + 1) = v88;
    v85[16] = v89;
    *((_QWORD *)v85 + 3) = *((_QWORD *)v86 + 3);
    v90 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v91 = &v85[v90];
    v92 = &v86[v90];
    v93 = type metadata accessor for UUID();
    v94 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
    swift_bridgeObjectRetain();
    v94(v91, v92, v93);
    v95 = *(int *)(v108 + 24);
    v96 = &__dst[v95];
    v97 = &v114[v95];
    if (*v97)
    {
      v98 = v97[1];
      *v96 = *v97;
      v96[1] = v98;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v96 = *(_OWORD *)v97;
    }
    v82 = v111;
    a3 = v112;
    v83 = v115;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(__dst, 0, 1, v108);
  }
  *((_BYTE *)v15 + v83[29]) = *((_BYTE *)v16 + v83[29]);
  *((_BYTE *)v15 + v83[30]) = *((_BYTE *)v16 + v83[30]);
  *((_BYTE *)v15 + v83[31]) = *((_BYTE *)v16 + v83[31]);
  *((_BYTE *)v15 + v83[32]) = *((_BYTE *)v16 + v83[32]);
  *(void **)((char *)v15 + v83[33]) = *(void **)((char *)v16 + v83[33]);
  v99 = *(void (**)(void **, _QWORD, uint64_t, int *))(v82 + 56);
  swift_retain();
  v99(v15, 0, 1, v83);
LABEL_50:
  swift_weakCopyInit();
  v100 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(v116 + a3[14]);
  *(_BYTE *)(a1 + v100) = *(_BYTE *)(v116 + v100);
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  id *v25;
  unint64_t v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  id v39;
  int v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  _OWORD *v47;
  id *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  void *v80;
  id v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  id v139;
  int v140;
  id v141;
  void *v142;
  char v143;
  void (*v144)(uint64_t, _QWORD, uint64_t, int *);
  id v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  int v155;
  void *v156;
  id v157;
  id v158;
  char v159;
  id v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _OWORD *v164;
  _OWORD *v165;
  uint64_t v166;
  unint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  void *v182;
  void *v183;
  id v184;
  __int128 *v185;
  __int128 *v186;
  uint64_t v187;
  void *v188;
  void *v189;
  id v190;
  void *v191;
  id v192;
  int v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  id v198;
  int v199;
  __int128 *v200;
  __int128 *v201;
  unint64_t v202;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  _OWORD *v235;
  _OWORD *v236;
  _OWORD *v237;
  uint64_t v238;
  _OWORD *v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD *v263;
  _OWORD *v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  __int128 *v268;
  __int128 *v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  void *v278;
  id v279;
  uint64_t v280;
  _BYTE *v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t (*v284)(_BYTE *, uint64_t, uint64_t);
  int v285;
  uint64_t (*v286)(uint64_t, uint64_t);
  uint64_t v287;
  uint64_t v288;
  _BYTE *v289;
  _BYTE *v290;
  _BYTE *v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  _BYTE *v296;
  _BYTE *v297;
  uint64_t v298;
  void (*v299)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v300;
  _QWORD *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  _BYTE *v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  _BYTE *v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *__dsta;
  _BYTE *__dst;
  void *__dstb;
  void *__dstc;
  char *__dstd;
  char *__dste;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _BYTE *v349;
  _BYTE *v350;
  uint64_t v351;
  unsigned int (*v352)(_BYTE *, uint64_t, uint64_t);
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int *v356;
  int *v357;
  int *v358;
  int *v359;
  int *v360;
  int *v361;
  int *v362;

  v4 = a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != v4)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 48);
    if (*(_BYTE *)(v4 + 88) == 1)
    {
      v6 = *(_QWORD *)(v4 + 72);
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 80);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 48, v4 + 48);
      *(_BYTE *)(a1 + 88) = 1;
    }
    else
    {
      v7 = *(_OWORD *)(v4 + 48);
      v8 = *(_OWORD *)(v4 + 64);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(v4 + 73);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
    }
  }
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(v4 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(v4 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(v4 + 91);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(v4 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 96);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(v4 + 104));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v4 + 144);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(v4 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(v4 + 156);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v4 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(v4 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(v4 + 176);
  v9 = *(void **)(a1 + 184);
  v10 = *(void **)(v4 + 184);
  *(_QWORD *)(a1 + 184) = v10;
  v11 = v10;

  v12 = a3[12];
  v13 = a1 + v12;
  v14 = v4 + v12;
  v15 = (int *)type metadata accessor for PlatformItemList.Item();
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v13, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_10;
    }
    v41 = *(void **)v13;
    v42 = *(void **)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v43 = v42;

    v44 = *(void **)(v13 + 8);
    v45 = *(void **)(v14 + 8);
    *(_QWORD *)(v13 + 8) = v45;
    v46 = v45;

    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
    *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
    swift_retain();
    swift_release();
    *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
    v47 = (_OWORD *)(v13 + 64);
    v48 = (id *)(v14 + 64);
    v49 = *(_QWORD *)(v14 + 184) & 0xFFFFFFFFFFFFFFFELL;
    v357 = a3;
    if (*(_QWORD *)(v13 + 184) >> 1 == 4294967294)
    {
      if (v49 == 0x1FFFFFFFCLL)
      {
        v50 = *(_OWORD *)v48;
        v51 = *(_OWORD *)(v14 + 80);
        v52 = *(_OWORD *)(v14 + 112);
        *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
        *(_OWORD *)(v13 + 112) = v52;
        *v47 = v50;
        *(_OWORD *)(v13 + 80) = v51;
        v53 = *(_OWORD *)(v14 + 128);
        v54 = *(_OWORD *)(v14 + 144);
        v55 = *(_OWORD *)(v14 + 176);
        *(_OWORD *)(v13 + 160) = *(_OWORD *)(v14 + 160);
        *(_OWORD *)(v13 + 176) = v55;
        *(_OWORD *)(v13 + 128) = v53;
        *(_OWORD *)(v13 + 144) = v54;
        v56 = *(_OWORD *)(v14 + 192);
        v57 = *(_OWORD *)(v14 + 208);
        v58 = *(_OWORD *)(v14 + 224);
        *(_DWORD *)(v13 + 239) = *(_DWORD *)(v14 + 239);
        *(_OWORD *)(v13 + 208) = v57;
        *(_OWORD *)(v13 + 224) = v58;
        *(_OWORD *)(v13 + 192) = v56;
      }
      else
      {
        v138 = *(unsigned __int8 *)(v14 + 72);
        if (v138 == 255)
        {
          v145 = *v48;
          *(_BYTE *)(v13 + 72) = *(_BYTE *)(v14 + 72);
          *(_QWORD *)v47 = v145;
        }
        else
        {
          v139 = *v48;
          outlined copy of GraphicsImage.Contents(*v48, *(_BYTE *)(v14 + 72));
          *(_QWORD *)(v13 + 64) = v139;
          *(_BYTE *)(v13 + 72) = v138;
        }
        *(_QWORD *)(v13 + 80) = *(_QWORD *)(v14 + 80);
        *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
        *(_BYTE *)(v13 + 104) = *(_BYTE *)(v14 + 104);
        v146 = *(_OWORD *)(v14 + 108);
        *(_BYTE *)(v13 + 124) = *(_BYTE *)(v14 + 124);
        *(_OWORD *)(v13 + 108) = v146;
        v147 = *(_OWORD *)(v14 + 128);
        v148 = *(_OWORD *)(v14 + 144);
        *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
        *(_OWORD *)(v13 + 128) = v147;
        *(_OWORD *)(v13 + 144) = v148;
        *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
        *(_BYTE *)(v13 + 162) = *(_BYTE *)(v14 + 162);
        *(_BYTE *)(v13 + 163) = *(_BYTE *)(v14 + 163);
        v149 = *(_QWORD *)(v14 + 184);
        if (v149 >> 1 == 0xFFFFFFFF)
        {
          v150 = *(_OWORD *)(v14 + 184);
          *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 168);
          *(_OWORD *)(v13 + 184) = v150;
        }
        else
        {
          v151 = *(_QWORD *)(v14 + 168);
          v152 = *(_QWORD *)(v14 + 176);
          v153 = v15;
          v154 = *(_QWORD *)(v14 + 192);
          outlined copy of AccessibilityImageLabel(v151, v152, *(_QWORD *)(v14 + 184));
          *(_QWORD *)(v13 + 168) = v151;
          *(_QWORD *)(v13 + 176) = v152;
          *(_QWORD *)(v13 + 184) = v149;
          *(_QWORD *)(v13 + 192) = v154;
          v15 = v153;
        }
        *(_QWORD *)(v13 + 200) = *(_QWORD *)(v14 + 200);
        *(_QWORD *)(v13 + 208) = *(_QWORD *)(v14 + 208);
        *(_BYTE *)(v13 + 216) = *(_BYTE *)(v14 + 216);
        *(_BYTE *)(v13 + 217) = *(_BYTE *)(v14 + 217);
        v155 = *(_DWORD *)(v14 + 220);
        *(_BYTE *)(v13 + 224) = *(_BYTE *)(v14 + 224);
        *(_DWORD *)(v13 + 220) = v155;
        v156 = *(void **)(v14 + 232);
        *(_QWORD *)(v13 + 232) = v156;
        *(_WORD *)(v13 + 240) = *(_WORD *)(v14 + 240);
        *(_BYTE *)(v13 + 242) = *(_BYTE *)(v14 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        v157 = v156;
      }
    }
    else if (v49 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(v13 + 64);
      v61 = *(_OWORD *)(v14 + 112);
      v63 = *(_OWORD *)v48;
      v62 = *(_OWORD *)(v14 + 80);
      *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
      *(_OWORD *)(v13 + 112) = v61;
      *v47 = v63;
      *(_OWORD *)(v13 + 80) = v62;
      v64 = *(_OWORD *)(v14 + 176);
      v66 = *(_OWORD *)(v14 + 128);
      v65 = *(_OWORD *)(v14 + 144);
      *(_OWORD *)(v13 + 160) = *(_OWORD *)(v14 + 160);
      *(_OWORD *)(v13 + 176) = v64;
      *(_OWORD *)(v13 + 128) = v66;
      *(_OWORD *)(v13 + 144) = v65;
      v68 = *(_OWORD *)(v14 + 208);
      v67 = *(_OWORD *)(v14 + 224);
      v69 = *(_OWORD *)(v14 + 192);
      *(_DWORD *)(v13 + 239) = *(_DWORD *)(v14 + 239);
      *(_OWORD *)(v13 + 208) = v68;
      *(_OWORD *)(v13 + 224) = v67;
      *(_OWORD *)(v13 + 192) = v69;
    }
    else
    {
      v140 = *(unsigned __int8 *)(v14 + 72);
      if (*(unsigned __int8 *)(v13 + 72) == 255)
      {
        if (v140 == 255)
        {
          v160 = *v48;
          *(_BYTE *)(v13 + 72) = *(_BYTE *)(v14 + 72);
          *(_QWORD *)v47 = v160;
        }
        else
        {
          v158 = *v48;
          outlined copy of GraphicsImage.Contents(*v48, *(_BYTE *)(v14 + 72));
          *(_QWORD *)(v13 + 64) = v158;
          *(_BYTE *)(v13 + 72) = v140;
        }
      }
      else if (v140 == 255)
      {
        outlined destroy of GraphicsImage.Contents(v13 + 64);
        v159 = *(_BYTE *)(v14 + 72);
        *(_QWORD *)v47 = *v48;
        *(_BYTE *)(v13 + 72) = v159;
      }
      else
      {
        v141 = *v48;
        outlined copy of GraphicsImage.Contents(*v48, *(_BYTE *)(v14 + 72));
        v142 = *(void **)(v13 + 64);
        *(_QWORD *)(v13 + 64) = v141;
        v143 = *(_BYTE *)(v13 + 72);
        *(_BYTE *)(v13 + 72) = v140;
        outlined consume of GraphicsImage.Contents(v142, v143);
      }
      *(_QWORD *)(v13 + 80) = *(_QWORD *)(v14 + 80);
      *(_QWORD *)(v13 + 88) = *(_QWORD *)(v14 + 88);
      *(_QWORD *)(v13 + 96) = *(_QWORD *)(v14 + 96);
      *(_BYTE *)(v13 + 104) = *(_BYTE *)(v14 + 104);
      v161 = *(_OWORD *)(v14 + 108);
      *(_BYTE *)(v13 + 124) = *(_BYTE *)(v14 + 124);
      *(_OWORD *)(v13 + 108) = v161;
      v162 = *(_OWORD *)(v14 + 128);
      v163 = *(_OWORD *)(v14 + 144);
      *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
      *(_OWORD *)(v13 + 128) = v162;
      *(_OWORD *)(v13 + 144) = v163;
      *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
      *(_BYTE *)(v13 + 162) = *(_BYTE *)(v14 + 162);
      *(_BYTE *)(v13 + 163) = *(_BYTE *)(v14 + 163);
      v164 = (_OWORD *)(v13 + 168);
      v165 = (_OWORD *)(v14 + 168);
      v166 = *(_QWORD *)(v14 + 184);
      v167 = v166 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(v13 + 184) >> 1 == 0xFFFFFFFFLL)
      {
        if (v167 == 0x1FFFFFFFELL)
        {
          v168 = *(_OWORD *)(v14 + 184);
          *v164 = *v165;
          *(_OWORD *)(v13 + 184) = v168;
        }
        else
        {
          v170 = *(_QWORD *)(v14 + 168);
          v171 = *(_QWORD *)(v14 + 176);
          v172 = v15;
          v173 = *(_QWORD *)(v14 + 192);
          outlined copy of AccessibilityImageLabel(v170, v171, *(_QWORD *)(v14 + 184));
          *(_QWORD *)(v13 + 168) = v170;
          *(_QWORD *)(v13 + 176) = v171;
          *(_QWORD *)(v13 + 184) = v166;
          *(_QWORD *)(v13 + 192) = v173;
          v15 = v172;
        }
      }
      else if (v167 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(v13 + 168);
        v169 = *(_OWORD *)(v14 + 184);
        *v164 = *v165;
        *(_OWORD *)(v13 + 184) = v169;
      }
      else
      {
        v174 = *(_QWORD *)(v14 + 168);
        v175 = *(_QWORD *)(v14 + 176);
        v176 = v15;
        v177 = *(_QWORD *)(v14 + 192);
        outlined copy of AccessibilityImageLabel(v174, v175, *(_QWORD *)(v14 + 184));
        v178 = *(_QWORD *)(v13 + 168);
        v179 = *(_QWORD *)(v13 + 176);
        v180 = *(_QWORD *)(v13 + 184);
        *(_QWORD *)(v13 + 168) = v174;
        *(_QWORD *)(v13 + 176) = v175;
        *(_QWORD *)(v13 + 184) = v166;
        *(_QWORD *)(v13 + 192) = v177;
        v15 = v176;
        outlined consume of AccessibilityImageLabel(v178, v179, v180);
      }
      *(_QWORD *)(v13 + 200) = *(_QWORD *)(v14 + 200);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(v13 + 208) = *(_QWORD *)(v14 + 208);
      swift_retain();
      swift_release();
      *(_BYTE *)(v13 + 216) = *(_BYTE *)(v14 + 216);
      *(_BYTE *)(v13 + 217) = *(_BYTE *)(v14 + 217);
      v181 = *(_DWORD *)(v14 + 220);
      *(_BYTE *)(v13 + 224) = *(_BYTE *)(v14 + 224);
      *(_DWORD *)(v13 + 220) = v181;
      v182 = *(void **)(v13 + 232);
      v183 = *(void **)(v14 + 232);
      *(_QWORD *)(v13 + 232) = v183;
      v184 = v183;

      *(_WORD *)(v13 + 240) = *(_WORD *)(v14 + 240);
      *(_BYTE *)(v13 + 242) = *(_BYTE *)(v14 + 242);
    }
    v185 = (__int128 *)(v13 + 248);
    v186 = (__int128 *)(v14 + 248);
    v187 = *(_QWORD *)(v14 + 256);
    if (!*(_QWORD *)(v13 + 256))
    {
      if (v187)
      {
        *(_QWORD *)(v13 + 248) = *(_QWORD *)(v14 + 248);
        *(_QWORD *)(v13 + 256) = *(_QWORD *)(v14 + 256);
        v191 = *(void **)(v14 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v191 >= 2)
          v192 = v191;
        *(_QWORD *)(v13 + 264) = v191;
        v193 = *(_DWORD *)(v14 + 272);
        *(_BYTE *)(v13 + 276) = *(_BYTE *)(v14 + 276);
        *(_DWORD *)(v13 + 272) = v193;
        *(_BYTE *)(v13 + 277) = *(_BYTE *)(v14 + 277);
        *(_BYTE *)(v13 + 278) = *(_BYTE *)(v14 + 278);
        *(_QWORD *)(v13 + 280) = *(_QWORD *)(v14 + 280);
        *(_QWORD *)(v13 + 288) = *(_QWORD *)(v14 + 288);
        swift_retain();
        swift_retain();
      }
      else
      {
        v196 = *v186;
        v197 = *(_OWORD *)(v14 + 280);
        *(_OWORD *)(v13 + 264) = *(_OWORD *)(v14 + 264);
        *(_OWORD *)(v13 + 280) = v197;
        *v185 = v196;
      }
LABEL_99:
      v200 = (__int128 *)(v13 + 296);
      v201 = (__int128 *)(v14 + 296);
      v202 = *(_QWORD *)(v14 + 328);
      v203 = v202 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(_QWORD *)(v13 + 328) >> 2 == 0xFFFFFFFFLL)
      {
        if (v203 == 0x3FFFFFFFCLL)
        {
          v204 = *v201;
          v205 = *(_OWORD *)(v14 + 328);
          *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
          *(_OWORD *)(v13 + 328) = v205;
          *v200 = v204;
          v206 = *(_OWORD *)(v14 + 344);
          v207 = *(_OWORD *)(v14 + 360);
          v208 = *(_OWORD *)(v14 + 376);
          *(_QWORD *)(v13 + 392) = *(_QWORD *)(v14 + 392);
          *(_OWORD *)(v13 + 360) = v207;
          *(_OWORD *)(v13 + 376) = v208;
          *(_OWORD *)(v13 + 344) = v206;
        }
        else
        {
          v214 = *(void **)(v14 + 296);
          v359 = v15;
          v327 = *(_QWORD *)(v14 + 320);
          v330 = *(_QWORD *)(v14 + 312);
          v216 = *(_QWORD *)(v14 + 336);
          v215 = *(_QWORD *)(v14 + 344);
          v217 = *(_QWORD *)(v14 + 352);
          v333 = *(_QWORD *)(v14 + 360);
          v337 = *(_QWORD *)(v14 + 368);
          __dstb = *(void **)(v14 + 376);
          v347 = *(_QWORD *)(v14 + 384);
          v353 = *(_QWORD *)(v14 + 392);
          v218 = *(_QWORD *)(v14 + 304);
          outlined copy of PlatformItemList.Item.SystemItem(v214, v218, v330, v327, v202, v216, v215, v217, v333, v337, (uint64_t)__dstb, v347, v353);
          *(_QWORD *)(v13 + 296) = v214;
          *(_QWORD *)(v13 + 304) = v218;
          *(_QWORD *)(v13 + 312) = v330;
          v15 = v359;
          *(_QWORD *)(v13 + 320) = v327;
          *(_QWORD *)(v13 + 328) = v202;
          *(_QWORD *)(v13 + 336) = v216;
          *(_QWORD *)(v13 + 344) = v215;
          *(_QWORD *)(v13 + 352) = v217;
          *(_QWORD *)(v13 + 360) = v333;
          *(_QWORD *)(v13 + 368) = v337;
          *(_QWORD *)(v13 + 376) = __dstb;
          *(_QWORD *)(v13 + 384) = v347;
          *(_QWORD *)(v13 + 392) = v353;
        }
      }
      else if (v203 == 0x3FFFFFFFCLL)
      {
        outlined destroy of PlatformItemList.Item.SystemItem(v13 + 296);
        v210 = *(_OWORD *)(v14 + 312);
        v209 = *(_OWORD *)(v14 + 328);
        *v200 = *v201;
        *(_OWORD *)(v13 + 312) = v210;
        *(_OWORD *)(v13 + 328) = v209;
        v212 = *(_OWORD *)(v14 + 360);
        v211 = *(_OWORD *)(v14 + 376);
        v213 = *(_OWORD *)(v14 + 344);
        *(_QWORD *)(v13 + 392) = *(_QWORD *)(v14 + 392);
        *(_OWORD *)(v13 + 360) = v212;
        *(_OWORD *)(v13 + 376) = v211;
        *(_OWORD *)(v13 + 344) = v213;
      }
      else
      {
        v219 = *(void **)(v14 + 296);
        v220 = *(_QWORD *)(v14 + 304);
        v360 = v15;
        v221 = *(_QWORD *)(v14 + 312);
        v334 = *(_QWORD *)(v14 + 344);
        v338 = *(_QWORD *)(v14 + 336);
        v222 = *(_QWORD *)(v14 + 360);
        v328 = *(_QWORD *)(v14 + 320);
        v331 = *(_QWORD *)(v14 + 352);
        v223 = *(_QWORD *)(v14 + 368);
        __dstc = *(void **)(v14 + 376);
        v348 = *(_QWORD *)(v14 + 384);
        v354 = *(_QWORD *)(v14 + 392);
        outlined copy of PlatformItemList.Item.SystemItem(v219, v220, v221, v328, v202, v338, v334, v331, v222, v223, (uint64_t)__dstc, v348, v354);
        v224 = *(void **)(v13 + 296);
        v225 = *(_QWORD *)(v13 + 304);
        v226 = *(_QWORD *)(v13 + 312);
        v227 = *(_QWORD *)(v13 + 320);
        v228 = *(_QWORD *)(v13 + 328);
        v229 = *(_QWORD *)(v13 + 336);
        v230 = *(_QWORD *)(v13 + 344);
        v231 = *(_QWORD *)(v13 + 352);
        v232 = *(_OWORD *)(v13 + 360);
        v233 = *(_OWORD *)(v13 + 376);
        v234 = *(_QWORD *)(v13 + 392);
        *(_QWORD *)(v13 + 296) = v219;
        *(_QWORD *)(v13 + 304) = v220;
        *(_QWORD *)(v13 + 312) = v221;
        v15 = v360;
        *(_QWORD *)(v13 + 320) = v328;
        *(_QWORD *)(v13 + 328) = v202;
        *(_QWORD *)(v13 + 336) = v338;
        *(_QWORD *)(v13 + 344) = v334;
        *(_QWORD *)(v13 + 352) = v331;
        *(_QWORD *)(v13 + 360) = v222;
        *(_QWORD *)(v13 + 368) = v223;
        *(_QWORD *)(v13 + 376) = __dstc;
        *(_QWORD *)(v13 + 384) = v348;
        *(_QWORD *)(v13 + 392) = v354;
        outlined consume of PlatformItemList.Item.SystemItem(v224, v225, v226, v227, v228, v229, v230, v231, v232, *((uint64_t *)&v232 + 1), v233, SBYTE8(v233), v234);
      }
      v235 = (_OWORD *)(v13 + 400);
      v236 = (_OWORD *)(v14 + 400);
      v237 = (_OWORD *)(v13 + 408);
      v238 = *(_QWORD *)(v13 + 408);
      v239 = (_OWORD *)(v14 + 408);
      v240 = *(_QWORD *)(v14 + 408);
      if (v238 == 1)
      {
        if (v240 == 1)
        {
          *v235 = *v236;
          v241 = *(_OWORD *)(v14 + 416);
          v242 = *(_OWORD *)(v14 + 432);
          v243 = *(_OWORD *)(v14 + 448);
          *(_BYTE *)(v13 + 464) = *(_BYTE *)(v14 + 464);
          *(_OWORD *)(v13 + 432) = v242;
          *(_OWORD *)(v13 + 448) = v243;
          *(_OWORD *)(v13 + 416) = v241;
          goto LABEL_141;
        }
        *(_BYTE *)(v13 + 400) = *(_BYTE *)(v14 + 400);
        *(_BYTE *)(v13 + 401) = *(_BYTE *)(v14 + 401);
        *(_BYTE *)(v13 + 402) = *(_BYTE *)(v14 + 402);
        *(_BYTE *)(v13 + 403) = *(_BYTE *)(v14 + 403);
        *(_BYTE *)(v13 + 404) = *(_BYTE *)(v14 + 404);
        v247 = *(_QWORD *)(v14 + 408);
        if (v247)
        {
          v248 = *(_QWORD *)(v14 + 416);
          *(_QWORD *)(v13 + 408) = v247;
          *(_QWORD *)(v13 + 416) = v248;
          swift_retain();
        }
        else
        {
          *v237 = *v239;
        }
        v251 = *(_QWORD *)(v14 + 424);
        if (v251)
        {
          v252 = *(_QWORD *)(v14 + 432);
          *(_QWORD *)(v13 + 424) = v251;
          *(_QWORD *)(v13 + 432) = v252;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 424);
        }
        v254 = *(_QWORD *)(v14 + 440);
        if (!v254)
        {
          *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 440);
LABEL_140:
          *(_QWORD *)(v13 + 456) = *(_QWORD *)(v14 + 456);
          *(_BYTE *)(v13 + 464) = *(_BYTE *)(v14 + 464);
LABEL_141:
          *(_QWORD *)(v13 + 472) = *(_QWORD *)(v14 + 472);
          *(_QWORD *)(v13 + 480) = *(_QWORD *)(v14 + 480);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v13 + 488) = *(_QWORD *)(v14 + 488);
          *(_BYTE *)(v13 + 496) = *(_BYTE *)(v14 + 496);
          v260 = *(_QWORD *)(v14 + 504);
          if (*(_QWORD *)(v13 + 504))
          {
            if (v260)
            {
              v261 = *(_QWORD *)(v14 + 512);
              *(_QWORD *)(v13 + 504) = v260;
              *(_QWORD *)(v13 + 512) = v261;
              swift_retain();
              swift_release();
              goto LABEL_148;
            }
            swift_release();
          }
          else if (v260)
          {
            v262 = *(_QWORD *)(v14 + 512);
            *(_QWORD *)(v13 + 504) = v260;
            *(_QWORD *)(v13 + 512) = v262;
            swift_retain();
            goto LABEL_148;
          }
          *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 504);
LABEL_148:
          *(_WORD *)(v13 + 520) = *(_WORD *)(v14 + 520);
          v263 = (_OWORD *)(v13 + 528);
          v264 = (_OWORD *)(v14 + 528);
          v265 = *(_QWORD *)(v14 + 528);
          if (*(_QWORD *)(v13 + 528))
          {
            if (v265)
            {
              *(_QWORD *)(v13 + 528) = v265;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v13 + 536) = *(_QWORD *)(v14 + 536);
              swift_retain();
              swift_release();
              *(_QWORD *)(v13 + 544) = *(_QWORD *)(v14 + 544);
              swift_retain();
              swift_release();
            }
            else
            {
              outlined destroy of PlatformItemList.Item.Accessibility(v13 + 528);
              v266 = *(_QWORD *)(v14 + 544);
              *v263 = *v264;
              *(_QWORD *)(v13 + 544) = v266;
            }
          }
          else if (v265)
          {
            *(_QWORD *)(v13 + 528) = v265;
            *(_QWORD *)(v13 + 536) = *(_QWORD *)(v14 + 536);
            *(_QWORD *)(v13 + 544) = *(_QWORD *)(v14 + 544);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            v267 = *v264;
            *(_QWORD *)(v13 + 544) = *(_QWORD *)(v14 + 544);
            *v263 = v267;
          }
          v268 = (__int128 *)(v13 + 552);
          v269 = (__int128 *)(v14 + 552);
          v270 = *(_QWORD *)(v14 + 552);
          if (*(_QWORD *)(v13 + 552) == 1)
          {
            if (v270 == 1)
            {
              v271 = *v269;
              *(_QWORD *)(v13 + 568) = *(_QWORD *)(v14 + 568);
              *v268 = v271;
              goto LABEL_171;
            }
            *(_QWORD *)(v13 + 552) = v270;
            v273 = *(_QWORD *)(v14 + 560);
            swift_retain();
            if (!v273)
            {
              *(_OWORD *)(v13 + 560) = *(_OWORD *)(v14 + 560);
              goto LABEL_171;
            }
            v274 = *(_QWORD *)(v14 + 568);
            *(_QWORD *)(v13 + 560) = v273;
            goto LABEL_168;
          }
          if (v270 == 1)
          {
            outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v13 + 552);
            v272 = *(_QWORD *)(v14 + 568);
            *v268 = *v269;
            *(_QWORD *)(v13 + 568) = v272;
            goto LABEL_171;
          }
          *(_QWORD *)(v13 + 552) = v270;
          swift_retain();
          swift_release();
          v275 = *(_QWORD *)(v14 + 560);
          if (*(_QWORD *)(v13 + 560))
          {
            if (v275)
            {
              v276 = *(_QWORD *)(v14 + 568);
              *(_QWORD *)(v13 + 560) = v275;
              *(_QWORD *)(v13 + 568) = v276;
              swift_retain();
              swift_release();
              goto LABEL_171;
            }
            swift_release();
          }
          else if (v275)
          {
            v274 = *(_QWORD *)(v14 + 568);
            *(_QWORD *)(v13 + 560) = v275;
LABEL_168:
            *(_QWORD *)(v13 + 568) = v274;
            swift_retain();
            goto LABEL_171;
          }
          *(_OWORD *)(v13 + 560) = *(_OWORD *)(v14 + 560);
LABEL_171:
          v277 = *(void **)(v13 + 576);
          v278 = *(void **)(v14 + 576);
          *(_QWORD *)(v13 + 576) = v278;
          v279 = v278;

          *(_QWORD *)(v13 + 584) = *(_QWORD *)(v14 + 584);
          *(_QWORD *)(v13 + 592) = *(_QWORD *)(v14 + 592);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v13 + 600) = *(_QWORD *)(v14 + 600);
          *(_QWORD *)(v13 + 608) = *(_QWORD *)(v14 + 608);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v13 + 616) = *(_QWORD *)(v14 + 616);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v13 + 624) = *(_QWORD *)(v14 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v13 + 632) = *(_BYTE *)(v14 + 632);
          *(_BYTE *)(v13 + 633) = *(_BYTE *)(v14 + 633);
          *(_BYTE *)(v13 + 634) = *(_BYTE *)(v14 + 634);
          v280 = v15[28];
          v281 = (_BYTE *)(v13 + v280);
          v282 = (_BYTE *)(v14 + v280);
          v283 = type metadata accessor for CommandOperation();
          v355 = *(_QWORD *)(v283 - 8);
          v284 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v355 + 48);
          LODWORD(v277) = v284(v281, 1, v283);
          v285 = v284(v282, 1, v283);
          if ((_DWORD)v277)
          {
            if (!v285)
            {
              v361 = v15;
              *v281 = *v282;
              v288 = *(int *)(v283 + 20);
              v289 = v282;
              __dstd = v282;
              v290 = &v281[v288];
              v349 = v281;
              v291 = &v289[v288];
              v292 = *(_QWORD *)&v289[v288];
              v293 = *(_QWORD *)&v289[v288 + 8];
              v294 = v289[v288 + 16];
              outlined copy of Text.Storage(v292, v293, v294);
              *(_QWORD *)v290 = v292;
              *((_QWORD *)v290 + 1) = v293;
              v290[16] = v294;
              *((_QWORD *)v290 + 3) = *((_QWORD *)v291 + 3);
              v295 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v296 = &v290[v295];
              v297 = &v291[v295];
              v298 = type metadata accessor for UUID();
              v299 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v298 - 8) + 16);
              swift_bridgeObjectRetain();
              v299(v296, v297, v298);
              v300 = *(int *)(v283 + 24);
              v301 = &v349[v300];
              v302 = &__dstd[v300];
              if (*(_QWORD *)v302)
              {
                v303 = *((_QWORD *)v302 + 1);
                *v301 = *(_QWORD *)v302;
                v301[1] = v303;
                swift_retain();
              }
              else
              {
                *(_OWORD *)v301 = *(_OWORD *)v302;
              }
              a3 = v357;
              v15 = v361;
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v355 + 56))(v349, 0, 1, v283);
              goto LABEL_184;
            }
            v286 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
          }
          else
          {
            if (!v285)
            {
              v362 = v15;
              *v281 = *v282;
              v304 = *(int *)(v283 + 20);
              __dste = v282;
              v350 = v281;
              v305 = &v281[v304];
              v306 = &v282[v304];
              v307 = *(_QWORD *)&v282[v304];
              v308 = *(_QWORD *)&v282[v304 + 8];
              v309 = v282[v304 + 16];
              outlined copy of Text.Storage(v307, v308, v309);
              v310 = *(_QWORD *)v305;
              v311 = *((_QWORD *)v305 + 1);
              v312 = v305[16];
              *(_QWORD *)v305 = v307;
              *((_QWORD *)v305 + 1) = v308;
              v305[16] = v309;
              outlined consume of Text.Storage(v310, v311, v312);
              *((_QWORD *)v305 + 3) = *((_QWORD *)v306 + 3);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v313 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v314 = &v305[v313];
              v315 = &v306[v313];
              v316 = type metadata accessor for UUID();
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v316 - 8) + 24))(v314, v315, v316);
              v317 = *(int *)(v283 + 24);
              v318 = &v350[v317];
              v319 = &__dste[v317];
              v320 = *(_QWORD *)&v350[v317];
              v321 = *(_QWORD *)&__dste[v317];
              if (v320)
              {
                a3 = v357;
                v15 = v362;
                if (v321)
                {
                  v322 = *((_QWORD *)v319 + 1);
                  *v318 = v321;
                  v318[1] = v322;
                  swift_retain();
                  swift_release();
                  goto LABEL_184;
                }
                swift_release();
              }
              else
              {
                a3 = v357;
                v15 = v362;
                if (v321)
                {
                  v324 = *((_QWORD *)v319 + 1);
                  *v318 = v321;
                  v318[1] = v324;
                  swift_retain();
                  goto LABEL_184;
                }
              }
              *(_OWORD *)v318 = *(_OWORD *)v319;
              goto LABEL_184;
            }
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v281, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
            v286 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
          }
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v286);
          memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64));
          a3 = v357;
LABEL_184:
          *(_BYTE *)(v13 + v15[29]) = *(_BYTE *)(v14 + v15[29]);
          *(_BYTE *)(v13 + v15[30]) = *(_BYTE *)(v14 + v15[30]);
          *(_BYTE *)(v13 + v15[31]) = *(_BYTE *)(v14 + v15[31]);
          *(_BYTE *)(v13 + v15[32]) = *(_BYTE *)(v14 + v15[32]);
          *(_QWORD *)(v13 + v15[33]) = *(_QWORD *)(v14 + v15[33]);
          swift_retain();
          swift_release();
          goto LABEL_185;
        }
LABEL_137:
        v259 = *(_QWORD *)(v14 + 448);
        *(_QWORD *)(v13 + 440) = v254;
        *(_QWORD *)(v13 + 448) = v259;
        swift_retain();
        goto LABEL_140;
      }
      if (v240 == 1)
      {
        outlined destroy of PlatformItemList.Item.SelectionBehavior(v13 + 400);
        *v235 = *v236;
        v245 = *(_OWORD *)(v14 + 432);
        v244 = *(_OWORD *)(v14 + 448);
        v246 = *(_OWORD *)(v14 + 416);
        *(_BYTE *)(v13 + 464) = *(_BYTE *)(v14 + 464);
        *(_OWORD *)(v13 + 432) = v245;
        *(_OWORD *)(v13 + 448) = v244;
        *(_OWORD *)(v13 + 416) = v246;
        goto LABEL_141;
      }
      *(_BYTE *)(v13 + 400) = *(_BYTE *)v236;
      *(_BYTE *)(v13 + 401) = *(_BYTE *)(v14 + 401);
      *(_BYTE *)(v13 + 402) = *(_BYTE *)(v14 + 402);
      *(_BYTE *)(v13 + 403) = *(_BYTE *)(v14 + 403);
      *(_BYTE *)(v13 + 404) = *(_BYTE *)(v14 + 404);
      v249 = *(_QWORD *)(v14 + 408);
      if (v238)
      {
        if (v249)
        {
          v250 = *(_QWORD *)(v14 + 416);
          *(_QWORD *)(v13 + 408) = v249;
          *(_QWORD *)(v13 + 416) = v250;
          swift_retain();
          swift_release();
          goto LABEL_126;
        }
        swift_release();
      }
      else if (v249)
      {
        v253 = *(_QWORD *)(v14 + 416);
        *(_QWORD *)(v13 + 408) = v249;
        *(_QWORD *)(v13 + 416) = v253;
        swift_retain();
        goto LABEL_126;
      }
      *v237 = *v239;
LABEL_126:
      v255 = *(_QWORD *)(v14 + 424);
      if (*(_QWORD *)(v13 + 424))
      {
        if (v255)
        {
          v256 = *(_QWORD *)(v14 + 432);
          *(_QWORD *)(v13 + 424) = v255;
          *(_QWORD *)(v13 + 432) = v256;
          swift_retain();
          swift_release();
          goto LABEL_133;
        }
        swift_release();
      }
      else if (v255)
      {
        v257 = *(_QWORD *)(v14 + 432);
        *(_QWORD *)(v13 + 424) = v255;
        *(_QWORD *)(v13 + 432) = v257;
        swift_retain();
        goto LABEL_133;
      }
      *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 424);
LABEL_133:
      v254 = *(_QWORD *)(v14 + 440);
      if (*(_QWORD *)(v13 + 440))
      {
        if (v254)
        {
          v258 = *(_QWORD *)(v14 + 448);
          *(_QWORD *)(v13 + 440) = v254;
          *(_QWORD *)(v13 + 448) = v258;
          swift_retain();
          swift_release();
          goto LABEL_140;
        }
        swift_release();
      }
      else if (v254)
      {
        goto LABEL_137;
      }
      *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 440);
      goto LABEL_140;
    }
    if (!v187)
    {
      outlined destroy of Image.NamedResolved(v13 + 248);
      v195 = *(_OWORD *)(v14 + 264);
      v194 = *(_OWORD *)(v14 + 280);
      *v185 = *v186;
      *(_OWORD *)(v13 + 264) = v195;
      *(_OWORD *)(v13 + 280) = v194;
      goto LABEL_99;
    }
    *(_QWORD *)(v13 + 248) = *(_QWORD *)(v14 + 248);
    *(_QWORD *)(v13 + 256) = *(_QWORD *)(v14 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v188 = *(void **)(v13 + 264);
    v189 = *(void **)(v14 + 264);
    if ((unint64_t)v188 >= 2)
    {
      if ((unint64_t)v189 >= 2)
      {
        *(_QWORD *)(v13 + 264) = v189;
        v198 = v189;

        goto LABEL_98;
      }

      v189 = *(void **)(v14 + 264);
    }
    else if ((unint64_t)v189 >= 2)
    {
      *(_QWORD *)(v13 + 264) = v189;
      v190 = v189;
LABEL_98:
      v199 = *(_DWORD *)(v14 + 272);
      *(_BYTE *)(v13 + 276) = *(_BYTE *)(v14 + 276);
      *(_DWORD *)(v13 + 272) = v199;
      *(_BYTE *)(v13 + 277) = *(_BYTE *)(v14 + 277);
      *(_BYTE *)(v13 + 278) = *(_BYTE *)(v14 + 278);
      *(_QWORD *)(v13 + 280) = *(_QWORD *)(v14 + 280);
      swift_retain();
      swift_release();
      *(_QWORD *)(v13 + 288) = *(_QWORD *)(v14 + 288);
      swift_retain();
      swift_release();
      goto LABEL_99;
    }
    *(_QWORD *)(v13 + 264) = v189;
    goto LABEL_98;
  }
  if (v19)
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_10:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v20);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_185;
  }
  v346 = v16;
  v356 = a3;
  v358 = v15;
  v22 = *(void **)v14;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v23 = *(void **)(v14 + 8);
  *(_QWORD *)(v13 + 8) = v23;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
  v24 = (_QWORD *)(v13 + 64);
  v25 = (id *)(v14 + 64);
  v26 = *(_QWORD *)(v14 + 184);
  v27 = v22;
  v28 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v26 >> 1 != 4294967294)
  {
    v59 = *(unsigned __int8 *)(v14 + 72);
    if (v59 == 255)
    {
      v70 = *v25;
      *(_BYTE *)(v13 + 72) = *(_BYTE *)(v14 + 72);
      *v24 = v70;
    }
    else
    {
      v60 = *v25;
      outlined copy of GraphicsImage.Contents(*v25, *(_BYTE *)(v14 + 72));
      *(_QWORD *)(v13 + 64) = v60;
      *(_BYTE *)(v13 + 72) = v59;
    }
    *(_QWORD *)(v13 + 80) = *(_QWORD *)(v14 + 80);
    *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
    *(_BYTE *)(v13 + 104) = *(_BYTE *)(v14 + 104);
    v71 = *(_OWORD *)(v14 + 108);
    *(_BYTE *)(v13 + 124) = *(_BYTE *)(v14 + 124);
    *(_OWORD *)(v13 + 108) = v71;
    v72 = *(_OWORD *)(v14 + 128);
    v73 = *(_OWORD *)(v14 + 144);
    *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
    *(_OWORD *)(v13 + 128) = v72;
    *(_OWORD *)(v13 + 144) = v73;
    *(_BYTE *)(v13 + 161) = *(_BYTE *)(v14 + 161);
    *(_BYTE *)(v13 + 162) = *(_BYTE *)(v14 + 162);
    *(_BYTE *)(v13 + 163) = *(_BYTE *)(v14 + 163);
    v74 = *(_QWORD *)(v14 + 184);
    if (v74 >> 1 == 0xFFFFFFFF)
    {
      v75 = *(_OWORD *)(v14 + 184);
      *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 168);
      *(_OWORD *)(v13 + 184) = v75;
    }
    else
    {
      v76 = *(_QWORD *)(v14 + 168);
      v77 = *(_QWORD *)(v14 + 176);
      v78 = *(_QWORD *)(v14 + 192);
      outlined copy of AccessibilityImageLabel(v76, v77, *(_QWORD *)(v14 + 184));
      *(_QWORD *)(v13 + 168) = v76;
      *(_QWORD *)(v13 + 176) = v77;
      *(_QWORD *)(v13 + 184) = v74;
      *(_QWORD *)(v13 + 192) = v78;
    }
    *(_QWORD *)(v13 + 200) = *(_QWORD *)(v14 + 200);
    *(_QWORD *)(v13 + 208) = *(_QWORD *)(v14 + 208);
    *(_BYTE *)(v13 + 216) = *(_BYTE *)(v14 + 216);
    *(_BYTE *)(v13 + 217) = *(_BYTE *)(v14 + 217);
    v79 = *(_DWORD *)(v14 + 220);
    *(_BYTE *)(v13 + 224) = *(_BYTE *)(v14 + 224);
    *(_DWORD *)(v13 + 220) = v79;
    v80 = *(void **)(v14 + 232);
    *(_QWORD *)(v13 + 232) = v80;
    *(_WORD *)(v13 + 240) = *(_WORD *)(v14 + 240);
    *(_BYTE *)(v13 + 242) = *(_BYTE *)(v14 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v81 = v80;
    if (*(_QWORD *)(v14 + 256))
      goto LABEL_13;
LABEL_28:
    v82 = *(_OWORD *)(v14 + 248);
    v83 = *(_OWORD *)(v14 + 280);
    *(_OWORD *)(v13 + 264) = *(_OWORD *)(v14 + 264);
    *(_OWORD *)(v13 + 280) = v83;
    *(_OWORD *)(v13 + 248) = v82;
    goto LABEL_29;
  }
  v29 = *(_OWORD *)v25;
  v30 = *(_OWORD *)(v14 + 80);
  v31 = *(_OWORD *)(v14 + 112);
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
  *(_OWORD *)(v13 + 112) = v31;
  *(_OWORD *)v24 = v29;
  *(_OWORD *)(v13 + 80) = v30;
  v32 = *(_OWORD *)(v14 + 128);
  v33 = *(_OWORD *)(v14 + 144);
  v34 = *(_OWORD *)(v14 + 176);
  *(_OWORD *)(v13 + 160) = *(_OWORD *)(v14 + 160);
  *(_OWORD *)(v13 + 176) = v34;
  *(_OWORD *)(v13 + 128) = v32;
  *(_OWORD *)(v13 + 144) = v33;
  v35 = *(_OWORD *)(v14 + 192);
  v36 = *(_OWORD *)(v14 + 208);
  v37 = *(_OWORD *)(v14 + 224);
  *(_DWORD *)(v13 + 239) = *(_DWORD *)(v14 + 239);
  *(_OWORD *)(v13 + 208) = v36;
  *(_OWORD *)(v13 + 224) = v37;
  *(_OWORD *)(v13 + 192) = v35;
  if (!*(_QWORD *)(v14 + 256))
    goto LABEL_28;
LABEL_13:
  *(_QWORD *)(v13 + 248) = *(_QWORD *)(v14 + 248);
  *(_QWORD *)(v13 + 256) = *(_QWORD *)(v14 + 256);
  v38 = *(void **)(v14 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v38 >= 2)
    v39 = v38;
  *(_QWORD *)(v13 + 264) = v38;
  v40 = *(_DWORD *)(v14 + 272);
  *(_BYTE *)(v13 + 276) = *(_BYTE *)(v14 + 276);
  *(_DWORD *)(v13 + 272) = v40;
  *(_BYTE *)(v13 + 277) = *(_BYTE *)(v14 + 277);
  *(_BYTE *)(v13 + 278) = *(_BYTE *)(v14 + 278);
  *(_QWORD *)(v13 + 280) = *(_QWORD *)(v14 + 280);
  *(_QWORD *)(v13 + 288) = *(_QWORD *)(v14 + 288);
  swift_retain();
  swift_retain();
LABEL_29:
  v84 = *(_QWORD *)(v14 + 328);
  if (v84 >> 2 == 0xFFFFFFFF)
  {
    v85 = *(_OWORD *)(v14 + 296);
    v86 = *(_OWORD *)(v14 + 328);
    *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
    *(_OWORD *)(v13 + 328) = v86;
    *(_OWORD *)(v13 + 296) = v85;
    v87 = *(_OWORD *)(v14 + 344);
    v88 = *(_OWORD *)(v14 + 360);
    v89 = *(_OWORD *)(v14 + 376);
    *(_QWORD *)(v13 + 392) = *(_QWORD *)(v14 + 392);
    *(_OWORD *)(v13 + 360) = v88;
    *(_OWORD *)(v13 + 376) = v89;
    *(_OWORD *)(v13 + 344) = v87;
  }
  else
  {
    v90 = *(void **)(v14 + 296);
    v91 = *(_QWORD *)(v14 + 304);
    v325 = *(_QWORD *)(v14 + 320);
    v326 = *(_QWORD *)(v14 + 312);
    v92 = *(_QWORD *)(v14 + 336);
    v93 = *(_QWORD *)(v14 + 344);
    v94 = *(_QWORD *)(v14 + 352);
    v329 = *(_QWORD *)(v14 + 360);
    v332 = *(_QWORD *)(v14 + 368);
    v335 = *(_QWORD *)(v14 + 376);
    __dsta = *(void **)(v14 + 384);
    v351 = *(_QWORD *)(v14 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v90, v91, v326, v325, v84, v92, v93, v94, v329, v332, v335, (char)__dsta, v351);
    *(_QWORD *)(v13 + 296) = v90;
    *(_QWORD *)(v13 + 304) = v91;
    *(_QWORD *)(v13 + 312) = v326;
    *(_QWORD *)(v13 + 320) = v325;
    *(_QWORD *)(v13 + 328) = v84;
    *(_QWORD *)(v13 + 336) = v92;
    *(_QWORD *)(v13 + 344) = v93;
    *(_QWORD *)(v13 + 352) = v94;
    *(_QWORD *)(v13 + 360) = v329;
    *(_QWORD *)(v13 + 368) = v332;
    *(_QWORD *)(v13 + 376) = v335;
    *(_QWORD *)(v13 + 384) = __dsta;
    *(_QWORD *)(v13 + 392) = v351;
  }
  if (*(_QWORD *)(v14 + 408) == 1)
  {
    *(_OWORD *)(v13 + 400) = *(_OWORD *)(v14 + 400);
    v95 = *(_OWORD *)(v14 + 416);
    v96 = *(_OWORD *)(v14 + 432);
    v97 = *(_OWORD *)(v14 + 448);
    *(_BYTE *)(v13 + 464) = *(_BYTE *)(v14 + 464);
    *(_OWORD *)(v13 + 432) = v96;
    *(_OWORD *)(v13 + 448) = v97;
    *(_OWORD *)(v13 + 416) = v95;
    goto LABEL_42;
  }
  *(_BYTE *)(v13 + 400) = *(_BYTE *)(v14 + 400);
  *(_BYTE *)(v13 + 401) = *(_BYTE *)(v14 + 401);
  *(_BYTE *)(v13 + 402) = *(_BYTE *)(v14 + 402);
  *(_BYTE *)(v13 + 403) = *(_BYTE *)(v14 + 403);
  *(_BYTE *)(v13 + 404) = *(_BYTE *)(v14 + 404);
  v98 = *(_QWORD *)(v14 + 408);
  if (v98)
  {
    v99 = *(_QWORD *)(v14 + 416);
    *(_QWORD *)(v13 + 408) = v98;
    *(_QWORD *)(v13 + 416) = v99;
    swift_retain();
    v100 = *(_QWORD *)(v14 + 424);
    if (v100)
      goto LABEL_36;
LABEL_39:
    *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 424);
    v102 = *(_QWORD *)(v14 + 440);
    if (v102)
      goto LABEL_37;
LABEL_40:
    *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 440);
    goto LABEL_41;
  }
  *(_OWORD *)(v13 + 408) = *(_OWORD *)(v14 + 408);
  v100 = *(_QWORD *)(v14 + 424);
  if (!v100)
    goto LABEL_39;
LABEL_36:
  v101 = *(_QWORD *)(v14 + 432);
  *(_QWORD *)(v13 + 424) = v100;
  *(_QWORD *)(v13 + 432) = v101;
  swift_retain();
  v102 = *(_QWORD *)(v14 + 440);
  if (!v102)
    goto LABEL_40;
LABEL_37:
  v103 = *(_QWORD *)(v14 + 448);
  *(_QWORD *)(v13 + 440) = v102;
  *(_QWORD *)(v13 + 448) = v103;
  swift_retain();
LABEL_41:
  *(_QWORD *)(v13 + 456) = *(_QWORD *)(v14 + 456);
  *(_BYTE *)(v13 + 464) = *(_BYTE *)(v14 + 464);
LABEL_42:
  *(_QWORD *)(v13 + 472) = *(_QWORD *)(v14 + 472);
  *(_QWORD *)(v13 + 480) = *(_QWORD *)(v14 + 480);
  *(_QWORD *)(v13 + 488) = *(_QWORD *)(v14 + 488);
  *(_BYTE *)(v13 + 496) = *(_BYTE *)(v14 + 496);
  v104 = *(_QWORD *)(v14 + 504);
  swift_bridgeObjectRetain();
  if (v104)
  {
    v105 = *(_QWORD *)(v14 + 512);
    *(_QWORD *)(v13 + 504) = v104;
    *(_QWORD *)(v13 + 512) = v105;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 504);
  }
  *(_WORD *)(v13 + 520) = *(_WORD *)(v14 + 520);
  v106 = *(_QWORD *)(v14 + 528);
  if (v106)
  {
    *(_QWORD *)(v13 + 528) = v106;
    *(_QWORD *)(v13 + 536) = *(_QWORD *)(v14 + 536);
    *(_QWORD *)(v13 + 544) = *(_QWORD *)(v14 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v107 = *(_OWORD *)(v14 + 528);
    *(_QWORD *)(v13 + 544) = *(_QWORD *)(v14 + 544);
    *(_OWORD *)(v13 + 528) = v107;
  }
  v108 = *(_QWORD *)(v14 + 552);
  v345 = v4;
  if (v108 == 1)
  {
    v109 = (_OWORD *)(v13 + 552);
    v110 = *(_OWORD *)(v14 + 552);
    *(_QWORD *)(v13 + 568) = *(_QWORD *)(v14 + 568);
LABEL_53:
    *v109 = v110;
    goto LABEL_54;
  }
  *(_QWORD *)(v13 + 552) = v108;
  v111 = *(_QWORD *)(v14 + 560);
  swift_retain();
  if (!v111)
  {
    v109 = (_OWORD *)(v13 + 560);
    v110 = *(_OWORD *)(v14 + 560);
    goto LABEL_53;
  }
  v112 = *(_QWORD *)(v14 + 568);
  *(_QWORD *)(v13 + 560) = v111;
  *(_QWORD *)(v13 + 568) = v112;
  swift_retain();
LABEL_54:
  v113 = *(void **)(v14 + 576);
  *(_QWORD *)(v13 + 576) = v113;
  *(_QWORD *)(v13 + 584) = *(_QWORD *)(v14 + 584);
  *(_QWORD *)(v13 + 592) = *(_QWORD *)(v14 + 592);
  *(_QWORD *)(v13 + 600) = *(_QWORD *)(v14 + 600);
  *(_QWORD *)(v13 + 608) = *(_QWORD *)(v14 + 608);
  *(_QWORD *)(v13 + 616) = *(_QWORD *)(v14 + 616);
  *(_QWORD *)(v13 + 624) = *(_QWORD *)(v14 + 624);
  *(_BYTE *)(v13 + 632) = *(_BYTE *)(v14 + 632);
  *(_BYTE *)(v13 + 633) = *(_BYTE *)(v14 + 633);
  *(_BYTE *)(v13 + 634) = *(_BYTE *)(v14 + 634);
  v114 = v358[28];
  __dst = (_BYTE *)(v13 + v114);
  v115 = (_BYTE *)(v14 + v114);
  v116 = type metadata accessor for CommandOperation();
  v336 = *(_QWORD *)(v116 - 8);
  v352 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v336 + 48);
  v117 = v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v352(v115, 1, v116))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    a3 = v356;
    v119 = v358;
    v4 = v345;
    v120 = v346;
  }
  else
  {
    *__dst = *v115;
    v121 = *(int *)(v116 + 20);
    v122 = &__dst[v121];
    v123 = v116;
    v124 = &v115[v121];
    v125 = *(_QWORD *)&v115[v121];
    v126 = *(_QWORD *)&v115[v121 + 8];
    v127 = v115[v121 + 16];
    outlined copy of Text.Storage(v125, *((_QWORD *)v124 + 1), v124[16]);
    *(_QWORD *)v122 = v125;
    *((_QWORD *)v122 + 1) = v126;
    v122[16] = v127;
    *((_QWORD *)v122 + 3) = *((_QWORD *)v124 + 3);
    v128 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v129 = &v122[v128];
    v130 = &v124[v128];
    v131 = v123;
    v132 = type metadata accessor for UUID();
    v133 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v132 - 8) + 16);
    swift_bridgeObjectRetain();
    v133(v129, v130, v132);
    v134 = *(int *)(v131 + 24);
    v135 = &__dst[v134];
    v136 = &v115[v134];
    if (*v136)
    {
      v137 = v136[1];
      *v135 = *v136;
      v135[1] = v137;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v135 = *(_OWORD *)v136;
    }
    a3 = v356;
    v119 = v358;
    v4 = v345;
    v120 = v346;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v336 + 56))(__dst, 0, 1, v131);
  }
  *(_BYTE *)(v13 + v119[29]) = *(_BYTE *)(v14 + v119[29]);
  *(_BYTE *)(v13 + v119[30]) = *(_BYTE *)(v14 + v119[30]);
  *(_BYTE *)(v13 + v119[31]) = *(_BYTE *)(v14 + v119[31]);
  *(_BYTE *)(v13 + v119[32]) = *(_BYTE *)(v14 + v119[32]);
  *(_QWORD *)(v13 + v119[33]) = *(_QWORD *)(v14 + v119[33]);
  v144 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v120 + 56);
  swift_retain();
  v144(v13, 0, 1, v119);
LABEL_185:
  swift_weakCopyAssign();
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(v4 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(v4 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _BYTE *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  v9 = *(_OWORD *)(a2 + 136);
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  v12 = a3[12];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  *(_OWORD *)(a1 + 136) = v9;
  v15 = (int *)type metadata accessor for PlatformItemList.Item();
  v55 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v55 + 48))(v14, 1, v15))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v14[1];
    *v13 = *v14;
    v13[1] = v17;
    *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
    v18 = *((_QWORD *)v14 + 6);
    *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
    *((_QWORD *)v13 + 6) = v18;
    *((_BYTE *)v13 + 56) = *((_BYTE *)v14 + 56);
    v19 = v14[13];
    v13[12] = v14[12];
    v13[13] = v19;
    v13[14] = v14[14];
    *(_DWORD *)((char *)v13 + 239) = *(_DWORD *)((char *)v14 + 239);
    v20 = v14[9];
    v13[8] = v14[8];
    v13[9] = v20;
    v21 = v14[11];
    v13[10] = v14[10];
    v13[11] = v21;
    v22 = v14[5];
    v13[4] = v14[4];
    v13[5] = v22;
    v23 = v14[7];
    v13[6] = v14[6];
    v13[7] = v23;
    *(_OWORD *)((char *)v13 + 248) = *(_OWORD *)((char *)v14 + 248);
    v24 = *(_OWORD *)((char *)v14 + 280);
    *(_OWORD *)((char *)v13 + 264) = *(_OWORD *)((char *)v14 + 264);
    *(_OWORD *)((char *)v13 + 280) = v24;
    v25 = *(_OWORD *)((char *)v14 + 376);
    *(_OWORD *)((char *)v13 + 360) = *(_OWORD *)((char *)v14 + 360);
    *(_OWORD *)((char *)v13 + 376) = v25;
    *((_QWORD *)v13 + 49) = *((_QWORD *)v14 + 49);
    v26 = *(_OWORD *)((char *)v14 + 312);
    *(_OWORD *)((char *)v13 + 296) = *(_OWORD *)((char *)v14 + 296);
    *(_OWORD *)((char *)v13 + 312) = v26;
    v27 = *(_OWORD *)((char *)v14 + 344);
    *(_OWORD *)((char *)v13 + 328) = *(_OWORD *)((char *)v14 + 328);
    *(_OWORD *)((char *)v13 + 344) = v27;
    v28 = v14[28];
    v13[27] = v14[27];
    v13[28] = v28;
    *((_BYTE *)v13 + 464) = *((_BYTE *)v14 + 464);
    v29 = v14[26];
    v13[25] = v14[25];
    v13[26] = v29;
    *(_OWORD *)((char *)v13 + 472) = *(_OWORD *)((char *)v14 + 472);
    *(_OWORD *)((char *)v13 + 481) = *(_OWORD *)((char *)v14 + 481);
    v30 = *((_QWORD *)v14 + 63);
    if (v30)
    {
      v31 = *((_QWORD *)v14 + 64);
      *((_QWORD *)v13 + 63) = v30;
      *((_QWORD *)v13 + 64) = v31;
    }
    else
    {
      *(_OWORD *)((char *)v13 + 504) = *(_OWORD *)((char *)v14 + 504);
    }
    *((_WORD *)v13 + 260) = *((_WORD *)v14 + 260);
    v13[33] = v14[33];
    *((_QWORD *)v13 + 68) = *((_QWORD *)v14 + 68);
    *((_QWORD *)v13 + 71) = *((_QWORD *)v14 + 71);
    *(_OWORD *)((char *)v13 + 552) = *(_OWORD *)((char *)v14 + 552);
    *((_QWORD *)v13 + 72) = *((_QWORD *)v14 + 72);
    *(_OWORD *)((char *)v13 + 584) = *(_OWORD *)((char *)v14 + 584);
    *(_OWORD *)((char *)v13 + 600) = *(_OWORD *)((char *)v14 + 600);
    *((_QWORD *)v13 + 77) = *((_QWORD *)v14 + 77);
    *((_QWORD *)v13 + 78) = *((_QWORD *)v14 + 78);
    *((_BYTE *)v13 + 632) = *((_BYTE *)v14 + 632);
    *(_WORD *)((char *)v13 + 633) = *(_WORD *)((char *)v14 + 633);
    v32 = v15[28];
    v33 = (char *)v13 + v32;
    v34 = (char *)v14 + v32;
    v35 = type metadata accessor for CommandOperation();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v53 = v36;
      v54 = v33;
      *v33 = *v34;
      v38 = *(int *)(v35 + 20);
      v39 = &v33[v38];
      v40 = &v34[v38];
      v41 = *(_OWORD *)&v34[v38 + 16];
      *v39 = *(_OWORD *)&v34[v38];
      v39[1] = v41;
      v42 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v43 = (char *)v39 + v42;
      v52 = &v40[v42];
      v44 = type metadata accessor for UUID();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v43, v52, v44);
      v45 = *(int *)(v35 + 24);
      v46 = &v54[v45];
      v47 = (uint64_t *)&v34[v45];
      v48 = *v47;
      if (*v47)
      {
        v49 = v47[1];
        *v46 = v48;
        v46[1] = v49;
      }
      else
      {
        *(_OWORD *)v46 = *(_OWORD *)v47;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v35);
    }
    *((_BYTE *)v13 + v15[29]) = *((_BYTE *)v14 + v15[29]);
    *((_BYTE *)v13 + v15[30]) = *((_BYTE *)v14 + v15[30]);
    *((_BYTE *)v13 + v15[31]) = *((_BYTE *)v14 + v15[31]);
    *((_BYTE *)v13 + v15[32]) = *((_BYTE *)v14 + v15[32]);
    *(_QWORD *)((char *)v13 + v15[33]) = *(_QWORD *)((char *)v14 + v15[33]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v55 + 56))(v13, 0, 1, v15);
  }
  swift_weakTakeInit();
  v50 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v50) = *(_BYTE *)(a2 + v50);
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _OWORD *v54;
  _BYTE *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  void *v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  __int128 v80;
  _OWORD *v81;
  _OWORD *v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(_BYTE *, uint64_t, uint64_t);
  int v126;
  int v127;
  uint64_t (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  _BYTE *v135;
  __int128 v136;
  uint64_t v137;
  char *v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  _BYTE *v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v165;
  _BYTE *v166;
  int *v167;
  int *v168;
  int *v169;
  int *v170;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 90);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  swift_release();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v9 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

  v10 = a3[12];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for PlatformItemList.Item();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v11, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_8;
    }
    v35 = *(void **)v11;
    *(_QWORD *)v11 = *(_QWORD *)v12;

    v36 = *(void **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);

    v37 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v11 + 24) = v37;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
    v38 = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v11 + 48) = v38;
    swift_release();
    *(_BYTE *)(v11 + 56) = *(_BYTE *)(v12 + 56);
    v39 = (_OWORD *)(v11 + 64);
    v40 = (_OWORD *)(v12 + 64);
    if (*(_QWORD *)(v11 + 184) >> 1 == 4294967294)
      goto LABEL_14;
    if (*(_QWORD *)(v12 + 184) >> 1 == 4294967294)
    {
      outlined destroy of Image.Resolved(v11 + 64);
LABEL_14:
      v41 = *(_OWORD *)(v12 + 208);
      *(_OWORD *)(v11 + 192) = *(_OWORD *)(v12 + 192);
      *(_OWORD *)(v11 + 208) = v41;
      *(_OWORD *)(v11 + 224) = *(_OWORD *)(v12 + 224);
      *(_DWORD *)(v11 + 239) = *(_DWORD *)(v12 + 239);
      v42 = *(_OWORD *)(v12 + 144);
      *(_OWORD *)(v11 + 128) = *(_OWORD *)(v12 + 128);
      *(_OWORD *)(v11 + 144) = v42;
      v43 = *(_OWORD *)(v12 + 176);
      *(_OWORD *)(v11 + 160) = *(_OWORD *)(v12 + 160);
      *(_OWORD *)(v11 + 176) = v43;
      v44 = *(_OWORD *)(v12 + 80);
      *v39 = *v40;
      *(_OWORD *)(v11 + 80) = v44;
      v45 = *(_OWORD *)(v12 + 112);
      *(_OWORD *)(v11 + 96) = *(_OWORD *)(v12 + 96);
      *(_OWORD *)(v11 + 112) = v45;
      goto LABEL_34;
    }
    v66 = *(unsigned __int8 *)(v11 + 72);
    if (v66 != 255)
    {
      v67 = *(unsigned __int8 *)(v12 + 72);
      if (v67 != 255)
      {
        v68 = *(void **)(v11 + 64);
        *(_QWORD *)(v11 + 64) = *(_QWORD *)v40;
        *(_BYTE *)(v11 + 72) = v67;
        outlined consume of GraphicsImage.Contents(v68, v66);
        goto LABEL_28;
      }
      outlined destroy of GraphicsImage.Contents(v11 + 64);
    }
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *(_BYTE *)(v11 + 72) = *(_BYTE *)(v12 + 72);
LABEL_28:
    *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
    *(_QWORD *)(v11 + 96) = *(_QWORD *)(v12 + 96);
    *(_BYTE *)(v11 + 104) = *(_BYTE *)(v12 + 104);
    *(_OWORD *)(v11 + 108) = *(_OWORD *)(v12 + 108);
    *(_BYTE *)(v11 + 124) = *(_BYTE *)(v12 + 124);
    v69 = *(_OWORD *)(v12 + 144);
    *(_OWORD *)(v11 + 128) = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v11 + 144) = v69;
    *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
    *(_BYTE *)(v11 + 161) = *(_BYTE *)(v12 + 161);
    v70 = *(_QWORD *)(v11 + 184);
    *(_WORD *)(v11 + 162) = *(_WORD *)(v12 + 162);
    if (v70 >> 1 != 0xFFFFFFFF)
    {
      v71 = *(_QWORD *)(v12 + 184);
      if (v71 >> 1 != 0xFFFFFFFF)
      {
        v73 = *(_QWORD *)(v12 + 192);
        v74 = *(_QWORD *)(v11 + 168);
        v75 = *(_QWORD *)(v11 + 176);
        *(_OWORD *)(v11 + 168) = *(_OWORD *)(v12 + 168);
        *(_QWORD *)(v11 + 184) = v71;
        *(_QWORD *)(v11 + 192) = v73;
        outlined consume of AccessibilityImageLabel(v74, v75, v70);
        goto LABEL_33;
      }
      outlined destroy of AccessibilityImageLabel(v11 + 168);
    }
    v72 = *(_OWORD *)(v12 + 184);
    *(_OWORD *)(v11 + 168) = *(_OWORD *)(v12 + 168);
    *(_OWORD *)(v11 + 184) = v72;
LABEL_33:
    *(_QWORD *)(v11 + 200) = *(_QWORD *)(v12 + 200);
    swift_unknownObjectRelease();
    *(_QWORD *)(v11 + 208) = *(_QWORD *)(v12 + 208);
    swift_release();
    *(_BYTE *)(v11 + 216) = *(_BYTE *)(v12 + 216);
    *(_BYTE *)(v11 + 217) = *(_BYTE *)(v12 + 217);
    *(_DWORD *)(v11 + 220) = *(_DWORD *)(v12 + 220);
    *(_BYTE *)(v11 + 224) = *(_BYTE *)(v12 + 224);
    v76 = *(void **)(v11 + 232);
    *(_QWORD *)(v11 + 232) = *(_QWORD *)(v12 + 232);

    *(_WORD *)(v11 + 240) = *(_WORD *)(v12 + 240);
    *(_BYTE *)(v11 + 242) = *(_BYTE *)(v12 + 242);
LABEL_34:
    if (*(_QWORD *)(v11 + 256))
    {
      v77 = *(_QWORD *)(v12 + 256);
      if (v77)
      {
        *(_QWORD *)(v11 + 248) = *(_QWORD *)(v12 + 248);
        *(_QWORD *)(v11 + 256) = v77;
        swift_bridgeObjectRelease();
        v78 = *(void **)(v11 + 264);
        v79 = *(_QWORD *)(v12 + 264);
        if ((unint64_t)v78 >= 2)
        {
          if (v79 >= 2)
          {
            *(_QWORD *)(v11 + 264) = v79;

          }
          else
          {

            *(_QWORD *)(v11 + 264) = *(_QWORD *)(v12 + 264);
          }
        }
        else
        {
          *(_QWORD *)(v11 + 264) = v79;
        }
        *(_DWORD *)(v11 + 272) = *(_DWORD *)(v12 + 272);
        *(_WORD *)(v11 + 276) = *(_WORD *)(v12 + 276);
        *(_BYTE *)(v11 + 278) = *(_BYTE *)(v12 + 278);
        *(_QWORD *)(v11 + 280) = *(_QWORD *)(v12 + 280);
        swift_release();
        *(_QWORD *)(v11 + 288) = *(_QWORD *)(v12 + 288);
        swift_release();
LABEL_44:
        v81 = (_OWORD *)(v11 + 296);
        v82 = (_OWORD *)(v12 + 296);
        v83 = *(_QWORD *)(v11 + 328);
        if (v83 >> 2 != 0xFFFFFFFF)
        {
          v84 = *(_QWORD *)(v12 + 328);
          if (v84 >> 2 != 0xFFFFFFFF)
          {
            v88 = *(void **)(v11 + 296);
            v89 = *(_QWORD *)(v11 + 304);
            v90 = *(_QWORD *)(v11 + 312);
            v91 = *(_QWORD *)(v11 + 320);
            v92 = *(_QWORD *)(v11 + 336);
            v93 = *(_QWORD *)(v11 + 344);
            v94 = *(_QWORD *)(v11 + 352);
            v95 = *(_OWORD *)(v11 + 360);
            v96 = *(_OWORD *)(v11 + 376);
            v97 = *(_QWORD *)(v11 + 392);
            *v81 = *v82;
            *(_OWORD *)(v11 + 312) = *(_OWORD *)(v12 + 312);
            *(_QWORD *)(v11 + 328) = v84;
            v98 = *(_OWORD *)(v12 + 352);
            *(_OWORD *)(v11 + 336) = *(_OWORD *)(v12 + 336);
            *(_OWORD *)(v11 + 352) = v98;
            v99 = *(_OWORD *)(v12 + 384);
            *(_OWORD *)(v11 + 368) = *(_OWORD *)(v12 + 368);
            *(_OWORD *)(v11 + 384) = v99;
            outlined consume of PlatformItemList.Item.SystemItem(v88, v89, v90, v91, v83, v92, v93, v94, v95, *((uint64_t *)&v95 + 1), v96, SBYTE8(v96), v97);
LABEL_49:
            v100 = (_OWORD *)(v12 + 400);
            v101 = *(_QWORD *)(v11 + 408);
            if (v101 == 1)
            {
LABEL_52:
              v103 = *(_OWORD *)(v12 + 448);
              *(_OWORD *)(v11 + 432) = *(_OWORD *)(v12 + 432);
              *(_OWORD *)(v11 + 448) = v103;
              *(_BYTE *)(v11 + 464) = *(_BYTE *)(v12 + 464);
              v104 = *(_OWORD *)(v12 + 416);
              *(_OWORD *)(v11 + 400) = *v100;
              *(_OWORD *)(v11 + 416) = v104;
              goto LABEL_75;
            }
            v102 = *(_QWORD *)(v12 + 408);
            if (v102 == 1)
            {
              outlined destroy of PlatformItemList.Item.SelectionBehavior(v11 + 400);
              goto LABEL_52;
            }
            *(_BYTE *)(v11 + 400) = *(_BYTE *)v100;
            *(_BYTE *)(v11 + 401) = *(_BYTE *)(v12 + 401);
            *(_BYTE *)(v11 + 402) = *(_BYTE *)(v12 + 402);
            *(_BYTE *)(v11 + 403) = *(_BYTE *)(v12 + 403);
            *(_BYTE *)(v11 + 404) = *(_BYTE *)(v12 + 404);
            if (v101)
            {
              if (v102)
              {
                v105 = *(_QWORD *)(v12 + 416);
                *(_QWORD *)(v11 + 408) = v102;
                *(_QWORD *)(v11 + 416) = v105;
                swift_release();
                goto LABEL_60;
              }
              swift_release();
            }
            else if (v102)
            {
              v106 = *(_QWORD *)(v12 + 416);
              *(_QWORD *)(v11 + 408) = v102;
              *(_QWORD *)(v11 + 416) = v106;
              goto LABEL_60;
            }
            *(_OWORD *)(v11 + 408) = *(_OWORD *)(v12 + 408);
LABEL_60:
            v107 = *(_QWORD *)(v12 + 424);
            if (*(_QWORD *)(v11 + 424))
            {
              if (v107)
              {
                v108 = *(_QWORD *)(v12 + 432);
                *(_QWORD *)(v11 + 424) = v107;
                *(_QWORD *)(v11 + 432) = v108;
                swift_release();
                goto LABEL_67;
              }
              swift_release();
            }
            else if (v107)
            {
              v109 = *(_QWORD *)(v12 + 432);
              *(_QWORD *)(v11 + 424) = v107;
              *(_QWORD *)(v11 + 432) = v109;
              goto LABEL_67;
            }
            *(_OWORD *)(v11 + 424) = *(_OWORD *)(v12 + 424);
LABEL_67:
            v110 = *(_QWORD *)(v12 + 440);
            if (*(_QWORD *)(v11 + 440))
            {
              if (v110)
              {
                v111 = *(_QWORD *)(v12 + 448);
                *(_QWORD *)(v11 + 440) = v110;
                *(_QWORD *)(v11 + 448) = v111;
                swift_release();
LABEL_74:
                *(_QWORD *)(v11 + 456) = *(_QWORD *)(v12 + 456);
                *(_BYTE *)(v11 + 464) = *(_BYTE *)(v12 + 464);
LABEL_75:
                v113 = *(_QWORD *)(v12 + 480);
                *(_QWORD *)(v11 + 472) = *(_QWORD *)(v12 + 472);
                *(_QWORD *)(v11 + 480) = v113;
                swift_bridgeObjectRelease();
                *(_QWORD *)(v11 + 488) = *(_QWORD *)(v12 + 488);
                *(_BYTE *)(v11 + 496) = *(_BYTE *)(v12 + 496);
                v114 = *(_QWORD *)(v12 + 504);
                if (*(_QWORD *)(v11 + 504))
                {
                  if (v114)
                  {
                    v115 = *(_QWORD *)(v12 + 512);
                    *(_QWORD *)(v11 + 504) = v114;
                    *(_QWORD *)(v11 + 512) = v115;
                    swift_release();
                    goto LABEL_82;
                  }
                  swift_release();
                }
                else if (v114)
                {
                  v116 = *(_QWORD *)(v12 + 512);
                  *(_QWORD *)(v11 + 504) = v114;
                  *(_QWORD *)(v11 + 512) = v116;
                  goto LABEL_82;
                }
                *(_OWORD *)(v11 + 504) = *(_OWORD *)(v12 + 504);
LABEL_82:
                *(_WORD *)(v11 + 520) = *(_WORD *)(v12 + 520);
                if (*(_QWORD *)(v11 + 528))
                {
                  v117 = *(_QWORD *)(v12 + 528);
                  if (v117)
                  {
                    *(_QWORD *)(v11 + 528) = v117;
                    swift_bridgeObjectRelease();
                    *(_QWORD *)(v11 + 536) = *(_QWORD *)(v12 + 536);
                    swift_release();
                    *(_QWORD *)(v11 + 544) = *(_QWORD *)(v12 + 544);
                    swift_release();
                    goto LABEL_87;
                  }
                  outlined destroy of PlatformItemList.Item.Accessibility(v11 + 528);
                }
                *(_OWORD *)(v11 + 528) = *(_OWORD *)(v12 + 528);
                *(_QWORD *)(v11 + 544) = *(_QWORD *)(v12 + 544);
LABEL_87:
                v168 = a3;
                if (*(_QWORD *)(v11 + 552) == 1)
                {
LABEL_90:
                  *(_OWORD *)(v11 + 552) = *(_OWORD *)(v12 + 552);
                  *(_QWORD *)(v11 + 568) = *(_QWORD *)(v12 + 568);
                  goto LABEL_91;
                }
                v118 = *(_QWORD *)(v12 + 552);
                if (v118 == 1)
                {
                  outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v11 + 552);
                  goto LABEL_90;
                }
                *(_QWORD *)(v11 + 552) = v118;
                swift_release();
                v131 = *(_QWORD *)(v12 + 560);
                if (*(_QWORD *)(v11 + 560))
                {
                  if (v131)
                  {
                    v132 = *(_QWORD *)(v12 + 568);
                    *(_QWORD *)(v11 + 560) = v131;
                    *(_QWORD *)(v11 + 568) = v132;
                    swift_release();
                    goto LABEL_91;
                  }
                  swift_release();
                }
                else if (v131)
                {
                  v162 = *(_QWORD *)(v12 + 568);
                  *(_QWORD *)(v11 + 560) = v131;
                  *(_QWORD *)(v11 + 568) = v162;
                  goto LABEL_91;
                }
                *(_OWORD *)(v11 + 560) = *(_OWORD *)(v12 + 560);
LABEL_91:
                v119 = *(void **)(v11 + 576);
                *(_QWORD *)(v11 + 576) = *(_QWORD *)(v12 + 576);

                *(_QWORD *)(v11 + 584) = *(_QWORD *)(v12 + 584);
                *(_QWORD *)(v11 + 592) = *(_QWORD *)(v12 + 592);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v11 + 600) = *(_QWORD *)(v12 + 600);
                *(_QWORD *)(v11 + 608) = *(_QWORD *)(v12 + 608);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v11 + 616) = *(_QWORD *)(v12 + 616);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v11 + 624) = *(_QWORD *)(v12 + 624);
                swift_bridgeObjectRelease();
                *(_BYTE *)(v11 + 632) = *(_BYTE *)(v12 + 632);
                *(_WORD *)(v11 + 633) = *(_WORD *)(v12 + 633);
                v170 = (int *)v13;
                v120 = *(int *)(v13 + 112);
                v121 = (_BYTE *)(v11 + v120);
                v122 = (_BYTE *)(v12 + v120);
                v123 = type metadata accessor for CommandOperation();
                v124 = *(_QWORD *)(v123 - 8);
                v125 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v124 + 48);
                v126 = v125(v121, 1, v123);
                v127 = v125(v122, 1, v123);
                if (v126)
                {
                  if (!v127)
                  {
                    *v121 = *v122;
                    v133 = *(int *)(v123 + 20);
                    v134 = &v121[v133];
                    v135 = &v122[v133];
                    v136 = *(_OWORD *)&v122[v133 + 16];
                    *v134 = *(_OWORD *)&v122[v133];
                    v134[1] = v136;
                    v137 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v138 = (char *)v134 + v137;
                    v139 = &v135[v137];
                    v140 = type metadata accessor for UUID();
                    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v140 - 8) + 32))(v138, v139, v140);
                    v141 = *(int *)(v123 + 24);
                    v142 = &v121[v141];
                    v143 = (uint64_t *)&v122[v141];
                    v144 = *v143;
                    if (*v143)
                    {
                      v145 = v143[1];
                      *v142 = v144;
                      v142[1] = v145;
                    }
                    else
                    {
                      *(_OWORD *)v142 = *(_OWORD *)v143;
                    }
                    a3 = v168;
                    v130 = v170;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
                    goto LABEL_109;
                  }
                  v128 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
                }
                else
                {
                  if (!v127)
                  {
                    *v121 = *v122;
                    v146 = *(int *)(v123 + 20);
                    v147 = &v121[v146];
                    v148 = &v122[v146];
                    LOBYTE(v146) = v122[v146 + 16];
                    v149 = *(_QWORD *)v147;
                    v150 = *((_QWORD *)v147 + 1);
                    v151 = v147[16];
                    *(_OWORD *)v147 = *(_OWORD *)v148;
                    v147[16] = v146;
                    outlined consume of Text.Storage(v149, v150, v151);
                    *((_QWORD *)v147 + 3) = *((_QWORD *)v148 + 3);
                    swift_bridgeObjectRelease();
                    v152 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v153 = &v147[v152];
                    v154 = &v148[v152];
                    v155 = type metadata accessor for UUID();
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v155 - 8) + 40))(v153, v154, v155);
                    v156 = *(int *)(v123 + 24);
                    v157 = &v121[v156];
                    v158 = &v122[v156];
                    v159 = *(_QWORD *)&v121[v156];
                    v160 = *(_QWORD *)&v122[v156];
                    if (v159)
                    {
                      a3 = v168;
                      v130 = v170;
                      if (v160)
                      {
                        v161 = *((_QWORD *)v158 + 1);
                        *v157 = v160;
                        v157[1] = v161;
                        swift_release();
                        goto LABEL_109;
                      }
                      swift_release();
                    }
                    else
                    {
                      a3 = v168;
                      v130 = v170;
                      if (v160)
                      {
                        v165 = *((_QWORD *)v158 + 1);
                        *v157 = v160;
                        v157[1] = v165;
                        goto LABEL_109;
                      }
                    }
                    *(_OWORD *)v157 = *(_OWORD *)v158;
                    goto LABEL_109;
                  }
                  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
                  v128 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
                }
                type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v128);
                memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
                a3 = v168;
                v130 = v170;
LABEL_109:
                *(_BYTE *)(v11 + v130[29]) = *(_BYTE *)(v12 + v130[29]);
                *(_BYTE *)(v11 + v130[30]) = *(_BYTE *)(v12 + v130[30]);
                *(_BYTE *)(v11 + v130[31]) = *(_BYTE *)(v12 + v130[31]);
                *(_BYTE *)(v11 + v130[32]) = *(_BYTE *)(v12 + v130[32]);
                *(_QWORD *)(v11 + v130[33]) = *(_QWORD *)(v12 + v130[33]);
                swift_release();
                goto LABEL_110;
              }
              swift_release();
            }
            else if (v110)
            {
              v112 = *(_QWORD *)(v12 + 448);
              *(_QWORD *)(v11 + 440) = v110;
              *(_QWORD *)(v11 + 448) = v112;
              goto LABEL_74;
            }
            *(_OWORD *)(v11 + 440) = *(_OWORD *)(v12 + 440);
            goto LABEL_74;
          }
          outlined destroy of PlatformItemList.Item.SystemItem(v11 + 296);
        }
        v85 = *(_OWORD *)(v12 + 376);
        *(_OWORD *)(v11 + 360) = *(_OWORD *)(v12 + 360);
        *(_OWORD *)(v11 + 376) = v85;
        *(_QWORD *)(v11 + 392) = *(_QWORD *)(v12 + 392);
        v86 = *(_OWORD *)(v12 + 312);
        *v81 = *v82;
        *(_OWORD *)(v11 + 312) = v86;
        v87 = *(_OWORD *)(v12 + 344);
        *(_OWORD *)(v11 + 328) = *(_OWORD *)(v12 + 328);
        *(_OWORD *)(v11 + 344) = v87;
        goto LABEL_49;
      }
      outlined destroy of Image.NamedResolved(v11 + 248);
    }
    v80 = *(_OWORD *)(v12 + 264);
    *(_OWORD *)(v11 + 248) = *(_OWORD *)(v12 + 248);
    *(_OWORD *)(v11 + 264) = v80;
    *(_OWORD *)(v11 + 280) = *(_OWORD *)(v12 + 280);
    goto LABEL_44;
  }
  if (v17)
  {
    v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_8:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v18);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_110;
  }
  v20 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v20;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  v21 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v11 + 48) = v21;
  *(_BYTE *)(v11 + 56) = *(_BYTE *)(v12 + 56);
  v22 = *(_OWORD *)(v12 + 208);
  *(_OWORD *)(v11 + 192) = *(_OWORD *)(v12 + 192);
  *(_OWORD *)(v11 + 208) = v22;
  *(_OWORD *)(v11 + 224) = *(_OWORD *)(v12 + 224);
  *(_DWORD *)(v11 + 239) = *(_DWORD *)(v12 + 239);
  v23 = *(_OWORD *)(v12 + 144);
  *(_OWORD *)(v11 + 128) = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(v11 + 144) = v23;
  v24 = *(_OWORD *)(v12 + 176);
  *(_OWORD *)(v11 + 160) = *(_OWORD *)(v12 + 160);
  *(_OWORD *)(v11 + 176) = v24;
  v25 = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v11 + 64) = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(v11 + 80) = v25;
  v26 = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(v11 + 96) = *(_OWORD *)(v12 + 96);
  *(_OWORD *)(v11 + 112) = v26;
  *(_OWORD *)(v11 + 248) = *(_OWORD *)(v12 + 248);
  v27 = *(_OWORD *)(v12 + 280);
  *(_OWORD *)(v11 + 264) = *(_OWORD *)(v12 + 264);
  *(_OWORD *)(v11 + 280) = v27;
  v28 = *(_OWORD *)(v12 + 376);
  *(_OWORD *)(v11 + 360) = *(_OWORD *)(v12 + 360);
  *(_OWORD *)(v11 + 376) = v28;
  *(_QWORD *)(v11 + 392) = *(_QWORD *)(v12 + 392);
  v29 = *(_OWORD *)(v12 + 312);
  *(_OWORD *)(v11 + 296) = *(_OWORD *)(v12 + 296);
  *(_OWORD *)(v11 + 312) = v29;
  v30 = *(_OWORD *)(v12 + 344);
  *(_OWORD *)(v11 + 328) = *(_OWORD *)(v12 + 328);
  *(_OWORD *)(v11 + 344) = v30;
  v31 = *(_OWORD *)(v12 + 448);
  *(_OWORD *)(v11 + 432) = *(_OWORD *)(v12 + 432);
  *(_OWORD *)(v11 + 448) = v31;
  *(_BYTE *)(v11 + 464) = *(_BYTE *)(v12 + 464);
  v32 = *(_OWORD *)(v12 + 416);
  *(_OWORD *)(v11 + 400) = *(_OWORD *)(v12 + 400);
  *(_OWORD *)(v11 + 416) = v32;
  *(_OWORD *)(v11 + 472) = *(_OWORD *)(v12 + 472);
  *(_OWORD *)(v11 + 481) = *(_OWORD *)(v12 + 481);
  v33 = *(_QWORD *)(v12 + 504);
  if (v33)
  {
    v34 = *(_QWORD *)(v12 + 512);
    *(_QWORD *)(v11 + 504) = v33;
    *(_QWORD *)(v11 + 512) = v34;
  }
  else
  {
    *(_OWORD *)(v11 + 504) = *(_OWORD *)(v12 + 504);
  }
  *(_WORD *)(v11 + 520) = *(_WORD *)(v12 + 520);
  *(_OWORD *)(v11 + 528) = *(_OWORD *)(v12 + 528);
  *(_QWORD *)(v11 + 544) = *(_QWORD *)(v12 + 544);
  *(_QWORD *)(v11 + 568) = *(_QWORD *)(v12 + 568);
  *(_OWORD *)(v11 + 552) = *(_OWORD *)(v12 + 552);
  *(_QWORD *)(v11 + 576) = *(_QWORD *)(v12 + 576);
  *(_OWORD *)(v11 + 584) = *(_OWORD *)(v12 + 584);
  *(_OWORD *)(v11 + 600) = *(_OWORD *)(v12 + 600);
  *(_QWORD *)(v11 + 616) = *(_QWORD *)(v12 + 616);
  *(_QWORD *)(v11 + 624) = *(_QWORD *)(v12 + 624);
  *(_BYTE *)(v11 + 632) = *(_BYTE *)(v12 + 632);
  *(_WORD *)(v11 + 633) = *(_WORD *)(v12 + 633);
  v169 = (int *)v13;
  v46 = *(int *)(v13 + 112);
  v47 = (_BYTE *)(v11 + v46);
  v48 = (_BYTE *)(v12 + v46);
  v49 = type metadata accessor for CommandOperation();
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    v52 = v169;
  }
  else
  {
    v166 = v47;
    v167 = a3;
    *v47 = *v48;
    v53 = *(int *)(v49 + 20);
    v54 = &v47[v53];
    v55 = &v48[v53];
    v56 = *(_OWORD *)&v48[v53 + 16];
    *v54 = *(_OWORD *)&v48[v53];
    v54[1] = v56;
    v57 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v58 = (char *)v54 + v57;
    v59 = &v55[v57];
    v60 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
    v61 = *(int *)(v49 + 24);
    v62 = &v166[v61];
    v63 = (uint64_t *)&v48[v61];
    v64 = *v63;
    if (*v63)
    {
      v65 = v63[1];
      *v62 = v64;
      v62[1] = v65;
    }
    else
    {
      *(_OWORD *)v62 = *(_OWORD *)v63;
    }
    a3 = v167;
    v52 = v169;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v166, 0, 1, v49);
  }
  *(_BYTE *)(v11 + v52[29]) = *(_BYTE *)(v12 + v52[29]);
  *(_BYTE *)(v11 + v52[30]) = *(_BYTE *)(v12 + v52[30]);
  *(_BYTE *)(v11 + v52[31]) = *(_BYTE *)(v12 + v52[31]);
  *(_BYTE *)(v11 + v52[32]) = *(_BYTE *)(v12 + v52[32]);
  *(_QWORD *)(v11 + v52[33]) = *(_QWORD *)(v12 + v52[33]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v52);
LABEL_110:
  swift_weakTakeAssign();
  v163 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v163) = *(_BYTE *)(a2 + v163);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.Item()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876ECDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.Item()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876ECE6C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchKey()
{
  return &type metadata for SearchKey;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  int v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(void **, _QWORD, uint64_t, int *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v109;
  unsigned int (*v110)(_BYTE *, uint64_t, uint64_t);
  int *v111;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
    return a1;
  }
  v8 = a2 + 1;
  v9 = *((unsigned __int8 *)a2 + 16);
  swift_retain();
  if (v9 == 254 || v9 == 255)
  {
    *(_QWORD *)(a1 + 8) = *v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)v8 + 8);
  }
  else
  {
    v10 = *v8;
    outlined copy of PlatformItemCollection.Storage(v10, v9 & 1);
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = v9 & 1;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (void **)(a1 + v11);
  v13 = (void **)((char *)a2 + v11);
  v14 = type metadata accessor for PlatformItemList.Item();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  v106 = v15;
  v111 = (int *)v14;
  v17 = *v13;
  v18 = v13[1];
  *v12 = *v13;
  v12[1] = v18;
  v19 = v13[3];
  v12[2] = v13[2];
  v12[3] = v19;
  *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
  v20 = v13[6];
  v12[5] = v13[5];
  v12[6] = v20;
  *((_BYTE *)v12 + 56) = *((_BYTE *)v13 + 56);
  v21 = v12 + 8;
  v22 = v13 + 8;
  v23 = (unint64_t)v13[23];
  v24 = v17;
  v25 = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v23 >> 1 != 4294967294)
  {
    v35 = *((unsigned __int8 *)v13 + 72);
    if (v35 == 255)
    {
      *v21 = *v22;
      *((_BYTE *)v12 + 72) = *((_BYTE *)v13 + 72);
    }
    else
    {
      v36 = v13[8];
      outlined copy of GraphicsImage.Contents(v36, *((_BYTE *)v13 + 72));
      v12[8] = v36;
      *((_BYTE *)v12 + 72) = v35;
      v23 = (unint64_t)v13[23];
    }
    v12[10] = v13[10];
    *(_OWORD *)(v12 + 11) = *(_OWORD *)(v13 + 11);
    *((_BYTE *)v12 + 104) = *((_BYTE *)v13 + 104);
    *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v13 + 108);
    *((_BYTE *)v12 + 124) = *((_BYTE *)v13 + 124);
    v37 = *((_OWORD *)v13 + 9);
    *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
    *((_OWORD *)v12 + 9) = v37;
    *((_WORD *)v12 + 80) = *((_WORD *)v13 + 80);
    *((_BYTE *)v12 + 162) = *((_BYTE *)v13 + 162);
    *((_BYTE *)v12 + 163) = *((_BYTE *)v13 + 163);
    if (v23 >> 1 == 0xFFFFFFFF)
    {
      v38 = *(_OWORD *)(v13 + 23);
      *(_OWORD *)(v12 + 21) = *(_OWORD *)(v13 + 21);
      *(_OWORD *)(v12 + 23) = v38;
    }
    else
    {
      v39 = (uint64_t)v13[21];
      v40 = (uint64_t)v13[22];
      v41 = v13[24];
      outlined copy of AccessibilityImageLabel(v39, v40, v23);
      v12[21] = (void *)v39;
      v12[22] = (void *)v40;
      v12[23] = (void *)v23;
      v12[24] = v41;
    }
    v42 = v13[26];
    v12[25] = v13[25];
    v12[26] = v42;
    *((_WORD *)v12 + 108) = *((_WORD *)v13 + 108);
    *((_DWORD *)v12 + 55) = *((_DWORD *)v13 + 55);
    *((_BYTE *)v12 + 224) = *((_BYTE *)v13 + 224);
    v43 = v13[29];
    v12[29] = v43;
    *((_WORD *)v12 + 120) = *((_WORD *)v13 + 120);
    *((_BYTE *)v12 + 242) = *((_BYTE *)v13 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v44 = v43;
    v31 = v13[32];
    if (v31)
      goto LABEL_11;
LABEL_21:
    v45 = *(_OWORD *)(v13 + 33);
    *(_OWORD *)(v12 + 31) = *(_OWORD *)(v13 + 31);
    *(_OWORD *)(v12 + 33) = v45;
    *(_OWORD *)(v12 + 35) = *(_OWORD *)(v13 + 35);
    goto LABEL_22;
  }
  v26 = *((_OWORD *)v13 + 13);
  *((_OWORD *)v12 + 12) = *((_OWORD *)v13 + 12);
  *((_OWORD *)v12 + 13) = v26;
  *((_OWORD *)v12 + 14) = *((_OWORD *)v13 + 14);
  *(_DWORD *)((char *)v12 + 239) = *(_DWORD *)((char *)v13 + 239);
  v27 = *((_OWORD *)v13 + 9);
  *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
  *((_OWORD *)v12 + 9) = v27;
  v28 = *((_OWORD *)v13 + 11);
  *((_OWORD *)v12 + 10) = *((_OWORD *)v13 + 10);
  *((_OWORD *)v12 + 11) = v28;
  v29 = *((_OWORD *)v13 + 5);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v12 + 5) = v29;
  v30 = *((_OWORD *)v13 + 7);
  *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
  *((_OWORD *)v12 + 7) = v30;
  v31 = v13[32];
  if (!v31)
    goto LABEL_21;
LABEL_11:
  v12[31] = v13[31];
  v12[32] = v31;
  v32 = v13[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v32 >= 2)
    v33 = v32;
  v12[33] = v32;
  *((_DWORD *)v12 + 68) = *((_DWORD *)v13 + 68);
  *((_BYTE *)v12 + 276) = *((_BYTE *)v13 + 276);
  *(_WORD *)((char *)v12 + 277) = *(_WORD *)((char *)v13 + 277);
  v34 = v13[36];
  v12[35] = v13[35];
  v12[36] = v34;
  swift_retain();
  swift_retain();
LABEL_22:
  v46 = (unint64_t)v13[41];
  if (v46 >> 2 == 0xFFFFFFFF)
  {
    v47 = *(_OWORD *)(v13 + 47);
    *(_OWORD *)(v12 + 45) = *(_OWORD *)(v13 + 45);
    *(_OWORD *)(v12 + 47) = v47;
    v12[49] = v13[49];
    v48 = *(_OWORD *)(v13 + 39);
    *(_OWORD *)(v12 + 37) = *(_OWORD *)(v13 + 37);
    *(_OWORD *)(v12 + 39) = v48;
    v49 = *(_OWORD *)(v13 + 43);
    *(_OWORD *)(v12 + 41) = *(_OWORD *)(v13 + 41);
    *(_OWORD *)(v12 + 43) = v49;
  }
  else
  {
    v50 = v13[37];
    v51 = (uint64_t)v13[38];
    v52 = (uint64_t)v13[39];
    v53 = (uint64_t)v13[42];
    v54 = (uint64_t)v13[43];
    v55 = v13[44];
    v100 = (uint64_t)v13[40];
    v101 = (uint64_t)v13[45];
    v102 = (uint64_t)v13[46];
    v103 = (uint64_t)v13[47];
    __dsta = v13[48];
    v109 = (uint64_t)v13[49];
    outlined copy of PlatformItemList.Item.SystemItem(v50, v51, v52, v100, v46, v53, v54, (char)v55, v101, v102, v103, (char)__dsta, v109);
    v12[37] = v50;
    v12[38] = (void *)v51;
    v12[39] = (void *)v52;
    v12[40] = (void *)v100;
    v12[41] = (void *)v46;
    v12[42] = (void *)v53;
    v12[43] = (void *)v54;
    v12[44] = v55;
    v12[45] = (void *)v101;
    v12[46] = (void *)v102;
    v12[47] = (void *)v103;
    v12[48] = __dsta;
    v12[49] = (void *)v109;
  }
  v56 = v13[51];
  if (v56 != (void *)1)
  {
    *((_DWORD *)v12 + 100) = *((_DWORD *)v13 + 100);
    *((_BYTE *)v12 + 404) = *((_BYTE *)v13 + 404);
    if (v56)
    {
      v59 = v13[52];
      v12[51] = v56;
      v12[52] = v59;
      swift_retain();
      v60 = v13[53];
      if (v60)
        goto LABEL_29;
    }
    else
    {
      *(_OWORD *)(v12 + 51) = *(_OWORD *)(v13 + 51);
      v60 = v13[53];
      if (v60)
      {
LABEL_29:
        v61 = v13[54];
        v12[53] = v60;
        v12[54] = v61;
        swift_retain();
        v62 = v13[55];
        if (v62)
        {
LABEL_30:
          v63 = v13[56];
          v12[55] = v62;
          v12[56] = v63;
          swift_retain();
LABEL_34:
          v12[57] = v13[57];
          *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
          goto LABEL_35;
        }
LABEL_33:
        *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 55);
        goto LABEL_34;
      }
    }
    *(_OWORD *)(v12 + 53) = *(_OWORD *)(v13 + 53);
    v62 = v13[55];
    if (v62)
      goto LABEL_30;
    goto LABEL_33;
  }
  v57 = *((_OWORD *)v13 + 28);
  *((_OWORD *)v12 + 27) = *((_OWORD *)v13 + 27);
  *((_OWORD *)v12 + 28) = v57;
  *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
  v58 = *((_OWORD *)v13 + 26);
  *((_OWORD *)v12 + 25) = *((_OWORD *)v13 + 25);
  *((_OWORD *)v12 + 26) = v58;
LABEL_35:
  v64 = v13[60];
  v12[59] = v13[59];
  v12[60] = v64;
  v12[61] = v13[61];
  *((_BYTE *)v12 + 496) = *((_BYTE *)v13 + 496);
  v65 = v13[63];
  swift_bridgeObjectRetain();
  if (v65)
  {
    v66 = v13[64];
    v12[63] = v65;
    v12[64] = v66;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v12 + 63) = *(_OWORD *)(v13 + 63);
  }
  *((_WORD *)v12 + 260) = *((_WORD *)v13 + 260);
  v67 = v13[66];
  if (v67)
  {
    v12[66] = v67;
    v12[67] = v13[67];
    v12[68] = v13[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v12 + 33) = *((_OWORD *)v13 + 33);
    v12[68] = v13[68];
  }
  v68 = v13[69];
  v105 = a1;
  if (v68 == (void *)1)
  {
    *(_OWORD *)(v12 + 69) = *(_OWORD *)(v13 + 69);
    v12[71] = v13[71];
  }
  else
  {
    v12[69] = v68;
    v69 = v13[70];
    swift_retain();
    if (v69)
    {
      v70 = v13[71];
      v12[70] = v69;
      v12[71] = v70;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v12 + 35) = *((_OWORD *)v13 + 35);
    }
  }
  v71 = v13[72];
  v12[72] = v71;
  v12[73] = v13[73];
  v12[74] = v13[74];
  v12[75] = v13[75];
  v12[76] = v13[76];
  v12[77] = v13[77];
  v12[78] = v13[78];
  *((_WORD *)v12 + 316) = *((_WORD *)v13 + 316);
  *((_BYTE *)v12 + 634) = *((_BYTE *)v13 + 634);
  v72 = v111[28];
  __dst = (char *)v12 + v72;
  v73 = (char *)v13 + v72;
  v74 = type metadata accessor for CommandOperation();
  v75 = *(_QWORD *)(v74 - 8);
  v110 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v75 + 48);
  v76 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v110(v73, 1, v74))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v73, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    v78 = v111;
    v79 = v106;
  }
  else
  {
    v104 = v75;
    *__dst = *v73;
    v80 = *(int *)(v74 + 20);
    v81 = &__dst[v80];
    v82 = &v73[v80];
    v83 = v74;
    v84 = *(_QWORD *)&v73[v80];
    v85 = *(_QWORD *)&v73[v80 + 8];
    v86 = v73[v80 + 16];
    outlined copy of Text.Storage(v84, *((_QWORD *)v82 + 1), v82[16]);
    *(_QWORD *)v81 = v84;
    *((_QWORD *)v81 + 1) = v85;
    v81[16] = v86;
    *((_QWORD *)v81 + 3) = *((_QWORD *)v82 + 3);
    v87 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v88 = &v81[v87];
    v89 = &v82[v87];
    v90 = type metadata accessor for UUID();
    v91 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
    swift_bridgeObjectRetain();
    v92 = v88;
    v93 = v83;
    v91(v92, v89, v90);
    v94 = *(int *)(v83 + 24);
    v95 = &__dst[v94];
    v96 = &v73[v94];
    if (*v96)
    {
      v97 = v96[1];
      *v95 = *v96;
      v95[1] = v97;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v95 = *(_OWORD *)v96;
    }
    v78 = v111;
    a1 = v105;
    v79 = v106;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56))(__dst, 0, 1, v93);
  }
  *((_BYTE *)v12 + v78[29]) = *((_BYTE *)v13 + v78[29]);
  *((_BYTE *)v12 + v78[30]) = *((_BYTE *)v13 + v78[30]);
  *((_BYTE *)v12 + v78[31]) = *((_BYTE *)v13 + v78[31]);
  *((_BYTE *)v12 + v78[32]) = *((_BYTE *)v13 + v78[32]);
  *(void **)((char *)v12 + v78[33]) = *(void **)((char *)v13 + v78[33]);
  v98 = *(void (**)(void **, _QWORD, uint64_t, int *))(v79 + 56);
  swift_retain();
  v98(v12, 0, 1, v78);
  return a1;
}

uint64_t destroy for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_release();
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 <= 0xFD)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)(a1 + 8), v4 & 1);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for PlatformItemList.Item();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {

    swift_bridgeObjectRelease();
    swift_release();
    v8 = *(_QWORD *)(v5 + 184);
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v10 = *(unsigned __int8 *)(v5 + 72);
      if (v10 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v5 + 64), v10);
        v8 = *(_QWORD *)(v5 + 184);
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v9 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v5 + 168), *(_QWORD *)(v5 + 176), v8);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v5 + 256))
    {
      swift_bridgeObjectRelease();
      v11 = *(void **)(v5 + 264);
      if ((unint64_t)v11 >= 2)

      swift_release();
      swift_release();
    }
    v12 = *(_QWORD *)(v5 + 328);
    if (v12 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v5 + 296), *(_QWORD *)(v5 + 304), *(_QWORD *)(v5 + 312), *(_QWORD *)(v5 + 320), v12, *(_QWORD *)(v5 + 336), *(_QWORD *)(v5 + 344), *(_QWORD *)(v5 + 352), *(_QWORD *)(v5 + 360), *(_QWORD *)(v5 + 368), *(_QWORD *)(v5 + 376), *(_QWORD *)(v5 + 384), *(_QWORD *)(v5 + 392));
    v13 = *(_QWORD *)(v5 + 408);
    if (v13)
    {
      if (v13 == 1)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v5 + 504))
          swift_release();
        if (*(_QWORD *)(v5 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v5 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v5 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = v5 + *(int *)(v6 + 112);
        v15 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
        {
          v16 = v14 + *(int *)(v15 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
          swift_bridgeObjectRelease();
          v17 = v16 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v18 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
          if (*(_QWORD *)(v14 + *(int *)(v15 + 24)))
            swift_release();
        }
        return swift_release();
      }
      swift_release();
    }
    if (*(_QWORD *)(v5 + 424))
      swift_release();
    if (*(_QWORD *)(v5 + 440))
      swift_release();
    goto LABEL_23;
  }
  return result;
}

_QWORD *initializeWithCopy for ToolbarStorage.NavigationProperties(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  int v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  void (*v96)(void **, _QWORD, uint64_t, int *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unsigned int (*v102)(_BYTE *, uint64_t, uint64_t);
  uint64_t v103;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v106;
  _QWORD *v107;
  int *v108;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  v6 = a1 + 1;
  v7 = a2 + 8;
  v8 = *(unsigned __int8 *)(a2 + 16);
  swift_retain();
  if (v8 == 254 || v8 == 255)
  {
    *v6 = *(_QWORD *)v7;
    *((_BYTE *)v5 + 16) = *(_BYTE *)(v7 + 8);
  }
  else
  {
    v9 = v8 & 1;
    v10 = *(_QWORD *)v7;
    outlined copy of PlatformItemCollection.Storage(v10, v9);
    v5[1] = v10;
    *((_BYTE *)v5 + 16) = v9;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (void **)((char *)v5 + v11);
  v13 = (void **)(a2 + v11);
  v14 = type metadata accessor for PlatformItemList.Item();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return v5;
  }
  v106 = v15;
  v108 = (int *)v14;
  v107 = v5;
  v17 = *v13;
  v18 = v13[1];
  *v12 = *v13;
  v12[1] = v18;
  v19 = v13[3];
  v12[2] = v13[2];
  v12[3] = v19;
  *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
  v20 = v13[6];
  v12[5] = v13[5];
  v12[6] = v20;
  *((_BYTE *)v12 + 56) = *((_BYTE *)v13 + 56);
  v21 = v12 + 8;
  v22 = v13 + 8;
  v23 = (unint64_t)v13[23];
  v24 = v17;
  v25 = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v23 >> 1 != 4294967294)
  {
    v35 = *((unsigned __int8 *)v13 + 72);
    if (v35 == 255)
    {
      *v21 = *v22;
      *((_BYTE *)v12 + 72) = *((_BYTE *)v13 + 72);
    }
    else
    {
      v36 = v13[8];
      outlined copy of GraphicsImage.Contents(v36, *((_BYTE *)v13 + 72));
      v12[8] = v36;
      *((_BYTE *)v12 + 72) = v35;
      v23 = (unint64_t)v13[23];
    }
    v12[10] = v13[10];
    *(_OWORD *)(v12 + 11) = *(_OWORD *)(v13 + 11);
    *((_BYTE *)v12 + 104) = *((_BYTE *)v13 + 104);
    *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v13 + 108);
    *((_BYTE *)v12 + 124) = *((_BYTE *)v13 + 124);
    v37 = *((_OWORD *)v13 + 9);
    *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
    *((_OWORD *)v12 + 9) = v37;
    *((_WORD *)v12 + 80) = *((_WORD *)v13 + 80);
    *((_BYTE *)v12 + 162) = *((_BYTE *)v13 + 162);
    *((_BYTE *)v12 + 163) = *((_BYTE *)v13 + 163);
    if (v23 >> 1 == 0xFFFFFFFF)
    {
      v38 = *(_OWORD *)(v13 + 23);
      *(_OWORD *)(v12 + 21) = *(_OWORD *)(v13 + 21);
      *(_OWORD *)(v12 + 23) = v38;
    }
    else
    {
      v39 = (uint64_t)v13[21];
      v40 = (uint64_t)v13[22];
      v41 = v13[24];
      outlined copy of AccessibilityImageLabel(v39, v40, v23);
      v12[21] = (void *)v39;
      v12[22] = (void *)v40;
      v12[23] = (void *)v23;
      v12[24] = v41;
    }
    v42 = v13[26];
    v12[25] = v13[25];
    v12[26] = v42;
    *((_WORD *)v12 + 108) = *((_WORD *)v13 + 108);
    *((_DWORD *)v12 + 55) = *((_DWORD *)v13 + 55);
    *((_BYTE *)v12 + 224) = *((_BYTE *)v13 + 224);
    v43 = v13[29];
    v12[29] = v43;
    *((_WORD *)v12 + 120) = *((_WORD *)v13 + 120);
    *((_BYTE *)v12 + 242) = *((_BYTE *)v13 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v44 = v43;
    v31 = v13[32];
    if (v31)
      goto LABEL_9;
LABEL_19:
    v45 = *(_OWORD *)(v13 + 33);
    *(_OWORD *)(v12 + 31) = *(_OWORD *)(v13 + 31);
    *(_OWORD *)(v12 + 33) = v45;
    *(_OWORD *)(v12 + 35) = *(_OWORD *)(v13 + 35);
    goto LABEL_20;
  }
  v26 = *((_OWORD *)v13 + 13);
  *((_OWORD *)v12 + 12) = *((_OWORD *)v13 + 12);
  *((_OWORD *)v12 + 13) = v26;
  *((_OWORD *)v12 + 14) = *((_OWORD *)v13 + 14);
  *(_DWORD *)((char *)v12 + 239) = *(_DWORD *)((char *)v13 + 239);
  v27 = *((_OWORD *)v13 + 9);
  *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
  *((_OWORD *)v12 + 9) = v27;
  v28 = *((_OWORD *)v13 + 11);
  *((_OWORD *)v12 + 10) = *((_OWORD *)v13 + 10);
  *((_OWORD *)v12 + 11) = v28;
  v29 = *((_OWORD *)v13 + 5);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v12 + 5) = v29;
  v30 = *((_OWORD *)v13 + 7);
  *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
  *((_OWORD *)v12 + 7) = v30;
  v31 = v13[32];
  if (!v31)
    goto LABEL_19;
LABEL_9:
  v12[31] = v13[31];
  v12[32] = v31;
  v32 = v13[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v32 >= 2)
    v33 = v32;
  v12[33] = v32;
  *((_DWORD *)v12 + 68) = *((_DWORD *)v13 + 68);
  *((_BYTE *)v12 + 276) = *((_BYTE *)v13 + 276);
  *(_WORD *)((char *)v12 + 277) = *(_WORD *)((char *)v13 + 277);
  v34 = v13[36];
  v12[35] = v13[35];
  v12[36] = v34;
  swift_retain();
  swift_retain();
LABEL_20:
  v46 = (unint64_t)v13[41];
  if (v46 >> 2 == 0xFFFFFFFF)
  {
    v47 = *(_OWORD *)(v13 + 47);
    *(_OWORD *)(v12 + 45) = *(_OWORD *)(v13 + 45);
    *(_OWORD *)(v12 + 47) = v47;
    v12[49] = v13[49];
    v48 = *(_OWORD *)(v13 + 39);
    *(_OWORD *)(v12 + 37) = *(_OWORD *)(v13 + 37);
    *(_OWORD *)(v12 + 39) = v48;
    v49 = *(_OWORD *)(v13 + 43);
    *(_OWORD *)(v12 + 41) = *(_OWORD *)(v13 + 41);
    *(_OWORD *)(v12 + 43) = v49;
  }
  else
  {
    v50 = v13[37];
    v51 = (uint64_t)v13[38];
    v52 = (uint64_t)v13[39];
    v53 = (uint64_t)v13[40];
    v55 = (uint64_t)v13[42];
    v54 = (uint64_t)v13[43];
    v56 = v13[44];
    v98 = (uint64_t)v13[45];
    v99 = (uint64_t)v13[46];
    v100 = (uint64_t)v13[47];
    v101 = v13[48];
    __dsta = v13[49];
    outlined copy of PlatformItemList.Item.SystemItem(v50, v51, v52, v53, v46, v55, v54, (char)v56, v98, v99, v100, (char)v101, (uint64_t)__dsta);
    v12[37] = v50;
    v12[38] = (void *)v51;
    v12[39] = (void *)v52;
    v12[40] = (void *)v53;
    v12[41] = (void *)v46;
    v12[42] = (void *)v55;
    v12[43] = (void *)v54;
    v12[44] = v56;
    v12[45] = (void *)v98;
    v12[46] = (void *)v99;
    v12[47] = (void *)v100;
    v12[48] = v101;
    v12[49] = __dsta;
  }
  v57 = v13[51];
  if (v57 != (void *)1)
  {
    *((_DWORD *)v12 + 100) = *((_DWORD *)v13 + 100);
    *((_BYTE *)v12 + 404) = *((_BYTE *)v13 + 404);
    if (v57)
    {
      v60 = v13[52];
      v12[51] = v57;
      v12[52] = v60;
      swift_retain();
      v61 = v13[53];
      if (v61)
        goto LABEL_27;
    }
    else
    {
      *(_OWORD *)(v12 + 51) = *(_OWORD *)(v13 + 51);
      v61 = v13[53];
      if (v61)
      {
LABEL_27:
        v62 = v13[54];
        v12[53] = v61;
        v12[54] = v62;
        swift_retain();
        v63 = v13[55];
        if (v63)
        {
LABEL_28:
          v64 = v13[56];
          v12[55] = v63;
          v12[56] = v64;
          swift_retain();
LABEL_32:
          v12[57] = v13[57];
          *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
          goto LABEL_33;
        }
LABEL_31:
        *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 55);
        goto LABEL_32;
      }
    }
    *(_OWORD *)(v12 + 53) = *(_OWORD *)(v13 + 53);
    v63 = v13[55];
    if (v63)
      goto LABEL_28;
    goto LABEL_31;
  }
  v58 = *((_OWORD *)v13 + 28);
  *((_OWORD *)v12 + 27) = *((_OWORD *)v13 + 27);
  *((_OWORD *)v12 + 28) = v58;
  *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
  v59 = *((_OWORD *)v13 + 26);
  *((_OWORD *)v12 + 25) = *((_OWORD *)v13 + 25);
  *((_OWORD *)v12 + 26) = v59;
LABEL_33:
  v65 = v13[60];
  v12[59] = v13[59];
  v12[60] = v65;
  v12[61] = v13[61];
  *((_BYTE *)v12 + 496) = *((_BYTE *)v13 + 496);
  v66 = v13[63];
  swift_bridgeObjectRetain();
  if (v66)
  {
    v67 = v13[64];
    v12[63] = v66;
    v12[64] = v67;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v12 + 63) = *(_OWORD *)(v13 + 63);
  }
  *((_WORD *)v12 + 260) = *((_WORD *)v13 + 260);
  v68 = v13[66];
  if (v68)
  {
    v12[66] = v68;
    v12[67] = v13[67];
    v12[68] = v13[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v12 + 33) = *((_OWORD *)v13 + 33);
    v12[68] = v13[68];
  }
  v69 = v13[69];
  if (v69 == (void *)1)
  {
    *(_OWORD *)(v12 + 69) = *(_OWORD *)(v13 + 69);
    v12[71] = v13[71];
  }
  else
  {
    v12[69] = v69;
    v70 = v13[70];
    swift_retain();
    if (v70)
    {
      v71 = v13[71];
      v12[70] = v70;
      v12[71] = v71;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v12 + 35) = *((_OWORD *)v13 + 35);
    }
  }
  v72 = v13[72];
  v12[72] = v72;
  v12[73] = v13[73];
  v12[74] = v13[74];
  v12[75] = v13[75];
  v12[76] = v13[76];
  v12[77] = v13[77];
  v12[78] = v13[78];
  *((_WORD *)v12 + 316) = *((_WORD *)v13 + 316);
  *((_BYTE *)v12 + 634) = *((_BYTE *)v13 + 634);
  v73 = v108[28];
  __dst = (char *)v12 + v73;
  v74 = (char *)v13 + v73;
  v75 = type metadata accessor for CommandOperation();
  v76 = *(_QWORD *)(v75 - 8);
  v102 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48);
  v77 = v72;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v102(v74, 1, v75))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v74, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    v79 = v108;
  }
  else
  {
    v103 = v76;
    *__dst = *v74;
    v80 = v75;
    v81 = *(int *)(v75 + 20);
    v82 = &__dst[v81];
    v83 = &v74[v81];
    v84 = *(_QWORD *)&v74[v81];
    v85 = *(_QWORD *)&v74[v81 + 8];
    v86 = v74[v81 + 16];
    outlined copy of Text.Storage(v84, v85, v86);
    *(_QWORD *)v82 = v84;
    *((_QWORD *)v82 + 1) = v85;
    v82[16] = v86;
    *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
    v87 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v88 = &v82[v87];
    v89 = &v83[v87];
    v90 = type metadata accessor for UUID();
    v91 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
    swift_bridgeObjectRetain();
    v91(v88, v89, v90);
    v92 = *(int *)(v80 + 24);
    v93 = &__dst[v92];
    v94 = &v74[v92];
    if (*v94)
    {
      v95 = v94[1];
      *v93 = *v94;
      v93[1] = v95;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v93 = *(_OWORD *)v94;
    }
    v79 = v108;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v103 + 56))(__dst, 0, 1, v80);
  }
  *((_BYTE *)v12 + v79[29]) = *((_BYTE *)v13 + v79[29]);
  *((_BYTE *)v12 + v79[30]) = *((_BYTE *)v13 + v79[30]);
  *((_BYTE *)v12 + v79[31]) = *((_BYTE *)v13 + v79[31]);
  *((_BYTE *)v12 + v79[32]) = *((_BYTE *)v13 + v79[32]);
  *(void **)((char *)v12 + v79[33]) = *(void **)((char *)v13 + v79[33]);
  v96 = *(void (**)(void **, _QWORD, uint64_t, int *))(v106 + 56);
  swift_retain();
  v96(v12, 0, 1, v79);
  return v107;
}

_QWORD *assignWithCopy for ToolbarStorage.NavigationProperties(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, int *);
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  id *v31;
  unint64_t v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  id v45;
  int v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  _OWORD *v53;
  id *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  id v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  void (*v140)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  int v145;
  id v146;
  int v147;
  id v148;
  void *v149;
  char v150;
  void (*v151)(uint64_t, _QWORD, uint64_t, int *);
  id v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  void *v162;
  id v163;
  id v164;
  char v165;
  id v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD *v170;
  _OWORD *v171;
  uint64_t v172;
  unint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  void *v186;
  void *v187;
  id v188;
  __int128 *v189;
  __int128 *v190;
  uint64_t v191;
  void *v192;
  void *v193;
  id v194;
  void *v195;
  id v196;
  int v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  id v202;
  int v203;
  __int128 *v204;
  __int128 *v205;
  unint64_t v206;
  unint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  _OWORD *v243;
  _OWORD *v244;
  _OWORD *v245;
  uint64_t v246;
  _OWORD *v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _OWORD *v271;
  _OWORD *v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  __int128 *v276;
  __int128 *v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  void *v286;
  id v287;
  uint64_t v288;
  _BYTE *v289;
  _BYTE *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t (*v293)(_BYTE *, uint64_t, uint64_t);
  int v294;
  int v295;
  uint64_t (*v296)(uint64_t, uint64_t);
  uint64_t v297;
  uint64_t v298;
  _BYTE *v299;
  _BYTE *v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  _BYTE *v305;
  uint64_t v306;
  void (*v307)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  uint64_t v321;
  _BYTE *v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *__dsta;
  _BYTE *__dst;
  void *__dstb;
  void *__dstc;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _BYTE *v347;
  uint64_t v348;
  unsigned int (*v349)(_BYTE *, uint64_t, uint64_t);
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE *v353;
  _QWORD *v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  int *v359;
  int *v360;
  int *v361;
  int *v362;
  int *v363;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v6 = v5 + 1;
  v7 = (uint64_t *)(a2 + 8);
  v8 = *((unsigned __int8 *)v5 + 16);
  v9 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 254)
  {
    if (v9 == 254)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v9 == 254)
  {
    outlined destroy of ToolbarStorage.NavigationProperties.Actions((uint64_t)(v5 + 1));
    goto LABEL_6;
  }
  if (v8 != 255)
  {
    if (v9 != 255)
    {
      v14 = v9 & 1;
      v15 = *v7;
      outlined copy of PlatformItemCollection.Storage(*v7, v9 & 1);
      v16 = v5[1];
      v17 = *((_BYTE *)v5 + 16);
      v5[1] = v15;
      *((_BYTE *)v5 + 16) = v14;
      outlined consume of PlatformItemCollection.Storage(v16, v17);
      goto LABEL_14;
    }
    outlined destroy of PlatformItemCollection((uint64_t)(v5 + 1));
LABEL_6:
    v10 = *(_BYTE *)(a2 + 16);
    *v6 = *v7;
    *((_BYTE *)v5 + 16) = v10;
    goto LABEL_14;
  }
LABEL_8:
  if (v9 == 255)
  {
LABEL_9:
    v11 = *v7;
    *((_BYTE *)v5 + 16) = *(_BYTE *)(a2 + 16);
    *v6 = v11;
    goto LABEL_14;
  }
  v12 = v9 & 1;
  v13 = *v7;
  outlined copy of PlatformItemCollection.Storage(*v7, v9 & 1);
  v5[1] = v13;
  *((_BYTE *)v5 + 16) = v12;
LABEL_14:
  v18 = *(int *)(a3 + 24);
  v19 = (uint64_t)v5 + v18;
  v20 = a2 + v18;
  v21 = (int *)type metadata accessor for PlatformItemList.Item();
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v19, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_19;
    }
    v47 = *(void **)v19;
    v48 = *(void **)v20;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v49 = v48;

    v50 = *(void **)(v19 + 8);
    v51 = *(void **)(v20 + 8);
    *(_QWORD *)(v19 + 8) = v51;
    v52 = v51;

    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
    *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
    swift_retain();
    swift_release();
    *(_BYTE *)(v19 + 56) = *(_BYTE *)(v20 + 56);
    v53 = (_OWORD *)(v19 + 64);
    v54 = (id *)(v20 + 64);
    v55 = *(_QWORD *)(v20 + 184) & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(v19 + 184) >> 1 == 4294967294)
    {
      if (v55 == 0x1FFFFFFFCLL)
      {
        v56 = *(_OWORD *)v54;
        v57 = *(_OWORD *)(v20 + 80);
        v58 = *(_OWORD *)(v20 + 112);
        *(_OWORD *)(v19 + 96) = *(_OWORD *)(v20 + 96);
        *(_OWORD *)(v19 + 112) = v58;
        *v53 = v56;
        *(_OWORD *)(v19 + 80) = v57;
        v59 = *(_OWORD *)(v20 + 128);
        v60 = *(_OWORD *)(v20 + 144);
        v61 = *(_OWORD *)(v20 + 176);
        *(_OWORD *)(v19 + 160) = *(_OWORD *)(v20 + 160);
        *(_OWORD *)(v19 + 176) = v61;
        *(_OWORD *)(v19 + 128) = v59;
        *(_OWORD *)(v19 + 144) = v60;
        v62 = *(_OWORD *)(v20 + 192);
        v63 = *(_OWORD *)(v20 + 208);
        v64 = *(_OWORD *)(v20 + 224);
        *(_DWORD *)(v19 + 239) = *(_DWORD *)(v20 + 239);
        *(_OWORD *)(v19 + 208) = v63;
        *(_OWORD *)(v19 + 224) = v64;
        *(_OWORD *)(v19 + 192) = v62;
      }
      else
      {
        v145 = *(unsigned __int8 *)(v20 + 72);
        if (v145 == 255)
        {
          v152 = *v54;
          *(_BYTE *)(v19 + 72) = *(_BYTE *)(v20 + 72);
          *(_QWORD *)v53 = v152;
        }
        else
        {
          v146 = *v54;
          outlined copy of GraphicsImage.Contents(*v54, *(_BYTE *)(v20 + 72));
          *(_QWORD *)(v19 + 64) = v146;
          *(_BYTE *)(v19 + 72) = v145;
        }
        *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
        *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 88);
        *(_BYTE *)(v19 + 104) = *(_BYTE *)(v20 + 104);
        v153 = *(_OWORD *)(v20 + 108);
        *(_BYTE *)(v19 + 124) = *(_BYTE *)(v20 + 124);
        *(_OWORD *)(v19 + 108) = v153;
        v154 = *(_OWORD *)(v20 + 128);
        v155 = *(_OWORD *)(v20 + 144);
        *(_BYTE *)(v19 + 160) = *(_BYTE *)(v20 + 160);
        *(_OWORD *)(v19 + 128) = v154;
        *(_OWORD *)(v19 + 144) = v155;
        *(_BYTE *)(v19 + 161) = *(_BYTE *)(v20 + 161);
        *(_BYTE *)(v19 + 162) = *(_BYTE *)(v20 + 162);
        *(_BYTE *)(v19 + 163) = *(_BYTE *)(v20 + 163);
        v156 = *(_QWORD *)(v20 + 184);
        if (v156 >> 1 == 0xFFFFFFFF)
        {
          v157 = *(_OWORD *)(v20 + 184);
          *(_OWORD *)(v19 + 168) = *(_OWORD *)(v20 + 168);
          *(_OWORD *)(v19 + 184) = v157;
        }
        else
        {
          v158 = *(_QWORD *)(v20 + 168);
          v159 = *(_QWORD *)(v20 + 176);
          v160 = *(_QWORD *)(v20 + 192);
          outlined copy of AccessibilityImageLabel(v158, v159, *(_QWORD *)(v20 + 184));
          *(_QWORD *)(v19 + 168) = v158;
          *(_QWORD *)(v19 + 176) = v159;
          *(_QWORD *)(v19 + 184) = v156;
          *(_QWORD *)(v19 + 192) = v160;
        }
        *(_QWORD *)(v19 + 200) = *(_QWORD *)(v20 + 200);
        *(_QWORD *)(v19 + 208) = *(_QWORD *)(v20 + 208);
        *(_BYTE *)(v19 + 216) = *(_BYTE *)(v20 + 216);
        *(_BYTE *)(v19 + 217) = *(_BYTE *)(v20 + 217);
        v161 = *(_DWORD *)(v20 + 220);
        *(_BYTE *)(v19 + 224) = *(_BYTE *)(v20 + 224);
        *(_DWORD *)(v19 + 220) = v161;
        v162 = *(void **)(v20 + 232);
        *(_QWORD *)(v19 + 232) = v162;
        *(_WORD *)(v19 + 240) = *(_WORD *)(v20 + 240);
        *(_BYTE *)(v19 + 242) = *(_BYTE *)(v20 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        v163 = v162;
      }
    }
    else if (v55 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(v19 + 64);
      v67 = *(_OWORD *)(v20 + 112);
      v69 = *(_OWORD *)v54;
      v68 = *(_OWORD *)(v20 + 80);
      *(_OWORD *)(v19 + 96) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v19 + 112) = v67;
      *v53 = v69;
      *(_OWORD *)(v19 + 80) = v68;
      v70 = *(_OWORD *)(v20 + 176);
      v72 = *(_OWORD *)(v20 + 128);
      v71 = *(_OWORD *)(v20 + 144);
      *(_OWORD *)(v19 + 160) = *(_OWORD *)(v20 + 160);
      *(_OWORD *)(v19 + 176) = v70;
      *(_OWORD *)(v19 + 128) = v72;
      *(_OWORD *)(v19 + 144) = v71;
      v74 = *(_OWORD *)(v20 + 208);
      v73 = *(_OWORD *)(v20 + 224);
      v75 = *(_OWORD *)(v20 + 192);
      *(_DWORD *)(v19 + 239) = *(_DWORD *)(v20 + 239);
      *(_OWORD *)(v19 + 208) = v74;
      *(_OWORD *)(v19 + 224) = v73;
      *(_OWORD *)(v19 + 192) = v75;
    }
    else
    {
      v147 = *(unsigned __int8 *)(v20 + 72);
      if (*(unsigned __int8 *)(v19 + 72) == 255)
      {
        if (v147 == 255)
        {
          v166 = *v54;
          *(_BYTE *)(v19 + 72) = *(_BYTE *)(v20 + 72);
          *(_QWORD *)v53 = v166;
        }
        else
        {
          v164 = *v54;
          outlined copy of GraphicsImage.Contents(*v54, *(_BYTE *)(v20 + 72));
          *(_QWORD *)(v19 + 64) = v164;
          *(_BYTE *)(v19 + 72) = v147;
        }
      }
      else if (v147 == 255)
      {
        outlined destroy of GraphicsImage.Contents(v19 + 64);
        v165 = *(_BYTE *)(v20 + 72);
        *(_QWORD *)v53 = *v54;
        *(_BYTE *)(v19 + 72) = v165;
      }
      else
      {
        v148 = *v54;
        outlined copy of GraphicsImage.Contents(*v54, *(_BYTE *)(v20 + 72));
        v149 = *(void **)(v19 + 64);
        *(_QWORD *)(v19 + 64) = v148;
        v150 = *(_BYTE *)(v19 + 72);
        *(_BYTE *)(v19 + 72) = v147;
        outlined consume of GraphicsImage.Contents(v149, v150);
      }
      *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
      *(_QWORD *)(v19 + 88) = *(_QWORD *)(v20 + 88);
      *(_QWORD *)(v19 + 96) = *(_QWORD *)(v20 + 96);
      *(_BYTE *)(v19 + 104) = *(_BYTE *)(v20 + 104);
      v167 = *(_OWORD *)(v20 + 108);
      *(_BYTE *)(v19 + 124) = *(_BYTE *)(v20 + 124);
      *(_OWORD *)(v19 + 108) = v167;
      v168 = *(_OWORD *)(v20 + 128);
      v169 = *(_OWORD *)(v20 + 144);
      *(_BYTE *)(v19 + 160) = *(_BYTE *)(v20 + 160);
      *(_OWORD *)(v19 + 128) = v168;
      *(_OWORD *)(v19 + 144) = v169;
      *(_BYTE *)(v19 + 161) = *(_BYTE *)(v20 + 161);
      *(_BYTE *)(v19 + 162) = *(_BYTE *)(v20 + 162);
      *(_BYTE *)(v19 + 163) = *(_BYTE *)(v20 + 163);
      v170 = (_OWORD *)(v19 + 168);
      v171 = (_OWORD *)(v20 + 168);
      v172 = *(_QWORD *)(v20 + 184);
      v173 = v172 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(v19 + 184) >> 1 == 0xFFFFFFFFLL)
      {
        if (v173 == 0x1FFFFFFFELL)
        {
          v174 = *(_OWORD *)(v20 + 184);
          *v170 = *v171;
          *(_OWORD *)(v19 + 184) = v174;
        }
        else
        {
          v176 = *(_QWORD *)(v20 + 168);
          v177 = *(_QWORD *)(v20 + 176);
          v178 = *(_QWORD *)(v20 + 192);
          outlined copy of AccessibilityImageLabel(v176, v177, *(_QWORD *)(v20 + 184));
          *(_QWORD *)(v19 + 168) = v176;
          *(_QWORD *)(v19 + 176) = v177;
          *(_QWORD *)(v19 + 184) = v172;
          *(_QWORD *)(v19 + 192) = v178;
        }
      }
      else if (v173 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(v19 + 168);
        v175 = *(_OWORD *)(v20 + 184);
        *v170 = *v171;
        *(_OWORD *)(v19 + 184) = v175;
      }
      else
      {
        v179 = *(_QWORD *)(v20 + 168);
        v180 = *(_QWORD *)(v20 + 176);
        v181 = *(_QWORD *)(v20 + 192);
        outlined copy of AccessibilityImageLabel(v179, v180, *(_QWORD *)(v20 + 184));
        v182 = *(_QWORD *)(v19 + 168);
        v183 = *(_QWORD *)(v19 + 176);
        v184 = *(_QWORD *)(v19 + 184);
        *(_QWORD *)(v19 + 168) = v179;
        *(_QWORD *)(v19 + 176) = v180;
        *(_QWORD *)(v19 + 184) = v172;
        *(_QWORD *)(v19 + 192) = v181;
        outlined consume of AccessibilityImageLabel(v182, v183, v184);
      }
      *(_QWORD *)(v19 + 200) = *(_QWORD *)(v20 + 200);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(v19 + 208) = *(_QWORD *)(v20 + 208);
      swift_retain();
      swift_release();
      *(_BYTE *)(v19 + 216) = *(_BYTE *)(v20 + 216);
      *(_BYTE *)(v19 + 217) = *(_BYTE *)(v20 + 217);
      v185 = *(_DWORD *)(v20 + 220);
      *(_BYTE *)(v19 + 224) = *(_BYTE *)(v20 + 224);
      *(_DWORD *)(v19 + 220) = v185;
      v186 = *(void **)(v19 + 232);
      v187 = *(void **)(v20 + 232);
      *(_QWORD *)(v19 + 232) = v187;
      v188 = v187;

      *(_WORD *)(v19 + 240) = *(_WORD *)(v20 + 240);
      *(_BYTE *)(v19 + 242) = *(_BYTE *)(v20 + 242);
    }
    v189 = (__int128 *)(v19 + 248);
    v190 = (__int128 *)(v20 + 248);
    v191 = *(_QWORD *)(v20 + 256);
    if (!*(_QWORD *)(v19 + 256))
    {
      if (v191)
      {
        *(_QWORD *)(v19 + 248) = *(_QWORD *)(v20 + 248);
        *(_QWORD *)(v19 + 256) = *(_QWORD *)(v20 + 256);
        v195 = *(void **)(v20 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v195 >= 2)
          v196 = v195;
        *(_QWORD *)(v19 + 264) = v195;
        v197 = *(_DWORD *)(v20 + 272);
        *(_BYTE *)(v19 + 276) = *(_BYTE *)(v20 + 276);
        *(_DWORD *)(v19 + 272) = v197;
        *(_BYTE *)(v19 + 277) = *(_BYTE *)(v20 + 277);
        *(_BYTE *)(v19 + 278) = *(_BYTE *)(v20 + 278);
        *(_QWORD *)(v19 + 280) = *(_QWORD *)(v20 + 280);
        *(_QWORD *)(v19 + 288) = *(_QWORD *)(v20 + 288);
        swift_retain();
        swift_retain();
      }
      else
      {
        v200 = *v190;
        v201 = *(_OWORD *)(v20 + 280);
        *(_OWORD *)(v19 + 264) = *(_OWORD *)(v20 + 264);
        *(_OWORD *)(v19 + 280) = v201;
        *v189 = v200;
      }
LABEL_108:
      v204 = (__int128 *)(v19 + 296);
      v205 = (__int128 *)(v20 + 296);
      v206 = *(_QWORD *)(v20 + 328);
      v207 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(_QWORD *)(v19 + 328) >> 2 == 0xFFFFFFFFLL)
      {
        if (v207 == 0x3FFFFFFFCLL)
        {
          v208 = *v205;
          v209 = *(_OWORD *)(v20 + 328);
          *(_OWORD *)(v19 + 312) = *(_OWORD *)(v20 + 312);
          *(_OWORD *)(v19 + 328) = v209;
          *v204 = v208;
          v210 = *(_OWORD *)(v20 + 344);
          v211 = *(_OWORD *)(v20 + 360);
          v212 = *(_OWORD *)(v20 + 376);
          *(_QWORD *)(v19 + 392) = *(_QWORD *)(v20 + 392);
          *(_OWORD *)(v19 + 360) = v211;
          *(_OWORD *)(v19 + 376) = v212;
          *(_OWORD *)(v19 + 344) = v210;
        }
        else
        {
          v218 = *(void **)(v20 + 296);
          v219 = *(_QWORD *)(v20 + 304);
          v355 = v5;
          v220 = *(_QWORD *)(v20 + 312);
          v221 = *(_QWORD *)(v20 + 320);
          v360 = v21;
          v223 = *(_QWORD *)(v20 + 336);
          v222 = *(_QWORD *)(v20 + 344);
          v224 = *(_QWORD *)(v20 + 352);
          v335 = *(_QWORD *)(v20 + 360);
          v338 = *(_QWORD *)(v20 + 368);
          __dstb = *(void **)(v20 + 376);
          v345 = *(_QWORD *)(v20 + 384);
          v351 = *(_QWORD *)(v20 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v218, v219, v220, v221, v206, v223, v222, v224, v335, v338, (uint64_t)__dstb, v345, v351);
          *(_QWORD *)(v19 + 296) = v218;
          *(_QWORD *)(v19 + 304) = v219;
          *(_QWORD *)(v19 + 312) = v220;
          *(_QWORD *)(v19 + 320) = v221;
          *(_QWORD *)(v19 + 328) = v206;
          *(_QWORD *)(v19 + 336) = v223;
          v21 = v360;
          *(_QWORD *)(v19 + 344) = v222;
          *(_QWORD *)(v19 + 352) = v224;
          *(_QWORD *)(v19 + 360) = v335;
          *(_QWORD *)(v19 + 368) = v338;
          *(_QWORD *)(v19 + 376) = __dstb;
          *(_QWORD *)(v19 + 384) = v345;
          v5 = v355;
          *(_QWORD *)(v19 + 392) = v351;
        }
      }
      else if (v207 == 0x3FFFFFFFCLL)
      {
        outlined destroy of PlatformItemList.Item.SystemItem(v19 + 296);
        v214 = *(_OWORD *)(v20 + 312);
        v213 = *(_OWORD *)(v20 + 328);
        *v204 = *v205;
        *(_OWORD *)(v19 + 312) = v214;
        *(_OWORD *)(v19 + 328) = v213;
        v216 = *(_OWORD *)(v20 + 360);
        v215 = *(_OWORD *)(v20 + 376);
        v217 = *(_OWORD *)(v20 + 344);
        *(_QWORD *)(v19 + 392) = *(_QWORD *)(v20 + 392);
        *(_OWORD *)(v19 + 360) = v216;
        *(_OWORD *)(v19 + 376) = v215;
        *(_OWORD *)(v19 + 344) = v217;
      }
      else
      {
        v225 = *(void **)(v20 + 296);
        v226 = *(_QWORD *)(v20 + 304);
        v356 = v5;
        v227 = *(_QWORD *)(v20 + 312);
        v228 = *(_QWORD *)(v20 + 320);
        v361 = v21;
        v229 = *(_QWORD *)(v20 + 336);
        v230 = *(_QWORD *)(v20 + 360);
        v336 = *(_QWORD *)(v20 + 352);
        v339 = *(_QWORD *)(v20 + 344);
        v231 = *(_QWORD *)(v20 + 368);
        __dstc = *(void **)(v20 + 376);
        v346 = *(_QWORD *)(v20 + 384);
        v352 = *(_QWORD *)(v20 + 392);
        outlined copy of PlatformItemList.Item.SystemItem(v225, v226, v227, v228, v206, v229, v339, v336, v230, v231, (uint64_t)__dstc, v346, v352);
        v232 = *(void **)(v19 + 296);
        v233 = *(_QWORD *)(v19 + 304);
        v234 = *(_QWORD *)(v19 + 312);
        v235 = *(_QWORD *)(v19 + 320);
        v236 = *(_QWORD *)(v19 + 328);
        v237 = *(_QWORD *)(v19 + 336);
        v238 = *(_QWORD *)(v19 + 344);
        v239 = *(_QWORD *)(v19 + 352);
        v240 = *(_OWORD *)(v19 + 360);
        v241 = *(_OWORD *)(v19 + 376);
        v242 = *(_QWORD *)(v19 + 392);
        *(_QWORD *)(v19 + 296) = v225;
        *(_QWORD *)(v19 + 304) = v226;
        *(_QWORD *)(v19 + 312) = v227;
        *(_QWORD *)(v19 + 320) = v228;
        *(_QWORD *)(v19 + 328) = v206;
        *(_QWORD *)(v19 + 336) = v229;
        v21 = v361;
        *(_QWORD *)(v19 + 344) = v339;
        *(_QWORD *)(v19 + 352) = v336;
        *(_QWORD *)(v19 + 360) = v230;
        *(_QWORD *)(v19 + 368) = v231;
        *(_QWORD *)(v19 + 376) = __dstc;
        *(_QWORD *)(v19 + 384) = v346;
        v5 = v356;
        *(_QWORD *)(v19 + 392) = v352;
        outlined consume of PlatformItemList.Item.SystemItem(v232, v233, v234, v235, v236, v237, v238, v239, v240, *((uint64_t *)&v240 + 1), v241, SBYTE8(v241), v242);
      }
      v243 = (_OWORD *)(v19 + 400);
      v244 = (_OWORD *)(v20 + 400);
      v245 = (_OWORD *)(v19 + 408);
      v246 = *(_QWORD *)(v19 + 408);
      v247 = (_OWORD *)(v20 + 408);
      v248 = *(_QWORD *)(v20 + 408);
      if (v246 == 1)
      {
        if (v248 == 1)
        {
          *v243 = *v244;
          v249 = *(_OWORD *)(v20 + 416);
          v250 = *(_OWORD *)(v20 + 432);
          v251 = *(_OWORD *)(v20 + 448);
          *(_BYTE *)(v19 + 464) = *(_BYTE *)(v20 + 464);
          *(_OWORD *)(v19 + 432) = v250;
          *(_OWORD *)(v19 + 448) = v251;
          *(_OWORD *)(v19 + 416) = v249;
          goto LABEL_150;
        }
        *(_BYTE *)(v19 + 400) = *(_BYTE *)(v20 + 400);
        *(_BYTE *)(v19 + 401) = *(_BYTE *)(v20 + 401);
        *(_BYTE *)(v19 + 402) = *(_BYTE *)(v20 + 402);
        *(_BYTE *)(v19 + 403) = *(_BYTE *)(v20 + 403);
        *(_BYTE *)(v19 + 404) = *(_BYTE *)(v20 + 404);
        v255 = *(_QWORD *)(v20 + 408);
        if (v255)
        {
          v256 = *(_QWORD *)(v20 + 416);
          *(_QWORD *)(v19 + 408) = v255;
          *(_QWORD *)(v19 + 416) = v256;
          swift_retain();
        }
        else
        {
          *v245 = *v247;
        }
        v259 = *(_QWORD *)(v20 + 424);
        if (v259)
        {
          v260 = *(_QWORD *)(v20 + 432);
          *(_QWORD *)(v19 + 424) = v259;
          *(_QWORD *)(v19 + 432) = v260;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v19 + 424) = *(_OWORD *)(v20 + 424);
        }
        v262 = *(_QWORD *)(v20 + 440);
        if (!v262)
        {
          *(_OWORD *)(v19 + 440) = *(_OWORD *)(v20 + 440);
LABEL_149:
          *(_QWORD *)(v19 + 456) = *(_QWORD *)(v20 + 456);
          *(_BYTE *)(v19 + 464) = *(_BYTE *)(v20 + 464);
LABEL_150:
          *(_QWORD *)(v19 + 472) = *(_QWORD *)(v20 + 472);
          *(_QWORD *)(v19 + 480) = *(_QWORD *)(v20 + 480);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v19 + 488) = *(_QWORD *)(v20 + 488);
          *(_BYTE *)(v19 + 496) = *(_BYTE *)(v20 + 496);
          v268 = *(_QWORD *)(v20 + 504);
          if (*(_QWORD *)(v19 + 504))
          {
            if (v268)
            {
              v269 = *(_QWORD *)(v20 + 512);
              *(_QWORD *)(v19 + 504) = v268;
              *(_QWORD *)(v19 + 512) = v269;
              swift_retain();
              swift_release();
              goto LABEL_157;
            }
            swift_release();
          }
          else if (v268)
          {
            v270 = *(_QWORD *)(v20 + 512);
            *(_QWORD *)(v19 + 504) = v268;
            *(_QWORD *)(v19 + 512) = v270;
            swift_retain();
            goto LABEL_157;
          }
          *(_OWORD *)(v19 + 504) = *(_OWORD *)(v20 + 504);
LABEL_157:
          *(_WORD *)(v19 + 520) = *(_WORD *)(v20 + 520);
          v271 = (_OWORD *)(v19 + 528);
          v272 = (_OWORD *)(v20 + 528);
          v273 = *(_QWORD *)(v20 + 528);
          if (*(_QWORD *)(v19 + 528))
          {
            if (v273)
            {
              *(_QWORD *)(v19 + 528) = v273;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v19 + 536) = *(_QWORD *)(v20 + 536);
              swift_retain();
              swift_release();
              *(_QWORD *)(v19 + 544) = *(_QWORD *)(v20 + 544);
              swift_retain();
              swift_release();
            }
            else
            {
              outlined destroy of PlatformItemList.Item.Accessibility(v19 + 528);
              v274 = *(_QWORD *)(v20 + 544);
              *v271 = *v272;
              *(_QWORD *)(v19 + 544) = v274;
            }
          }
          else if (v273)
          {
            *(_QWORD *)(v19 + 528) = v273;
            *(_QWORD *)(v19 + 536) = *(_QWORD *)(v20 + 536);
            *(_QWORD *)(v19 + 544) = *(_QWORD *)(v20 + 544);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            v275 = *v272;
            *(_QWORD *)(v19 + 544) = *(_QWORD *)(v20 + 544);
            *v271 = v275;
          }
          v276 = (__int128 *)(v19 + 552);
          v277 = (__int128 *)(v20 + 552);
          v278 = *(_QWORD *)(v20 + 552);
          if (*(_QWORD *)(v19 + 552) == 1)
          {
            if (v278 == 1)
            {
              v279 = *v277;
              *(_QWORD *)(v19 + 568) = *(_QWORD *)(v20 + 568);
              *v276 = v279;
              goto LABEL_180;
            }
            *(_QWORD *)(v19 + 552) = v278;
            v281 = *(_QWORD *)(v20 + 560);
            swift_retain();
            if (!v281)
            {
              *(_OWORD *)(v19 + 560) = *(_OWORD *)(v20 + 560);
              goto LABEL_180;
            }
            v282 = *(_QWORD *)(v20 + 568);
            *(_QWORD *)(v19 + 560) = v281;
            goto LABEL_177;
          }
          if (v278 == 1)
          {
            outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v19 + 552);
            v280 = *(_QWORD *)(v20 + 568);
            *v276 = *v277;
            *(_QWORD *)(v19 + 568) = v280;
            goto LABEL_180;
          }
          *(_QWORD *)(v19 + 552) = v278;
          swift_retain();
          swift_release();
          v283 = *(_QWORD *)(v20 + 560);
          if (*(_QWORD *)(v19 + 560))
          {
            if (v283)
            {
              v284 = *(_QWORD *)(v20 + 568);
              *(_QWORD *)(v19 + 560) = v283;
              *(_QWORD *)(v19 + 568) = v284;
              swift_retain();
              swift_release();
              goto LABEL_180;
            }
            swift_release();
          }
          else if (v283)
          {
            v282 = *(_QWORD *)(v20 + 568);
            *(_QWORD *)(v19 + 560) = v283;
LABEL_177:
            *(_QWORD *)(v19 + 568) = v282;
            swift_retain();
            goto LABEL_180;
          }
          *(_OWORD *)(v19 + 560) = *(_OWORD *)(v20 + 560);
LABEL_180:
          v285 = *(void **)(v19 + 576);
          v286 = *(void **)(v20 + 576);
          *(_QWORD *)(v19 + 576) = v286;
          v287 = v286;

          *(_QWORD *)(v19 + 584) = *(_QWORD *)(v20 + 584);
          *(_QWORD *)(v19 + 592) = *(_QWORD *)(v20 + 592);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v19 + 600) = *(_QWORD *)(v20 + 600);
          *(_QWORD *)(v19 + 608) = *(_QWORD *)(v20 + 608);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v19 + 616) = *(_QWORD *)(v20 + 616);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v19 + 624) = *(_QWORD *)(v20 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v19 + 632) = *(_BYTE *)(v20 + 632);
          *(_BYTE *)(v19 + 633) = *(_BYTE *)(v20 + 633);
          *(_BYTE *)(v19 + 634) = *(_BYTE *)(v20 + 634);
          v288 = v21[28];
          v289 = (_BYTE *)(v19 + v288);
          v290 = (_BYTE *)(v20 + v288);
          v291 = type metadata accessor for CommandOperation();
          v292 = *(_QWORD *)(v291 - 8);
          v293 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v292 + 48);
          v294 = v293(v289, 1, v291);
          v295 = v293(v290, 1, v291);
          if (v294)
          {
            if (!v295)
            {
              v362 = v21;
              v353 = v290;
              v357 = v5;
              *v289 = *v290;
              v298 = *(int *)(v291 + 20);
              v299 = &v289[v298];
              v300 = &v290[v298];
              v301 = *(_QWORD *)v300;
              v302 = *((_QWORD *)v300 + 1);
              v303 = v300[16];
              outlined copy of Text.Storage(*(_QWORD *)v300, v302, v303);
              *(_QWORD *)v299 = v301;
              *((_QWORD *)v299 + 1) = v302;
              v299[16] = v303;
              *((_QWORD *)v299 + 3) = *((_QWORD *)v300 + 3);
              v304 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v347 = &v299[v304];
              v305 = &v300[v304];
              v306 = type metadata accessor for UUID();
              v307 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v306 - 8) + 16);
              swift_bridgeObjectRetain();
              v307(v347, v305, v306);
              v308 = *(int *)(v291 + 24);
              v309 = &v289[v308];
              v310 = &v353[v308];
              if (*v310)
              {
                v311 = v310[1];
                *v309 = *v310;
                v309[1] = v311;
                swift_retain();
              }
              else
              {
                *(_OWORD *)v309 = *(_OWORD *)v310;
              }
              v5 = v357;
              v21 = v362;
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v292 + 56))(v289, 0, 1, v291);
              goto LABEL_193;
            }
            v296 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
          }
          else
          {
            if (!v295)
            {
              v363 = v21;
              v358 = v5;
              *v289 = *v290;
              v312 = *(int *)(v291 + 20);
              v313 = &v289[v312];
              v314 = &v290[v312];
              v315 = *(_QWORD *)&v290[v312];
              v316 = *(_QWORD *)&v290[v312 + 8];
              v317 = v290[v312 + 16];
              outlined copy of Text.Storage(v315, v316, v317);
              v318 = *(_QWORD *)v313;
              v319 = *((_QWORD *)v313 + 1);
              v320 = v313[16];
              *(_QWORD *)v313 = v315;
              *((_QWORD *)v313 + 1) = v316;
              v313[16] = v317;
              outlined consume of Text.Storage(v318, v319, v320);
              *((_QWORD *)v313 + 3) = *((_QWORD *)v314 + 3);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v321 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v322 = &v313[v321];
              v323 = &v314[v321];
              v324 = type metadata accessor for UUID();
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v324 - 8) + 24))(v322, v323, v324);
              v325 = *(int *)(v291 + 24);
              v326 = &v289[v325];
              v327 = &v290[v325];
              v328 = *(_QWORD *)&v289[v325];
              v329 = *(_QWORD *)&v290[v325];
              if (v328)
              {
                v5 = v358;
                v21 = v363;
                if (v329)
                {
                  v330 = *((_QWORD *)v327 + 1);
                  *v326 = v329;
                  v326[1] = v330;
                  swift_retain();
                  swift_release();
                  goto LABEL_193;
                }
                swift_release();
              }
              else
              {
                v5 = v358;
                v21 = v363;
                if (v329)
                {
                  v332 = *((_QWORD *)v327 + 1);
                  *v326 = v329;
                  v326[1] = v332;
                  swift_retain();
                  goto LABEL_193;
                }
              }
              *(_OWORD *)v326 = *(_OWORD *)v327;
              goto LABEL_193;
            }
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v289, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
            v296 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
          }
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v296);
          memcpy(v289, v290, *(_QWORD *)(*(_QWORD *)(v297 - 8) + 64));
LABEL_193:
          *(_BYTE *)(v19 + v21[29]) = *(_BYTE *)(v20 + v21[29]);
          *(_BYTE *)(v19 + v21[30]) = *(_BYTE *)(v20 + v21[30]);
          *(_BYTE *)(v19 + v21[31]) = *(_BYTE *)(v20 + v21[31]);
          *(_BYTE *)(v19 + v21[32]) = *(_BYTE *)(v20 + v21[32]);
          *(_QWORD *)(v19 + v21[33]) = *(_QWORD *)(v20 + v21[33]);
          swift_retain();
          swift_release();
          return v5;
        }
LABEL_146:
        v267 = *(_QWORD *)(v20 + 448);
        *(_QWORD *)(v19 + 440) = v262;
        *(_QWORD *)(v19 + 448) = v267;
        swift_retain();
        goto LABEL_149;
      }
      if (v248 == 1)
      {
        outlined destroy of PlatformItemList.Item.SelectionBehavior(v19 + 400);
        *v243 = *v244;
        v253 = *(_OWORD *)(v20 + 432);
        v252 = *(_OWORD *)(v20 + 448);
        v254 = *(_OWORD *)(v20 + 416);
        *(_BYTE *)(v19 + 464) = *(_BYTE *)(v20 + 464);
        *(_OWORD *)(v19 + 432) = v253;
        *(_OWORD *)(v19 + 448) = v252;
        *(_OWORD *)(v19 + 416) = v254;
        goto LABEL_150;
      }
      *(_BYTE *)(v19 + 400) = *(_BYTE *)v244;
      *(_BYTE *)(v19 + 401) = *(_BYTE *)(v20 + 401);
      *(_BYTE *)(v19 + 402) = *(_BYTE *)(v20 + 402);
      *(_BYTE *)(v19 + 403) = *(_BYTE *)(v20 + 403);
      *(_BYTE *)(v19 + 404) = *(_BYTE *)(v20 + 404);
      v257 = *(_QWORD *)(v20 + 408);
      if (v246)
      {
        if (v257)
        {
          v258 = *(_QWORD *)(v20 + 416);
          *(_QWORD *)(v19 + 408) = v257;
          *(_QWORD *)(v19 + 416) = v258;
          swift_retain();
          swift_release();
          goto LABEL_135;
        }
        swift_release();
      }
      else if (v257)
      {
        v261 = *(_QWORD *)(v20 + 416);
        *(_QWORD *)(v19 + 408) = v257;
        *(_QWORD *)(v19 + 416) = v261;
        swift_retain();
        goto LABEL_135;
      }
      *v245 = *v247;
LABEL_135:
      v263 = *(_QWORD *)(v20 + 424);
      if (*(_QWORD *)(v19 + 424))
      {
        if (v263)
        {
          v264 = *(_QWORD *)(v20 + 432);
          *(_QWORD *)(v19 + 424) = v263;
          *(_QWORD *)(v19 + 432) = v264;
          swift_retain();
          swift_release();
          goto LABEL_142;
        }
        swift_release();
      }
      else if (v263)
      {
        v265 = *(_QWORD *)(v20 + 432);
        *(_QWORD *)(v19 + 424) = v263;
        *(_QWORD *)(v19 + 432) = v265;
        swift_retain();
        goto LABEL_142;
      }
      *(_OWORD *)(v19 + 424) = *(_OWORD *)(v20 + 424);
LABEL_142:
      v262 = *(_QWORD *)(v20 + 440);
      if (*(_QWORD *)(v19 + 440))
      {
        if (v262)
        {
          v266 = *(_QWORD *)(v20 + 448);
          *(_QWORD *)(v19 + 440) = v262;
          *(_QWORD *)(v19 + 448) = v266;
          swift_retain();
          swift_release();
          goto LABEL_149;
        }
        swift_release();
      }
      else if (v262)
      {
        goto LABEL_146;
      }
      *(_OWORD *)(v19 + 440) = *(_OWORD *)(v20 + 440);
      goto LABEL_149;
    }
    if (!v191)
    {
      outlined destroy of Image.NamedResolved(v19 + 248);
      v199 = *(_OWORD *)(v20 + 264);
      v198 = *(_OWORD *)(v20 + 280);
      *v189 = *v190;
      *(_OWORD *)(v19 + 264) = v199;
      *(_OWORD *)(v19 + 280) = v198;
      goto LABEL_108;
    }
    *(_QWORD *)(v19 + 248) = *(_QWORD *)(v20 + 248);
    *(_QWORD *)(v19 + 256) = *(_QWORD *)(v20 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v192 = *(void **)(v19 + 264);
    v193 = *(void **)(v20 + 264);
    if ((unint64_t)v192 >= 2)
    {
      if ((unint64_t)v193 >= 2)
      {
        *(_QWORD *)(v19 + 264) = v193;
        v202 = v193;

        goto LABEL_107;
      }

      v193 = *(void **)(v20 + 264);
    }
    else if ((unint64_t)v193 >= 2)
    {
      *(_QWORD *)(v19 + 264) = v193;
      v194 = v193;
LABEL_107:
      v203 = *(_DWORD *)(v20 + 272);
      *(_BYTE *)(v19 + 276) = *(_BYTE *)(v20 + 276);
      *(_DWORD *)(v19 + 272) = v203;
      *(_BYTE *)(v19 + 277) = *(_BYTE *)(v20 + 277);
      *(_BYTE *)(v19 + 278) = *(_BYTE *)(v20 + 278);
      *(_QWORD *)(v19 + 280) = *(_QWORD *)(v20 + 280);
      swift_retain();
      swift_release();
      *(_QWORD *)(v19 + 288) = *(_QWORD *)(v20 + 288);
      swift_retain();
      swift_release();
      goto LABEL_108;
    }
    *(_QWORD *)(v19 + 264) = v193;
    goto LABEL_107;
  }
  if (v25)
  {
    v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_19:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v26);
    memcpy((void *)v19, (const void *)v20, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return v5;
  }
  v344 = v22;
  v28 = *(void **)v20;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v29 = *(void **)(v20 + 8);
  *(_QWORD *)(v19 + 8) = v29;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
  *(_BYTE *)(v19 + 56) = *(_BYTE *)(v20 + 56);
  v30 = (_QWORD *)(v19 + 64);
  v31 = (id *)(v20 + 64);
  v32 = *(_QWORD *)(v20 + 184);
  v33 = v28;
  v34 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v32 >> 1 != 4294967294)
  {
    v65 = *(unsigned __int8 *)(v20 + 72);
    if (v65 == 255)
    {
      v76 = *v31;
      *(_BYTE *)(v19 + 72) = *(_BYTE *)(v20 + 72);
      *v30 = v76;
    }
    else
    {
      v66 = *v31;
      outlined copy of GraphicsImage.Contents(*v31, *(_BYTE *)(v20 + 72));
      *(_QWORD *)(v19 + 64) = v66;
      *(_BYTE *)(v19 + 72) = v65;
    }
    *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
    *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 88);
    *(_BYTE *)(v19 + 104) = *(_BYTE *)(v20 + 104);
    v77 = *(_OWORD *)(v20 + 108);
    *(_BYTE *)(v19 + 124) = *(_BYTE *)(v20 + 124);
    *(_OWORD *)(v19 + 108) = v77;
    v78 = *(_OWORD *)(v20 + 128);
    v79 = *(_OWORD *)(v20 + 144);
    *(_BYTE *)(v19 + 160) = *(_BYTE *)(v20 + 160);
    *(_OWORD *)(v19 + 128) = v78;
    *(_OWORD *)(v19 + 144) = v79;
    *(_BYTE *)(v19 + 161) = *(_BYTE *)(v20 + 161);
    *(_BYTE *)(v19 + 162) = *(_BYTE *)(v20 + 162);
    *(_BYTE *)(v19 + 163) = *(_BYTE *)(v20 + 163);
    v80 = *(_QWORD *)(v20 + 184);
    if (v80 >> 1 == 0xFFFFFFFF)
    {
      v81 = *(_OWORD *)(v20 + 184);
      *(_OWORD *)(v19 + 168) = *(_OWORD *)(v20 + 168);
      *(_OWORD *)(v19 + 184) = v81;
    }
    else
    {
      v82 = *(_QWORD *)(v20 + 168);
      v83 = *(_QWORD *)(v20 + 176);
      v84 = *(_QWORD *)(v20 + 192);
      outlined copy of AccessibilityImageLabel(v82, v83, *(_QWORD *)(v20 + 184));
      *(_QWORD *)(v19 + 168) = v82;
      *(_QWORD *)(v19 + 176) = v83;
      *(_QWORD *)(v19 + 184) = v80;
      *(_QWORD *)(v19 + 192) = v84;
    }
    *(_QWORD *)(v19 + 200) = *(_QWORD *)(v20 + 200);
    *(_QWORD *)(v19 + 208) = *(_QWORD *)(v20 + 208);
    *(_BYTE *)(v19 + 216) = *(_BYTE *)(v20 + 216);
    *(_BYTE *)(v19 + 217) = *(_BYTE *)(v20 + 217);
    v85 = *(_DWORD *)(v20 + 220);
    *(_BYTE *)(v19 + 224) = *(_BYTE *)(v20 + 224);
    *(_DWORD *)(v19 + 220) = v85;
    v86 = *(void **)(v20 + 232);
    *(_QWORD *)(v19 + 232) = v86;
    *(_WORD *)(v19 + 240) = *(_WORD *)(v20 + 240);
    *(_BYTE *)(v19 + 242) = *(_BYTE *)(v20 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v87 = v86;
    if (*(_QWORD *)(v20 + 256))
      goto LABEL_22;
LABEL_37:
    v88 = *(_OWORD *)(v20 + 248);
    v89 = *(_OWORD *)(v20 + 280);
    *(_OWORD *)(v19 + 264) = *(_OWORD *)(v20 + 264);
    *(_OWORD *)(v19 + 280) = v89;
    *(_OWORD *)(v19 + 248) = v88;
    goto LABEL_38;
  }
  v35 = *(_OWORD *)v31;
  v36 = *(_OWORD *)(v20 + 80);
  v37 = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v19 + 96) = *(_OWORD *)(v20 + 96);
  *(_OWORD *)(v19 + 112) = v37;
  *(_OWORD *)v30 = v35;
  *(_OWORD *)(v19 + 80) = v36;
  v38 = *(_OWORD *)(v20 + 128);
  v39 = *(_OWORD *)(v20 + 144);
  v40 = *(_OWORD *)(v20 + 176);
  *(_OWORD *)(v19 + 160) = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v19 + 176) = v40;
  *(_OWORD *)(v19 + 128) = v38;
  *(_OWORD *)(v19 + 144) = v39;
  v41 = *(_OWORD *)(v20 + 192);
  v42 = *(_OWORD *)(v20 + 208);
  v43 = *(_OWORD *)(v20 + 224);
  *(_DWORD *)(v19 + 239) = *(_DWORD *)(v20 + 239);
  *(_OWORD *)(v19 + 208) = v42;
  *(_OWORD *)(v19 + 224) = v43;
  *(_OWORD *)(v19 + 192) = v41;
  if (!*(_QWORD *)(v20 + 256))
    goto LABEL_37;
LABEL_22:
  *(_QWORD *)(v19 + 248) = *(_QWORD *)(v20 + 248);
  *(_QWORD *)(v19 + 256) = *(_QWORD *)(v20 + 256);
  v44 = *(void **)(v20 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v44 >= 2)
    v45 = v44;
  *(_QWORD *)(v19 + 264) = v44;
  v46 = *(_DWORD *)(v20 + 272);
  *(_BYTE *)(v19 + 276) = *(_BYTE *)(v20 + 276);
  *(_DWORD *)(v19 + 272) = v46;
  *(_BYTE *)(v19 + 277) = *(_BYTE *)(v20 + 277);
  *(_BYTE *)(v19 + 278) = *(_BYTE *)(v20 + 278);
  *(_QWORD *)(v19 + 280) = *(_QWORD *)(v20 + 280);
  *(_QWORD *)(v19 + 288) = *(_QWORD *)(v20 + 288);
  swift_retain();
  swift_retain();
LABEL_38:
  v90 = *(_QWORD *)(v20 + 328);
  v354 = v5;
  v359 = v21;
  if (v90 >> 2 == 0xFFFFFFFF)
  {
    v91 = *(_OWORD *)(v20 + 296);
    v92 = *(_OWORD *)(v20 + 328);
    *(_OWORD *)(v19 + 312) = *(_OWORD *)(v20 + 312);
    *(_OWORD *)(v19 + 328) = v92;
    *(_OWORD *)(v19 + 296) = v91;
    v93 = *(_OWORD *)(v20 + 344);
    v94 = *(_OWORD *)(v20 + 360);
    v95 = *(_OWORD *)(v20 + 376);
    *(_QWORD *)(v19 + 392) = *(_QWORD *)(v20 + 392);
    *(_OWORD *)(v19 + 360) = v94;
    *(_OWORD *)(v19 + 376) = v95;
    *(_OWORD *)(v19 + 344) = v93;
  }
  else
  {
    v96 = *(void **)(v20 + 296);
    v97 = *(_QWORD *)(v20 + 304);
    v98 = *(_QWORD *)(v20 + 312);
    v99 = *(_QWORD *)(v20 + 320);
    v101 = *(_QWORD *)(v20 + 336);
    v100 = *(_QWORD *)(v20 + 344);
    v102 = *(_QWORD *)(v20 + 352);
    v333 = *(_QWORD *)(v20 + 360);
    v334 = *(_QWORD *)(v20 + 368);
    v337 = *(_QWORD *)(v20 + 376);
    __dsta = *(void **)(v20 + 384);
    v348 = *(_QWORD *)(v20 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v96, v97, v98, v99, v90, v101, v100, v102, v333, v334, v337, (char)__dsta, v348);
    *(_QWORD *)(v19 + 296) = v96;
    *(_QWORD *)(v19 + 304) = v97;
    *(_QWORD *)(v19 + 312) = v98;
    *(_QWORD *)(v19 + 320) = v99;
    *(_QWORD *)(v19 + 328) = v90;
    *(_QWORD *)(v19 + 336) = v101;
    *(_QWORD *)(v19 + 344) = v100;
    *(_QWORD *)(v19 + 352) = v102;
    *(_QWORD *)(v19 + 360) = v333;
    *(_QWORD *)(v19 + 368) = v334;
    *(_QWORD *)(v19 + 376) = v337;
    *(_QWORD *)(v19 + 384) = __dsta;
    *(_QWORD *)(v19 + 392) = v348;
  }
  if (*(_QWORD *)(v20 + 408) == 1)
  {
    *(_OWORD *)(v19 + 400) = *(_OWORD *)(v20 + 400);
    v103 = *(_OWORD *)(v20 + 416);
    v104 = *(_OWORD *)(v20 + 432);
    v105 = *(_OWORD *)(v20 + 448);
    *(_BYTE *)(v19 + 464) = *(_BYTE *)(v20 + 464);
    *(_OWORD *)(v19 + 432) = v104;
    *(_OWORD *)(v19 + 448) = v105;
    *(_OWORD *)(v19 + 416) = v103;
    goto LABEL_51;
  }
  *(_BYTE *)(v19 + 400) = *(_BYTE *)(v20 + 400);
  *(_BYTE *)(v19 + 401) = *(_BYTE *)(v20 + 401);
  *(_BYTE *)(v19 + 402) = *(_BYTE *)(v20 + 402);
  *(_BYTE *)(v19 + 403) = *(_BYTE *)(v20 + 403);
  *(_BYTE *)(v19 + 404) = *(_BYTE *)(v20 + 404);
  v106 = *(_QWORD *)(v20 + 408);
  if (v106)
  {
    v107 = *(_QWORD *)(v20 + 416);
    *(_QWORD *)(v19 + 408) = v106;
    *(_QWORD *)(v19 + 416) = v107;
    swift_retain();
    v108 = *(_QWORD *)(v20 + 424);
    if (v108)
      goto LABEL_45;
LABEL_48:
    *(_OWORD *)(v19 + 424) = *(_OWORD *)(v20 + 424);
    v110 = *(_QWORD *)(v20 + 440);
    if (v110)
      goto LABEL_46;
LABEL_49:
    *(_OWORD *)(v19 + 440) = *(_OWORD *)(v20 + 440);
    goto LABEL_50;
  }
  *(_OWORD *)(v19 + 408) = *(_OWORD *)(v20 + 408);
  v108 = *(_QWORD *)(v20 + 424);
  if (!v108)
    goto LABEL_48;
LABEL_45:
  v109 = *(_QWORD *)(v20 + 432);
  *(_QWORD *)(v19 + 424) = v108;
  *(_QWORD *)(v19 + 432) = v109;
  swift_retain();
  v110 = *(_QWORD *)(v20 + 440);
  if (!v110)
    goto LABEL_49;
LABEL_46:
  v111 = *(_QWORD *)(v20 + 448);
  *(_QWORD *)(v19 + 440) = v110;
  *(_QWORD *)(v19 + 448) = v111;
  swift_retain();
LABEL_50:
  *(_QWORD *)(v19 + 456) = *(_QWORD *)(v20 + 456);
  *(_BYTE *)(v19 + 464) = *(_BYTE *)(v20 + 464);
LABEL_51:
  *(_QWORD *)(v19 + 472) = *(_QWORD *)(v20 + 472);
  *(_QWORD *)(v19 + 480) = *(_QWORD *)(v20 + 480);
  *(_QWORD *)(v19 + 488) = *(_QWORD *)(v20 + 488);
  *(_BYTE *)(v19 + 496) = *(_BYTE *)(v20 + 496);
  v112 = *(_QWORD *)(v20 + 504);
  swift_bridgeObjectRetain();
  if (v112)
  {
    v113 = *(_QWORD *)(v20 + 512);
    *(_QWORD *)(v19 + 504) = v112;
    *(_QWORD *)(v19 + 512) = v113;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v19 + 504) = *(_OWORD *)(v20 + 504);
  }
  *(_WORD *)(v19 + 520) = *(_WORD *)(v20 + 520);
  v114 = *(_QWORD *)(v20 + 528);
  if (v114)
  {
    *(_QWORD *)(v19 + 528) = v114;
    *(_QWORD *)(v19 + 536) = *(_QWORD *)(v20 + 536);
    *(_QWORD *)(v19 + 544) = *(_QWORD *)(v20 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v115 = *(_OWORD *)(v20 + 528);
    *(_QWORD *)(v19 + 544) = *(_QWORD *)(v20 + 544);
    *(_OWORD *)(v19 + 528) = v115;
  }
  v116 = *(_QWORD *)(v20 + 552);
  if (v116 == 1)
  {
    v117 = (_OWORD *)(v19 + 552);
    v118 = *(_OWORD *)(v20 + 552);
    *(_QWORD *)(v19 + 568) = *(_QWORD *)(v20 + 568);
LABEL_62:
    *v117 = v118;
    goto LABEL_63;
  }
  *(_QWORD *)(v19 + 552) = v116;
  v119 = *(_QWORD *)(v20 + 560);
  swift_retain();
  if (!v119)
  {
    v117 = (_OWORD *)(v19 + 560);
    v118 = *(_OWORD *)(v20 + 560);
    goto LABEL_62;
  }
  v120 = *(_QWORD *)(v20 + 568);
  *(_QWORD *)(v19 + 560) = v119;
  *(_QWORD *)(v19 + 568) = v120;
  swift_retain();
LABEL_63:
  v121 = *(void **)(v20 + 576);
  *(_QWORD *)(v19 + 576) = v121;
  *(_QWORD *)(v19 + 584) = *(_QWORD *)(v20 + 584);
  *(_QWORD *)(v19 + 592) = *(_QWORD *)(v20 + 592);
  *(_QWORD *)(v19 + 600) = *(_QWORD *)(v20 + 600);
  *(_QWORD *)(v19 + 608) = *(_QWORD *)(v20 + 608);
  *(_QWORD *)(v19 + 616) = *(_QWORD *)(v20 + 616);
  *(_QWORD *)(v19 + 624) = *(_QWORD *)(v20 + 624);
  *(_BYTE *)(v19 + 632) = *(_BYTE *)(v20 + 632);
  *(_BYTE *)(v19 + 633) = *(_BYTE *)(v20 + 633);
  *(_BYTE *)(v19 + 634) = *(_BYTE *)(v20 + 634);
  v122 = v359[28];
  __dst = (_BYTE *)(v19 + v122);
  v123 = (_BYTE *)(v20 + v122);
  v124 = type metadata accessor for CommandOperation();
  v125 = *(_QWORD *)(v124 - 8);
  v349 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v125 + 48);
  v126 = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v349(v123, 1, v124))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v123, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    v5 = v354;
    v128 = v359;
  }
  else
  {
    v350 = v125;
    *__dst = *v123;
    v129 = v124;
    v130 = *(int *)(v124 + 20);
    v131 = &__dst[v130];
    v132 = &v123[v130];
    v133 = *(_QWORD *)&v123[v130];
    v134 = *(_QWORD *)&v123[v130 + 8];
    v135 = v123[v130 + 16];
    outlined copy of Text.Storage(v133, v134, v135);
    *(_QWORD *)v131 = v133;
    *((_QWORD *)v131 + 1) = v134;
    v131[16] = v135;
    *((_QWORD *)v131 + 3) = *((_QWORD *)v132 + 3);
    v136 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v137 = &v131[v136];
    v138 = &v132[v136];
    v139 = type metadata accessor for UUID();
    v140 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v139 - 8) + 16);
    swift_bridgeObjectRetain();
    v140(v137, v138, v139);
    v141 = *(int *)(v129 + 24);
    v142 = &__dst[v141];
    v143 = &v123[v141];
    if (*v143)
    {
      v144 = v143[1];
      *v142 = *v143;
      v142[1] = v144;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v142 = *(_OWORD *)v143;
    }
    v5 = v354;
    v128 = v359;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v350 + 56))(__dst, 0, 1, v129);
  }
  *(_BYTE *)(v19 + v128[29]) = *(_BYTE *)(v20 + v128[29]);
  *(_BYTE *)(v19 + v128[30]) = *(_BYTE *)(v20 + v128[30]);
  *(_BYTE *)(v19 + v128[31]) = *(_BYTE *)(v20 + v128[31]);
  *(_BYTE *)(v19 + v128[32]) = *(_BYTE *)(v20 + v128[32]);
  *(_QWORD *)(v19 + v128[33]) = *(_QWORD *)(v20 + v128[33]);
  v151 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v344 + 56);
  swift_retain();
  v151(v19, 0, 1, v128);
  return v5;
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties.Actions(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 <= 1)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)a1, v2 != 0);
  return a1;
}

uint64_t initializeWithTake for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = (_OWORD *)(a1 + v5);
  v7 = (_OWORD *)(a2 + v5);
  v8 = (int *)type metadata accessor for PlatformItemList.Item();
  v9 = *((_QWORD *)v8 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = v7[1];
    *v6 = *v7;
    v6[1] = v11;
    *((_BYTE *)v6 + 32) = *((_BYTE *)v7 + 32);
    v12 = *((_QWORD *)v7 + 6);
    *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
    *((_QWORD *)v6 + 6) = v12;
    *((_BYTE *)v6 + 56) = *((_BYTE *)v7 + 56);
    v13 = v7[13];
    v6[12] = v7[12];
    v6[13] = v13;
    v6[14] = v7[14];
    *(_DWORD *)((char *)v6 + 239) = *(_DWORD *)((char *)v7 + 239);
    v14 = v7[9];
    v6[8] = v7[8];
    v6[9] = v14;
    v15 = v7[11];
    v6[10] = v7[10];
    v6[11] = v15;
    v16 = v7[5];
    v6[4] = v7[4];
    v6[5] = v16;
    v17 = v7[7];
    v6[6] = v7[6];
    v6[7] = v17;
    *(_OWORD *)((char *)v6 + 248) = *(_OWORD *)((char *)v7 + 248);
    v18 = *(_OWORD *)((char *)v7 + 280);
    *(_OWORD *)((char *)v6 + 264) = *(_OWORD *)((char *)v7 + 264);
    *(_OWORD *)((char *)v6 + 280) = v18;
    v19 = *(_OWORD *)((char *)v7 + 376);
    *(_OWORD *)((char *)v6 + 360) = *(_OWORD *)((char *)v7 + 360);
    *(_OWORD *)((char *)v6 + 376) = v19;
    *((_QWORD *)v6 + 49) = *((_QWORD *)v7 + 49);
    v20 = *(_OWORD *)((char *)v7 + 312);
    *(_OWORD *)((char *)v6 + 296) = *(_OWORD *)((char *)v7 + 296);
    *(_OWORD *)((char *)v6 + 312) = v20;
    v21 = *(_OWORD *)((char *)v7 + 344);
    *(_OWORD *)((char *)v6 + 328) = *(_OWORD *)((char *)v7 + 328);
    *(_OWORD *)((char *)v6 + 344) = v21;
    v22 = v7[28];
    v6[27] = v7[27];
    v6[28] = v22;
    *((_BYTE *)v6 + 464) = *((_BYTE *)v7 + 464);
    v23 = v7[26];
    v6[25] = v7[25];
    v6[26] = v23;
    *(_OWORD *)((char *)v6 + 472) = *(_OWORD *)((char *)v7 + 472);
    *(_OWORD *)((char *)v6 + 481) = *(_OWORD *)((char *)v7 + 481);
    v24 = *((_QWORD *)v7 + 63);
    if (v24)
    {
      v25 = *((_QWORD *)v7 + 64);
      *((_QWORD *)v6 + 63) = v24;
      *((_QWORD *)v6 + 64) = v25;
    }
    else
    {
      *(_OWORD *)((char *)v6 + 504) = *(_OWORD *)((char *)v7 + 504);
    }
    *((_WORD *)v6 + 260) = *((_WORD *)v7 + 260);
    v6[33] = v7[33];
    *((_QWORD *)v6 + 68) = *((_QWORD *)v7 + 68);
    *((_QWORD *)v6 + 71) = *((_QWORD *)v7 + 71);
    *(_OWORD *)((char *)v6 + 552) = *(_OWORD *)((char *)v7 + 552);
    *((_QWORD *)v6 + 72) = *((_QWORD *)v7 + 72);
    *(_OWORD *)((char *)v6 + 584) = *(_OWORD *)((char *)v7 + 584);
    *(_OWORD *)((char *)v6 + 600) = *(_OWORD *)((char *)v7 + 600);
    *((_QWORD *)v6 + 77) = *((_QWORD *)v7 + 77);
    *((_QWORD *)v6 + 78) = *((_QWORD *)v7 + 78);
    *((_BYTE *)v6 + 632) = *((_BYTE *)v7 + 632);
    *(_WORD *)((char *)v6 + 633) = *(_WORD *)((char *)v7 + 633);
    v26 = v8[28];
    v27 = (char *)v6 + v26;
    v28 = (char *)v7 + v26;
    v29 = type metadata accessor for CommandOperation();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v46 = v9;
      *v27 = *v28;
      v32 = *(int *)(v29 + 20);
      v33 = &v27[v32];
      v34 = &v28[v32];
      v35 = *(_OWORD *)&v28[v32 + 16];
      *v33 = *(_OWORD *)&v28[v32];
      v33[1] = v35;
      v36 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v45 = (char *)v33 + v36;
      v37 = &v34[v36];
      v38 = type metadata accessor for UUID();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v45, v37, v38);
      v39 = *(int *)(v29 + 24);
      v40 = &v27[v39];
      v41 = (uint64_t *)&v28[v39];
      v42 = *v41;
      if (*v41)
      {
        v43 = v41[1];
        *v40 = v42;
        v40[1] = v43;
      }
      else
      {
        *(_OWORD *)v40 = *(_OWORD *)v41;
      }
      v9 = v46;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    *((_BYTE *)v6 + v8[29]) = *((_BYTE *)v7 + v8[29]);
    *((_BYTE *)v6 + v8[30]) = *((_BYTE *)v7 + v8[30]);
    *((_BYTE *)v6 + v8[31]) = *((_BYTE *)v7 + v8[31]);
    *((_BYTE *)v6 + v8[32]) = *((_BYTE *)v7 + v8[32]);
    *(_QWORD *)((char *)v6 + v8[33]) = *(_QWORD *)((char *)v7 + v8[33]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithTake for ToolbarStorage.NavigationProperties(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _BYTE *v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  void *v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  __int128 v79;
  _OWORD *v80;
  _OWORD *v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(_BYTE *, uint64_t, uint64_t);
  int v125;
  int v126;
  uint64_t (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  _BYTE *v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  swift_release();
  v6 = (_QWORD *)(a2 + 8);
  v7 = *((unsigned __int8 *)v5 + 16);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 254)
    goto LABEL_7;
  if (v8 == 254)
  {
    outlined destroy of ToolbarStorage.NavigationProperties.Actions((uint64_t)(v5 + 1));
LABEL_7:
    v5[1] = *v6;
    *((_BYTE *)v5 + 16) = *(_BYTE *)(a2 + 16);
    goto LABEL_8;
  }
  if (v7 == 255)
    goto LABEL_7;
  if (v8 == 255)
  {
    outlined destroy of PlatformItemCollection((uint64_t)(v5 + 1));
    goto LABEL_7;
  }
  v64 = v5[1];
  v5[1] = *v6;
  *((_BYTE *)v5 + 16) = v8 & 1;
  outlined consume of PlatformItemCollection.Storage(v64, v7 & 1);
LABEL_8:
  v9 = *(int *)(a3 + 24);
  v10 = (uint64_t)v5 + v9;
  v11 = a2 + v9;
  v12 = (int *)type metadata accessor for PlatformItemList.Item();
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_13;
    }
    v34 = *(void **)v10;
    *(_QWORD *)v10 = *(_QWORD *)v11;

    v35 = *(void **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);

    v36 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 24) = v36;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v10 + 32) = *(_BYTE *)(v11 + 32);
    v37 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 48) = v37;
    swift_release();
    *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
    v38 = (_OWORD *)(v10 + 64);
    v39 = (_OWORD *)(v11 + 64);
    if (*(_QWORD *)(v10 + 184) >> 1 == 4294967294)
      goto LABEL_19;
    if (*(_QWORD *)(v11 + 184) >> 1 == 4294967294)
    {
      outlined destroy of Image.Resolved(v10 + 64);
LABEL_19:
      v40 = *(_OWORD *)(v11 + 208);
      *(_OWORD *)(v10 + 192) = *(_OWORD *)(v11 + 192);
      *(_OWORD *)(v10 + 208) = v40;
      *(_OWORD *)(v10 + 224) = *(_OWORD *)(v11 + 224);
      *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
      v41 = *(_OWORD *)(v11 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
      *(_OWORD *)(v10 + 144) = v41;
      v42 = *(_OWORD *)(v11 + 176);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
      *(_OWORD *)(v10 + 176) = v42;
      v43 = *(_OWORD *)(v11 + 80);
      *v38 = *v39;
      *(_OWORD *)(v10 + 80) = v43;
      v44 = *(_OWORD *)(v11 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
      *(_OWORD *)(v10 + 112) = v44;
      goto LABEL_40;
    }
    v65 = *(unsigned __int8 *)(v10 + 72);
    if (v65 != 255)
    {
      v66 = *(unsigned __int8 *)(v11 + 72);
      if (v66 != 255)
      {
        v67 = *(void **)(v10 + 64);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)v39;
        *(_BYTE *)(v10 + 72) = v66;
        outlined consume of GraphicsImage.Contents(v67, v65);
        goto LABEL_34;
      }
      outlined destroy of GraphicsImage.Contents(v10 + 64);
    }
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 72);
LABEL_34:
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(_QWORD *)(v10 + 96) = *(_QWORD *)(v11 + 96);
    *(_BYTE *)(v10 + 104) = *(_BYTE *)(v11 + 104);
    *(_OWORD *)(v10 + 108) = *(_OWORD *)(v11 + 108);
    *(_BYTE *)(v10 + 124) = *(_BYTE *)(v11 + 124);
    v68 = *(_OWORD *)(v11 + 144);
    *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
    *(_OWORD *)(v10 + 144) = v68;
    *(_BYTE *)(v10 + 160) = *(_BYTE *)(v11 + 160);
    *(_BYTE *)(v10 + 161) = *(_BYTE *)(v11 + 161);
    v69 = *(_QWORD *)(v10 + 184);
    *(_WORD *)(v10 + 162) = *(_WORD *)(v11 + 162);
    if (v69 >> 1 != 0xFFFFFFFF)
    {
      v70 = *(_QWORD *)(v11 + 184);
      if (v70 >> 1 != 0xFFFFFFFF)
      {
        v72 = *(_QWORD *)(v11 + 192);
        v73 = *(_QWORD *)(v10 + 168);
        v74 = *(_QWORD *)(v10 + 176);
        *(_OWORD *)(v10 + 168) = *(_OWORD *)(v11 + 168);
        *(_QWORD *)(v10 + 184) = v70;
        *(_QWORD *)(v10 + 192) = v72;
        outlined consume of AccessibilityImageLabel(v73, v74, v69);
        goto LABEL_39;
      }
      outlined destroy of AccessibilityImageLabel(v10 + 168);
    }
    v71 = *(_OWORD *)(v11 + 184);
    *(_OWORD *)(v10 + 168) = *(_OWORD *)(v11 + 168);
    *(_OWORD *)(v10 + 184) = v71;
LABEL_39:
    *(_QWORD *)(v10 + 200) = *(_QWORD *)(v11 + 200);
    swift_unknownObjectRelease();
    *(_QWORD *)(v10 + 208) = *(_QWORD *)(v11 + 208);
    swift_release();
    *(_BYTE *)(v10 + 216) = *(_BYTE *)(v11 + 216);
    *(_BYTE *)(v10 + 217) = *(_BYTE *)(v11 + 217);
    *(_DWORD *)(v10 + 220) = *(_DWORD *)(v11 + 220);
    *(_BYTE *)(v10 + 224) = *(_BYTE *)(v11 + 224);
    v75 = *(void **)(v10 + 232);
    *(_QWORD *)(v10 + 232) = *(_QWORD *)(v11 + 232);

    *(_WORD *)(v10 + 240) = *(_WORD *)(v11 + 240);
    *(_BYTE *)(v10 + 242) = *(_BYTE *)(v11 + 242);
LABEL_40:
    if (*(_QWORD *)(v10 + 256))
    {
      v76 = *(_QWORD *)(v11 + 256);
      if (v76)
      {
        *(_QWORD *)(v10 + 248) = *(_QWORD *)(v11 + 248);
        *(_QWORD *)(v10 + 256) = v76;
        swift_bridgeObjectRelease();
        v77 = *(void **)(v10 + 264);
        v78 = *(_QWORD *)(v11 + 264);
        if ((unint64_t)v77 >= 2)
        {
          if (v78 >= 2)
          {
            *(_QWORD *)(v10 + 264) = v78;

          }
          else
          {

            *(_QWORD *)(v10 + 264) = *(_QWORD *)(v11 + 264);
          }
        }
        else
        {
          *(_QWORD *)(v10 + 264) = v78;
        }
        *(_DWORD *)(v10 + 272) = *(_DWORD *)(v11 + 272);
        *(_WORD *)(v10 + 276) = *(_WORD *)(v11 + 276);
        *(_BYTE *)(v10 + 278) = *(_BYTE *)(v11 + 278);
        *(_QWORD *)(v10 + 280) = *(_QWORD *)(v11 + 280);
        swift_release();
        *(_QWORD *)(v10 + 288) = *(_QWORD *)(v11 + 288);
        swift_release();
LABEL_50:
        v80 = (_OWORD *)(v10 + 296);
        v81 = (_OWORD *)(v11 + 296);
        v82 = *(_QWORD *)(v10 + 328);
        if (v82 >> 2 != 0xFFFFFFFF)
        {
          v83 = *(_QWORD *)(v11 + 328);
          if (v83 >> 2 != 0xFFFFFFFF)
          {
            v87 = *(void **)(v10 + 296);
            v88 = *(_QWORD *)(v10 + 304);
            v89 = *(_QWORD *)(v10 + 312);
            v90 = *(_QWORD *)(v10 + 320);
            v91 = *(_QWORD *)(v10 + 336);
            v92 = *(_QWORD *)(v10 + 344);
            v93 = *(_QWORD *)(v10 + 352);
            v94 = *(_OWORD *)(v10 + 360);
            v95 = *(_OWORD *)(v10 + 376);
            v96 = *(_QWORD *)(v10 + 392);
            *v80 = *v81;
            *(_OWORD *)(v10 + 312) = *(_OWORD *)(v11 + 312);
            *(_QWORD *)(v10 + 328) = v83;
            v97 = *(_OWORD *)(v11 + 352);
            *(_OWORD *)(v10 + 336) = *(_OWORD *)(v11 + 336);
            *(_OWORD *)(v10 + 352) = v97;
            v98 = *(_OWORD *)(v11 + 384);
            *(_OWORD *)(v10 + 368) = *(_OWORD *)(v11 + 368);
            *(_OWORD *)(v10 + 384) = v98;
            outlined consume of PlatformItemList.Item.SystemItem(v87, v88, v89, v90, v82, v91, v92, v93, v94, *((uint64_t *)&v94 + 1), v95, SBYTE8(v95), v96);
LABEL_55:
            v99 = (_OWORD *)(v11 + 400);
            v100 = *(_QWORD *)(v10 + 408);
            if (v100 == 1)
            {
LABEL_58:
              v102 = *(_OWORD *)(v11 + 448);
              *(_OWORD *)(v10 + 432) = *(_OWORD *)(v11 + 432);
              *(_OWORD *)(v10 + 448) = v102;
              *(_BYTE *)(v10 + 464) = *(_BYTE *)(v11 + 464);
              v103 = *(_OWORD *)(v11 + 416);
              *(_OWORD *)(v10 + 400) = *v99;
              *(_OWORD *)(v10 + 416) = v103;
              goto LABEL_81;
            }
            v101 = *(_QWORD *)(v11 + 408);
            if (v101 == 1)
            {
              outlined destroy of PlatformItemList.Item.SelectionBehavior(v10 + 400);
              goto LABEL_58;
            }
            *(_BYTE *)(v10 + 400) = *(_BYTE *)v99;
            *(_BYTE *)(v10 + 401) = *(_BYTE *)(v11 + 401);
            *(_BYTE *)(v10 + 402) = *(_BYTE *)(v11 + 402);
            *(_BYTE *)(v10 + 403) = *(_BYTE *)(v11 + 403);
            *(_BYTE *)(v10 + 404) = *(_BYTE *)(v11 + 404);
            if (v100)
            {
              if (v101)
              {
                v104 = *(_QWORD *)(v11 + 416);
                *(_QWORD *)(v10 + 408) = v101;
                *(_QWORD *)(v10 + 416) = v104;
                swift_release();
                goto LABEL_66;
              }
              swift_release();
            }
            else if (v101)
            {
              v105 = *(_QWORD *)(v11 + 416);
              *(_QWORD *)(v10 + 408) = v101;
              *(_QWORD *)(v10 + 416) = v105;
              goto LABEL_66;
            }
            *(_OWORD *)(v10 + 408) = *(_OWORD *)(v11 + 408);
LABEL_66:
            v106 = *(_QWORD *)(v11 + 424);
            if (*(_QWORD *)(v10 + 424))
            {
              if (v106)
              {
                v107 = *(_QWORD *)(v11 + 432);
                *(_QWORD *)(v10 + 424) = v106;
                *(_QWORD *)(v10 + 432) = v107;
                swift_release();
                goto LABEL_73;
              }
              swift_release();
            }
            else if (v106)
            {
              v108 = *(_QWORD *)(v11 + 432);
              *(_QWORD *)(v10 + 424) = v106;
              *(_QWORD *)(v10 + 432) = v108;
              goto LABEL_73;
            }
            *(_OWORD *)(v10 + 424) = *(_OWORD *)(v11 + 424);
LABEL_73:
            v109 = *(_QWORD *)(v11 + 440);
            if (*(_QWORD *)(v10 + 440))
            {
              if (v109)
              {
                v110 = *(_QWORD *)(v11 + 448);
                *(_QWORD *)(v10 + 440) = v109;
                *(_QWORD *)(v10 + 448) = v110;
                swift_release();
LABEL_80:
                *(_QWORD *)(v10 + 456) = *(_QWORD *)(v11 + 456);
                *(_BYTE *)(v10 + 464) = *(_BYTE *)(v11 + 464);
LABEL_81:
                v112 = *(_QWORD *)(v11 + 480);
                *(_QWORD *)(v10 + 472) = *(_QWORD *)(v11 + 472);
                *(_QWORD *)(v10 + 480) = v112;
                swift_bridgeObjectRelease();
                *(_QWORD *)(v10 + 488) = *(_QWORD *)(v11 + 488);
                *(_BYTE *)(v10 + 496) = *(_BYTE *)(v11 + 496);
                v113 = *(_QWORD *)(v11 + 504);
                if (*(_QWORD *)(v10 + 504))
                {
                  if (v113)
                  {
                    v114 = *(_QWORD *)(v11 + 512);
                    *(_QWORD *)(v10 + 504) = v113;
                    *(_QWORD *)(v10 + 512) = v114;
                    swift_release();
                    goto LABEL_88;
                  }
                  swift_release();
                }
                else if (v113)
                {
                  v115 = *(_QWORD *)(v11 + 512);
                  *(_QWORD *)(v10 + 504) = v113;
                  *(_QWORD *)(v10 + 512) = v115;
                  goto LABEL_88;
                }
                *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
LABEL_88:
                *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
                if (*(_QWORD *)(v10 + 528))
                {
                  v116 = *(_QWORD *)(v11 + 528);
                  if (v116)
                  {
                    *(_QWORD *)(v10 + 528) = v116;
                    swift_bridgeObjectRelease();
                    *(_QWORD *)(v10 + 536) = *(_QWORD *)(v11 + 536);
                    swift_release();
                    *(_QWORD *)(v10 + 544) = *(_QWORD *)(v11 + 544);
                    swift_release();
                    goto LABEL_93;
                  }
                  outlined destroy of PlatformItemList.Item.Accessibility(v10 + 528);
                }
                *(_OWORD *)(v10 + 528) = *(_OWORD *)(v11 + 528);
                *(_QWORD *)(v10 + 544) = *(_QWORD *)(v11 + 544);
LABEL_93:
                if (*(_QWORD *)(v10 + 552) == 1)
                {
LABEL_96:
                  *(_OWORD *)(v10 + 552) = *(_OWORD *)(v11 + 552);
                  *(_QWORD *)(v10 + 568) = *(_QWORD *)(v11 + 568);
                  goto LABEL_97;
                }
                v117 = *(_QWORD *)(v11 + 552);
                if (v117 == 1)
                {
                  outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v10 + 552);
                  goto LABEL_96;
                }
                *(_QWORD *)(v10 + 552) = v117;
                swift_release();
                v129 = *(_QWORD *)(v11 + 560);
                if (*(_QWORD *)(v10 + 560))
                {
                  if (v129)
                  {
                    v130 = *(_QWORD *)(v11 + 568);
                    *(_QWORD *)(v10 + 560) = v129;
                    *(_QWORD *)(v10 + 568) = v130;
                    swift_release();
                    goto LABEL_97;
                  }
                  swift_release();
                }
                else if (v129)
                {
                  v160 = *(_QWORD *)(v11 + 568);
                  *(_QWORD *)(v10 + 560) = v129;
                  *(_QWORD *)(v10 + 568) = v160;
                  goto LABEL_97;
                }
                *(_OWORD *)(v10 + 560) = *(_OWORD *)(v11 + 560);
LABEL_97:
                v118 = *(void **)(v10 + 576);
                *(_QWORD *)(v10 + 576) = *(_QWORD *)(v11 + 576);

                *(_QWORD *)(v10 + 584) = *(_QWORD *)(v11 + 584);
                *(_QWORD *)(v10 + 592) = *(_QWORD *)(v11 + 592);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v10 + 600) = *(_QWORD *)(v11 + 600);
                *(_QWORD *)(v10 + 608) = *(_QWORD *)(v11 + 608);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v10 + 616) = *(_QWORD *)(v11 + 616);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v10 + 624) = *(_QWORD *)(v11 + 624);
                swift_bridgeObjectRelease();
                *(_BYTE *)(v10 + 632) = *(_BYTE *)(v11 + 632);
                *(_WORD *)(v10 + 633) = *(_WORD *)(v11 + 633);
                v119 = v12[28];
                v120 = (_BYTE *)(v10 + v119);
                v121 = (_BYTE *)(v11 + v119);
                v122 = type metadata accessor for CommandOperation();
                v123 = *(_QWORD *)(v122 - 8);
                v124 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v123 + 48);
                v125 = v124(v120, 1, v122);
                v126 = v124(v121, 1, v122);
                if (v125)
                {
                  if (!v126)
                  {
                    v164 = v5;
                    *v120 = *v121;
                    v131 = *(int *)(v122 + 20);
                    v132 = &v120[v131];
                    v133 = &v121[v131];
                    v134 = *(_OWORD *)&v121[v131 + 16];
                    *v132 = *(_OWORD *)&v121[v131];
                    v132[1] = v134;
                    v135 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v136 = (char *)v132 + v135;
                    v137 = &v133[v135];
                    v138 = type metadata accessor for UUID();
                    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v136, v137, v138);
                    v139 = *(int *)(v122 + 24);
                    v140 = &v120[v139];
                    v141 = (uint64_t *)&v121[v139];
                    v142 = *v141;
                    if (*v141)
                    {
                      v143 = v141[1];
                      *v140 = v142;
                      v140[1] = v143;
                    }
                    else
                    {
                      *(_OWORD *)v140 = *(_OWORD *)v141;
                    }
                    v5 = v164;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
                    goto LABEL_115;
                  }
                  v127 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
                }
                else
                {
                  if (!v126)
                  {
                    v144 = v5;
                    *v120 = *v121;
                    v145 = *(int *)(v122 + 20);
                    v146 = &v120[v145];
                    v147 = &v121[v145];
                    LOBYTE(v145) = v121[v145 + 16];
                    v148 = *(_QWORD *)v146;
                    v149 = *((_QWORD *)v146 + 1);
                    v150 = v146[16];
                    *(_OWORD *)v146 = *(_OWORD *)v147;
                    v146[16] = v145;
                    outlined consume of Text.Storage(v148, v149, v150);
                    *((_QWORD *)v146 + 3) = *((_QWORD *)v147 + 3);
                    swift_bridgeObjectRelease();
                    v151 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v152 = &v146[v151];
                    v153 = &v147[v151];
                    v154 = type metadata accessor for UUID();
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v154 - 8) + 40))(v152, v153, v154);
                    v155 = *(int *)(v122 + 24);
                    v156 = &v120[v155];
                    v157 = &v121[v155];
                    v158 = *(_QWORD *)&v121[v155];
                    v5 = v144;
                    if (*v156)
                    {
                      if (v158)
                      {
                        v159 = *((_QWORD *)v157 + 1);
                        *v156 = v158;
                        v156[1] = v159;
                        swift_release();
                        goto LABEL_115;
                      }
                      swift_release();
                    }
                    else if (v158)
                    {
                      v162 = *((_QWORD *)v157 + 1);
                      *v156 = v158;
                      v156[1] = v162;
                      goto LABEL_115;
                    }
                    *(_OWORD *)v156 = *(_OWORD *)v157;
                    goto LABEL_115;
                  }
                  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v120, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
                  v127 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
                }
                type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v127);
                memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
LABEL_115:
                *(_BYTE *)(v10 + v12[29]) = *(_BYTE *)(v11 + v12[29]);
                *(_BYTE *)(v10 + v12[30]) = *(_BYTE *)(v11 + v12[30]);
                *(_BYTE *)(v10 + v12[31]) = *(_BYTE *)(v11 + v12[31]);
                *(_BYTE *)(v10 + v12[32]) = *(_BYTE *)(v11 + v12[32]);
                *(_QWORD *)(v10 + v12[33]) = *(_QWORD *)(v11 + v12[33]);
                swift_release();
                return v5;
              }
              swift_release();
            }
            else if (v109)
            {
              v111 = *(_QWORD *)(v11 + 448);
              *(_QWORD *)(v10 + 440) = v109;
              *(_QWORD *)(v10 + 448) = v111;
              goto LABEL_80;
            }
            *(_OWORD *)(v10 + 440) = *(_OWORD *)(v11 + 440);
            goto LABEL_80;
          }
          outlined destroy of PlatformItemList.Item.SystemItem(v10 + 296);
        }
        v84 = *(_OWORD *)(v11 + 376);
        *(_OWORD *)(v10 + 360) = *(_OWORD *)(v11 + 360);
        *(_OWORD *)(v10 + 376) = v84;
        *(_QWORD *)(v10 + 392) = *(_QWORD *)(v11 + 392);
        v85 = *(_OWORD *)(v11 + 312);
        *v80 = *v81;
        *(_OWORD *)(v10 + 312) = v85;
        v86 = *(_OWORD *)(v11 + 344);
        *(_OWORD *)(v10 + 328) = *(_OWORD *)(v11 + 328);
        *(_OWORD *)(v10 + 344) = v86;
        goto LABEL_55;
      }
      outlined destroy of Image.NamedResolved(v10 + 248);
    }
    v79 = *(_OWORD *)(v11 + 264);
    *(_OWORD *)(v10 + 248) = *(_OWORD *)(v11 + 248);
    *(_OWORD *)(v10 + 264) = v79;
    *(_OWORD *)(v10 + 280) = *(_OWORD *)(v11 + 280);
    goto LABEL_50;
  }
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_13:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v17);
    memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return v5;
  }
  v19 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v19;
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(v11 + 32);
  v20 = *(_QWORD *)(v11 + 48);
  *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v10 + 48) = v20;
  *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
  v21 = *(_OWORD *)(v11 + 208);
  *(_OWORD *)(v10 + 192) = *(_OWORD *)(v11 + 192);
  *(_OWORD *)(v10 + 208) = v21;
  *(_OWORD *)(v10 + 224) = *(_OWORD *)(v11 + 224);
  *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
  v22 = *(_OWORD *)(v11 + 144);
  *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
  *(_OWORD *)(v10 + 144) = v22;
  v23 = *(_OWORD *)(v11 + 176);
  *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
  *(_OWORD *)(v10 + 176) = v23;
  v24 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(v10 + 80) = v24;
  v25 = *(_OWORD *)(v11 + 112);
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
  *(_OWORD *)(v10 + 112) = v25;
  *(_OWORD *)(v10 + 248) = *(_OWORD *)(v11 + 248);
  v26 = *(_OWORD *)(v11 + 280);
  *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
  *(_OWORD *)(v10 + 280) = v26;
  v27 = *(_OWORD *)(v11 + 376);
  *(_OWORD *)(v10 + 360) = *(_OWORD *)(v11 + 360);
  *(_OWORD *)(v10 + 376) = v27;
  *(_QWORD *)(v10 + 392) = *(_QWORD *)(v11 + 392);
  v28 = *(_OWORD *)(v11 + 312);
  *(_OWORD *)(v10 + 296) = *(_OWORD *)(v11 + 296);
  *(_OWORD *)(v10 + 312) = v28;
  v29 = *(_OWORD *)(v11 + 344);
  *(_OWORD *)(v10 + 328) = *(_OWORD *)(v11 + 328);
  *(_OWORD *)(v10 + 344) = v29;
  v30 = *(_OWORD *)(v11 + 448);
  *(_OWORD *)(v10 + 432) = *(_OWORD *)(v11 + 432);
  *(_OWORD *)(v10 + 448) = v30;
  *(_BYTE *)(v10 + 464) = *(_BYTE *)(v11 + 464);
  v31 = *(_OWORD *)(v11 + 416);
  *(_OWORD *)(v10 + 400) = *(_OWORD *)(v11 + 400);
  *(_OWORD *)(v10 + 416) = v31;
  *(_OWORD *)(v10 + 472) = *(_OWORD *)(v11 + 472);
  *(_OWORD *)(v10 + 481) = *(_OWORD *)(v11 + 481);
  v32 = *(_QWORD *)(v11 + 504);
  if (v32)
  {
    v33 = *(_QWORD *)(v11 + 512);
    *(_QWORD *)(v10 + 504) = v32;
    *(_QWORD *)(v10 + 512) = v33;
  }
  else
  {
    *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
  }
  *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
  *(_OWORD *)(v10 + 528) = *(_OWORD *)(v11 + 528);
  *(_QWORD *)(v10 + 544) = *(_QWORD *)(v11 + 544);
  *(_QWORD *)(v10 + 568) = *(_QWORD *)(v11 + 568);
  *(_OWORD *)(v10 + 552) = *(_OWORD *)(v11 + 552);
  *(_QWORD *)(v10 + 576) = *(_QWORD *)(v11 + 576);
  *(_OWORD *)(v10 + 584) = *(_OWORD *)(v11 + 584);
  *(_OWORD *)(v10 + 600) = *(_OWORD *)(v11 + 600);
  *(_QWORD *)(v10 + 616) = *(_QWORD *)(v11 + 616);
  *(_QWORD *)(v10 + 624) = *(_QWORD *)(v11 + 624);
  *(_BYTE *)(v10 + 632) = *(_BYTE *)(v11 + 632);
  *(_WORD *)(v10 + 633) = *(_WORD *)(v11 + 633);
  v45 = v12[28];
  v46 = (_BYTE *)(v10 + v45);
  v47 = (_BYTE *)(v11 + v45);
  v48 = type metadata accessor for CommandOperation();
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v163 = v5;
    *v46 = *v47;
    v51 = *(int *)(v48 + 20);
    v52 = &v46[v51];
    v53 = &v47[v51];
    v54 = *(_OWORD *)&v47[v51 + 16];
    *v52 = *(_OWORD *)&v47[v51];
    v52[1] = v54;
    v55 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v56 = (char *)v52 + v55;
    v57 = &v53[v55];
    v58 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
    v59 = *(int *)(v48 + 24);
    v60 = &v46[v59];
    v61 = (uint64_t *)&v47[v59];
    v62 = *v61;
    if (*v61)
    {
      v63 = v61[1];
      *v60 = v62;
      v60[1] = v63;
    }
    else
    {
      *(_OWORD *)v60 = *(_OWORD *)v61;
    }
    v5 = v163;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  *(_BYTE *)(v10 + v12[29]) = *(_BYTE *)(v11 + v12[29]);
  *(_BYTE *)(v10 + v12[30]) = *(_BYTE *)(v11 + v12[30]);
  *(_BYTE *)(v10 + v12[31]) = *(_BYTE *)(v11 + v12[31]);
  *(_BYTE *)(v10 + v12[32]) = *(_BYTE *)(v11 + v12[32]);
  *(_QWORD *)(v10 + v12[33]) = *(_QWORD *)(v11 + v12[33]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return v5;
}

uint64_t sub_1876F0C1C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

char *sub_1876F0CBC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t destroy for ToolbarStorage.NavigationProperties.Actions(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 8);
  if (v1 <= 1)
    return outlined consume of PlatformItemCollection.Storage(*(_QWORD *)result, v1 != 0);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;

  v3 = *((unsigned __int8 *)a2 + 8);
  if (v3 > 1)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    v4 = v3 != 0;
    v5 = *a2;
    outlined copy of PlatformItemCollection.Storage(*a2, v3 != 0);
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      v10 = v5 != 0;
      v11 = *(_QWORD *)a2;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)a2, v5 != 0);
      *(_QWORD *)a1 = v11;
      *(_BYTE *)(a1 + 8) = v10;
      return a1;
    }
LABEL_7:
    v12 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = v12;
    return a1;
  }
  if (v5 > 1)
  {
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)a1, v4 & 1);
    goto LABEL_7;
  }
  v6 = v5 != 0;
  v7 = *(_QWORD *)a2;
  outlined copy of PlatformItemCollection.Storage(*(_QWORD *)a2, v5 != 0);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v6;
  outlined consume of PlatformItemCollection.Storage(v8, v9);
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 > 1)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 8);
  v6 = v4 & 1;
  if (v5 > 1)
  {
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)a1, v6);
LABEL_5:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    return a1;
  }
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5 != 0;
  outlined consume of PlatformItemCollection.Storage(v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  if (v4 + 1 >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.NavigationProperties.Actions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t getEnumTag for ToolbarStorage.NavigationProperties.Actions(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for ToolbarStorage.NavigationProperties.Actions(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarStorage.NavigationProperties.Actions()
{
  return &type metadata for ToolbarStorage.NavigationProperties.Actions;
}

uint64_t initializeWithCopy for ToolbarStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v7 = *(_QWORD *)(a2 + 32);
      *v4 = *v5;
      *(_QWORD *)(a1 + 32) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *v4 = v8;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolbarStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    outlined destroy of AccessibilityScrollableContext?(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
LABEL_5:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = v5;
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarStorage.SearchItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  id v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  id v72;
  __int128 v73;
  __int128 v74;
  char *v76;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v21 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v76 = &v10[v13];
    v14 = &v11[v13];
    v15 = a1;
    v16 = a3;
    v17 = type metadata accessor for AttributedString();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_retain();
    swift_retain();
    v19 = v17;
    v20 = v16;
    v21 = v15;
    v22 = a2;
    v18(v76, v14, v19);
    v10[v12[10]] = v11[v12[10]];
    v23 = v12[11];
    v24 = &v10[v23];
    v25 = &v11[v23];
    v24[4] = v25[4];
    v26 = v20[5];
    v27 = v20[6];
    v28 = *(_QWORD *)((char *)a2 + v26);
    *(_DWORD *)v24 = *(_DWORD *)v25;
    *(_QWORD *)((char *)v21 + v26) = v28;
    v29 = (uint64_t)v21 + v27;
    v30 = (char *)a2 + v27;
    v31 = *((unsigned __int8 *)a2 + v27 + 8);
    swift_bridgeObjectRetain();
    if (v31 == 255)
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *(_BYTE *)(v29 + 8) = v30[8];
    }
    else
    {
      v32 = v31 & 1;
      v33 = *(_QWORD *)v30;
      outlined copy of PlatformItemCollection.Storage(v33, v32);
      *(_QWORD *)v29 = v33;
      *(_BYTE *)(v29 + 8) = v32;
    }
    v34 = v20[7];
    v35 = (uint64_t)v21 + v34;
    v36 = (char *)a2 + v34;
    v37 = v36[8];
    if (v37 == 255)
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *(_BYTE *)(v35 + 8) = v36[8];
    }
    else
    {
      v38 = v37 & 1;
      v39 = *(_QWORD *)v36;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v36, v37 & 1);
      *(_QWORD *)v35 = v39;
      *(_BYTE *)(v35 + 8) = v38;
    }
    v40 = v20[8];
    v41 = (uint64_t)v21 + v40;
    v42 = (char *)a2 + v40;
    v43 = *(_QWORD *)((char *)v22 + v40);
    v44 = *(_QWORD *)((char *)v22 + v40 + 8);
    v45 = *((_BYTE *)v22 + v40 + 16);
    outlined copy of Text.Storage(v43, v44, v45);
    *(_QWORD *)v41 = v43;
    *(_QWORD *)(v41 + 8) = v44;
    *(_BYTE *)(v41 + 16) = v45;
    *(_QWORD *)(v41 + 24) = *((_QWORD *)v42 + 3);
    v46 = v20[9];
    v47 = v20[10];
    v48 = (_QWORD *)((char *)v21 + v46);
    v49 = (_QWORD *)((char *)v22 + v46);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = (uint64_t)v21 + v47;
    v52 = (char *)v22 + v47;
    v53 = *(_QWORD *)((char *)v22 + v47);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v53)
    {
      v54 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = v53;
      *(_QWORD *)(v51 + 8) = v54;
      *(_DWORD *)(v51 + 16) = *((_DWORD *)v52 + 4);
      v55 = (void *)*((_QWORD *)v52 + 4);
      *(_QWORD *)(v51 + 24) = *((_QWORD *)v52 + 3);
      *(_QWORD *)(v51 + 32) = v55;
      *(_QWORD *)(v51 + 40) = *((_QWORD *)v52 + 5);
      *(_DWORD *)(v51 + 48) = *((_DWORD *)v52 + 12);
      *(_QWORD *)(v51 + 56) = *((_QWORD *)v52 + 7);
      *(_OWORD *)(v51 + 64) = *((_OWORD *)v52 + 4);
      *(_QWORD *)(v51 + 80) = *((_QWORD *)v52 + 10);
      v56 = v55;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v57 = *((_OWORD *)v52 + 3);
      *(_OWORD *)(v51 + 32) = *((_OWORD *)v52 + 2);
      *(_OWORD *)(v51 + 48) = v57;
      *(_OWORD *)(v51 + 64) = *((_OWORD *)v52 + 4);
      *(_QWORD *)(v51 + 80) = *((_QWORD *)v52 + 10);
      v58 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *(_OWORD *)(v51 + 16) = v58;
    }
    v59 = v20[11];
    v60 = (uint64_t)v21 + v59;
    v61 = (char *)v22 + v59;
    if (*(_QWORD *)v61)
    {
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *(_QWORD *)(v60 + 8) = v62;
      *(_DWORD *)(v60 + 16) = *((_DWORD *)v61 + 4);
      v63 = (void *)*((_QWORD *)v61 + 4);
      *(_QWORD *)(v60 + 24) = *((_QWORD *)v61 + 3);
      *(_QWORD *)(v60 + 32) = v63;
      *(_QWORD *)(v60 + 40) = *((_QWORD *)v61 + 5);
      *(_DWORD *)(v60 + 48) = *((_DWORD *)v61 + 12);
      *(_QWORD *)(v60 + 56) = *((_QWORD *)v61 + 7);
      *(_OWORD *)(v60 + 64) = *((_OWORD *)v61 + 4);
      *(_QWORD *)(v60 + 80) = *((_QWORD *)v61 + 10);
      v64 = v63;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v65 = *((_OWORD *)v61 + 3);
      *(_OWORD *)(v60 + 32) = *((_OWORD *)v61 + 2);
      *(_OWORD *)(v60 + 48) = v65;
      *(_OWORD *)(v60 + 64) = *((_OWORD *)v61 + 4);
      *(_QWORD *)(v60 + 80) = *((_QWORD *)v61 + 10);
      v66 = *((_OWORD *)v61 + 1);
      *(_OWORD *)v60 = *(_OWORD *)v61;
      *(_OWORD *)(v60 + 16) = v66;
    }
    v67 = v20[13];
    *((_BYTE *)v21 + v20[12]) = *((_BYTE *)v22 + v20[12]);
    v68 = (uint64_t)v21 + v67;
    v69 = (char *)v22 + v67;
    if (*(_QWORD *)v69)
    {
      v70 = *((_QWORD *)v69 + 1);
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *(_QWORD *)(v68 + 8) = v70;
      *(_DWORD *)(v68 + 16) = *((_DWORD *)v69 + 4);
      v71 = (void *)*((_QWORD *)v69 + 4);
      *(_QWORD *)(v68 + 24) = *((_QWORD *)v69 + 3);
      *(_QWORD *)(v68 + 32) = v71;
      *(_QWORD *)(v68 + 40) = *((_QWORD *)v69 + 5);
      *(_DWORD *)(v68 + 48) = *((_DWORD *)v69 + 12);
      *(_QWORD *)(v68 + 56) = *((_QWORD *)v69 + 7);
      *(_OWORD *)(v68 + 64) = *((_OWORD *)v69 + 4);
      *(_QWORD *)(v68 + 80) = *((_QWORD *)v69 + 10);
      v72 = v71;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v73 = *((_OWORD *)v69 + 3);
      *(_OWORD *)(v68 + 32) = *((_OWORD *)v69 + 2);
      *(_OWORD *)(v68 + 48) = v73;
      *(_OWORD *)(v68 + 64) = *((_OWORD *)v69 + 4);
      *(_QWORD *)(v68 + 80) = *((_QWORD *)v69 + 10);
      v74 = *((_OWORD *)v69 + 1);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *(_OWORD *)(v68 + 16) = v74;
    }
  }
  return v21;
}

uint64_t destroy for ToolbarStorage.SearchItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = a1 + *(int *)(type metadata accessor for SearchFieldState() + 36) + v5;
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[6];
  v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v8, v9 & 1);
  v10 = a1 + a2[7];
  v11 = *(unsigned __int8 *)(v10 + 8);
  if (v11 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v10, v11 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8), *(_BYTE *)(a1 + a2[8] + 16));
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v13 = a1 + a2[10];
  if (*(_QWORD *)v13)
  {

    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  v14 = a1 + a2[11];
  if (*(_QWORD *)v14)
  {

    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  v15 = a1 + a2[13];
  if (*(_QWORD *)v15)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for ToolbarStorage.SearchItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  id v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  id v68;
  __int128 v69;
  __int128 v70;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_retain();
  swift_retain();
  v16 = v14;
  v17 = a1;
  v18 = a2;
  v15(v12, v13, v16);
  v8[v10[10]] = v9[v10[10]];
  v19 = v10[11];
  v20 = &v8[v19];
  v21 = &v9[v19];
  v20[4] = v21[4];
  v22 = a3[5];
  v23 = a3[6];
  v24 = *(_QWORD *)((char *)a2 + v22);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_QWORD *)((char *)v17 + v22) = v24;
  v25 = (char *)v17 + v23;
  v26 = (char *)a2 + v23;
  v27 = v26[8];
  swift_bridgeObjectRetain();
  if (v27 == 255)
  {
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
  }
  else
  {
    v28 = v27 & 1;
    v29 = *(_QWORD *)v26;
    outlined copy of PlatformItemCollection.Storage(v29, v28);
    *(_QWORD *)v25 = v29;
    v25[8] = v28;
  }
  v30 = a3[7];
  v31 = (char *)v17 + v30;
  v32 = (char *)v18 + v30;
  v33 = v32[8];
  if (v33 == 255)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
  }
  else
  {
    v34 = v33 & 1;
    v35 = *(_QWORD *)v32;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v32, v33 & 1);
    *(_QWORD *)v31 = v35;
    v31[8] = v34;
  }
  v36 = a3[8];
  v37 = (char *)v17 + v36;
  v38 = (char *)v18 + v36;
  v39 = *(_QWORD *)((char *)v18 + v36);
  v40 = *(_QWORD *)((char *)v18 + v36 + 8);
  v41 = *((_BYTE *)v18 + v36 + 16);
  outlined copy of Text.Storage(v39, v40, v41);
  *(_QWORD *)v37 = v39;
  *((_QWORD *)v37 + 1) = v40;
  v37[16] = v41;
  *((_QWORD *)v37 + 3) = *((_QWORD *)v38 + 3);
  v42 = a3[9];
  v43 = a3[10];
  v44 = (_QWORD *)((char *)v17 + v42);
  v45 = (_QWORD *)((char *)v18 + v42);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = (char *)v17 + v43;
  v48 = (char *)v18 + v43;
  v49 = *(_QWORD *)((char *)v18 + v43);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v49)
  {
    v50 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = v49;
    *((_QWORD *)v47 + 1) = v50;
    *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
    v51 = (void *)*((_QWORD *)v48 + 4);
    *((_QWORD *)v47 + 3) = *((_QWORD *)v48 + 3);
    *((_QWORD *)v47 + 4) = v51;
    *((_QWORD *)v47 + 5) = *((_QWORD *)v48 + 5);
    *((_DWORD *)v47 + 12) = *((_DWORD *)v48 + 12);
    *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
    *((_OWORD *)v47 + 4) = *((_OWORD *)v48 + 4);
    *((_QWORD *)v47 + 10) = *((_QWORD *)v48 + 10);
    v52 = v51;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v53 = *((_OWORD *)v48 + 3);
    *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
    *((_OWORD *)v47 + 3) = v53;
    *((_OWORD *)v47 + 4) = *((_OWORD *)v48 + 4);
    *((_QWORD *)v47 + 10) = *((_QWORD *)v48 + 10);
    v54 = *((_OWORD *)v48 + 1);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v54;
  }
  v55 = a3[11];
  v56 = (char *)v17 + v55;
  v57 = (char *)v18 + v55;
  if (*(_QWORD *)v57)
  {
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *((_QWORD *)v56 + 1) = v58;
    *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
    v59 = (void *)*((_QWORD *)v57 + 4);
    *((_QWORD *)v56 + 3) = *((_QWORD *)v57 + 3);
    *((_QWORD *)v56 + 4) = v59;
    *((_QWORD *)v56 + 5) = *((_QWORD *)v57 + 5);
    *((_DWORD *)v56 + 12) = *((_DWORD *)v57 + 12);
    *((_QWORD *)v56 + 7) = *((_QWORD *)v57 + 7);
    *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
    *((_QWORD *)v56 + 10) = *((_QWORD *)v57 + 10);
    v60 = v59;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v61 = *((_OWORD *)v57 + 3);
    *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    *((_OWORD *)v56 + 3) = v61;
    *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
    *((_QWORD *)v56 + 10) = *((_QWORD *)v57 + 10);
    v62 = *((_OWORD *)v57 + 1);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v62;
  }
  v63 = a3[13];
  *((_BYTE *)v17 + a3[12]) = *((_BYTE *)v18 + a3[12]);
  v64 = (char *)v17 + v63;
  v65 = (char *)v18 + v63;
  if (*(_QWORD *)v65)
  {
    v66 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    *((_DWORD *)v64 + 4) = *((_DWORD *)v65 + 4);
    v67 = (void *)*((_QWORD *)v65 + 4);
    *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
    *((_QWORD *)v64 + 4) = v67;
    *((_QWORD *)v64 + 5) = *((_QWORD *)v65 + 5);
    *((_DWORD *)v64 + 12) = *((_DWORD *)v65 + 12);
    *((_QWORD *)v64 + 7) = *((_QWORD *)v65 + 7);
    *((_OWORD *)v64 + 4) = *((_OWORD *)v65 + 4);
    *((_QWORD *)v64 + 10) = *((_QWORD *)v65 + 10);
    v68 = v67;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v69 = *((_OWORD *)v65 + 3);
    *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
    *((_OWORD *)v64 + 3) = v69;
    *((_OWORD *)v64 + 4) = *((_OWORD *)v65 + 4);
    *((_QWORD *)v64 + 10) = *((_QWORD *)v65 + 10);
    v70 = *((_OWORD *)v65 + 1);
    *(_OWORD *)v64 = *(_OWORD *)v65;
    *((_OWORD *)v64 + 1) = v70;
  }
  return v17;
}

_QWORD *assignWithCopy for ToolbarStorage.SearchItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  uint64_t v105;
  void *v106;
  id v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  v8[2] = *((_BYTE *)a2 + v7 + 2);
  v8[3] = *((_BYTE *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[6];
  v19 = (uint64_t)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *((unsigned __int8 *)a1 + v18 + 8);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v21 == 255)
  {
    if (v22 == 255)
    {
      v24 = *(_QWORD *)v20;
      *(_BYTE *)(v19 + 8) = v20[8];
      *(_QWORD *)v19 = v24;
    }
    else
    {
      v29 = v22 & 1;
      v30 = *(_QWORD *)v20;
      outlined copy of PlatformItemCollection.Storage(v30, v22 & 1);
      *(_QWORD *)v19 = v30;
      *(_BYTE *)(v19 + 8) = v29;
    }
  }
  else if (v22 == 255)
  {
    outlined destroy of PlatformItemCollection(v19);
    v23 = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = v23;
  }
  else
  {
    v25 = v22 & 1;
    v26 = *(_QWORD *)v20;
    outlined copy of PlatformItemCollection.Storage(v26, v22 & 1);
    v27 = *(_QWORD *)v19;
    v28 = *(_BYTE *)(v19 + 8);
    *(_QWORD *)v19 = v26;
    *(_BYTE *)(v19 + 8) = v25;
    outlined consume of PlatformItemCollection.Storage(v27, v28);
  }
  v31 = a3[7];
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *((unsigned __int8 *)a1 + v31 + 8);
  v35 = *((unsigned __int8 *)a2 + v31 + 8);
  if (v34 == 255)
  {
    if (v35 == 255)
    {
      v37 = *(_QWORD *)v33;
      *(_BYTE *)(v32 + 8) = v33[8];
      *(_QWORD *)v32 = v37;
    }
    else
    {
      v42 = v35 & 1;
      v43 = *(_QWORD *)v33;
      outlined copy of PlatformItemCollection.Storage(v43, v35 & 1);
      *(_QWORD *)v32 = v43;
      *(_BYTE *)(v32 + 8) = v42;
    }
  }
  else if (v35 == 255)
  {
    outlined destroy of PlatformItemCollection(v32);
    v36 = v33[8];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_BYTE *)(v32 + 8) = v36;
  }
  else
  {
    v38 = v35 & 1;
    v39 = *(_QWORD *)v33;
    outlined copy of PlatformItemCollection.Storage(v39, v35 & 1);
    v40 = *(_QWORD *)v32;
    v41 = *(_BYTE *)(v32 + 8);
    *(_QWORD *)v32 = v39;
    *(_BYTE *)(v32 + 8) = v38;
    outlined consume of PlatformItemCollection.Storage(v40, v41);
  }
  v44 = a3[8];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *(_QWORD *)((char *)a2 + v44);
  v48 = *(_QWORD *)((char *)a2 + v44 + 8);
  v49 = *((_BYTE *)a2 + v44 + 16);
  outlined copy of Text.Storage(v47, v48, v49);
  v50 = *(_QWORD *)v45;
  v51 = *((_QWORD *)v45 + 1);
  v52 = v45[16];
  *(_QWORD *)v45 = v47;
  *((_QWORD *)v45 + 1) = v48;
  v45[16] = v49;
  outlined consume of Text.Storage(v50, v51, v52);
  *((_QWORD *)v45 + 3) = *((_QWORD *)v46 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = a3[9];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  *(_QWORD *)((char *)a1 + v53) = *(_QWORD *)((char *)a2 + v53);
  swift_retain();
  swift_release();
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_retain();
  swift_release();
  v56 = a3[10];
  v57 = (uint64_t)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = *(_QWORD *)((char *)a1 + v56);
  v60 = *(_QWORD *)((char *)a2 + v56);
  if (v59)
  {
    if (v60)
    {
      v61 = *((_QWORD *)v58 + 1);
      *(_QWORD *)v57 = v60;
      *(_QWORD *)(v57 + 8) = v61;
      *(_DWORD *)(v57 + 16) = *((_DWORD *)v58 + 4);
      *(_QWORD *)(v57 + 24) = *((_QWORD *)v58 + 3);
      v62 = (void *)*((_QWORD *)v58 + 4);
      v63 = *(void **)(v57 + 32);
      *(_QWORD *)(v57 + 32) = v62;
      v64 = v62;

      *(_QWORD *)(v57 + 40) = *((_QWORD *)v58 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v57 + 48) = *((_DWORD *)v58 + 12);
      *(_QWORD *)(v57 + 56) = *((_QWORD *)v58 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v57 + 64) = *((_DWORD *)v58 + 16);
      *(_DWORD *)(v57 + 68) = *((_DWORD *)v58 + 17);
      *(_DWORD *)(v57 + 72) = *((_DWORD *)v58 + 18);
      *(_DWORD *)(v57 + 76) = *((_DWORD *)v58 + 19);
      *(_QWORD *)(v57 + 80) = *((_QWORD *)v58 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v57);
      v68 = *((_OWORD *)v58 + 1);
      *(_OWORD *)v57 = *(_OWORD *)v58;
      *(_OWORD *)(v57 + 16) = v68;
      v70 = *((_OWORD *)v58 + 3);
      v69 = *((_OWORD *)v58 + 4);
      v71 = *((_OWORD *)v58 + 2);
      *(_QWORD *)(v57 + 80) = *((_QWORD *)v58 + 10);
      *(_OWORD *)(v57 + 48) = v70;
      *(_OWORD *)(v57 + 64) = v69;
      *(_OWORD *)(v57 + 32) = v71;
    }
  }
  else if (v60)
  {
    v65 = *((_QWORD *)v58 + 1);
    *(_QWORD *)v57 = v60;
    *(_QWORD *)(v57 + 8) = v65;
    *(_DWORD *)(v57 + 16) = *((_DWORD *)v58 + 4);
    *(_QWORD *)(v57 + 24) = *((_QWORD *)v58 + 3);
    v66 = (void *)*((_QWORD *)v58 + 4);
    *(_QWORD *)(v57 + 32) = v66;
    *(_QWORD *)(v57 + 40) = *((_QWORD *)v58 + 5);
    *(_DWORD *)(v57 + 48) = *((_DWORD *)v58 + 12);
    *(_QWORD *)(v57 + 56) = *((_QWORD *)v58 + 7);
    *(_DWORD *)(v57 + 64) = *((_DWORD *)v58 + 16);
    *(_DWORD *)(v57 + 68) = *((_DWORD *)v58 + 17);
    *(_DWORD *)(v57 + 72) = *((_DWORD *)v58 + 18);
    *(_DWORD *)(v57 + 76) = *((_DWORD *)v58 + 19);
    *(_QWORD *)(v57 + 80) = *((_QWORD *)v58 + 10);
    v67 = v66;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v72 = *((_OWORD *)v58 + 1);
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *(_OWORD *)(v57 + 16) = v72;
    v73 = *((_OWORD *)v58 + 2);
    v74 = *((_OWORD *)v58 + 3);
    v75 = *((_OWORD *)v58 + 4);
    *(_QWORD *)(v57 + 80) = *((_QWORD *)v58 + 10);
    *(_OWORD *)(v57 + 48) = v74;
    *(_OWORD *)(v57 + 64) = v75;
    *(_OWORD *)(v57 + 32) = v73;
  }
  v76 = a3[11];
  v77 = (uint64_t)a1 + v76;
  v78 = (char *)a2 + v76;
  v79 = *(_QWORD *)((char *)a1 + v76);
  v80 = *(_QWORD *)((char *)a2 + v76);
  if (v79)
  {
    if (v80)
    {
      v81 = *((_QWORD *)v78 + 1);
      *(_QWORD *)v77 = v80;
      *(_QWORD *)(v77 + 8) = v81;
      *(_DWORD *)(v77 + 16) = *((_DWORD *)v78 + 4);
      *(_QWORD *)(v77 + 24) = *((_QWORD *)v78 + 3);
      v82 = (void *)*((_QWORD *)v78 + 4);
      v83 = *(void **)(v77 + 32);
      *(_QWORD *)(v77 + 32) = v82;
      v84 = v82;

      *(_QWORD *)(v77 + 40) = *((_QWORD *)v78 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v77 + 48) = *((_DWORD *)v78 + 12);
      *(_QWORD *)(v77 + 56) = *((_QWORD *)v78 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v77 + 64) = *((_DWORD *)v78 + 16);
      *(_DWORD *)(v77 + 68) = *((_DWORD *)v78 + 17);
      *(_DWORD *)(v77 + 72) = *((_DWORD *)v78 + 18);
      *(_DWORD *)(v77 + 76) = *((_DWORD *)v78 + 19);
      *(_QWORD *)(v77 + 80) = *((_QWORD *)v78 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v77);
      v88 = *((_OWORD *)v78 + 1);
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *(_OWORD *)(v77 + 16) = v88;
      v90 = *((_OWORD *)v78 + 3);
      v89 = *((_OWORD *)v78 + 4);
      v91 = *((_OWORD *)v78 + 2);
      *(_QWORD *)(v77 + 80) = *((_QWORD *)v78 + 10);
      *(_OWORD *)(v77 + 48) = v90;
      *(_OWORD *)(v77 + 64) = v89;
      *(_OWORD *)(v77 + 32) = v91;
    }
  }
  else if (v80)
  {
    v85 = *((_QWORD *)v78 + 1);
    *(_QWORD *)v77 = v80;
    *(_QWORD *)(v77 + 8) = v85;
    *(_DWORD *)(v77 + 16) = *((_DWORD *)v78 + 4);
    *(_QWORD *)(v77 + 24) = *((_QWORD *)v78 + 3);
    v86 = (void *)*((_QWORD *)v78 + 4);
    *(_QWORD *)(v77 + 32) = v86;
    *(_QWORD *)(v77 + 40) = *((_QWORD *)v78 + 5);
    *(_DWORD *)(v77 + 48) = *((_DWORD *)v78 + 12);
    *(_QWORD *)(v77 + 56) = *((_QWORD *)v78 + 7);
    *(_DWORD *)(v77 + 64) = *((_DWORD *)v78 + 16);
    *(_DWORD *)(v77 + 68) = *((_DWORD *)v78 + 17);
    *(_DWORD *)(v77 + 72) = *((_DWORD *)v78 + 18);
    *(_DWORD *)(v77 + 76) = *((_DWORD *)v78 + 19);
    *(_QWORD *)(v77 + 80) = *((_QWORD *)v78 + 10);
    v87 = v86;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v92 = *((_OWORD *)v78 + 1);
    *(_OWORD *)v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 16) = v92;
    v93 = *((_OWORD *)v78 + 2);
    v94 = *((_OWORD *)v78 + 3);
    v95 = *((_OWORD *)v78 + 4);
    *(_QWORD *)(v77 + 80) = *((_QWORD *)v78 + 10);
    *(_OWORD *)(v77 + 48) = v94;
    *(_OWORD *)(v77 + 64) = v95;
    *(_OWORD *)(v77 + 32) = v93;
  }
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v96 = a3[13];
  v97 = (uint64_t)a1 + v96;
  v98 = (char *)a2 + v96;
  v99 = *(_QWORD *)((char *)a1 + v96);
  v100 = *(_QWORD *)((char *)a2 + v96);
  if (v99)
  {
    if (v100)
    {
      v101 = *((_QWORD *)v98 + 1);
      *(_QWORD *)v97 = v100;
      *(_QWORD *)(v97 + 8) = v101;
      *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
      *(_QWORD *)(v97 + 24) = *((_QWORD *)v98 + 3);
      v102 = (void *)*((_QWORD *)v98 + 4);
      v103 = *(void **)(v97 + 32);
      *(_QWORD *)(v97 + 32) = v102;
      v104 = v102;

      *(_QWORD *)(v97 + 40) = *((_QWORD *)v98 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v97 + 48) = *((_DWORD *)v98 + 12);
      *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v97 + 64) = *((_DWORD *)v98 + 16);
      *(_DWORD *)(v97 + 68) = *((_DWORD *)v98 + 17);
      *(_DWORD *)(v97 + 72) = *((_DWORD *)v98 + 18);
      *(_DWORD *)(v97 + 76) = *((_DWORD *)v98 + 19);
      *(_QWORD *)(v97 + 80) = *((_QWORD *)v98 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v97);
      v108 = *((_OWORD *)v98 + 1);
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *(_OWORD *)(v97 + 16) = v108;
      v110 = *((_OWORD *)v98 + 3);
      v109 = *((_OWORD *)v98 + 4);
      v111 = *((_OWORD *)v98 + 2);
      *(_QWORD *)(v97 + 80) = *((_QWORD *)v98 + 10);
      *(_OWORD *)(v97 + 48) = v110;
      *(_OWORD *)(v97 + 64) = v109;
      *(_OWORD *)(v97 + 32) = v111;
    }
  }
  else if (v100)
  {
    v105 = *((_QWORD *)v98 + 1);
    *(_QWORD *)v97 = v100;
    *(_QWORD *)(v97 + 8) = v105;
    *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
    *(_QWORD *)(v97 + 24) = *((_QWORD *)v98 + 3);
    v106 = (void *)*((_QWORD *)v98 + 4);
    *(_QWORD *)(v97 + 32) = v106;
    *(_QWORD *)(v97 + 40) = *((_QWORD *)v98 + 5);
    *(_DWORD *)(v97 + 48) = *((_DWORD *)v98 + 12);
    *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
    *(_DWORD *)(v97 + 64) = *((_DWORD *)v98 + 16);
    *(_DWORD *)(v97 + 68) = *((_DWORD *)v98 + 17);
    *(_DWORD *)(v97 + 72) = *((_DWORD *)v98 + 18);
    *(_DWORD *)(v97 + 76) = *((_DWORD *)v98 + 19);
    *(_QWORD *)(v97 + 80) = *((_QWORD *)v98 + 10);
    v107 = v106;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v112 = *((_OWORD *)v98 + 1);
    *(_OWORD *)v97 = *(_OWORD *)v98;
    *(_OWORD *)(v97 + 16) = v112;
    v113 = *((_OWORD *)v98 + 2);
    v114 = *((_OWORD *)v98 + 3);
    v115 = *((_OWORD *)v98 + 4);
    *(_QWORD *)(v97 + 80) = *((_QWORD *)v98 + 10);
    *(_OWORD *)(v97 + 48) = v114;
    *(_OWORD *)(v97 + 64) = v115;
    *(_OWORD *)(v97 + 32) = v113;
  }
  return a1;
}

_QWORD *initializeWithTake for ToolbarStorage.SearchItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *v9 = *((_BYTE *)a2 + v8);
  v9[1] = *((_BYTE *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((_BYTE *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  v11 = (int *)type metadata accessor for SearchFieldState();
  v12 = v11[9];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  v16 = v11[11];
  v17 = &v9[v16];
  v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = a3[7];
  v23 = a3[8];
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = (_OWORD *)((char *)a1 + v23);
  v27 = (_OWORD *)((char *)a2 + v23);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  v33 = *((_OWORD *)v31 + 2);
  v34 = *((_OWORD *)v31 + 3);
  v35 = *((_OWORD *)v31 + 4);
  *((_QWORD *)v30 + 10) = *((_QWORD *)v31 + 10);
  *((_OWORD *)v30 + 3) = v34;
  *((_OWORD *)v30 + 4) = v35;
  *((_OWORD *)v30 + 2) = v33;
  v36 = a3[11];
  v37 = a3[12];
  v38 = (char *)a1 + v36;
  v39 = (char *)a2 + v36;
  v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  v41 = *((_OWORD *)v39 + 2);
  v42 = *((_OWORD *)v39 + 3);
  v43 = *((_OWORD *)v39 + 4);
  *((_QWORD *)v38 + 10) = *((_QWORD *)v39 + 10);
  *((_OWORD *)v38 + 3) = v42;
  *((_OWORD *)v38 + 4) = v43;
  *((_OWORD *)v38 + 2) = v41;
  *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  v44 = a3[13];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *((_OWORD *)v46 + 1);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *((_OWORD *)v45 + 1) = v47;
  *((_QWORD *)v45 + 10) = *((_QWORD *)v46 + 10);
  v48 = *((_OWORD *)v46 + 4);
  v49 = *((_OWORD *)v46 + 2);
  *((_OWORD *)v45 + 3) = *((_OWORD *)v46 + 3);
  *((_OWORD *)v45 + 4) = v48;
  *((_OWORD *)v45 + 2) = v49;
  return a1;
}

_QWORD *assignWithTake for ToolbarStorage.SearchItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  __int128 v62;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  swift_bridgeObjectRelease();
  v18 = a3[6];
  v19 = (uint64_t)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *((unsigned __int8 *)a1 + v18 + 8);
  if (v21 == 255)
    goto LABEL_4;
  v22 = v20[8];
  if (v22 == 255)
  {
    outlined destroy of PlatformItemCollection(v19);
LABEL_4:
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = v20[8];
    goto LABEL_6;
  }
  v23 = *(_QWORD *)v19;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v22 & 1;
  outlined consume of PlatformItemCollection.Storage(v23, v21 & 1);
LABEL_6:
  v24 = a3[7];
  v25 = (uint64_t)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *((unsigned __int8 *)a1 + v24 + 8);
  if (v27 == 255)
  {
LABEL_9:
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = v26[8];
    goto LABEL_11;
  }
  v28 = v26[8];
  if (v28 == 255)
  {
    outlined destroy of PlatformItemCollection(v25);
    goto LABEL_9;
  }
  v29 = *(_QWORD *)v25;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v28 & 1;
  outlined consume of PlatformItemCollection.Storage(v29, v27 & 1);
LABEL_11:
  v30 = a3[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  LOBYTE(v30) = *((_BYTE *)a2 + v30 + 16);
  v33 = *(_QWORD *)v31;
  v34 = *((_QWORD *)v31 + 1);
  v35 = v31[16];
  *(_OWORD *)v31 = *(_OWORD *)v32;
  v31[16] = v30;
  outlined consume of Text.Storage(v33, v34, v35);
  *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
  swift_bridgeObjectRelease();
  v36 = a3[9];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  swift_release();
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_release();
  v39 = a3[10];
  v40 = (uint64_t)a1 + v39;
  v41 = (char *)a2 + v39;
  if (*(_QWORD *)((char *)a1 + v39))
  {
    if (*(_QWORD *)v41)
    {
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *(_QWORD *)(v40 + 8) = v42;
      *(_DWORD *)(v40 + 16) = *((_DWORD *)v41 + 4);
      v43 = *((_QWORD *)v41 + 4);
      v44 = *(void **)(v40 + 32);
      *(_QWORD *)(v40 + 24) = *((_QWORD *)v41 + 3);
      *(_QWORD *)(v40 + 32) = v43;

      *(_QWORD *)(v40 + 40) = *((_QWORD *)v41 + 5);
      swift_release();
      *(_DWORD *)(v40 + 48) = *((_DWORD *)v41 + 12);
      *(_QWORD *)(v40 + 56) = *((_QWORD *)v41 + 7);
      swift_release();
      *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
      *(_QWORD *)(v40 + 80) = *((_QWORD *)v41 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of BoundInputsView(v40);
  }
  v45 = *((_OWORD *)v41 + 3);
  *(_OWORD *)(v40 + 32) = *((_OWORD *)v41 + 2);
  *(_OWORD *)(v40 + 48) = v45;
  *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
  *(_QWORD *)(v40 + 80) = *((_QWORD *)v41 + 10);
  v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_16:
  v47 = a3[11];
  v48 = (uint64_t)a1 + v47;
  v49 = (char *)a2 + v47;
  if (*(_QWORD *)((char *)a1 + v47))
  {
    if (*(_QWORD *)v49)
    {
      v50 = *((_QWORD *)v49 + 1);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *(_QWORD *)(v48 + 8) = v50;
      *(_DWORD *)(v48 + 16) = *((_DWORD *)v49 + 4);
      v51 = *((_QWORD *)v49 + 4);
      v52 = *(void **)(v48 + 32);
      *(_QWORD *)(v48 + 24) = *((_QWORD *)v49 + 3);
      *(_QWORD *)(v48 + 32) = v51;

      *(_QWORD *)(v48 + 40) = *((_QWORD *)v49 + 5);
      swift_release();
      *(_DWORD *)(v48 + 48) = *((_DWORD *)v49 + 12);
      *(_QWORD *)(v48 + 56) = *((_QWORD *)v49 + 7);
      swift_release();
      *(_OWORD *)(v48 + 64) = *((_OWORD *)v49 + 4);
      *(_QWORD *)(v48 + 80) = *((_QWORD *)v49 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of BoundInputsView(v48);
  }
  v53 = *((_OWORD *)v49 + 3);
  *(_OWORD *)(v48 + 32) = *((_OWORD *)v49 + 2);
  *(_OWORD *)(v48 + 48) = v53;
  *(_OWORD *)(v48 + 64) = *((_OWORD *)v49 + 4);
  *(_QWORD *)(v48 + 80) = *((_QWORD *)v49 + 10);
  v54 = *((_OWORD *)v49 + 1);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v54;
LABEL_21:
  v55 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  if (!*(_QWORD *)((char *)a1 + v55))
  {
LABEL_25:
    v61 = *((_OWORD *)v57 + 3);
    *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    *((_OWORD *)v56 + 3) = v61;
    *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
    *((_QWORD *)v56 + 10) = *((_QWORD *)v57 + 10);
    v62 = *((_OWORD *)v57 + 1);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v62;
    return a1;
  }
  if (!*(_QWORD *)v57)
  {
    outlined destroy of BoundInputsView((uint64_t)a1 + v55);
    goto LABEL_25;
  }
  v58 = *((_QWORD *)v57 + 1);
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *((_QWORD *)v56 + 1) = v58;
  *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
  v59 = *((_QWORD *)v57 + 4);
  v60 = (void *)*((_QWORD *)v56 + 4);
  *((_QWORD *)v56 + 3) = *((_QWORD *)v57 + 3);
  *((_QWORD *)v56 + 4) = v59;

  *((_QWORD *)v56 + 5) = *((_QWORD *)v57 + 5);
  swift_release();
  *((_DWORD *)v56 + 12) = *((_DWORD *)v57 + 12);
  *((_QWORD *)v56 + 7) = *((_QWORD *)v57 + 7);
  swift_release();
  *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
  *((_QWORD *)v56 + 10) = *((_QWORD *)v57 + 10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1876F2A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

void sub_1876F2ADC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 32) + 24) = (a2 - 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.Entry(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(void **, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(void **, uint64_t, uint64_t);
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  _OWORD *v59;
  _OWORD *v60;
  unint64_t v61;
  id v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  void *v70;
  __int128 v71;
  void *v72;
  id v73;
  int v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  __int128 v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  void (*v127)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  void (*v132)(void **, _QWORD, uint64_t, int *);
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  id v140;
  void *v141;
  void *v142;
  id v143;
  void *v144;
  __int128 v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  __int128 v156;
  __int128 v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  uint64_t v186;
  void (*v187)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int (*v204)(_BYTE *, uint64_t, uint64_t);
  uint64_t v205;
  unsigned int (*v206)(_BYTE *, uint64_t, uint64_t);
  void *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  void *v212;
  int *v213;
  uint64_t v214;
  uint64_t v215;
  int *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v13 = v3[1];
      *(_QWORD *)a1 = *v3;
      *(_QWORD *)(a1 + 8) = v13;
      v14 = *((unsigned __int8 *)v3 + 56);
      swift_bridgeObjectRetain();
      if (v14 == 1)
      {
        v15 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)(a1 + 40) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 16, (uint64_t)(v3 + 2));
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v28 = *((_OWORD *)v3 + 2);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)v3 + 1);
        *(_OWORD *)(a1 + 32) = v28;
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v3 + 41);
      }
      *(_BYTE *)(a1 + 57) = *((_BYTE *)v3 + 57);
      *(_WORD *)(a1 + 58) = *((_WORD *)v3 + 29);
      v29 = v3[9];
      *(_QWORD *)(a1 + 64) = v3[8];
      *(_QWORD *)(a1 + 72) = v29;
      v30 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      v31 = (void **)(a1 + v30);
      v32 = (void **)((char *)v3 + v30);
      v33 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v217 = v34;
          v219 = v33;
          v215 = v6;
          v55 = *v32;
          v56 = v32[1];
          *v31 = *v32;
          v31[1] = v56;
          v57 = v32[3];
          v31[2] = v32[2];
          v31[3] = v57;
          *((_BYTE *)v31 + 32) = *((_BYTE *)v32 + 32);
          v58 = v32[6];
          v31[5] = v32[5];
          v31[6] = v58;
          *((_BYTE *)v31 + 56) = *((_BYTE *)v32 + 56);
          v59 = v31 + 8;
          v60 = v32 + 8;
          v61 = (unint64_t)v32[23];
          v62 = v55;
          v63 = v56;
          swift_bridgeObjectRetain();
          swift_retain();
          if (v61 >> 1 == 4294967294)
          {
            v64 = *((_OWORD *)v32 + 13);
            *((_OWORD *)v31 + 12) = *((_OWORD *)v32 + 12);
            *((_OWORD *)v31 + 13) = v64;
            *((_OWORD *)v31 + 14) = *((_OWORD *)v32 + 14);
            *(_DWORD *)((char *)v31 + 239) = *(_DWORD *)((char *)v32 + 239);
            v65 = *((_OWORD *)v32 + 9);
            *((_OWORD *)v31 + 8) = *((_OWORD *)v32 + 8);
            *((_OWORD *)v31 + 9) = v65;
            v66 = *((_OWORD *)v32 + 11);
            *((_OWORD *)v31 + 10) = *((_OWORD *)v32 + 10);
            *((_OWORD *)v31 + 11) = v66;
            v67 = *((_OWORD *)v32 + 5);
            *v59 = *v60;
            *((_OWORD *)v31 + 5) = v67;
            v68 = *((_OWORD *)v32 + 7);
            *((_OWORD *)v31 + 6) = *((_OWORD *)v32 + 6);
            *((_OWORD *)v31 + 7) = v68;
          }
          else
          {
            v74 = *((unsigned __int8 *)v32 + 72);
            if (v74 == 255)
            {
              *(_QWORD *)v59 = *(_QWORD *)v60;
              *((_BYTE *)v31 + 72) = *((_BYTE *)v32 + 72);
            }
            else
            {
              v75 = v32[8];
              outlined copy of GraphicsImage.Contents(v75, *((_BYTE *)v32 + 72));
              v31[8] = v75;
              *((_BYTE *)v31 + 72) = v74;
              v61 = (unint64_t)v32[23];
            }
            v31[10] = v32[10];
            *(_OWORD *)(v31 + 11) = *(_OWORD *)(v32 + 11);
            *((_BYTE *)v31 + 104) = *((_BYTE *)v32 + 104);
            *(_OWORD *)((char *)v31 + 108) = *(_OWORD *)((char *)v32 + 108);
            *((_BYTE *)v31 + 124) = *((_BYTE *)v32 + 124);
            v133 = *((_OWORD *)v32 + 9);
            *((_OWORD *)v31 + 8) = *((_OWORD *)v32 + 8);
            *((_OWORD *)v31 + 9) = v133;
            *((_WORD *)v31 + 80) = *((_WORD *)v32 + 80);
            *((_BYTE *)v31 + 162) = *((_BYTE *)v32 + 162);
            *((_BYTE *)v31 + 163) = *((_BYTE *)v32 + 163);
            if (v61 >> 1 == 0xFFFFFFFF)
            {
              v134 = *(_OWORD *)(v32 + 23);
              *(_OWORD *)(v31 + 21) = *(_OWORD *)(v32 + 21);
              *(_OWORD *)(v31 + 23) = v134;
            }
            else
            {
              v135 = (uint64_t)v32[21];
              v136 = (uint64_t)v32[22];
              v137 = v32[24];
              outlined copy of AccessibilityImageLabel(v135, v136, v61);
              v31[21] = (void *)v135;
              v31[22] = (void *)v136;
              v31[23] = (void *)v61;
              v31[24] = v137;
            }
            v138 = v32[26];
            v31[25] = v32[25];
            v31[26] = v138;
            *((_WORD *)v31 + 108) = *((_WORD *)v32 + 108);
            *((_DWORD *)v31 + 55) = *((_DWORD *)v32 + 55);
            *((_BYTE *)v31 + 224) = *((_BYTE *)v32 + 224);
            v139 = v32[29];
            v31[29] = v139;
            *((_WORD *)v31 + 120) = *((_WORD *)v32 + 120);
            *((_BYTE *)v31 + 242) = *((_BYTE *)v32 + 242);
            swift_unknownObjectRetain();
            swift_retain();
            v140 = v139;
          }
          v141 = v32[32];
          if (v141)
          {
            v31[31] = v32[31];
            v31[32] = v141;
            v142 = v32[33];
            swift_bridgeObjectRetain();
            if ((unint64_t)v142 >= 2)
              v143 = v142;
            v31[33] = v142;
            *((_DWORD *)v31 + 68) = *((_DWORD *)v32 + 68);
            *((_BYTE *)v31 + 276) = *((_BYTE *)v32 + 276);
            *(_WORD *)((char *)v31 + 277) = *(_WORD *)((char *)v32 + 277);
            v144 = v32[36];
            v31[35] = v32[35];
            v31[36] = v144;
            swift_retain();
            swift_retain();
          }
          else
          {
            v145 = *(_OWORD *)(v32 + 33);
            *(_OWORD *)(v31 + 31) = *(_OWORD *)(v32 + 31);
            *(_OWORD *)(v31 + 33) = v145;
            *(_OWORD *)(v31 + 35) = *(_OWORD *)(v32 + 35);
          }
          v146 = (unint64_t)v32[41];
          if (v146 >> 2 == 0xFFFFFFFF)
          {
            v147 = *(_OWORD *)(v32 + 47);
            *(_OWORD *)(v31 + 45) = *(_OWORD *)(v32 + 45);
            *(_OWORD *)(v31 + 47) = v147;
            v31[49] = v32[49];
            v148 = *(_OWORD *)(v32 + 39);
            *(_OWORD *)(v31 + 37) = *(_OWORD *)(v32 + 37);
            *(_OWORD *)(v31 + 39) = v148;
            v149 = *(_OWORD *)(v32 + 43);
            *(_OWORD *)(v31 + 41) = *(_OWORD *)(v32 + 41);
            *(_OWORD *)(v31 + 43) = v149;
          }
          else
          {
            v150 = v32[37];
            v151 = (uint64_t)v32[38];
            v195 = (uint64_t)v32[40];
            v198 = (uint64_t)v32[39];
            v153 = (uint64_t)v32[42];
            v152 = (uint64_t)v32[43];
            v154 = v32[44];
            v201 = (uint64_t)v32[45];
            v205 = (uint64_t)v32[46];
            v209 = (uint64_t)v32[47];
            v212 = v32[48];
            v223 = (uint64_t)v32[49];
            outlined copy of PlatformItemList.Item.SystemItem(v150, v151, v198, v195, v146, v153, v152, (char)v154, v201, v205, v209, (char)v212, v223);
            v31[37] = v150;
            v31[38] = (void *)v151;
            v31[39] = (void *)v198;
            v31[40] = (void *)v195;
            v31[41] = (void *)v146;
            v31[42] = (void *)v153;
            v31[43] = (void *)v152;
            v31[44] = v154;
            v31[45] = (void *)v201;
            v31[46] = (void *)v205;
            v31[47] = (void *)v209;
            v31[48] = v212;
            v31[49] = (void *)v223;
          }
          v155 = v32[51];
          if (v155 == (void *)1)
          {
            v156 = *((_OWORD *)v32 + 28);
            *((_OWORD *)v31 + 27) = *((_OWORD *)v32 + 27);
            *((_OWORD *)v31 + 28) = v156;
            *((_BYTE *)v31 + 464) = *((_BYTE *)v32 + 464);
            v157 = *((_OWORD *)v32 + 26);
            *((_OWORD *)v31 + 25) = *((_OWORD *)v32 + 25);
            *((_OWORD *)v31 + 26) = v157;
          }
          else
          {
            *((_DWORD *)v31 + 100) = *((_DWORD *)v32 + 100);
            *((_BYTE *)v31 + 404) = *((_BYTE *)v32 + 404);
            if (v155)
            {
              v158 = v32[52];
              v31[51] = v155;
              v31[52] = v158;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v31 + 51) = *(_OWORD *)(v32 + 51);
            }
            v159 = v32[53];
            if (v159)
            {
              v160 = v32[54];
              v31[53] = v159;
              v31[54] = v160;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v31 + 53) = *(_OWORD *)(v32 + 53);
            }
            v161 = v32[55];
            if (v161)
            {
              v162 = v32[56];
              v31[55] = v161;
              v31[56] = v162;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v31 + 55) = *(_OWORD *)(v32 + 55);
            }
            v31[57] = v32[57];
            *((_BYTE *)v31 + 464) = *((_BYTE *)v32 + 464);
          }
          v163 = v32[60];
          v31[59] = v32[59];
          v31[60] = v163;
          v31[61] = v32[61];
          *((_BYTE *)v31 + 496) = *((_BYTE *)v32 + 496);
          v164 = v32[63];
          swift_bridgeObjectRetain();
          if (v164)
          {
            v165 = v32[64];
            v31[63] = v164;
            v31[64] = v165;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v31 + 63) = *(_OWORD *)(v32 + 63);
          }
          *((_WORD *)v31 + 260) = *((_WORD *)v32 + 260);
          v166 = v32[66];
          if (v166)
          {
            v31[66] = v166;
            v31[67] = v32[67];
            v31[68] = v32[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v31 + 33) = *((_OWORD *)v32 + 33);
            v31[68] = v32[68];
          }
          v167 = v32[69];
          if (v167 == (void *)1)
          {
            *(_OWORD *)(v31 + 69) = *(_OWORD *)(v32 + 69);
            v31[71] = v32[71];
          }
          else
          {
            v31[69] = v167;
            v168 = v32[70];
            swift_retain();
            if (v168)
            {
              v169 = v32[71];
              v31[70] = v168;
              v31[71] = v169;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v31 + 35) = *((_OWORD *)v32 + 35);
            }
          }
          v170 = v32[72];
          v31[72] = v170;
          v31[73] = v32[73];
          v31[74] = v32[74];
          v31[75] = v32[75];
          v31[76] = v32[76];
          v31[77] = v32[77];
          v31[78] = v32[78];
          *((_WORD *)v31 + 316) = *((_WORD *)v32 + 316);
          *((_BYTE *)v31 + 634) = *((_BYTE *)v32 + 634);
          v213 = (int *)type metadata accessor for PlatformItemList.Item();
          v171 = v213[28];
          v224 = (char *)v31 + v171;
          v172 = (char *)v32 + v171;
          v173 = type metadata accessor for CommandOperation();
          v202 = *(_QWORD *)(v173 - 8);
          v206 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v202 + 48);
          v174 = v170;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v206(v172, 1, v173))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v224, v172, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
            v6 = v215;
            v34 = v217;
            v33 = v219;
          }
          else
          {
            *v224 = *v172;
            v176 = *(int *)(v173 + 20);
            v177 = &v224[v176];
            v178 = &v172[v176];
            v210 = v172;
            v179 = v173;
            v180 = *(_QWORD *)&v172[v176];
            v181 = *((_QWORD *)v178 + 1);
            v182 = v178[16];
            outlined copy of Text.Storage(v180, v181, v182);
            *(_QWORD *)v177 = v180;
            *((_QWORD *)v177 + 1) = v181;
            v177[16] = v182;
            *((_QWORD *)v177 + 3) = *((_QWORD *)v178 + 3);
            v183 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v184 = &v177[v183];
            v185 = &v178[v183];
            v186 = type metadata accessor for UUID();
            v187 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v186 - 8) + 16);
            swift_bridgeObjectRetain();
            v187(v184, v185, v186);
            v188 = *(int *)(v179 + 24);
            v189 = &v224[v188];
            v190 = &v210[v188];
            if (*v190)
            {
              v191 = v190[1];
              *v189 = *v190;
              v189[1] = v191;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v189 = *(_OWORD *)v190;
            }
            v6 = v215;
            v34 = v217;
            v33 = v219;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v224, 0, 1, v179);
          }
          *((_BYTE *)v31 + v213[29]) = *((_BYTE *)v32 + v213[29]);
          *((_BYTE *)v31 + v213[30]) = *((_BYTE *)v32 + v213[30]);
          *((_BYTE *)v31 + v213[31]) = *((_BYTE *)v32 + v213[31]);
          *((_BYTE *)v31 + v213[32]) = *((_BYTE *)v32 + v213[32]);
          *(void **)((char *)v31 + v213[33]) = *(void **)((char *)v32 + v213[33]);
          swift_retain();
        }
        else
        {
          v71 = *(_OWORD *)(v32 + 3);
          *(_OWORD *)(v31 + 3) = v71;
          (**(void (***)(void **, void **))(v71 - 8))(v31, v32);
          v31[5] = v32[5];
          v31[6] = v32[6];
          v31[7] = v32[7];
          *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
          v72 = v32[10];
          v31[10] = v72;
          swift_retain();
          swift_bridgeObjectRetain();
          v73 = v72;
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      goto LABEL_113;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, v3, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_114:
      *(_BYTE *)(a1 + *(int *)(v6 + 20)) = *((_BYTE *)v3 + *(int *)(v6 + 20));
      return a1;
    }
    *(_QWORD *)a1 = *v3;
    *(_QWORD *)(a1 + 8) = v3[1];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)v3 + 1);
    v9 = v3[5];
    *(_QWORD *)(a1 + 32) = v3[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = *((unsigned __int8 *)v3 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10 == 1)
    {
      v11 = *(_OWORD *)(v3 + 9);
      *(_OWORD *)(a1 + 72) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, (uint64_t)(v3 + 6));
      *(_BYTE *)(a1 + 88) = 1;
    }
    else
    {
      v16 = *((_OWORD *)v3 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)v3 + 3);
      *(_OWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v3 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)v3 + 89);
    *(_QWORD *)(a1 + 96) = v3[12];
    v17 = *((_OWORD *)v3 + 8);
    *(_OWORD *)(a1 + 128) = v17;
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 104, (uint64_t)(v3 + 13));
    *(_QWORD *)(a1 + 144) = v3[18];
    *(_QWORD *)(a1 + 152) = v3[19];
    *(_QWORD *)(a1 + 160) = v3[20];
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v3 + 21);
    v18 = (void *)v3[23];
    *(_QWORD *)(a1 + 184) = v18;
    v218 = v3;
    v222 = type metadata accessor for ToolbarStorage.Item(0);
    v19 = *(int *)(v222 + 48);
    v20 = (void **)(a1 + v19);
    v21 = (void **)((char *)v3 + v19);
    v22 = type metadata accessor for PlatformItemList.Item();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v25 = v18;
    if (v24(v21, 1, v22))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v3 = v218;
      v27 = v222;
LABEL_68:
      swift_weakCopyInit();
      *(_BYTE *)(a1 + *(int *)(v27 + 56)) = *((_BYTE *)v3 + *(int *)(v27 + 56));
      *(_BYTE *)(a1 + *(int *)(v27 + 60)) = *((_BYTE *)v3 + *(int *)(v27 + 60));
LABEL_113:
      swift_storeEnumTagMultiPayload();
      goto LABEL_114;
    }
    v211 = v23;
    v214 = v6;
    v216 = (int *)v22;
    v37 = *v21;
    v38 = v21[1];
    *v20 = *v21;
    v20[1] = v38;
    v39 = v21[3];
    v20[2] = v21[2];
    v20[3] = v39;
    *((_BYTE *)v20 + 32) = *((_BYTE *)v21 + 32);
    v40 = v21[6];
    v20[5] = v21[5];
    v20[6] = v40;
    *((_BYTE *)v20 + 56) = *((_BYTE *)v21 + 56);
    v41 = v20 + 8;
    v42 = v21 + 8;
    v43 = (unint64_t)v21[23];
    v44 = v37;
    v45 = v38;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v43 >> 1 == 4294967294)
    {
      v46 = *((_OWORD *)v21 + 13);
      *((_OWORD *)v20 + 12) = *((_OWORD *)v21 + 12);
      *((_OWORD *)v20 + 13) = v46;
      *((_OWORD *)v20 + 14) = *((_OWORD *)v21 + 14);
      *(_DWORD *)((char *)v20 + 239) = *(_DWORD *)((char *)v21 + 239);
      v47 = *((_OWORD *)v21 + 9);
      *((_OWORD *)v20 + 8) = *((_OWORD *)v21 + 8);
      *((_OWORD *)v20 + 9) = v47;
      v48 = *((_OWORD *)v21 + 11);
      *((_OWORD *)v20 + 10) = *((_OWORD *)v21 + 10);
      *((_OWORD *)v20 + 11) = v48;
      v49 = *((_OWORD *)v21 + 5);
      *v41 = *v42;
      *((_OWORD *)v20 + 5) = v49;
      v50 = *((_OWORD *)v21 + 7);
      *((_OWORD *)v20 + 6) = *((_OWORD *)v21 + 6);
      *((_OWORD *)v20 + 7) = v50;
      v3 = v218;
      v51 = v21[32];
      if (v51)
      {
LABEL_18:
        v20[31] = v21[31];
        v20[32] = v51;
        v52 = v21[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v52 >= 2)
          v53 = v52;
        v20[33] = v52;
        *((_DWORD *)v20 + 68) = *((_DWORD *)v21 + 68);
        *((_BYTE *)v20 + 276) = *((_BYTE *)v21 + 276);
        *(_WORD *)((char *)v20 + 277) = *(_WORD *)((char *)v21 + 277);
        v54 = v21[36];
        v20[35] = v21[35];
        v20[36] = v54;
        swift_retain();
        swift_retain();
        goto LABEL_35;
      }
    }
    else
    {
      v69 = *((unsigned __int8 *)v21 + 72);
      if (v69 == 255)
      {
        *(_QWORD *)v41 = *(_QWORD *)v42;
        *((_BYTE *)v20 + 72) = *((_BYTE *)v21 + 72);
      }
      else
      {
        v70 = v21[8];
        outlined copy of GraphicsImage.Contents(v70, *((_BYTE *)v21 + 72));
        v20[8] = v70;
        *((_BYTE *)v20 + 72) = v69;
        v43 = (unint64_t)v21[23];
      }
      v20[10] = v21[10];
      *(_OWORD *)(v20 + 11) = *(_OWORD *)(v21 + 11);
      *((_BYTE *)v20 + 104) = *((_BYTE *)v21 + 104);
      *(_OWORD *)((char *)v20 + 108) = *(_OWORD *)((char *)v21 + 108);
      *((_BYTE *)v20 + 124) = *((_BYTE *)v21 + 124);
      v76 = *((_OWORD *)v21 + 9);
      *((_OWORD *)v20 + 8) = *((_OWORD *)v21 + 8);
      *((_OWORD *)v20 + 9) = v76;
      *((_WORD *)v20 + 80) = *((_WORD *)v21 + 80);
      *((_BYTE *)v20 + 162) = *((_BYTE *)v21 + 162);
      *((_BYTE *)v20 + 163) = *((_BYTE *)v21 + 163);
      v3 = v218;
      if (v43 >> 1 == 0xFFFFFFFF)
      {
        v77 = *(_OWORD *)(v21 + 23);
        *(_OWORD *)(v20 + 21) = *(_OWORD *)(v21 + 21);
        *(_OWORD *)(v20 + 23) = v77;
      }
      else
      {
        v78 = (uint64_t)v21[21];
        v79 = (uint64_t)v21[22];
        v80 = v21[24];
        outlined copy of AccessibilityImageLabel(v78, v79, v43);
        v20[21] = (void *)v78;
        v20[22] = (void *)v79;
        v20[23] = (void *)v43;
        v20[24] = v80;
      }
      v81 = v21[26];
      v20[25] = v21[25];
      v20[26] = v81;
      *((_WORD *)v20 + 108) = *((_WORD *)v21 + 108);
      *((_DWORD *)v20 + 55) = *((_DWORD *)v21 + 55);
      *((_BYTE *)v20 + 224) = *((_BYTE *)v21 + 224);
      v82 = v21[29];
      v20[29] = v82;
      *((_WORD *)v20 + 120) = *((_WORD *)v21 + 120);
      *((_BYTE *)v20 + 242) = *((_BYTE *)v21 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v83 = v82;
      v51 = v21[32];
      if (v51)
        goto LABEL_18;
    }
    v84 = *(_OWORD *)(v21 + 33);
    *(_OWORD *)(v20 + 31) = *(_OWORD *)(v21 + 31);
    *(_OWORD *)(v20 + 33) = v84;
    *(_OWORD *)(v20 + 35) = *(_OWORD *)(v21 + 35);
LABEL_35:
    v85 = (unint64_t)v21[41];
    if (v85 >> 2 == 0xFFFFFFFF)
    {
      v86 = *(_OWORD *)(v21 + 47);
      *(_OWORD *)(v20 + 45) = *(_OWORD *)(v21 + 45);
      *(_OWORD *)(v20 + 47) = v86;
      v20[49] = v21[49];
      v87 = *(_OWORD *)(v21 + 39);
      *(_OWORD *)(v20 + 37) = *(_OWORD *)(v21 + 37);
      *(_OWORD *)(v20 + 39) = v87;
      v88 = *(_OWORD *)(v21 + 43);
      *(_OWORD *)(v20 + 41) = *(_OWORD *)(v21 + 41);
      *(_OWORD *)(v20 + 43) = v88;
    }
    else
    {
      v89 = v21[37];
      v90 = (uint64_t)v21[38];
      v193 = (uint64_t)v21[40];
      v194 = (uint64_t)v21[39];
      v92 = (uint64_t)v21[42];
      v91 = (uint64_t)v21[43];
      v93 = v21[44];
      v196 = (uint64_t)v21[45];
      v199 = (uint64_t)v21[46];
      v203 = (uint64_t)v21[47];
      v207 = v21[48];
      v220 = (uint64_t)v21[49];
      outlined copy of PlatformItemList.Item.SystemItem(v89, v90, v194, v193, v85, v92, v91, (char)v93, v196, v199, v203, (char)v207, v220);
      v20[37] = v89;
      v20[38] = (void *)v90;
      v20[39] = (void *)v194;
      v20[40] = (void *)v193;
      v20[41] = (void *)v85;
      v20[42] = (void *)v92;
      v20[43] = (void *)v91;
      v20[44] = v93;
      v20[45] = (void *)v196;
      v20[46] = (void *)v199;
      v20[47] = (void *)v203;
      v20[48] = v207;
      v20[49] = (void *)v220;
    }
    v94 = v21[51];
    if (v94 == (void *)1)
    {
      v95 = *((_OWORD *)v21 + 28);
      *((_OWORD *)v20 + 27) = *((_OWORD *)v21 + 27);
      *((_OWORD *)v20 + 28) = v95;
      *((_BYTE *)v20 + 464) = *((_BYTE *)v21 + 464);
      v96 = *((_OWORD *)v21 + 26);
      *((_OWORD *)v20 + 25) = *((_OWORD *)v21 + 25);
      *((_OWORD *)v20 + 26) = v96;
    }
    else
    {
      *((_DWORD *)v20 + 100) = *((_DWORD *)v21 + 100);
      *((_BYTE *)v20 + 404) = *((_BYTE *)v21 + 404);
      if (v94)
      {
        v97 = v21[52];
        v20[51] = v94;
        v20[52] = v97;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v20 + 51) = *(_OWORD *)(v21 + 51);
      }
      v98 = v21[53];
      if (v98)
      {
        v99 = v21[54];
        v20[53] = v98;
        v20[54] = v99;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v20 + 53) = *(_OWORD *)(v21 + 53);
      }
      v100 = v21[55];
      if (v100)
      {
        v101 = v21[56];
        v20[55] = v100;
        v20[56] = v101;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v20 + 55) = *(_OWORD *)(v21 + 55);
      }
      v20[57] = v21[57];
      *((_BYTE *)v20 + 464) = *((_BYTE *)v21 + 464);
    }
    v102 = v21[60];
    v20[59] = v21[59];
    v20[60] = v102;
    v20[61] = v21[61];
    *((_BYTE *)v20 + 496) = *((_BYTE *)v21 + 496);
    v103 = v21[63];
    swift_bridgeObjectRetain();
    if (v103)
    {
      v104 = v21[64];
      v20[63] = v103;
      v20[64] = v104;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v20 + 63) = *(_OWORD *)(v21 + 63);
    }
    *((_WORD *)v20 + 260) = *((_WORD *)v21 + 260);
    v105 = v21[66];
    if (v105)
    {
      v20[66] = v105;
      v20[67] = v21[67];
      v20[68] = v21[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v20 + 33) = *((_OWORD *)v21 + 33);
      v20[68] = v21[68];
    }
    v106 = v21[69];
    if (v106 == (void *)1)
    {
      *(_OWORD *)(v20 + 69) = *(_OWORD *)(v21 + 69);
      v20[71] = v21[71];
    }
    else
    {
      v20[69] = v106;
      v107 = v21[70];
      swift_retain();
      if (v107)
      {
        v108 = v21[71];
        v20[70] = v107;
        v20[71] = v108;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v20 + 35) = *((_OWORD *)v21 + 35);
      }
    }
    v109 = v21[72];
    v20[72] = v109;
    v20[73] = v21[73];
    v20[74] = v21[74];
    v20[75] = v21[75];
    v20[76] = v21[76];
    v20[77] = v21[77];
    v20[78] = v21[78];
    *((_WORD *)v20 + 316) = *((_WORD *)v21 + 316);
    *((_BYTE *)v20 + 634) = *((_BYTE *)v21 + 634);
    v110 = v216[28];
    v221 = (char *)v20 + v110;
    v111 = (char *)v21 + v110;
    v112 = type metadata accessor for CommandOperation();
    v200 = *(_QWORD *)(v112 - 8);
    v204 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v200 + 48);
    v113 = v109;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v204(v111, 1, v112))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v221, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
      v115 = v211;
      v6 = v214;
    }
    else
    {
      *v221 = *v111;
      v116 = *(int *)(v112 + 20);
      v117 = v111;
      v197 = v111;
      v118 = &v221[v116];
      v208 = v112;
      v119 = &v117[v116];
      v120 = *(_QWORD *)&v117[v116];
      v121 = *(_QWORD *)&v117[v116 + 8];
      v122 = v117[v116 + 16];
      outlined copy of Text.Storage(v120, v121, v122);
      *(_QWORD *)v118 = v120;
      *((_QWORD *)v118 + 1) = v121;
      v118[16] = v122;
      *((_QWORD *)v118 + 3) = *((_QWORD *)v119 + 3);
      v123 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v124 = &v118[v123];
      v125 = &v119[v123];
      v126 = type metadata accessor for UUID();
      v127 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 16);
      swift_bridgeObjectRetain();
      v127(v124, v125, v126);
      v128 = *(int *)(v208 + 24);
      v129 = &v221[v128];
      v130 = &v197[v128];
      if (*v130)
      {
        v131 = v130[1];
        *v129 = *v130;
        v129[1] = v131;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v129 = *(_OWORD *)v130;
      }
      v115 = v211;
      v6 = v214;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v200 + 56))(v221, 0, 1, v208);
    }
    *((_BYTE *)v20 + v216[29]) = *((_BYTE *)v21 + v216[29]);
    *((_BYTE *)v20 + v216[30]) = *((_BYTE *)v21 + v216[30]);
    *((_BYTE *)v20 + v216[31]) = *((_BYTE *)v21 + v216[31]);
    *((_BYTE *)v20 + v216[32]) = *((_BYTE *)v21 + v216[32]);
    *(void **)((char *)v20 + v216[33]) = *(void **)((char *)v21 + v216[33]);
    v132 = *(void (**)(void **, _QWORD, uint64_t, int *))(v115 + 56);
    swift_retain();
    v132(v20, 0, 1, v216);
    v27 = v222;
    goto LABEL_68;
  }
  v12 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

void destroy for ToolbarStorage.Entry(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a1 + 56) == 1)
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    swift_bridgeObjectRelease();
    v16 = a1 + *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v17 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
      return;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v16);
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }

    swift_bridgeObjectRelease();
    swift_release();
    v18 = *(_QWORD *)(v16 + 184);
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v20 = *(unsigned __int8 *)(v16 + 72);
      if (v20 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v16 + 64), v20);
        v18 = *(_QWORD *)(v16 + 184);
        v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v19 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v16 + 168), *(_QWORD *)(v16 + 176), v18);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v16 + 256))
    {
      swift_bridgeObjectRelease();
      v21 = *(void **)(v16 + 264);
      if ((unint64_t)v21 >= 2)

      swift_release();
      swift_release();
    }
    v22 = *(_QWORD *)(v16 + 328);
    if (v22 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v16 + 296), *(_QWORD *)(v16 + 304), *(_QWORD *)(v16 + 312), *(_QWORD *)(v16 + 320), v22, *(_QWORD *)(v16 + 336), *(_QWORD *)(v16 + 344), *(_QWORD *)(v16 + 352), *(_QWORD *)(v16 + 360), *(_QWORD *)(v16 + 368), *(_QWORD *)(v16 + 376), *(_QWORD *)(v16 + 384), *(_QWORD *)(v16 + 392));
    v23 = *(_QWORD *)(v16 + 408);
    if (v23)
    {
      if (v23 == 1)
      {
LABEL_61:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v16 + 504))
          swift_release();
        if (*(_QWORD *)(v16 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v16 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v16 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = v16 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        v25 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
        {
          v26 = v24 + *(int *)(v25 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
          swift_bridgeObjectRelease();
          v27 = v26 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v28 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
          if (*(_QWORD *)(v24 + *(int *)(v25 + 24)))
            swift_release();
        }
        swift_release();
        return;
      }
      swift_release();
    }
    if (*(_QWORD *)(v16 + 424))
      swift_release();
    if (*(_QWORD *)(v16 + 440))
      swift_release();
    goto LABEL_61;
  }
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a1 + 88) == 1)
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    swift_release();
    swift_bridgeObjectRelease();

    v3 = a1 + *(int *)(type metadata accessor for ToolbarStorage.Item(0) + 48);
    v4 = type metadata accessor for PlatformItemList.Item();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
      goto LABEL_36;

    swift_bridgeObjectRelease();
    swift_release();
    v5 = *(_QWORD *)(v3 + 184);
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v7 = *(unsigned __int8 *)(v3 + 72);
      if (v7 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v7);
        v5 = *(_QWORD *)(v3 + 184);
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v6 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v5);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v3 + 256))
    {
      swift_bridgeObjectRelease();
      v8 = *(void **)(v3 + 264);
      if ((unint64_t)v8 >= 2)

      swift_release();
      swift_release();
    }
    v9 = *(_QWORD *)(v3 + 328);
    if (v9 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v9, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
    v10 = *(_QWORD *)(v3 + 408);
    if (v10)
    {
      if (v10 == 1)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v3 + 504))
          swift_release();
        if (*(_QWORD *)(v3 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v3 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v3 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = v3 + *(int *)(v4 + 112);
        v12 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
        {
          v13 = v11 + *(int *)(v12 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
          swift_bridgeObjectRelease();
          v14 = v13 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v15 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
          if (*(_QWORD *)(v11 + *(int *)(v12 + 24)))
            swift_release();
        }
        swift_release();
LABEL_36:
        swift_weakDestroy();
        return;
      }
      swift_release();
    }
    if (*(_QWORD *)(v3 + 424))
      swift_release();
    if (*(_QWORD *)(v3 + 440))
      swift_release();
    goto LABEL_25;
  }
}

char *initializeWithCopy for ToolbarStorage.Entry(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(void **, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int (*v33)(void **, uint64_t, uint64_t);
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _OWORD *v39;
  _OWORD *v40;
  unint64_t v41;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _OWORD *v57;
  _OWORD *v58;
  unint64_t v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  int v71;
  void *v72;
  __int128 v73;
  void *v74;
  id v75;
  int v76;
  void *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  __int128 v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  __int128 v97;
  __int128 v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  void (*v129)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  void (*v134)(void **, _QWORD, uint64_t, int *);
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  __int128 v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  _BYTE *v181;
  _BYTE *v182;
  uint64_t v183;
  void (*v184)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int (*v201)(_BYTE *, uint64_t, uint64_t);
  uint64_t v202;
  unsigned int (*v203)(_BYTE *, uint64_t, uint64_t);
  void *v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  _QWORD *__dst;
  void *__dstb;
  _BYTE *__dsta;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  void *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;

  v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v11 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v11;
    v12 = a2[56];
    swift_bridgeObjectRetain();
    if (v12 == 1)
    {
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
      a1[56] = 1;
    }
    else
    {
      v26 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v26;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    v27 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a1 + 9) = v27;
    v28 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v29 = (void **)&a1[v28];
    v30 = (void **)&a2[v28];
    v31 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v32 = *(_QWORD **)(v31 - 8);
    v33 = (unsigned int (*)(void **, uint64_t, uint64_t))v32[6];
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
LABEL_108:
      swift_storeEnumTagMultiPayload();
      goto LABEL_109;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v73 = *(_OWORD *)(v30 + 3);
      *(_OWORD *)(v29 + 3) = v73;
      (**(void (***)(void **, void **))(v73 - 8))(v29, v30);
      v29[5] = v30[5];
      v29[6] = v30[6];
      v29[7] = v30[7];
      *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
      v74 = v30[10];
      v29[10] = v74;
      swift_retain();
      swift_bridgeObjectRetain();
      v75 = v74;
LABEL_107:
      swift_storeEnumTagMultiPayload();
      ((void (*)(void **, _QWORD, uint64_t, uint64_t))v32[7])(v29, 0, 1, v31);
      goto LABEL_108;
    }
    __dst = v32;
    v212 = v31;
    v220 = a3;
    v53 = *v30;
    v54 = v30[1];
    *v29 = *v30;
    v29[1] = v54;
    v55 = v30[3];
    v29[2] = v30[2];
    v29[3] = v55;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    v56 = v30[6];
    v29[5] = v30[5];
    v29[6] = v56;
    *((_BYTE *)v29 + 56) = *((_BYTE *)v30 + 56);
    v57 = v29 + 8;
    v58 = v30 + 8;
    v59 = (unint64_t)v30[23];
    v60 = v53;
    v61 = v54;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v59 >> 1 == 4294967294)
    {
      v62 = *((_OWORD *)v30 + 13);
      *((_OWORD *)v29 + 12) = *((_OWORD *)v30 + 12);
      *((_OWORD *)v29 + 13) = v62;
      *((_OWORD *)v29 + 14) = *((_OWORD *)v30 + 14);
      *(_DWORD *)((char *)v29 + 239) = *(_DWORD *)((char *)v30 + 239);
      v63 = *((_OWORD *)v30 + 9);
      *((_OWORD *)v29 + 8) = *((_OWORD *)v30 + 8);
      *((_OWORD *)v29 + 9) = v63;
      v64 = *((_OWORD *)v30 + 11);
      *((_OWORD *)v29 + 10) = *((_OWORD *)v30 + 10);
      *((_OWORD *)v29 + 11) = v64;
      v65 = *((_OWORD *)v30 + 5);
      *v57 = *v58;
      *((_OWORD *)v29 + 5) = v65;
      v66 = *((_OWORD *)v30 + 7);
      *((_OWORD *)v29 + 6) = *((_OWORD *)v30 + 6);
      *((_OWORD *)v29 + 7) = v66;
      v67 = v30[32];
      if (v67)
      {
LABEL_22:
        v29[31] = v30[31];
        v29[32] = v67;
        v68 = v30[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v68 >= 2)
          v69 = v68;
        v29[33] = v68;
        *((_DWORD *)v29 + 68) = *((_DWORD *)v30 + 68);
        *((_BYTE *)v29 + 276) = *((_BYTE *)v30 + 276);
        *(_WORD *)((char *)v29 + 277) = *(_WORD *)((char *)v30 + 277);
        v70 = v30[36];
        v29[35] = v30[35];
        v29[36] = v70;
        swift_retain();
        swift_retain();
        goto LABEL_74;
      }
    }
    else
    {
      v76 = *((unsigned __int8 *)v30 + 72);
      if (v76 == 255)
      {
        *(_QWORD *)v57 = *(_QWORD *)v58;
        *((_BYTE *)v29 + 72) = *((_BYTE *)v30 + 72);
      }
      else
      {
        v77 = v30[8];
        outlined copy of GraphicsImage.Contents(v77, *((_BYTE *)v30 + 72));
        v29[8] = v77;
        *((_BYTE *)v29 + 72) = v76;
        v59 = (unint64_t)v30[23];
      }
      v29[10] = v30[10];
      *(_OWORD *)(v29 + 11) = *(_OWORD *)(v30 + 11);
      *((_BYTE *)v29 + 104) = *((_BYTE *)v30 + 104);
      *(_OWORD *)((char *)v29 + 108) = *(_OWORD *)((char *)v30 + 108);
      *((_BYTE *)v29 + 124) = *((_BYTE *)v30 + 124);
      v135 = *((_OWORD *)v30 + 9);
      *((_OWORD *)v29 + 8) = *((_OWORD *)v30 + 8);
      *((_OWORD *)v29 + 9) = v135;
      *((_WORD *)v29 + 80) = *((_WORD *)v30 + 80);
      *((_BYTE *)v29 + 162) = *((_BYTE *)v30 + 162);
      *((_BYTE *)v29 + 163) = *((_BYTE *)v30 + 163);
      if (v59 >> 1 == 0xFFFFFFFF)
      {
        v136 = *(_OWORD *)(v30 + 23);
        *(_OWORD *)(v29 + 21) = *(_OWORD *)(v30 + 21);
        *(_OWORD *)(v29 + 23) = v136;
      }
      else
      {
        v137 = (uint64_t)v30[21];
        v138 = (uint64_t)v30[22];
        v139 = v30[24];
        outlined copy of AccessibilityImageLabel(v137, v138, v59);
        v29[21] = (void *)v137;
        v29[22] = (void *)v138;
        v29[23] = (void *)v59;
        v29[24] = v139;
      }
      v140 = v30[26];
      v29[25] = v30[25];
      v29[26] = v140;
      *((_WORD *)v29 + 108) = *((_WORD *)v30 + 108);
      *((_DWORD *)v29 + 55) = *((_DWORD *)v30 + 55);
      *((_BYTE *)v29 + 224) = *((_BYTE *)v30 + 224);
      v141 = v30[29];
      v29[29] = v141;
      *((_WORD *)v29 + 120) = *((_WORD *)v30 + 120);
      *((_BYTE *)v29 + 242) = *((_BYTE *)v30 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v142 = v141;
      v67 = v30[32];
      if (v67)
        goto LABEL_22;
    }
    v143 = *(_OWORD *)(v30 + 33);
    *(_OWORD *)(v29 + 31) = *(_OWORD *)(v30 + 31);
    *(_OWORD *)(v29 + 33) = v143;
    *(_OWORD *)(v29 + 35) = *(_OWORD *)(v30 + 35);
LABEL_74:
    v144 = (unint64_t)v30[41];
    if (v144 >> 2 == 0xFFFFFFFF)
    {
      v145 = *(_OWORD *)(v30 + 47);
      *(_OWORD *)(v29 + 45) = *(_OWORD *)(v30 + 45);
      *(_OWORD *)(v29 + 47) = v145;
      v29[49] = v30[49];
      v146 = *(_OWORD *)(v30 + 39);
      *(_OWORD *)(v29 + 37) = *(_OWORD *)(v30 + 37);
      *(_OWORD *)(v29 + 39) = v146;
      v147 = *(_OWORD *)(v30 + 43);
      *(_OWORD *)(v29 + 41) = *(_OWORD *)(v30 + 41);
      *(_OWORD *)(v29 + 43) = v147;
    }
    else
    {
      v148 = v30[37];
      v149 = (uint64_t)v30[38];
      v192 = (uint64_t)v30[40];
      v195 = (uint64_t)v30[39];
      v151 = (uint64_t)v30[42];
      v150 = (uint64_t)v30[43];
      v152 = v30[44];
      v198 = (uint64_t)v30[45];
      v202 = (uint64_t)v30[46];
      v206 = (uint64_t)v30[47];
      v214 = v30[48];
      v217 = (uint64_t)v30[49];
      outlined copy of PlatformItemList.Item.SystemItem(v148, v149, v195, v192, v144, v151, v150, (char)v152, v198, v202, v206, (char)v214, v217);
      v29[37] = v148;
      v29[38] = (void *)v149;
      v29[39] = (void *)v195;
      v29[40] = (void *)v192;
      v29[41] = (void *)v144;
      v29[42] = (void *)v151;
      v29[43] = (void *)v150;
      v29[44] = v152;
      v29[45] = (void *)v198;
      v29[46] = (void *)v202;
      v29[47] = (void *)v206;
      v29[48] = v214;
      v29[49] = (void *)v217;
    }
    v153 = v30[51];
    if (v153 == (void *)1)
    {
      v154 = *((_OWORD *)v30 + 28);
      *((_OWORD *)v29 + 27) = *((_OWORD *)v30 + 27);
      *((_OWORD *)v29 + 28) = v154;
      *((_BYTE *)v29 + 464) = *((_BYTE *)v30 + 464);
      v155 = *((_OWORD *)v30 + 26);
      *((_OWORD *)v29 + 25) = *((_OWORD *)v30 + 25);
      *((_OWORD *)v29 + 26) = v155;
    }
    else
    {
      *((_DWORD *)v29 + 100) = *((_DWORD *)v30 + 100);
      *((_BYTE *)v29 + 404) = *((_BYTE *)v30 + 404);
      if (v153)
      {
        v156 = v30[52];
        v29[51] = v153;
        v29[52] = v156;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v29 + 51) = *(_OWORD *)(v30 + 51);
      }
      v157 = v30[53];
      if (v157)
      {
        v158 = v30[54];
        v29[53] = v157;
        v29[54] = v158;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v29 + 53) = *(_OWORD *)(v30 + 53);
      }
      v159 = v30[55];
      if (v159)
      {
        v160 = v30[56];
        v29[55] = v159;
        v29[56] = v160;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v29 + 55) = *(_OWORD *)(v30 + 55);
      }
      v29[57] = v30[57];
      *((_BYTE *)v29 + 464) = *((_BYTE *)v30 + 464);
    }
    v161 = v30[60];
    v29[59] = v30[59];
    v29[60] = v161;
    v29[61] = v30[61];
    *((_BYTE *)v29 + 496) = *((_BYTE *)v30 + 496);
    v162 = v30[63];
    swift_bridgeObjectRetain();
    if (v162)
    {
      v163 = v30[64];
      v29[63] = v162;
      v29[64] = v163;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v29 + 63) = *(_OWORD *)(v30 + 63);
    }
    *((_WORD *)v29 + 260) = *((_WORD *)v30 + 260);
    v164 = v30[66];
    if (v164)
    {
      v29[66] = v164;
      v29[67] = v30[67];
      v29[68] = v30[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v29 + 33) = *((_OWORD *)v30 + 33);
      v29[68] = v30[68];
    }
    v165 = v30[69];
    if (v165 == (void *)1)
    {
      *(_OWORD *)(v29 + 69) = *(_OWORD *)(v30 + 69);
      v29[71] = v30[71];
    }
    else
    {
      v29[69] = v165;
      v166 = v30[70];
      swift_retain();
      if (v166)
      {
        v167 = v30[71];
        v29[70] = v166;
        v29[71] = v167;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v29 + 35) = *((_OWORD *)v30 + 35);
      }
    }
    v168 = v30[72];
    v29[72] = v168;
    v29[73] = v30[73];
    v29[74] = v30[74];
    v29[75] = v30[75];
    v29[76] = v30[76];
    v29[77] = v30[77];
    v29[78] = v30[78];
    *((_WORD *)v29 + 316) = *((_WORD *)v30 + 316);
    *((_BYTE *)v29 + 634) = *((_BYTE *)v30 + 634);
    v207 = (int *)type metadata accessor for PlatformItemList.Item();
    v169 = v207[28];
    v218 = (char *)v29 + v169;
    v215 = (char *)v30 + v169;
    v170 = type metadata accessor for CommandOperation();
    v199 = *(_QWORD *)(v170 - 8);
    v203 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v199 + 48);
    v171 = v168;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v203(v215, 1, v170))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v218, v215, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
      a3 = v220;
      v32 = __dst;
      v31 = v212;
    }
    else
    {
      *v218 = *v215;
      v173 = *(int *)(v170 + 20);
      v174 = &v218[v173];
      v175 = &v215[v173];
      v176 = v170;
      v177 = *(_QWORD *)&v215[v173];
      v178 = *(_QWORD *)&v215[v173 + 8];
      v179 = v215[v173 + 16];
      outlined copy of Text.Storage(v177, *((_QWORD *)v175 + 1), v175[16]);
      *(_QWORD *)v174 = v177;
      *((_QWORD *)v174 + 1) = v178;
      v174[16] = v179;
      *((_QWORD *)v174 + 3) = *((_QWORD *)v175 + 3);
      v180 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v181 = &v174[v180];
      v182 = &v175[v180];
      v183 = type metadata accessor for UUID();
      v184 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v183 - 8) + 16);
      swift_bridgeObjectRetain();
      v184(v181, v182, v183);
      v185 = *(int *)(v176 + 24);
      v186 = &v218[v185];
      v187 = &v215[v185];
      if (*v187)
      {
        v188 = v187[1];
        *v186 = *v187;
        v186[1] = v188;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v186 = *(_OWORD *)v187;
      }
      a3 = v220;
      v32 = __dst;
      v31 = v212;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v218, 0, 1, v176);
    }
    *((_BYTE *)v29 + v207[29]) = *((_BYTE *)v30 + v207[29]);
    *((_BYTE *)v29 + v207[30]) = *((_BYTE *)v30 + v207[30]);
    *((_BYTE *)v29 + v207[31]) = *((_BYTE *)v30 + v207[31]);
    *((_BYTE *)v29 + v207[32]) = *((_BYTE *)v30 + v207[32]);
    *(void **)((char *)v29 + v207[33]) = *(void **)((char *)v30 + v207[33]);
    swift_retain();
    goto LABEL_107;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a1 + 5) = v8;
    v9 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v219 = a3;
    if (v9 == 1)
    {
      v10 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
      a1[88] = 1;
    }
    else
    {
      v14 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v14;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
    v15 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 8) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
    *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
    *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    v16 = (void *)*((_QWORD *)a2 + 23);
    *((_QWORD *)a1 + 23) = v16;
    v216 = type metadata accessor for ToolbarStorage.Item(0);
    v17 = *(int *)(v216 + 48);
    v18 = (void **)&a1[v17];
    v19 = (void **)&a2[v17];
    v20 = type metadata accessor for PlatformItemList.Item();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = v16;
    if (v22(v19, 1, v20))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      v25 = v216;
      a3 = v219;
LABEL_67:
      swift_weakCopyInit();
      a1[*(int *)(v25 + 56)] = a2[*(int *)(v25 + 56)];
      a1[*(int *)(v25 + 60)] = a2[*(int *)(v25 + 60)];
      goto LABEL_108;
    }
    v211 = v21;
    v213 = (int *)v20;
    v35 = *v19;
    v36 = v19[1];
    *v18 = *v19;
    v18[1] = v36;
    v37 = v19[3];
    v18[2] = v19[2];
    v18[3] = v37;
    *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
    v38 = v19[6];
    v18[5] = v19[5];
    v18[6] = v38;
    *((_BYTE *)v18 + 56) = *((_BYTE *)v19 + 56);
    v39 = v18 + 8;
    v40 = v19 + 8;
    v41 = (unint64_t)v19[23];
    v42 = v35;
    v43 = v36;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v41 >> 1 == 4294967294)
    {
      v44 = *((_OWORD *)v19 + 13);
      *((_OWORD *)v18 + 12) = *((_OWORD *)v19 + 12);
      *((_OWORD *)v18 + 13) = v44;
      *((_OWORD *)v18 + 14) = *((_OWORD *)v19 + 14);
      *(_DWORD *)((char *)v18 + 239) = *(_DWORD *)((char *)v19 + 239);
      v45 = *((_OWORD *)v19 + 9);
      *((_OWORD *)v18 + 8) = *((_OWORD *)v19 + 8);
      *((_OWORD *)v18 + 9) = v45;
      v46 = *((_OWORD *)v19 + 11);
      *((_OWORD *)v18 + 10) = *((_OWORD *)v19 + 10);
      *((_OWORD *)v18 + 11) = v46;
      v47 = *((_OWORD *)v19 + 5);
      *v39 = *v40;
      *((_OWORD *)v18 + 5) = v47;
      v48 = *((_OWORD *)v19 + 7);
      *((_OWORD *)v18 + 6) = *((_OWORD *)v19 + 6);
      *((_OWORD *)v18 + 7) = v48;
      v49 = v19[32];
      if (v49)
      {
LABEL_16:
        v18[31] = v19[31];
        v18[32] = v49;
        v50 = v19[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v50 >= 2)
          v51 = v50;
        v18[33] = v50;
        *((_DWORD *)v18 + 68) = *((_DWORD *)v19 + 68);
        *((_BYTE *)v18 + 276) = *((_BYTE *)v19 + 276);
        *(_WORD *)((char *)v18 + 277) = *(_WORD *)((char *)v19 + 277);
        v52 = v19[36];
        v18[35] = v19[35];
        v18[36] = v52;
        swift_retain();
        swift_retain();
LABEL_36:
        v87 = (unint64_t)v19[41];
        if (v87 >> 2 == 0xFFFFFFFF)
        {
          v88 = *(_OWORD *)(v19 + 47);
          *(_OWORD *)(v18 + 45) = *(_OWORD *)(v19 + 45);
          *(_OWORD *)(v18 + 47) = v88;
          v18[49] = v19[49];
          v89 = *(_OWORD *)(v19 + 39);
          *(_OWORD *)(v18 + 37) = *(_OWORD *)(v19 + 37);
          *(_OWORD *)(v18 + 39) = v89;
          v90 = *(_OWORD *)(v19 + 43);
          *(_OWORD *)(v18 + 41) = *(_OWORD *)(v19 + 41);
          *(_OWORD *)(v18 + 43) = v90;
        }
        else
        {
          v91 = v19[37];
          v92 = (uint64_t)v19[38];
          v190 = (uint64_t)v19[40];
          v191 = (uint64_t)v19[39];
          v93 = (uint64_t)v19[42];
          v94 = (uint64_t)v19[43];
          v95 = v19[44];
          v193 = (uint64_t)v19[45];
          v196 = (uint64_t)v19[46];
          v200 = (uint64_t)v19[47];
          v204 = v19[48];
          __dstb = v19[49];
          outlined copy of PlatformItemList.Item.SystemItem(v91, v92, v191, v190, v87, v93, v94, (char)v95, v193, v196, v200, (char)v204, (uint64_t)__dstb);
          v18[37] = v91;
          v18[38] = (void *)v92;
          v18[39] = (void *)v191;
          v18[40] = (void *)v190;
          v18[41] = (void *)v87;
          v18[42] = (void *)v93;
          v18[43] = (void *)v94;
          v18[44] = v95;
          v18[45] = (void *)v193;
          v18[46] = (void *)v196;
          v18[47] = (void *)v200;
          v18[48] = v204;
          v18[49] = __dstb;
        }
        v96 = v19[51];
        if (v96 == (void *)1)
        {
          v97 = *((_OWORD *)v19 + 28);
          *((_OWORD *)v18 + 27) = *((_OWORD *)v19 + 27);
          *((_OWORD *)v18 + 28) = v97;
          *((_BYTE *)v18 + 464) = *((_BYTE *)v19 + 464);
          v98 = *((_OWORD *)v19 + 26);
          *((_OWORD *)v18 + 25) = *((_OWORD *)v19 + 25);
          *((_OWORD *)v18 + 26) = v98;
LABEL_49:
          v104 = v19[60];
          v18[59] = v19[59];
          v18[60] = v104;
          v18[61] = v19[61];
          *((_BYTE *)v18 + 496) = *((_BYTE *)v19 + 496);
          v105 = v19[63];
          swift_bridgeObjectRetain();
          if (v105)
          {
            v106 = v19[64];
            v18[63] = v105;
            v18[64] = v106;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v18 + 63) = *(_OWORD *)(v19 + 63);
          }
          *((_WORD *)v18 + 260) = *((_WORD *)v19 + 260);
          v107 = v19[66];
          if (v107)
          {
            v18[66] = v107;
            v18[67] = v19[67];
            v18[68] = v19[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v18 + 33) = *((_OWORD *)v19 + 33);
            v18[68] = v19[68];
          }
          v108 = v19[69];
          if (v108 == (void *)1)
          {
            *(_OWORD *)(v18 + 69) = *(_OWORD *)(v19 + 69);
            v18[71] = v19[71];
          }
          else
          {
            v18[69] = v108;
            v109 = v19[70];
            swift_retain();
            if (v109)
            {
              v110 = v19[71];
              v18[70] = v109;
              v18[71] = v110;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v18 + 35) = *((_OWORD *)v19 + 35);
            }
          }
          v111 = v19[72];
          v18[72] = v111;
          v18[73] = v19[73];
          v18[74] = v19[74];
          v18[75] = v19[75];
          v18[76] = v19[76];
          v18[77] = v19[77];
          v18[78] = v19[78];
          *((_WORD *)v18 + 316) = *((_WORD *)v19 + 316);
          *((_BYTE *)v18 + 634) = *((_BYTE *)v19 + 634);
          v112 = v213[28];
          __dsta = (char *)v18 + v112;
          v113 = (char *)v19 + v112;
          v114 = type metadata accessor for CommandOperation();
          v197 = *(_QWORD *)(v114 - 8);
          v201 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v197 + 48);
          v115 = v111;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v201(v113, 1, v114))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(__dsta, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
            a3 = v219;
            v117 = v211;
          }
          else
          {
            *__dsta = *v113;
            v118 = *(int *)(v114 + 20);
            v119 = v113;
            v194 = v113;
            v120 = &__dsta[v118];
            v205 = v114;
            v121 = &v119[v118];
            v122 = *(_QWORD *)&v119[v118];
            v123 = *(_QWORD *)&v119[v118 + 8];
            v124 = v119[v118 + 16];
            outlined copy of Text.Storage(v122, v123, v124);
            *(_QWORD *)v120 = v122;
            *((_QWORD *)v120 + 1) = v123;
            v120[16] = v124;
            *((_QWORD *)v120 + 3) = *((_QWORD *)v121 + 3);
            v125 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v126 = &v120[v125];
            v127 = &v121[v125];
            v128 = type metadata accessor for UUID();
            v129 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v128 - 8) + 16);
            swift_bridgeObjectRetain();
            v129(v126, v127, v128);
            v130 = *(int *)(v205 + 24);
            v131 = &__dsta[v130];
            v132 = &v194[v130];
            if (*v132)
            {
              v133 = v132[1];
              *v131 = *v132;
              v131[1] = v133;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v131 = *(_OWORD *)v132;
            }
            a3 = v219;
            v117 = v211;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v197 + 56))(__dsta, 0, 1, v205);
          }
          *((_BYTE *)v18 + v213[29]) = *((_BYTE *)v19 + v213[29]);
          *((_BYTE *)v18 + v213[30]) = *((_BYTE *)v19 + v213[30]);
          *((_BYTE *)v18 + v213[31]) = *((_BYTE *)v19 + v213[31]);
          *((_BYTE *)v18 + v213[32]) = *((_BYTE *)v19 + v213[32]);
          *(void **)((char *)v18 + v213[33]) = *(void **)((char *)v19 + v213[33]);
          v134 = *(void (**)(void **, _QWORD, uint64_t, int *))(v117 + 56);
          swift_retain();
          v134(v18, 0, 1, v213);
          v25 = v216;
          goto LABEL_67;
        }
        *((_DWORD *)v18 + 100) = *((_DWORD *)v19 + 100);
        *((_BYTE *)v18 + 404) = *((_BYTE *)v19 + 404);
        if (v96)
        {
          v99 = v19[52];
          v18[51] = v96;
          v18[52] = v99;
          swift_retain();
          v100 = v19[53];
          if (v100)
            goto LABEL_43;
        }
        else
        {
          *(_OWORD *)(v18 + 51) = *(_OWORD *)(v19 + 51);
          v100 = v19[53];
          if (v100)
          {
LABEL_43:
            v101 = v19[54];
            v18[53] = v100;
            v18[54] = v101;
            swift_retain();
            v102 = v19[55];
            if (v102)
            {
LABEL_44:
              v103 = v19[56];
              v18[55] = v102;
              v18[56] = v103;
              swift_retain();
LABEL_48:
              v18[57] = v19[57];
              *((_BYTE *)v18 + 464) = *((_BYTE *)v19 + 464);
              goto LABEL_49;
            }
LABEL_47:
            *(_OWORD *)(v18 + 55) = *(_OWORD *)(v19 + 55);
            goto LABEL_48;
          }
        }
        *(_OWORD *)(v18 + 53) = *(_OWORD *)(v19 + 53);
        v102 = v19[55];
        if (v102)
          goto LABEL_44;
        goto LABEL_47;
      }
    }
    else
    {
      v71 = *((unsigned __int8 *)v19 + 72);
      if (v71 == 255)
      {
        *(_QWORD *)v39 = *(_QWORD *)v40;
        *((_BYTE *)v18 + 72) = *((_BYTE *)v19 + 72);
      }
      else
      {
        v72 = v19[8];
        outlined copy of GraphicsImage.Contents(v72, *((_BYTE *)v19 + 72));
        v18[8] = v72;
        *((_BYTE *)v18 + 72) = v71;
        v41 = (unint64_t)v19[23];
      }
      v18[10] = v19[10];
      *(_OWORD *)(v18 + 11) = *(_OWORD *)(v19 + 11);
      *((_BYTE *)v18 + 104) = *((_BYTE *)v19 + 104);
      *(_OWORD *)((char *)v18 + 108) = *(_OWORD *)((char *)v19 + 108);
      *((_BYTE *)v18 + 124) = *((_BYTE *)v19 + 124);
      v78 = *((_OWORD *)v19 + 9);
      *((_OWORD *)v18 + 8) = *((_OWORD *)v19 + 8);
      *((_OWORD *)v18 + 9) = v78;
      *((_WORD *)v18 + 80) = *((_WORD *)v19 + 80);
      *((_BYTE *)v18 + 162) = *((_BYTE *)v19 + 162);
      *((_BYTE *)v18 + 163) = *((_BYTE *)v19 + 163);
      if (v41 >> 1 == 0xFFFFFFFF)
      {
        v79 = *(_OWORD *)(v19 + 23);
        *(_OWORD *)(v18 + 21) = *(_OWORD *)(v19 + 21);
        *(_OWORD *)(v18 + 23) = v79;
      }
      else
      {
        v80 = (uint64_t)v19[21];
        v81 = (uint64_t)v19[22];
        v82 = v19[24];
        outlined copy of AccessibilityImageLabel(v80, v81, v41);
        v18[21] = (void *)v80;
        v18[22] = (void *)v81;
        v18[23] = (void *)v41;
        v18[24] = v82;
      }
      v83 = v19[26];
      v18[25] = v19[25];
      v18[26] = v83;
      *((_WORD *)v18 + 108) = *((_WORD *)v19 + 108);
      *((_DWORD *)v18 + 55) = *((_DWORD *)v19 + 55);
      *((_BYTE *)v18 + 224) = *((_BYTE *)v19 + 224);
      v84 = v19[29];
      v18[29] = v84;
      *((_WORD *)v18 + 120) = *((_WORD *)v19 + 120);
      *((_BYTE *)v18 + 242) = *((_BYTE *)v19 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v85 = v84;
      v49 = v19[32];
      if (v49)
        goto LABEL_16;
    }
    v86 = *(_OWORD *)(v19 + 33);
    *(_OWORD *)(v18 + 31) = *(_OWORD *)(v19 + 31);
    *(_OWORD *)(v18 + 33) = v86;
    *(_OWORD *)(v18 + 35) = *(_OWORD *)(v19 + 35);
    goto LABEL_36;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_109:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithCopy for ToolbarStorage.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(void **, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(void **, uint64_t, uint64_t);
  uint64_t v33;
  void *v34;
  void *v35;
  _OWORD *v36;
  id *v37;
  unint64_t v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  id v51;
  int v52;
  void *v53;
  void *v54;
  _OWORD *v55;
  id *v56;
  unint64_t v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  int v74;
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  __int128 v113;
  void *v114;
  _OWORD *v115;
  __int128 v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  void (*v137)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  void (*v142)(void **, _QWORD, uint64_t, int *);
  id v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  int v152;
  void *v153;
  id v154;
  void *v155;
  id v156;
  int v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  __int128 v183;
  void *v184;
  _OWORD *v185;
  __int128 v186;
  void *v187;
  void *v188;
  void *v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  void (*v206)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int (*v223)(_BYTE *, uint64_t, uint64_t);
  uint64_t v224;
  unsigned int (*v225)(_BYTE *, uint64_t, uint64_t);
  void *v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  void *__dstb;
  _BYTE *__dst;
  void *__dstc;
  int *__dsta;
  uint64_t v234;
  uint64_t v235;
  int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  uint64_t v242;

  if (a1 == a2)
    goto LABEL_113;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ToolbarStorage.Entry.Kind);
  v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    v10 = a2[56];
    swift_bridgeObjectRetain();
    if (v10 == 1)
    {
      v11 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 5) = v11;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
      a1[56] = 1;
    }
    else
    {
      v25 = *((_OWORD *)a2 + 1);
      v26 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      *((_OWORD *)a1 + 1) = v25;
      *((_OWORD *)a1 + 2) = v26;
    }
    a1[57] = a2[57];
    a1[58] = a2[58];
    a1[59] = a2[59];
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
    v27 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v28 = (void **)&a1[v27];
    v29 = (void **)&a2[v27];
    v30 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
LABEL_112:
      swift_storeEnumTagMultiPayload();
      goto LABEL_113;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v71 = v29[3];
      v28[3] = v71;
      v28[4] = v29[4];
      (**((void (***)(void **, void **))v71 - 1))(v28, v29);
      v28[5] = v29[5];
      *((_DWORD *)v28 + 12) = *((_DWORD *)v29 + 12);
      *((_DWORD *)v28 + 13) = *((_DWORD *)v29 + 13);
      v28[7] = v29[7];
      v28[8] = v29[8];
      v28[9] = v29[9];
      v72 = v29[10];
      v28[10] = v72;
      swift_retain();
      swift_bridgeObjectRetain();
      v73 = v72;
LABEL_111:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_112;
    }
    v235 = v31;
    v237 = v30;
    v242 = a3;
    v53 = *v29;
    *v28 = *v29;
    v54 = v29[1];
    v28[1] = v54;
    v28[2] = v29[2];
    v28[3] = v29[3];
    *((_BYTE *)v28 + 32) = *((_BYTE *)v29 + 32);
    v28[5] = v29[5];
    v28[6] = v29[6];
    *((_BYTE *)v28 + 56) = *((_BYTE *)v29 + 56);
    v55 = v28 + 8;
    v56 = v29 + 8;
    v57 = (unint64_t)v29[23];
    v58 = v53;
    v59 = v54;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v57 >> 1 == 4294967294)
    {
      v60 = *(_OWORD *)v56;
      v61 = *((_OWORD *)v29 + 5);
      v62 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v62;
      *v55 = v60;
      *((_OWORD *)v28 + 5) = v61;
      v63 = *((_OWORD *)v29 + 8);
      v64 = *((_OWORD *)v29 + 9);
      v65 = *((_OWORD *)v29 + 11);
      *((_OWORD *)v28 + 10) = *((_OWORD *)v29 + 10);
      *((_OWORD *)v28 + 11) = v65;
      *((_OWORD *)v28 + 8) = v63;
      *((_OWORD *)v28 + 9) = v64;
      v66 = *((_OWORD *)v29 + 12);
      v67 = *((_OWORD *)v29 + 13);
      v68 = *((_OWORD *)v29 + 14);
      *(_DWORD *)((char *)v28 + 239) = *(_DWORD *)((char *)v29 + 239);
      *((_OWORD *)v28 + 13) = v67;
      *((_OWORD *)v28 + 14) = v68;
      *((_OWORD *)v28 + 12) = v66;
    }
    else
    {
      v74 = *((unsigned __int8 *)v29 + 72);
      if (v74 == 255)
      {
        v143 = *v56;
        *((_BYTE *)v28 + 72) = *((_BYTE *)v29 + 72);
        *(_QWORD *)v55 = v143;
      }
      else
      {
        v75 = *v56;
        outlined copy of GraphicsImage.Contents(*v56, *((_BYTE *)v29 + 72));
        v28[8] = v75;
        *((_BYTE *)v28 + 72) = v74;
      }
      v28[10] = v29[10];
      *(_OWORD *)(v28 + 11) = *(_OWORD *)(v29 + 11);
      *((_BYTE *)v28 + 104) = *((_BYTE *)v29 + 104);
      v144 = *(_OWORD *)((char *)v29 + 108);
      *((_BYTE *)v28 + 124) = *((_BYTE *)v29 + 124);
      *(_OWORD *)((char *)v28 + 108) = v144;
      v145 = *((_OWORD *)v29 + 8);
      v146 = *((_OWORD *)v29 + 9);
      *((_BYTE *)v28 + 160) = *((_BYTE *)v29 + 160);
      *((_OWORD *)v28 + 8) = v145;
      *((_OWORD *)v28 + 9) = v146;
      *((_BYTE *)v28 + 161) = *((_BYTE *)v29 + 161);
      *((_BYTE *)v28 + 162) = *((_BYTE *)v29 + 162);
      *((_BYTE *)v28 + 163) = *((_BYTE *)v29 + 163);
      v147 = (unint64_t)v29[23];
      if (v147 >> 1 == 0xFFFFFFFF)
      {
        v148 = *(_OWORD *)(v29 + 23);
        *(_OWORD *)(v28 + 21) = *(_OWORD *)(v29 + 21);
        *(_OWORD *)(v28 + 23) = v148;
      }
      else
      {
        v149 = (uint64_t)v29[21];
        v150 = (uint64_t)v29[22];
        v151 = v29[24];
        outlined copy of AccessibilityImageLabel(v149, v150, (uint64_t)v29[23]);
        v28[21] = (void *)v149;
        v28[22] = (void *)v150;
        v28[23] = (void *)v147;
        v28[24] = v151;
      }
      v28[25] = v29[25];
      v28[26] = v29[26];
      *((_BYTE *)v28 + 216) = *((_BYTE *)v29 + 216);
      *((_BYTE *)v28 + 217) = *((_BYTE *)v29 + 217);
      v152 = *((_DWORD *)v29 + 55);
      *((_BYTE *)v28 + 224) = *((_BYTE *)v29 + 224);
      *((_DWORD *)v28 + 55) = v152;
      v153 = v29[29];
      v28[29] = v153;
      *((_WORD *)v28 + 120) = *((_WORD *)v29 + 120);
      *((_BYTE *)v28 + 242) = *((_BYTE *)v29 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v154 = v153;
    }
    if (v29[32])
    {
      v28[31] = v29[31];
      v28[32] = v29[32];
      v155 = v29[33];
      swift_bridgeObjectRetain();
      if ((unint64_t)v155 >= 2)
        v156 = v155;
      v28[33] = v155;
      v157 = *((_DWORD *)v29 + 68);
      *((_BYTE *)v28 + 276) = *((_BYTE *)v29 + 276);
      *((_DWORD *)v28 + 68) = v157;
      *((_BYTE *)v28 + 277) = *((_BYTE *)v29 + 277);
      *((_BYTE *)v28 + 278) = *((_BYTE *)v29 + 278);
      v28[35] = v29[35];
      v28[36] = v29[36];
      swift_retain();
      swift_retain();
    }
    else
    {
      v158 = *(_OWORD *)(v29 + 31);
      v159 = *(_OWORD *)(v29 + 35);
      *(_OWORD *)(v28 + 33) = *(_OWORD *)(v29 + 33);
      *(_OWORD *)(v28 + 35) = v159;
      *(_OWORD *)(v28 + 31) = v158;
    }
    v160 = (unint64_t)v29[41];
    if (v160 >> 2 == 0xFFFFFFFF)
    {
      v161 = *(_OWORD *)(v29 + 37);
      v162 = *(_OWORD *)(v29 + 41);
      *(_OWORD *)(v28 + 39) = *(_OWORD *)(v29 + 39);
      *(_OWORD *)(v28 + 41) = v162;
      *(_OWORD *)(v28 + 37) = v161;
      v163 = *(_OWORD *)(v29 + 43);
      v164 = *(_OWORD *)(v29 + 45);
      v165 = *(_OWORD *)(v29 + 47);
      v28[49] = v29[49];
      *(_OWORD *)(v28 + 45) = v164;
      *(_OWORD *)(v28 + 47) = v165;
      *(_OWORD *)(v28 + 43) = v163;
    }
    else
    {
      v166 = v29[37];
      v167 = (uint64_t)v29[38];
      v214 = (uint64_t)v29[40];
      v217 = (uint64_t)v29[39];
      v169 = (uint64_t)v29[42];
      v168 = (uint64_t)v29[43];
      v170 = v29[44];
      v220 = (uint64_t)v29[45];
      v224 = (uint64_t)v29[46];
      v228 = (uint64_t)v29[47];
      __dstc = v29[48];
      v239 = (uint64_t)v29[49];
      outlined copy of PlatformItemList.Item.SystemItem(v166, v167, v217, v214, v160, v169, v168, (char)v170, v220, v224, v228, (char)__dstc, v239);
      v28[37] = v166;
      v28[38] = (void *)v167;
      v28[39] = (void *)v217;
      v28[40] = (void *)v214;
      v28[41] = (void *)v160;
      v28[42] = (void *)v169;
      v28[43] = (void *)v168;
      v28[44] = v170;
      v28[45] = (void *)v220;
      v28[46] = (void *)v224;
      v28[47] = (void *)v228;
      v28[48] = __dstc;
      v28[49] = (void *)v239;
    }
    if (v29[51] == (void *)1)
    {
      *((_OWORD *)v28 + 25) = *((_OWORD *)v29 + 25);
      v171 = *((_OWORD *)v29 + 26);
      v172 = *((_OWORD *)v29 + 27);
      v173 = *((_OWORD *)v29 + 28);
      *((_BYTE *)v28 + 464) = *((_BYTE *)v29 + 464);
      *((_OWORD *)v28 + 27) = v172;
      *((_OWORD *)v28 + 28) = v173;
      *((_OWORD *)v28 + 26) = v171;
    }
    else
    {
      *((_BYTE *)v28 + 400) = *((_BYTE *)v29 + 400);
      *((_BYTE *)v28 + 401) = *((_BYTE *)v29 + 401);
      *((_BYTE *)v28 + 402) = *((_BYTE *)v29 + 402);
      *((_BYTE *)v28 + 403) = *((_BYTE *)v29 + 403);
      *((_BYTE *)v28 + 404) = *((_BYTE *)v29 + 404);
      v174 = v29[51];
      if (v174)
      {
        v175 = v29[52];
        v28[51] = v174;
        v28[52] = v175;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 51) = *(_OWORD *)(v29 + 51);
      }
      v176 = v29[53];
      if (v176)
      {
        v177 = v29[54];
        v28[53] = v176;
        v28[54] = v177;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 53) = *(_OWORD *)(v29 + 53);
      }
      v178 = v29[55];
      if (v178)
      {
        v179 = v29[56];
        v28[55] = v178;
        v28[56] = v179;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 55) = *(_OWORD *)(v29 + 55);
      }
      v28[57] = v29[57];
      *((_BYTE *)v28 + 464) = *((_BYTE *)v29 + 464);
    }
    v28[59] = v29[59];
    v28[60] = v29[60];
    v28[61] = v29[61];
    *((_BYTE *)v28 + 496) = *((_BYTE *)v29 + 496);
    v180 = v29[63];
    swift_bridgeObjectRetain();
    if (v180)
    {
      v181 = v29[64];
      v28[63] = v180;
      v28[64] = v181;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v28 + 63) = *(_OWORD *)(v29 + 63);
    }
    *((_WORD *)v28 + 260) = *((_WORD *)v29 + 260);
    v182 = v29[66];
    if (v182)
    {
      v28[66] = v182;
      v28[67] = v29[67];
      v28[68] = v29[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v183 = *((_OWORD *)v29 + 33);
      v28[68] = v29[68];
      *((_OWORD *)v28 + 33) = v183;
    }
    v184 = v29[69];
    if (v184 == (void *)1)
    {
      v185 = v28 + 69;
      v186 = *(_OWORD *)(v29 + 69);
      v28[71] = v29[71];
    }
    else
    {
      v28[69] = v184;
      v187 = v29[70];
      swift_retain();
      if (v187)
      {
        v188 = v29[71];
        v28[70] = v187;
        v28[71] = v188;
        swift_retain();
LABEL_104:
        v189 = v29[72];
        v28[72] = v189;
        v28[73] = v29[73];
        v28[74] = v29[74];
        v28[75] = v29[75];
        v28[76] = v29[76];
        v28[77] = v29[77];
        v28[78] = v29[78];
        *((_BYTE *)v28 + 632) = *((_BYTE *)v29 + 632);
        *((_BYTE *)v28 + 633) = *((_BYTE *)v29 + 633);
        *((_BYTE *)v28 + 634) = *((_BYTE *)v29 + 634);
        __dsta = (int *)type metadata accessor for PlatformItemList.Item();
        v190 = __dsta[28];
        v240 = (char *)v28 + v190;
        v191 = (char *)v29 + v190;
        v192 = type metadata accessor for CommandOperation();
        v221 = *(_QWORD *)(v192 - 8);
        v225 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v221 + 48);
        v193 = v189;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v225(v191, 1, v192))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v240, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
          a3 = v242;
          v31 = v235;
          v30 = v237;
        }
        else
        {
          *v240 = *v191;
          v195 = *(int *)(v192 + 20);
          v196 = &v240[v195];
          v197 = &v191[v195];
          v229 = v191;
          v198 = v192;
          v199 = *(_QWORD *)&v191[v195];
          v200 = *((_QWORD *)v197 + 1);
          v201 = v197[16];
          outlined copy of Text.Storage(v199, v200, v201);
          *(_QWORD *)v196 = v199;
          *((_QWORD *)v196 + 1) = v200;
          v196[16] = v201;
          *((_QWORD *)v196 + 3) = *((_QWORD *)v197 + 3);
          v202 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v203 = &v196[v202];
          v204 = &v197[v202];
          v205 = type metadata accessor for UUID();
          v206 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v205 - 8) + 16);
          swift_bridgeObjectRetain();
          v206(v203, v204, v205);
          v207 = *(int *)(v198 + 24);
          v208 = &v240[v207];
          v209 = &v229[v207];
          if (*v209)
          {
            v210 = v209[1];
            *v208 = *v209;
            v208[1] = v210;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v208 = *(_OWORD *)v209;
          }
          a3 = v242;
          v31 = v235;
          v30 = v237;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v240, 0, 1, v198);
        }
        *((_BYTE *)v28 + __dsta[29]) = *((_BYTE *)v29 + __dsta[29]);
        *((_BYTE *)v28 + __dsta[30]) = *((_BYTE *)v29 + __dsta[30]);
        *((_BYTE *)v28 + __dsta[31]) = *((_BYTE *)v29 + __dsta[31]);
        *((_BYTE *)v28 + __dsta[32]) = *((_BYTE *)v29 + __dsta[32]);
        *(void **)((char *)v28 + __dsta[33]) = *(void **)((char *)v29 + __dsta[33]);
        swift_retain();
        goto LABEL_111;
      }
      v185 = v28 + 70;
      v186 = *((_OWORD *)v29 + 35);
    }
    *v185 = v186;
    goto LABEL_104;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
    v8 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v241 = a3;
    if (v8 == 1)
    {
      v9 = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 9) = v9;
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
      a1[88] = 1;
    }
    else
    {
      v12 = *((_OWORD *)a2 + 3);
      v13 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *((_OWORD *)a1 + 3) = v12;
      *((_OWORD *)a1 + 4) = v13;
    }
    a1[89] = a2[89];
    a1[90] = a2[90];
    a1[91] = a2[91];
    a1[92] = a2[92];
    *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
    v14 = *((_QWORD *)a2 + 16);
    *((_QWORD *)a1 + 16) = v14;
    *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
    *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
    *((_DWORD *)a1 + 38) = *((_DWORD *)a2 + 38);
    *((_DWORD *)a1 + 39) = *((_DWORD *)a2 + 39);
    *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
    *((_QWORD *)a1 + 21) = *((_QWORD *)a2 + 21);
    *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
    v15 = (void *)*((_QWORD *)a2 + 23);
    *((_QWORD *)a1 + 23) = v15;
    v238 = type metadata accessor for ToolbarStorage.Item(0);
    v16 = *(int *)(v238 + 48);
    v17 = (void **)&a1[v16];
    v18 = (void **)&a2[v16];
    v19 = type metadata accessor for PlatformItemList.Item();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v20 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v15;
    if (v21(v18, 1, v19))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = v238;
      a3 = v241;
LABEL_66:
      swift_weakCopyInit();
      a1[*(int *)(v24 + 56)] = a2[*(int *)(v24 + 56)];
      a1[*(int *)(v24 + 60)] = a2[*(int *)(v24 + 60)];
      goto LABEL_112;
    }
    v234 = v20;
    v236 = (int *)v19;
    v34 = *v18;
    *v17 = *v18;
    v35 = v18[1];
    v17[1] = v35;
    v17[2] = v18[2];
    v17[3] = v18[3];
    *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
    v17[5] = v18[5];
    v17[6] = v18[6];
    *((_BYTE *)v17 + 56) = *((_BYTE *)v18 + 56);
    v36 = v17 + 8;
    v37 = v18 + 8;
    v38 = (unint64_t)v18[23];
    v39 = v34;
    v40 = v35;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v38 >> 1 == 4294967294)
    {
      v41 = *(_OWORD *)v37;
      v42 = *((_OWORD *)v18 + 5);
      v43 = *((_OWORD *)v18 + 7);
      *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
      *((_OWORD *)v17 + 7) = v43;
      *v36 = v41;
      *((_OWORD *)v17 + 5) = v42;
      v44 = *((_OWORD *)v18 + 8);
      v45 = *((_OWORD *)v18 + 9);
      v46 = *((_OWORD *)v18 + 11);
      *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
      *((_OWORD *)v17 + 11) = v46;
      *((_OWORD *)v17 + 8) = v44;
      *((_OWORD *)v17 + 9) = v45;
      v47 = *((_OWORD *)v18 + 12);
      v48 = *((_OWORD *)v18 + 13);
      v49 = *((_OWORD *)v18 + 14);
      *(_DWORD *)((char *)v17 + 239) = *(_DWORD *)((char *)v18 + 239);
      *((_OWORD *)v17 + 13) = v48;
      *((_OWORD *)v17 + 14) = v49;
      *((_OWORD *)v17 + 12) = v47;
      if (v18[32])
      {
LABEL_17:
        v17[31] = v18[31];
        v17[32] = v18[32];
        v50 = v18[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v50 >= 2)
          v51 = v50;
        v17[33] = v50;
        v52 = *((_DWORD *)v18 + 68);
        *((_BYTE *)v17 + 276) = *((_BYTE *)v18 + 276);
        *((_DWORD *)v17 + 68) = v52;
        *((_BYTE *)v17 + 277) = *((_BYTE *)v18 + 277);
        *((_BYTE *)v17 + 278) = *((_BYTE *)v18 + 278);
        v17[35] = v18[35];
        v17[36] = v18[36];
        swift_retain();
        swift_retain();
LABEL_34:
        v90 = (unint64_t)v18[41];
        if (v90 >> 2 == 0xFFFFFFFF)
        {
          v91 = *(_OWORD *)(v18 + 37);
          v92 = *(_OWORD *)(v18 + 41);
          *(_OWORD *)(v17 + 39) = *(_OWORD *)(v18 + 39);
          *(_OWORD *)(v17 + 41) = v92;
          *(_OWORD *)(v17 + 37) = v91;
          v93 = *(_OWORD *)(v18 + 43);
          v94 = *(_OWORD *)(v18 + 45);
          v95 = *(_OWORD *)(v18 + 47);
          v17[49] = v18[49];
          *(_OWORD *)(v17 + 45) = v94;
          *(_OWORD *)(v17 + 47) = v95;
          *(_OWORD *)(v17 + 43) = v93;
        }
        else
        {
          v96 = v18[37];
          v97 = (uint64_t)v18[38];
          v212 = (uint64_t)v18[40];
          v213 = (uint64_t)v18[39];
          v98 = (uint64_t)v18[42];
          v99 = (uint64_t)v18[43];
          v100 = v18[44];
          v215 = (uint64_t)v18[45];
          v218 = (uint64_t)v18[46];
          v222 = (uint64_t)v18[47];
          v226 = v18[48];
          __dstb = v18[49];
          outlined copy of PlatformItemList.Item.SystemItem(v96, v97, v213, v212, v90, v98, v99, (char)v100, v215, v218, v222, (char)v226, (uint64_t)__dstb);
          v17[37] = v96;
          v17[38] = (void *)v97;
          v17[39] = (void *)v213;
          v17[40] = (void *)v212;
          v17[41] = (void *)v90;
          v17[42] = (void *)v98;
          v17[43] = (void *)v99;
          v17[44] = v100;
          v17[45] = (void *)v215;
          v17[46] = (void *)v218;
          v17[47] = (void *)v222;
          v17[48] = v226;
          v17[49] = __dstb;
        }
        if (v18[51] == (void *)1)
        {
          *((_OWORD *)v17 + 25) = *((_OWORD *)v18 + 25);
          v101 = *((_OWORD *)v18 + 26);
          v102 = *((_OWORD *)v18 + 27);
          v103 = *((_OWORD *)v18 + 28);
          *((_BYTE *)v17 + 464) = *((_BYTE *)v18 + 464);
          *((_OWORD *)v17 + 27) = v102;
          *((_OWORD *)v17 + 28) = v103;
          *((_OWORD *)v17 + 26) = v101;
          goto LABEL_47;
        }
        *((_BYTE *)v17 + 400) = *((_BYTE *)v18 + 400);
        *((_BYTE *)v17 + 401) = *((_BYTE *)v18 + 401);
        *((_BYTE *)v17 + 402) = *((_BYTE *)v18 + 402);
        *((_BYTE *)v17 + 403) = *((_BYTE *)v18 + 403);
        *((_BYTE *)v17 + 404) = *((_BYTE *)v18 + 404);
        v104 = v18[51];
        if (v104)
        {
          v105 = v18[52];
          v17[51] = v104;
          v17[52] = v105;
          swift_retain();
          v106 = v18[53];
          if (v106)
            goto LABEL_41;
        }
        else
        {
          *(_OWORD *)(v17 + 51) = *(_OWORD *)(v18 + 51);
          v106 = v18[53];
          if (v106)
          {
LABEL_41:
            v107 = v18[54];
            v17[53] = v106;
            v17[54] = v107;
            swift_retain();
            v108 = v18[55];
            if (v108)
            {
LABEL_42:
              v109 = v18[56];
              v17[55] = v108;
              v17[56] = v109;
              swift_retain();
LABEL_46:
              v17[57] = v18[57];
              *((_BYTE *)v17 + 464) = *((_BYTE *)v18 + 464);
LABEL_47:
              v17[59] = v18[59];
              v17[60] = v18[60];
              v17[61] = v18[61];
              *((_BYTE *)v17 + 496) = *((_BYTE *)v18 + 496);
              v110 = v18[63];
              swift_bridgeObjectRetain();
              if (v110)
              {
                v111 = v18[64];
                v17[63] = v110;
                v17[64] = v111;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(v17 + 63) = *(_OWORD *)(v18 + 63);
              }
              *((_WORD *)v17 + 260) = *((_WORD *)v18 + 260);
              v112 = v18[66];
              if (v112)
              {
                v17[66] = v112;
                v17[67] = v18[67];
                v17[68] = v18[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v113 = *((_OWORD *)v18 + 33);
                v17[68] = v18[68];
                *((_OWORD *)v17 + 33) = v113;
              }
              v114 = v18[69];
              if (v114 == (void *)1)
              {
                v115 = v17 + 69;
                v116 = *(_OWORD *)(v18 + 69);
                v17[71] = v18[71];
              }
              else
              {
                v17[69] = v114;
                v117 = v18[70];
                swift_retain();
                if (v117)
                {
                  v118 = v18[71];
                  v17[70] = v117;
                  v17[71] = v118;
                  swift_retain();
LABEL_59:
                  v119 = v18[72];
                  v17[72] = v119;
                  v17[73] = v18[73];
                  v17[74] = v18[74];
                  v17[75] = v18[75];
                  v17[76] = v18[76];
                  v17[77] = v18[77];
                  v17[78] = v18[78];
                  *((_BYTE *)v17 + 632) = *((_BYTE *)v18 + 632);
                  *((_BYTE *)v17 + 633) = *((_BYTE *)v18 + 633);
                  *((_BYTE *)v17 + 634) = *((_BYTE *)v18 + 634);
                  v120 = v236[28];
                  __dst = (char *)v17 + v120;
                  v121 = (char *)v18 + v120;
                  v122 = type metadata accessor for CommandOperation();
                  v219 = *(_QWORD *)(v122 - 8);
                  v223 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v219 + 48);
                  v123 = v119;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v223(v121, 1, v122))
                  {
                    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
                    memcpy(__dst, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
                    a3 = v241;
                    v125 = v234;
                  }
                  else
                  {
                    *__dst = *v121;
                    v126 = *(int *)(v122 + 20);
                    v127 = v121;
                    v216 = v121;
                    v128 = &__dst[v126];
                    v227 = v122;
                    v129 = &v127[v126];
                    v130 = *(_QWORD *)&v127[v126];
                    v131 = *(_QWORD *)&v127[v126 + 8];
                    v132 = v127[v126 + 16];
                    outlined copy of Text.Storage(v130, v131, v132);
                    *(_QWORD *)v128 = v130;
                    *((_QWORD *)v128 + 1) = v131;
                    v128[16] = v132;
                    *((_QWORD *)v128 + 3) = *((_QWORD *)v129 + 3);
                    v133 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v134 = &v128[v133];
                    v135 = &v129[v133];
                    v136 = type metadata accessor for UUID();
                    v137 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v136 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v137(v134, v135, v136);
                    v138 = *(int *)(v227 + 24);
                    v139 = &__dst[v138];
                    v140 = &v216[v138];
                    if (*v140)
                    {
                      v141 = v140[1];
                      *v139 = *v140;
                      v139[1] = v141;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v139 = *(_OWORD *)v140;
                    }
                    a3 = v241;
                    v125 = v234;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v219 + 56))(__dst, 0, 1, v227);
                  }
                  *((_BYTE *)v17 + v236[29]) = *((_BYTE *)v18 + v236[29]);
                  *((_BYTE *)v17 + v236[30]) = *((_BYTE *)v18 + v236[30]);
                  *((_BYTE *)v17 + v236[31]) = *((_BYTE *)v18 + v236[31]);
                  *((_BYTE *)v17 + v236[32]) = *((_BYTE *)v18 + v236[32]);
                  *(void **)((char *)v17 + v236[33]) = *(void **)((char *)v18 + v236[33]);
                  v142 = *(void (**)(void **, _QWORD, uint64_t, int *))(v125 + 56);
                  swift_retain();
                  v142(v17, 0, 1, v236);
                  v24 = v238;
                  goto LABEL_66;
                }
                v115 = v17 + 70;
                v116 = *((_OWORD *)v18 + 35);
              }
              *v115 = v116;
              goto LABEL_59;
            }
LABEL_45:
            *(_OWORD *)(v17 + 55) = *(_OWORD *)(v18 + 55);
            goto LABEL_46;
          }
        }
        *(_OWORD *)(v17 + 53) = *(_OWORD *)(v18 + 53);
        v108 = v18[55];
        if (v108)
          goto LABEL_42;
        goto LABEL_45;
      }
    }
    else
    {
      v69 = *((unsigned __int8 *)v18 + 72);
      if (v69 == 255)
      {
        v76 = *v37;
        *((_BYTE *)v17 + 72) = *((_BYTE *)v18 + 72);
        *(_QWORD *)v36 = v76;
      }
      else
      {
        v70 = *v37;
        outlined copy of GraphicsImage.Contents(*v37, *((_BYTE *)v18 + 72));
        v17[8] = v70;
        *((_BYTE *)v17 + 72) = v69;
      }
      v17[10] = v18[10];
      *(_OWORD *)(v17 + 11) = *(_OWORD *)(v18 + 11);
      *((_BYTE *)v17 + 104) = *((_BYTE *)v18 + 104);
      v77 = *(_OWORD *)((char *)v18 + 108);
      *((_BYTE *)v17 + 124) = *((_BYTE *)v18 + 124);
      *(_OWORD *)((char *)v17 + 108) = v77;
      v78 = *((_OWORD *)v18 + 8);
      v79 = *((_OWORD *)v18 + 9);
      *((_BYTE *)v17 + 160) = *((_BYTE *)v18 + 160);
      *((_OWORD *)v17 + 8) = v78;
      *((_OWORD *)v17 + 9) = v79;
      *((_BYTE *)v17 + 161) = *((_BYTE *)v18 + 161);
      *((_BYTE *)v17 + 162) = *((_BYTE *)v18 + 162);
      *((_BYTE *)v17 + 163) = *((_BYTE *)v18 + 163);
      v80 = (unint64_t)v18[23];
      if (v80 >> 1 == 0xFFFFFFFF)
      {
        v81 = *(_OWORD *)(v18 + 23);
        *(_OWORD *)(v17 + 21) = *(_OWORD *)(v18 + 21);
        *(_OWORD *)(v17 + 23) = v81;
      }
      else
      {
        v82 = (uint64_t)v18[21];
        v83 = (uint64_t)v18[22];
        v84 = v18[24];
        outlined copy of AccessibilityImageLabel(v82, v83, (uint64_t)v18[23]);
        v17[21] = (void *)v82;
        v17[22] = (void *)v83;
        v17[23] = (void *)v80;
        v17[24] = v84;
      }
      v17[25] = v18[25];
      v17[26] = v18[26];
      *((_BYTE *)v17 + 216) = *((_BYTE *)v18 + 216);
      *((_BYTE *)v17 + 217) = *((_BYTE *)v18 + 217);
      v85 = *((_DWORD *)v18 + 55);
      *((_BYTE *)v17 + 224) = *((_BYTE *)v18 + 224);
      *((_DWORD *)v17 + 55) = v85;
      v86 = v18[29];
      v17[29] = v86;
      *((_WORD *)v17 + 120) = *((_WORD *)v18 + 120);
      *((_BYTE *)v17 + 242) = *((_BYTE *)v18 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v87 = v86;
      if (v18[32])
        goto LABEL_17;
    }
    v88 = *(_OWORD *)(v18 + 31);
    v89 = *(_OWORD *)(v18 + 35);
    *(_OWORD *)(v17 + 33) = *(_OWORD *)(v18 + 33);
    *(_OWORD *)(v17 + 35) = v89;
    *(_OWORD *)(v17 + 31) = v88;
    goto LABEL_34;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_113:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *initializeWithTake for ToolbarStorage.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *__dst;
  char *__dsta;

  v5 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v20 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v20;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    v21 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v42 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v42;
        v22[32] = v23[32];
        v43 = *((_QWORD *)v23 + 6);
        *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
        *((_QWORD *)v22 + 6) = v43;
        v22[56] = v23[56];
        v44 = *((_OWORD *)v23 + 13);
        *((_OWORD *)v22 + 12) = *((_OWORD *)v23 + 12);
        *((_OWORD *)v22 + 13) = v44;
        *((_OWORD *)v22 + 14) = *((_OWORD *)v23 + 14);
        *(_DWORD *)(v22 + 239) = *(_DWORD *)(v23 + 239);
        v45 = *((_OWORD *)v23 + 9);
        *((_OWORD *)v22 + 8) = *((_OWORD *)v23 + 8);
        *((_OWORD *)v22 + 9) = v45;
        v46 = *((_OWORD *)v23 + 11);
        *((_OWORD *)v22 + 10) = *((_OWORD *)v23 + 10);
        *((_OWORD *)v22 + 11) = v46;
        v47 = *((_OWORD *)v23 + 5);
        *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
        *((_OWORD *)v22 + 5) = v47;
        v48 = *((_OWORD *)v23 + 7);
        *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
        *((_OWORD *)v22 + 7) = v48;
        *(_OWORD *)(v22 + 248) = *(_OWORD *)(v23 + 248);
        v49 = *(_OWORD *)(v23 + 280);
        *(_OWORD *)(v22 + 264) = *(_OWORD *)(v23 + 264);
        *(_OWORD *)(v22 + 280) = v49;
        v50 = *(_OWORD *)(v23 + 376);
        *(_OWORD *)(v22 + 360) = *(_OWORD *)(v23 + 360);
        *(_OWORD *)(v22 + 376) = v50;
        *((_QWORD *)v22 + 49) = *((_QWORD *)v23 + 49);
        v51 = *(_OWORD *)(v23 + 312);
        *(_OWORD *)(v22 + 296) = *(_OWORD *)(v23 + 296);
        *(_OWORD *)(v22 + 312) = v51;
        v52 = *(_OWORD *)(v23 + 344);
        *(_OWORD *)(v22 + 328) = *(_OWORD *)(v23 + 328);
        *(_OWORD *)(v22 + 344) = v52;
        v53 = *((_OWORD *)v23 + 28);
        *((_OWORD *)v22 + 27) = *((_OWORD *)v23 + 27);
        *((_OWORD *)v22 + 28) = v53;
        v22[464] = v23[464];
        v54 = *((_OWORD *)v23 + 26);
        *((_OWORD *)v22 + 25) = *((_OWORD *)v23 + 25);
        *((_OWORD *)v22 + 26) = v54;
        *(_OWORD *)(v22 + 472) = *(_OWORD *)(v23 + 472);
        *(_OWORD *)(v22 + 481) = *(_OWORD *)(v23 + 481);
        v55 = *((_QWORD *)v23 + 63);
        v96 = v25;
        if (v55)
        {
          v56 = *((_QWORD *)v23 + 64);
          *((_QWORD *)v22 + 63) = v55;
          *((_QWORD *)v22 + 64) = v56;
        }
        else
        {
          *(_OWORD *)(v22 + 504) = *(_OWORD *)(v23 + 504);
        }
        *((_WORD *)v22 + 260) = *((_WORD *)v23 + 260);
        *((_OWORD *)v22 + 33) = *((_OWORD *)v23 + 33);
        *((_QWORD *)v22 + 68) = *((_QWORD *)v23 + 68);
        *((_QWORD *)v22 + 71) = *((_QWORD *)v23 + 71);
        *(_OWORD *)(v22 + 552) = *(_OWORD *)(v23 + 552);
        *((_QWORD *)v22 + 72) = *((_QWORD *)v23 + 72);
        *(_OWORD *)(v22 + 584) = *(_OWORD *)(v23 + 584);
        *(_OWORD *)(v22 + 600) = *(_OWORD *)(v23 + 600);
        *((_QWORD *)v22 + 77) = *((_QWORD *)v23 + 77);
        *((_QWORD *)v22 + 78) = *((_QWORD *)v23 + 78);
        v22[632] = v23[632];
        *(_WORD *)(v22 + 633) = *(_WORD *)(v23 + 633);
        v75 = (int *)type metadata accessor for PlatformItemList.Item();
        v76 = v75[28];
        __dsta = &v22[v76];
        v77 = &v23[v76];
        v78 = type metadata accessor for CommandOperation();
        v79 = *(_QWORD *)(v78 - 8);
        v99 = v77;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(__dsta, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          v25 = v96;
        }
        else
        {
          v95 = v79;
          *__dsta = *v77;
          v81 = *(int *)(v78 + 20);
          v82 = &__dsta[v81];
          v83 = &v99[v81];
          v84 = *(_OWORD *)&v99[v81 + 16];
          *(_OWORD *)v82 = *(_OWORD *)&v99[v81];
          *((_OWORD *)v82 + 1) = v84;
          v85 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v86 = &v82[v85];
          v87 = &v83[v85];
          v88 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v86, v87, v88);
          v89 = *(int *)(v78 + 24);
          v90 = &__dsta[v89];
          v91 = (uint64_t *)&v99[v89];
          v92 = *v91;
          if (*v91)
          {
            v93 = v91[1];
            *(_QWORD *)v90 = v92;
            *((_QWORD *)v90 + 1) = v93;
          }
          else
          {
            *(_OWORD *)v90 = *(_OWORD *)v91;
          }
          v25 = v96;
          (*(void (**)(void))(v95 + 56))();
        }
        v22[v75[29]] = v23[v75[29]];
        v22[v75[30]] = v23[v75[30]];
        v22[v75[31]] = v23[v75[31]];
        v22[v75[32]] = v23[v75[32]];
        *(_QWORD *)&v22[v75[33]] = *(_QWORD *)&v23[v75[33]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v22, v23, *(_QWORD *)(v25 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    goto LABEL_32;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    v8 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v9;
    v10 = *(_OWORD *)(a2 + 136);
    v11 = *(_OWORD *)(a2 + 152);
    v12 = *(_OWORD *)(a2 + 168);
    *((_QWORD *)a1 + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v12;
    *(_OWORD *)(a1 + 152) = v11;
    *(_OWORD *)(a1 + 136) = v10;
    v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    v14 = v13[12];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = (int *)type metadata accessor for PlatformItemList.Item();
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v27 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v27;
      v15[32] = v16[32];
      v28 = *((_QWORD *)v16 + 6);
      *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 6) = v28;
      v15[56] = v16[56];
      v29 = *((_OWORD *)v16 + 13);
      *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 13) = v29;
      *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
      *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
      v30 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v30;
      v31 = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 11) = v31;
      v32 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v32;
      v33 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 7) = v33;
      *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
      v34 = *(_OWORD *)(v16 + 280);
      *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
      *(_OWORD *)(v15 + 280) = v34;
      v35 = *(_OWORD *)(v16 + 376);
      *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
      *(_OWORD *)(v15 + 376) = v35;
      *((_QWORD *)v15 + 49) = *((_QWORD *)v16 + 49);
      v36 = *(_OWORD *)(v16 + 312);
      *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
      *(_OWORD *)(v15 + 312) = v36;
      v37 = *(_OWORD *)(v16 + 344);
      *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
      *(_OWORD *)(v15 + 344) = v37;
      v38 = *((_OWORD *)v16 + 28);
      *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
      *((_OWORD *)v15 + 28) = v38;
      v15[464] = v16[464];
      v39 = *((_OWORD *)v16 + 26);
      *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
      *((_OWORD *)v15 + 26) = v39;
      *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
      *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
      v40 = *((_QWORD *)v16 + 63);
      if (v40)
      {
        v41 = *((_QWORD *)v16 + 64);
        *((_QWORD *)v15 + 63) = v40;
        *((_QWORD *)v15 + 64) = v41;
      }
      else
      {
        *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
      }
      *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
      *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
      *((_QWORD *)v15 + 68) = *((_QWORD *)v16 + 68);
      *((_QWORD *)v15 + 71) = *((_QWORD *)v16 + 71);
      *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
      *((_QWORD *)v15 + 72) = *((_QWORD *)v16 + 72);
      *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
      *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
      *((_QWORD *)v15 + 77) = *((_QWORD *)v16 + 77);
      *((_QWORD *)v15 + 78) = *((_QWORD *)v16 + 78);
      v15[632] = v16[632];
      *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
      v57 = v17[28];
      __dst = &v15[v57];
      v58 = &v16[v57];
      v59 = type metadata accessor for CommandOperation();
      v60 = *(_QWORD *)(v59 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        v97 = v60;
        v98 = v18;
        *__dst = *v58;
        v62 = *(int *)(v59 + 20);
        v63 = &__dst[v62];
        v64 = &v58[v62];
        v65 = *(_OWORD *)&v58[v62 + 16];
        *(_OWORD *)v63 = *(_OWORD *)&v58[v62];
        *((_OWORD *)v63 + 1) = v65;
        v66 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v67 = &v63[v66];
        v68 = &v64[v66];
        v69 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
        v70 = *(int *)(v59 + 24);
        v71 = &__dst[v70];
        v72 = (uint64_t *)&v58[v70];
        v73 = *v72;
        if (*v72)
        {
          v74 = v72[1];
          *(_QWORD *)v71 = v73;
          *((_QWORD *)v71 + 1) = v74;
        }
        else
        {
          *(_OWORD *)v71 = *(_OWORD *)v72;
        }
        v18 = v98;
        (*(void (**)(void))(v97 + 56))();
      }
      v15[v17[29]] = v16[v17[29]];
      v15[v17[30]] = v16[v17[30]];
      v15[v17[31]] = v16[v17[31]];
      v15[v17[32]] = v16[v17[32]];
      *(_QWORD *)&v15[v17[33]] = *(_QWORD *)&v16[v17[33]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
    }
    swift_weakTakeInit();
    a1[v13[14]] = a2[v13[14]];
    a1[v13[15]] = a2[v13[15]];
LABEL_32:
    swift_storeEnumTagMultiPayload();
    goto LABEL_33;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
LABEL_33:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for ToolbarStorage.Entry(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  size_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t *__src;
  char *__srca;
  uint64_t v100;
  char *__dst;
  char *__dsta;
  uint64_t v103;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ToolbarStorage.Entry.Kind);
    v103 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v20 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v20;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      a1[57] = a2[57];
      *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      v21 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      v25 = *(size_t **)(v24 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v25[6])(v23, 1, v24))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v42 = *((_OWORD *)v23 + 1);
          *(_OWORD *)v22 = *(_OWORD *)v23;
          *((_OWORD *)v22 + 1) = v42;
          v22[32] = v23[32];
          v43 = *((_QWORD *)v23 + 6);
          *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
          *((_QWORD *)v22 + 6) = v43;
          v22[56] = v23[56];
          v44 = *((_OWORD *)v23 + 13);
          *((_OWORD *)v22 + 12) = *((_OWORD *)v23 + 12);
          *((_OWORD *)v22 + 13) = v44;
          *((_OWORD *)v22 + 14) = *((_OWORD *)v23 + 14);
          *(_DWORD *)(v22 + 239) = *(_DWORD *)(v23 + 239);
          v45 = *((_OWORD *)v23 + 9);
          *((_OWORD *)v22 + 8) = *((_OWORD *)v23 + 8);
          *((_OWORD *)v22 + 9) = v45;
          v46 = *((_OWORD *)v23 + 11);
          *((_OWORD *)v22 + 10) = *((_OWORD *)v23 + 10);
          *((_OWORD *)v22 + 11) = v46;
          v47 = *((_OWORD *)v23 + 5);
          *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
          *((_OWORD *)v22 + 5) = v47;
          v48 = *((_OWORD *)v23 + 7);
          *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
          *((_OWORD *)v22 + 7) = v48;
          *(_OWORD *)(v22 + 248) = *(_OWORD *)(v23 + 248);
          v49 = *(_OWORD *)(v23 + 280);
          *(_OWORD *)(v22 + 264) = *(_OWORD *)(v23 + 264);
          *(_OWORD *)(v22 + 280) = v49;
          v50 = *(_OWORD *)(v23 + 376);
          *(_OWORD *)(v22 + 360) = *(_OWORD *)(v23 + 360);
          *(_OWORD *)(v22 + 376) = v50;
          *((_QWORD *)v22 + 49) = *((_QWORD *)v23 + 49);
          v51 = *(_OWORD *)(v23 + 312);
          *(_OWORD *)(v22 + 296) = *(_OWORD *)(v23 + 296);
          *(_OWORD *)(v22 + 312) = v51;
          v52 = *(_OWORD *)(v23 + 344);
          *(_OWORD *)(v22 + 328) = *(_OWORD *)(v23 + 328);
          *(_OWORD *)(v22 + 344) = v52;
          v53 = *((_OWORD *)v23 + 28);
          *((_OWORD *)v22 + 27) = *((_OWORD *)v23 + 27);
          *((_OWORD *)v22 + 28) = v53;
          v22[464] = v23[464];
          v54 = *((_OWORD *)v23 + 26);
          *((_OWORD *)v22 + 25) = *((_OWORD *)v23 + 25);
          *((_OWORD *)v22 + 26) = v54;
          *(_OWORD *)(v22 + 472) = *(_OWORD *)(v23 + 472);
          *(_OWORD *)(v22 + 481) = *(_OWORD *)(v23 + 481);
          v55 = *((_QWORD *)v23 + 63);
          __src = v25;
          if (v55)
          {
            v56 = *((_QWORD *)v23 + 64);
            *((_QWORD *)v22 + 63) = v55;
            *((_QWORD *)v22 + 64) = v56;
          }
          else
          {
            *(_OWORD *)(v22 + 504) = *(_OWORD *)(v23 + 504);
          }
          *((_WORD *)v22 + 260) = *((_WORD *)v23 + 260);
          *((_OWORD *)v22 + 33) = *((_OWORD *)v23 + 33);
          *((_QWORD *)v22 + 68) = *((_QWORD *)v23 + 68);
          *((_QWORD *)v22 + 71) = *((_QWORD *)v23 + 71);
          *(_OWORD *)(v22 + 552) = *(_OWORD *)(v23 + 552);
          *((_QWORD *)v22 + 72) = *((_QWORD *)v23 + 72);
          *(_OWORD *)(v22 + 584) = *(_OWORD *)(v23 + 584);
          *(_OWORD *)(v22 + 600) = *(_OWORD *)(v23 + 600);
          *((_QWORD *)v22 + 77) = *((_QWORD *)v23 + 77);
          *((_QWORD *)v22 + 78) = *((_QWORD *)v23 + 78);
          v22[632] = v23[632];
          *(_WORD *)(v22 + 633) = *(_WORD *)(v23 + 633);
          v75 = (int *)type metadata accessor for PlatformItemList.Item();
          v76 = v75[28];
          __dsta = &v22[v76];
          v77 = &v23[v76];
          v78 = type metadata accessor for CommandOperation();
          v79 = *(_QWORD *)(v78 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(__dsta, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            v95 = v79;
            v97 = a3;
            *__dsta = *v77;
            v81 = *(int *)(v78 + 20);
            v82 = &__dsta[v81];
            v83 = &v77[v81];
            v84 = *(_OWORD *)&v77[v81 + 16];
            *(_OWORD *)v82 = *(_OWORD *)&v77[v81];
            *((_OWORD *)v82 + 1) = v84;
            v85 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v86 = &v82[v85];
            v87 = &v83[v85];
            v88 = type metadata accessor for UUID();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v86, v87, v88);
            v89 = *(int *)(v78 + 24);
            v90 = &__dsta[v89];
            v91 = (uint64_t *)&v77[v89];
            v92 = *v91;
            if (*v91)
            {
              v93 = v91[1];
              *(_QWORD *)v90 = v92;
              *((_QWORD *)v90 + 1) = v93;
            }
            else
            {
              *(_OWORD *)v90 = *(_OWORD *)v91;
            }
            a3 = v97;
            (*(void (**)(void))(v95 + 56))();
          }
          v22[v75[29]] = v23[v75[29]];
          v22[v75[30]] = v23[v75[30]];
          v22[v75[31]] = v23[v75[31]];
          v22[v75[32]] = v23[v75[32]];
          *(_QWORD *)&v22[v75[33]] = *(_QWORD *)&v23[v75[33]];
          swift_storeEnumTagMultiPayload();
          v25 = __src;
        }
        else
        {
          memcpy(v22, v23, v25[8]);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v25[7])(v22, 0, 1, v24);
      }
      goto LABEL_33;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      v8 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v8;
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v9;
      v10 = *(_OWORD *)(a2 + 136);
      v11 = *(_OWORD *)(a2 + 152);
      v12 = *(_OWORD *)(a2 + 168);
      *((_QWORD *)a1 + 23) = *((_QWORD *)a2 + 23);
      *(_OWORD *)(a1 + 168) = v12;
      *(_OWORD *)(a1 + 152) = v11;
      *(_OWORD *)(a1 + 136) = v10;
      v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
      v14 = v13[12];
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = (int *)type metadata accessor for PlatformItemList.Item();
      v18 = *((_QWORD *)v17 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v27 = *((_OWORD *)v16 + 1);
        *(_OWORD *)v15 = *(_OWORD *)v16;
        *((_OWORD *)v15 + 1) = v27;
        v15[32] = v16[32];
        v28 = *((_QWORD *)v16 + 6);
        *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
        *((_QWORD *)v15 + 6) = v28;
        v15[56] = v16[56];
        v29 = *((_OWORD *)v16 + 13);
        *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
        *((_OWORD *)v15 + 13) = v29;
        *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
        *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
        v30 = *((_OWORD *)v16 + 9);
        *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
        *((_OWORD *)v15 + 9) = v30;
        v31 = *((_OWORD *)v16 + 11);
        *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
        *((_OWORD *)v15 + 11) = v31;
        v32 = *((_OWORD *)v16 + 5);
        *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
        *((_OWORD *)v15 + 5) = v32;
        v33 = *((_OWORD *)v16 + 7);
        *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
        *((_OWORD *)v15 + 7) = v33;
        *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
        v34 = *(_OWORD *)(v16 + 280);
        *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
        *(_OWORD *)(v15 + 280) = v34;
        v35 = *(_OWORD *)(v16 + 376);
        *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
        *(_OWORD *)(v15 + 376) = v35;
        *((_QWORD *)v15 + 49) = *((_QWORD *)v16 + 49);
        v36 = *(_OWORD *)(v16 + 312);
        *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
        *(_OWORD *)(v15 + 312) = v36;
        v37 = *(_OWORD *)(v16 + 344);
        *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
        *(_OWORD *)(v15 + 344) = v37;
        v38 = *((_OWORD *)v16 + 28);
        *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
        *((_OWORD *)v15 + 28) = v38;
        v15[464] = v16[464];
        v39 = *((_OWORD *)v16 + 26);
        *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
        *((_OWORD *)v15 + 26) = v39;
        *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
        *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
        v40 = *((_QWORD *)v16 + 63);
        v100 = v18;
        if (v40)
        {
          v41 = *((_QWORD *)v16 + 64);
          *((_QWORD *)v15 + 63) = v40;
          *((_QWORD *)v15 + 64) = v41;
        }
        else
        {
          *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
        }
        *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
        *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
        *((_QWORD *)v15 + 68) = *((_QWORD *)v16 + 68);
        *((_QWORD *)v15 + 71) = *((_QWORD *)v16 + 71);
        *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
        *((_QWORD *)v15 + 72) = *((_QWORD *)v16 + 72);
        *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
        *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
        *((_QWORD *)v15 + 77) = *((_QWORD *)v16 + 77);
        *((_QWORD *)v15 + 78) = *((_QWORD *)v16 + 78);
        v15[632] = v16[632];
        *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
        v57 = v17[28];
        __dst = &v15[v57];
        v58 = &v16[v57];
        v59 = type metadata accessor for CommandOperation();
        v60 = *(_QWORD *)(v59 - 8);
        __srca = v58;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          v96 = a3;
          *__dst = *v58;
          v62 = *(int *)(v59 + 20);
          v63 = &__dst[v62];
          v64 = &__srca[v62];
          v65 = *(_OWORD *)&__srca[v62 + 16];
          *(_OWORD *)v63 = *(_OWORD *)&__srca[v62];
          *((_OWORD *)v63 + 1) = v65;
          v66 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v67 = &v63[v66];
          v68 = &v64[v66];
          v69 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
          v70 = *(int *)(v59 + 24);
          v71 = &__dst[v70];
          v72 = &__srca[v70];
          v73 = *(_QWORD *)v72;
          if (*(_QWORD *)v72)
          {
            v74 = *((_QWORD *)v72 + 1);
            *(_QWORD *)v71 = v73;
            *((_QWORD *)v71 + 1) = v74;
          }
          else
          {
            *(_OWORD *)v71 = *(_OWORD *)v72;
          }
          a3 = v96;
          (*(void (**)(void))(v60 + 56))();
        }
        v15[v17[29]] = v16[v17[29]];
        v15[v17[30]] = v16[v17[30]];
        v15[v17[31]] = v16[v17[31]];
        v15[v17[32]] = v16[v17[32]];
        *(_QWORD *)&v15[v17[33]] = *(_QWORD *)&v16[v17[33]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v100 + 56))(v15, 0, 1, v17);
      }
      swift_weakTakeInit();
      a1[v13[14]] = a2[v13[14]];
      a1[v13[15]] = a2[v13[15]];
LABEL_33:
      swift_storeEnumTagMultiPayload();
      goto LABEL_34;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
LABEL_34:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.Entry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876F7918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 2u)
    v9 = 2;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 2;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 2u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.Entry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876F79A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

char *initializeBufferWithCopyOfBuffer for ToolbarStorage.Entry.Kind(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(void **, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(void **, uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _OWORD *v40;
  _OWORD *v41;
  unint64_t v42;
  id v43;
  id v44;
  void **v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  _OWORD *v59;
  _OWORD *v60;
  unint64_t v61;
  id v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  void *v70;
  __int128 v71;
  void *v72;
  id v73;
  int v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  __int128 v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  void (*v128)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  void (*v133)(void **, _QWORD, uint64_t, int *);
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  void *v140;
  id v141;
  void *v142;
  void *v143;
  id v144;
  void *v145;
  __int128 v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  uint64_t v186;
  void (*v187)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  void *v202;
  unsigned int (*v203)(_BYTE *, uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  void *__dstb;
  _BYTE *__dst;
  void *__dstc;
  unsigned int (*__dstd)(_BYTE *, uint64_t, uint64_t);
  int *__dsta;
  uint64_t v211;
  void *v212;
  int *v213;
  int *v214;
  void *v215;
  _BYTE *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v12;
      v13 = a2[56];
      swift_bridgeObjectRetain();
      if (v13 == 1)
      {
        v14 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 40) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
        a1[56] = 1;
      }
      else
      {
        v27 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v27;
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      }
      a1[57] = a2[57];
      *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
      v28 = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 9) = v28;
      v29 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      v30 = (void **)&a1[v29];
      v31 = (void **)&a2[v29];
      v32 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v218 = v33;
          v55 = *v31;
          v56 = v31[1];
          *v30 = *v31;
          v30[1] = v56;
          v57 = v31[3];
          v30[2] = v31[2];
          v30[3] = v57;
          *((_BYTE *)v30 + 32) = *((_BYTE *)v31 + 32);
          v58 = v31[6];
          v30[5] = v31[5];
          v30[6] = v58;
          *((_BYTE *)v30 + 56) = *((_BYTE *)v31 + 56);
          v59 = v30 + 8;
          v60 = v31 + 8;
          v61 = (unint64_t)v31[23];
          v62 = v55;
          v63 = v56;
          swift_bridgeObjectRetain();
          swift_retain();
          if (v61 >> 1 == 4294967294)
          {
            v64 = *((_OWORD *)v31 + 13);
            *((_OWORD *)v30 + 12) = *((_OWORD *)v31 + 12);
            *((_OWORD *)v30 + 13) = v64;
            *((_OWORD *)v30 + 14) = *((_OWORD *)v31 + 14);
            *(_DWORD *)((char *)v30 + 239) = *(_DWORD *)((char *)v31 + 239);
            v65 = *((_OWORD *)v31 + 9);
            *((_OWORD *)v30 + 8) = *((_OWORD *)v31 + 8);
            *((_OWORD *)v30 + 9) = v65;
            v66 = *((_OWORD *)v31 + 11);
            *((_OWORD *)v30 + 10) = *((_OWORD *)v31 + 10);
            *((_OWORD *)v30 + 11) = v66;
            v67 = *((_OWORD *)v31 + 5);
            *v59 = *v60;
            *((_OWORD *)v30 + 5) = v67;
            v68 = *((_OWORD *)v31 + 7);
            *((_OWORD *)v30 + 6) = *((_OWORD *)v31 + 6);
            *((_OWORD *)v30 + 7) = v68;
          }
          else
          {
            v74 = *((unsigned __int8 *)v31 + 72);
            if (v74 == 255)
            {
              *(_QWORD *)v59 = *(_QWORD *)v60;
              *((_BYTE *)v30 + 72) = *((_BYTE *)v31 + 72);
            }
            else
            {
              v75 = v31[8];
              outlined copy of GraphicsImage.Contents(v75, *((_BYTE *)v31 + 72));
              v30[8] = v75;
              *((_BYTE *)v30 + 72) = v74;
              v61 = (unint64_t)v31[23];
            }
            v30[10] = v31[10];
            *(_OWORD *)(v30 + 11) = *(_OWORD *)(v31 + 11);
            *((_BYTE *)v30 + 104) = *((_BYTE *)v31 + 104);
            *(_OWORD *)((char *)v30 + 108) = *(_OWORD *)((char *)v31 + 108);
            *((_BYTE *)v30 + 124) = *((_BYTE *)v31 + 124);
            v134 = *((_OWORD *)v31 + 9);
            *((_OWORD *)v30 + 8) = *((_OWORD *)v31 + 8);
            *((_OWORD *)v30 + 9) = v134;
            *((_WORD *)v30 + 80) = *((_WORD *)v31 + 80);
            *((_BYTE *)v30 + 162) = *((_BYTE *)v31 + 162);
            *((_BYTE *)v30 + 163) = *((_BYTE *)v31 + 163);
            if (v61 >> 1 == 0xFFFFFFFF)
            {
              v135 = *(_OWORD *)(v31 + 23);
              *(_OWORD *)(v30 + 21) = *(_OWORD *)(v31 + 21);
              *(_OWORD *)(v30 + 23) = v135;
            }
            else
            {
              v136 = (uint64_t)v31[21];
              v137 = (uint64_t)v31[22];
              v138 = v31[24];
              outlined copy of AccessibilityImageLabel(v136, v137, v61);
              v30[21] = (void *)v136;
              v30[22] = (void *)v137;
              v30[23] = (void *)v61;
              v30[24] = v138;
            }
            v139 = v31[26];
            v30[25] = v31[25];
            v30[26] = v139;
            *((_WORD *)v30 + 108) = *((_WORD *)v31 + 108);
            *((_DWORD *)v30 + 55) = *((_DWORD *)v31 + 55);
            *((_BYTE *)v30 + 224) = *((_BYTE *)v31 + 224);
            v140 = v31[29];
            v30[29] = v140;
            *((_WORD *)v30 + 120) = *((_WORD *)v31 + 120);
            *((_BYTE *)v30 + 242) = *((_BYTE *)v31 + 242);
            swift_unknownObjectRetain();
            swift_retain();
            v141 = v140;
          }
          v142 = v31[32];
          if (v142)
          {
            v30[31] = v31[31];
            v30[32] = v142;
            v143 = v31[33];
            swift_bridgeObjectRetain();
            if ((unint64_t)v143 >= 2)
              v144 = v143;
            v30[33] = v143;
            *((_DWORD *)v30 + 68) = *((_DWORD *)v31 + 68);
            *((_BYTE *)v30 + 276) = *((_BYTE *)v31 + 276);
            *(_WORD *)((char *)v30 + 277) = *(_WORD *)((char *)v31 + 277);
            v145 = v31[36];
            v30[35] = v31[35];
            v30[36] = v145;
            swift_retain();
            swift_retain();
          }
          else
          {
            v146 = *(_OWORD *)(v31 + 33);
            *(_OWORD *)(v30 + 31) = *(_OWORD *)(v31 + 31);
            *(_OWORD *)(v30 + 33) = v146;
            *(_OWORD *)(v30 + 35) = *(_OWORD *)(v31 + 35);
          }
          v147 = (unint64_t)v31[41];
          if (v147 >> 2 == 0xFFFFFFFF)
          {
            v148 = *(_OWORD *)(v31 + 47);
            *(_OWORD *)(v30 + 45) = *(_OWORD *)(v31 + 45);
            *(_OWORD *)(v30 + 47) = v148;
            v30[49] = v31[49];
            v149 = *(_OWORD *)(v31 + 39);
            *(_OWORD *)(v30 + 37) = *(_OWORD *)(v31 + 37);
            *(_OWORD *)(v30 + 39) = v149;
            v150 = *(_OWORD *)(v31 + 43);
            *(_OWORD *)(v30 + 41) = *(_OWORD *)(v31 + 41);
            *(_OWORD *)(v30 + 43) = v150;
          }
          else
          {
            v151 = v31[37];
            v152 = (uint64_t)v31[38];
            v195 = (uint64_t)v31[40];
            v197 = (uint64_t)v31[39];
            v153 = (uint64_t)v31[42];
            v154 = (uint64_t)v31[43];
            v155 = v31[44];
            v200 = (uint64_t)v31[45];
            v204 = (uint64_t)v31[46];
            __dstc = v31[47];
            v212 = v31[48];
            v215 = v31[49];
            outlined copy of PlatformItemList.Item.SystemItem(v151, v152, v197, v195, v147, v153, v154, (char)v155, v200, v204, (uint64_t)__dstc, (char)v212, (uint64_t)v215);
            v30[37] = v151;
            v30[38] = (void *)v152;
            v30[39] = (void *)v197;
            v30[40] = (void *)v195;
            v30[41] = (void *)v147;
            v30[42] = (void *)v153;
            v30[43] = (void *)v154;
            v30[44] = v155;
            v30[45] = (void *)v200;
            v30[46] = (void *)v204;
            v30[47] = __dstc;
            v30[48] = v212;
            v30[49] = v215;
          }
          v156 = v31[51];
          if (v156 == (void *)1)
          {
            v157 = *((_OWORD *)v31 + 28);
            *((_OWORD *)v30 + 27) = *((_OWORD *)v31 + 27);
            *((_OWORD *)v30 + 28) = v157;
            *((_BYTE *)v30 + 464) = *((_BYTE *)v31 + 464);
            v158 = *((_OWORD *)v31 + 26);
            *((_OWORD *)v30 + 25) = *((_OWORD *)v31 + 25);
            *((_OWORD *)v30 + 26) = v158;
          }
          else
          {
            *((_DWORD *)v30 + 100) = *((_DWORD *)v31 + 100);
            *((_BYTE *)v30 + 404) = *((_BYTE *)v31 + 404);
            if (v156)
            {
              v159 = v31[52];
              v30[51] = v156;
              v30[52] = v159;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v30 + 51) = *(_OWORD *)(v31 + 51);
            }
            v160 = v31[53];
            if (v160)
            {
              v161 = v31[54];
              v30[53] = v160;
              v30[54] = v161;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v30 + 53) = *(_OWORD *)(v31 + 53);
            }
            v162 = v31[55];
            if (v162)
            {
              v163 = v31[56];
              v30[55] = v162;
              v30[56] = v163;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v30 + 55) = *(_OWORD *)(v31 + 55);
            }
            v30[57] = v31[57];
            *((_BYTE *)v30 + 464) = *((_BYTE *)v31 + 464);
          }
          v164 = v31[60];
          v30[59] = v31[59];
          v30[60] = v164;
          v30[61] = v31[61];
          *((_BYTE *)v30 + 496) = *((_BYTE *)v31 + 496);
          v165 = v31[63];
          swift_bridgeObjectRetain();
          if (v165)
          {
            v166 = v31[64];
            v30[63] = v165;
            v30[64] = v166;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v30 + 63) = *(_OWORD *)(v31 + 63);
          }
          *((_WORD *)v30 + 260) = *((_WORD *)v31 + 260);
          v167 = v31[66];
          if (v167)
          {
            v30[66] = v167;
            v30[67] = v31[67];
            v30[68] = v31[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v30 + 33) = *((_OWORD *)v31 + 33);
            v30[68] = v31[68];
          }
          v168 = v31[69];
          v220 = v32;
          if (v168 == (void *)1)
          {
            *(_OWORD *)(v30 + 69) = *(_OWORD *)(v31 + 69);
            v30[71] = v31[71];
          }
          else
          {
            v30[69] = v168;
            v169 = v31[70];
            swift_retain();
            if (v169)
            {
              v170 = v31[71];
              v30[70] = v169;
              v30[71] = v170;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v30 + 35) = *((_OWORD *)v31 + 35);
            }
          }
          v171 = v31[72];
          v30[72] = v171;
          v30[73] = v31[73];
          v30[74] = v31[74];
          v30[75] = v31[75];
          v30[76] = v31[76];
          v30[77] = v31[77];
          v30[78] = v31[78];
          *((_WORD *)v30 + 316) = *((_WORD *)v31 + 316);
          *((_BYTE *)v30 + 634) = *((_BYTE *)v31 + 634);
          v213 = (int *)type metadata accessor for PlatformItemList.Item();
          v172 = v213[28];
          v216 = (char *)v30 + v172;
          v173 = (char *)v31 + v172;
          v174 = type metadata accessor for CommandOperation();
          v205 = *(_QWORD *)(v174 - 8);
          __dstd = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v205 + 48);
          v175 = v171;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__dstd(v173, 1, v174))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v216, v173, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
            v33 = v218;
            v32 = v220;
          }
          else
          {
            *v216 = *v173;
            v177 = *(int *)(v174 + 20);
            v178 = &v216[v177];
            v179 = &v173[v177];
            v201 = v173;
            v180 = *(_QWORD *)&v173[v177];
            v181 = *((_QWORD *)v179 + 1);
            __dsta = (int *)v174;
            v182 = v179[16];
            outlined copy of Text.Storage(v180, v181, v182);
            *(_QWORD *)v178 = v180;
            *((_QWORD *)v178 + 1) = v181;
            v178[16] = v182;
            *((_QWORD *)v178 + 3) = *((_QWORD *)v179 + 3);
            v183 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v184 = &v178[v183];
            v185 = &v179[v183];
            v186 = type metadata accessor for UUID();
            v187 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v186 - 8) + 16);
            swift_bridgeObjectRetain();
            v187(v184, v185, v186);
            v188 = __dsta[6];
            v189 = &v216[v188];
            v190 = &v201[v188];
            if (*v190)
            {
              v191 = v190[1];
              *v189 = *v190;
              v189[1] = v191;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v189 = *(_OWORD *)v190;
            }
            v33 = v218;
            v32 = v220;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v205 + 56))(v216, 0, 1, __dsta);
          }
          *((_BYTE *)v30 + v213[29]) = *((_BYTE *)v31 + v213[29]);
          *((_BYTE *)v30 + v213[30]) = *((_BYTE *)v31 + v213[30]);
          *((_BYTE *)v30 + v213[31]) = *((_BYTE *)v31 + v213[31]);
          *((_BYTE *)v30 + v213[32]) = *((_BYTE *)v31 + v213[32]);
          *(void **)((char *)v30 + v213[33]) = *(void **)((char *)v31 + v213[33]);
          swift_retain();
        }
        else
        {
          v71 = *(_OWORD *)(v31 + 3);
          *(_OWORD *)(v30 + 3) = v71;
          (**(void (***)(void **, void **))(v71 - 8))(v30, v31);
          v30[5] = v31[5];
          v30[6] = v31[6];
          v30[7] = v31[7];
          *((_OWORD *)v30 + 4) = *((_OWORD *)v31 + 4);
          v72 = v31[10];
          v30[10] = v72;
          swift_retain();
          swift_bridgeObjectRetain();
          v73 = v72;
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      goto LABEL_113;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v8;
      v9 = a2[88];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 == 1)
      {
        v10 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 72) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
        a1[88] = 1;
      }
      else
      {
        v15 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v15;
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      }
      *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      v16 = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 8) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
      *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
      *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      v17 = (void *)*((_QWORD *)a2 + 23);
      *((_QWORD *)a1 + 23) = v17;
      v217 = a1;
      v219 = type metadata accessor for ToolbarStorage.Item(0);
      v18 = *(int *)(v219 + 48);
      v19 = (void **)&a1[v18];
      v20 = (void **)&a2[v18];
      v21 = type metadata accessor for PlatformItemList.Item();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v22 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      v24 = v17;
      if (v23(v20, 1, v21))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        a1 = v217;
        v26 = v219;
LABEL_68:
        swift_weakCopyInit();
        a1[*(int *)(v26 + 56)] = a2[*(int *)(v26 + 56)];
        a1[*(int *)(v26 + 60)] = a2[*(int *)(v26 + 60)];
LABEL_113:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v211 = v22;
      v214 = (int *)v21;
      v36 = *v20;
      v37 = v20[1];
      *v19 = *v20;
      v19[1] = v37;
      v38 = v20[3];
      v19[2] = v20[2];
      v19[3] = v38;
      *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
      v39 = v20[6];
      v19[5] = v20[5];
      v19[6] = v39;
      *((_BYTE *)v19 + 56) = *((_BYTE *)v20 + 56);
      v40 = v19 + 8;
      v41 = v20 + 8;
      v42 = (unint64_t)v20[23];
      v43 = v36;
      v44 = v37;
      swift_bridgeObjectRetain();
      swift_retain();
      v45 = v19;
      if (v42 >> 1 == 4294967294)
      {
        v46 = *((_OWORD *)v20 + 13);
        *((_OWORD *)v19 + 12) = *((_OWORD *)v20 + 12);
        *((_OWORD *)v19 + 13) = v46;
        *((_OWORD *)v19 + 14) = *((_OWORD *)v20 + 14);
        *(_DWORD *)((char *)v19 + 239) = *(_DWORD *)((char *)v20 + 239);
        v47 = *((_OWORD *)v20 + 9);
        *((_OWORD *)v19 + 8) = *((_OWORD *)v20 + 8);
        *((_OWORD *)v19 + 9) = v47;
        v48 = *((_OWORD *)v20 + 11);
        *((_OWORD *)v19 + 10) = *((_OWORD *)v20 + 10);
        *((_OWORD *)v19 + 11) = v48;
        v49 = *((_OWORD *)v20 + 5);
        *v40 = *v41;
        *((_OWORD *)v19 + 5) = v49;
        v50 = *((_OWORD *)v20 + 7);
        *((_OWORD *)v19 + 6) = *((_OWORD *)v20 + 6);
        *((_OWORD *)v19 + 7) = v50;
        v51 = v20[32];
        if (v51)
        {
LABEL_18:
          v45[31] = v20[31];
          v45[32] = v51;
          v52 = v20[33];
          swift_bridgeObjectRetain();
          if ((unint64_t)v52 >= 2)
            v53 = v52;
          v45[33] = v52;
          *((_DWORD *)v45 + 68) = *((_DWORD *)v20 + 68);
          *((_BYTE *)v45 + 276) = *((_BYTE *)v20 + 276);
          *(_WORD *)((char *)v45 + 277) = *(_WORD *)((char *)v20 + 277);
          v54 = v20[36];
          v45[35] = v20[35];
          v45[36] = v54;
          swift_retain();
          swift_retain();
          goto LABEL_35;
        }
      }
      else
      {
        v69 = *((unsigned __int8 *)v20 + 72);
        if (v69 == 255)
        {
          *(_QWORD *)v40 = *(_QWORD *)v41;
          *((_BYTE *)v19 + 72) = *((_BYTE *)v20 + 72);
        }
        else
        {
          v70 = v20[8];
          outlined copy of GraphicsImage.Contents(v70, *((_BYTE *)v20 + 72));
          v19[8] = v70;
          *((_BYTE *)v19 + 72) = v69;
          v42 = (unint64_t)v20[23];
        }
        v19[10] = v20[10];
        *(_OWORD *)(v19 + 11) = *(_OWORD *)(v20 + 11);
        *((_BYTE *)v19 + 104) = *((_BYTE *)v20 + 104);
        *(_OWORD *)((char *)v19 + 108) = *(_OWORD *)((char *)v20 + 108);
        *((_BYTE *)v19 + 124) = *((_BYTE *)v20 + 124);
        v76 = *((_OWORD *)v20 + 9);
        *((_OWORD *)v19 + 8) = *((_OWORD *)v20 + 8);
        *((_OWORD *)v19 + 9) = v76;
        *((_WORD *)v19 + 80) = *((_WORD *)v20 + 80);
        *((_BYTE *)v19 + 162) = *((_BYTE *)v20 + 162);
        *((_BYTE *)v19 + 163) = *((_BYTE *)v20 + 163);
        if (v42 >> 1 == 0xFFFFFFFF)
        {
          v77 = *(_OWORD *)(v20 + 23);
          *(_OWORD *)(v19 + 21) = *(_OWORD *)(v20 + 21);
          *(_OWORD *)(v19 + 23) = v77;
        }
        else
        {
          v78 = (uint64_t)v20[21];
          v79 = (uint64_t)v20[22];
          v80 = v20[24];
          outlined copy of AccessibilityImageLabel(v78, v79, v42);
          v45[21] = (void *)v78;
          v45[22] = (void *)v79;
          v45[23] = (void *)v42;
          v45[24] = v80;
        }
        v81 = v20[26];
        v45[25] = v20[25];
        v45[26] = v81;
        *((_WORD *)v45 + 108) = *((_WORD *)v20 + 108);
        *((_DWORD *)v45 + 55) = *((_DWORD *)v20 + 55);
        *((_BYTE *)v45 + 224) = *((_BYTE *)v20 + 224);
        v82 = v20[29];
        v45[29] = v82;
        *((_WORD *)v45 + 120) = *((_WORD *)v20 + 120);
        *((_BYTE *)v45 + 242) = *((_BYTE *)v20 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        v83 = v82;
        v51 = v20[32];
        if (v51)
          goto LABEL_18;
      }
      v84 = *(_OWORD *)(v20 + 33);
      *(_OWORD *)(v45 + 31) = *(_OWORD *)(v20 + 31);
      *(_OWORD *)(v45 + 33) = v84;
      *(_OWORD *)(v45 + 35) = *(_OWORD *)(v20 + 35);
LABEL_35:
      v85 = (unint64_t)v20[41];
      if (v85 >> 2 == 0xFFFFFFFF)
      {
        v86 = *(_OWORD *)(v20 + 47);
        *(_OWORD *)(v45 + 45) = *(_OWORD *)(v20 + 45);
        *(_OWORD *)(v45 + 47) = v86;
        v45[49] = v20[49];
        v87 = *(_OWORD *)(v20 + 39);
        *(_OWORD *)(v45 + 37) = *(_OWORD *)(v20 + 37);
        *(_OWORD *)(v45 + 39) = v87;
        v88 = *(_OWORD *)(v20 + 43);
        *(_OWORD *)(v45 + 41) = *(_OWORD *)(v20 + 41);
        *(_OWORD *)(v45 + 43) = v88;
      }
      else
      {
        v89 = v20[37];
        v90 = (uint64_t)v20[38];
        v91 = (uint64_t)v20[40];
        v93 = (uint64_t)v20[42];
        v92 = (uint64_t)v20[43];
        v94 = v20[44];
        v193 = (uint64_t)v20[39];
        v194 = (uint64_t)v20[45];
        v196 = (uint64_t)v20[46];
        v198 = (uint64_t)v20[47];
        v202 = v20[48];
        __dstb = v20[49];
        outlined copy of PlatformItemList.Item.SystemItem(v89, v90, v193, v91, v85, v93, v92, (char)v94, v194, v196, v198, (char)v202, (uint64_t)__dstb);
        v45[37] = v89;
        v45[38] = (void *)v90;
        v45[39] = (void *)v193;
        v45[40] = (void *)v91;
        v45[41] = (void *)v85;
        v45[42] = (void *)v93;
        v45[43] = (void *)v92;
        v45[44] = v94;
        v45[45] = (void *)v194;
        v45[46] = (void *)v196;
        v45[47] = (void *)v198;
        v45[48] = v202;
        v45[49] = __dstb;
      }
      v95 = v20[51];
      if (v95 == (void *)1)
      {
        v96 = *((_OWORD *)v20 + 28);
        *((_OWORD *)v45 + 27) = *((_OWORD *)v20 + 27);
        *((_OWORD *)v45 + 28) = v96;
        *((_BYTE *)v45 + 464) = *((_BYTE *)v20 + 464);
        v97 = *((_OWORD *)v20 + 26);
        *((_OWORD *)v45 + 25) = *((_OWORD *)v20 + 25);
        *((_OWORD *)v45 + 26) = v97;
      }
      else
      {
        *((_DWORD *)v45 + 100) = *((_DWORD *)v20 + 100);
        *((_BYTE *)v45 + 404) = *((_BYTE *)v20 + 404);
        if (v95)
        {
          v98 = v20[52];
          v45[51] = v95;
          v45[52] = v98;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v45 + 51) = *(_OWORD *)(v20 + 51);
        }
        v99 = v20[53];
        if (v99)
        {
          v100 = v20[54];
          v45[53] = v99;
          v45[54] = v100;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v45 + 53) = *(_OWORD *)(v20 + 53);
        }
        v101 = v20[55];
        if (v101)
        {
          v102 = v20[56];
          v45[55] = v101;
          v45[56] = v102;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v45 + 55) = *(_OWORD *)(v20 + 55);
        }
        v45[57] = v20[57];
        *((_BYTE *)v45 + 464) = *((_BYTE *)v20 + 464);
      }
      v103 = v20[60];
      v45[59] = v20[59];
      v45[60] = v103;
      v45[61] = v20[61];
      *((_BYTE *)v45 + 496) = *((_BYTE *)v20 + 496);
      v104 = v20[63];
      swift_bridgeObjectRetain();
      if (v104)
      {
        v105 = v20[64];
        v45[63] = v104;
        v45[64] = v105;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v45 + 63) = *(_OWORD *)(v20 + 63);
      }
      *((_WORD *)v45 + 260) = *((_WORD *)v20 + 260);
      v106 = v20[66];
      if (v106)
      {
        v45[66] = v106;
        v45[67] = v20[67];
        v45[68] = v20[68];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
      }
      else
      {
        *((_OWORD *)v45 + 33) = *((_OWORD *)v20 + 33);
        v45[68] = v20[68];
      }
      v107 = v20[69];
      if (v107 == (void *)1)
      {
        *(_OWORD *)(v45 + 69) = *(_OWORD *)(v20 + 69);
        v45[71] = v20[71];
      }
      else
      {
        v45[69] = v107;
        v108 = v20[70];
        swift_retain();
        if (v108)
        {
          v109 = v20[71];
          v45[70] = v108;
          v45[71] = v109;
          swift_retain();
        }
        else
        {
          *((_OWORD *)v45 + 35) = *((_OWORD *)v20 + 35);
        }
      }
      v110 = v20[72];
      v45[72] = v110;
      v45[73] = v20[73];
      v45[74] = v20[74];
      v45[75] = v20[75];
      v45[76] = v20[76];
      v45[77] = v20[77];
      v45[78] = v20[78];
      *((_WORD *)v45 + 316) = *((_WORD *)v20 + 316);
      *((_BYTE *)v45 + 634) = *((_BYTE *)v20 + 634);
      v111 = v214[28];
      __dst = (char *)v45 + v111;
      v112 = (char *)v20 + v111;
      v113 = type metadata accessor for CommandOperation();
      v199 = *(_QWORD *)(v113 - 8);
      v203 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v199 + 48);
      v114 = v110;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v203(v112, 1, v113))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(__dst, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        v116 = v214;
        a1 = v217;
        v26 = v219;
        v117 = v211;
      }
      else
      {
        *__dst = *v112;
        v118 = *(int *)(v113 + 20);
        v119 = &__dst[v118];
        v120 = &v112[v118];
        v121 = *(_QWORD *)&v112[v118];
        v122 = *(_QWORD *)&v112[v118 + 8];
        v123 = v112[v118 + 16];
        outlined copy of Text.Storage(*(_QWORD *)v120, *((_QWORD *)v120 + 1), v120[16]);
        *(_QWORD *)v119 = v121;
        *((_QWORD *)v119 + 1) = v122;
        v119[16] = v123;
        *((_QWORD *)v119 + 3) = *((_QWORD *)v120 + 3);
        v124 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v125 = &v119[v124];
        v126 = &v120[v124];
        v127 = type metadata accessor for UUID();
        v128 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v127 - 8) + 16);
        swift_bridgeObjectRetain();
        v128(v125, v126, v127);
        v129 = *(int *)(v113 + 24);
        v130 = &__dst[v129];
        v131 = &v112[v129];
        v26 = v219;
        if (*v131)
        {
          v132 = v131[1];
          *v130 = *v131;
          v130[1] = v132;
          swift_retain();
        }
        else
        {
          *(_OWORD *)v130 = *(_OWORD *)v131;
        }
        v116 = v214;
        v117 = v211;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v199 + 56))(__dst, 0, 1, v113);
        a1 = v217;
      }
      *((_BYTE *)v45 + v116[29]) = *((_BYTE *)v20 + v116[29]);
      *((_BYTE *)v45 + v116[30]) = *((_BYTE *)v20 + v116[30]);
      *((_BYTE *)v45 + v116[31]) = *((_BYTE *)v20 + v116[31]);
      *((_BYTE *)v45 + v116[32]) = *((_BYTE *)v20 + v116[32]);
      *(void **)((char *)v45 + v116[33]) = *(void **)((char *)v20 + v116[33]);
      v133 = *(void (**)(void **, _QWORD, uint64_t, int *))(v117 + 56);
      swift_retain();
      v133(v45, 0, 1, v116);
      goto LABEL_68;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void destroy for ToolbarStorage.Entry.Kind(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a1 + 56) == 1)
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    swift_bridgeObjectRelease();
    v16 = a1 + *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v17 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
      return;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v16);
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }

    swift_bridgeObjectRelease();
    swift_release();
    v18 = *(_QWORD *)(v16 + 184);
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v20 = *(unsigned __int8 *)(v16 + 72);
      if (v20 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v16 + 64), v20);
        v18 = *(_QWORD *)(v16 + 184);
        v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v19 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v16 + 168), *(_QWORD *)(v16 + 176), v18);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v16 + 256))
    {
      swift_bridgeObjectRelease();
      v21 = *(void **)(v16 + 264);
      if ((unint64_t)v21 >= 2)

      swift_release();
      swift_release();
    }
    v22 = *(_QWORD *)(v16 + 328);
    if (v22 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v16 + 296), *(_QWORD *)(v16 + 304), *(_QWORD *)(v16 + 312), *(_QWORD *)(v16 + 320), v22, *(_QWORD *)(v16 + 336), *(_QWORD *)(v16 + 344), *(_QWORD *)(v16 + 352), *(_QWORD *)(v16 + 360), *(_QWORD *)(v16 + 368), *(_QWORD *)(v16 + 376), *(_QWORD *)(v16 + 384), *(_QWORD *)(v16 + 392));
    v23 = *(_QWORD *)(v16 + 408);
    if (v23)
    {
      if (v23 == 1)
      {
LABEL_61:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v16 + 504))
          swift_release();
        if (*(_QWORD *)(v16 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v16 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v16 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = v16 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        v25 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
        {
          v26 = v24 + *(int *)(v25 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
          swift_bridgeObjectRelease();
          v27 = v26 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v28 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
          if (*(_QWORD *)(v24 + *(int *)(v25 + 24)))
            swift_release();
        }
        swift_release();
        return;
      }
      swift_release();
    }
    if (*(_QWORD *)(v16 + 424))
      swift_release();
    if (*(_QWORD *)(v16 + 440))
      swift_release();
    goto LABEL_61;
  }
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(a1 + 88) == 1)
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    swift_release();
    swift_bridgeObjectRelease();

    v3 = a1 + *(int *)(type metadata accessor for ToolbarStorage.Item(0) + 48);
    v4 = type metadata accessor for PlatformItemList.Item();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
      goto LABEL_36;

    swift_bridgeObjectRelease();
    swift_release();
    v5 = *(_QWORD *)(v3 + 184);
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v7 = *(unsigned __int8 *)(v3 + 72);
      if (v7 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v7);
        v5 = *(_QWORD *)(v3 + 184);
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v6 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v5);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v3 + 256))
    {
      swift_bridgeObjectRelease();
      v8 = *(void **)(v3 + 264);
      if ((unint64_t)v8 >= 2)

      swift_release();
      swift_release();
    }
    v9 = *(_QWORD *)(v3 + 328);
    if (v9 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v9, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
    v10 = *(_QWORD *)(v3 + 408);
    if (v10)
    {
      if (v10 == 1)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v3 + 504))
          swift_release();
        if (*(_QWORD *)(v3 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v3 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v3 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = v3 + *(int *)(v4 + 112);
        v12 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
        {
          v13 = v11 + *(int *)(v12 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
          swift_bridgeObjectRelease();
          v14 = v13 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v15 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
          if (*(_QWORD *)(v11 + *(int *)(v12 + 24)))
            swift_release();
        }
        swift_release();
LABEL_36:
        swift_weakDestroy();
        return;
      }
      swift_release();
    }
    if (*(_QWORD *)(v3 + 424))
      swift_release();
    if (*(_QWORD *)(v3 + 440))
      swift_release();
    goto LABEL_25;
  }
}

char *initializeWithCopy for ToolbarStorage.Entry.Kind(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  int *v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(void **, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(void **, uint64_t, uint64_t);
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _OWORD *v38;
  _OWORD *v39;
  unint64_t v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _OWORD *v56;
  _OWORD *v57;
  unint64_t v58;
  id v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  int v70;
  void *v71;
  __int128 v72;
  void *v73;
  id v74;
  int v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  __int128 v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  __int128 v97;
  __int128 v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  void (*v130)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  void (*v135)(void **, _QWORD, uint64_t, int *);
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  id v143;
  __int128 v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  __int128 v155;
  __int128 v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  void (*v186)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  void *v201;
  unsigned int (*v202)(_BYTE *, uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *__dstb;
  _BYTE *__dst;
  void *__dstc;
  unsigned int (*__dstd)(_BYTE *, uint64_t, uint64_t);
  int *__dsta;
  uint64_t v211;
  void *v212;
  int *v213;
  int *v214;
  void *v215;
  _BYTE *v216;
  int *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v10 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v10;
    v11 = a2[56];
    swift_bridgeObjectRetain();
    if (v11 == 1)
    {
      v12 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
      a1[56] = 1;
    }
    else
    {
      v25 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v25;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    v26 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a1 + 9) = v26;
    v27 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v28 = (void **)&a1[v27];
    v29 = (void **)&a2[v27];
    v30 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
LABEL_108:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v72 = *(_OWORD *)(v29 + 3);
      *(_OWORD *)(v28 + 3) = v72;
      (**(void (***)(void **, void **))(v72 - 8))(v28, v29);
      v28[5] = v29[5];
      v28[6] = v29[6];
      v28[7] = v29[7];
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      v73 = v29[10];
      v28[10] = v73;
      swift_retain();
      swift_bridgeObjectRetain();
      v74 = v73;
LABEL_107:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_108;
    }
    v218 = v31;
    v52 = *v29;
    v53 = v29[1];
    *v28 = *v29;
    v28[1] = v53;
    v54 = v29[3];
    v28[2] = v29[2];
    v28[3] = v54;
    *((_BYTE *)v28 + 32) = *((_BYTE *)v29 + 32);
    v55 = v29[6];
    v28[5] = v29[5];
    v28[6] = v55;
    *((_BYTE *)v28 + 56) = *((_BYTE *)v29 + 56);
    v56 = v28 + 8;
    v57 = v29 + 8;
    v58 = (unint64_t)v29[23];
    v59 = v52;
    v60 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v58 >> 1 == 4294967294)
    {
      v61 = *((_OWORD *)v29 + 13);
      *((_OWORD *)v28 + 12) = *((_OWORD *)v29 + 12);
      *((_OWORD *)v28 + 13) = v61;
      *((_OWORD *)v28 + 14) = *((_OWORD *)v29 + 14);
      *(_DWORD *)((char *)v28 + 239) = *(_DWORD *)((char *)v29 + 239);
      v62 = *((_OWORD *)v29 + 9);
      *((_OWORD *)v28 + 8) = *((_OWORD *)v29 + 8);
      *((_OWORD *)v28 + 9) = v62;
      v63 = *((_OWORD *)v29 + 11);
      *((_OWORD *)v28 + 10) = *((_OWORD *)v29 + 10);
      *((_OWORD *)v28 + 11) = v63;
      v64 = *((_OWORD *)v29 + 5);
      *v56 = *v57;
      *((_OWORD *)v28 + 5) = v64;
      v65 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v65;
      v66 = v29[32];
      if (v66)
      {
LABEL_22:
        v28[31] = v29[31];
        v28[32] = v66;
        v67 = v29[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v67 >= 2)
          v68 = v67;
        v28[33] = v67;
        *((_DWORD *)v28 + 68) = *((_DWORD *)v29 + 68);
        *((_BYTE *)v28 + 276) = *((_BYTE *)v29 + 276);
        *(_WORD *)((char *)v28 + 277) = *(_WORD *)((char *)v29 + 277);
        v69 = v29[36];
        v28[35] = v29[35];
        v28[36] = v69;
        swift_retain();
        swift_retain();
        goto LABEL_74;
      }
    }
    else
    {
      v75 = *((unsigned __int8 *)v29 + 72);
      if (v75 == 255)
      {
        *(_QWORD *)v56 = *(_QWORD *)v57;
        *((_BYTE *)v28 + 72) = *((_BYTE *)v29 + 72);
      }
      else
      {
        v76 = v29[8];
        outlined copy of GraphicsImage.Contents(v76, *((_BYTE *)v29 + 72));
        v28[8] = v76;
        *((_BYTE *)v28 + 72) = v75;
        v58 = (unint64_t)v29[23];
      }
      v28[10] = v29[10];
      *(_OWORD *)(v28 + 11) = *(_OWORD *)(v29 + 11);
      *((_BYTE *)v28 + 104) = *((_BYTE *)v29 + 104);
      *(_OWORD *)((char *)v28 + 108) = *(_OWORD *)((char *)v29 + 108);
      *((_BYTE *)v28 + 124) = *((_BYTE *)v29 + 124);
      v136 = *((_OWORD *)v29 + 9);
      *((_OWORD *)v28 + 8) = *((_OWORD *)v29 + 8);
      *((_OWORD *)v28 + 9) = v136;
      *((_WORD *)v28 + 80) = *((_WORD *)v29 + 80);
      *((_BYTE *)v28 + 162) = *((_BYTE *)v29 + 162);
      *((_BYTE *)v28 + 163) = *((_BYTE *)v29 + 163);
      if (v58 >> 1 == 0xFFFFFFFF)
      {
        v137 = *(_OWORD *)(v29 + 23);
        *(_OWORD *)(v28 + 21) = *(_OWORD *)(v29 + 21);
        *(_OWORD *)(v28 + 23) = v137;
      }
      else
      {
        v138 = (uint64_t)v29[21];
        v139 = (uint64_t)v29[22];
        v140 = v29[24];
        outlined copy of AccessibilityImageLabel(v138, v139, v58);
        v28[21] = (void *)v138;
        v28[22] = (void *)v139;
        v28[23] = (void *)v58;
        v28[24] = v140;
      }
      v141 = v29[26];
      v28[25] = v29[25];
      v28[26] = v141;
      *((_WORD *)v28 + 108) = *((_WORD *)v29 + 108);
      *((_DWORD *)v28 + 55) = *((_DWORD *)v29 + 55);
      *((_BYTE *)v28 + 224) = *((_BYTE *)v29 + 224);
      v142 = v29[29];
      v28[29] = v142;
      *((_WORD *)v28 + 120) = *((_WORD *)v29 + 120);
      *((_BYTE *)v28 + 242) = *((_BYTE *)v29 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v143 = v142;
      v66 = v29[32];
      if (v66)
        goto LABEL_22;
    }
    v144 = *(_OWORD *)(v29 + 33);
    *(_OWORD *)(v28 + 31) = *(_OWORD *)(v29 + 31);
    *(_OWORD *)(v28 + 33) = v144;
    *(_OWORD *)(v28 + 35) = *(_OWORD *)(v29 + 35);
LABEL_74:
    v145 = (unint64_t)v29[41];
    if (v145 >> 2 == 0xFFFFFFFF)
    {
      v146 = *(_OWORD *)(v29 + 47);
      *(_OWORD *)(v28 + 45) = *(_OWORD *)(v29 + 45);
      *(_OWORD *)(v28 + 47) = v146;
      v28[49] = v29[49];
      v147 = *(_OWORD *)(v29 + 39);
      *(_OWORD *)(v28 + 37) = *(_OWORD *)(v29 + 37);
      *(_OWORD *)(v28 + 39) = v147;
      v148 = *(_OWORD *)(v29 + 43);
      *(_OWORD *)(v28 + 41) = *(_OWORD *)(v29 + 41);
      *(_OWORD *)(v28 + 43) = v148;
    }
    else
    {
      v149 = v29[37];
      v150 = (uint64_t)v29[38];
      v194 = (uint64_t)v29[40];
      v196 = (uint64_t)v29[39];
      v151 = (uint64_t)v29[42];
      v152 = (uint64_t)v29[43];
      v153 = v29[44];
      v199 = (uint64_t)v29[45];
      v204 = (uint64_t)v29[46];
      __dstc = v29[47];
      v212 = v29[48];
      v215 = v29[49];
      outlined copy of PlatformItemList.Item.SystemItem(v149, v150, v196, v194, v145, v151, v152, (char)v153, v199, v204, (uint64_t)__dstc, (char)v212, (uint64_t)v215);
      v28[37] = v149;
      v28[38] = (void *)v150;
      v28[39] = (void *)v196;
      v28[40] = (void *)v194;
      v28[41] = (void *)v145;
      v28[42] = (void *)v151;
      v28[43] = (void *)v152;
      v28[44] = v153;
      v28[45] = (void *)v199;
      v28[46] = (void *)v204;
      v28[47] = __dstc;
      v28[48] = v212;
      v28[49] = v215;
    }
    v154 = v29[51];
    if (v154 == (void *)1)
    {
      v155 = *((_OWORD *)v29 + 28);
      *((_OWORD *)v28 + 27) = *((_OWORD *)v29 + 27);
      *((_OWORD *)v28 + 28) = v155;
      *((_BYTE *)v28 + 464) = *((_BYTE *)v29 + 464);
      v156 = *((_OWORD *)v29 + 26);
      *((_OWORD *)v28 + 25) = *((_OWORD *)v29 + 25);
      *((_OWORD *)v28 + 26) = v156;
    }
    else
    {
      *((_DWORD *)v28 + 100) = *((_DWORD *)v29 + 100);
      *((_BYTE *)v28 + 404) = *((_BYTE *)v29 + 404);
      if (v154)
      {
        v157 = v29[52];
        v28[51] = v154;
        v28[52] = v157;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 51) = *(_OWORD *)(v29 + 51);
      }
      v158 = v29[53];
      if (v158)
      {
        v159 = v29[54];
        v28[53] = v158;
        v28[54] = v159;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 53) = *(_OWORD *)(v29 + 53);
      }
      v160 = v29[55];
      if (v160)
      {
        v161 = v29[56];
        v28[55] = v160;
        v28[56] = v161;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 55) = *(_OWORD *)(v29 + 55);
      }
      v28[57] = v29[57];
      *((_BYTE *)v28 + 464) = *((_BYTE *)v29 + 464);
    }
    v162 = v29[60];
    v28[59] = v29[59];
    v28[60] = v162;
    v28[61] = v29[61];
    *((_BYTE *)v28 + 496) = *((_BYTE *)v29 + 496);
    v163 = v29[63];
    swift_bridgeObjectRetain();
    if (v163)
    {
      v164 = v29[64];
      v28[63] = v163;
      v28[64] = v164;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v28 + 63) = *(_OWORD *)(v29 + 63);
    }
    *((_WORD *)v28 + 260) = *((_WORD *)v29 + 260);
    v165 = v29[66];
    if (v165)
    {
      v28[66] = v165;
      v28[67] = v29[67];
      v28[68] = v29[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v28 + 33) = *((_OWORD *)v29 + 33);
      v28[68] = v29[68];
    }
    v166 = v29[69];
    v220 = v30;
    if (v166 == (void *)1)
    {
      *(_OWORD *)(v28 + 69) = *(_OWORD *)(v29 + 69);
      v28[71] = v29[71];
    }
    else
    {
      v28[69] = v166;
      v167 = v29[70];
      swift_retain();
      if (v167)
      {
        v168 = v29[71];
        v28[70] = v167;
        v28[71] = v168;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v28 + 35) = *((_OWORD *)v29 + 35);
      }
    }
    v169 = v29[72];
    v28[72] = v169;
    v28[73] = v29[73];
    v28[74] = v29[74];
    v28[75] = v29[75];
    v28[76] = v29[76];
    v28[77] = v29[77];
    v28[78] = v29[78];
    *((_WORD *)v28 + 316) = *((_WORD *)v29 + 316);
    *((_BYTE *)v28 + 634) = *((_BYTE *)v29 + 634);
    v170 = type metadata accessor for PlatformItemList.Item();
    v171 = *(int *)(v170 + 112);
    v213 = (int *)v170;
    v216 = (char *)v28 + v171;
    v172 = (char *)v29 + v171;
    v173 = type metadata accessor for CommandOperation();
    v205 = *(_QWORD *)(v173 - 8);
    __dstd = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v205 + 48);
    v174 = v169;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dstd(v172, 1, v173))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v216, v172, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
      v30 = v220;
      v31 = v218;
    }
    else
    {
      *v216 = *v172;
      v176 = *(int *)(v173 + 20);
      v177 = &v216[v176];
      v178 = &v172[v176];
      v200 = v172;
      v179 = *(_QWORD *)&v172[v176];
      v180 = *((_QWORD *)v178 + 1);
      __dsta = (int *)v173;
      v181 = v178[16];
      outlined copy of Text.Storage(v179, v180, v181);
      *(_QWORD *)v177 = v179;
      *((_QWORD *)v177 + 1) = v180;
      v177[16] = v181;
      *((_QWORD *)v177 + 3) = *((_QWORD *)v178 + 3);
      v182 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v183 = &v177[v182];
      v184 = &v178[v182];
      v185 = type metadata accessor for UUID();
      v186 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v185 - 8) + 16);
      swift_bridgeObjectRetain();
      v186(v183, v184, v185);
      v187 = __dsta[6];
      v188 = &v216[v187];
      v189 = &v200[v187];
      if (*v189)
      {
        v190 = v189[1];
        *v188 = *v189;
        v188[1] = v190;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v188 = *(_OWORD *)v189;
      }
      v30 = v220;
      v31 = v218;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v205 + 56))(v216, 0, 1, __dsta);
    }
    *((_BYTE *)v28 + v213[29]) = *((_BYTE *)v29 + v213[29]);
    *((_BYTE *)v28 + v213[30]) = *((_BYTE *)v29 + v213[30]);
    *((_BYTE *)v28 + v213[31]) = *((_BYTE *)v29 + v213[31]);
    *((_BYTE *)v28 + v213[32]) = *((_BYTE *)v29 + v213[32]);
    *(void **)((char *)v28 + v213[33]) = *(void **)((char *)v29 + v213[33]);
    swift_retain();
    goto LABEL_107;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    v7 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a1 + 5) = v7;
    v8 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      v9 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
      a1[88] = 1;
    }
    else
    {
      v13 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v13;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
    v14 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 8) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
    *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
    *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    v15 = (void *)*((_QWORD *)a2 + 23);
    *((_QWORD *)a1 + 23) = v15;
    v16 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    v17 = v16[12];
    v219 = a1;
    v18 = (void **)&a1[v17];
    v19 = (void **)&a2[v17];
    v20 = type metadata accessor for PlatformItemList.Item();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = v15;
    if (v22(v19, 1, v20))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      a1 = v219;
LABEL_67:
      swift_weakCopyInit();
      a1[v16[14]] = a2[v16[14]];
      a1[v16[15]] = a2[v16[15]];
      goto LABEL_108;
    }
    v211 = v21;
    v214 = v16;
    v217 = (int *)v20;
    v34 = *v19;
    v35 = v19[1];
    *v18 = *v19;
    v18[1] = v35;
    v36 = v19[3];
    v18[2] = v19[2];
    v18[3] = v36;
    *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
    v37 = v19[6];
    v18[5] = v19[5];
    v18[6] = v37;
    *((_BYTE *)v18 + 56) = *((_BYTE *)v19 + 56);
    v38 = v18 + 8;
    v39 = v19 + 8;
    v40 = (unint64_t)v19[23];
    v41 = v34;
    v42 = v35;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v40 >> 1 == 4294967294)
    {
      v43 = *((_OWORD *)v19 + 13);
      *((_OWORD *)v18 + 12) = *((_OWORD *)v19 + 12);
      *((_OWORD *)v18 + 13) = v43;
      *((_OWORD *)v18 + 14) = *((_OWORD *)v19 + 14);
      *(_DWORD *)((char *)v18 + 239) = *(_DWORD *)((char *)v19 + 239);
      v44 = *((_OWORD *)v19 + 9);
      *((_OWORD *)v18 + 8) = *((_OWORD *)v19 + 8);
      *((_OWORD *)v18 + 9) = v44;
      v45 = *((_OWORD *)v19 + 11);
      *((_OWORD *)v18 + 10) = *((_OWORD *)v19 + 10);
      *((_OWORD *)v18 + 11) = v45;
      v46 = *((_OWORD *)v19 + 5);
      *v38 = *v39;
      *((_OWORD *)v18 + 5) = v46;
      v47 = *((_OWORD *)v19 + 7);
      *((_OWORD *)v18 + 6) = *((_OWORD *)v19 + 6);
      *((_OWORD *)v18 + 7) = v47;
      v48 = v19[32];
      if (v48)
      {
LABEL_16:
        v18[31] = v19[31];
        v18[32] = v48;
        v49 = v19[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v49 >= 2)
          v50 = v49;
        v18[33] = v49;
        *((_DWORD *)v18 + 68) = *((_DWORD *)v19 + 68);
        *((_BYTE *)v18 + 276) = *((_BYTE *)v19 + 276);
        *(_WORD *)((char *)v18 + 277) = *(_WORD *)((char *)v19 + 277);
        v51 = v19[36];
        v18[35] = v19[35];
        v18[36] = v51;
        swift_retain();
        swift_retain();
LABEL_36:
        v86 = (unint64_t)v19[41];
        if (v86 >> 2 == 0xFFFFFFFF)
        {
          v87 = *(_OWORD *)(v19 + 47);
          *(_OWORD *)(v18 + 45) = *(_OWORD *)(v19 + 45);
          *(_OWORD *)(v18 + 47) = v87;
          v18[49] = v19[49];
          v88 = *(_OWORD *)(v19 + 39);
          *(_OWORD *)(v18 + 37) = *(_OWORD *)(v19 + 37);
          *(_OWORD *)(v18 + 39) = v88;
          v89 = *(_OWORD *)(v19 + 43);
          *(_OWORD *)(v18 + 41) = *(_OWORD *)(v19 + 41);
          *(_OWORD *)(v18 + 43) = v89;
        }
        else
        {
          v90 = v19[37];
          v91 = (uint64_t)v19[38];
          v92 = (uint64_t)v19[40];
          v93 = (uint64_t)v19[42];
          v94 = (uint64_t)v19[43];
          v95 = v19[44];
          v192 = (uint64_t)v19[39];
          v193 = (uint64_t)v19[45];
          v195 = (uint64_t)v19[46];
          v197 = (uint64_t)v19[47];
          v201 = v19[48];
          __dstb = v19[49];
          outlined copy of PlatformItemList.Item.SystemItem(v90, v91, v192, v92, v86, v93, v94, (char)v95, v193, v195, v197, (char)v201, (uint64_t)__dstb);
          v18[37] = v90;
          v18[38] = (void *)v91;
          v18[39] = (void *)v192;
          v18[40] = (void *)v92;
          v18[41] = (void *)v86;
          v18[42] = (void *)v93;
          v18[43] = (void *)v94;
          v18[44] = v95;
          v18[45] = (void *)v193;
          v18[46] = (void *)v195;
          v18[47] = (void *)v197;
          v18[48] = v201;
          v18[49] = __dstb;
        }
        v96 = v19[51];
        if (v96 == (void *)1)
        {
          v97 = *((_OWORD *)v19 + 28);
          *((_OWORD *)v18 + 27) = *((_OWORD *)v19 + 27);
          *((_OWORD *)v18 + 28) = v97;
          *((_BYTE *)v18 + 464) = *((_BYTE *)v19 + 464);
          v98 = *((_OWORD *)v19 + 26);
          *((_OWORD *)v18 + 25) = *((_OWORD *)v19 + 25);
          *((_OWORD *)v18 + 26) = v98;
LABEL_49:
          v104 = v19[60];
          v18[59] = v19[59];
          v18[60] = v104;
          v18[61] = v19[61];
          *((_BYTE *)v18 + 496) = *((_BYTE *)v19 + 496);
          v105 = v19[63];
          swift_bridgeObjectRetain();
          if (v105)
          {
            v106 = v19[64];
            v18[63] = v105;
            v18[64] = v106;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v18 + 63) = *(_OWORD *)(v19 + 63);
          }
          *((_WORD *)v18 + 260) = *((_WORD *)v19 + 260);
          v107 = v19[66];
          if (v107)
          {
            v18[66] = v107;
            v18[67] = v19[67];
            v18[68] = v19[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v18 + 33) = *((_OWORD *)v19 + 33);
            v18[68] = v19[68];
          }
          v108 = v19[69];
          if (v108 == (void *)1)
          {
            *(_OWORD *)(v18 + 69) = *(_OWORD *)(v19 + 69);
            v18[71] = v19[71];
          }
          else
          {
            v18[69] = v108;
            v109 = v19[70];
            swift_retain();
            if (v109)
            {
              v110 = v19[71];
              v18[70] = v109;
              v18[71] = v110;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v18 + 35) = *((_OWORD *)v19 + 35);
            }
          }
          v111 = v19[72];
          v18[72] = v111;
          v18[73] = v19[73];
          v18[74] = v19[74];
          v18[75] = v19[75];
          v18[76] = v19[76];
          v18[77] = v19[77];
          v18[78] = v19[78];
          *((_WORD *)v18 + 316) = *((_WORD *)v19 + 316);
          *((_BYTE *)v18 + 634) = *((_BYTE *)v19 + 634);
          v112 = v217[28];
          __dst = (char *)v18 + v112;
          v113 = (char *)v19 + v112;
          v114 = type metadata accessor for CommandOperation();
          v198 = *(_QWORD *)(v114 - 8);
          v202 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v198 + 48);
          v115 = v111;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v202(v113, 1, v114))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(__dst, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
            a1 = v219;
            v16 = v214;
            v117 = v217;
            v118 = v211;
          }
          else
          {
            v119 = v113;
            *__dst = *v113;
            v120 = *(int *)(v114 + 20);
            v203 = v114;
            v121 = &__dst[v120];
            v122 = &v113[v120];
            v123 = *(_QWORD *)v122;
            v124 = *((_QWORD *)v122 + 1);
            v125 = v122[16];
            outlined copy of Text.Storage(*(_QWORD *)v122, v124, v125);
            *(_QWORD *)v121 = v123;
            *((_QWORD *)v121 + 1) = v124;
            v121[16] = v125;
            *((_QWORD *)v121 + 3) = *((_QWORD *)v122 + 3);
            v126 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v127 = &v121[v126];
            v128 = &v122[v126];
            v129 = type metadata accessor for UUID();
            v130 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v129 - 8) + 16);
            swift_bridgeObjectRetain();
            v130(v127, v128, v129);
            v131 = *(int *)(v203 + 24);
            v132 = &__dst[v131];
            v133 = &v119[v131];
            v16 = v214;
            if (*v133)
            {
              v134 = v133[1];
              *v132 = *v133;
              v132[1] = v134;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v132 = *(_OWORD *)v133;
            }
            v117 = v217;
            v118 = v211;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v198 + 56))(__dst, 0, 1, v203);
            a1 = v219;
          }
          *((_BYTE *)v18 + v117[29]) = *((_BYTE *)v19 + v117[29]);
          *((_BYTE *)v18 + v117[30]) = *((_BYTE *)v19 + v117[30]);
          *((_BYTE *)v18 + v117[31]) = *((_BYTE *)v19 + v117[31]);
          *((_BYTE *)v18 + v117[32]) = *((_BYTE *)v19 + v117[32]);
          *(void **)((char *)v18 + v117[33]) = *(void **)((char *)v19 + v117[33]);
          v135 = *(void (**)(void **, _QWORD, uint64_t, int *))(v118 + 56);
          swift_retain();
          v135(v18, 0, 1, v117);
          goto LABEL_67;
        }
        *((_DWORD *)v18 + 100) = *((_DWORD *)v19 + 100);
        *((_BYTE *)v18 + 404) = *((_BYTE *)v19 + 404);
        if (v96)
        {
          v99 = v19[52];
          v18[51] = v96;
          v18[52] = v99;
          swift_retain();
          v100 = v19[53];
          if (v100)
            goto LABEL_43;
        }
        else
        {
          *(_OWORD *)(v18 + 51) = *(_OWORD *)(v19 + 51);
          v100 = v19[53];
          if (v100)
          {
LABEL_43:
            v101 = v19[54];
            v18[53] = v100;
            v18[54] = v101;
            swift_retain();
            v102 = v19[55];
            if (v102)
            {
LABEL_44:
              v103 = v19[56];
              v18[55] = v102;
              v18[56] = v103;
              swift_retain();
LABEL_48:
              v18[57] = v19[57];
              *((_BYTE *)v18 + 464) = *((_BYTE *)v19 + 464);
              goto LABEL_49;
            }
LABEL_47:
            *(_OWORD *)(v18 + 55) = *(_OWORD *)(v19 + 55);
            goto LABEL_48;
          }
        }
        *(_OWORD *)(v18 + 53) = *(_OWORD *)(v19 + 53);
        v102 = v19[55];
        if (v102)
          goto LABEL_44;
        goto LABEL_47;
      }
    }
    else
    {
      v70 = *((unsigned __int8 *)v19 + 72);
      if (v70 == 255)
      {
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *((_BYTE *)v18 + 72) = *((_BYTE *)v19 + 72);
      }
      else
      {
        v71 = v19[8];
        outlined copy of GraphicsImage.Contents(v71, *((_BYTE *)v19 + 72));
        v18[8] = v71;
        *((_BYTE *)v18 + 72) = v70;
        v40 = (unint64_t)v19[23];
      }
      v18[10] = v19[10];
      *(_OWORD *)(v18 + 11) = *(_OWORD *)(v19 + 11);
      *((_BYTE *)v18 + 104) = *((_BYTE *)v19 + 104);
      *(_OWORD *)((char *)v18 + 108) = *(_OWORD *)((char *)v19 + 108);
      *((_BYTE *)v18 + 124) = *((_BYTE *)v19 + 124);
      v77 = *((_OWORD *)v19 + 9);
      *((_OWORD *)v18 + 8) = *((_OWORD *)v19 + 8);
      *((_OWORD *)v18 + 9) = v77;
      *((_WORD *)v18 + 80) = *((_WORD *)v19 + 80);
      *((_BYTE *)v18 + 162) = *((_BYTE *)v19 + 162);
      *((_BYTE *)v18 + 163) = *((_BYTE *)v19 + 163);
      if (v40 >> 1 == 0xFFFFFFFF)
      {
        v78 = *(_OWORD *)(v19 + 23);
        *(_OWORD *)(v18 + 21) = *(_OWORD *)(v19 + 21);
        *(_OWORD *)(v18 + 23) = v78;
      }
      else
      {
        v79 = (uint64_t)v19[21];
        v80 = (uint64_t)v19[22];
        v81 = v19[24];
        outlined copy of AccessibilityImageLabel(v79, v80, v40);
        v18[21] = (void *)v79;
        v18[22] = (void *)v80;
        v18[23] = (void *)v40;
        v18[24] = v81;
      }
      v82 = v19[26];
      v18[25] = v19[25];
      v18[26] = v82;
      *((_WORD *)v18 + 108) = *((_WORD *)v19 + 108);
      *((_DWORD *)v18 + 55) = *((_DWORD *)v19 + 55);
      *((_BYTE *)v18 + 224) = *((_BYTE *)v19 + 224);
      v83 = v19[29];
      v18[29] = v83;
      *((_WORD *)v18 + 120) = *((_WORD *)v19 + 120);
      *((_BYTE *)v18 + 242) = *((_BYTE *)v19 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v84 = v83;
      v48 = v19[32];
      if (v48)
        goto LABEL_16;
    }
    v85 = *(_OWORD *)(v19 + 33);
    *(_OWORD *)(v18 + 31) = *(_OWORD *)(v19 + 31);
    *(_OWORD *)(v18 + 33) = v85;
    *(_OWORD *)(v18 + 35) = *(_OWORD *)(v19 + 35);
    goto LABEL_36;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for ToolbarStorage.Entry.Kind(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char *v3;
  int EnumCaseMultiPayload;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  int *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(void **, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(void **, uint64_t, uint64_t);
  uint64_t v32;
  void *v33;
  void *v34;
  _OWORD *v35;
  id *v36;
  unint64_t v37;
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  id v50;
  int v51;
  void *v52;
  void *v53;
  _OWORD *v54;
  id *v55;
  unint64_t v56;
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  int v73;
  id v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  int v84;
  void *v85;
  id v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  __int128 v112;
  void *v113;
  _OWORD *v114;
  __int128 v115;
  void *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  id v122;
  _BYTE *v123;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  void (*v137)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  void (*v143)(void **, _QWORD, uint64_t, int *);
  id v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  int v153;
  void *v154;
  id v155;
  void *v156;
  id v157;
  int v158;
  __int128 v159;
  __int128 v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  __int128 v185;
  void *v186;
  _OWORD *v187;
  __int128 v188;
  void *v189;
  void *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  _BYTE *v205;
  _BYTE *v206;
  uint64_t v207;
  void (*v208)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  uint64_t v222;
  unsigned int (*v223)(_BYTE *, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  void *v226;
  _BYTE *v227;
  uint64_t v228;
  unsigned int (*v229)(_BYTE *, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  void *v232;
  int *v233;
  int *__dst;
  void *__dstb;
  _BYTE *__dsta;
  int *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;

  v3 = (char *)a1;
  if ((unsigned __int8 *)a1 == a2)
    return v3;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for ToolbarStorage.Entry.Kind);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *((_QWORD *)v3 + 1) = *((_QWORD *)a2 + 1);
    v9 = a2[56];
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      v10 = *((_QWORD *)a2 + 5);
      *((_QWORD *)v3 + 5) = v10;
      *((_QWORD *)v3 + 6) = *((_QWORD *)a2 + 6);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(v3 + 16), (uint64_t)(a2 + 16));
      v3[56] = 1;
    }
    else
    {
      v24 = *((_OWORD *)a2 + 1);
      v25 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v3 + 41) = *(_OWORD *)(a2 + 41);
      *((_OWORD *)v3 + 1) = v24;
      *((_OWORD *)v3 + 2) = v25;
    }
    v3[57] = a2[57];
    v3[58] = a2[58];
    v3[59] = a2[59];
    *((_QWORD *)v3 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)v3 + 9) = *((_QWORD *)a2 + 9);
    v26 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v27 = (void **)&v3[v26];
    v28 = (void **)&a2[v26];
    v29 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v30 + 48);
    swift_bridgeObjectRetain();
    if (v31(v28, 1, v29))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
LABEL_112:
      swift_storeEnumTagMultiPayload();
      return v3;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v70 = v28[3];
      v27[3] = v70;
      v27[4] = v28[4];
      (**((void (***)(void **, void **))v70 - 1))(v27, v28);
      v27[5] = v28[5];
      *((_DWORD *)v27 + 12) = *((_DWORD *)v28 + 12);
      *((_DWORD *)v27 + 13) = *((_DWORD *)v28 + 13);
      v27[7] = v28[7];
      v27[8] = v28[8];
      v27[9] = v28[9];
      v71 = v28[10];
      v27[10] = v71;
      swift_retain();
      swift_bridgeObjectRetain();
      v72 = v71;
LABEL_111:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_112;
    }
    v238 = v30;
    v240 = v29;
    v52 = *v28;
    *v27 = *v28;
    v53 = v28[1];
    v27[1] = v53;
    v27[2] = v28[2];
    v27[3] = v28[3];
    *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
    v27[5] = v28[5];
    v27[6] = v28[6];
    *((_BYTE *)v27 + 56) = *((_BYTE *)v28 + 56);
    v54 = v27 + 8;
    v55 = v28 + 8;
    v56 = (unint64_t)v28[23];
    v57 = v52;
    v58 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v56 >> 1 == 4294967294)
    {
      v59 = *(_OWORD *)v55;
      v60 = *((_OWORD *)v28 + 5);
      v61 = *((_OWORD *)v28 + 7);
      *((_OWORD *)v27 + 6) = *((_OWORD *)v28 + 6);
      *((_OWORD *)v27 + 7) = v61;
      *v54 = v59;
      *((_OWORD *)v27 + 5) = v60;
      v62 = *((_OWORD *)v28 + 8);
      v63 = *((_OWORD *)v28 + 9);
      v64 = *((_OWORD *)v28 + 11);
      *((_OWORD *)v27 + 10) = *((_OWORD *)v28 + 10);
      *((_OWORD *)v27 + 11) = v64;
      *((_OWORD *)v27 + 8) = v62;
      *((_OWORD *)v27 + 9) = v63;
      v65 = *((_OWORD *)v28 + 12);
      v66 = *((_OWORD *)v28 + 13);
      v67 = *((_OWORD *)v28 + 14);
      *(_DWORD *)((char *)v27 + 239) = *(_DWORD *)((char *)v28 + 239);
      *((_OWORD *)v27 + 13) = v66;
      *((_OWORD *)v27 + 14) = v67;
      *((_OWORD *)v27 + 12) = v65;
    }
    else
    {
      v73 = *((unsigned __int8 *)v28 + 72);
      if (v73 == 255)
      {
        v144 = *v55;
        *((_BYTE *)v27 + 72) = *((_BYTE *)v28 + 72);
        *(_QWORD *)v54 = v144;
      }
      else
      {
        v74 = *v55;
        outlined copy of GraphicsImage.Contents(*v55, *((_BYTE *)v28 + 72));
        v27[8] = v74;
        *((_BYTE *)v27 + 72) = v73;
      }
      v27[10] = v28[10];
      *(_OWORD *)(v27 + 11) = *(_OWORD *)(v28 + 11);
      *((_BYTE *)v27 + 104) = *((_BYTE *)v28 + 104);
      v145 = *(_OWORD *)((char *)v28 + 108);
      *((_BYTE *)v27 + 124) = *((_BYTE *)v28 + 124);
      *(_OWORD *)((char *)v27 + 108) = v145;
      v146 = *((_OWORD *)v28 + 8);
      v147 = *((_OWORD *)v28 + 9);
      *((_BYTE *)v27 + 160) = *((_BYTE *)v28 + 160);
      *((_OWORD *)v27 + 8) = v146;
      *((_OWORD *)v27 + 9) = v147;
      *((_BYTE *)v27 + 161) = *((_BYTE *)v28 + 161);
      *((_BYTE *)v27 + 162) = *((_BYTE *)v28 + 162);
      *((_BYTE *)v27 + 163) = *((_BYTE *)v28 + 163);
      v148 = (unint64_t)v28[23];
      if (v148 >> 1 == 0xFFFFFFFF)
      {
        v149 = *(_OWORD *)(v28 + 23);
        *(_OWORD *)(v27 + 21) = *(_OWORD *)(v28 + 21);
        *(_OWORD *)(v27 + 23) = v149;
      }
      else
      {
        v150 = (uint64_t)v28[21];
        v151 = (uint64_t)v28[22];
        v152 = v28[24];
        outlined copy of AccessibilityImageLabel(v150, v151, (uint64_t)v28[23]);
        v27[21] = (void *)v150;
        v27[22] = (void *)v151;
        v27[23] = (void *)v148;
        v27[24] = v152;
      }
      v27[25] = v28[25];
      v27[26] = v28[26];
      *((_BYTE *)v27 + 216) = *((_BYTE *)v28 + 216);
      *((_BYTE *)v27 + 217) = *((_BYTE *)v28 + 217);
      v153 = *((_DWORD *)v28 + 55);
      *((_BYTE *)v27 + 224) = *((_BYTE *)v28 + 224);
      *((_DWORD *)v27 + 55) = v153;
      v154 = v28[29];
      v27[29] = v154;
      *((_WORD *)v27 + 120) = *((_WORD *)v28 + 120);
      *((_BYTE *)v27 + 242) = *((_BYTE *)v28 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v155 = v154;
    }
    if (v28[32])
    {
      v27[31] = v28[31];
      v27[32] = v28[32];
      v156 = v28[33];
      swift_bridgeObjectRetain();
      if ((unint64_t)v156 >= 2)
        v157 = v156;
      v27[33] = v156;
      v158 = *((_DWORD *)v28 + 68);
      *((_BYTE *)v27 + 276) = *((_BYTE *)v28 + 276);
      *((_DWORD *)v27 + 68) = v158;
      *((_BYTE *)v27 + 277) = *((_BYTE *)v28 + 277);
      *((_BYTE *)v27 + 278) = *((_BYTE *)v28 + 278);
      v27[35] = v28[35];
      v27[36] = v28[36];
      swift_retain();
      swift_retain();
    }
    else
    {
      v159 = *(_OWORD *)(v28 + 31);
      v160 = *(_OWORD *)(v28 + 35);
      *(_OWORD *)(v27 + 33) = *(_OWORD *)(v28 + 33);
      *(_OWORD *)(v27 + 35) = v160;
      *(_OWORD *)(v27 + 31) = v159;
    }
    v161 = (unint64_t)v28[41];
    if (v161 >> 2 == 0xFFFFFFFF)
    {
      v162 = *(_OWORD *)(v28 + 37);
      v163 = *(_OWORD *)(v28 + 41);
      *(_OWORD *)(v27 + 39) = *(_OWORD *)(v28 + 39);
      *(_OWORD *)(v27 + 41) = v163;
      *(_OWORD *)(v27 + 37) = v162;
      v164 = *(_OWORD *)(v28 + 43);
      v165 = *(_OWORD *)(v28 + 45);
      v166 = *(_OWORD *)(v28 + 47);
      v27[49] = v28[49];
      *(_OWORD *)(v27 + 45) = v165;
      *(_OWORD *)(v27 + 47) = v166;
      *(_OWORD *)(v27 + 43) = v164;
    }
    else
    {
      v167 = v28[37];
      v168 = (uint64_t)v28[38];
      v169 = (uint64_t)v28[39];
      v170 = (uint64_t)v28[42];
      v171 = (uint64_t)v28[43];
      v172 = v28[44];
      v217 = (uint64_t)v28[40];
      v220 = (uint64_t)v28[45];
      v224 = (uint64_t)v28[46];
      v228 = (uint64_t)v28[47];
      v232 = v28[48];
      __dstb = v28[49];
      outlined copy of PlatformItemList.Item.SystemItem(v167, v168, v169, v217, v161, v170, v171, (char)v172, v220, v224, v228, (char)v232, (uint64_t)__dstb);
      v27[37] = v167;
      v27[38] = (void *)v168;
      v27[39] = (void *)v169;
      v27[40] = (void *)v217;
      v27[41] = (void *)v161;
      v27[42] = (void *)v170;
      v27[43] = (void *)v171;
      v27[44] = v172;
      v27[45] = (void *)v220;
      v27[46] = (void *)v224;
      v27[47] = (void *)v228;
      v27[48] = v232;
      v27[49] = __dstb;
    }
    if (v28[51] == (void *)1)
    {
      *((_OWORD *)v27 + 25) = *((_OWORD *)v28 + 25);
      v173 = *((_OWORD *)v28 + 26);
      v174 = *((_OWORD *)v28 + 27);
      v175 = *((_OWORD *)v28 + 28);
      *((_BYTE *)v27 + 464) = *((_BYTE *)v28 + 464);
      *((_OWORD *)v27 + 27) = v174;
      *((_OWORD *)v27 + 28) = v175;
      *((_OWORD *)v27 + 26) = v173;
    }
    else
    {
      *((_BYTE *)v27 + 400) = *((_BYTE *)v28 + 400);
      *((_BYTE *)v27 + 401) = *((_BYTE *)v28 + 401);
      *((_BYTE *)v27 + 402) = *((_BYTE *)v28 + 402);
      *((_BYTE *)v27 + 403) = *((_BYTE *)v28 + 403);
      *((_BYTE *)v27 + 404) = *((_BYTE *)v28 + 404);
      v176 = v28[51];
      if (v176)
      {
        v177 = v28[52];
        v27[51] = v176;
        v27[52] = v177;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v27 + 51) = *(_OWORD *)(v28 + 51);
      }
      v178 = v28[53];
      if (v178)
      {
        v179 = v28[54];
        v27[53] = v178;
        v27[54] = v179;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v27 + 53) = *(_OWORD *)(v28 + 53);
      }
      v180 = v28[55];
      if (v180)
      {
        v181 = v28[56];
        v27[55] = v180;
        v27[56] = v181;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v27 + 55) = *(_OWORD *)(v28 + 55);
      }
      v27[57] = v28[57];
      *((_BYTE *)v27 + 464) = *((_BYTE *)v28 + 464);
    }
    v27[59] = v28[59];
    v27[60] = v28[60];
    v27[61] = v28[61];
    *((_BYTE *)v27 + 496) = *((_BYTE *)v28 + 496);
    v182 = v28[63];
    swift_bridgeObjectRetain();
    if (v182)
    {
      v183 = v28[64];
      v27[63] = v182;
      v27[64] = v183;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v27 + 63) = *(_OWORD *)(v28 + 63);
    }
    *((_WORD *)v27 + 260) = *((_WORD *)v28 + 260);
    v184 = v28[66];
    if (v184)
    {
      v27[66] = v184;
      v27[67] = v28[67];
      v27[68] = v28[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v185 = *((_OWORD *)v28 + 33);
      v27[68] = v28[68];
      *((_OWORD *)v27 + 33) = v185;
    }
    v186 = v28[69];
    if (v186 == (void *)1)
    {
      v187 = v27 + 69;
      v188 = *(_OWORD *)(v28 + 69);
      v27[71] = v28[71];
    }
    else
    {
      v27[69] = v186;
      v189 = v28[70];
      swift_retain();
      if (v189)
      {
        v190 = v28[71];
        v27[70] = v189;
        v27[71] = v190;
        swift_retain();
LABEL_104:
        v191 = v28[72];
        v27[72] = v191;
        v27[73] = v28[73];
        v27[74] = v28[74];
        v27[75] = v28[75];
        v27[76] = v28[76];
        v27[77] = v28[77];
        v27[78] = v28[78];
        *((_BYTE *)v27 + 632) = *((_BYTE *)v28 + 632);
        *((_BYTE *)v27 + 633) = *((_BYTE *)v28 + 633);
        *((_BYTE *)v27 + 634) = *((_BYTE *)v28 + 634);
        v192 = type metadata accessor for PlatformItemList.Item();
        v193 = *(int *)(v192 + 112);
        v233 = (int *)v192;
        __dsta = (char *)v27 + v193;
        v194 = (char *)v28 + v193;
        v195 = type metadata accessor for CommandOperation();
        v225 = *(_QWORD *)(v195 - 8);
        v229 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v225 + 48);
        v196 = v191;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v229(v194, 1, v195))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(__dsta, v194, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          v30 = v238;
        }
        else
        {
          *__dsta = *v194;
          v198 = *(int *)(v195 + 20);
          v199 = &__dsta[v198];
          v200 = &v194[v198];
          v221 = v194;
          v230 = v195;
          v201 = *(_QWORD *)&v194[v198];
          v202 = *((_QWORD *)v200 + 1);
          v203 = v200[16];
          outlined copy of Text.Storage(v201, v202, v203);
          *(_QWORD *)v199 = v201;
          *((_QWORD *)v199 + 1) = v202;
          v199[16] = v203;
          *((_QWORD *)v199 + 3) = *((_QWORD *)v200 + 3);
          v204 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v205 = &v199[v204];
          v206 = &v200[v204];
          v207 = type metadata accessor for UUID();
          v208 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v207 - 8) + 16);
          swift_bridgeObjectRetain();
          v208(v205, v206, v207);
          v209 = *(int *)(v230 + 24);
          v210 = &__dsta[v209];
          v211 = &v221[v209];
          if (*v211)
          {
            v212 = v211[1];
            *v210 = *v211;
            v210[1] = v212;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v210 = *(_OWORD *)v211;
          }
          v30 = v238;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v225 + 56))(__dsta, 0, 1, v230);
        }
        *((_BYTE *)v27 + v233[29]) = *((_BYTE *)v28 + v233[29]);
        *((_BYTE *)v27 + v233[30]) = *((_BYTE *)v28 + v233[30]);
        *((_BYTE *)v27 + v233[31]) = *((_BYTE *)v28 + v233[31]);
        *((_BYTE *)v27 + v233[32]) = *((_BYTE *)v28 + v233[32]);
        *(void **)((char *)v27 + v233[33]) = *(void **)((char *)v28 + v233[33]);
        swift_retain();
        v29 = v240;
        goto LABEL_111;
      }
      v187 = v27 + 70;
      v188 = *((_OWORD *)v28 + 35);
    }
    *v187 = v188;
    goto LABEL_104;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_DWORD *)v3 = *(_DWORD *)a2;
    *((_DWORD *)v3 + 1) = *((_DWORD *)a2 + 1);
    *((_QWORD *)v3 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)v3 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)v3 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)v3 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)v3 + 5) = *((_QWORD *)a2 + 5);
    v7 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      v8 = *((_QWORD *)a2 + 9);
      *((_QWORD *)v3 + 9) = v8;
      *((_QWORD *)v3 + 10) = *((_QWORD *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(v3 + 48), (uint64_t)(a2 + 48));
      v3[88] = 1;
    }
    else
    {
      v11 = *((_OWORD *)a2 + 3);
      v12 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v3 + 73) = *(_OWORD *)(a2 + 73);
      *((_OWORD *)v3 + 3) = v11;
      *((_OWORD *)v3 + 4) = v12;
    }
    v3[89] = a2[89];
    v3[90] = a2[90];
    v3[91] = a2[91];
    v3[92] = a2[92];
    *((_QWORD *)v3 + 12) = *((_QWORD *)a2 + 12);
    v13 = *((_QWORD *)a2 + 16);
    *((_QWORD *)v3 + 16) = v13;
    *((_QWORD *)v3 + 17) = *((_QWORD *)a2 + 17);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))((uint64_t)(v3 + 104), (uint64_t)(a2 + 104));
    *((_QWORD *)v3 + 18) = *((_QWORD *)a2 + 18);
    *((_DWORD *)v3 + 38) = *((_DWORD *)a2 + 38);
    *((_DWORD *)v3 + 39) = *((_DWORD *)a2 + 39);
    *((_QWORD *)v3 + 20) = *((_QWORD *)a2 + 20);
    *((_QWORD *)v3 + 21) = *((_QWORD *)a2 + 21);
    *((_QWORD *)v3 + 22) = *((_QWORD *)a2 + 22);
    v14 = (void *)*((_QWORD *)a2 + 23);
    *((_QWORD *)v3 + 23) = v14;
    v15 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    v16 = v15[12];
    v239 = v3;
    v17 = (void **)&v3[v16];
    v18 = (void **)&a2[v16];
    v19 = type metadata accessor for PlatformItemList.Item();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v20 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v14;
    if (v21(v18, 1, v19))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v3 = v239;
LABEL_66:
      swift_weakCopyInit();
      v3[v15[14]] = a2[v15[14]];
      v3[v15[15]] = a2[v15[15]];
      goto LABEL_112;
    }
    v231 = v20;
    __dst = v15;
    v237 = (int *)v19;
    v33 = *v18;
    *v17 = *v18;
    v34 = v18[1];
    v17[1] = v34;
    v17[2] = v18[2];
    v17[3] = v18[3];
    *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
    v17[5] = v18[5];
    v17[6] = v18[6];
    *((_BYTE *)v17 + 56) = *((_BYTE *)v18 + 56);
    v35 = v17 + 8;
    v36 = v18 + 8;
    v37 = (unint64_t)v18[23];
    v38 = v33;
    v39 = v34;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v37 >> 1 == 4294967294)
    {
      v40 = *(_OWORD *)v36;
      v41 = *((_OWORD *)v18 + 5);
      v42 = *((_OWORD *)v18 + 7);
      *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
      *((_OWORD *)v17 + 7) = v42;
      *v35 = v40;
      *((_OWORD *)v17 + 5) = v41;
      v43 = *((_OWORD *)v18 + 8);
      v44 = *((_OWORD *)v18 + 9);
      v45 = *((_OWORD *)v18 + 11);
      *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
      *((_OWORD *)v17 + 11) = v45;
      *((_OWORD *)v17 + 8) = v43;
      *((_OWORD *)v17 + 9) = v44;
      v46 = *((_OWORD *)v18 + 12);
      v47 = *((_OWORD *)v18 + 13);
      v48 = *((_OWORD *)v18 + 14);
      *(_DWORD *)((char *)v17 + 239) = *(_DWORD *)((char *)v18 + 239);
      *((_OWORD *)v17 + 13) = v47;
      *((_OWORD *)v17 + 14) = v48;
      *((_OWORD *)v17 + 12) = v46;
      v3 = v239;
      if (v18[32])
      {
LABEL_17:
        v17[31] = v18[31];
        v17[32] = v18[32];
        v49 = v18[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v49 >= 2)
          v50 = v49;
        v17[33] = v49;
        v51 = *((_DWORD *)v18 + 68);
        *((_BYTE *)v17 + 276) = *((_BYTE *)v18 + 276);
        *((_DWORD *)v17 + 68) = v51;
        *((_BYTE *)v17 + 277) = *((_BYTE *)v18 + 277);
        *((_BYTE *)v17 + 278) = *((_BYTE *)v18 + 278);
        v17[35] = v18[35];
        v17[36] = v18[36];
        swift_retain();
        swift_retain();
LABEL_34:
        v89 = (unint64_t)v18[41];
        if (v89 >> 2 == 0xFFFFFFFF)
        {
          v90 = *(_OWORD *)(v18 + 37);
          v91 = *(_OWORD *)(v18 + 41);
          *(_OWORD *)(v17 + 39) = *(_OWORD *)(v18 + 39);
          *(_OWORD *)(v17 + 41) = v91;
          *(_OWORD *)(v17 + 37) = v90;
          v92 = *(_OWORD *)(v18 + 43);
          v93 = *(_OWORD *)(v18 + 45);
          v94 = *(_OWORD *)(v18 + 47);
          v17[49] = v18[49];
          *(_OWORD *)(v17 + 45) = v93;
          *(_OWORD *)(v17 + 47) = v94;
          *(_OWORD *)(v17 + 43) = v92;
        }
        else
        {
          v95 = v18[37];
          v96 = (uint64_t)v18[38];
          v214 = (uint64_t)v18[40];
          v215 = (uint64_t)v18[39];
          v97 = (uint64_t)v18[42];
          v98 = (uint64_t)v18[43];
          v99 = v18[44];
          v216 = (uint64_t)v18[45];
          v218 = (uint64_t)v18[46];
          v222 = (uint64_t)v18[47];
          v226 = v18[48];
          v241 = (uint64_t)v18[49];
          outlined copy of PlatformItemList.Item.SystemItem(v95, v96, v215, v214, v89, v97, v98, (char)v99, v216, v218, v222, (char)v226, v241);
          v17[37] = v95;
          v17[38] = (void *)v96;
          v17[39] = (void *)v215;
          v17[40] = (void *)v214;
          v17[41] = (void *)v89;
          v17[42] = (void *)v97;
          v17[43] = (void *)v98;
          v17[44] = v99;
          v17[45] = (void *)v216;
          v17[46] = (void *)v218;
          v17[47] = (void *)v222;
          v17[48] = v226;
          v17[49] = (void *)v241;
        }
        if (v18[51] == (void *)1)
        {
          *((_OWORD *)v17 + 25) = *((_OWORD *)v18 + 25);
          v100 = *((_OWORD *)v18 + 26);
          v101 = *((_OWORD *)v18 + 27);
          v102 = *((_OWORD *)v18 + 28);
          *((_BYTE *)v17 + 464) = *((_BYTE *)v18 + 464);
          *((_OWORD *)v17 + 27) = v101;
          *((_OWORD *)v17 + 28) = v102;
          *((_OWORD *)v17 + 26) = v100;
          goto LABEL_47;
        }
        *((_BYTE *)v17 + 400) = *((_BYTE *)v18 + 400);
        *((_BYTE *)v17 + 401) = *((_BYTE *)v18 + 401);
        *((_BYTE *)v17 + 402) = *((_BYTE *)v18 + 402);
        *((_BYTE *)v17 + 403) = *((_BYTE *)v18 + 403);
        *((_BYTE *)v17 + 404) = *((_BYTE *)v18 + 404);
        v103 = v18[51];
        if (v103)
        {
          v104 = v18[52];
          v17[51] = v103;
          v17[52] = v104;
          swift_retain();
          v105 = v18[53];
          if (v105)
            goto LABEL_41;
        }
        else
        {
          *(_OWORD *)(v17 + 51) = *(_OWORD *)(v18 + 51);
          v105 = v18[53];
          if (v105)
          {
LABEL_41:
            v106 = v18[54];
            v17[53] = v105;
            v17[54] = v106;
            swift_retain();
            v107 = v18[55];
            if (v107)
            {
LABEL_42:
              v108 = v18[56];
              v17[55] = v107;
              v17[56] = v108;
              swift_retain();
LABEL_46:
              v17[57] = v18[57];
              *((_BYTE *)v17 + 464) = *((_BYTE *)v18 + 464);
LABEL_47:
              v17[59] = v18[59];
              v17[60] = v18[60];
              v17[61] = v18[61];
              *((_BYTE *)v17 + 496) = *((_BYTE *)v18 + 496);
              v109 = v18[63];
              swift_bridgeObjectRetain();
              if (v109)
              {
                v110 = v18[64];
                v17[63] = v109;
                v17[64] = v110;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(v17 + 63) = *(_OWORD *)(v18 + 63);
              }
              *((_WORD *)v17 + 260) = *((_WORD *)v18 + 260);
              v111 = v18[66];
              if (v111)
              {
                v17[66] = v111;
                v17[67] = v18[67];
                v17[68] = v18[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v112 = *((_OWORD *)v18 + 33);
                v17[68] = v18[68];
                *((_OWORD *)v17 + 33) = v112;
              }
              v113 = v18[69];
              if (v113 == (void *)1)
              {
                v114 = v17 + 69;
                v115 = *(_OWORD *)(v18 + 69);
                v17[71] = v18[71];
              }
              else
              {
                v17[69] = v113;
                v116 = v18[70];
                swift_retain();
                if (v116)
                {
                  v117 = v18[71];
                  v17[70] = v116;
                  v17[71] = v117;
                  swift_retain();
LABEL_59:
                  v118 = v18[72];
                  v17[72] = v118;
                  v17[73] = v18[73];
                  v17[74] = v18[74];
                  v17[75] = v18[75];
                  v17[76] = v18[76];
                  v17[77] = v18[77];
                  v17[78] = v18[78];
                  *((_BYTE *)v17 + 632) = *((_BYTE *)v18 + 632);
                  *((_BYTE *)v17 + 633) = *((_BYTE *)v18 + 633);
                  *((_BYTE *)v17 + 634) = *((_BYTE *)v18 + 634);
                  v119 = v237[28];
                  v242 = (char *)v17 + v119;
                  v120 = (char *)v18 + v119;
                  v121 = type metadata accessor for CommandOperation();
                  v219 = *(_QWORD *)(v121 - 8);
                  v223 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v219 + 48);
                  v122 = v118;
                  v123 = v120;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v223(v120, 1, v121))
                  {
                    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
                    memcpy(v242, v120, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
                    v15 = __dst;
                    v125 = v237;
                    v126 = v231;
                  }
                  else
                  {
                    *v242 = *v120;
                    v127 = *(int *)(v121 + 20);
                    v128 = &v242[v127];
                    v129 = &v123[v127];
                    v227 = v123;
                    v130 = *(_QWORD *)&v123[v127];
                    v131 = *((_QWORD *)v129 + 1);
                    v132 = v129[16];
                    outlined copy of Text.Storage(v130, v131, v132);
                    *(_QWORD *)v128 = v130;
                    *((_QWORD *)v128 + 1) = v131;
                    v128[16] = v132;
                    *((_QWORD *)v128 + 3) = *((_QWORD *)v129 + 3);
                    v133 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v134 = &v128[v133];
                    v135 = &v129[v133];
                    v136 = type metadata accessor for UUID();
                    v137 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v136 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v137(v134, v135, v136);
                    v138 = v121;
                    v139 = *(int *)(v121 + 24);
                    v140 = &v242[v139];
                    v141 = &v227[v139];
                    v15 = __dst;
                    if (*v141)
                    {
                      v142 = v141[1];
                      *v140 = *v141;
                      v140[1] = v142;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v140 = *(_OWORD *)v141;
                    }
                    v125 = v237;
                    v126 = v231;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v242, 0, 1, v138);
                  }
                  *((_BYTE *)v17 + v125[29]) = *((_BYTE *)v18 + v125[29]);
                  *((_BYTE *)v17 + v125[30]) = *((_BYTE *)v18 + v125[30]);
                  *((_BYTE *)v17 + v125[31]) = *((_BYTE *)v18 + v125[31]);
                  *((_BYTE *)v17 + v125[32]) = *((_BYTE *)v18 + v125[32]);
                  *(void **)((char *)v17 + v125[33]) = *(void **)((char *)v18 + v125[33]);
                  v143 = *(void (**)(void **, _QWORD, uint64_t, int *))(v126 + 56);
                  swift_retain();
                  v143(v17, 0, 1, v125);
                  goto LABEL_66;
                }
                v114 = v17 + 70;
                v115 = *((_OWORD *)v18 + 35);
              }
              *v114 = v115;
              goto LABEL_59;
            }
LABEL_45:
            *(_OWORD *)(v17 + 55) = *(_OWORD *)(v18 + 55);
            goto LABEL_46;
          }
        }
        *(_OWORD *)(v17 + 53) = *(_OWORD *)(v18 + 53);
        v107 = v18[55];
        if (v107)
          goto LABEL_42;
        goto LABEL_45;
      }
    }
    else
    {
      v68 = *((unsigned __int8 *)v18 + 72);
      if (v68 == 255)
      {
        v75 = *v36;
        *((_BYTE *)v17 + 72) = *((_BYTE *)v18 + 72);
        *(_QWORD *)v35 = v75;
      }
      else
      {
        v69 = *v36;
        outlined copy of GraphicsImage.Contents(*v36, *((_BYTE *)v18 + 72));
        v17[8] = v69;
        *((_BYTE *)v17 + 72) = v68;
      }
      v17[10] = v18[10];
      *(_OWORD *)(v17 + 11) = *(_OWORD *)(v18 + 11);
      *((_BYTE *)v17 + 104) = *((_BYTE *)v18 + 104);
      v76 = *(_OWORD *)((char *)v18 + 108);
      *((_BYTE *)v17 + 124) = *((_BYTE *)v18 + 124);
      *(_OWORD *)((char *)v17 + 108) = v76;
      v77 = *((_OWORD *)v18 + 8);
      v78 = *((_OWORD *)v18 + 9);
      *((_BYTE *)v17 + 160) = *((_BYTE *)v18 + 160);
      *((_OWORD *)v17 + 8) = v77;
      *((_OWORD *)v17 + 9) = v78;
      *((_BYTE *)v17 + 161) = *((_BYTE *)v18 + 161);
      *((_BYTE *)v17 + 162) = *((_BYTE *)v18 + 162);
      *((_BYTE *)v17 + 163) = *((_BYTE *)v18 + 163);
      v79 = (unint64_t)v18[23];
      v3 = v239;
      if (v79 >> 1 == 0xFFFFFFFF)
      {
        v80 = *(_OWORD *)(v18 + 23);
        *(_OWORD *)(v17 + 21) = *(_OWORD *)(v18 + 21);
        *(_OWORD *)(v17 + 23) = v80;
      }
      else
      {
        v81 = (uint64_t)v18[21];
        v82 = (uint64_t)v18[22];
        v83 = v18[24];
        outlined copy of AccessibilityImageLabel(v81, v82, (uint64_t)v18[23]);
        v17[21] = (void *)v81;
        v17[22] = (void *)v82;
        v17[23] = (void *)v79;
        v17[24] = v83;
      }
      v17[25] = v18[25];
      v17[26] = v18[26];
      *((_BYTE *)v17 + 216) = *((_BYTE *)v18 + 216);
      *((_BYTE *)v17 + 217) = *((_BYTE *)v18 + 217);
      v84 = *((_DWORD *)v18 + 55);
      *((_BYTE *)v17 + 224) = *((_BYTE *)v18 + 224);
      *((_DWORD *)v17 + 55) = v84;
      v85 = v18[29];
      v17[29] = v85;
      *((_WORD *)v17 + 120) = *((_WORD *)v18 + 120);
      *((_BYTE *)v17 + 242) = *((_BYTE *)v18 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v86 = v85;
      if (v18[32])
        goto LABEL_17;
    }
    v87 = *(_OWORD *)(v18 + 31);
    v88 = *(_OWORD *)(v18 + 35);
    *(_OWORD *)(v17 + 33) = *(_OWORD *)(v18 + 33);
    *(_OWORD *)(v17 + 35) = v88;
    *(_OWORD *)(v17 + 31) = v87;
    goto LABEL_34;
  }
  memcpy(v3, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return v3;
}

char *initializeWithTake for ToolbarStorage.Entry.Kind(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  char *__dst;
  char *__dsta;
  uint64_t v97;
  char *v98;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v19 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v19;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    v20 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v41 = *((_OWORD *)v22 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v41;
        v21[32] = v22[32];
        v42 = *((_QWORD *)v22 + 6);
        *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
        *((_QWORD *)v21 + 6) = v42;
        v21[56] = v22[56];
        v43 = *((_OWORD *)v22 + 13);
        *((_OWORD *)v21 + 12) = *((_OWORD *)v22 + 12);
        *((_OWORD *)v21 + 13) = v43;
        *((_OWORD *)v21 + 14) = *((_OWORD *)v22 + 14);
        *(_DWORD *)(v21 + 239) = *(_DWORD *)(v22 + 239);
        v44 = *((_OWORD *)v22 + 9);
        *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
        *((_OWORD *)v21 + 9) = v44;
        v45 = *((_OWORD *)v22 + 11);
        *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
        *((_OWORD *)v21 + 11) = v45;
        v46 = *((_OWORD *)v22 + 5);
        *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
        *((_OWORD *)v21 + 5) = v46;
        v47 = *((_OWORD *)v22 + 7);
        *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
        *((_OWORD *)v21 + 7) = v47;
        *(_OWORD *)(v21 + 248) = *(_OWORD *)(v22 + 248);
        v48 = *(_OWORD *)(v22 + 280);
        *(_OWORD *)(v21 + 264) = *(_OWORD *)(v22 + 264);
        *(_OWORD *)(v21 + 280) = v48;
        v49 = *(_OWORD *)(v22 + 376);
        *(_OWORD *)(v21 + 360) = *(_OWORD *)(v22 + 360);
        *(_OWORD *)(v21 + 376) = v49;
        *((_QWORD *)v21 + 49) = *((_QWORD *)v22 + 49);
        v50 = *(_OWORD *)(v22 + 312);
        *(_OWORD *)(v21 + 296) = *(_OWORD *)(v22 + 296);
        *(_OWORD *)(v21 + 312) = v50;
        v51 = *(_OWORD *)(v22 + 344);
        *(_OWORD *)(v21 + 328) = *(_OWORD *)(v22 + 328);
        *(_OWORD *)(v21 + 344) = v51;
        v52 = *((_OWORD *)v22 + 28);
        *((_OWORD *)v21 + 27) = *((_OWORD *)v22 + 27);
        *((_OWORD *)v21 + 28) = v52;
        v21[464] = v22[464];
        v53 = *((_OWORD *)v22 + 26);
        *((_OWORD *)v21 + 25) = *((_OWORD *)v22 + 25);
        *((_OWORD *)v21 + 26) = v53;
        *(_OWORD *)(v21 + 472) = *(_OWORD *)(v22 + 472);
        *(_OWORD *)(v21 + 481) = *(_OWORD *)(v22 + 481);
        v54 = *((_QWORD *)v22 + 63);
        if (v54)
        {
          v55 = *((_QWORD *)v22 + 64);
          *((_QWORD *)v21 + 63) = v54;
          *((_QWORD *)v21 + 64) = v55;
        }
        else
        {
          *(_OWORD *)(v21 + 504) = *(_OWORD *)(v22 + 504);
        }
        *((_WORD *)v21 + 260) = *((_WORD *)v22 + 260);
        *((_OWORD *)v21 + 33) = *((_OWORD *)v22 + 33);
        *((_QWORD *)v21 + 68) = *((_QWORD *)v22 + 68);
        *((_QWORD *)v21 + 71) = *((_QWORD *)v22 + 71);
        *(_OWORD *)(v21 + 552) = *(_OWORD *)(v22 + 552);
        *((_QWORD *)v21 + 72) = *((_QWORD *)v22 + 72);
        *(_OWORD *)(v21 + 584) = *(_OWORD *)(v22 + 584);
        *(_OWORD *)(v21 + 600) = *(_OWORD *)(v22 + 600);
        *((_QWORD *)v21 + 77) = *((_QWORD *)v22 + 77);
        *((_QWORD *)v21 + 78) = *((_QWORD *)v22 + 78);
        v21[632] = v22[632];
        *(_WORD *)(v21 + 633) = *(_WORD *)(v22 + 633);
        v74 = (int *)type metadata accessor for PlatformItemList.Item();
        v75 = v74[28];
        v98 = &v21[v75];
        v76 = &v22[v75];
        v77 = type metadata accessor for CommandOperation();
        v78 = *(_QWORD *)(v77 - 8);
        __dsta = v76;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v98, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          *v98 = *v76;
          v80 = *(int *)(v77 + 20);
          v81 = &v98[v80];
          v82 = &v76[v80];
          v83 = *(_OWORD *)&__dsta[v80 + 16];
          *(_OWORD *)v81 = *(_OWORD *)&__dsta[v80];
          *((_OWORD *)v81 + 1) = v83;
          v84 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v85 = &v81[v84];
          v93 = &v82[v84];
          v86 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v85, v93, v86);
          v87 = *(int *)(v77 + 24);
          v88 = &v98[v87];
          v89 = &__dsta[v87];
          v90 = *(_QWORD *)v89;
          if (*(_QWORD *)v89)
          {
            v91 = *((_QWORD *)v89 + 1);
            *(_QWORD *)v88 = v90;
            *((_QWORD *)v88 + 1) = v91;
          }
          else
          {
            *(_OWORD *)v88 = *(_OWORD *)v89;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v98, 0, 1, v77);
        }
        v21[v74[29]] = v22[v74[29]];
        v21[v74[30]] = v22[v74[30]];
        v21[v74[31]] = v22[v74[31]];
        v21[v74[32]] = v22[v74[32]];
        *(_QWORD *)&v21[v74[33]] = *(_QWORD *)&v22[v74[33]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v21, v22, *(_QWORD *)(v24 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    goto LABEL_32;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    v8 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v9;
    v10 = *(_OWORD *)(a2 + 136);
    v11 = *(_OWORD *)(a2 + 152);
    v12 = *(_OWORD *)(a2 + 168);
    *((_QWORD *)a1 + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v12;
    *(_OWORD *)(a1 + 152) = v11;
    *(_OWORD *)(a1 + 136) = v10;
    v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    v14 = v13[12];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = (int *)type metadata accessor for PlatformItemList.Item();
    v97 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v97 + 48))(v16, 1, v17))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v26 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v26;
      v15[32] = v16[32];
      v27 = *((_QWORD *)v16 + 6);
      *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 6) = v27;
      v15[56] = v16[56];
      v28 = *((_OWORD *)v16 + 13);
      *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 13) = v28;
      *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
      *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
      v29 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v29;
      v30 = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 11) = v30;
      v31 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v31;
      v32 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 7) = v32;
      *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
      v33 = *(_OWORD *)(v16 + 280);
      *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
      *(_OWORD *)(v15 + 280) = v33;
      v34 = *(_OWORD *)(v16 + 376);
      *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
      *(_OWORD *)(v15 + 376) = v34;
      *((_QWORD *)v15 + 49) = *((_QWORD *)v16 + 49);
      v35 = *(_OWORD *)(v16 + 312);
      *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
      *(_OWORD *)(v15 + 312) = v35;
      v36 = *(_OWORD *)(v16 + 344);
      *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
      *(_OWORD *)(v15 + 344) = v36;
      v37 = *((_OWORD *)v16 + 28);
      *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
      *((_OWORD *)v15 + 28) = v37;
      v15[464] = v16[464];
      v38 = *((_OWORD *)v16 + 26);
      *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
      *((_OWORD *)v15 + 26) = v38;
      *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
      *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
      v39 = *((_QWORD *)v16 + 63);
      if (v39)
      {
        v40 = *((_QWORD *)v16 + 64);
        *((_QWORD *)v15 + 63) = v39;
        *((_QWORD *)v15 + 64) = v40;
      }
      else
      {
        *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
      }
      *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
      *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
      *((_QWORD *)v15 + 68) = *((_QWORD *)v16 + 68);
      *((_QWORD *)v15 + 71) = *((_QWORD *)v16 + 71);
      *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
      *((_QWORD *)v15 + 72) = *((_QWORD *)v16 + 72);
      *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
      *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
      *((_QWORD *)v15 + 77) = *((_QWORD *)v16 + 77);
      *((_QWORD *)v15 + 78) = *((_QWORD *)v16 + 78);
      v15[632] = v16[632];
      *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
      v56 = v17[28];
      __dst = &v15[v56];
      v57 = &v16[v56];
      v58 = type metadata accessor for CommandOperation();
      v59 = *(_QWORD *)(v58 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        v94 = v59;
        *__dst = *v57;
        v61 = *(int *)(v58 + 20);
        v62 = &__dst[v61];
        v63 = &v57[v61];
        v64 = *(_OWORD *)&v57[v61 + 16];
        *(_OWORD *)v62 = *(_OWORD *)&v57[v61];
        *((_OWORD *)v62 + 1) = v64;
        v65 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v66 = &v62[v65];
        v67 = &v63[v65];
        v68 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
        v69 = *(int *)(v58 + 24);
        v70 = &__dst[v69];
        v71 = (uint64_t *)&v57[v69];
        v72 = *v71;
        if (*v71)
        {
          v73 = v71[1];
          *(_QWORD *)v70 = v72;
          *((_QWORD *)v70 + 1) = v73;
        }
        else
        {
          *(_OWORD *)v70 = *(_OWORD *)v71;
        }
        (*(void (**)(void))(v94 + 56))();
      }
      v15[v17[29]] = v16[v17[29]];
      v15[v17[30]] = v16[v17[30]];
      v15[v17[31]] = v16[v17[31]];
      v15[v17[32]] = v16[v17[32]];
      *(_QWORD *)&v15[v17[33]] = *(_QWORD *)&v16[v17[33]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v15, 0, 1, v17);
    }
    swift_weakTakeInit();
    a1[v13[14]] = a2[v13[14]];
    a1[v13[15]] = a2[v13[15]];
LABEL_32:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ToolbarStorage.Entry.Kind(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  char *__dst;
  char *__dsta;
  uint64_t v97;
  char *v98;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ToolbarStorage.Entry.Kind);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      a1[57] = a2[57];
      *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      v20 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      v21 = &a1[v20];
      v22 = &a2[v20];
      v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v41 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v41;
          v21[32] = v22[32];
          v42 = *((_QWORD *)v22 + 6);
          *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
          *((_QWORD *)v21 + 6) = v42;
          v21[56] = v22[56];
          v43 = *((_OWORD *)v22 + 13);
          *((_OWORD *)v21 + 12) = *((_OWORD *)v22 + 12);
          *((_OWORD *)v21 + 13) = v43;
          *((_OWORD *)v21 + 14) = *((_OWORD *)v22 + 14);
          *(_DWORD *)(v21 + 239) = *(_DWORD *)(v22 + 239);
          v44 = *((_OWORD *)v22 + 9);
          *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
          *((_OWORD *)v21 + 9) = v44;
          v45 = *((_OWORD *)v22 + 11);
          *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
          *((_OWORD *)v21 + 11) = v45;
          v46 = *((_OWORD *)v22 + 5);
          *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
          *((_OWORD *)v21 + 5) = v46;
          v47 = *((_OWORD *)v22 + 7);
          *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
          *((_OWORD *)v21 + 7) = v47;
          *(_OWORD *)(v21 + 248) = *(_OWORD *)(v22 + 248);
          v48 = *(_OWORD *)(v22 + 280);
          *(_OWORD *)(v21 + 264) = *(_OWORD *)(v22 + 264);
          *(_OWORD *)(v21 + 280) = v48;
          v49 = *(_OWORD *)(v22 + 376);
          *(_OWORD *)(v21 + 360) = *(_OWORD *)(v22 + 360);
          *(_OWORD *)(v21 + 376) = v49;
          *((_QWORD *)v21 + 49) = *((_QWORD *)v22 + 49);
          v50 = *(_OWORD *)(v22 + 312);
          *(_OWORD *)(v21 + 296) = *(_OWORD *)(v22 + 296);
          *(_OWORD *)(v21 + 312) = v50;
          v51 = *(_OWORD *)(v22 + 344);
          *(_OWORD *)(v21 + 328) = *(_OWORD *)(v22 + 328);
          *(_OWORD *)(v21 + 344) = v51;
          v52 = *((_OWORD *)v22 + 28);
          *((_OWORD *)v21 + 27) = *((_OWORD *)v22 + 27);
          *((_OWORD *)v21 + 28) = v52;
          v21[464] = v22[464];
          v53 = *((_OWORD *)v22 + 26);
          *((_OWORD *)v21 + 25) = *((_OWORD *)v22 + 25);
          *((_OWORD *)v21 + 26) = v53;
          *(_OWORD *)(v21 + 472) = *(_OWORD *)(v22 + 472);
          *(_OWORD *)(v21 + 481) = *(_OWORD *)(v22 + 481);
          v54 = *((_QWORD *)v22 + 63);
          if (v54)
          {
            v55 = *((_QWORD *)v22 + 64);
            *((_QWORD *)v21 + 63) = v54;
            *((_QWORD *)v21 + 64) = v55;
          }
          else
          {
            *(_OWORD *)(v21 + 504) = *(_OWORD *)(v22 + 504);
          }
          *((_WORD *)v21 + 260) = *((_WORD *)v22 + 260);
          *((_OWORD *)v21 + 33) = *((_OWORD *)v22 + 33);
          *((_QWORD *)v21 + 68) = *((_QWORD *)v22 + 68);
          *((_QWORD *)v21 + 71) = *((_QWORD *)v22 + 71);
          *(_OWORD *)(v21 + 552) = *(_OWORD *)(v22 + 552);
          *((_QWORD *)v21 + 72) = *((_QWORD *)v22 + 72);
          *(_OWORD *)(v21 + 584) = *(_OWORD *)(v22 + 584);
          *(_OWORD *)(v21 + 600) = *(_OWORD *)(v22 + 600);
          *((_QWORD *)v21 + 77) = *((_QWORD *)v22 + 77);
          *((_QWORD *)v21 + 78) = *((_QWORD *)v22 + 78);
          v21[632] = v22[632];
          *(_WORD *)(v21 + 633) = *(_WORD *)(v22 + 633);
          v74 = (int *)type metadata accessor for PlatformItemList.Item();
          v75 = v74[28];
          v98 = &v21[v75];
          v76 = &v22[v75];
          v77 = type metadata accessor for CommandOperation();
          v78 = *(_QWORD *)(v77 - 8);
          __dsta = v76;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v98, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
          }
          else
          {
            *v98 = *v76;
            v80 = *(int *)(v77 + 20);
            v81 = &v98[v80];
            v82 = &v76[v80];
            v83 = *(_OWORD *)&__dsta[v80 + 16];
            *(_OWORD *)v81 = *(_OWORD *)&__dsta[v80];
            *((_OWORD *)v81 + 1) = v83;
            v84 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v85 = &v81[v84];
            v93 = &v82[v84];
            v86 = type metadata accessor for UUID();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v85, v93, v86);
            v87 = *(int *)(v77 + 24);
            v88 = &v98[v87];
            v89 = &__dsta[v87];
            v90 = *(_QWORD *)v89;
            if (*(_QWORD *)v89)
            {
              v91 = *((_QWORD *)v89 + 1);
              *(_QWORD *)v88 = v90;
              *((_QWORD *)v88 + 1) = v91;
            }
            else
            {
              *(_OWORD *)v88 = *(_OWORD *)v89;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v98, 0, 1, v77);
          }
          v21[v74[29]] = v22[v74[29]];
          v21[v74[30]] = v22[v74[30]];
          v21[v74[31]] = v22[v74[31]];
          v21[v74[32]] = v22[v74[32]];
          *(_QWORD *)&v21[v74[33]] = *(_QWORD *)&v22[v74[33]];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v21, v22, *(_QWORD *)(v24 + 64));
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      goto LABEL_33;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      v8 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v8;
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v9;
      v10 = *(_OWORD *)(a2 + 136);
      v11 = *(_OWORD *)(a2 + 152);
      v12 = *(_OWORD *)(a2 + 168);
      *((_QWORD *)a1 + 23) = *((_QWORD *)a2 + 23);
      *(_OWORD *)(a1 + 168) = v12;
      *(_OWORD *)(a1 + 152) = v11;
      *(_OWORD *)(a1 + 136) = v10;
      v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
      v14 = v13[12];
      v15 = &a1[v14];
      v16 = &a2[v14];
      v17 = (int *)type metadata accessor for PlatformItemList.Item();
      v97 = *((_QWORD *)v17 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v97 + 48))(v16, 1, v17))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v26 = *((_OWORD *)v16 + 1);
        *(_OWORD *)v15 = *(_OWORD *)v16;
        *((_OWORD *)v15 + 1) = v26;
        v15[32] = v16[32];
        v27 = *((_QWORD *)v16 + 6);
        *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
        *((_QWORD *)v15 + 6) = v27;
        v15[56] = v16[56];
        v28 = *((_OWORD *)v16 + 13);
        *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
        *((_OWORD *)v15 + 13) = v28;
        *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
        *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
        v29 = *((_OWORD *)v16 + 9);
        *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
        *((_OWORD *)v15 + 9) = v29;
        v30 = *((_OWORD *)v16 + 11);
        *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
        *((_OWORD *)v15 + 11) = v30;
        v31 = *((_OWORD *)v16 + 5);
        *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
        *((_OWORD *)v15 + 5) = v31;
        v32 = *((_OWORD *)v16 + 7);
        *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
        *((_OWORD *)v15 + 7) = v32;
        *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
        v33 = *(_OWORD *)(v16 + 280);
        *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
        *(_OWORD *)(v15 + 280) = v33;
        v34 = *(_OWORD *)(v16 + 376);
        *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
        *(_OWORD *)(v15 + 376) = v34;
        *((_QWORD *)v15 + 49) = *((_QWORD *)v16 + 49);
        v35 = *(_OWORD *)(v16 + 312);
        *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
        *(_OWORD *)(v15 + 312) = v35;
        v36 = *(_OWORD *)(v16 + 344);
        *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
        *(_OWORD *)(v15 + 344) = v36;
        v37 = *((_OWORD *)v16 + 28);
        *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
        *((_OWORD *)v15 + 28) = v37;
        v15[464] = v16[464];
        v38 = *((_OWORD *)v16 + 26);
        *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
        *((_OWORD *)v15 + 26) = v38;
        *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
        *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
        v39 = *((_QWORD *)v16 + 63);
        if (v39)
        {
          v40 = *((_QWORD *)v16 + 64);
          *((_QWORD *)v15 + 63) = v39;
          *((_QWORD *)v15 + 64) = v40;
        }
        else
        {
          *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
        }
        *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
        *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
        *((_QWORD *)v15 + 68) = *((_QWORD *)v16 + 68);
        *((_QWORD *)v15 + 71) = *((_QWORD *)v16 + 71);
        *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
        *((_QWORD *)v15 + 72) = *((_QWORD *)v16 + 72);
        *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
        *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
        *((_QWORD *)v15 + 77) = *((_QWORD *)v16 + 77);
        *((_QWORD *)v15 + 78) = *((_QWORD *)v16 + 78);
        v15[632] = v16[632];
        *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
        v56 = v17[28];
        __dst = &v15[v56];
        v57 = &v16[v56];
        v58 = type metadata accessor for CommandOperation();
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          v94 = v59;
          *__dst = *v57;
          v61 = *(int *)(v58 + 20);
          v62 = &__dst[v61];
          v63 = &v57[v61];
          v64 = *(_OWORD *)&v57[v61 + 16];
          *(_OWORD *)v62 = *(_OWORD *)&v57[v61];
          *((_OWORD *)v62 + 1) = v64;
          v65 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v66 = &v62[v65];
          v67 = &v63[v65];
          v68 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
          v69 = *(int *)(v58 + 24);
          v70 = &__dst[v69];
          v71 = (uint64_t *)&v57[v69];
          v72 = *v71;
          if (*v71)
          {
            v73 = v71[1];
            *(_QWORD *)v70 = v72;
            *((_QWORD *)v70 + 1) = v73;
          }
          else
          {
            *(_OWORD *)v70 = *(_OWORD *)v71;
          }
          (*(void (**)(void))(v94 + 56))();
        }
        v15[v17[29]] = v16[v17[29]];
        v15[v17[30]] = v16[v17[30]];
        v15[v17[31]] = v16[v17[31]];
        v15[v17[32]] = v16[v17[32]];
        *(_QWORD *)&v15[v17[33]] = *(_QWORD *)&v16[v17[33]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v15, 0, 1, v17);
      }
      swift_weakTakeInit();
      a1[v13[14]] = a2[v13[14]];
      a1[v13[15]] = a2[v13[15]];
LABEL_33:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

ValueMetadata *type metadata accessor for ToolbarContentKey()
{
  return &type metadata for ToolbarContentKey;
}

uint64_t ToolbarStorage.Entry.groupItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarStorage.GroupItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for ToolbarStorage.Entry.Kind);
    v17 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v17, 1, v8);
  }
  outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v12, type metadata accessor for ToolbarStorage.GroupItem);
  v13 = (_QWORD *)*((_QWORD *)v12 + 9);
  if (v13[2] != 1)
  {
LABEL_6:
    outlined init with take of TableCellFormula((uint64_t)v12, a1, type metadata accessor for ToolbarStorage.GroupItem);
    v17 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v17, 1, v8);
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v13[2])
    {
LABEL_5:
      v15 = type metadata accessor for ToolbarStorage.Item(0);
      v16 = *(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80);
      *((_BYTE *)v13 + ((v16 + 32) & ~v16) + *(int *)(v15 + 60)) = 1;
      *((_QWORD *)v12 + 9) = v13;
      goto LABEL_6;
    }
  }
  else
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
    v13 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ToolbarStorage.Entry.placement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v27 - v4;
  v6 = type metadata accessor for ToolbarStorage.GroupItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v27 - v21;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    v23 = v28;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
    ToolbarStorage.Entry.groupItem.getter((uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      result = outlined destroy of TaskPriority?((uint64_t)v5, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_QWORD *)(v23 + 32) = 0;
      *(_BYTE *)(v23 + 40) = -1;
      return result;
    }
    v25 = type metadata accessor for ToolbarStorage.GroupItem;
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v10, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v10 + 16), v23);
    v26 = (uint64_t)v10;
  }
  else
  {
    v25 = type metadata accessor for ToolbarStorage.Item;
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v22, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v22 + 48), v28);
    v26 = (uint64_t)v22;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, v25);
}

void ToolbarStorage.Entry.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v5, v6);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (char *)&loc_1876FCB9C + *((int *)qword_1876FCD80 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_1876FCBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  outlined init with take of TableCellFormula(v2, v1, type metadata accessor for ToolbarStorage.Item);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v3 - 152) = *(_QWORD *)v1;
  *(_QWORD *)(v3 - 144) = v4;
  *(_OWORD *)(v3 - 136) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v6;
  lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  outlined init with copy of ToolbarItemPlacement.Role(v1 + 48, v3 - 152);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, type metadata accessor for ToolbarStorage.Item);
  v7 = *(_OWORD *)(v3 - 88);
  *(_OWORD *)v0 = *(_OWORD *)(v3 - 104);
  *(_OWORD *)(v0 + 16) = v7;
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v3 - 72);
  return outlined init with take of ToolbarItemPlacement.Role?(v3 - 152, v0 + 40);
}

uint64_t ToolbarStorage.merge(_:options:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int isUniquelyReferenced_nonNull_native;
  int64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t result;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char **v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;

  v3 = v2;
  v58 = a2;
  v5 = type metadata accessor for ToolbarStorage.Entry(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v52 - v11;
  v13 = v3[1];
  if (v13)
  {
    v14 = *v3;
  }
  else
  {
    v14 = *a1;
    v13 = swift_bridgeObjectRetain();
  }
  *v3 = v14;
  v3[1] = v13;
  v15 = v3[3];
  if (v15)
  {
    v16 = v3[4];
    v17 = v3[2];
  }
  else
  {
    v17 = a1[2];
    v15 = a1[3];
    v16 = a1[4];
    outlined copy of Binding<NavigationSplitViewColumn>?(v17, v15);
  }
  v3[2] = v17;
  v3[3] = v15;
  v3[4] = v16;
  v18 = MEMORY[0x1E0DEE9D8];
  v64 = (char *)MEMORY[0x1E0DEE9D8];
  v19 = a1[5];
  v54 = v3;
  if ((v58 & 7) != 0)
  {
    v62 = MEMORY[0x1E0DEE9D8];
    v20 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRetain();
    if (v20)
    {
      v21 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
      v22 = *(_QWORD *)(v56 + 72);
      v53 = v19;
      v23 = v19 + v21;
      v24 = MEMORY[0x1E0DEE9D8];
      do
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry);
        if ((specialized isPlacementValid #1 (_:) in ToolbarStorage.merge(_:options:)((uint64_t)v12, v58, &v64) & 1) != 0)
        {
          outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
          v24 = v62;
          v26 = *(_QWORD *)(v62 + 16);
          v25 = *(_QWORD *)(v62 + 24);
          if (v26 >= v25 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
            v24 = v62;
          }
          *(_QWORD *)(v24 + 16) = v26 + 1;
          outlined init with take of TableCellFormula((uint64_t)v8, v24 + v21 + v26 * v22, type metadata accessor for ToolbarStorage.Entry);
        }
        else
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for ToolbarStorage.Entry);
        }
        v23 += v22;
        --v20;
      }
      while (v20);
      v18 = v62;
    }
    swift_bridgeObjectRelease();
    v19 = v18;
    v3 = v54;
    if ((v58 & 4) == 0)
      goto LABEL_46;
  }
  else
  {
    swift_bridgeObjectRetain();
    if ((v58 & 4) == 0)
    {
LABEL_46:
      v50 = v3[5];
      if ((v58 & 8) != 0)
      {
        v63 = v19;
      }
      else
      {
        v63 = v3[5];
        v50 = v19;
      }
      specialized Array.append<A>(contentsOf:)(v50);
      result = swift_bridgeObjectRelease();
      v3[5] = v63;
      return result;
    }
  }
  swift_beginAccess();
  v27 = *((_QWORD *)v64 + 2);
  if (!v27)
    goto LABEL_46;
  v52 = v64;
  v53 = v19;
  v28 = v3 + 5;
  v29 = v64 + 32;
  v30 = swift_bridgeObjectRetain();
  v55 = v3 + 5;
  while (1)
  {
    MEMORY[0x1E0C80A78](v30, v31);
    v36 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))partial apply for closure #1 in ToolbarStorage.merge(_:options:));
    v37 = (_QWORD *)*v28;
    v38 = *(_QWORD *)(*v28 + 16);
    v39 = v38 - v36;
    if (v38 < v36)
      break;
    v40 = v36;
    if (v36 < 0)
      goto LABEL_51;
    v41 = v36 - v38;
    v42 = v36;
    if (__OFADD__(v38, v36 - v38))
      goto LABEL_52;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v60 = v29;
    v61 = v27;
    v59 = &v52;
    if (!isUniquelyReferenced_nonNull_native || v42 > v37[3] >> 1)
    {
      if (v38 <= v42)
        v44 = v38 - v39;
      else
        v44 = v38;
      v37 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v44, 1, v37);
    }
    v45 = (char *)v37 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
    v46 = *(_QWORD *)(v56 + 72);
    v47 = v46 * v40;
    v30 = swift_arrayDestroy();
    if (v38 != v40)
    {
      v48 = v37[2] - v38;
      if (v48 < 0)
        goto LABEL_54;
      v31 = &v45[v46 * v38];
      if (v47 < v46 * v38 || &v45[v46 * v40] >= &v31[v48 * v46])
      {
        v30 = swift_arrayInitWithTakeFrontToBack();
      }
      else if (v47 != v46 * v38)
      {
        v30 = swift_arrayInitWithTakeBackToFront();
      }
      v32 = v37[2];
      v33 = __OFADD__(v32, v41);
      v34 = v32 - v39;
      if (v33)
        goto LABEL_53;
      v37[2] = v34;
    }
    v35 = v60;
    v28 = v55;
    *v55 = v37;
    v29 = v35 + 48;
    v27 = v61 - 1;
    if (v61 == 1)
    {
      swift_bridgeObjectRelease();
      v19 = v53;
      v3 = v54;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized isPlacementValid #1 (_:) in ToolbarStorage.merge(_:options:)(uint64_t a1, char a2, char **a3)
{
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;
  _BYTE v22[48];

  ToolbarStorage.Entry.placement.getter((uint64_t)&v18);
  if (v21 != 255)
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v18, (uint64_t)v22);
    if ((a2 & 1) == 0)
    {
      if ((a2 & 2) == 0)
      {
        v5 = 1;
        if ((a2 & 4) == 0)
          goto LABEL_31;
        goto LABEL_18;
      }
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
      goto LABEL_11;
    }
    v18 = 22;
    v19 = 0u;
    v20 = 0u;
    v21 = 2;
    v6 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v22, (uint64_t)&v18);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    if ((v6 & 1) != 0)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
      if ((a2 & 2) == 0)
        goto LABEL_17;
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    }
    else
    {
      v14 = 21;
      v15 = 0u;
      v16 = 0u;
      v17 = 2;
      v7 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v14);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v14);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
      if ((a2 & 2) == 0)
      {
LABEL_13:
        v5 = v7 ^ 1;
        if ((a2 & 4) == 0)
          goto LABEL_31;
        goto LABEL_18;
      }
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
      if ((v7 & 1) == 0)
      {
LABEL_11:
        v14 = 18;
        v15 = 0u;
        v16 = 0u;
        v17 = 2;
        v7 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v14);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v14);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
        goto LABEL_13;
      }
    }
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
LABEL_17:
    v5 = 0;
    if ((a2 & 4) == 0)
    {
LABEL_31:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v22);
      return v5 & 1;
    }
LABEL_18:
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    if (v21)
    {
      if (v21 == 1)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
      }
      else if ((unint64_t)v20 | *((_QWORD *)&v20 + 1) | v18 | *((_QWORD *)&v19 + 1) | (unint64_t)v19)
      {
        v8 = v20 | *((_QWORD *)&v20 + 1) | *((_QWORD *)&v19 + 1) | v19;
        if (((unint64_t)(v18 - 1) > 0xF || v8) && (unint64_t)(v18 - 17) <= 1 && !v8)
          goto LABEL_31;
      }
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    swift_beginAccess();
    v9 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      *a3 = v9;
    }
    v12 = *((_QWORD *)v9 + 2);
    v11 = *((_QWORD *)v9 + 3);
    if (v12 >= v11 >> 1)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
      *a3 = v9;
    }
    *((_QWORD *)v9 + 2) = v12 + 1;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v18, (uint64_t)&v9[48 * v12 + 32]);
    goto LABEL_31;
  }
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v18, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = 0;
  return v5 & 1;
}

uint64_t closure #1 in ToolbarStorage.merge(_:options:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t (*v6)(void);
  _BYTE v8[48];
  _BYTE v9[48];
  _BYTE v10[48];
  _BYTE v11[40];
  unsigned __int8 v12;
  _BYTE v13[48];
  _BYTE v14[48];

  ToolbarStorage.Entry.placement.getter((uint64_t)v14);
  outlined init with copy of ToolbarItemPlacement.Role(a2, (uint64_t)v13);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v14, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v13, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v10[40] == 255)
  {
    v5 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v5);
    if (v12 == 255)
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v10, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v3 = 1;
      return v3 & 1;
    }
LABEL_7:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
    v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v10, (uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v12 == 255)
  {
    v6 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v6);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v9);
    goto LABEL_7;
  }
  outlined init with take of ToolbarItemPlacement.Role((uint64_t)v11, (uint64_t)v8);
  v3 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v9, (uint64_t)v8);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v8);
  v4 = MEMORY[0x1E0DEB940];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v4);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v9);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v10, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v4);
  return v3 & 1;
}

void ToolbarStorage.Entry.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v5, v6);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (char *)sub_1876FD7F8 + 4 * byte_187C512CC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876FD7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with take of TableCellFormula(v1, v0, type metadata accessor for ToolbarStorage.Item);
  if (*(_QWORD *)(v0 + 40))
    v2 = *(_QWORD *)(v0 + 32);
  else
    v2 = 0x20676E697373696DLL;
  swift_bridgeObjectRetain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, type metadata accessor for ToolbarStorage.Item);
  return v2;
}

void protocol witness for CustomStringConvertible.description.getter in conformance ToolbarStorage.Entry.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](v2, a2);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ToolbarStorage.Entry.Kind);
  v5 = (char *)sub_1876FD96C + 4 * byte_187C512D0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876FD96C()
{
  uint64_t v0;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, type metadata accessor for ToolbarStorage.Entry.Kind);
  return 1835365481;
}

Swift::Int ToolbarStorage.Entry.ID.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[48];
  _BYTE v3[48];

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v0 + 40, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v3[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v3, (uint64_t)v2);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ToolbarStorage.Entry.ID()
{
  uint64_t v0;
  _BYTE v1[48];
  _BYTE v2[48];

  AnyHashable.hash(into:)();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v0 + 40, (uint64_t)v2, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v2[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v2, (uint64_t)v1);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarStorage.Entry.ID()
{
  uint64_t v0;
  _BYTE v2[48];
  _BYTE v3[48];

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v0 + 40, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v3[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v3, (uint64_t)v2);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v2);
  }
  return Hasher._finalize()();
}

void ToolbarStorage.ID.hash(into:)()
{
  _QWORD *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[5];
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int ToolbarStorage.ID.hashValue.getter()
{
  _QWORD *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[5];
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarStorage.ID()
{
  _QWORD *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[5];
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ToolbarContentKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static ToolbarContentKey.defaultValue + 1);
  v3 = qword_1EDEFFE38;
  v4 = unk_1EDEFFE40;
  v5 = qword_1EDEFFE48;
  v6 = unk_1EDEFFE50;
  v7 = byte_1EDEFFE58;
  v8 = qword_1EDEFFE60;
  *(_QWORD *)a1 = static ToolbarContentKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3[8];

  a2(v3);
  ToolbarStorage.merge(_:options:)(v3, 1);
  return outlined release of ToolbarStorage((uint64_t)v3);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey(&one-time initialization token for defaultValue, (uint64_t)static SearchContentKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SearchContentKey(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v13 - v6;
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1, (uint64_t)&v13 - v6, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v8);
  v9 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9);
  result = outlined destroy of TaskPriority?((uint64_t)v7, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem);
  if (v10 == 1)
  {
    v12 = outlined destroy of TaskPriority?(a1, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem);
    return a2(v12);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v6, a3, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(id *), uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  char v16;
  unint64_t v17;
  id v18;
  id v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v4 = v2;
  v7 = *v2;
  swift_bridgeObjectRetain();
  v8 = specialized Collection.firstIndex(where:)(a1, a2, v7);
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v3)
    return v8;
  if ((v10 & 1) == 0)
  {
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_54;
    if (*v4 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v30)
        goto LABEL_6;
    }
    else if (v11 != *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v11 = v8 + 5;
      v32 = a2;
      while (1)
      {
        v12 = v11 - 4;
        v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v14 = (id)MEMORY[0x18D75E3BC](v11 - 4);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_45;
          v14 = *(id *)(v13 + 8 * v11);
        }
        v15 = v14;
        v33 = v14;
        v16 = a1(&v33);

        if ((v16 & 1) == 0)
          break;
LABEL_32:
        v27 = v11 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_46;
        if (*v4 >> 62)
        {
          swift_bridgeObjectRetain();
          v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v28 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v27 == v28)
          return v8;
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1))
          goto LABEL_47;
        goto LABEL_32;
      }
      v17 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        v18 = (id)MEMORY[0x18D75E3BC](v8, *v4);
        v17 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v12 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v19 = *(id *)(v17 + 8 * v11);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v8 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v18 = *(id *)(v17 + 8 * v8 + 32);
        if ((v17 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v19 = (id)MEMORY[0x18D75E3BC](v11 - 4, v17);
      v17 = *v4;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v4 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v17 & 0x8000000000000000) != 0
        || (v17 & 0x4000000000000000) != 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      }
      v21 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
      *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v19;

      specialized Array._endMutation()();
      v22 = *v4;
      v23 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v4 = v22;
      if (!v23 || (v22 & 0x8000000000000000) != 0 || (v22 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      a2 = v32;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_52;
      v24 = v22 & 0xFFFFFFFFFFFFFF8;
      if (v12 >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      v25 = *(void **)(v24 + 8 * v11);
      *(_QWORD *)(v24 + 8 * v11) = v18;

      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  if (!(*v4 >> 62))
    return *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(unint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v1;
  v5 = type metadata accessor for ToolbarStorage.Entry(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v37 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v36 = (uint64_t)&v33 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v38 = (uint64_t)&v33 - v14;
  v15 = *v1;
  v16 = *(_QWORD *)(*v1 + 16);
  if (!v16)
    return 0;
  v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRetain();
  v19 = 0;
  v34 = v17;
  while (1)
  {
    v20 = a1(v15 + v17);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((v20 & 1) != 0)
      break;
    ++v19;
    v17 += v18;
    if (v16 == v19)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v15 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v19, 1))
  {
    v22 = *(_QWORD *)(v15 + 16);
    if (v19 + 1 == v22)
      return v19;
    v23 = v18 + v17;
    v24 = v19 + 1;
    v33 = v1;
    v35 = v18;
    while (v24 < v22)
    {
      v25 = v3;
      v39 = v23;
      v26 = v38;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15 + v23, v38, type metadata accessor for ToolbarStorage.Entry);
      v27 = a1(v26);
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, type metadata accessor for ToolbarStorage.Entry);
      if ((v27 & 1) != 0)
      {
        v3 = v25;
        v28 = v35;
      }
      else
      {
        v3 = v25;
        v28 = v35;
        if (v24 != v19)
        {
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_32;
          v29 = (_QWORD *)*v3;
          v30 = *(_QWORD *)(*v3 + 16);
          if (v19 >= v30)
            goto LABEL_33;
          result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29 + v34 + v19 * v35, v36, type metadata accessor for ToolbarStorage.Entry);
          if (v24 >= v30)
            goto LABEL_34;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29 + v39, v37, type metadata accessor for ToolbarStorage.Entry);
          result = swift_isUniquelyReferenced_nonNull_native();
          v3 = v33;
          *v33 = (uint64_t)v29;
          if ((result & 1) == 0)
          {
            result = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            v29 = (_QWORD *)result;
            *v3 = result;
          }
          if (v19 >= v29[2])
            goto LABEL_35;
          result = outlined assign with take of ToolbarStorage.Entry(v37, (uint64_t)v29 + v34 + v19 * v28);
          if (v24 >= *(_QWORD *)(*v3 + 16))
            goto LABEL_36;
          result = outlined assign with take of ToolbarStorage.Entry(v36, *v3 + v39);
        }
        if (__OFADD__(v19++, 1))
          goto LABEL_31;
      }
      v32 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_30;
      v15 = *v3;
      v22 = *(_QWORD *)(*v3 + 16);
      ++v24;
      v23 = v39 + v28;
      if (v32 == v22)
        return v19;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static ToolbarStorage.ID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v8 = a2[3];
  v7 = a2[4];
  v9 = a2[5];
  v10 = static _ViewList_ID.== infix(_:_:)();
  result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && v4 == v8)
  {
    if (v5)
    {
      if (v9 && (v3 == v7 && v5 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        return 1;
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL specialized static ToolbarStorage.Entry.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t (*v5)(void);
  uint64_t (*v6)(void);
  uint64_t (*v8)(void);
  _BYTE v9[48];
  _BYTE v10[48];
  _BYTE v11[48];
  _BYTE v12[40];
  unsigned __int8 v13;
  _BYTE v14[48];
  _BYTE v15[48];

  if ((MEMORY[0x18D75E284]() & 1) == 0)
    return 0;
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1 + 40, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a2 + 40, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v15, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v14, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v11[40] == 255)
  {
    v6 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v6);
    if (v13 == 255)
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      return 1;
    }
  }
  else
  {
    outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v11, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v13 != 255)
    {
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v12, (uint64_t)v9);
      v4 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v10, (uint64_t)v9);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v9);
      v5 = MEMORY[0x1E0DEB940];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v5);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v5);
      return (v4 & 1) != 0;
    }
    v8 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v8);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
  return 0;
}

uint64_t specialized static ToolbarContentKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[5];

  a2(v14);
  v4 = v14[1];
  v3 = v14[2];
  v5 = v14[3];
  v6 = v14[4];
  v7 = a1[1];
  if (v7)
  {
    v8 = *a1;
  }
  else
  {
    v8 = v14[0];
    swift_bridgeObjectRetain();
    v7 = v4;
  }
  *a1 = v8;
  a1[1] = v7;
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = a1[2];
  }
  else
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v3, v5);
    v11 = v3;
    v9 = v5;
    v10 = v6;
  }
  a1[2] = v11;
  a1[3] = v9;
  a1[4] = v10;
  v14[0] = a1[5];
  v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v3, v5);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  a1[5] = v14[0];
  return result;
}

uint64_t partial apply for closure #1 in ToolbarStorage.merge(_:options:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ToolbarStorage.merge(_:options:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t outlined init with take of ToolbarItemPlacement.Role?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SearchContentKey()
{
  return &type metadata for SearchContentKey;
}

uint64_t destroy for ToolbarStorage.Entry.ID(uint64_t a1)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (*(_BYTE *)(a1 + 80) == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return result;
}

uint64_t initializeWithCopy for ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  if (*(_BYTE *)(a2 + 80) == 1)
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
    *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    *v5 = *v6;
    *(_OWORD *)(a1 + 56) = v8;
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = (__int128 *)(a1 + 40);
  v5 = (__int128 *)(a2 + 40);
  v6 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v6 != 1)
      goto LABEL_8;
    goto LABEL_5;
  }
  if (v6 != 255)
  {
    if (a1 == a2)
      return a1;
    outlined destroy of ToolbarItemPlacement.Role(a1 + 40);
    if (*(_BYTE *)(a2 + 80) != 1)
    {
LABEL_8:
      v10 = *v5;
      v11 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *v4 = v10;
      *(_OWORD *)(a1 + 56) = v11;
      return a1;
    }
LABEL_5:
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
    *(_BYTE *)(a1 + 80) = 1;
    return a1;
  }
  outlined destroy of ToolbarItemPlacement.Role(a1 + 40);
  v7 = *(_OWORD *)(a2 + 65);
  v8 = *(_OWORD *)(a2 + 56);
  *v4 = *v5;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 65) = v7;
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 80) == 255 || a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 40);
LABEL_7:
    v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.Entry.ID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.Entry.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarStorage.Entry.ID()
{
  return &type metadata for ToolbarStorage.Entry.ID;
}

uint64_t destroy for ToolbarStorage.ID()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ToolbarStorage.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.ID(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.ID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarStorage.ID()
{
  return &type metadata for ToolbarStorage.ID;
}

uint64_t assignWithTake for SectionStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of Binding<Bool>(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876FF260 + 4 * byte_187C51650[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for SectionStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.Actions()
{
  return &type metadata for SectionStyleConfiguration.Actions;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.Actions()
{
  return &protocol witness table for SectionStyleConfiguration.Actions;
}

void View.sectionStyle<A, B>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  v6 = type metadata accessor for SectionStyleModifier(0, v4, v5, v4);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for StyleContextAcceptsPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v8);
  type metadata accessor for StaticIf();
}

uint64_t sub_1876FF58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v5, *(_QWORD *)(v9 - 200), v7, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v5, v7);
  v15 = *(_QWORD *)(v9 - 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v6, *(_QWORD *)(v9 - 176), v4);
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v6;
  *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 168);
  ViewModifier.requiring<A>(_:)(v9 - 112, 1, v8, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 192) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v4);
  MEMORY[0x18D75B4AC](v14, *(_QWORD *)(v9 - 152), a1, *(_QWORD *)(v9 - 144));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a1);
}

uint64_t View.sectionStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SectionStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.Header()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.Footer()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.Actions()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

_UNKNOWN **base witness table accessor for ViewModifier in SectionStyleModifier<A>()
{
  return &protocol witness table for SectionStyleModifier<A>;
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.RawContent()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t instantiation function for generic protocol witness table for SectionStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSectionStyle()
{
  lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedSectionStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SectionStyleModifier<DefaultSectionStyle> and conformance SectionStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SectionStyleModifier<DefaultSectionStyle>, (uint64_t)&protocol conformance descriptor for SectionStyleModifier<A>);
}

void type metadata accessor for SectionStyleModifier<DefaultSectionStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle();
    v4 = type metadata accessor for SectionStyleModifier(a1, (uint64_t)&type metadata for DefaultSectionStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>);
  }
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.Header()
{
  return &protocol witness table for SectionStyleConfiguration.Header;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.Header(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.Footer()
{
  return &protocol witness table for SectionStyleConfiguration.Footer;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.Footer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.RawContent()
{
  return &protocol witness table for SectionStyleConfiguration.RawContent;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.RawContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SectionStyleConfiguration.Actions(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.Actions, &type metadata for SectionStyleConfiguration.Actions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.Actions, &type metadata for SectionStyleConfiguration.Actions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  }
  return result;
}

void type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsExpandedTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsExpandedTraitKey>);
  }
}

uint64_t sub_1876FFB44()
{
  uint64_t v0;
  _QWORD v2[2];

  swift_getAssociatedTypeWitness();
  type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>();
  v0 = type metadata accessor for ModifiedContent();
  v2[0] = swift_getAssociatedConformanceWitness();
  v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<IsExpandedTraitKey> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>, MEMORY[0x1E0CE52E0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

uint64_t closure #1 in static LazyHStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for LazyHStack(0, a2, a3, a4);
  v9 = type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t partial apply for closure #1 in static LazyHStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static LazyHStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyHStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHStack<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyHStack<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHStack<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance LazyHStack<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyHStack<A>, a1);
  specialized PrimitiveView.body.getter();
}

_UNKNOWN **base witness table accessor for View in LazyHStack<A>()
{
  return &protocol witness table for LazyHStack<A>;
}

ValueMetadata *type metadata accessor for LazyHStackLayout()
{
  return &type metadata for LazyHStackLayout;
}

unint64_t instantiation function for generic protocol witness table for LazyHStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout;
  if (!lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2278], MEMORY[0x1E0CE2288]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyHStackLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyHStackLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SwiftUITextAnimationProviderClass()
{
  return type metadata accessor for TextAnimationsProvider();
}

uint64_t static Group<A>._makeScene(scene:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  _BYTE v22[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 14);
  LODWORD(v15) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v14 = *(_OWORD *)(a2 + 5);
  v11 = a2[3];
  v12 = a2[4];
  _GraphValue.subscript.getter();
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = v11;
  v19 = v12;
  v20 = v14;
  v21 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v22, &v15, a3, a4);
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeScene(scene:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t _TupleScene.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _TupleScene.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_TupleScene.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _TupleScene.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _TupleScene.body.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t _TupleScene.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static _TupleScene._makeScene(scene:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t List;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *, _QWORD);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  _QWORD v47[2];
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v11 = a2[5];
  v10 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  lazy protocol witness table accessor for type SceneDescriptor and conformance SceneDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v13 = v47[0];
  LODWORD(v47[0]) = v6;
  v14 = v13;
  v47[1] = v7;
  v48 = v8;
  v49 = v9;
  v50 = *(_OWORD *)(a2 + 3);
  v51 = v11;
  v52 = v10;
  v53 = v12;
  v54 = 0;
  v55 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (__int128 *)(v14 + 40);
    v17 = v10;
    do
    {
      v18 = *v16;
      v16 = (__int128 *)((char *)v16 + 24);
      v54 = AGTupleElementOffset();
      v46 = v18;
      List = type metadata accessor for _TupleScene.MakeList(0, a3, v19, v20);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v47, List, (uint64_t)&protocol witness table for _TupleScene<A>.MakeList);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v22 = v55;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x1E0DEE9D8];
    v17 = v10;
  }
  v23 = *(_QWORD *)(v22 + 16);
  v24 = MEMORY[0x1E0DEE9D8];
  if (v23)
  {
    *(_QWORD *)&v46 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    v24 = v46;
    v25 = (_DWORD *)(v22 + 40);
    do
    {
      v26 = *((_QWORD *)v25 - 1);
      v27 = *v25;
      *(_QWORD *)&v46 = v24;
      v29 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
        v24 = v46;
      }
      *(_QWORD *)(v24 + 16) = v29 + 1;
      v30 = v24 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v26;
      *(_DWORD *)(v30 + 40) = v27;
      v25 += 4;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
  PreferencesOutputs.init()();
  v43 = v24;
  v44 = v46;
  v45 = DWORD2(v46);
  v42 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v31 = MEMORY[0x1E0CE6550];
    v32 = MEMORY[0x1E0CE6548];
    do
    {
      v33 = (void (*)(__int128 *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v35 = *v34;
      v36 = v34[1];
      v33(&v46, 0);
      v37 = v42;
      *(_QWORD *)&v46 = v17;
      swift_bridgeObjectRetain();
      v38 = PreferenceKeys.endIndex.getter();
      if (v42 < 0 || v42 >= v38)
        __break(1u);
      ++v42;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 16))(&v43, v31, v32, v35, v36);
    }
    while (v37 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v39 = v45;
  *(_QWORD *)a4 = v44;
  *(_DWORD *)(a4 + 8) = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _TupleScene.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char v25[4];
  uint64_t v26;
  int v27;

  v5 = v4;
  LODWORD(v19) = *(_DWORD *)v4;
  type metadata accessor for _TupleScene(255, *(_QWORD *)(a2 + 16), a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v8 = *(_DWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 64);
  v19 = *(_QWORD *)(v4 + 8);
  v20 = v8;
  v21 = v9;
  v11 = *(_OWORD *)(v4 + 48);
  v22 = *(_OWORD *)(v4 + 32);
  v23 = v11;
  v24 = v10;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v26, v25, &v19, a3, a4);
  v12 = v26;
  v13 = v27;
  v14 = *(_QWORD *)(v4 + 80);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, (char *)v14);
    v14 = result;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    v14 = result;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  v18 = v14 + 16 * v17;
  *(_QWORD *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(_QWORD *)(v5 + 80) = v14;
  return result;
}

uint64_t protocol witness for SceneTypeVisitor.visit<A>(type:) in conformance _TupleScene<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _TupleScene.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void protocol witness for Scene.body.getter in conformance _TupleScene<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _TupleScene.body.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance _TupleScene<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static _TupleScene._makeScene(scene:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

void specialized _TupleScene.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _TupleScene(0, a1, a3, a4);
  specialized Scene.sceneBodyError()();
}

unint64_t lazy protocol witness table accessor for type SceneDescriptor and conformance SceneDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor;
  if (!lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneDescriptor, &type metadata for SceneDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor;
  if (!lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneDescriptor, &type metadata for SceneDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for _TupleScene.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TupleScene.MakeList);
}

uint64_t instantiation function for generic protocol witness table for <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _TupleScene(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187700788 + 4 * byte_187C51A78[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _TupleScene(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _TupleScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TupleScene);
}

void one-time initialization function for back()
{
  static UIPressType.back = 7;
}

id LinearUIKitProgressView.Base.SwiftUIProgressView.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView);
}

uint64_t type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView()
{
  return objc_opt_self();
}

void LinearUIKitProgressView.Base.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  char v19;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  v10 = Transaction.animation.getter();
  swift_release();
  if (v10)
    swift_release();
  *(float *)&v11 = a4;
  v12 = objc_msgSend(a1, sel_setProgress_animated_, v10 != 0, v11);
  if (a3)
  {
    if (v9)
    {
      MEMORY[0x1E0C80A78](v12, v13);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, 1);
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    objc_opt_self();
    v14 = (void *)swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend(a1, sel_progressTintColor);
  if (v15)
  {
    v16 = v15;
    if (v14)
    {
      type metadata accessor for UIColor();
      v17 = v14;
      v18 = v16;
      v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) != 0)
        goto LABEL_17;
    }
    else
    {

    }
LABEL_16:
    objc_msgSend(a1, sel_setProgressTintColor_, v14);
    v17 = v14;
LABEL_17:

    return;
  }
  if (v14)
    goto LABEL_16;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance LinearUIKitProgressView.Base()
{
  type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView();
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithProgressViewStyle_, 0);
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance LinearUIKitProgressView.Base(void *a1, uint64_t a2)
{
  uint64_t v2;

  LinearUIKitProgressView.Base.updateUIView(_:context:)(a1, a2, *(_QWORD *)(v2 + 8), *(double *)v2);
}

uint64_t LinearUIKitProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  char v22;
  uint64_t v23;
  double v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v27 - v6;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (double *)((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v19, v20);
  outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)v15, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v22 = *((_BYTE *)v15 + *(int *)(v21 + 48));
    outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v23 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for LinearUIKitProgressView() + 20));
    v7[v4[9]] = 0;
    v7[v4[10]] = v22;
    *(_QWORD *)&v7[v4[11]] = v23;
    v7[v4[12]] = 0;
    outlined init with copy of TimelineProgressView<LinearUIKitProgressView.Base>((uint64_t)v7, a1);
    type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<LinearUIKitProgressView.Base>((uint64_t)v7);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((_BYTE *)v15 + 8))
      v25 = 0.0;
    else
      v25 = *v15;
    v26 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for LinearUIKitProgressView() + 20));
    *(double *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v26;
    type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return swift_retain();
  }
}

id @objc LinearUIKitProgressView.Base.SwiftUIProgressView.init(frame:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  objc_super v12;

  v12.receiver = a1;
  v12.super_class = (Class)a7(0);
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a2, a3, a4, a5);
}

id @objc CircularUIKitProgressView.SwiftUIActivityIndicatorView.init(style:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id CircularUIKitProgressView.SwiftUIActivityIndicatorView.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView);
}

uint64_t type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView()
{
  return objc_opt_self();
}

uint64_t destroy for CircularUIKitProgressView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  return swift_release();
}

uint64_t initializeWithCopy for CircularUIKitProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v12, v13);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_BYTE *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v14, v15);
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = v15;
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v16, v17);
  *(_QWORD *)(a1 + 128) = v16;
  *(_BYTE *)(a1 + 136) = v17;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CircularUIKitProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v16;
  *(_BYTE *)(a1 + 72) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v20, v21);
  v22 = *(_QWORD *)(a1 + 80);
  v23 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v20;
  *(_BYTE *)(a1 + 88) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v24 = *(_QWORD *)(a2 + 112);
  v25 = *(_BYTE *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v24, v25);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v24;
  *(_BYTE *)(a1 + 120) = v25;
  outlined consume of Environment<Bool>.Content(v26, v27);
  v28 = *(_QWORD *)(a2 + 128);
  v29 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v28, v29);
  v30 = *(_QWORD *)(a1 + 128);
  v31 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v28;
  *(_BYTE *)(a1 + 136) = v29;
  outlined consume of Environment<Bool>.Content(v30, v31);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t assignWithTake for CircularUIKitProgressView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_BYTE *)a2 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v14 = *((_BYTE *)a2 + 72);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  v17 = *((_BYTE *)a2 + 88);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 88) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  v20 = *((_BYTE *)a2 + 120);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_BYTE *)(a1 + 120) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = *((_BYTE *)a2 + 136);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_BYTE *)(a1 + 136) = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 160) = a2[20];
  swift_release();
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for CircularUIKitProgressView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 169))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 160);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CircularUIKitProgressView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 169) = 0;
    if (a2)
      *(_QWORD *)(result + 160) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CircularUIKitProgressView()
{
  return &type metadata for CircularUIKitProgressView;
}

_QWORD *initializeBufferWithCopyOfBuffer for LinearUIKitProgressView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Date();
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((_QWORD *)((char *)a1 + *(int *)(v10 + 36)), (_QWORD *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v13 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
    v14 = v13[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + v13[6]) = *((_BYTE *)a2 + v13[6]);
    *((_BYTE *)a1 + v13[7]) = *((_BYTE *)a2 + v13[7]);
    *((_BYTE *)a1 + v13[8]) = *((_BYTE *)a2 + v13[8]);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for LinearUIKitProgressView(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for Date();
    v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
    v3(a1, v2);
    type metadata accessor for ClosedRange<Date>();
    v3(a1 + *(int *)(v4 + 36), v2);
  }
  return swift_release();
}

_BYTE *initializeWithCopy for LinearUIKitProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v12 = v11[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  return a1;
}

_BYTE *assignWithCopy for LinearUIKitProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v12 = v11[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *initializeWithTake for LinearUIKitProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v12 = v11[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

_BYTE *assignWithTake for LinearUIKitProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v12 = v11[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearUIKitProgressView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187701C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearUIKitProgressView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187701D10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for LinearUIKitProgressView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LinearUIKitProgressView;
  if (!type metadata singleton initialization cache for LinearUIKitProgressView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for LinearUIKitProgressView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in LinearUIKitProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CircularUIKitProgressView.updateUIView(_:context:)(id a1, uint64_t a2)
{
  __int128 *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 32);
  v7 = (void *)*((_QWORD *)v2 + 20);
  if ((*((_BYTE *)v2 + 168) & 1) != 0)
  {
    v20 = v2[6];
    v21 = v2[7];
    v22 = v2[8];
    v23 = v2[9];
    v16 = v2[2];
    v17 = v2[3];
    v18 = v2[4];
    v19 = v2[5];
    v14 = *v2;
    v15 = v2[1];
    v24 = *((_QWORD *)v2 + 20);
    LOBYTE(v25) = *((_BYTE *)v2 + 168);
    a1 = objc_msgSend(a1, sel__setCustomWidth_, CircularUIKitProgressView.resolvedWidth.getter());
    if (!v7)
    {
      static Color.secondary.getter();
      a1 = (id)swift_retain();
      if (v6)
        goto LABEL_6;
      goto LABEL_8;
    }
LABEL_5:
    if (v6)
    {
LABEL_6:
      MEMORY[0x1E0C80A78](a1, a2);
      swift_retain();
      swift_retain_n();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v4, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v4, 1);
LABEL_9:
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
      swift_release();
      Color.Resolved.kitColor.getter();
      objc_opt_self();
      v7 = (void *)swift_dynamicCastObjCClassUnconditional();
      goto LABEL_10;
    }
LABEL_8:
    *(_QWORD *)&v14 = v5;
    *((_QWORD *)&v14 + 1) = v4;
    swift_retain_n();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v4, 0);
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_5;
LABEL_10:
  v8 = objc_msgSend(v3, sel_color, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
  if (v8)
  {
    v9 = v8;
    if (v7)
    {
      type metadata accessor for UIColor();
      v10 = v7;
      v11 = v9;
      v12 = static NSObject.== infix(_:_:)();

      if ((v12 & 1) != 0)
        goto LABEL_18;
    }
    else
    {

    }
  }
  else if (!v7)
  {
    return swift_release();
  }
  objc_msgSend(v3, sel_setColor_, v7);
  v10 = v7;
LABEL_18:

  return swift_release();
}

double CircularUIKitProgressView.resolvedWidth.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v4;
  char v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v0, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v5);
  outlined consume of Environment<Bool>.Content(v1, v2);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
  ScaledMetric.wrappedValue.getter();
  return v4;
}

void *protocol witness for UIViewRepresentable.makeUIView(context:) in conformance CircularUIKitProgressView()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  unsigned __int8 v15;
  _OWORD v16[9];
  _BYTE v17[25];

  v1 = v0[9];
  v16[8] = v0[8];
  *(_OWORD *)v17 = v1;
  *(_OWORD *)&v17[9] = *(_OWORD *)((char *)v0 + 153);
  v2 = v0[5];
  v16[4] = v0[4];
  v16[5] = v2;
  v3 = v0[7];
  v16[6] = v0[6];
  v16[7] = v3;
  v4 = v0[1];
  v16[0] = *v0;
  v16[1] = v4;
  v5 = v0[3];
  v16[2] = v0[2];
  v16[3] = v5;
  type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView();
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v7 = v6;
  if (v17[24] == 1)
  {
    v8 = v6;
    v9 = 16;
  }
  else
  {
    v10 = *(_QWORD *)&v16[0];
    v11 = BYTE8(v16[0]);
    v12 = v6;
    outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v16);
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v15);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v16);
    v13 = 101;
    if (v15 - 3 >= 2)
      v13 = 100;
    if (v15 >= 2u)
      v9 = v13;
    else
      v9 = 3;
  }
  objc_msgSend(v7, sel_setActivityIndicatorViewStyle_, v9);
  objc_msgSend(v7, sel_startAnimating);

  return v7;
}

unint64_t lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base;
  if (!lazy protocol witness table cache variable for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LinearUIKitProgressView.Base, &type metadata for LinearUIKitProgressView.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base);
  }
  return result;
}

uint64_t outlined init with copy of TimelineProgressView<LinearUIKitProgressView.Base>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimelineProgressView<LinearUIKitProgressView.Base>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *assignWithCopy for LinearUIKitProgressView.Base(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LinearUIKitProgressView.Base()
{
  return &type metadata for LinearUIKitProgressView.Base;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = &protocol witness table for LinearUIKitProgressView.Base;
    v3[1] = lazy protocol witness table accessor for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    v7 = a3(a1, &type metadata for LinearUIKitProgressView.Base, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for LinearUIKitProgressView.Base(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t ListSectionInfo.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v5 = v4;
  v10 = v5[3];
  v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  v16 = 2;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v16, a2, a3, v10, v11);
  if ((v13 & 1) == 0)
    return ListSectionInfo.indexPath(offset:)(v12, a4);
  v15 = type metadata accessor for IndexPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a4, 1, 1, v15);
}

uint64_t outlined destroy of SectionAccumulator(uint64_t a1)
{
  destroy for SectionAccumulator(a1);
  return a1;
}

uint64_t specialized implicit closure #1 in ListSectionInfo.sectionIDs.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 120);
  return result;
}

uint64_t ListSectionInfo.indexPath(offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _OWORD v29[11];
  __int16 v30;
  _OWORD v31[12];
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;

  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v4 + 16);
  v28 = v4 + 32;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (v5)
    goto LABEL_3;
LABEL_2:
  v7 = v5;
  memset(v31, 0, 186);
  while (1)
  {
    result = outlined init with take of (offset: Int, element: SectionAccumulator.Item)?((uint64_t)v31, (uint64_t)&v32);
    if (!(_QWORD)v35)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      v20 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
    }
    v8 = v32;
    v31[2] = v35;
    v31[3] = v36;
    v31[6] = v39;
    v31[7] = v40;
    v31[4] = v37;
    v31[5] = v38;
    LOWORD(v31[11]) = v44;
    v31[9] = v42;
    v31[10] = v43;
    v31[8] = v41;
    v31[0] = v33;
    v31[1] = v34;
    v9 = *(_QWORD *)(v39 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)&v31[6] + 48 * v9;
      v12 = *(_QWORD *)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
      v13 = __OFADD__(v11, v12);
      v14 = v11 + v12;
      if (v13)
        goto LABEL_33;
      v15 = *(_QWORD *)(*(_QWORD *)&v31[6] + 72);
      if (v14 < v15)
        goto LABEL_34;
      v13 = __OFSUB__(v14, v15);
      v9 = v14 - v15;
      if (v13)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    v13 = __OFSUB__(a1, v9);
    v16 = a1 - v9;
    if (v13)
      goto LABEL_30;
    v17 = *((_QWORD *)&v31[6] + 1);
    v13 = __OFSUB__(v16, *((_QWORD *)&v31[6] + 1));
    v18 = v16 - *((_QWORD *)&v31[6] + 1);
    if (v13)
      goto LABEL_31;
    v19 = v18 - *(_QWORD *)&v31[7];
    if (__OFSUB__(v18, *(_QWORD *)&v31[7]))
      goto LABEL_32;
    if (v19 < 0)
      break;
    result = outlined destroy of SectionAccumulator.Item((uint64_t)v31);
    a1 = v19;
    if (v7 == v5)
      goto LABEL_2;
LABEL_3:
    if (v7 >= *(_QWORD *)(v4 + 16))
      goto LABEL_35;
    outlined init with copy of SectionAccumulator.Item(v28 + 184 * v7, (uint64_t)v29);
    *(_QWORD *)&v31[0] = v7;
    *(_OWORD *)((char *)&v31[8] + 8) = v29[8];
    *(_OWORD *)((char *)&v31[9] + 8) = v29[9];
    *(_OWORD *)((char *)&v31[10] + 8) = v29[10];
    WORD4(v31[11]) = v30;
    *(_OWORD *)((char *)&v31[4] + 8) = v29[4];
    *(_OWORD *)((char *)&v31[5] + 8) = v29[5];
    *(_OWORD *)((char *)&v31[6] + 8) = v29[6];
    *(_OWORD *)((char *)&v31[7] + 8) = v29[7];
    *(_OWORD *)((char *)v31 + 8) = v29[0];
    *(_OWORD *)((char *)&v31[1] + 8) = v29[1];
    ++v7;
    *(_OWORD *)((char *)&v31[2] + 8) = v29[2];
    *(_OWORD *)((char *)&v31[3] + 8) = v29[3];
  }
  result = swift_bridgeObjectRelease();
  v21 = a1 - v17;
  if (__OFSUB__(a1, v17))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v21 < 0)
  {
    result = outlined destroy of SectionAccumulator.Item((uint64_t)v31);
  }
  else
  {
    v22 = SectionAccumulator.Item.count.getter();
    result = outlined destroy of SectionAccumulator.Item((uint64_t)v31);
    if (v21 < v22)
    {
      v23 = a2;
      v24 = a1 - v17;
      goto LABEL_29;
    }
  }
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_37;
  if (v8 >= *(_QWORD *)(v4 + 16))
  {
LABEL_38:
    __break(1u);
    return result;
  }
  outlined init with copy of SectionAccumulator.Item(v28 + 184 * v8, (uint64_t)&v32);
  v25 = SectionAccumulator.Item.count.getter();
  outlined destroy of SectionAccumulator.Item((uint64_t)&v32);
  if (v25 < 1)
    goto LABEL_19;
  v23 = a2;
  v24 = 0;
LABEL_29:
  MEMORY[0x18D754BAC](v24, v8);
  v26 = type metadata accessor for IndexPath();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 0, 1, v26);
}

void type metadata accessor for _ContiguousArrayStorage<SectionAccumulator.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>);
  }
}

uint64_t outlined init with take of (offset: Int, element: SectionAccumulator.Item)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (offset: Int, element: SectionAccumulator.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: SectionAccumulator.Item));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (offset: Int, element: SectionAccumulator.Item)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: SectionAccumulator.Item))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: SectionAccumulator.Item));
  }
}

uint64_t assignWithCopy for ListSectionInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v4 = *(void **)(a2 + 48);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for ListSectionInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListSectionInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListSectionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListSectionInfo()
{
  return &type metadata for ListSectionInfo;
}

uint64_t ExternalDisplay.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ExternalDisplay.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  _OWORD v23[2];
  __n128 v24;
  __n128 v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(0x6C616E7265747845, 0xEF79616C70736944, 0, 0, 2, (uint64_t)&v19);
  v23[0] = v20;
  v23[1] = v21;
  v22 = v19;
  v26 = *((_QWORD *)&v21 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((__n128 *)((char *)v23 + 8), &v25);
  outlined init with take of SceneID(&v22, &v24);
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v6 = type metadata accessor for ResolvedUISceneAdaptor(0, v3, v4, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUISceneAdaptor<A>, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v12, v6, (uint64_t)&v15);
  outlined release of SceneID((uint64_t)&v24);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)&v25);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  v7 = v15;
  v8 = v16;
  v9 = v17;
  v10 = v18;
  v12 = v15;
  LOBYTE(v13) = v16;
  *((_QWORD *)&v13 + 1) = v17;
  v14 = v18;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v12, v6, a2);
  outlined consume of SceneID(v7.n128_i64[0], v7.n128_i64[1], v8);
  outlined consume of UISceneAdaptorConfiguration.Kind(v9, v10);
  return swift_release();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ExternalDisplay<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ExternalDisplay(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187703000 + 4 * byte_187C51CC0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ExternalDisplay(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ExternalDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExternalDisplay);
}

uint64_t static TableRowBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = type metadata accessor for _ConditionalContent.Storage();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v12 - v9, a1, a2, v8);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v10, a3);
}

uint64_t static TableRowBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = type metadata accessor for _ConditionalContent.Storage();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v12 - v9, a1, a2, v8);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v10, a3);
}

void static _ConditionalContent<>._makeRows(content:inputs:)(int *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = a2[7];
  v21 = a2[6];
  v22 = v11;
  v23 = a2[8];
  v24 = *((_QWORD *)a2 + 18);
  v12 = a2[3];
  v17 = a2[2];
  v18 = v12;
  v13 = a2[5];
  v19 = a2[4];
  v20 = v13;
  v14 = a2[1];
  v15 = *a2;
  v16 = v14;
  v36 = *((_QWORD *)&v23 + 1);
  LODWORD(v37) = v24;
  PreferencesInputs.makeIndirectOutputs()();
  v31 = v21;
  v32 = v22;
  v33 = v23;
  v27 = v17;
  v28 = v18;
  v29 = v19;
  v30 = v20;
  v25 = v15;
  v26 = v16;
  *(_QWORD *)&v34 = v24;
  *((_QWORD *)&v34 + 1) = v40;
  v35 = DWORD2(v40);
  LODWORD(v40) = v10;
  outlined retain of _TableRowInputs((uint64_t)&v15);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  v48 = v33;
  v49 = v34;
  v50 = v35;
  v44 = v29;
  v45 = v30;
  v46 = v31;
  v47 = v32;
  v40 = v25;
  v41 = v26;
  v42 = v27;
  v43 = v28;
  outlined retain of _ConditionalContent<A, B><>.TableRowProvider((uint64_t)&v25);
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a6;
  type metadata accessor for _ConditionalContent<>.TableRowProvider();
}

uint64_t sub_1877034E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 *v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[23];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ConditionalContent<A, B><>.TableRowProvider, a1);
  _ConditionalContent.Container.init(content:provider:)();
  v9 = v6[9];
  v28 = v6[8];
  v29 = v9;
  v30 = v6[10];
  v31 = v33[22];
  v10 = v6[5];
  v24 = v6[4];
  v25 = v10;
  v11 = v6[7];
  v26 = v6[6];
  v27 = v11;
  v12 = v6[1];
  v20 = *v6;
  v21 = v12;
  v13 = v6[3];
  v22 = v6[2];
  v23 = v13;
  v17[2] = type metadata accessor for _ConditionalContent.Info();
  *(_QWORD *)&v34 = v4;
  *((_QWORD *)&v34 + 1) = v2;
  *(_QWORD *)&v35 = a1;
  *((_QWORD *)&v35 + 1) = v8;
  v18 = type metadata accessor for _ConditionalContent.Container();
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BB8], v18);
  outlined retain of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>((uint64_t)v33);
  v14 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v20, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v17, v18, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  v42 = v28;
  v43 = v29;
  v44 = v30;
  v45 = v31;
  v38 = v24;
  v39 = v25;
  v40 = v26;
  v41 = v27;
  v34 = v20;
  v35 = v21;
  v36 = v22;
  v37 = v23;
  outlined release of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>((uint64_t)&v34);
  *(_QWORD *)&v20 = v3;
  DWORD2(v20) = v5;
  PreferencesOutputs.setIndirectDependency(_:)();
  outlined release of _ConditionalContent<A, B><>.TableRowProvider((uint64_t)&v32);
  result = outlined release of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>((uint64_t)v33);
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v5;
  return result;
}

uint64_t outlined retain of _ConditionalContent<A, B><>.TableRowProvider(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for _ConditionalContent<>.TableRowProvider()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t static _ConditionalContent<>._tableRowCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  unsigned __int8 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v8 = a1[7];
  v27 = a1[6];
  v28 = v8;
  v29 = a1[8];
  v30 = *((_QWORD *)a1 + 18);
  v9 = a1[3];
  v23 = a1[2];
  v24 = v9;
  v10 = a1[5];
  v25 = a1[4];
  v26 = v10;
  v11 = a1[1];
  v21 = *a1;
  v22 = v11;
  v12 = (*(uint64_t (**)(__int128 *))(a4 + 56))(&v21);
  if ((v13 & 1) == 0)
  {
    v14 = a1[7];
    v27 = a1[6];
    v28 = v14;
    v29 = a1[8];
    v30 = *((_QWORD *)a1 + 18);
    v15 = a1[3];
    v23 = a1[2];
    v24 = v15;
    v16 = a1[5];
    v25 = a1[4];
    v26 = v16;
    v17 = a1[1];
    v21 = *a1;
    v22 = v17;
    v18 = v12 != (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a5 + 56))(&v21, a3, a5);
    if (((v19 | v18) & 1) != 0)
      return 0;
  }
  return v12;
}

uint64_t static _ConditionalContent<>._containsOutlineSymbol(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v8 = a1[7];
  v24 = a1[6];
  v25 = v8;
  v26 = a1[8];
  v27 = *((_QWORD *)a1 + 18);
  v9 = a1[3];
  v20 = a1[2];
  v21 = v9;
  v10 = a1[5];
  v22 = a1[4];
  v23 = v10;
  v11 = a1[1];
  v18 = *a1;
  v19 = v11;
  if (((*(uint64_t (**)(__int128 *))(a4 + 64))(&v18) & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    v13 = a1[7];
    v24 = a1[6];
    v25 = v13;
    v26 = a1[8];
    v27 = *((_QWORD *)a1 + 18);
    v14 = a1[3];
    v20 = a1[2];
    v21 = v14;
    v15 = a1[5];
    v22 = a1[4];
    v23 = v15;
    v16 = a1[1];
    v18 = *a1;
    v19 = v16;
    v12 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a5 + 64))(&v18, a3, a5);
  }
  return v12 & 1;
}

void _ConditionalContent<>.TableRowProvider.detachOutputs()()
{
  PreferencesOutputs.detachIndirectOutputs()();
}

uint64_t _ConditionalContent<>.TableRowProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.TableRowProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  _BYTE v28[64];
  __int128 v29;
  uint64_t v30;

  v3 = v1[6];
  v4 = v1[8];
  *(_OWORD *)&v28[48] = v1[7];
  v29 = v4;
  v30 = *((_QWORD *)v1 + 18);
  v5 = v1[3];
  *(_OWORD *)&v26[16] = v1[2];
  v27 = v5;
  v6 = v1[5];
  *(_OWORD *)v28 = v1[4];
  *(_OWORD *)&v28[16] = v6;
  *(_OWORD *)&v28[32] = v3;
  v7 = v1[1];
  v25 = *v1;
  *(_OWORD *)v26 = v7;
  v8 = DWORD2(v25);
  v9 = v7;
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v26[8];
  v10 = v27;
  v11 = DWORD2(v27);
  v12 = *(_QWORD *)v28;
  v13 = v29;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v26[24];
  *(_QWORD *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v28[8];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v28[24];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v28[40];
  *(_QWORD *)(a1 + 120) = *(_QWORD *)&v28[56];
  *(_DWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)&v29 + 1);
  *(_QWORD *)(a1 + 144) = v30;
  swift_beginAccess();
  v14 = *(_DWORD *)(v9 + 16);
  v15 = *(_QWORD *)(v9 + 24);
  v23 = *(_OWORD *)(v9 + 48);
  v24 = *(_OWORD *)(v9 + 32);
  v16 = *(_QWORD *)(v9 + 64);
  v17 = *(_QWORD *)(v9 + 72);
  v18 = *(_BYTE *)(v9 + 80);
  v19 = *(_BYTE *)(v9 + 81);
  v20 = *(_QWORD *)(v9 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(_QWORD *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)(v21 + 48) = v23;
  *(_QWORD *)(v21 + 64) = v16;
  *(_QWORD *)(v21 + 72) = v17;
  *(_BYTE *)(v21 + 80) = v18;
  *(_BYTE *)(v21 + 81) = v19;
  *(_QWORD *)(v21 + 88) = v20;
  outlined retain of _TableRowInputs((uint64_t)&v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_release();
  *(_QWORD *)(a1 + 16) = v21;
  return result;
}

uint64_t _ConditionalContent<>.TableRowProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[9];
  uint64_t v11;
  _BYTE v12[4];

  v3 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v3;
  v10[8] = *(_OWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 144);
  v4 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v4;
  v5 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 32);
  _GraphValue.init(_:)();
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(v8 + 48))(v12, v10, v7, v8);
}

uint64_t _ConditionalContent<>.TableRowProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[9];
  uint64_t v11;
  _BYTE v12[4];

  v3 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v3;
  v10[8] = *(_OWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 144);
  v4 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v4;
  v5 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 40);
  _GraphValue.init(_:)();
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(v8 + 48))(v12, v10, v7, v8);
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.TableRowProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_OWORD *)(v1 + 112);
  v3 = *(_OWORD *)(v1 + 80);
  v19 = *(_OWORD *)(v1 + 96);
  v20 = v2;
  v4 = *(_OWORD *)(v1 + 112);
  v21 = *(_OWORD *)(v1 + 128);
  v5 = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 16);
  v15 = *(_OWORD *)(v1 + 32);
  v6 = v15;
  v16 = v5;
  v8 = *(_OWORD *)(v1 + 48);
  v9 = *(_OWORD *)(v1 + 80);
  v17 = *(_OWORD *)(v1 + 64);
  v10 = v17;
  v18 = v9;
  v11 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v12 = v14[0];
  v14[1] = v11;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v3;
  v22 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v1 + 144);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  return outlined retain of _TableRowInputs((uint64_t)v14);
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.TableRowProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 160);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> _ConditionalContent<A, B>(int *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  static _ConditionalContent<>._makeRows(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <> _ConditionalContent<A, B>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._tableRowCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> _ConditionalContent<A, B>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._containsOutlineSymbol(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t Optional<A>.ChildTableRow.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;

  v31 = a1;
  v33 = a4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32 = type metadata accessor for EmptyTableRowContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v13 = type metadata accessor for _ConditionalContent.Storage();
  v14 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, Value, v6);
  v35 = a2;
  v36 = a3;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.ChildTableRow.value.getter, (uint64_t)v34, MEMORY[0x1E0DEDCE8], v13, v24, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13) == 1)
  {
    v25 = swift_checkMetadataState();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v25);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, v13);
  }
  v26 = swift_checkMetadataState();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTableRowContent<A>, v26);
  return _ConditionalContent.init(__storage:)((uint64_t)v22, v33);
}

uint64_t closure #1 in Optional<A>.ChildTableRow.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for EmptyTableRowContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  type metadata accessor for _ConditionalContent.Storage();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance A?<A>.ChildTableRow@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for EmptyTableRowContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v5 = type metadata accessor for _ConditionalContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.ChildTableRow@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;

  return Optional<A>.ChildTableRow.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance A?<A>.ChildTableRow(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.ChildTableRow, a1);
  return static AsyncAttribute.flags.getter();
}

void static Optional<A>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17[9];
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v6 = *(_OWORD *)(a2 + 112);
  v26 = *(_OWORD *)(a2 + 96);
  v27 = v6;
  v28 = *(_OWORD *)(a2 + 128);
  v29 = *(_QWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 48);
  v22 = *(_OWORD *)(a2 + 32);
  v23 = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v24 = *(_OWORD *)(a2 + 64);
  v25 = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v20 = *(_OWORD *)a2;
  v21 = v9;
  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for EmptyTableRowContent(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  type metadata accessor for _ConditionalContent();
  v15 = type metadata accessor for Optional<A>.ChildTableRow(0, a3, a4, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.ChildTableRow, v15);
  _GraphValue.init<A>(_:)();
  v17[6] = v26;
  v17[7] = v27;
  v17[8] = v28;
  v18 = v29;
  v17[2] = v22;
  v17[3] = v23;
  v17[4] = v24;
  v17[5] = v25;
  v17[0] = v20;
  v17[1] = v21;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTableRowContent<A>, v13);
  static _ConditionalContent<>._makeRows(content:inputs:)(&v19, v17, a3, v13, a4, v16);
}

uint64_t static Optional<A>._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  (*(uint64_t (**)(_OWORD *))(a3 + 56))(v8);
  return 0;
}

uint64_t static Optional<A>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 64))(v8) & 1;
}

void protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static Optional<A>._makeRows(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static Optional<A>._tableRowCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  return 0;
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Optional<A>._containsOutlineSymbol(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t outlined retain of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 176);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined release of _ConditionalContent<A, B><>.TableRowProvider(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Optional<A>.ChildTableRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional<A>.ChildTableRow);
}

uint64_t destroy for _ConditionalContent<>.TableRowProvider()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ConditionalContent<>.TableRowProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent<>.TableRowProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy164_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for _ConditionalContent<>.TableRowProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent<>.TableRowProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 164))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ConditionalContent<>.TableRowProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 164) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 164) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in A?<A>.ChildTableRow()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in Optional<A>.ChildTableRow.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Optional<A>.ChildTableRow.value.getter(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41[32];
  uint64_t v42;

  v30 = a5;
  v31 = a8;
  v36 = a1;
  v37 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v38 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v34 = (char *)&v27 - v13;
  v39 = a4;
  MEMORY[0x1E0C80A78](v14, v15);
  v33 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = dispatch thunk of Collection.count.getter();
  if (!v21)
    return static Array._allocateUninitialized(_:)();
  v22 = v21;
  v28 = v17;
  v42 = Array.init()();
  v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  v39 = v20;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v24 = v34;
    while (1)
    {
      v25 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v24);
      v25(v41, 0);
      v26 = v40;
      v36(v24, v38);
      if (v26)
        break;
      v40 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
        return v42;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v38, v30);
  }
  return result;
}

uint64_t View.accessibilityInputLabels(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v5, a2, a3, MEMORY[0x1E0CE5740], a4);
}

{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v23;
  uint64_t v24;

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v21 = a2;
    v23 = a4;
    v24 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v24;
    v9 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = Text.init(_:tableName:bundle:comment:)();
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v24 = v7;
      v18 = *(_QWORD *)(v7 + 16);
      v17 = *(_QWORD *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1);
        v7 = v24;
      }
      *(_QWORD *)(v7 + 16) = v18 + 1;
      v19 = v7 + 32 * v18;
      *(_QWORD *)(v19 + 32) = v10;
      *(_QWORD *)(v19 + 40) = v12;
      *(_BYTE *)(v19 + 48) = v14 & 1;
      *(_QWORD *)(v19 + 56) = v16;
      v9 += 32;
      --v6;
    }
    while (v6);
    a4 = v23;
    v5 = a3;
    a2 = v21;
  }
  v24 = v7;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v24, a2 & 1, v5, MEMORY[0x1E0CE5740], a4);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityInputLabels<A>(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  uint64_t v14;

  v14 = a1;
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v9 = type metadata accessor for Array();
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v9);
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.typeSelectEquivalent<A>(_:), (uint64_t)v13, v9, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v14, a2, a3, MEMORY[0x1E0CE5740], a5);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v5, a2, a3, a4);
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v23;

  v4 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v20 = a2;
    v21 = a4;
    v23 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v23;
    v8 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = Text.init(_:tableName:bundle:comment:)();
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v23 = v6;
      v17 = *(_QWORD *)(v6 + 16);
      v16 = *(_QWORD *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        v6 = v23;
      }
      *(_QWORD *)(v6 + 16) = v17 + 1;
      v18 = v6 + 32 * v17;
      *(_QWORD *)(v18 + 32) = v9;
      *(_QWORD *)(v18 + 40) = v11;
      *(_BYTE *)(v18 + 48) = v13 & 1;
      *(_QWORD *)(v18 + 56) = v15;
      v8 += 32;
      --v5;
    }
    while (v5);
    v4 = a3;
    a4 = v21;
    a2 = v20;
  }
  v23 = v6;
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v23, a2 & 1, v4, a4);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  uint64_t v14;

  v14 = a1;
  v13[2] = *(_QWORD *)(a3 + 16);
  v13[3] = a4;
  v13[4] = a5;
  v9 = type metadata accessor for Array();
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v9);
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:), (uint64_t)v13, v9, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5740], (uint64_t)&v14, a2, a3, a6);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityInputLabels(_:isEnabled:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v11;

  v11 = a1;
  v9 = lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
  return TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v11, a2, a3, MEMORY[0x1E0CE5740], a4, MEMORY[0x1E0CE5730], v9, a5);
}

uint64_t TabContent.accessibilityInputLabels(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v28;
  uint64_t v29;

  v6 = a3;
  v7 = a2;
  v8 = a5;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v29 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v29;
    v12 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = Text.init(_:tableName:bundle:comment:)();
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v29 = v10;
      v21 = *(_QWORD *)(v10 + 16);
      v20 = *(_QWORD *)(v10 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
        v10 = v29;
      }
      *(_QWORD *)(v10 + 16) = v21 + 1;
      v22 = v10 + 32 * v21;
      *(_QWORD *)(v22 + 32) = v13;
      *(_QWORD *)(v22 + 40) = v15;
      *(_BYTE *)(v22 + 48) = v17 & 1;
      *(_QWORD *)(v22 + 56) = v19;
      v12 += 32;
      --v9;
    }
    while (v9);
    a4 = v28;
    v8 = a5;
    v6 = a3;
    v7 = a2;
  }
  v29 = v10;
  v23 = lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v29, v7 & 1, v6, MEMORY[0x1E0CE5740], a4, MEMORY[0x1E0CE5730], v23, v8);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[7];
  uint64_t v17;

  v17 = a1;
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v11 = type metadata accessor for Array();
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v11);
  v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:), (uint64_t)v16, v11, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  v14 = lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v17, a2, a3, MEMORY[0x1E0CE5740], a5, MEMORY[0x1E0CE5730], v14, a7);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type [Text]? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type [Text]? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type [Text]? and conformance <A> A?)
  {
    type metadata accessor for [Text]?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type [Text] and conformance [A]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Text]? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for [Text]?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Text]?)
  {
    type metadata accessor for [Text]();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Text]?);
  }
}

void type metadata accessor for [Text]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Text])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Text]);
  }
}

uint64_t sub_187705B3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>)
  {
    v2 = lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
    v3 = type metadata accessor for AccessibilityDetachedPropertyModifier(a1, MEMORY[0x1E0CE5740], MEMORY[0x1E0CE5730], v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>);
  }
}

uint64_t sub_187705BF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[2];
  type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>(255);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

uint64_t AsyncImage.init<>(url:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v5 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AsyncImage<Image>(0, v9, v10, v11);
  v13 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v29 - v21;
  outlined init with copy of SearchFieldConfiguration.Data?(a1, (uint64_t)&v29 - v21, (unint64_t *)&lazy cache variable for type metadata for URL?, v17, v18);
  v23 = type metadata accessor for URL();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v16, 1, 1, v23);
  v25 = (uint64_t)&v16[v13[12]];
  *(_QWORD *)v8 = 0;
  v24(&v8[*(int *)(v5 + 20)], 1, 1, v23);
  *(_QWORD *)&v8[*(int *)(v5 + 24)] = 0x8000000000000000;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, v25, type metadata accessor for LoadingState);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)(v25 + *(int *)(v26 + 28)) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for LoadingState);
  outlined assign with take of URL?((uint64_t)v22, (uint64_t)v16);
  *(double *)&v16[v13[9]] = a3;
  *(_QWORD *)&v16[v13[10]] = 0;
  v27 = &v16[v13[11]];
  *(_QWORD *)v27 = closure #1 in AsyncImage.init<>(url:scale:);
  *((_QWORD *)v27 + 1) = 0;
  outlined init with take of TableCellFormula((uint64_t)v16, v30, (uint64_t (*)(_QWORD))type metadata accessor for AsyncImage<Image>);
  return outlined destroy of Binding<AttributedString>(a1, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], v18);
}

uint64_t type metadata accessor for LoadingState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for LoadingState);
}

void type metadata accessor for AsyncImage<Image>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AsyncImage<Image>)
  {
    v4 = type metadata accessor for AsyncImage(0, MEMORY[0x1E0CE7298], MEMORY[0x1E0CE7238], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AsyncImage<Image>);
  }
}

uint64_t type metadata accessor for AsyncImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncImage);
}

uint64_t closure #1 in AsyncImage.init<>(url:scale:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*a1 >> 62)
    result = static Image.redacted.getter();
  else
    result = swift_retain();
  *a2 = result;
  return result;
}

uint64_t AsyncImagePhase.image.getter()
{
  _QWORD *v0;

  if (*v0 >> 62)
    return 0;
  else
    return swift_retain();
}

uint64_t AsyncImage.init(url:scale:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a4;
  v14 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for URL();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(a7, 1, 1, v18);
  v21 = (int *)type metadata accessor for AsyncImage(0, a5, a6, v20);
  v22 = a7 + v21[12];
  *v17 = 0;
  v19((uint64_t)v17 + *(int *)(v14 + 20), 1, 1, v18);
  *(_QWORD *)((char *)v17 + *(int *)(v14 + 24)) = 0x8000000000000000;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, v22, type metadata accessor for LoadingState);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)(v22 + *(int *)(v23 + 28)) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for LoadingState);
  result = outlined assign with take of URL?(a1, a7);
  *(double *)(a7 + v21[9]) = a8;
  *(_QWORD *)(a7 + v21[10]) = a2;
  v25 = (_QWORD *)(a7 + v21[11]);
  v26 = v28;
  *v25 = v27;
  v25[1] = v26;
  return result;
}

uint64_t AsyncImage.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v4 = v3;
  v68 = a3;
  v61 = *(_QWORD *)(a1 - 8);
  v62 = *(_QWORD *)(v61 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v66 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v58 = (uint64_t)&v55 - v9;
  v10 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 16);
  v17 = type metadata accessor for AsyncImage.Inner(255, v15, v14, v16);
  v59 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ValueActionModifier2<URL?>();
  v64 = type metadata accessor for ModifiedContent();
  v65 = type metadata accessor for ModifiedContent();
  v67 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v18);
  v57 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v63 = (char *)&v55 - v22;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v23 = *(_QWORD *)&v13[*(int *)(v10 + 24)];
  outlined copy of AsyncImagePhase(v23);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for LoadingState);
  v24 = (uint64_t *)(v3 + *(int *)(a1 + 44));
  v25 = *v24;
  v26 = v24[1];
  v76 = v23;
  v77 = v25;
  v78 = v26;
  v27 = v15;
  v56 = v15;
  v29 = implicit closure #1 in AsyncImage.body.getter(v3, v15, v14, v28);
  v31 = v30;
  v33 = implicit closure #3 in AsyncImage.body.getter(v4, v27, v14, v32);
  v72 = (unint64_t)v29;
  *(_QWORD *)&v73 = v31;
  *((_QWORD *)&v73 + 1) = v33;
  *(_QWORD *)&v74 = v34;
  swift_retain();
  v35 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsyncImage<A>.Inner, v17);
  MEMORY[0x18D75B4AC](&v79, &v72, v17, MEMORY[0x1E0CE5F08], v35);
  swift_release();
  swift_release();
  outlined consume of AsyncImagePhase(v23);
  swift_release();
  v72 = v79;
  v73 = v80;
  v74 = v81;
  v75 = v82;
  v36 = v58;
  v37 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of SearchFieldConfiguration.Data?(v4, v58, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v38 = v61;
  v39 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v4, a1);
  v40 = v38;
  v41 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v56;
  *(_QWORD *)(v42 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v42 + v41, v39, a1);
  v43 = MEMORY[0x1E0CE5EF8];
  v71[0] = v35;
  v71[1] = MEMORY[0x1E0CE5EF8];
  v44 = MEMORY[0x1E0CE2E70];
  v45 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v59, v71);
  lazy protocol witness table accessor for type URL? and conformance <A> A?();
  v46 = v57;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  outlined destroy of Binding<AttributedString>(v36, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], v37);
  v47 = v74;
  v48 = v75;
  outlined consume of AsyncImagePhase(v72);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v47);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v48);
  v49 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ValueActionModifier2<URL?> and conformance _ValueActionModifier2<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ValueActionModifier2<URL?>, MEMORY[0x1E0CE5300]);
  v70[0] = v45;
  v70[1] = v49;
  v69[0] = MEMORY[0x18D75FFDC](v44, v64, v70);
  v69[1] = v43;
  v50 = v65;
  v51 = MEMORY[0x18D75FFDC](v44, v65, v69);
  v52 = (uint64_t)v63;
  static ViewBuilder.buildExpression<A>(_:)(v46, v50, v51);
  v53 = *(void (**)(char *, uint64_t))(v67 + 8);
  v53(v46, v50);
  static ViewBuilder.buildBlock<A>(_:)(v52, v50, v68);
  return ((uint64_t (*)(uint64_t, uint64_t))v53)(v52, v50);
}

uint64_t type metadata accessor for AsyncImage.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncImage.Inner);
}

void type metadata accessor for _ValueActionModifier2<URL?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ValueActionModifier2<URL?>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type URL? and conformance <A> A?();
    v0 = type metadata accessor for _ValueActionModifier2();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ValueActionModifier2<URL?>);
  }
}

unint64_t lazy protocol witness table accessor for type URL? and conformance <A> A?()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = lazy protocol witness table cache variable for type URL? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type URL? and conformance <A> A?)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, v1, MEMORY[0x1E0CB0028]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE998], v3, &v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL? and conformance <A> A?);
  }
  return result;
}

unint64_t outlined copy of AsyncImagePhase(unint64_t result)
{
  if (result >> 62 == 1)
    return (unint64_t)(id)(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_retain();
  return result;
}

uint64_t (*implicit closure #1 in AsyncImage.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for AsyncImage(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #2 in implicit closure #1 in AsyncImage.body.getter;
}

uint64_t (*implicit closure #3 in AsyncImage.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for AsyncImage(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #4 in implicit closure #3 in AsyncImage.body.getter;
}

void outlined consume of AsyncImagePhase(unint64_t a1)
{
  if (a1 >> 62 == 1)
  {

  }
  else if (!(a1 >> 62))
  {
    swift_release();
  }
}

uint64_t AsyncImage.onDisappear()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (uint64_t *)((char *)&v18 - v10);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  v14 = v13;
  State.wrappedValue.getter();
  v15 = *v11;
  if (*v11)
  {
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for LoadingState);
    MEMORY[0x18D75D204](v15, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for LoadingState);
  }
  v16 = v2 + *(int *)(a1 + 48);
  State.wrappedValue.getter();
  swift_release();
  *v7 = 0;
  if (*(_QWORD *)(v16 + *(int *)(v14 + 28)))
    dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for LoadingState);
}

uint64_t partial apply for closure #1 in AsyncImage.body.getter(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  v7 = type metadata accessor for AsyncImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return AsyncImage.didChangeURL(oldValue:newValue:)(a1, a2, v7);
}

uint64_t AsyncImage.didChangeURL(oldValue:newValue:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;

  v93 = a2;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v86 = (char *)&v79 - v7;
  v80 = type metadata accessor for TaskConfig(0);
  v82 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80, v8);
  v83 = v9;
  v84 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v85 = (char *)&v79 - v12;
  v13 = type metadata accessor for URL();
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v90 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v88 = (char *)&v79 - v20;
  type metadata accessor for (URL?, URL?)();
  v22 = v21;
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, v14, v4);
  MEMORY[0x1E0C80A78](v26, v27);
  v89 = (uint64_t)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v87 = (uint64_t)&v79 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v79 - v34;
  v36 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v79 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, v40, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  v79 = v41;
  State.wrappedValue.getter();
  v42 = (uint64_t)&v39[*(int *)(v36 + 20)];
  v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v44 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of SearchFieldConfiguration.Data?(v42, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v45 = (uint64_t)v39;
  v46 = (uint64_t)v93;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, type metadata accessor for LoadingState);
  v47 = (uint64_t)&v25[*(int *)(v22 + 48)];
  v48 = v46;
  outlined init with copy of SearchFieldConfiguration.Data?(v46, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, v43, v44);
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v35, v47, (unint64_t *)&lazy cache variable for type metadata for URL?, v43, v44);
  v92 = v15;
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v49((uint64_t)v25, 1, v13) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v49(v47, 1, v13) == 1)
      return outlined destroy of Binding<AttributedString>((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  }
  else
  {
    v51 = v87;
    outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v25, v87, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v49(v47, 1, v13) != 1)
    {
      v52 = v92;
      v53 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v88, v47, v13);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, v43, MEMORY[0x1E0CB0028]);
      v54 = dispatch thunk of static Equatable.== infix(_:_:)();
      v55 = *(void (**)(char *, uint64_t))(v52 + 8);
      v55(v53, v13);
      v56 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      outlined destroy of Binding<AttributedString>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for URL?, v43, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v55((char *)v51, v13);
      v48 = (uint64_t)v93;
      result = outlined destroy of Binding<AttributedString>((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, v43, v56);
      if ((v54 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    outlined destroy of Binding<AttributedString>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v51, v13);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for (URL?, URL?));
LABEL_8:
  v57 = v89;
  outlined init with copy of SearchFieldConfiguration.Data?(v48, v89, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v49(v57, 1, v13) == 1)
  {
    outlined destroy of Binding<AttributedString>(v57, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return AsyncImage.resetLoadingState()();
  }
  else
  {
    v58 = v92;
    v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32);
    v59 = v90;
    v93(v90, v57, v13);
    v60 = v13;
    v61 = v91;
    v62 = v94;
    v63 = (uint64_t)v85;
    State.projectedValue.getter();
    v64 = *(_QWORD *)(v62 + *(int *)(v61 + 40));
    v65 = v80;
    *(_QWORD *)(v63 + *(int *)(v80 + 20)) = *(_QWORD *)(v62 + *(int *)(v61 + 36));
    *(_QWORD *)(v63 + *(int *)(v65 + 24)) = v64;
    swift_retain();
    v66 = (uint64_t)v86;
    static TaskPriority.userInitiated.getter();
    v67 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
    v68 = v88;
    v69 = v59;
    v70 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v88, v69, v60);
    v71 = v84;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, v84, type metadata accessor for TaskConfig);
    v72 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
    v73 = (v81 + *(unsigned __int8 *)(v82 + 80) + v72) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
    v74 = swift_allocObject();
    v75 = v74 + v72;
    *(_QWORD *)(v74 + 16) = 0;
    *(_QWORD *)(v74 + 24) = 0;
    v76 = v70;
    v93(v75, (uint64_t)v68, v70);
    outlined init with take of TableCellFormula(v71, v74 + v73, type metadata accessor for TaskConfig);
    v77 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v66, (uint64_t)&async function pointer to partial apply for closure #1 in AsyncImage.didChangeURL(oldValue:newValue:), v74);
    outlined destroy of Binding<AttributedString>(v66, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v78 = v90;
    AsyncImage.updateTask(_:url:)(v77, v90, v61);
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v63, type metadata accessor for TaskConfig);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v78, v76);
  }
}

uint64_t AsyncImage.resetLoadingState()()
{
  return withTransaction<A>(_:_:)();
}

uint64_t closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5[2] = a5;
  v5[3] = type metadata accessor for TaskResult(0);
  v5[4] = swift_task_alloc();
  v7 = swift_task_alloc();
  v5[5] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v5[6] = v8;
  *v8 = v5;
  v8[1] = closure #1 in AsyncImage.didChangeURL(oldValue:newValue:);
  return downloadURL(_:)(v7, a4);
}

uint64_t closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 64) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v1 = v0[5];
  v2 = v0[3];
  swift_release();
  v3 = *(void **)(v1 + *(int *)(v2 + 20));
  v4 = v0[5];
  v5 = v0[2];
  type metadata accessor for TaskConfig(0);
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v5;
  if (v3)
  {
    v6[3] = v3;
    v6[4] = v4;
    v7 = v3;
    withTransaction<A>(_:_:)();

  }
  else
  {
    v6[3] = v4;
    withTransaction<A>(_:_:)();
  }
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v0 + 40), type metadata accessor for TaskResult);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v1 = *(void **)(v0 + 56);
  v3 = *(int **)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = v3[5];
  *(_DWORD *)(v0 + 80) = v5;
  *(_QWORD *)(v2 + v5) = 0;
  *(_BYTE *)(v2 + v3[6]) = 8;
  *(_QWORD *)(v2 + v3[7]) = v1;
  type metadata accessor for MainActor();
  v6 = v1;
  *(_QWORD *)(v0 + 72) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v1 = *(int *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release();
  v3 = *(void **)(v2 + v1);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  type metadata accessor for TaskConfig(0);
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v5;
  if (v3)
  {
    v6[3] = v3;
    v6[4] = v4;
    v7 = v3;
    withTransaction<A>(_:_:)();

  }
  else
  {
    v6[3] = v4;
    withTransaction<A>(_:_:)();
  }
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v0 + 32), type metadata accessor for TaskResult);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t downloadURL(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t downloadURL(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 56) = objc_msgSend((id)objc_opt_self(), sel_sharedSession);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = downloadURL(_:);
  return NSURLSession.download(from:delegate:)();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t downloadURL(_:)(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v5 = *(void **)(v4 + 56);

  }
  return swift_task_switch();
}

uint64_t downloadURL(_:)@<X0>(NSURL *a1@<X8>)
{
  _QWORD *v1;
  const __CFURL *v2;
  const __CFURL *v3;
  CGImageSource *v4;
  CGImageSource *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGImageRef ImageAtIndex;
  char v11;
  int *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  URL._bridgeToObjectiveC()(a1);
  v3 = v2;
  v4 = CGImageSourceCreateWithURL(v2, 0);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  if ((uint64_t)CGImageSourceGetCount(v4) < 1)
  {

LABEL_5:
    v15 = v1[5];
    v14 = v1[6];
    v16 = v1[4];
    lazy protocol witness table accessor for type LoadingError and conformance LoadingError();
    swift_allocError();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc();
    v13 = (uint64_t (*)(void))v1[1];
    return v13();
  }
  v7 = v1[5];
  v6 = v1[6];
  v8 = v1[4];
  v9 = v1[2];
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, 0);
  v11 = CGImageSourceRef.orientation(at:)(0);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v6, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v8);
  v12 = (int *)type metadata accessor for TaskResult(0);
  *(_QWORD *)(v9 + v12[5]) = ImageAtIndex;
  *(_BYTE *)(v9 + v12[6]) = v11;
  *(_QWORD *)(v9 + v12[7]) = 0;
  swift_task_dealloc();
  v13 = (uint64_t (*)(void))v1[1];
  return v13();
}

uint64_t AsyncImage.updateTask(_:url:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v33 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v32 - v10;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v32 - v14;
  v32 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v32, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (uint64_t *)((char *)&v32 - v21);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (uint64_t *)((char *)&v32 - v25);
  State.wrappedValue.getter();
  v27 = *v26;
  if (*v26)
  {
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for LoadingState);
    MEMORY[0x18D75D204](v27, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for LoadingState);
  }
  v28 = v4 + *(int *)(a3 + 48);
  State.wrappedValue.getter();
  *v22 = a1;
  swift_retain();
  swift_release();
  if (*(_QWORD *)(v28 + *(int *)(v8 + 28)))
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for LoadingState);
  v29 = type metadata accessor for URL();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v15, v33, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  outlined init with copy of SearchFieldConfiguration.Data?(v28, (uint64_t)v11, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  outlined assign with take of URL?((uint64_t)v15, (uint64_t)&v18[*(int *)(v32 + 20)]);
  if (*(_QWORD *)&v11[*(int *)(v8 + 28)])
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for LoadingState);
  return outlined destroy of Binding<AttributedString>((uint64_t)v11, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
}

uint64_t closure #1 in AsyncImage.resetLoadingState()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - v9;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v39 = (char *)&v39 - v13;
  v40 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v40, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v39 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char **)((char *)&v39 - v23);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (uint64_t *)((char *)&v39 - v27);
  v30 = type metadata accessor for AsyncImage(0, a2, a3, v29);
  v31 = a1;
  State.wrappedValue.getter();
  v32 = *v28;
  if (*v28)
  {
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, type metadata accessor for LoadingState);
    MEMORY[0x18D75D204](v32, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, type metadata accessor for LoadingState);
  }
  v33 = v31 + *(int *)(v30 + 48);
  State.wrappedValue.getter();
  swift_release();
  *v24 = 0;
  v34 = *(int *)(v7 + 28);
  if (*(_QWORD *)(v33 + v34))
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for LoadingState);
  v35 = type metadata accessor for URL();
  v36 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v39, 1, 1, v35);
  outlined init with copy of SearchFieldConfiguration.Data?(v33, (uint64_t)v10, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  outlined assign with take of URL?(v36, (uint64_t)&v20[*(int *)(v40 + 20)]);
  if (*(_QWORD *)&v10[*(int *)(v7 + 28)])
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for LoadingState);
  outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v37 = *(int *)(v40 + 24);
  outlined consume of AsyncImagePhase(*(_QWORD *)&v16[v37]);
  *(_QWORD *)&v16[v37] = 0x8000000000000000;
  if (*(_QWORD *)(v33 + v34))
    dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for LoadingState);
}

uint64_t AsyncImage.Inner.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(unint64_t *);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;

  v18 = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v4 = type metadata accessor for _UnaryViewAdaptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v18 - v11;
  v14 = *v3;
  v13 = (void (*)(unint64_t *))v3[1];
  v19 = v14;
  outlined copy of AsyncImagePhase(v14);
  v13(&v19);
  outlined consume of AsyncImagePhase(v14);
  _UnaryViewAdaptor.init(_:)();
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v4);
  static ViewBuilder.buildExpression<A>(_:)(v8, v4, v15);
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v12, v4, v18);
  return ((uint64_t (*)(char *, uint64_t))v16)(v12, v4);
}

uint64_t AsyncImagePhase.error.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *v0;
  if ((unint64_t)*v0 >> 62 != 1)
    return 0;
  v2 = v1 & 0x3FFFFFFFFFFFFFFFLL;
  v3 = (id)(v1 & 0x3FFFFFFFFFFFFFFFLL);
  return v2;
}

uint64_t associated type witness table accessor for View.Body : View in AsyncImage<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for AsyncImage()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncImage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int (*v29)(uint64_t *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    v29 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    v28 = v8;
    if (v29(a2, 1, v7))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    v12 = a3[11];
    v13 = a3[12];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (char *)a1 + v13;
    v18 = (char *)a2 + v13;
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    v19 = type metadata accessor for LoadingState(0);
    v20 = *(int *)(v19 + 20);
    v21 = &v17[v20];
    v22 = &v18[v20];
    swift_retain();
    swift_retain();
    swift_retain();
    if (v29((uint64_t *)v22, 1, v7))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v21, v22, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v21, 0, 1, v7);
    }
    v24 = *(int *)(v19 + 24);
    v25 = *(_QWORD *)&v18[v24];
    outlined copy of AsyncImagePhase(v25);
    *(_QWORD *)&v17[v24] = v25;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
    *(_QWORD *)&v17[*(int *)(v26 + 28)] = *(_QWORD *)&v18[*(int *)(v26 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_release();
  swift_release();
  v7 = a1 + *(int *)(a2 + 48);
  swift_release();
  v8 = type metadata accessor for LoadingState(0);
  v9 = v7 + *(int *)(v8 + 20);
  if (!v6(v9, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  outlined consume of AsyncImagePhase(*(_QWORD *)(v7 + *(int *)(v8 + 24)));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  return swift_release();
}

char *initializeWithCopy for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v26 = v7;
  if (v27(a2, 1, v6))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[11];
  v11 = a3[12];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v17 = type metadata accessor for LoadingState(0);
  v18 = *(int *)(v17 + 20);
  v19 = &v15[v18];
  v20 = &v16[v18];
  swift_retain();
  swift_retain();
  swift_retain();
  if (v27(v20, 1, v6))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v19, 0, 1, v6);
  }
  v22 = *(int *)(v17 + 24);
  v23 = *(_QWORD *)&v16[v22];
  outlined copy of AsyncImagePhase(v23);
  *(_QWORD *)&v15[v22] = v23;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)&v15[*(int *)(v24 + 28)] = *(_QWORD *)&v16[*(int *)(v24 + 28)];
  swift_retain();
  return a1;
}

char *assignWithCopy for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_retain();
  swift_release();
  v12 = a3[11];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  swift_retain();
  swift_release();
  v16 = a3[12];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  swift_retain();
  swift_release();
  v19 = type metadata accessor for LoadingState(0);
  v20 = *(int *)(v19 + 20);
  v21 = &v17[v20];
  v22 = &v18[v20];
  v23 = v8(&v17[v20], 1, v6);
  v24 = v8(v22, 1, v6);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v21, v22, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v21, v22, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v6);
LABEL_13:
  v26 = *(int *)(v19 + 24);
  v27 = *(_QWORD *)&v18[v26];
  outlined copy of AsyncImagePhase(v27);
  v28 = *(_QWORD *)&v17[v26];
  *(_QWORD *)&v17[v26] = v27;
  outlined consume of AsyncImagePhase(v28);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)&v17[*(int *)(v29 + 28)] = *(_QWORD *)&v18[*(int *)(v29 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v14 = type metadata accessor for LoadingState(0);
  v15 = *(int *)(v14 + 20);
  v16 = &v12[v15];
  v17 = &v13[v15];
  if (v8(&v13[v15], 1, v6))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  }
  *(_QWORD *)&v12[*(int *)(v14 + 24)] = *(_QWORD *)&v13[*(int *)(v14 + 24)];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)&v12[*(int *)(v19 + 28)] = *(_QWORD *)&v13[*(int *)(v19 + 28)];
  return a1;
}

char *assignWithTake for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release();
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  swift_release();
  v13 = a3[12];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  swift_release();
  v16 = type metadata accessor for LoadingState(0);
  v17 = *(int *)(v16 + 20);
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = v8(&v14[v17], 1, v6);
  v21 = v8(v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v18, v19, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v18, v19, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
LABEL_13:
  v23 = *(int *)(v16 + 24);
  v24 = *(_QWORD *)&v14[v23];
  *(_QWORD *)&v14[v23] = *(_QWORD *)&v15[v23];
  outlined consume of AsyncImagePhase(v24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)&v14[*(int *)(v25 + 28)] = *(_QWORD *)&v15[*(int *)(v25 + 28)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncImage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187708F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 48);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncImage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18770901C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
      return;
    }
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 48);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

unint64_t *initializeBufferWithCopyOfBuffer for AsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  *a1 = v3;
  return a1;
}

void destroy for AsyncImagePhase(unint64_t *a1)
{
  outlined consume of AsyncImagePhase(*a1);
}

unint64_t *assignWithCopy for AsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of AsyncImagePhase(v4);
  return a1;
}

unint64_t *assignWithTake for AsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of AsyncImagePhase(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncImagePhase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AsyncImagePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for AsyncImagePhase(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

unint64_t *destructiveInjectEnumTag for AsyncImagePhase(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for AsyncImagePhase()
{
  return &type metadata for AsyncImagePhase;
}

uint64_t sub_187709294(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = type metadata accessor for AsyncImage.Inner(255, *a1, a1[1], a4);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ValueActionModifier2<URL?>();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsyncImage<A>.Inner, v4);
  v9 = MEMORY[0x1E0CE5EF8];
  v14[0] = v8;
  v14[1] = MEMORY[0x1E0CE5EF8];
  v10 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v14);
  v13[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ValueActionModifier2<URL?> and conformance _ValueActionModifier2<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ValueActionModifier2<URL?>, MEMORY[0x1E0CE5300]);
  v12[0] = MEMORY[0x18D75FFDC](v10, v6, v13);
  v12[1] = v9;
  return MEMORY[0x18D75FFDC](v10, v7, v12);
}

uint64_t destroy for AsyncImage.Inner(unint64_t *a1)
{
  outlined consume of AsyncImagePhase(*a1);
  return swift_release();
}

unint64_t *initializeBufferWithCopyOfBuffer for AsyncImage.Inner(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  v6 = a2[1];
  v5 = a2[2];
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  swift_retain();
  return a1;
}

unint64_t *assignWithCopy for AsyncImage.Inner(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  v5 = *a1;
  *a1 = v4;
  outlined consume of AsyncImagePhase(v5);
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AsyncImage.Inner(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  outlined consume of AsyncImagePhase(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for LoadingState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = *(int *)(a3 + 24);
    v16 = *(uint64_t *)((char *)a2 + v15);
    outlined copy of AsyncImagePhase(v16);
    *(uint64_t *)((char *)v7 + v15) = v16;
  }
  return v7;
}

void destroy for LoadingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined consume of AsyncImagePhase(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

_QWORD *initializeWithCopy for LoadingState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = *(_QWORD *)((char *)a2 + v13);
  outlined copy of AsyncImagePhase(v14);
  *(_QWORD *)((char *)a1 + v13) = v14;
  return a1;
}

_QWORD *assignWithCopy for LoadingState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = *(_QWORD *)((char *)a2 + v15);
  outlined copy of AsyncImagePhase(v16);
  v17 = *(_QWORD *)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  outlined consume of AsyncImagePhase(v17);
  return a1;
}

_QWORD *initializeWithTake for LoadingState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for LoadingState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = *(_QWORD *)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  outlined consume of AsyncImagePhase(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadingState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187709AFC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for LoadingState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_187709BA8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for LoadingState()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in AsyncImage<A>.Inner()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for TaskConfig(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TaskConfig);
}

void type metadata accessor for (URL?, URL?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (URL?, URL?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (URL?, URL?));
  }
}

uint64_t sub_187709D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v12)(unint64_t, uint64_t);

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for TaskConfig(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  v12 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v12(v0 + v3, v1);
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = v0 + v6 + *(int *)(v7 + 32);
  swift_release();
  v9 = type metadata accessor for LoadingState(0);
  v10 = v8 + *(int *)(v9 + 20);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1))
    v12(v10, v1);
  outlined consume of AsyncImagePhase(*(_QWORD *)(v8 + *(int *)(v9 + 24)));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TaskConfig(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)(a1, v9, v10, v11, v12);
}

uint64_t type metadata accessor for TaskResult(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TaskResult);
}

uint64_t CGImageSourceRef.orientation(at:)(size_t index)
{
  CGImageSource *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  void *Value;
  id v5;

  v2 = CGImageSourceCopyPropertiesAtIndex(v1, index, 0);
  if (!v2)
    return 8;
  v3 = v2;
  Value = (void *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0CBCFF0]);

  if (!Value)
    return 8;
  v5 = Value;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)();

  return 8;
}

uint64_t closure #1 in updateTaskResult(_:config:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TaskConfig(0);
  type metadata accessor for TaskResult(0);
  v7 = a2;
  v8 = Image.init(decorative:scale:orientation:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v9 = *(int *)(v3 + 24);
  outlined consume of AsyncImagePhase(*(_QWORD *)&v6[v9]);
  *(_QWORD *)&v6[v9] = v8;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for LoadingState);
}

uint64_t closure #3 in updateTaskResult(_:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v3 = type metadata accessor for LoadingState(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(a2 + *(int *)(type metadata accessor for TaskResult(0) + 28));
  v8 = (uint64_t)v7;
  if (!v7)
  {
    lazy protocol witness table accessor for type LoadingError and conformance LoadingError();
    v8 = swift_allocError();
  }
  v9 = v8 | 0x4000000000000000;
  v10 = v7;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v11 = *(int *)(v3 + 24);
  outlined consume of AsyncImagePhase(*(_QWORD *)&v6[v11]);
  *(_QWORD *)&v6[v11] = v9;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for LoadingState);
}

uint64_t partial apply for closure #3 in updateTaskResult(_:config:)()
{
  uint64_t v0;

  return closure #3 in updateTaskResult(_:config:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in updateTaskResult(_:config:)()
{
  uint64_t v0;

  return closure #1 in updateTaskResult(_:config:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type LoadingError and conformance LoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LoadingError and conformance LoadingError;
  if (!lazy protocol witness table cache variable for type LoadingError and conformance LoadingError)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LoadingError, &unk_1E1AB2748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadingError and conformance LoadingError);
  }
  return result;
}

uint64_t partial apply for closure #1 in AsyncImage.resetLoadingState()()
{
  uint64_t *v0;

  return closure #1 in AsyncImage.resetLoadingState()(v0[4], v0[2], v0[3]);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AsyncImage.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for AsyncImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return AsyncImage.onDisappear()(v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AsyncImage.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for AsyncImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return AsyncImage.didChangeURL(oldValue:newValue:)(v4 + ((v6 + 32) & ~v6), (void (*)(uint64_t, uint64_t, uint64_t))(v4 + ((v6 + 32) & ~v6)), v5);
}

void *type metadata accessor for LoadingError()
{
  return &unk_1E1AB2748;
}

uint64_t *initializeBufferWithCopyOfBuffer for TaskResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v14 = a3[7];
    v15 = *(void **)((char *)a2 + v14);
    v16 = v13;
    v17 = v15;
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
  }
  return a1;
}

void destroy for TaskResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);

}

char *initializeWithCopy for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = *(void **)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  a1[v10] = a2[v10];
  v12 = a3[7];
  v13 = *(void **)&a2[v12];
  v14 = v11;
  v15 = v13;
  *(_QWORD *)&a1[v12] = v13;
  return a1;
}

char *assignWithCopy for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = v14;

  a1[a3[6]] = a2[a3[6]];
  v16 = a3[7];
  v17 = *(void **)&a1[v16];
  v18 = *(void **)&a2[v16];
  v19 = v18;
  *(_QWORD *)&a1[v16] = v18;

  return a1;
}

char *initializeWithTake for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  return a1;
}

uint64_t getEnumTagSinglePayload for TaskResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18770A9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18770AA70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
}

void type metadata completion function for TaskResult()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for TaskConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *__dst;
  uint64_t v24;
  char *v25;
  char *v26;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    *(uint64_t *)((char *)v7 + v9) = *(uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for LoadingState(0);
    v13 = *(int *)(v12 + 20);
    v25 = v11;
    v26 = v10;
    __dst = &v10[v13];
    v24 = v12;
    v14 = &v11[v13];
    v15 = type metadata accessor for URL();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v17(v14, 1, v15))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v19 = *(int *)(v24 + 24);
    v20 = *(_QWORD *)&v25[v19];
    outlined copy of AsyncImagePhase(v20);
    *(_QWORD *)&v26[v19] = v20;
    v21 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)v7 + v21) = *(uint64_t *)((char *)a2 + v21);
  }
  swift_retain();
  return v7;
}

uint64_t destroy for TaskConfig(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = a1 + *(int *)(v2 + 32);
  swift_release();
  v4 = type metadata accessor for LoadingState(0);
  v5 = v3 + *(int *)(v4 + 20);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  outlined consume of AsyncImagePhase(*(_QWORD *)(v3 + *(int *)(v4 + 24)));
  return swift_release();
}

_QWORD *initializeWithCopy for TaskConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *__dst;
  uint64_t v21;
  char *v22;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  v21 = type metadata accessor for LoadingState(0);
  v22 = v8;
  v10 = *(int *)(v21 + 20);
  __dst = &v8[v10];
  v11 = &v9[v10];
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v14(v11, 1, v12))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v16 = *(int *)(v21 + 24);
  v17 = *(_QWORD *)&v9[v16];
  outlined copy of AsyncImagePhase(v17);
  *(_QWORD *)&v22[v16] = v17;
  v18 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TaskConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  swift_retain();
  swift_release();
  v22 = type metadata accessor for LoadingState(0);
  v9 = *(int *)(v22 + 20);
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = *(int *)(v22 + 24);
  v19 = *(_QWORD *)&v8[v18];
  outlined copy of AsyncImagePhase(v19);
  v20 = *(_QWORD *)&v7[v18];
  *(_QWORD *)&v7[v18] = v19;
  outlined consume of AsyncImagePhase(v20);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for TaskConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for LoadingState(0);
  v12 = *(int *)(v11 + 20);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_QWORD *)&v9[*(int *)(v11 + 24)] = *(_QWORD *)&v10[*(int *)(v11 + 24)];
  v18 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  return a1;
}

_QWORD *assignWithTake for TaskConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  swift_release();
  v22 = type metadata accessor for LoadingState(0);
  v9 = *(int *)(v22 + 20);
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = *(int *)(v22 + 24);
  v19 = *(_QWORD *)&v7[v18];
  *(_QWORD *)&v7[v18] = *(_QWORD *)&v8[v18];
  outlined consume of AsyncImagePhase(v19);
  v20 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18770B4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18770B568(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
}

void type metadata completion function for TaskConfig()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_18770B690()
{
  type metadata accessor for _UnaryViewAdaptor();
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t closure #3 in updateTaskResult(_:config:)partial apply()
{
  return partial apply for closure #3 in updateTaskResult(_:config:)();
}

uint64_t closure #1 in updateTaskResult(_:config:)partial apply()
{
  return partial apply for closure #1 in updateTaskResult(_:config:)();
}

uint64_t EnvironmentValues.feedbackCache.getter()
{
  uint64_t v0;
  uint64_t Strong;
  _BYTE v3[8];

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  Strong = swift_weakLoadStrong();
  outlined destroy of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)v3);
  return Strong;
}

void AnyUIKitSensoryFeedbackCache.implementation(type:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  char isUniquelyReferenced_nonNull_native;
  id result;
  void *v18;
  uint64_t v19;

  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_endAccess();
      v12 = (id)swift_dynamicCastUnknownClassUnconditional();
      v13 = v11;
      return v12;
    }
  }
  v14 = swift_endAccess();
  v15 = (void *)a4(v14);
  swift_beginAccess();
  v12 = v15;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 24) = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  result = (id)MEMORY[0x18D760234](a1 + 16);
  if (result)
  {
    v18 = result;
    objc_msgSend(result, sel_addInteraction_, v12);

    return v12;
  }
  __break(1u);
  return result;
}

void UIKitSensoryFeedbackCache.implementation(type:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id (*v9)();
  uint64_t v10;
  uint64_t v11;
  id v12;
  double v14;

  if (!(a1 >> 62))
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v14 = *(double *)&a2;
    MEMORY[0x1E0C80A78](v10, v11);
    *(_QWORD *)(a3 + 24) = &type metadata for ImpactFeedbackImplementation;
    *(_QWORD *)(a3 + 32) = &protocol witness table for ImpactFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFeedbackGenerator);
    v9 = partial apply for closure #12 in UIKitSensoryFeedbackCache.implementation(type:);
    goto LABEL_5;
  }
  if (a1 >> 62 == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v14 = *(double *)&a2;
    MEMORY[0x1E0C80A78](v7, v8);
    *(_QWORD *)(a3 + 24) = &type metadata for ImpactFeedbackImplementation;
    *(_QWORD *)(a3 + 32) = &protocol witness table for ImpactFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFeedbackGenerator);
    v9 = partial apply for closure #14 in UIKitSensoryFeedbackCache.implementation(type:);
LABEL_5:
    v12 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))v9);
    closure #11 in UIKitSensoryFeedbackCache.implementation(type:)(v12, a3, v14);

    return;
  }
  if ((__int128)__PAIR128__(1, 0x8000000000000001) < (__int128)__PAIR128__(a2, a1))
  {
    if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a2, a1))
    {
      if (a2 != 1 || a1 != 0x8000000000000002)
        goto LABEL_12;
    }
    else if (__PAIR128__((unint64_t)__CFADD__(a1, 0x8000000000000000) + a2 - 3, a1 + 0x8000000000000000) < 2)
    {
LABEL_12:
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }
    *(_QWORD *)(a3 + 24) = &type metadata for CanvasFeedbackImplementation;
    *(_QWORD *)(a3 + 32) = &protocol witness table for CanvasFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICanvasFeedbackGenerator);
    *(_QWORD *)a3 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))closure #10 in UIKitSensoryFeedbackCache.implementation(type:));
    *(_QWORD *)(a3 + 8) = a1;
    *(_QWORD *)(a3 + 16) = a2;
    return;
  }
  if (a1 + 0x8000000000000000 <= 3)
    __asm { BR              X10 }
  *(_QWORD *)(a3 + 24) = &type metadata for SelectionFeedbackImplementation;
  *(_QWORD *)(a3 + 32) = &protocol witness table for SelectionFeedbackImplementation;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISelectionFeedbackGenerator);
  *(_QWORD *)a3 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, 0x8000000000000001, 1, (uint64_t (*)(uint64_t))closure #8 in UIKitSensoryFeedbackCache.implementation(type:));
}

void sub_18770BCBC()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0[3] = &type metadata for NotificationFeedbackImplementation;
  v0[4] = &protocol witness table for NotificationFeedbackImplementation;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINotificationFeedbackGenerator);
  *v0 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v1, v3, v2, (uint64_t (*)(uint64_t))closure #4 in UIKitSensoryFeedbackCache.implementation(type:));
  v0[1] = (id)1;
  JUMPOUT(0x18770BADCLL);
}

id closure #2 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A58]), sel_init);
}

id closure #12 in UIKitSensoryFeedbackCache.implementation(type:)(unsigned __int8 a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3898]), sel_initWithStyle_, a1);
}

id closure #11 in UIKitSensoryFeedbackCache.implementation(type:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  objc_opt_self();
  *(_QWORD *)a2 = swift_dynamicCastObjCClassUnconditional();
  *(double *)(a2 + 8) = a3;
  return a1;
}

id closure #14 in UIKitSensoryFeedbackCache.implementation(type:)(char a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3898]), sel_initWithStyle_, qword_187C52178[a1]);
}

id closure #8 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C60]), sel_init);
}

id closure #10 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3540]), sel_init);
}

uint64_t UIKitSensoryFeedbackCache.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FeedbackCacheKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FeedbackCacheKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

id partial apply for closure #14 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  uint64_t v0;

  return closure #14 in UIKitSensoryFeedbackCache.implementation(type:)(*(_BYTE *)(v0 + 16));
}

id partial apply for closure #12 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  uint64_t v0;

  return closure #12 in UIKitSensoryFeedbackCache.implementation(type:)(*(_BYTE *)(v0 + 16));
}

uint64_t specialized EnvironmentValues.feedbackCache.setter()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[8];

  swift_weakInit();
  swift_weakAssign();
  outlined init with take of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)&v2, (uint64_t)v3);
  outlined init with copy of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)v3, (uint64_t)&v2);
  type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)v3);
}

uint64_t outlined init with copy of WeakBox<AnyUIKitSensoryFeedbackCache>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for FeedbackCacheKey()
{
  return &unk_1E1ABEE98;
}

uint64_t type metadata completion function for NavigationStackReader()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStackReader(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, unint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((((v6 + 32) & ~v6) + v7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v12 = *a2;
    v11 = (unint64_t)a2 + 15;
    *a1 = v12;
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
    v13[1] = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
    v13[2] = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    v14 = ((unint64_t)v13 + v6 + 24) & ~v6;
    v15 = ((v11 & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & ~v6;
    v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
    *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 + v7);
    v17 = (v14 + v7) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v15 + v7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
    v19 = (_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for NavigationStackReader(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v3
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)
                                                                                            + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for NavigationStackReader(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v6[1] = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  v6[2] = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 24) & ~v9;
  v11 = (v9 + 24 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v10 + v13;
  v15 = v11 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  v16 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for NavigationStackReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_retain();
  swift_release();
  v5[1] = v6[1];
  swift_retain();
  swift_release();
  v5[2] = v6[2];
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 24) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 24) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v9 + v11;
  v13 = v10 + v11;
  *(_BYTE *)v12 = *(_BYTE *)v13;
  v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  v16 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for NavigationStackReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v4 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24 + v4) & ~v8;
  v10 = (v8 + 24 + v5) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v9 + v11;
  v13 = v10 + v11;
  *(_BYTE *)v12 = *(_BYTE *)v13;
  v12 &= 0xFFFFFFFFFFFFFFF8;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_OWORD *)((v12 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v13 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for NavigationStackReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_release();
  v5[1] = v6[1];
  swift_release();
  v5[2] = v6[2];
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 24) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 24) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v9 + v11;
  v13 = v10 + v11;
  *(_BYTE *)v12 = *(_BYTE *)v13;
  v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(_OWORD *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v15 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackReader(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v12 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v12 + v7 + 24) & ~v7);
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
  }
  else
  {
    if (((((((((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18770C7A0 + 4 * byte_187C52190[v10]))();
  }
}

void storeEnumTagSinglePayload for NavigationStackReader(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((((((_DWORD)v7 + 32) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if ((((((((_DWORD)v7 + 32) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((v7 + 32) & ~v7) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18770C934()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18770C9ACLL);
}

void sub_18770C93C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18770C944);
  JUMPOUT(0x18770C9ACLL);
}

void sub_18770C960()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18770C9ACLL);
}

void sub_18770C968()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18770C9ACLL);
}

void sub_18770C970(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x18770C97CLL);
    if (a2 < 0)
      JUMPOUT(0x18770C9A0);
    *(_QWORD *)(((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
  }
  JUMPOUT(0x18770C9ACLL);
}

void type metadata accessor for NavigationStackReader()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for View in NavigationStackReader<A, B>()
{
  return &protocol witness table for NavigationStackReader<A, B>;
}

uint64_t key path getter for NavigationStateHost.seedHost : NavigationStateHost@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  return swift_retain();
}

uint64_t key path setter for NavigationStateHost.seedHost : NavigationStateHost(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 184) = *a1;
  swift_retain();
  return swift_release();
}

void NavigationStackReader.init(namespace:path:root:hasImplicitState:stateHost:transform:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_18770CA74(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v10;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5 + a1[14], v4, v6);
  *(_BYTE *)(v5 + a1[15]) = v3;
  *(_QWORD *)(v5 + a1[16]) = v2;
  v10 = (_QWORD *)(v5 + a1[17]);
  *v10 = v1;
  v10[1] = v7;
  return result;
}

void static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

void sub_18770CBAC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;

  type metadata accessor for _GraphValue();
  v7 = MEMORY[0x1E0CE1470];
  v8 = MEMORY[0x1E0CE7DD0];
  _GraphValue.subscript.getter();
  v9 = v8;
  v10 = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v9, (uint64_t (*)(_QWORD, uint64_t))v7);
  *(_DWORD *)(v0 + 152) = _GraphValue.value.getter();
  *(_QWORD *)(v0 + 560) = v4;
  *(_QWORD *)(v0 + 568) = v1;
  *(_QWORD *)(v0 + 576) = v5;
  *(_QWORD *)(v0 + 584) = v3;
  *(_DWORD *)(v6 - 216) = v2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<AnyNavigationPath>>();
  *(_DWORD *)(v0 + 120) = _GraphValue.value.getter();
  *(_QWORD *)(v0 + 512) = v4;
  *(_QWORD *)(v0 + 520) = v1;
  *(_QWORD *)(v0 + 528) = v5;
  *(_QWORD *)(v0 + 536) = v3;
  *(_DWORD *)(v6 - 216) = v2;
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  *(_DWORD *)(v0 + 140) = _GraphValue.value.getter();
  *(_QWORD *)(v0 + 464) = v4;
  *(_QWORD *)(v0 + 472) = v1;
  *(_QWORD *)(v0 + 480) = v5;
  *(_QWORD *)(v0 + 488) = v3;
  *(_DWORD *)(v6 - 216) = v2;
  v11 = MEMORY[0x1E0DEAFA0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v11, (uint64_t (*)(_QWORD, uint64_t))v10);
  *(_DWORD *)(v0 + 72) = _GraphValue.value.getter();
  *(_QWORD *)(v0 + 416) = v4;
  *(_QWORD *)(v0 + 424) = v1;
  *(_QWORD *)(v0 + 432) = v5;
  *(_QWORD *)(v0 + 440) = v3;
  *(_DWORD *)(v6 - 216) = v2;
  type metadata accessor for NavigationStateHost();
  _GraphValue.subscript.getter();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationStateHost>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationStateHost, (uint64_t (*)(uint64_t, uint64_t))v10);
  *(_DWORD *)(v0 + 136) = _GraphValue.value.getter();
  *(_QWORD *)(v0 + 168) = v4;
  *(_QWORD *)(v0 + 176) = v3;
  *(_QWORD *)(v0 + 368) = v4;
  *(_QWORD *)(v0 + 376) = v1;
  *(_QWORD *)(v0 + 384) = v5;
  *(_QWORD *)(v0 + 392) = v3;
  *(_DWORD *)(v0 + 720) = v2;
  *(_QWORD *)(v6 - 216) = v4;
  *(_QWORD *)(v6 - 208) = v1;
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 192) = v3;
  *(_QWORD *)(v0 + 144) = v5;
  type metadata accessor for NavigationStackReader.TransformBox();
}

void sub_18770CDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  *(_DWORD *)(v0 + 28) = _GraphValue.value.getter();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)(v0 + 112) = *(unsigned __int8 *)(v3 - 216);
  *(_QWORD *)(v0 + 64) = lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v4 = MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<NavigationSplitColumn>, (uint64_t)&type metadata for NavigationSplitColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<NavigationSplitColumn> and conformance External<A>, &lazy cache variable for type metadata for External<NavigationSplitColumn>, (uint64_t)&type metadata for NavigationSplitColumn);
  v5 = *(_QWORD *)(v3 - 216);
  *(_BYTE *)(v3 - 216) = 3;
  v6 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)(v3 - 216) = 1;
  v7 = MEMORY[0x1E0DEB418];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))v4);
  v9 = v8;
  *(_QWORD *)(v0 + 8) = lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<Int> and conformance External<A>, &lazy cache variable for type metadata for External<Int>, v7);
  *(_QWORD *)(v0 + 16) = v9;
  v10 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)(v0 + 720) = v5;
  *(_DWORD *)(v0 + 728) = *(_DWORD *)(v0 + 152);
  *(_DWORD *)(v0 + 732) = v6;
  *(_DWORD *)(v0 + 736) = v10;
  *(_QWORD *)(v3 - 216) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v3 - 208) = v2;
  v11 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v3 - 200) = v1;
  *(_QWORD *)(v3 - 192) = v11;
  type metadata accessor for NavigationStackReader.StackKey();
}

void sub_18770CFF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v6 = a1;
  *(_QWORD *)(v1 + 336) = a1;
  *(_QWORD *)(v1 + 344) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>.StackKey, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for Attribute<NavigationState.StackContent.Key?>, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 720, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_25, v1 + 320, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  *(_QWORD *)(v1 + 152) = 0;
  v9 = *(_DWORD *)(v5 - 216);
  *(_QWORD *)(v1 + 56) = lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  v10 = *(_QWORD *)(v1 + 208);
  swift_bridgeObjectRetain_n();
  v11 = *(_QWORD *)(v1 + 256);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v12 = *(_QWORD *)(v5 - 216);
  *(_QWORD *)(v5 - 216) = v4;
  v13 = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v5 - 208) = *(_DWORD *)(v1 + 200);
  *(_QWORD *)(v5 - 200) = v3;
  v14 = *(_DWORD *)(v1 + 236);
  *(_DWORD *)(v5 - 192) = v13;
  *(_DWORD *)(v5 - 188) = v14;
  v15 = *(_DWORD *)(v1 + 228);
  *(_DWORD *)(v5 - 184) = *(_DWORD *)(v1 + 232);
  *(_DWORD *)(v5 - 180) = v15;
  *(_QWORD *)(v5 - 176) = v10;
  *(_QWORD *)(v5 - 168) = v11;
  v16 = *(_DWORD *)(v1 + 252);
  *(_DWORD *)(v5 - 160) = *(_DWORD *)(v1 + 224);
  *(_DWORD *)(v5 - 156) = v16;
  v17 = *(_DWORD *)(v1 + 220);
  *(_DWORD *)(v5 - 152) = *(_DWORD *)(v1 + 248);
  *(_DWORD *)(v5 - 148) = v17;
  v18 = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v5 - 144) = *(_DWORD *)(v1 + 244);
  *(_DWORD *)(v5 - 140) = v18;
  *(_DWORD *)(v5 - 136) = *(_DWORD *)(v1 + 240);
  LODWORD(v6) = _ViewInputs.environment.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_OWORD *)(v1 + 720) = xmmword_187BF9840;
  *(_QWORD *)(v1 + 736) = 0;
  *(_QWORD *)(v1 + 812) = v12;
  v19 = *(_DWORD *)(v1 + 136);
  v20 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v5 - 216) = v20;
  *(_DWORD *)(v5 - 204) = v6;
  *(_DWORD *)(v5 - 200) = v19;
  v21 = *(_DWORD *)(v1 + 120);
  *(_DWORD *)(v5 - 196) = v9;
  *(_DWORD *)(v5 - 192) = v21;
  *(_DWORD *)(v5 - 188) = v20;
  *(_BYTE *)(v5 - 184) = *(_DWORD *)(v1 + 112);
  outlined init with take of NavigationAuthority?(v1 + 720, v5 - 176);
  *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 88) = v2;
  *(_QWORD *)(v1 + 728) = v2;
  *(_QWORD *)(v1 + 736) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 744) = *(_QWORD *)(v1 + 176);
  type metadata accessor for NavigationStackReader.ChildEnvironment();
}

void sub_18770D1F4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int OffsetAttribute2;
  int v71;
  int v72;
  char v73;
  uint64_t v74;

  *(_QWORD *)(v1 + 304) = a1;
  *(_QWORD *)(v1 + 312) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>.ChildEnvironment, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)>, (uint64_t (*)(uint64_t))type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  v10 = *(_QWORD *)(v1 + 152);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8 - 216, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_21, v1 + 288, a1, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  *(_QWORD *)v1 = v10;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v8 - 216, a1);
  *(_DWORD *)(v1 + 108) = *(_DWORD *)(v1 + 720);
  *(_DWORD *)(v1 + 84) = v4;
  v13 = AGCreateWeakAttribute();
  *(_QWORD *)(v1 + 40) = v13;
  *(_QWORD *)(v1 + 48) = HIDWORD(v13);
  AGGraphCreateOffsetAttribute2();
  v14 = AGCreateWeakAttribute();
  *(_QWORD *)(v1 + 152) = v14;
  *(_QWORD *)(v8 - 216) = v6;
  *(_QWORD *)(v1 + 128) = HIDWORD(v14);
  *(_DWORD *)(v8 - 208) = v2;
  *(_QWORD *)(v8 - 200) = v7;
  v15 = v3;
  v17 = *(_DWORD *)(v1 + 232);
  v16 = *(_DWORD *)(v1 + 236);
  *(_DWORD *)(v8 - 192) = v3;
  *(_DWORD *)(v8 - 188) = v16;
  v19 = *(_DWORD *)(v1 + 224);
  v18 = *(_DWORD *)(v1 + 228);
  *(_DWORD *)(v8 - 184) = v17;
  *(_DWORD *)(v8 - 180) = v18;
  v20 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v8 - 176) = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v8 - 168) = v20;
  LODWORD(v20) = *(_DWORD *)(v1 + 248);
  LODWORD(v10) = *(_DWORD *)(v1 + 252);
  *(_DWORD *)(v8 - 160) = v19;
  *(_DWORD *)(v8 - 156) = v10;
  v21 = *(_DWORD *)(v1 + 220);
  *(_DWORD *)(v8 - 152) = v20;
  *(_DWORD *)(v8 - 148) = v21;
  v22 = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v8 - 144) = *(_DWORD *)(v1 + 244);
  *(_DWORD *)(v8 - 140) = v22;
  *(_DWORD *)(v8 - 136) = *(_DWORD *)(v1 + 240);
  *(_DWORD *)(v1 + 36) = _ViewInputs.environment.getter();
  *(_QWORD *)(v8 - 216) = v5;
  v23 = *(_DWORD *)(v1 + 200);
  *(_DWORD *)(v8 - 208) = v23;
  *(_QWORD *)(v8 - 200) = *(_QWORD *)(v1 + 192);
  *(_DWORD *)(v8 - 192) = v15;
  *(_DWORD *)(v8 - 188) = v16;
  *(_DWORD *)(v8 - 184) = v17;
  v24 = *(_DWORD *)(v1 + 228);
  *(_DWORD *)(v8 - 180) = v24;
  v25 = *(_QWORD *)(v1 + 208);
  v26 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v8 - 176) = v25;
  *(_QWORD *)(v8 - 168) = v26;
  *(_DWORD *)(v8 - 160) = v19;
  *(_DWORD *)(v8 - 156) = v10;
  v27 = *(_DWORD *)(v1 + 244);
  LODWORD(v10) = *(_DWORD *)(v1 + 248);
  *(_DWORD *)(v8 - 152) = v10;
  *(_DWORD *)(v8 - 148) = v21;
  v28 = v21;
  *(_DWORD *)(v8 - 144) = v27;
  *(_DWORD *)(v8 - 140) = v22;
  v29 = *(_DWORD *)(v1 + 240);
  *(_DWORD *)(v8 - 136) = v29;
  *(_DWORD *)(v1 + 32) = _ViewInputs.viewPhase.getter();
  *(_QWORD *)(v8 - 216) = *(_QWORD *)(v1 + 184);
  *(_DWORD *)(v8 - 208) = v23;
  v30 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v8 - 200) = v30;
  v31 = *(_DWORD *)(v1 + 236);
  *(_DWORD *)(v8 - 192) = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v8 - 188) = v31;
  *(_DWORD *)(v8 - 184) = *(_DWORD *)(v1 + 232);
  *(_DWORD *)(v8 - 180) = v24;
  v32 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v8 - 176) = v25;
  *(_QWORD *)(v8 - 168) = v32;
  v33 = *(_DWORD *)(v1 + 224);
  LODWORD(v32) = *(_DWORD *)(v1 + 252);
  *(_DWORD *)(v8 - 160) = v33;
  *(_DWORD *)(v8 - 156) = v32;
  *(_DWORD *)(v8 - 152) = v10;
  *(_DWORD *)(v8 - 148) = v28;
  *(_DWORD *)(v8 - 144) = v27;
  *(_DWORD *)(v8 - 140) = v22;
  v34 = v22;
  *(_DWORD *)(v8 - 136) = v29;
  v35 = _ViewInputs.transaction.getter();
  type metadata accessor for BoundNavigationPathDetector.PathObservation();
  v36 = swift_allocObject();
  v37 = v36 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  v38 = type metadata accessor for ObservationTracking();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  *(_BYTE *)(v36 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved) = 0;
  UpdateCycleDetector.init()();
  v39 = *(_DWORD *)(v8 - 208);
  v40 = *(_BYTE *)(v8 - 204);
  v41 = *(_QWORD *)(v8 - 216);
  v43 = *(_QWORD *)(v1 + 40);
  v42 = *(_QWORD *)(v1 + 48);
  *(_DWORD *)(v8 - 216) = v43;
  *(_DWORD *)(v8 - 212) = v42;
  LODWORD(v42) = *(_DWORD *)(v1 + 72);
  *(_DWORD *)(v8 - 208) = *(_DWORD *)(v1 + 120);
  *(_DWORD *)(v8 - 204) = v42;
  v44 = *(_QWORD *)(v1 + 128);
  *(_DWORD *)(v8 - 200) = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(v8 - 196) = v44;
  *(_DWORD *)(v8 - 192) = *(_DWORD *)(v1 + 36);
  *(_BYTE *)(v8 - 188) = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v8 - 184) = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v8 - 180) = v35;
  *(_QWORD *)(v8 - 176) = v36;
  *(_QWORD *)(v8 - 168) = v41;
  *(_DWORD *)(v8 - 160) = v39;
  *(_BYTE *)(v8 - 156) = v40;
  *(_DWORD *)(v8 - 152) = 0;
  *(_QWORD *)(v8 - 144) = 0;
  *(_QWORD *)(v8 - 136) = 0;
  *(_QWORD *)(v8 - 128) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector();
  *(_QWORD *)(v1 + 72) = MEMORY[0x1E0DEE9C0] + 8;
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v45 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v8 - 216) = v45;
  *(_DWORD *)(v8 - 208) = *(_DWORD *)(v1 + 200);
  v46 = v30;
  *(_QWORD *)(v8 - 200) = v30;
  v47 = *(_DWORD *)(v1 + 236);
  *(_DWORD *)(v8 - 192) = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v8 - 188) = v47;
  v48 = *(_DWORD *)(v1 + 228);
  *(_DWORD *)(v8 - 184) = *(_DWORD *)(v1 + 232);
  *(_DWORD *)(v8 - 180) = v48;
  v49 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v8 - 176) = v25;
  *(_QWORD *)(v8 - 168) = v49;
  v50 = *(_DWORD *)(v1 + 252);
  *(_DWORD *)(v8 - 160) = v33;
  *(_DWORD *)(v8 - 156) = v50;
  v51 = *(_DWORD *)(v1 + 220);
  *(_DWORD *)(v8 - 152) = *(_DWORD *)(v1 + 248);
  *(_DWORD *)(v8 - 148) = v51;
  *(_DWORD *)(v8 - 144) = *(_DWORD *)(v1 + 244);
  *(_DWORD *)(v8 - 140) = v34;
  *(_DWORD *)(v8 - 136) = *(_DWORD *)(v1 + 240);
  v52 = v45;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.setter();
  *(_BYTE *)(v1 + 720) = 0;
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  *(_BYTE *)(v1 + 720) = 1;
  *(_QWORD *)(v1 + 120) = lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  *(_QWORD *)(v1 + 720) = v43;
  PropertyList.subscript.setter();
  *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 152);
  PropertyList.subscript.setter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PositionedNavigationDestination.Key>, (uint64_t)&type metadata for PositionedNavigationDestination.Key, (uint64_t)&protocol witness table for PositionedNavigationDestination.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PositionedNavigationDestination.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  *(_QWORD *)(v1 + 112) = lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v53 = *(_QWORD *)(v1 + 720);
  KeyPath = swift_getKeyPath();
  *(_DWORD *)(v1 + 720) = *(_DWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 728) = KeyPath;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for NavigationSeedHost(0);
  type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Focus<NavigationStateHost, NavigationSeedHost> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>, MEMORY[0x1E0CFECE0]);
  v55 = v46;
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v56 = AGCreateWeakAttribute();
  *(_QWORD *)(v1 + 720) = v53;
  *(_QWORD *)(v1 + 728) = v56;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds();
  Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)(v1 + 720) = AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v57 = v49;
  swift_bridgeObjectRelease();
  v58 = v25;
  swift_bridgeObjectRelease();
  v59 = v55;
  swift_release();
  swift_release();
  if ((*(_BYTE *)(v1 + 720) & 1) != 0)
  {
    *(_QWORD *)(v1 + 720) = 0;
    *(_DWORD *)(v1 + 720) = Attribute.init<A>(body:value:flags:update:)();
    lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
    lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
    v60 = _GraphInputs.subscript.setter();
    *(_DWORD *)(v1 + 264) = *(_DWORD *)(v1 + 140);
    *(_DWORD *)(v1 + 268) = *(_DWORD *)(v1 + 84);
    *(_DWORD *)(v1 + 272) = *(_QWORD *)(v1 + 152);
    *(_DWORD *)(v1 + 276) = *(_QWORD *)(v1 + 128);
    MEMORY[0x1E0C80A78](v60, v61);
    v62 = *(_QWORD *)(v1 + 176);
    *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 728) = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 736) = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 744) = v62;
    type metadata accessor for NavigationStackReader.ExtractedRoot();
  }
  *(_QWORD *)(v1 + 720) = v52;
  v64 = *(_DWORD *)(v1 + 200);
  v63 = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v1 + 728) = v64;
  *(_QWORD *)(v1 + 736) = v59;
  *(_DWORD *)(v1 + 744) = v63;
  v66 = *(_DWORD *)(v1 + 232);
  v65 = *(_DWORD *)(v1 + 236);
  *(_DWORD *)(v1 + 748) = v65;
  *(_DWORD *)(v1 + 752) = v66;
  v67 = *(_DWORD *)(v1 + 224);
  v68 = *(_DWORD *)(v1 + 228);
  *(_DWORD *)(v1 + 756) = v68;
  *(_QWORD *)(v1 + 760) = v58;
  v69 = v57;
  *(_QWORD *)(v1 + 768) = v57;
  *(_DWORD *)(v1 + 776) = v67;
  *(_DWORD *)(v1 + 780) = *(_DWORD *)(v1 + 252);
  *(_DWORD *)(v1 + 784) = *(_DWORD *)(v1 + 248);
  *(_DWORD *)(v1 + 788) = *(_DWORD *)(v1 + 220);
  *(_DWORD *)(v1 + 792) = *(_DWORD *)(v1 + 244);
  *(_DWORD *)(v1 + 796) = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v1 + 800) = *(_DWORD *)(v1 + 240);
  swift_getKeyPath();
  *(_DWORD *)(v1 + 136) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 184);
  *(_DWORD *)(v1 + 728) = v64;
  *(_QWORD *)(v1 + 736) = *(_QWORD *)(v1 + 192);
  *(_DWORD *)(v1 + 744) = v63;
  *(_DWORD *)(v1 + 748) = v65;
  *(_DWORD *)(v1 + 752) = v66;
  *(_DWORD *)(v1 + 756) = v68;
  *(_QWORD *)(v1 + 760) = v58;
  *(_QWORD *)(v1 + 768) = v69;
  *(_DWORD *)(v1 + 776) = *(_DWORD *)(v1 + 224);
  *(_DWORD *)(v1 + 780) = *(_DWORD *)(v1 + 252);
  *(_DWORD *)(v1 + 784) = *(_DWORD *)(v1 + 248);
  *(_DWORD *)(v1 + 788) = *(_DWORD *)(v1 + 220);
  *(_DWORD *)(v1 + 792) = *(_DWORD *)(v1 + 244);
  *(_DWORD *)(v1 + 796) = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v1 + 800) = *(_DWORD *)(v1 + 240);
  v71 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v72 = *(_DWORD *)(v1 + 728);
  v73 = *(_BYTE *)(v1 + 732);
  v74 = *(_QWORD *)(v1 + 720);
  *(_DWORD *)(v1 + 720) = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v1 + 724) = OffsetAttribute2;
  *(_QWORD *)(v1 + 732) = v74;
  *(_DWORD *)(v1 + 728) = v71;
  *(_DWORD *)(v1 + 740) = v72;
  *(_BYTE *)(v1 + 744) = v73;
  *(_DWORD *)(v1 + 748) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  *(_QWORD *)(v1 + 720) = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 728) = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 736) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 744) = *(_QWORD *)(v1 + 176);
  type metadata accessor for NavigationStackReader.AppliedBody();
}

void sub_18770DCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  type metadata accessor for PositionedNavigationDestinationProcessor(255, a1, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.AppliedBody, a4);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>, (uint64_t)&type metadata for InspectorStorageV5.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorageV5.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v10 = type metadata accessor for ModifiedContent();
  *(_DWORD *)(v4 + 720) = *(_DWORD *)(v4 + 84);
  *(_DWORD *)(v4 + 724) = *(_DWORD *)(v4 + 28);
  *(_DWORD *)(v4 + 728) = *(_DWORD *)(v4 + 140);
  *(_DWORD *)(v4 + 732) = *(_QWORD *)(v4 + 152);
  *(_DWORD *)(v4 + 736) = *(_QWORD *)(v4 + 128);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>.AppliedBody, a1);
  _GraphValue.init<A>(_:)();
  v11 = *(_DWORD *)(v7 - 208);
  v12 = *(_QWORD *)(v7 - 200);
  v13 = *(_QWORD *)(v7 - 176);
  v14 = *(_QWORD *)(v7 - 168);
  v15 = *(_DWORD *)(v7 - 136);
  *(_QWORD *)(v4 + 720) = *(_QWORD *)(v7 - 216);
  *(_DWORD *)(v4 + 728) = v11;
  *(_OWORD *)((char *)v5 + 24) = v5[7];
  *(_QWORD *)(v4 + 736) = v12;
  *(_QWORD *)(v4 + 760) = v13;
  *(_QWORD *)(v4 + 768) = v14;
  *(_OWORD *)((char *)v5 + 56) = v5[9];
  *(_QWORD *)(v4 + 792) = *(_QWORD *)(v7 - 144);
  *(_DWORD *)(v4 + 800) = v15;
  *(_QWORD *)(v4 + 704) = v6;
  *(_QWORD *)(v4 + 712) = &protocol witness table for PositionedNavigationDestinationProcessor<A>;
  v16 = MEMORY[0x1E0CE2E70];
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v4 + 704);
  v18 = lazy protocol witness table accessor for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>();
  *(_QWORD *)(v4 + 688) = v17;
  *(_QWORD *)(v4 + 696) = v18;
  MEMORY[0x18D75FFDC](v16, v10, v4 + 688);
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  JUMPOUT(0x18770DE20);
}

void closure #1 in static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_18770DE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v6[2] = a1;
  v2 = MEMORY[0x1E0CE7DD0];
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v2, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[4];
}

void closure #2 in static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_18770DF24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[14];

  v7[2] = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = v2;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

void closure #3 in static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_18770DFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 56);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void closure #4 in static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_18770E070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[14];

  v2 = v1 + *(int *)(a1 + 60);
  v7[2] = a1;
  v3 = MEMORY[0x1E0DEAFA0];
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

void closure #5 in static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_18770E10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[14];

  v2 = v1 + *(int *)(a1 + 64);
  v7[2] = a1;
  v3 = type metadata accessor for NavigationStateHost();
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

void closure #6 in static NavigationStackReader._makeView(view:inputs:)()
{
  type metadata accessor for NavigationStackReader();
}

void sub_18770E1C4()
{
  type metadata accessor for NavigationStackReader.TransformBox();
}

uint64_t sub_18770E1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[18];

  v6[3] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[6];
}

uint64_t NavigationStackReader.StackKey.value.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v0 = NavigableListModifier.ListKey.inheritedStackKey.getter();
  if ((v1 & 0xFE) != 6)
    return v0;
  v2 = *(_QWORD *)AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  return v2;
}

double protocol witness for static Rule.initialValue.getter in conformance NavigationStackReader<A, B>.StackKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_187C52600;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackReader<A, B>.StackKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = NavigationStackReader.StackKey.value.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t static NavigationStackReader.ExtractedRoot.readerDescription.getter()
{
  return 0x6574636172747845;
}

double NavigationStackReader.ExtractedRoot.authority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

void NavigationStackReader.ExtractedRoot.value.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NavigationStackReader.ExtractedRoot();
}

uint64_t sub_18770E454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for ReadDestinationsModifier(255, a1, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.ExtractedRoot, a4);
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  *(_QWORD *)(v8 - 288) = v10;
  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v8 - 280) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, Value, v7);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetValue();
  v17 = *(unsigned __int8 *)(result + 8);
  if (v17 == 6)
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(result + 16);
    v19 = *(_QWORD *)result;
    *(_QWORD *)(v8 - 136) = 0;
    *(_QWORD *)(v8 - 128) = v19;
    *(_QWORD *)(v8 - 120) = v17;
    *(_QWORD *)(v8 - 112) = v18;
    *(_QWORD *)(v8 - 104) = 0;
    *(_BYTE *)(v8 - 96) = 1;
    View.readNavigationDestinations<A>(position:isActive:reader:)(v8 - 136, 1, a1, v7, a1, v5, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.ExtractedRoot);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
    NavigationStackReader.ExtractedRoot.authority.getter(v8 - 184);
    v20 = v8 - 184;
    if (*(_QWORD *)(v8 - 176) == 2)
    {
      outlined destroy of NavigationAuthority??(v20);
      *(_OWORD *)(v8 - 160) = xmmword_187BF9840;
      *(_QWORD *)(v8 - 144) = 0;
      v21 = *(_QWORD *)(v8 - 280);
      v22 = *(_QWORD *)(v8 - 288);
    }
    else
    {
      outlined init with copy of NavigationAuthority?(v20, v8 - 240);
      v21 = *(_QWORD *)(v8 - 280);
      v22 = *(_QWORD *)(v8 - 288);
      if (*(_QWORD *)(v8 - 232) == 1)
      {
        *(_OWORD *)(v8 - 160) = xmmword_187BF9840;
        *(_QWORD *)(v8 - 144) = 0;
      }
      else
      {
        outlined init with take of NavigationAuthority(v8 - 240, v8 - 264);
        outlined init with copy of NavigationAuthority(v8 - 264, v8 - 160);
        outlined destroy of NavigationAuthority(v8 - 264);
      }
      outlined destroy of NavigationAuthority?(v8 - 184);
    }
    *(_QWORD *)(v8 - 200) = v5;
    *(_QWORD *)(v8 - 192) = &protocol witness table for ReadDestinationsModifier<A>;
    v23 = MEMORY[0x1E0CE2E70];
    v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, v8 - 200);
    v25 = lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>();
    *(_QWORD *)(v8 - 216) = v24;
    *(_QWORD *)(v8 - 208) = v25;
    v26 = MEMORY[0x18D75FFDC](v23, v11, v8 - 216);
    View.processNavigationDestinations<A>(authority:processor:)(v8 - 160, a1, v11, a1, v26, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.ExtractedRoot);
    outlined destroy of NavigationAuthority?(v8 - 160);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, v11);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackReader<A, B>.ExtractedRoot@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ReadDestinationsModifier(255, a1, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.ExtractedRoot, a2);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PositionedNavigationDestinationProcessor(255, a1, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.ExtractedRoot, v5);
  v6 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
}

void protocol witness for Rule.value.getter in conformance NavigationStackReader<A, B>.ExtractedRoot()
{
  uint64_t *v0;

  NavigationStackReader.ExtractedRoot.value.getter(*v0, v0[1]);
}

uint64_t protocol witness for static NavigationDestinationProcessor.processorDescription.getter in conformance NavigationStackReader<A, B>.ExtractedRoot()
{
  return static NavigationStackReader.ExtractedRoot.readerDescription.getter();
}

uint64_t static NavigationStackReader.AppliedBody.processorDescription.getter()
{
  return 0x426465696C707041;
}

double NavigationStackReader.AppliedBody.authority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

void NavigationStackReader.AppliedBody.value.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v19 = a3;
  v18 = a2;
  v16[7] = a8;
  v16[9] = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = type metadata accessor for ModifiedContent();
  v16[8] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v12);
  v16[6] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v20 = (char *)v16 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  type metadata accessor for NavigationStackReader.AppliedBody();
}

void sub_18770E9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 240) = a1;
  type metadata accessor for PositionedNavigationDestinationProcessor(255, a1, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.AppliedBody, a4);
  v14 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v13 - 312) = v14;
  *(_QWORD *)(v13 - 320) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v13 - 232) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 128) = v11;
  *(_QWORD *)(v13 - 120) = v12;
  *(_QWORD *)(v13 - 248) = v9;
  *(_QWORD *)(v13 - 112) = v9;
  *(_QWORD *)(v13 - 104) = v10;
  type metadata accessor for NavigationStackReader.TransformBox();
}

uint64_t sub_18770EA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetValue();
  v8 = *(unsigned __int8 *)(result + 8);
  if (v8 == 6)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 - 336) = *(_QWORD *)(result + 16);
    *(_QWORD *)(v6 - 344) = *(_QWORD *)result;
    v9 = *(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))AGGraphGetValue();
    *(_QWORD *)(v6 - 328) = v1;
    Value = AGGraphGetValue();
    v11 = *(_QWORD *)(v6 - 280);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v0, Value, v5);
    *(_QWORD *)(v6 - 128) = 0;
    swift_retain();
    MEMORY[0x18D75B4AC](v6 - 128, v5, &type metadata for StackDepthModifier, v4);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v5);
    v9(*(_QWORD *)(v6 - 344), v8, *(_QWORD *)(v6 - 336), v3);
    swift_release();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 288) + 8))(v3, *(_QWORD *)(v6 - 272));
    v12 = *(_QWORD *)(v6 - 248);
    NavigationStackReader.AppliedBody.authority.getter(v6 - 152);
    v13 = v2;
    v14 = v6 - 152;
    if (*(_QWORD *)(v6 - 144) == 2)
    {
      outlined destroy of NavigationAuthority??(v14);
      *(_OWORD *)(v6 - 128) = xmmword_187BF9840;
      *(_QWORD *)(v6 - 112) = 0;
      v15 = *(_QWORD *)(v6 - 304);
      v16 = *(_QWORD *)(v6 - 312);
      v17 = *(_QWORD *)(v6 - 320);
      v19 = *(_QWORD *)(v6 - 232);
      v18 = *(_QWORD *)(v6 - 224);
      v20 = *(_QWORD *)(v6 - 240);
    }
    else
    {
      outlined init with copy of NavigationAuthority?(v14, v6 - 192);
      v20 = *(_QWORD *)(v6 - 240);
      v19 = *(_QWORD *)(v6 - 232);
      if (*(_QWORD *)(v6 - 184) == 1)
      {
        *(_OWORD *)(v6 - 128) = xmmword_187BF9840;
        *(_QWORD *)(v6 - 112) = 0;
      }
      else
      {
        outlined init with take of NavigationAuthority(v6 - 192, v6 - 216);
        outlined init with copy of NavigationAuthority(v6 - 216, v6 - 128);
        outlined destroy of NavigationAuthority(v6 - 216);
      }
      v15 = *(_QWORD *)(v6 - 304);
      v16 = *(_QWORD *)(v6 - 312);
      v17 = *(_QWORD *)(v6 - 320);
      v18 = *(_QWORD *)(v6 - 224);
      outlined destroy of NavigationAuthority?(v6 - 152);
    }
    View.processNavigationDestinations<A>(authority:processor:)(v6 - 128, v20, v13, v20, v12, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.AppliedBody);
    outlined destroy of NavigationAuthority?(v6 - 128);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v13);
    *(_QWORD *)(v6 - 168) = v12;
    *(_QWORD *)(v6 - 160) = &protocol witness table for PositionedNavigationDestinationProcessor<A>;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v6 - 168);
    View.transformPreference<A>(_:_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v19, v16);
  }
  return result;
}

uint64_t closure #2 in NavigationStackReader.AppliedBody.value.getter(uint64_t result)
{
  *(_BYTE *)(result + 1) = 1;
  return result;
}

double NavigationStackReader.ChildEnvironment.inheritedAuthority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t NavigationStackReader.ChildEnvironment.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t NavigationStackReader.ChildEnvironment.key.getter()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t NavigationStackReader.ChildEnvironment.path.getter()
{
  uint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v0 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackReader<A, B>.AppliedBody@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  type metadata accessor for PositionedNavigationDestinationProcessor(255, a1, (uint64_t)&protocol witness table for NavigationStackReader<A, B>.AppliedBody, a2);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>, (uint64_t)&type metadata for InspectorStorageV5.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorageV5.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v4 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance NavigationStackReader<A, B>.AppliedBody(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  NavigationStackReader.AppliedBody.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static NavigationDestinationProcessor.processorDescription.getter in conformance NavigationStackReader<A, B>.AppliedBody()
{
  return static NavigationStackReader.AppliedBody.processorDescription.getter();
}

uint64_t NavigationStackReader.ChildEnvironment.updateValue()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t Value;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned __int8 v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  int v44;
  __int128 v45[8];
  uint64_t v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _BYTE v64[24];
  _BYTE v65[64];
  _BYTE v66[24];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NavigationStackReader.ChildEnvironment.environment.getter(&v67);
  NavigationStackReader.ChildEnvironment.inheritedAuthority.getter((uint64_t)v47);
  v42 = v7;
  v43 = v5;
  if (*(_QWORD *)&v47[8] == 1)
  {
    outlined destroy of NavigationAuthority?((uint64_t)v47);
  }
  else
  {
    if (*(_QWORD *)&v47[8] != 2)
      goto LABEL_8;
    outlined destroy of NavigationAuthority??((uint64_t)v47);
  }
  outlined init with copy of NavigationAuthority?(v2 + 40, (uint64_t)v47);
  if (*(_QWORD *)&v47[8] == 1)
  {
    outlined destroy of NavigationAuthority?((uint64_t)v47);
    type metadata accessor for NavigationStateHost();
    AGGraphGetValue();
    NavigationStackReader.ChildEnvironment.environment.getter(v45);
    v8 = v45[0];
    swift_weakInit();
    swift_weakAssign();
    *(_OWORD *)&v47[8] = v8;
    outlined init with take of NavigationAuthority((uint64_t)v47, (uint64_t)&v55);
    outlined assign with take of NavigationAuthority?((uint64_t)&v55, v2 + 40);
    outlined init with copy of NavigationAuthority?(v2 + 40, (uint64_t)&v55);
    if (*((_QWORD *)&v55 + 1) != 1)
      goto LABEL_9;
    __break(1u);
  }
LABEL_8:
  outlined init with take of NavigationAuthority((uint64_t)v47, (uint64_t)&v55);
LABEL_9:
  outlined init with take of NavigationAuthority((uint64_t)&v55, (uint64_t)v66);
  v9 = *(a1 - 1);
  v10 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(v9 + 16))(v65, v2, a1);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v41[-6] = a1[2];
  v41[-5] = v4;
  v13 = a1[5];
  v41[-4] = a1[4];
  v41[-3] = v13;
  v41[-2] = v66;
  v41[-1] = v2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>.ChildEnvironment, a1, v12);
  StatefulRule.withObservation<A>(do:)();
  (*(void (**)(_BYTE *, _QWORD *))(v9 + 8))(v65, a1);
  LODWORD(v55) = v44;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>, (uint64_t)&type metadata for NavigationStateSelectionSeed, (uint64_t)&protocol witness table for NavigationStateSelectionSeed, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>, (uint64_t)&type metadata for NavigationStateSelectionSeed, (uint64_t)&protocol witness table for NavigationStateSelectionSeed);
  swift_retain();
  PropertyList.subscript.setter();
  if (v68)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  v15 = v14;
  if (AGGraphGetOutputValue())
    goto LABEL_19;
  v41[1] = v15;
  *(_QWORD *)&v55 = NavigationStackReader.ChildEnvironment.path.getter();
  *((_QWORD *)&v55 + 1) = v16;
  *(_QWORD *)&v56 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v47);
  swift_release();
  swift_release();
  v18 = swift_release();
  v19 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)v47 + 80))(v18);
  swift_release();
  if ((v19 & 1) == 0)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v66, (uint64_t)v64);
    Value = AGGraphGetValue();
    v22 = (uint64_t)v42;
    v21 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, Value, v4);
    result = NavigationStackReader.ChildEnvironment.key.getter();
    if (v24 == 6)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    v26 = static NavigationRequest.setInitialPossibilities<A>(_:stack:)(v22, result, v24, v25, v4, v13, (uint64_t)&v55);
    (*(void (**)(uint64_t, uint64_t, double))(v21 + 8))(v22, v4, v26);
    v52 = v61;
    v53 = v62;
    v48 = v57;
    v49 = v58;
    v50 = v59;
    v51 = v60;
    *(_OWORD *)v47 = v55;
    *(_OWORD *)&v47[16] = v56;
    v45[6] = v61;
    v45[7] = v62;
    v45[2] = v57;
    v45[3] = v58;
    v45[4] = v59;
    v45[5] = v60;
    v54 = v63;
    v46 = v63;
    v45[0] = v55;
    v45[1] = v56;
    NavigationAuthority.enqueueRequest(_:)(v45);
    outlined release of NavigationRequest((uint64_t)v47);
    outlined destroy of NavigationAuthority((uint64_t)v64);
  }
  outlined init with copy of NavigationAuthority((uint64_t)v66, (uint64_t)v45);
  v27 = NavigationStackReader.ChildEnvironment.path.getter();
  v29 = v28;
  v31 = v30;
  result = NavigationStackReader.ChildEnvironment.key.getter();
  v42 = (char *)result;
  v43 = v32;
  v34 = v33;
  if (v33 == 6)
  {
    __break(1u);
    goto LABEL_25;
  }
  NavigationStackReader.ChildEnvironment.environment.getter(&v55);
  v35 = v55;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v36 = Transaction.disablesAnimations.getter();
  v37 = Transaction.animation.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&v55 = v27;
  *((_QWORD *)&v55 + 1) = v29;
  *(_QWORD *)&v56 = v31;
  *((_QWORD *)&v56 + 1) = v35;
  v57 = *((unint64_t *)&v35 + 1);
  v58 = 0uLL;
  LOBYTE(v59) = 1;
  *((_QWORD *)&v59 + 1) = v42;
  *(_QWORD *)&v60 = v34;
  *((_QWORD *)&v60 + 1) = v43;
  v61 = 0uLL;
  *(_QWORD *)&v62 = 0;
  BYTE8(v62) = v36 & 1;
  v63 = v37;
  if (*(_BYTE *)(v2 + 32) != 1)
  {
    v52 = v61;
    v53 = v62;
    v54 = v63;
    v48 = v57;
    v49 = v58;
    v50 = v59;
    v51 = v60;
    *(_OWORD *)v47 = v55;
    *(_OWORD *)&v47[16] = v56;
    NavigationAuthority.enqueueRequest(_:)((__int128 *)v47);
  }
  outlined release of NavigationRequest((uint64_t)&v55);
  outlined destroy of NavigationAuthority((uint64_t)v45);
LABEL_19:
  LOBYTE(v55) = 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey);
  swift_retain();
  PropertyList.subscript.setter();
  v38 = v68;
  if (v68)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v55) = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v38)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined init with copy of NavigationAuthority((uint64_t)v66, (uint64_t)v47);
  v39 = v67;
  v40 = v68;
  outlined init with take of NavigationAuthority?((uint64_t)v47, (uint64_t)&v55);
  *((_QWORD *)&v56 + 1) = v39;
  *(_QWORD *)&v57 = v40;
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  outlined destroy of (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)((uint64_t)&v55);
  swift_release();
  swift_release();
  return outlined destroy of NavigationAuthority((uint64_t)v66);
}

uint64_t closure #1 in NavigationStackReader.ChildEnvironment.updateValue()@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    type metadata accessor for NavigationStackReader.ChildEnvironment();
  }
  *a1 = 0;
  return result;
}

void protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackReader<A, B>()
{
  static NavigationStackReader._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationStackReader<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationStackReader<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance NavigationStackReader<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackReader<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

void partial apply for closure #1 in static NavigationStackReader._makeView(view:inputs:)()
{
  closure #1 in static NavigationStackReader._makeView(view:inputs:)();
}

void partial apply for closure #2 in static NavigationStackReader._makeView(view:inputs:)()
{
  closure #2 in static NavigationStackReader._makeView(view:inputs:)();
}

void type metadata accessor for _GraphValue<Binding<AnyNavigationPath>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Binding<AnyNavigationPath>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<AnyNavigationPath>>);
  }
}

void partial apply for closure #3 in static NavigationStackReader._makeView(view:inputs:)()
{
  closure #3 in static NavigationStackReader._makeView(view:inputs:)();
}

void partial apply for closure #4 in static NavigationStackReader._makeView(view:inputs:)()
{
  closure #4 in static NavigationStackReader._makeView(view:inputs:)();
}

void partial apply for closure #5 in static NavigationStackReader._makeView(view:inputs:)()
{
  closure #5 in static NavigationStackReader._makeView(view:inputs:)();
}

void partial apply for closure #6 in static NavigationStackReader._makeView(view:inputs:)()
{
  closure #6 in static NavigationStackReader._makeView(view:inputs:)();
}

void type metadata accessor for NavigationStackReader.TransformBox()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for NavigationStackReader.StackKey()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for NavigationStackReader.ChildEnvironment()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_18770FB08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  return swift_retain();
}

uint64_t sub_18770FB18(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 184) = *a1;
  swift_retain();
  return swift_release();
}

void type metadata accessor for NavigationStackReader.AppliedBody()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>, (uint64_t)&type metadata for InspectorStorageV5.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorageV5.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for NavigationStackReader.ExtractedRoot()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t outlined init with take of NavigationAuthority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for NavigationStackReader.ChildEnvironment(uint64_t result)
{
  if (*(_QWORD *)(result + 48) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v5 = a2 + 40;
  if (*(_QWORD *)(a2 + 48) == 1)
  {
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  }
  else
  {
    swift_weakCopyInit();
    v6 = *(_QWORD *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v5 = (__int128 *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) == 1)
  {
    if (v6 == 1)
    {
      v7 = *v5;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)v4 = v7;
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_retain();
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 40);
    v8 = *((_QWORD *)v5 + 2);
    *(_OWORD *)v4 = *v5;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    swift_weakCopyAssign();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_retain();
    swift_release();
  }
  return a1;
}

uint64_t initializeWithTake for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v5 = a2 + 40;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = (_OWORD *)(a2 + 48);
  if (v7 == 1)
  {
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)(a1 + 48) = *v6;
  }
  return a1;
}

uint64_t assignWithTake for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = a1 + 40;
  v5 = a2 + 40;
  v6 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    if (v7 != 1)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_release();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationAuthority(a1 + 40);
    goto LABEL_6;
  }
  if (v7 == 1)
  {
LABEL_6:
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
    return a1;
  }
  swift_weakTakeInit();
  *v6 = *v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackReader.ChildEnvironment(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackReader.ChildEnvironment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2 + 1;
  }
  return result;
}

void base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.ExtractedRoot()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.AppliedBody()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.StackKey()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in NavigationStackReader.ChildEnvironment.updateValue()@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in NavigationStackReader.ChildEnvironment.updateValue()(a1);
}

uint64_t outlined destroy of (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in FileImportExportBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(0);
  v5[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in FileImportExportBridge.preferencesDidChange(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t updated;
  _QWORD *v3;

  v1 = v0[4];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0[3], v1, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
  updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v1, 0, 1, updated);
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = closure #1 in FileImportExportBridge.preferencesDidChange(_:);
  return FileImportExportBridge.apply(_:)(v0[4]);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t FileImportExportBridge.apply(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for FileExportOperation.Resolved(0);
  v2[4] = swift_task_alloc();
  type metadata accessor for FileExportOperation(0);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  v2[7] = type metadata accessor for FileImportOperation.Resolved(0);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for FileImportOperation(0);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for FileImportExportBridge.Presentation(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(0);
  v2[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[16] = static MainActor.shared.getter();
  v2[17] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[18] = v3;
  return swift_task_switch();
}

uint64_t FileImportExportBridge.apply(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t updated;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t ObjectType;
  void (*v29)(uint64_t, uint64_t);
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char v68;

  v1 = *(_QWORD *)(v0 + 120);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v0 + 16), v1, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?);
  updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v1, 1, updated) == 1)
  {
    swift_release();
LABEL_24:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 120);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_release();
    v22 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect;
    v23 = v3;
LABEL_23:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v23, v22);
    goto LABEL_24;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v24 = *(_QWORD *)(v0 + 24);
    swift_release();
    v25 = v24 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
    v26 = *(void **)(v24 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
    if (v26)
    {
      v27 = *(_QWORD *)(v25 + 8);
      ObjectType = swift_getObjectType();
      v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v30 = v26;
      v29(ObjectType, v27);

      v31 = *(void **)v25;
    }
    else
    {
      v31 = 0;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;

    goto LABEL_24;
  }
  v5 = *(_QWORD *)(v0 + 24);
  outlined init with take of TableCellFormula(v3, *(_QWORD *)(v0 + 112), type metadata accessor for FileImportExportBridge.Presentation);
  v6 = v5 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
  v7 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = swift_getObjectType();
    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v11 = v7;
    v10(v9, v8);

    v12 = *(void **)v6;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;

  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104), type metadata accessor for FileImportExportBridge.Presentation);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *(_QWORD *)(v0 + 24);
    outlined init with take of TableCellFormula(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 48), type metadata accessor for FileExportOperation);
    v14 = v13 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
    result = MEMORY[0x18D760234](v13 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host);
    if (result)
    {
      v17 = *(_QWORD *)(v0 + 40);
      v16 = *(_QWORD *)(v0 + 48);
      v18 = *(_QWORD *)(v0 + 32);
      v19 = *(_QWORD *)(v14 + 8);
      v20 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v20, v19);
      swift_unknownObjectRelease();
      GraphHost.environment.getter();
      swift_release();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, v17, type metadata accessor for FileExportOperation);
      FileExportOperation.Resolved.init(base:environment:)(v17, v18);
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v21;
      *v21 = v0;
      v21[1] = FileImportExportBridge.apply(_:);
      return FileImportExportBridge.presentExportPicker(operation:)(*(_QWORD *)(v0 + 32));
    }
    __break(1u);
    goto LABEL_26;
  }
  v32 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 24);
  swift_release();
  outlined init with take of TableCellFormula(v32, v33, type metadata accessor for FileImportOperation);
  v35 = v34 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
  result = MEMORY[0x18D760234](v34 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host);
  if (result)
  {
    v37 = *(_QWORD *)(v0 + 80);
    v36 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 64);
    v39 = *(_QWORD *)(v0 + 72);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_QWORD *)(v35 + 8);
    v42 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v41 + 16))(v42, v41);
    swift_unknownObjectRelease();
    GraphHost.environment.getter();
    swift_release();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v36, v37, type metadata accessor for FileImportOperation);
    v43 = (uint64_t *)(v38 + *(int *)(v40 + 24));
    *v43 = 0;
    v43[1] = 0;
    v67 = v43;
    v44 = (_QWORD *)(v38 + *(int *)(v40 + 28));
    *v44 = 0;
    v44[1] = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, v38, type metadata accessor for FileImportOperation);
    v45 = (uint64_t *)(v37 + *(int *)(v39 + 24));
    v46 = v45[3];
    if (v46)
    {
      v48 = v45[1];
      v47 = v45[2];
      v49 = *v45;
      swift_retain();
      swift_retain();
      outlined copy of Text?(v49, v48, v47, v46);
      v68 = v47 & 1;
      v50 = Text.resolveString(in:with:idiom:)();
      v52 = v51;
      outlined consume of Text.Storage(v49, v48, v68);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_retain();
      v50 = 0;
      v52 = 0;
    }
    v54 = *(_QWORD *)(v0 + 72);
    v53 = *(_QWORD *)(v0 + 80);
    v55 = (uint64_t *)(*(_QWORD *)(v0 + 64) + *(int *)(*(_QWORD *)(v0 + 56) + 20));
    *v55 = v50;
    v55[1] = v52;
    v56 = (uint64_t *)(v53 + *(int *)(v54 + 28));
    v57 = *(_QWORD *)(v0 + 80);
    if (v56[3])
    {
      v58 = v56[1];
      v59 = *v56;
      v60 = v56[2] & 1;
      outlined copy of Text.Storage(*v56, v58, v60);
      swift_bridgeObjectRetain();
      v66 = Text.resolveString(in:with:idiom:)();
      v62 = v61;
      outlined consume of Text.Storage(v59, v58, v60);
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, type metadata accessor for FileImportOperation);
      swift_release();
      swift_release();
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v0 + 80), type metadata accessor for FileImportOperation);
      swift_release();
      swift_release();
      v66 = 0;
      v62 = 0;
    }
    v63 = *(_QWORD *)(v0 + 112);
    v64 = *(_QWORD *)(v0 + 88);
    v65 = *(_QWORD *)(v0 + 64);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    *v67 = v66;
    v67[1] = v62;
    FileImportExportBridge.presentImportPicker(operation:)(v65);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v65, type metadata accessor for FileImportOperation.Resolved);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, type metadata accessor for FileImportOperation);
    v22 = type metadata accessor for FileImportExportBridge.Presentation;
    v23 = v63;
    goto LABEL_23;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, type metadata accessor for FileExportOperation.Resolved);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, type metadata accessor for FileExportOperation);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, type metadata accessor for FileImportExportBridge.Presentation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FileImportExportBridge.presentImportPicker(operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t ObjectType;
  void *v21;
  id v22;
  Class isa;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for FileImportOperation(0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
  result = MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host, v14);
  if (result)
  {
    v19 = *(_QWORD *)(v17 + 8);
    ObjectType = swift_getObjectType();
    v21 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v19);
    result = swift_unknownObjectRelease();
    if (v21)
    {
      v33 = v1;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v16, type metadata accessor for FileImportOperation);
      v22 = objc_allocWithZone(MEMORY[0x1E0DC3730]);
      type metadata accessor for UTType();
      swift_bridgeObjectRetain();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v22, sel_initForOpeningContentTypes_, isa);

      objc_msgSend(v24, sel_setAllowsMultipleSelection_, v16[v12[10]]);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v16[v12[5]], (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
        URL._bridgeToObjectiveC()(v25);
        v27 = v26;
        objc_msgSend(v24, sel_setDirectoryURL_, v26);

        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }
      v28 = v33;
      v29 = &v16[v12[13]];
      if ((v29[8] & 1) == 0 && (*v29 & 4) != 0)
        objc_msgSend(v24, sel_setShouldShowFileExtensions_, 1);
      objc_msgSend(v24, sel_setDelegate_, v28);
      objc_msgSend(v21, sel_presentViewController_animated_completion_, v24, 1, 0);
      v30 = (_QWORD *)(v28 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
      v31 = *(void **)(v28 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
      *v30 = v24;
      v30[1] = &protocol witness table for UIDocumentPickerViewController;

      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for FileImportOperation);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t FileImportExportBridge.presentExportPicker(operation:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for FileExportOperation.Move(0);
  v2[4] = swift_task_alloc();
  v2[5] = type metadata accessor for FileExportOperation.Mode(0);
  v2[6] = swift_task_alloc();
  v2[7] = type metadata accessor for FileExportOperation(0);
  v2[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[9] = static MainActor.shared.getter();
  v2[10] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[11] = v3;
  return swift_task_switch();
}

void FileImportExportBridge.presentExportPicker(operation:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v1 = v0[3] + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
  if (MEMORY[0x18D760234](v1))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v4 = ViewRendererHost.uiViewController.getter(ObjectType, v2);
    v0[12] = v4;
    swift_unknownObjectRelease();
    if (v4)
    {
      v5 = v0[8];
      v6 = v0[6];
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0[2], v5, type metadata accessor for FileExportOperation);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, v6, type metadata accessor for FileExportOperation.Mode);
      v7 = (char *)&loc_187710F68 + dword_187711274[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    __asm { BR              X0 }
  }
  __break(1u);
  JUMPOUT(0x187711274);
}

uint64_t FileImportExportBridge.presentExportPicker(operation:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_BYTE *)(v3 + 120) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t FileImportExportBridge.presentExportPicker(operation:)()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  void *v3;
  id v4;
  Class isa;
  id v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  _BYTE *v20;

  v1 = *(_BYTE *)(v0 + 120);
  v2 = *(_QWORD **)(v0 + 112);
  swift_release();
  if ((v1 & 1) != 0)
  {
    v13 = *(void **)(v0 + 112);
    v14 = *(void **)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 64);
    v15 = v2;
    FileExportOperation.didFinish(with:)((uint64_t)v13);

    outlined consume of Result<[URL], Error>(v13, 1);
    v16 = v13;
    v17 = 1;
LABEL_9:
    outlined consume of Result<[URL], Error>(v16, v17);
    goto LABEL_10;
  }
  v3 = *(void **)(v0 + 112);
  if (!v2[2])
  {
    v18 = *(void **)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 64);
    lazy protocol witness table accessor for type FileExportOperation.Error and conformance FileExportOperation.Error();
    v19 = (void *)swift_allocError();
    *v20 = 0;
    FileExportOperation.didFinish(with:)((uint64_t)v19);

    v16 = v3;
    v17 = 0;
    goto LABEL_9;
  }
  v4 = objc_allocWithZone(MEMORY[0x1E0DC3730]);
  type metadata accessor for URL();
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  outlined consume of Result<[URL], Error>(v3, 0);
  v6 = objc_msgSend(v4, sel_initForExportingURLs_, isa);

  outlined consume of Result<[URL], Error>(v3, 0);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = (_BYTE *)(v7 + *(int *)(*(_QWORD *)(v0 + 56) + 48));
  if ((v8[8] & 1) == 0 && (*v8 & 4) != 0)
  {
    objc_msgSend(v6, sel_setShouldShowFileExtensions_, 1);
    v7 = *(_QWORD *)(v0 + 64);
  }
  v9 = *(void **)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 24);
  objc_msgSend(v6, sel_setDelegate_, v10);
  objc_msgSend(v9, sel_presentViewController_animated_completion_, v6, 1, 0);
  v11 = (_QWORD *)(v10 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  v12 = *(void **)(v10 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  *v11 = v6;
  v11[1] = &protocol witness table for UIDocumentPickerViewController;

LABEL_10:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, type metadata accessor for FileExportOperation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall FileImportExportBridge.documentPicker(_:didPickDocumentsAt:)(UIDocumentPickerViewController *_, Swift::OpaquePointer didPickDocumentsAt)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  UIDocumentPickerViewController *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t v29;

  v5 = type metadata accessor for FileExportOperation(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FileImportOperation(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FileImportExportBridge.PresentationState(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v2 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
  v22 = *(UIDocumentPickerViewController **)(v2 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  if (v22)
    v23 = v22 == _;
  else
    v23 = 0;
  if (v23)
  {
    v24 = v2 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentationState;
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, (uint64_t)v20, type metadata accessor for FileImportExportBridge.PresentationState);
    outlined init with take of TableCellFormula((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
    v25 = type metadata accessor for FileImportExportBridge.Presentation(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v16, 1, v25) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v8, type metadata accessor for FileExportOperation);
        FileExportOperation.didFinish(with:)((uint64_t)didPickDocumentsAt._rawValue);
        v26 = (uint64_t)v8;
        v27 = type metadata accessor for FileExportOperation;
      }
      else
      {
        outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v12, type metadata accessor for FileImportOperation);
        (*(void (**)(void *, _QWORD))&v12[*(int *)(v9 + 56)])(didPickDocumentsAt._rawValue, 0);
        v26 = (uint64_t)v12;
        v27 = type metadata accessor for FileImportOperation;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, v27);
    }
    v28 = *(void **)v21;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;

  }
}

Swift::Void __swiftcall FileImportExportBridge.documentPickerWasCancelled(_:)(UIDocumentPickerViewController *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  UIDocumentPickerViewController *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v3 = type metadata accessor for FileExportOperation(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FileImportOperation(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FileImportExportBridge.PresentationState(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
  v20 = *(UIDocumentPickerViewController **)(v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  if (v20)
    v21 = v20 == a1;
  else
    v21 = 0;
  if (v21)
  {
    v22 = v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentationState;
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v18, type metadata accessor for FileImportExportBridge.PresentationState);
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FileImportExportBridge.Presentation?);
    v23 = type metadata accessor for FileImportExportBridge.Presentation(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v14, 1, v23) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v6, type metadata accessor for FileExportOperation);
        FileExportOperation.didCancel()();
        v24 = (uint64_t)v6;
        v25 = type metadata accessor for FileExportOperation;
      }
      else
      {
        v26 = outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v10, type metadata accessor for FileImportOperation);
        (*(void (**)(uint64_t))&v10[*(int *)(v7 + 60)])(v26);
        v24 = (uint64_t)v10;
        v25 = type metadata accessor for FileImportOperation;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, v25);
    }
    v27 = *(void **)v19;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;

  }
}

id protocol witness for PlatformFilePicker.dismiss() in conformance UIDocumentPickerViewController()
{
  void *v0;

  return objc_msgSend(v0, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

uint64_t ObjC metadata update function for FileImportExportBridge()
{
  return type metadata accessor for FileImportExportBridge(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for FileImportExportBridge.PresentationState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for FileImportExportBridge.Presentation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for FileImportExportBridge.Presentation?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v63 = v8;
      v64 = v7;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        v11 = (char *)&loc_187711B0C + 4 * byte_187C52610[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = (int *)type metadata accessor for FileImportOperation(0);
      v14 = v13[5];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for URL();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      if (v19(v16, 1, v17))
      {
        type metadata accessor for URL?(0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v21 = v13[6];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      if (*(uint64_t *)((char *)a2 + v21 + 24))
      {
        v24 = *(_QWORD *)v23;
        v25 = *((_QWORD *)v23 + 1);
        v26 = v23[16];
        outlined copy of Text.Storage(*(_QWORD *)v23, v25, v26);
        *(_QWORD *)v22 = v24;
        *((_QWORD *)v22 + 1) = v25;
        v22[16] = v26;
        *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v27 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v27;
      }
      v28 = v13[7];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      if (*(uint64_t *)((char *)a2 + v28 + 24))
      {
        v31 = *(_QWORD *)v30;
        v32 = *((_QWORD *)v30 + 1);
        v33 = v30[16];
        outlined copy of Text.Storage(*(_QWORD *)v30, v32, v33);
        *(_QWORD *)v29 = v31;
        *((_QWORD *)v29 + 1) = v32;
        v29[16] = v33;
        *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v34 = *((_OWORD *)v30 + 1);
        *(_OWORD *)v29 = *(_OWORD *)v30;
        *((_OWORD *)v29 + 1) = v34;
      }
      v35 = v13[8];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      if (*(uint64_t *)((char *)a2 + v35 + 24))
      {
        v38 = *(_QWORD *)v37;
        v39 = *((_QWORD *)v37 + 1);
        v40 = v37[16];
        outlined copy of Text.Storage(*(_QWORD *)v37, v39, v40);
        *(_QWORD *)v36 = v38;
        *((_QWORD *)v36 + 1) = v39;
        v36[16] = v40;
        *((_QWORD *)v36 + 3) = *((_QWORD *)v37 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v41 = *((_OWORD *)v37 + 1);
        *(_OWORD *)v36 = *(_OWORD *)v37;
        *((_OWORD *)v36 + 1) = v41;
      }
      *(uint64_t *)((char *)a1 + v13[9]) = *(uint64_t *)((char *)a2 + v13[9]);
      *((_BYTE *)a1 + v13[10]) = *((_BYTE *)a2 + v13[10]);
      v42 = v13[11];
      v43 = (char *)a1 + v42;
      v44 = (char *)a2 + v42;
      type metadata accessor for Predicate<Pack{URL}>();
      v46 = v45;
      v47 = *(_QWORD *)(v45 - 8);
      v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
      swift_bridgeObjectRetain();
      if (v48(v44, 1, v46))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v43, v44, v46);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v43, 0, 1, v46);
      }
      *((_BYTE *)a1 + v13[12]) = *((_BYTE *)a2 + v13[12]);
      v50 = v13[13];
      v51 = (char *)a1 + v50;
      v52 = (char *)a2 + v50;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      v53 = v13[14];
      v54 = (uint64_t *)((char *)a1 + v53);
      v55 = (uint64_t *)((char *)a2 + v53);
      v56 = v55[1];
      *v54 = *v55;
      v54[1] = v56;
      v57 = v13[15];
      v58 = (uint64_t *)((char *)a1 + v57);
      v59 = (uint64_t *)((char *)a2 + v57);
      v60 = v59[1];
      *v58 = *v59;
      v58[1] = v60;
      swift_retain();
      swift_retain();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v63 + 56))(a1, 0, 1, v64);
    }
    v61 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_DWORD *)((char *)a1 + v61) = *(_DWORD *)((char *)a2 + v61);
  }
  return a1;
}

_QWORD *initializeWithCopy for FileImportExportBridge.PresentationState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v61 = v7;
    v62 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      v9 = (char *)&loc_1877122B8 + 4 * byte_187C52618[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = (int *)type metadata accessor for FileImportOperation(0);
    v12 = v11[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for URL();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      type metadata accessor for URL?(0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = v11[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    if (*(_QWORD *)((char *)a2 + v19 + 24))
    {
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      v24 = v21[16];
      outlined copy of Text.Storage(*(_QWORD *)v21, v23, v24);
      *(_QWORD *)v20 = v22;
      *((_QWORD *)v20 + 1) = v23;
      v20[16] = v24;
      *((_QWORD *)v20 + 3) = *((_QWORD *)v21 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v25 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v25;
    }
    v26 = v11[7];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    if (*(_QWORD *)((char *)a2 + v26 + 24))
    {
      v29 = *(_QWORD *)v28;
      v30 = *((_QWORD *)v28 + 1);
      v31 = v28[16];
      outlined copy of Text.Storage(*(_QWORD *)v28, v30, v31);
      *(_QWORD *)v27 = v29;
      *((_QWORD *)v27 + 1) = v30;
      v27[16] = v31;
      *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v32 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v32;
    }
    v33 = v11[8];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    if (*(_QWORD *)((char *)a2 + v33 + 24))
    {
      v36 = *(_QWORD *)v35;
      v37 = *((_QWORD *)v35 + 1);
      v38 = v35[16];
      outlined copy of Text.Storage(*(_QWORD *)v35, v37, v38);
      *(_QWORD *)v34 = v36;
      *((_QWORD *)v34 + 1) = v37;
      v34[16] = v38;
      *((_QWORD *)v34 + 3) = *((_QWORD *)v35 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v39 = *((_OWORD *)v35 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *((_OWORD *)v34 + 1) = v39;
    }
    *(_QWORD *)((char *)a1 + v11[9]) = *(_QWORD *)((char *)a2 + v11[9]);
    *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
    v40 = v11[11];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    type metadata accessor for Predicate<Pack{URL}>();
    v44 = v43;
    v45 = *(_QWORD *)(v43 - 8);
    v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain();
    if (v46(v42, 1, v44))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v41, v42, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
    }
    a3 = v62;
    *((_BYTE *)a1 + v11[12]) = *((_BYTE *)a2 + v11[12]);
    v48 = v11[13];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    *(_QWORD *)v49 = *(_QWORD *)v50;
    v49[8] = v50[8];
    v51 = v11[14];
    v52 = (_QWORD *)((char *)a1 + v51);
    v53 = (_QWORD *)((char *)a2 + v51);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = v11[15];
    v56 = (_QWORD *)((char *)a1 + v55);
    v57 = (_QWORD *)((char *)a2 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    swift_retain();
    swift_retain();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(a1, 0, 1, v6);
  }
  v59 = *(int *)(a3 + 24);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + v59) = *(_DWORD *)((char *)a2 + v59);
  return a1;
}

_QWORD *assignWithCopy for FileImportExportBridge.PresentationState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v113 = v7;
      v114 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        v11 = (char *)&loc_187712A5C + 4 * word_187C5261C[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      *a1 = *a2;
      a1[1] = a2[1];
      v14 = (int *)type metadata accessor for FileImportOperation(0);
      v15 = v14[5];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for URL();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        type metadata accessor for URL?(0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v30 = v14[6];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      if (*(_QWORD *)((char *)a2 + v30 + 24))
      {
        v33 = *(_QWORD *)v32;
        v34 = *((_QWORD *)v32 + 1);
        v35 = v32[16];
        outlined copy of Text.Storage(*(_QWORD *)v32, v34, v35);
        *(_QWORD *)v31 = v33;
        *((_QWORD *)v31 + 1) = v34;
        v31[16] = v35;
        *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v36 = *((_OWORD *)v32 + 1);
        *(_OWORD *)v31 = *(_OWORD *)v32;
        *((_OWORD *)v31 + 1) = v36;
      }
      v37 = v14[7];
      v38 = (char *)a1 + v37;
      v39 = (char *)a2 + v37;
      if (*(_QWORD *)((char *)a2 + v37 + 24))
      {
        v40 = *(_QWORD *)v39;
        v41 = *((_QWORD *)v39 + 1);
        v42 = v39[16];
        outlined copy of Text.Storage(*(_QWORD *)v39, v41, v42);
        *(_QWORD *)v38 = v40;
        *((_QWORD *)v38 + 1) = v41;
        v38[16] = v42;
        *((_QWORD *)v38 + 3) = *((_QWORD *)v39 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v43 = *((_OWORD *)v39 + 1);
        *(_OWORD *)v38 = *(_OWORD *)v39;
        *((_OWORD *)v38 + 1) = v43;
      }
      v44 = v14[8];
      v45 = (char *)a1 + v44;
      v46 = (char *)a2 + v44;
      if (*(_QWORD *)((char *)a2 + v44 + 24))
      {
        v47 = *(_QWORD *)v46;
        v48 = *((_QWORD *)v46 + 1);
        v49 = v46[16];
        outlined copy of Text.Storage(*(_QWORD *)v46, v48, v49);
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v48;
        v45[16] = v49;
        *((_QWORD *)v45 + 3) = *((_QWORD *)v46 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v50 = *((_OWORD *)v46 + 1);
        *(_OWORD *)v45 = *(_OWORD *)v46;
        *((_OWORD *)v45 + 1) = v50;
      }
      *(_QWORD *)((char *)a1 + v14[9]) = *(_QWORD *)((char *)a2 + v14[9]);
      *((_BYTE *)a1 + v14[10]) = *((_BYTE *)a2 + v14[10]);
      v51 = v14[11];
      v52 = (char *)a1 + v51;
      v53 = (char *)a2 + v51;
      type metadata accessor for Predicate<Pack{URL}>();
      v55 = v54;
      v56 = *(_QWORD *)(v54 - 8);
      v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      swift_bridgeObjectRetain();
      if (v57(v53, 1, v55))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v52, v53, v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v52, 0, 1, v55);
      }
      *((_BYTE *)a1 + v14[12]) = *((_BYTE *)a2 + v14[12]);
      v59 = v14[13];
      v60 = (char *)a1 + v59;
      v61 = (char *)a2 + v59;
      v62 = *(_QWORD *)v61;
      v60[8] = v61[8];
      *(_QWORD *)v60 = v62;
      v63 = v14[14];
      v64 = (_QWORD *)((char *)a1 + v63);
      v65 = (_QWORD *)((char *)a2 + v63);
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      v67 = v14[15];
      v68 = (_QWORD *)((char *)a1 + v67);
      v69 = (_QWORD *)((char *)a2 + v67);
      v70 = v69[1];
      *v68 = *v69;
      v68[1] = v70;
      swift_retain();
      swift_retain();
      a3 = v114;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v113 + 56))(a1, 0, 1, v6);
      goto LABEL_43;
    }
LABEL_7:
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_43;
  }
  if (v10)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    v115 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      v13 = (char *)&loc_187712B4C + 4 * word_187C52624[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    *a1 = *a2;
    a1[1] = a2[1];
    v22 = (int *)type metadata accessor for FileImportOperation(0);
    v23 = v22[5];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for URL();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_bridgeObjectRetain();
    if (v28(v25, 1, v26))
    {
      type metadata accessor for URL?(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v71 = v22[6];
    v72 = (char *)a1 + v71;
    v73 = (char *)a2 + v71;
    if (*(_QWORD *)((char *)a2 + v71 + 24))
    {
      v74 = *(_QWORD *)v73;
      v75 = *((_QWORD *)v73 + 1);
      v76 = v73[16];
      outlined copy of Text.Storage(*(_QWORD *)v73, v75, v76);
      *(_QWORD *)v72 = v74;
      *((_QWORD *)v72 + 1) = v75;
      v72[16] = v76;
      *((_QWORD *)v72 + 3) = *((_QWORD *)v73 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v77 = *((_OWORD *)v73 + 1);
      *(_OWORD *)v72 = *(_OWORD *)v73;
      *((_OWORD *)v72 + 1) = v77;
    }
    v78 = v22[7];
    v79 = (char *)a1 + v78;
    v80 = (char *)a2 + v78;
    if (*(_QWORD *)((char *)a2 + v78 + 24))
    {
      v81 = *(_QWORD *)v80;
      v82 = *((_QWORD *)v80 + 1);
      v83 = v80[16];
      outlined copy of Text.Storage(*(_QWORD *)v80, v82, v83);
      *(_QWORD *)v79 = v81;
      *((_QWORD *)v79 + 1) = v82;
      v79[16] = v83;
      *((_QWORD *)v79 + 3) = *((_QWORD *)v80 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v84 = *((_OWORD *)v80 + 1);
      *(_OWORD *)v79 = *(_OWORD *)v80;
      *((_OWORD *)v79 + 1) = v84;
    }
    v85 = v22[8];
    v86 = (char *)a1 + v85;
    v87 = (char *)a2 + v85;
    if (*(_QWORD *)((char *)a2 + v85 + 24))
    {
      v88 = *(_QWORD *)v87;
      v89 = *((_QWORD *)v87 + 1);
      v90 = v87[16];
      outlined copy of Text.Storage(*(_QWORD *)v87, v89, v90);
      *(_QWORD *)v86 = v88;
      *((_QWORD *)v86 + 1) = v89;
      v86[16] = v90;
      *((_QWORD *)v86 + 3) = *((_QWORD *)v87 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v91 = *((_OWORD *)v87 + 1);
      *(_OWORD *)v86 = *(_OWORD *)v87;
      *((_OWORD *)v86 + 1) = v91;
    }
    *(_QWORD *)((char *)a1 + v22[9]) = *(_QWORD *)((char *)a2 + v22[9]);
    *((_BYTE *)a1 + v22[10]) = *((_BYTE *)a2 + v22[10]);
    v92 = v22[11];
    v93 = (char *)a1 + v92;
    v94 = (char *)a2 + v92;
    type metadata accessor for Predicate<Pack{URL}>();
    v96 = v95;
    v97 = *(_QWORD *)(v95 - 8);
    v98 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    swift_bridgeObjectRetain();
    if (v98(v94, 1, v96))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v93, v94, v96);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v93, 0, 1, v96);
    }
    *((_BYTE *)a1 + v22[12]) = *((_BYTE *)a2 + v22[12]);
    v100 = v22[13];
    v101 = (char *)a1 + v100;
    v102 = (char *)a2 + v100;
    v103 = *(_QWORD *)v102;
    v101[8] = v102[8];
    *(_QWORD *)v101 = v103;
    v104 = v22[14];
    v105 = (_QWORD *)((char *)a1 + v104);
    v106 = (_QWORD *)((char *)a2 + v104);
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    v108 = v22[15];
    v109 = (_QWORD *)((char *)a1 + v108);
    v110 = (_QWORD *)((char *)a2 + v108);
    v111 = v110[1];
    *v109 = *v110;
    v109[1] = v111;
    swift_retain();
    swift_retain();
    swift_storeEnumTagMultiPayload();
    a3 = v115;
  }
LABEL_43:
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for FileImportExportBridge.PresentationState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;

  v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v17 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
        v18 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v18 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v18 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v18 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v18 + 24));
        swift_storeEnumTagMultiPayload();
      }
      v19 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v19[5]) = *(_OWORD *)((char *)a2 + v19[5]);
      v20 = v19[6];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for URL();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        type metadata accessor for URL?(0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v45 = v19[7];
      v46 = (_OWORD *)((char *)a1 + v45);
      v47 = (_OWORD *)((char *)a2 + v45);
      v48 = v47[1];
      *v46 = *v47;
      v46[1] = v48;
      v49 = v19[8];
      v50 = (_OWORD *)((char *)a1 + v49);
      v51 = (_OWORD *)((char *)a2 + v49);
      v52 = v51[1];
      *v50 = *v51;
      v50[1] = v52;
      v53 = v19[9];
      v54 = (_OWORD *)((char *)a1 + v53);
      v55 = (_OWORD *)((char *)a2 + v53);
      v56 = v55[1];
      *v54 = *v55;
      v54[1] = v56;
      v57 = v19[10];
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      type metadata accessor for Predicate<Pack{URL}>();
      v61 = v60;
      v62 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v59, 1, v60))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v58, v59, v61);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v61);
      }
      *((_BYTE *)a1 + v19[11]) = *((_BYTE *)a2 + v19[11]);
      v67 = v19[12];
      v68 = (char *)a1 + v67;
      v69 = (char *)a2 + v67;
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
    }
    else
    {
      *a1 = *a2;
      v10 = (int *)type metadata accessor for FileImportOperation(0);
      v11 = v10[5];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for URL();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        type metadata accessor for URL?(0);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v26 = v10[6];
      v27 = (_OWORD *)((char *)a1 + v26);
      v28 = (_OWORD *)((char *)a2 + v26);
      v29 = v28[1];
      *v27 = *v28;
      v27[1] = v29;
      v30 = v10[7];
      v31 = (_OWORD *)((char *)a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      v33 = v32[1];
      *v31 = *v32;
      v31[1] = v33;
      v34 = v10[8];
      v35 = (_OWORD *)((char *)a1 + v34);
      v36 = (_OWORD *)((char *)a2 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      *(_QWORD *)((char *)a1 + v10[9]) = *(_QWORD *)((char *)a2 + v10[9]);
      *((_BYTE *)a1 + v10[10]) = *((_BYTE *)a2 + v10[10]);
      v38 = v10[11];
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      type metadata accessor for Predicate<Pack{URL}>();
      v42 = v41;
      v43 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v41))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v39, v40, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
      }
      *((_BYTE *)a1 + v10[12]) = *((_BYTE *)a2 + v10[12]);
      v64 = v10[13];
      v65 = (char *)a1 + v64;
      v66 = (char *)a2 + v64;
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      *(_OWORD *)((char *)a1 + v10[14]) = *(_OWORD *)((char *)a2 + v10[14]);
      *(_OWORD *)((char *)a1 + v10[15]) = *(_OWORD *)((char *)a2 + v10[15]);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v70 = *(int *)(a3 + 24);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + v70) = *(_DWORD *)((char *)a2 + v70);
  return a1;
}

_OWORD *assignWithTake for FileImportExportBridge.PresentationState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  __int128 v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  _OWORD *v94;
  __int128 v95;
  uint64_t v96;
  _OWORD *v97;
  _OWORD *v98;
  __int128 v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  _OWORD *v113;
  __int128 v114;
  uint64_t v115;
  _OWORD *v116;
  _OWORD *v117;
  __int128 v118;
  uint64_t v119;
  _OWORD *v120;
  _OWORD *v121;
  __int128 v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;

  v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v11 = type metadata accessor for FileExportOperation.Mode(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          v21 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
          v22 = type metadata accessor for FileExportOperation.Move(0);
          *(_OWORD *)((char *)a1 + *(int *)(v22 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v22 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v22 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v22 + 24));
          swift_storeEnumTagMultiPayload();
        }
        v23 = (int *)type metadata accessor for FileExportOperation(0);
        *(_OWORD *)((char *)a1 + v23[5]) = *(_OWORD *)((char *)a2 + v23[5]);
        v24 = v23[6];
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for URL();
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          type metadata accessor for URL?(0);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        v56 = v23[7];
        v57 = (_OWORD *)((char *)a1 + v56);
        v58 = (_OWORD *)((char *)a2 + v56);
        v59 = v58[1];
        *v57 = *v58;
        v57[1] = v59;
        v60 = v23[8];
        v61 = (_OWORD *)((char *)a1 + v60);
        v62 = (_OWORD *)((char *)a2 + v60);
        v63 = v62[1];
        *v61 = *v62;
        v61[1] = v63;
        v64 = v23[9];
        v65 = (_OWORD *)((char *)a1 + v64);
        v66 = (_OWORD *)((char *)a2 + v64);
        v67 = v66[1];
        *v65 = *v66;
        v65[1] = v67;
        v68 = v23[10];
        v69 = (char *)a1 + v68;
        v70 = (char *)a2 + v68;
        type metadata accessor for Predicate<Pack{URL}>();
        v72 = v71;
        v73 = *(_QWORD *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v70, 1, v71))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v69, v70, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v69, 0, 1, v72);
        }
        *((_BYTE *)a1 + v23[11]) = *((_BYTE *)a2 + v23[11]);
        v78 = v23[12];
        v79 = (char *)a1 + v78;
        v80 = (char *)a2 + v78;
        *(_QWORD *)v79 = *(_QWORD *)v80;
        v79[8] = v80[8];
      }
      else
      {
        *a1 = *a2;
        v14 = (int *)type metadata accessor for FileImportOperation(0);
        v15 = v14[5];
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for URL();
        v19 = *(_QWORD *)(v18 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        {
          type metadata accessor for URL?(0);
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
        }
        v37 = v14[6];
        v38 = (_OWORD *)((char *)a1 + v37);
        v39 = (_OWORD *)((char *)a2 + v37);
        v40 = v39[1];
        *v38 = *v39;
        v38[1] = v40;
        v41 = v14[7];
        v42 = (_OWORD *)((char *)a1 + v41);
        v43 = (_OWORD *)((char *)a2 + v41);
        v44 = v43[1];
        *v42 = *v43;
        v42[1] = v44;
        v45 = v14[8];
        v46 = (_OWORD *)((char *)a1 + v45);
        v47 = (_OWORD *)((char *)a2 + v45);
        v48 = v47[1];
        *v46 = *v47;
        v46[1] = v48;
        *(_QWORD *)((char *)a1 + v14[9]) = *(_QWORD *)((char *)a2 + v14[9]);
        *((_BYTE *)a1 + v14[10]) = *((_BYTE *)a2 + v14[10]);
        v49 = v14[11];
        v50 = (char *)a1 + v49;
        v51 = (char *)a2 + v49;
        type metadata accessor for Predicate<Pack{URL}>();
        v53 = v52;
        v54 = *(_QWORD *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v51, 1, v52))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v50, v51, v53);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v50, 0, 1, v53);
        }
        *((_BYTE *)a1 + v14[12]) = *((_BYTE *)a2 + v14[12]);
        v75 = v14[13];
        v76 = (char *)a1 + v75;
        v77 = (char *)a2 + v75;
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v76[8] = v77[8];
        *(_OWORD *)((char *)a1 + v14[14]) = *(_OWORD *)((char *)a2 + v14[14]);
        *(_OWORD *)((char *)a1 + v14[15]) = *(_OWORD *)((char *)a2 + v14[15]);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_31;
    }
LABEL_8:
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_31;
  }
  if (v10)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        v83 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(a1, a2, v83);
        v84 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v84 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v84 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v84 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v84 + 24));
        swift_storeEnumTagMultiPayload();
      }
      v85 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v85[5]) = *(_OWORD *)((char *)a2 + v85[5]);
      v86 = v85[6];
      v87 = (char *)a1 + v86;
      v88 = (char *)a2 + v86;
      v89 = type metadata accessor for URL();
      v90 = *(_QWORD *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        type metadata accessor for URL?(0);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v87, v88, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      v111 = v85[7];
      v112 = (_OWORD *)((char *)a1 + v111);
      v113 = (_OWORD *)((char *)a2 + v111);
      v114 = v113[1];
      *v112 = *v113;
      v112[1] = v114;
      v115 = v85[8];
      v116 = (_OWORD *)((char *)a1 + v115);
      v117 = (_OWORD *)((char *)a2 + v115);
      v118 = v117[1];
      *v116 = *v117;
      v116[1] = v118;
      v119 = v85[9];
      v120 = (_OWORD *)((char *)a1 + v119);
      v121 = (_OWORD *)((char *)a2 + v119);
      v122 = v121[1];
      *v120 = *v121;
      v120[1] = v122;
      v123 = v85[10];
      v124 = (char *)a1 + v123;
      v125 = (char *)a2 + v123;
      type metadata accessor for Predicate<Pack{URL}>();
      v127 = v126;
      v128 = *(_QWORD *)(v126 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v125, 1, v126))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v124, v125, v127);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v124, 0, 1, v127);
      }
      *((_BYTE *)a1 + v85[11]) = *((_BYTE *)a2 + v85[11]);
      v133 = v85[12];
      v134 = (char *)a1 + v133;
      v135 = (char *)a2 + v133;
      *(_QWORD *)v134 = *(_QWORD *)v135;
      v134[8] = v135[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1 = *a2;
      v30 = (int *)type metadata accessor for FileImportOperation(0);
      v31 = v30[5];
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      v34 = type metadata accessor for URL();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        type metadata accessor for URL?(0);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v92 = v30[6];
      v93 = (_OWORD *)((char *)a1 + v92);
      v94 = (_OWORD *)((char *)a2 + v92);
      v95 = v94[1];
      *v93 = *v94;
      v93[1] = v95;
      v96 = v30[7];
      v97 = (_OWORD *)((char *)a1 + v96);
      v98 = (_OWORD *)((char *)a2 + v96);
      v99 = v98[1];
      *v97 = *v98;
      v97[1] = v99;
      v100 = v30[8];
      v101 = (_OWORD *)((char *)a1 + v100);
      v102 = (_OWORD *)((char *)a2 + v100);
      v103 = v102[1];
      *v101 = *v102;
      v101[1] = v103;
      *(_QWORD *)((char *)a1 + v30[9]) = *(_QWORD *)((char *)a2 + v30[9]);
      *((_BYTE *)a1 + v30[10]) = *((_BYTE *)a2 + v30[10]);
      v104 = v30[11];
      v105 = (char *)a1 + v104;
      v106 = (char *)a2 + v104;
      type metadata accessor for Predicate<Pack{URL}>();
      v108 = v107;
      v109 = *(_QWORD *)(v107 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v106, 1, v107))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v105, v106, v108);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v105, 0, 1, v108);
      }
      *((_BYTE *)a1 + v30[12]) = *((_BYTE *)a2 + v30[12]);
      v130 = v30[13];
      v131 = (char *)a1 + v130;
      v132 = (char *)a2 + v130;
      *(_QWORD *)v131 = *(_QWORD *)v132;
      v131[8] = v132[8];
      *(_OWORD *)((char *)a1 + v30[14]) = *(_OWORD *)((char *)a2 + v30[14]);
      *(_OWORD *)((char *)a1 + v30[15]) = *(_OWORD *)((char *)a2 + v30[15]);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_31:
  v81 = *(int *)(a3 + 24);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + v81) = *(_DWORD *)((char *)a2 + v81);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileImportExportBridge.PresentationState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18771459C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FileImportExportBridge.Presentation?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FileImportExportBridge.PresentationState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1877145E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FileImportExportBridge.Presentation?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

_QWORD *initializeBufferWithCopyOfBuffer for FileImportExportBridge.Presentation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      v6 = (char *)&loc_1877146A4 + 4 * word_187C5262C[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = (int *)type metadata accessor for FileImportOperation(0);
    v10 = v9[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for URL();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      type metadata accessor for URL?(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v17 = v9[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    if (*(_QWORD *)((char *)a2 + v17 + 24))
    {
      v20 = *(_QWORD *)v19;
      v21 = *((_QWORD *)v19 + 1);
      v22 = v19[16];
      outlined copy of Text.Storage(*(_QWORD *)v19, v21, v22);
      *(_QWORD *)v18 = v20;
      *((_QWORD *)v18 + 1) = v21;
      v18[16] = v22;
      *((_QWORD *)v18 + 3) = *((_QWORD *)v19 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v23;
    }
    v24 = v9[7];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    if (*(_QWORD *)((char *)a2 + v24 + 24))
    {
      v27 = *(_QWORD *)v26;
      v28 = *((_QWORD *)v26 + 1);
      v29 = v26[16];
      outlined copy of Text.Storage(*(_QWORD *)v26, v28, v29);
      *(_QWORD *)v25 = v27;
      *((_QWORD *)v25 + 1) = v28;
      v25[16] = v29;
      *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = *((_OWORD *)v26 + 1);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v30;
    }
    v31 = v9[8];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    if (*(_QWORD *)((char *)a2 + v31 + 24))
    {
      v34 = *(_QWORD *)v33;
      v35 = *((_QWORD *)v33 + 1);
      v36 = v33[16];
      outlined copy of Text.Storage(*(_QWORD *)v33, v35, v36);
      *(_QWORD *)v32 = v34;
      *((_QWORD *)v32 + 1) = v35;
      v32[16] = v36;
      *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v37 = *((_OWORD *)v33 + 1);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v37;
    }
    *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
    *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    v38 = v9[11];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    type metadata accessor for Predicate<Pack{URL}>();
    v42 = v41;
    v43 = *(_QWORD *)(v41 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    if (v44(v40, 1, v42))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v40, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
    }
    *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
    v46 = v9[13];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = v9[14];
    v50 = (_QWORD *)((char *)a1 + v49);
    v51 = (_QWORD *)((char *)a2 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = v9[15];
    v54 = (_QWORD *)((char *)a1 + v53);
    v55 = (_QWORD *)((char *)a2 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    swift_retain();
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FileImportExportBridge.Presentation(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for FileExportOperation.Mode(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v2 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
        type metadata accessor for FileExportOperation.Move(0);
        swift_release();
        goto LABEL_18;
      case 1u:
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_18;
      case 2u:
        outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_18;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_18:
        swift_release();
        break;
      default:
        break;
    }
    v15 = (int *)type metadata accessor for FileExportOperation(0);
    swift_bridgeObjectRelease();
    v16 = a1 + v15[6];
    v17 = type metadata accessor for URL();
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    v19 = a1 + v15[7];
    if (*(_QWORD *)(v19 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
      swift_bridgeObjectRelease();
    }
    v20 = a1 + v15[8];
    if (*(_QWORD *)(v20 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
      swift_bridgeObjectRelease();
    }
    v21 = a1 + v15[9];
    if (*(_QWORD *)(v21 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
      swift_bridgeObjectRelease();
    }
    v22 = a1 + v15[10];
    type metadata accessor for Predicate<Pack{URL}>();
    v24 = v23;
    v25 = *(_QWORD *)(v23 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for FileImportOperation(0);
    v4 = a1 + v3[5];
    v5 = type metadata accessor for URL();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v7 = a1 + v3[6];
    if (*(_QWORD *)(v7 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
      swift_bridgeObjectRelease();
    }
    v8 = a1 + v3[7];
    if (*(_QWORD *)(v8 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
      swift_bridgeObjectRelease();
    }
    v9 = a1 + v3[8];
    if (*(_QWORD *)(v9 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v10 = a1 + v3[11];
    type metadata accessor for Predicate<Pack{URL}>();
    v12 = v11;
    v13 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for FileImportExportBridge.Presentation(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for FileExportOperation.Mode(0);
    v4 = (char *)&loc_187715168 + 4 * byte_187C52638[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (int *)type metadata accessor for FileImportOperation(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  if (*(_QWORD *)((char *)a2 + v14 + 24))
  {
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    v19 = v16[16];
    outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 1) = v18;
    v15[16] = v19;
    *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
  }
  v21 = v6[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  if (*(_QWORD *)((char *)a2 + v21 + 24))
  {
    v24 = *(_QWORD *)v23;
    v25 = *((_QWORD *)v23 + 1);
    v26 = v23[16];
    outlined copy of Text.Storage(*(_QWORD *)v23, v25, v26);
    *(_QWORD *)v22 = v24;
    *((_QWORD *)v22 + 1) = v25;
    v22[16] = v26;
    *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
  }
  v28 = v6[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  if (*(_QWORD *)((char *)a2 + v28 + 24))
  {
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    v33 = v30[16];
    outlined copy of Text.Storage(*(_QWORD *)v30, v32, v33);
    *(_QWORD *)v29 = v31;
    *((_QWORD *)v29 + 1) = v32;
    v29[16] = v33;
    *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v34;
  }
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
  v35 = v6[11];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  type metadata accessor for Predicate<Pack{URL}>();
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v41(v37, 1, v39))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v36, v37, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
  }
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  v43 = v6[13];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v46 = v6[14];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = v6[15];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  swift_retain();
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for FileImportExportBridge.Presentation(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      v4 = (char *)&loc_1877158A4 + 4 * byte_187C5263C[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    *a1 = *a2;
    a1[1] = a2[1];
    v5 = (int *)type metadata accessor for FileImportOperation(0);
    v6 = v5[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    v13 = v5[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    if (*(_QWORD *)((char *)a2 + v13 + 24))
    {
      v16 = *(_QWORD *)v15;
      v17 = *((_QWORD *)v15 + 1);
      v18 = v15[16];
      outlined copy of Text.Storage(*(_QWORD *)v15, v17, v18);
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v17;
      v14[16] = v18;
      *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v19;
    }
    v20 = v5[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if (*(_QWORD *)((char *)a2 + v20 + 24))
    {
      v23 = *(_QWORD *)v22;
      v24 = *((_QWORD *)v22 + 1);
      v25 = v22[16];
      outlined copy of Text.Storage(*(_QWORD *)v22, v24, v25);
      *(_QWORD *)v21 = v23;
      *((_QWORD *)v21 + 1) = v24;
      v21[16] = v25;
      *((_QWORD *)v21 + 3) = *((_QWORD *)v22 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v26;
    }
    v27 = v5[8];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    if (*(_QWORD *)((char *)a2 + v27 + 24))
    {
      v30 = *(_QWORD *)v29;
      v31 = *((_QWORD *)v29 + 1);
      v32 = v29[16];
      outlined copy of Text.Storage(*(_QWORD *)v29, v31, v32);
      *(_QWORD *)v28 = v30;
      *((_QWORD *)v28 + 1) = v31;
      v28[16] = v32;
      *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v33 = *((_OWORD *)v29 + 1);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v33;
    }
    *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
    *((_BYTE *)a1 + v5[10]) = *((_BYTE *)a2 + v5[10]);
    v34 = v5[11];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    type metadata accessor for Predicate<Pack{URL}>();
    v38 = v37;
    v39 = *(_QWORD *)(v37 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain();
    if (v40(v36, 1, v38))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v35, v36, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
    }
    *((_BYTE *)a1 + v5[12]) = *((_BYTE *)a2 + v5[12]);
    v42 = v5[13];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    v45 = *(_QWORD *)v44;
    v43[8] = v44[8];
    *(_QWORD *)v43 = v45;
    v46 = v5[14];
    v47 = (_QWORD *)((char *)a1 + v46);
    v48 = (_QWORD *)((char *)a2 + v46);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = v5[15];
    v51 = (_QWORD *)((char *)a1 + v50);
    v52 = (_QWORD *)((char *)a2 + v50);
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    swift_retain();
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for FileImportExportBridge.Presentation(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for FileExportOperation.Mode(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for URL();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 20));
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
      swift_storeEnumTagMultiPayload();
    }
    v14 = (int *)type metadata accessor for FileExportOperation(0);
    *(_OWORD *)((char *)a1 + v14[5]) = *(_OWORD *)((char *)a2 + v14[5]);
    v15 = v14[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for URL();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      type metadata accessor for URL?(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v40 = v14[7];
    v41 = (_OWORD *)((char *)a1 + v40);
    v42 = (_OWORD *)((char *)a2 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = v14[8];
    v45 = (_OWORD *)((char *)a1 + v44);
    v46 = (_OWORD *)((char *)a2 + v44);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = v14[9];
    v49 = (_OWORD *)((char *)a1 + v48);
    v50 = (_OWORD *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = v14[10];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    type metadata accessor for Predicate<Pack{URL}>();
    v56 = v55;
    v57 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v54, 1, v55))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v54, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
    }
    *((_BYTE *)a1 + v14[11]) = *((_BYTE *)a2 + v14[11]);
    v62 = v14[12];
    v63 = (char *)a1 + v62;
    v64 = (char *)a2 + v62;
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
  }
  else
  {
    *a1 = *a2;
    v5 = (int *)type metadata accessor for FileImportOperation(0);
    v6 = v5[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    v21 = v5[6];
    v22 = (_OWORD *)((char *)a1 + v21);
    v23 = (_OWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v5[7];
    v26 = (_OWORD *)((char *)a1 + v25);
    v27 = (_OWORD *)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v5[8];
    v30 = (_OWORD *)((char *)a1 + v29);
    v31 = (_OWORD *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
    *((_BYTE *)a1 + v5[10]) = *((_BYTE *)a2 + v5[10]);
    v33 = v5[11];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    type metadata accessor for Predicate<Pack{URL}>();
    v37 = v36;
    v38 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v34, v35, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
    }
    *((_BYTE *)a1 + v5[12]) = *((_BYTE *)a2 + v5[12]);
    v59 = v5[13];
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = v61[8];
    *(_OWORD *)((char *)a1 + v5[14]) = *(_OWORD *)((char *)a2 + v5[14]);
    *(_OWORD *)((char *)a1 + v5[15]) = *(_OWORD *)((char *)a2 + v5[15]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FileImportExportBridge.Presentation(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      }
      else
      {
        v12 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v13 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
        swift_storeEnumTagMultiPayload();
      }
      v14 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v14[5]) = *(_OWORD *)((char *)a2 + v14[5]);
      v15 = v14[6];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for URL();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for URL?(0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v40 = v14[7];
      v41 = (_OWORD *)((char *)a1 + v40);
      v42 = (_OWORD *)((char *)a2 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = v14[8];
      v45 = (_OWORD *)((char *)a1 + v44);
      v46 = (_OWORD *)((char *)a2 + v44);
      v47 = v46[1];
      *v45 = *v46;
      v45[1] = v47;
      v48 = v14[9];
      v49 = (_OWORD *)((char *)a1 + v48);
      v50 = (_OWORD *)((char *)a2 + v48);
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      v52 = v14[10];
      v53 = (char *)a1 + v52;
      v54 = (char *)a2 + v52;
      type metadata accessor for Predicate<Pack{URL}>();
      v56 = v55;
      v57 = *(_QWORD *)(v55 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v54, 1, v55))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v54, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
      }
      *((_BYTE *)a1 + v14[11]) = *((_BYTE *)a2 + v14[11]);
      v62 = v14[12];
      v63 = (char *)a1 + v62;
      v64 = (char *)a2 + v62;
      *(_QWORD *)v63 = *(_QWORD *)v64;
      v63[8] = v64[8];
    }
    else
    {
      *a1 = *a2;
      v5 = (int *)type metadata accessor for FileImportOperation(0);
      v6 = v5[5];
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for URL();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        type metadata accessor for URL?(0);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      v21 = v5[6];
      v22 = (_OWORD *)((char *)a1 + v21);
      v23 = (_OWORD *)((char *)a2 + v21);
      v24 = v23[1];
      *v22 = *v23;
      v22[1] = v24;
      v25 = v5[7];
      v26 = (_OWORD *)((char *)a1 + v25);
      v27 = (_OWORD *)((char *)a2 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      v29 = v5[8];
      v30 = (_OWORD *)((char *)a1 + v29);
      v31 = (_OWORD *)((char *)a2 + v29);
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
      *((_BYTE *)a1 + v5[10]) = *((_BYTE *)a2 + v5[10]);
      v33 = v5[11];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      type metadata accessor for Predicate<Pack{URL}>();
      v37 = v36;
      v38 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v34, v35, v37);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
      }
      *((_BYTE *)a1 + v5[12]) = *((_BYTE *)a2 + v5[12]);
      v59 = v5[13];
      v60 = (char *)a1 + v59;
      v61 = (char *)a2 + v59;
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v61[8];
      *(_OWORD *)((char *)a1 + v5[14]) = *(_OWORD *)((char *)a2 + v5[14]);
      *(_OWORD *)((char *)a1 + v5[15]) = *(_OWORD *)((char *)a2 + v5[15]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_18771678C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0)
                                      - 8)
                          + 80);
  v2 = (v1 + 40) & ~v1;
  swift_unknownObjectRelease();

  v3 = v0 + v2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_7:
          v5 = type metadata accessor for URL();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v2, v5);
          type metadata accessor for FileExportOperation.Move(0);
          swift_release();
          goto LABEL_22;
        case 1u:
LABEL_19:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 2u:
LABEL_20:
          outlined consume of FileExportOperation.Storage(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 3u:
LABEL_21:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_22:
          swift_release();
          break;
        default:
          goto LABEL_23;
      }
      goto LABEL_23;
    }
  }
  else
  {
    if (EnumCaseMultiPayload)
      return swift_deallocObject();
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          goto LABEL_19;
        case 2u:
          goto LABEL_20;
        case 3u:
          goto LABEL_21;
        default:
          break;
      }
LABEL_23:
      v17 = (int *)type metadata accessor for FileExportOperation(0);
      swift_bridgeObjectRelease();
      v18 = v3 + v17[6];
      v19 = type metadata accessor for URL();
      v20 = *(_QWORD *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      v21 = v3 + v17[7];
      if (*(_QWORD *)(v21 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
        swift_bridgeObjectRelease();
      }
      v22 = v3 + v17[8];
      if (*(_QWORD *)(v22 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
        swift_bridgeObjectRelease();
      }
      v23 = v3 + v17[9];
      if (*(_QWORD *)(v23 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
      }
      v24 = v3 + v17[10];
      type metadata accessor for Predicate<Pack{URL}>();
      v26 = v25;
      v27 = *(_QWORD *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
      return swift_deallocObject();
    }
  }
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for FileImportOperation(0);
  v7 = v3 + v6[5];
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = v3 + v6[6];
  if (*(_QWORD *)(v10 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v11 = v3 + v6[7];
  if (*(_QWORD *)(v11 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  v12 = v3 + v6[8];
  if (*(_QWORD *)(v12 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v13 = v3 + v6[11];
  type metadata accessor for Predicate<Pack{URL}>();
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileImportExportBridge.preferencesDidChange(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in FileImportExportBridge.preferencesDidChange(_:)(a1, v5, v6, v7, v8);
}

uint64_t outlined assign with copy of FileImportExportBridge.Presentation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FileImportExportBridge.Presentation?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for FileImportExportBridge.PresentationState.UpdateEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        v10 = (char *)&loc_187716E10 + 4 * word_187C52648[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      v12 = (int *)type metadata accessor for FileImportOperation(0);
      v21 = v12[5];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for URL();
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain();
      if (v26(v23, 1, v24))
      {
        type metadata accessor for URL?(0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v34 = v12[6];
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      if (*(_QWORD *)((char *)a2 + v34 + 24))
      {
        v37 = *(_QWORD *)v36;
        v38 = *((_QWORD *)v36 + 1);
        v39 = v36[16];
        outlined copy of Text.Storage(*(_QWORD *)v36, v38, v39);
        *(_QWORD *)v35 = v37;
        *((_QWORD *)v35 + 1) = v38;
        v35[16] = v39;
        *((_QWORD *)v35 + 3) = *((_QWORD *)v36 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v47 = *((_OWORD *)v36 + 1);
        *(_OWORD *)v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v47;
      }
      v48 = v12[7];
      v49 = (char *)a1 + v48;
      v50 = (char *)a2 + v48;
      if (*(_QWORD *)((char *)a2 + v48 + 24))
      {
        v51 = *(_QWORD *)v50;
        v52 = *((_QWORD *)v50 + 1);
        v53 = v50[16];
        outlined copy of Text.Storage(*(_QWORD *)v50, v52, v53);
        *(_QWORD *)v49 = v51;
        *((_QWORD *)v49 + 1) = v52;
        v49[16] = v53;
        *((_QWORD *)v49 + 3) = *((_QWORD *)v50 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v61 = *((_OWORD *)v50 + 1);
        *(_OWORD *)v49 = *(_OWORD *)v50;
        *((_OWORD *)v49 + 1) = v61;
      }
      v62 = v12[8];
      v63 = (char *)a1 + v62;
      v64 = (char *)a2 + v62;
      if (*(_QWORD *)((char *)a2 + v62 + 24))
      {
        v65 = *(_QWORD *)v64;
        v66 = *((_QWORD *)v64 + 1);
        v67 = v64[16];
        outlined copy of Text.Storage(*(_QWORD *)v64, v66, v67);
        *(_QWORD *)v63 = v65;
        *((_QWORD *)v63 + 1) = v66;
        v63[16] = v67;
        *((_QWORD *)v63 + 3) = *((_QWORD *)v64 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v76 = *((_OWORD *)v64 + 1);
        *(_OWORD *)v63 = *(_OWORD *)v64;
        *((_OWORD *)v63 + 1) = v76;
      }
      *(_QWORD *)((char *)a1 + v12[9]) = *(_QWORD *)((char *)a2 + v12[9]);
      *((_BYTE *)a1 + v12[10]) = *((_BYTE *)a2 + v12[10]);
      v77 = v12[11];
      v70 = (char *)a1 + v77;
      v71 = (char *)a2 + v77;
      type metadata accessor for Predicate<Pack{URL}>();
      v73 = v78;
      v74 = *(_QWORD *)(v78 - 8);
      v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      swift_bridgeObjectRetain();
      if (v79(v71, 1, v73))
        goto LABEL_37;
      goto LABEL_38;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        v8 = (char *)&loc_187716D2C + 4 * word_187C52650[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = (int *)type metadata accessor for FileImportOperation(0);
      v13 = v12[5];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for URL();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      if (v18(v15, 1, v16))
      {
        type metadata accessor for URL?(0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v28 = v12[6];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      if (*(_QWORD *)((char *)a2 + v28 + 24))
      {
        v31 = *(_QWORD *)v30;
        v32 = *((_QWORD *)v30 + 1);
        v33 = v30[16];
        outlined copy of Text.Storage(*(_QWORD *)v30, v32, v33);
        *(_QWORD *)v29 = v31;
        *((_QWORD *)v29 + 1) = v32;
        v29[16] = v33;
        *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v40 = *((_OWORD *)v30 + 1);
        *(_OWORD *)v29 = *(_OWORD *)v30;
        *((_OWORD *)v29 + 1) = v40;
      }
      v41 = v12[7];
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      if (*(_QWORD *)((char *)a2 + v41 + 24))
      {
        v44 = *(_QWORD *)v43;
        v45 = *((_QWORD *)v43 + 1);
        v46 = v43[16];
        outlined copy of Text.Storage(*(_QWORD *)v43, v45, v46);
        *(_QWORD *)v42 = v44;
        *((_QWORD *)v42 + 1) = v45;
        v42[16] = v46;
        *((_QWORD *)v42 + 3) = *((_QWORD *)v43 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v54 = *((_OWORD *)v43 + 1);
        *(_OWORD *)v42 = *(_OWORD *)v43;
        *((_OWORD *)v42 + 1) = v54;
      }
      v55 = v12[8];
      v56 = (char *)a1 + v55;
      v57 = (char *)a2 + v55;
      if (*(_QWORD *)((char *)a2 + v55 + 24))
      {
        v58 = *(_QWORD *)v57;
        v59 = *((_QWORD *)v57 + 1);
        v60 = v57[16];
        outlined copy of Text.Storage(*(_QWORD *)v57, v59, v60);
        *(_QWORD *)v56 = v58;
        *((_QWORD *)v56 + 1) = v59;
        v56[16] = v60;
        *((_QWORD *)v56 + 3) = *((_QWORD *)v57 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v68 = *((_OWORD *)v57 + 1);
        *(_OWORD *)v56 = *(_OWORD *)v57;
        *((_OWORD *)v56 + 1) = v68;
      }
      *(_QWORD *)((char *)a1 + v12[9]) = *(_QWORD *)((char *)a2 + v12[9]);
      *((_BYTE *)a1 + v12[10]) = *((_BYTE *)a2 + v12[10]);
      v69 = v12[11];
      v70 = (char *)a1 + v69;
      v71 = (char *)a2 + v69;
      type metadata accessor for Predicate<Pack{URL}>();
      v73 = v72;
      v74 = *(_QWORD *)(v72 - 8);
      v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      swift_bridgeObjectRetain();
      if (v75(v71, 1, v73))
      {
LABEL_37:
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
LABEL_39:
        *((_BYTE *)a1 + v12[12]) = *((_BYTE *)a2 + v12[12]);
        v81 = v12[13];
        v82 = (char *)a1 + v81;
        v83 = (char *)a2 + v81;
        *(_QWORD *)v82 = *(_QWORD *)v83;
        v82[8] = v83[8];
        v84 = v12[14];
        v85 = (_QWORD *)((char *)a1 + v84);
        v86 = (_QWORD *)((char *)a2 + v84);
        v87 = v86[1];
        *v85 = *v86;
        v85[1] = v87;
        v88 = v12[15];
        v89 = (_QWORD *)((char *)a1 + v88);
        v90 = (_QWORD *)((char *)a2 + v88);
        v91 = v90[1];
        *v89 = *v90;
        v89[1] = v91;
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_38:
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v70, v71, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v70, 0, 1, v73);
      goto LABEL_39;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for FileImportExportBridge.PresentationState.UpdateEffect(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_7:
          v3 = type metadata accessor for URL();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
          type metadata accessor for FileExportOperation.Move(0);
          swift_release();
          goto LABEL_22;
        case 1u:
LABEL_19:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 2u:
LABEL_20:
          outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 3u:
LABEL_21:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_22:
          swift_release();
          break;
        default:
          goto LABEL_23;
      }
      goto LABEL_23;
    }
  }
  else
  {
    if ((_DWORD)result)
      return result;
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          goto LABEL_19;
        case 2u:
          goto LABEL_20;
        case 3u:
          goto LABEL_21;
        default:
          break;
      }
LABEL_23:
      v15 = (int *)type metadata accessor for FileExportOperation(0);
      swift_bridgeObjectRelease();
      v16 = a1 + v15[6];
      v17 = type metadata accessor for URL();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      v19 = a1 + v15[7];
      if (*(_QWORD *)(v19 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
        swift_bridgeObjectRelease();
      }
      v20 = a1 + v15[8];
      if (*(_QWORD *)(v20 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
        swift_bridgeObjectRelease();
      }
      v21 = a1 + v15[9];
      if (*(_QWORD *)(v21 + 24))
      {
        outlined consume of Text.Storage(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
        swift_bridgeObjectRelease();
      }
      v22 = a1 + v15[10];
      type metadata accessor for Predicate<Pack{URL}>();
      v24 = v23;
      v25 = *(_QWORD *)(v23 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for FileImportOperation(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = a1 + v4[6];
  if (*(_QWORD *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v9 = a1 + v4[7];
  if (*(_QWORD *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = a1 + v4[8];
  if (*(_QWORD *)(v10 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v11 = a1 + v4[11];
  type metadata accessor for Predicate<Pack{URL}>();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for FileImportExportBridge.PresentationState.UpdateEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      v8 = (char *)&loc_187718058 + 4 * word_187C52660[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v18 = a2[1];
    *a1 = *a2;
    a1[1] = v18;
    v10 = (int *)type metadata accessor for FileImportOperation(0);
    v19 = v10[5];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for URL();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    if (v24(v21, 1, v22))
    {
      type metadata accessor for URL?(0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v32 = v10[6];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    if (*(_QWORD *)((char *)a2 + v32 + 24))
    {
      v35 = *(_QWORD *)v34;
      v36 = *((_QWORD *)v34 + 1);
      v37 = v34[16];
      outlined copy of Text.Storage(*(_QWORD *)v34, v36, v37);
      *(_QWORD *)v33 = v35;
      *((_QWORD *)v33 + 1) = v36;
      v33[16] = v37;
      *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v45 = *((_OWORD *)v34 + 1);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1) = v45;
    }
    v46 = v10[7];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    if (*(_QWORD *)((char *)a2 + v46 + 24))
    {
      v49 = *(_QWORD *)v48;
      v50 = *((_QWORD *)v48 + 1);
      v51 = v48[16];
      outlined copy of Text.Storage(*(_QWORD *)v48, v50, v51);
      *(_QWORD *)v47 = v49;
      *((_QWORD *)v47 + 1) = v50;
      v47[16] = v51;
      *((_QWORD *)v47 + 3) = *((_QWORD *)v48 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v59 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v59;
    }
    v60 = v10[8];
    v61 = (char *)a1 + v60;
    v62 = (char *)a2 + v60;
    if (*(_QWORD *)((char *)a2 + v60 + 24))
    {
      v63 = *(_QWORD *)v62;
      v64 = *((_QWORD *)v62 + 1);
      v65 = v62[16];
      outlined copy of Text.Storage(*(_QWORD *)v62, v64, v65);
      *(_QWORD *)v61 = v63;
      *((_QWORD *)v61 + 1) = v64;
      v61[16] = v65;
      *((_QWORD *)v61 + 3) = *((_QWORD *)v62 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v74 = *((_OWORD *)v62 + 1);
      *(_OWORD *)v61 = *(_OWORD *)v62;
      *((_OWORD *)v61 + 1) = v74;
    }
    *(_QWORD *)((char *)a1 + v10[9]) = *(_QWORD *)((char *)a2 + v10[9]);
    *((_BYTE *)a1 + v10[10]) = *((_BYTE *)a2 + v10[10]);
    v75 = v10[11];
    v68 = (char *)a1 + v75;
    v69 = (char *)a2 + v75;
    type metadata accessor for Predicate<Pack{URL}>();
    v71 = v76;
    v72 = *(_QWORD *)(v76 - 8);
    v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    swift_bridgeObjectRetain();
    if (v77(v69, 1, v71))
      goto LABEL_35;
    goto LABEL_36;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      v7 = (char *)&loc_187717F94 + 4 * word_187C52668[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = (int *)type metadata accessor for FileImportOperation(0);
    v11 = v10[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for URL();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      type metadata accessor for URL?(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v26 = v10[6];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    if (*(_QWORD *)((char *)a2 + v26 + 24))
    {
      v29 = *(_QWORD *)v28;
      v30 = *((_QWORD *)v28 + 1);
      v31 = v28[16];
      outlined copy of Text.Storage(*(_QWORD *)v28, v30, v31);
      *(_QWORD *)v27 = v29;
      *((_QWORD *)v27 + 1) = v30;
      v27[16] = v31;
      *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v38 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v38;
    }
    v39 = v10[7];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    if (*(_QWORD *)((char *)a2 + v39 + 24))
    {
      v42 = *(_QWORD *)v41;
      v43 = *((_QWORD *)v41 + 1);
      v44 = v41[16];
      outlined copy of Text.Storage(*(_QWORD *)v41, v43, v44);
      *(_QWORD *)v40 = v42;
      *((_QWORD *)v40 + 1) = v43;
      v40[16] = v44;
      *((_QWORD *)v40 + 3) = *((_QWORD *)v41 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v52 = *((_OWORD *)v41 + 1);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v52;
    }
    v53 = v10[8];
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    if (*(_QWORD *)((char *)a2 + v53 + 24))
    {
      v56 = *(_QWORD *)v55;
      v57 = *((_QWORD *)v55 + 1);
      v58 = v55[16];
      outlined copy of Text.Storage(*(_QWORD *)v55, v57, v58);
      *(_QWORD *)v54 = v56;
      *((_QWORD *)v54 + 1) = v57;
      v54[16] = v58;
      *((_QWORD *)v54 + 3) = *((_QWORD *)v55 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v66 = *((_OWORD *)v55 + 1);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v66;
    }
    *(_QWORD *)((char *)a1 + v10[9]) = *(_QWORD *)((char *)a2 + v10[9]);
    *((_BYTE *)a1 + v10[10]) = *((_BYTE *)a2 + v10[10]);
    v67 = v10[11];
    v68 = (char *)a1 + v67;
    v69 = (char *)a2 + v67;
    type metadata accessor for Predicate<Pack{URL}>();
    v71 = v70;
    v72 = *(_QWORD *)(v70 - 8);
    v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    swift_bridgeObjectRetain();
    if (v73(v69, 1, v71))
    {
LABEL_35:
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
LABEL_37:
      *((_BYTE *)a1 + v10[12]) = *((_BYTE *)a2 + v10[12]);
      v79 = v10[13];
      v80 = (char *)a1 + v79;
      v81 = (char *)a2 + v79;
      *(_QWORD *)v80 = *(_QWORD *)v81;
      v80[8] = v81[8];
      v82 = v10[14];
      v83 = (_QWORD *)((char *)a1 + v82);
      v84 = (_QWORD *)((char *)a2 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = v10[15];
      v87 = (_QWORD *)((char *)a1 + v86);
      v88 = (_QWORD *)((char *)a2 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      swift_retain();
      swift_retain();
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_36:
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v68, v69, v71);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v68, 0, 1, v71);
    goto LABEL_37;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for FileImportExportBridge.PresentationState.UpdateEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        v8 = (char *)&loc_187718EBC + 4 * word_187C52670[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      *a1 = *a2;
      a1[1] = a2[1];
      v9 = (int *)type metadata accessor for FileImportOperation(0);
      v17 = v9[5];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for URL();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        type metadata accessor for URL?(0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v30 = v9[6];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      if (*(_QWORD *)((char *)a2 + v30 + 24))
      {
        v33 = *(_QWORD *)v32;
        v34 = *((_QWORD *)v32 + 1);
        v35 = v32[16];
        outlined copy of Text.Storage(*(_QWORD *)v32, v34, v35);
        *(_QWORD *)v31 = v33;
        *((_QWORD *)v31 + 1) = v34;
        v31[16] = v35;
        *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v43 = *((_OWORD *)v32 + 1);
        *(_OWORD *)v31 = *(_OWORD *)v32;
        *((_OWORD *)v31 + 1) = v43;
      }
      v44 = v9[7];
      v45 = (char *)a1 + v44;
      v46 = (char *)a2 + v44;
      if (*(_QWORD *)((char *)a2 + v44 + 24))
      {
        v47 = *(_QWORD *)v46;
        v48 = *((_QWORD *)v46 + 1);
        v49 = v46[16];
        outlined copy of Text.Storage(*(_QWORD *)v46, v48, v49);
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v48;
        v45[16] = v49;
        *((_QWORD *)v45 + 3) = *((_QWORD *)v46 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v57 = *((_OWORD *)v46 + 1);
        *(_OWORD *)v45 = *(_OWORD *)v46;
        *((_OWORD *)v45 + 1) = v57;
      }
      v58 = v9[8];
      v59 = (char *)a1 + v58;
      v60 = (char *)a2 + v58;
      if (*(_QWORD *)((char *)a2 + v58 + 24))
      {
        v61 = *(_QWORD *)v60;
        v62 = *((_QWORD *)v60 + 1);
        v63 = v60[16];
        outlined copy of Text.Storage(*(_QWORD *)v60, v62, v63);
        *(_QWORD *)v59 = v61;
        *((_QWORD *)v59 + 1) = v62;
        v59[16] = v63;
        *((_QWORD *)v59 + 3) = *((_QWORD *)v60 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v72 = *((_OWORD *)v60 + 1);
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *((_OWORD *)v59 + 1) = v72;
      }
      *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
      *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
      v73 = v9[11];
      v66 = (char *)a1 + v73;
      v67 = (char *)a2 + v73;
      type metadata accessor for Predicate<Pack{URL}>();
      v69 = v74;
      v70 = *(_QWORD *)(v74 - 8);
      v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      if (v75(v67, 1, v69))
        goto LABEL_36;
      goto LABEL_37;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        v7 = (char *)&loc_187718E10 + 4 * word_187C52678[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      *a1 = *a2;
      a1[1] = a2[1];
      v9 = (int *)type metadata accessor for FileImportOperation(0);
      v10 = v9[5];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for URL();
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
      swift_bridgeObjectRetain();
      if (v15(v12, 1, v13))
      {
        type metadata accessor for URL?(0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      v24 = v9[6];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      if (*(_QWORD *)((char *)a2 + v24 + 24))
      {
        v27 = *(_QWORD *)v26;
        v28 = *((_QWORD *)v26 + 1);
        v29 = v26[16];
        outlined copy of Text.Storage(*(_QWORD *)v26, v28, v29);
        *(_QWORD *)v25 = v27;
        *((_QWORD *)v25 + 1) = v28;
        v25[16] = v29;
        *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v36 = *((_OWORD *)v26 + 1);
        *(_OWORD *)v25 = *(_OWORD *)v26;
        *((_OWORD *)v25 + 1) = v36;
      }
      v37 = v9[7];
      v38 = (char *)a1 + v37;
      v39 = (char *)a2 + v37;
      if (*(_QWORD *)((char *)a2 + v37 + 24))
      {
        v40 = *(_QWORD *)v39;
        v41 = *((_QWORD *)v39 + 1);
        v42 = v39[16];
        outlined copy of Text.Storage(*(_QWORD *)v39, v41, v42);
        *(_QWORD *)v38 = v40;
        *((_QWORD *)v38 + 1) = v41;
        v38[16] = v42;
        *((_QWORD *)v38 + 3) = *((_QWORD *)v39 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v50 = *((_OWORD *)v39 + 1);
        *(_OWORD *)v38 = *(_OWORD *)v39;
        *((_OWORD *)v38 + 1) = v50;
      }
      v51 = v9[8];
      v52 = (char *)a1 + v51;
      v53 = (char *)a2 + v51;
      if (*(_QWORD *)((char *)a2 + v51 + 24))
      {
        v54 = *(_QWORD *)v53;
        v55 = *((_QWORD *)v53 + 1);
        v56 = v53[16];
        outlined copy of Text.Storage(*(_QWORD *)v53, v55, v56);
        *(_QWORD *)v52 = v54;
        *((_QWORD *)v52 + 1) = v55;
        v52[16] = v56;
        *((_QWORD *)v52 + 3) = *((_QWORD *)v53 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v64 = *((_OWORD *)v53 + 1);
        *(_OWORD *)v52 = *(_OWORD *)v53;
        *((_OWORD *)v52 + 1) = v64;
      }
      *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
      *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
      v65 = v9[11];
      v66 = (char *)a1 + v65;
      v67 = (char *)a2 + v65;
      type metadata accessor for Predicate<Pack{URL}>();
      v69 = v68;
      v70 = *(_QWORD *)(v68 - 8);
      v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      if (v71(v67, 1, v69))
      {
LABEL_36:
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
LABEL_38:
        *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
        v77 = v9[13];
        v78 = (char *)a1 + v77;
        v79 = (char *)a2 + v77;
        v80 = *(_QWORD *)v79;
        v78[8] = v79[8];
        *(_QWORD *)v78 = v80;
        v81 = v9[14];
        v82 = (_QWORD *)((char *)a1 + v81);
        v83 = (_QWORD *)((char *)a2 + v81);
        v84 = v83[1];
        *v82 = *v83;
        v82[1] = v84;
        v85 = v9[15];
        v86 = (_QWORD *)((char *)a1 + v85);
        v87 = (_QWORD *)((char *)a2 + v85);
        v88 = v87[1];
        *v86 = *v87;
        v86[1] = v88;
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_37:
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v66, v67, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v66, 0, 1, v69);
      goto LABEL_38;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for FileImportExportBridge.PresentationState.UpdateEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  __int128 v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  uint64_t v98;
  _OWORD *v99;
  _OWORD *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v31 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(a1, a2, v31);
        v32 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v32 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v32 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 24));
        swift_storeEnumTagMultiPayload();
      }
      v24 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
      v33 = v24[6];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = type metadata accessor for URL();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        type metadata accessor for URL?(0);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v90 = v24[7];
      v91 = (_OWORD *)((char *)a1 + v90);
      v92 = (_OWORD *)((char *)a2 + v90);
      v93 = v92[1];
      *v91 = *v92;
      v91[1] = v93;
      v94 = v24[8];
      v95 = (_OWORD *)((char *)a1 + v94);
      v96 = (_OWORD *)((char *)a2 + v94);
      v97 = v96[1];
      *v95 = *v96;
      v95[1] = v97;
      v98 = v24[9];
      v99 = (_OWORD *)((char *)a1 + v98);
      v100 = (_OWORD *)((char *)a2 + v98);
      v101 = v100[1];
      *v99 = *v100;
      v99[1] = v101;
      v102 = v24[10];
      v85 = (char *)a1 + v102;
      v86 = (char *)a2 + v102;
      type metadata accessor for Predicate<Pack{URL}>();
      v88 = v103;
      v89 = *(_QWORD *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v103))
        goto LABEL_31;
      goto LABEL_34;
    }
    *a1 = *a2;
    v9 = (int *)type metadata accessor for FileImportOperation(0);
    v16 = v9[5];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for URL?(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v57 = v9[6];
    v58 = (_OWORD *)((char *)a1 + v57);
    v59 = (_OWORD *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = v9[7];
    v62 = (_OWORD *)((char *)a1 + v61);
    v63 = (_OWORD *)((char *)a2 + v61);
    v64 = v63[1];
    *v62 = *v63;
    v62[1] = v64;
    v65 = v9[8];
    v66 = (_OWORD *)((char *)a1 + v65);
    v67 = (_OWORD *)((char *)a2 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
    *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    v69 = v9[11];
    v52 = (char *)a1 + v69;
    v53 = (char *)a2 + v69;
    type metadata accessor for Predicate<Pack{URL}>();
    v55 = v70;
    v56 = *(_QWORD *)(v70 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v70))
      goto LABEL_25;
    goto LABEL_32;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v22 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
        v23 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v23 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v23 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 24));
        swift_storeEnumTagMultiPayload();
      }
      v24 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
      v25 = v24[6];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = type metadata accessor for URL();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        type metadata accessor for URL?(0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      v72 = v24[7];
      v73 = (_OWORD *)((char *)a1 + v72);
      v74 = (_OWORD *)((char *)a2 + v72);
      v75 = v74[1];
      *v73 = *v74;
      v73[1] = v75;
      v76 = v24[8];
      v77 = (_OWORD *)((char *)a1 + v76);
      v78 = (_OWORD *)((char *)a2 + v76);
      v79 = v78[1];
      *v77 = *v78;
      v77[1] = v79;
      v80 = v24[9];
      v81 = (_OWORD *)((char *)a1 + v80);
      v82 = (_OWORD *)((char *)a2 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      v84 = v24[10];
      v85 = (char *)a1 + v84;
      v86 = (char *)a2 + v84;
      type metadata accessor for Predicate<Pack{URL}>();
      v88 = v87;
      v89 = *(_QWORD *)(v87 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v87))
      {
LABEL_31:
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
LABEL_35:
        *((_BYTE *)a1 + v24[11]) = *((_BYTE *)a2 + v24[11]);
        v108 = v24[12];
        v109 = (char *)a1 + v108;
        v110 = (char *)a2 + v108;
        *(_QWORD *)v109 = *(_QWORD *)v110;
        v109[8] = v110[8];
        goto LABEL_36;
      }
LABEL_34:
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v85, v86, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v85, 0, 1, v88);
      goto LABEL_35;
    }
    *a1 = *a2;
    v9 = (int *)type metadata accessor for FileImportOperation(0);
    v10 = v9[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for URL();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      type metadata accessor for URL?(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v39 = v9[6];
    v40 = (_OWORD *)((char *)a1 + v39);
    v41 = (_OWORD *)((char *)a2 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = v9[7];
    v44 = (_OWORD *)((char *)a1 + v43);
    v45 = (_OWORD *)((char *)a2 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = v9[8];
    v48 = (_OWORD *)((char *)a1 + v47);
    v49 = (_OWORD *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
    *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    v51 = v9[11];
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    type metadata accessor for Predicate<Pack{URL}>();
    v55 = v54;
    v56 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v54))
    {
LABEL_25:
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
LABEL_33:
      *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
      v105 = v9[13];
      v106 = (char *)a1 + v105;
      v107 = (char *)a2 + v105;
      *(_QWORD *)v106 = *(_QWORD *)v107;
      v106[8] = v107[8];
      *(_OWORD *)((char *)a1 + v9[14]) = *(_OWORD *)((char *)a2 + v9[14]);
      *(_OWORD *)((char *)a1 + v9[15]) = *(_OWORD *)((char *)a2 + v9[15]);
LABEL_36:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_32:
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v53, v55);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v52, 0, 1, v55);
    goto LABEL_33;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for FileImportExportBridge.PresentationState.UpdateEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  __int128 v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  __int128 v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  uint64_t v98;
  _OWORD *v99;
  _OWORD *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v8 = type metadata accessor for FileExportOperation.Mode(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          v31 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(a1, a2, v31);
          v32 = type metadata accessor for FileExportOperation.Move(0);
          *(_OWORD *)((char *)a1 + *(int *)(v32 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v32 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 24));
          swift_storeEnumTagMultiPayload();
        }
        v24 = (int *)type metadata accessor for FileExportOperation(0);
        *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
        v33 = v24[6];
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = type metadata accessor for URL();
        v37 = *(_QWORD *)(v36 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
        {
          type metadata accessor for URL?(0);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        v90 = v24[7];
        v91 = (_OWORD *)((char *)a1 + v90);
        v92 = (_OWORD *)((char *)a2 + v90);
        v93 = v92[1];
        *v91 = *v92;
        v91[1] = v93;
        v94 = v24[8];
        v95 = (_OWORD *)((char *)a1 + v94);
        v96 = (_OWORD *)((char *)a2 + v94);
        v97 = v96[1];
        *v95 = *v96;
        v95[1] = v97;
        v98 = v24[9];
        v99 = (_OWORD *)((char *)a1 + v98);
        v100 = (_OWORD *)((char *)a2 + v98);
        v101 = v100[1];
        *v99 = *v100;
        v99[1] = v101;
        v102 = v24[10];
        v85 = (char *)a1 + v102;
        v86 = (char *)a2 + v102;
        type metadata accessor for Predicate<Pack{URL}>();
        v88 = v103;
        v89 = *(_QWORD *)(v103 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v103))
          goto LABEL_32;
        goto LABEL_35;
      }
      *a1 = *a2;
      v9 = (int *)type metadata accessor for FileImportOperation(0);
      v16 = v9[5];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for URL();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        type metadata accessor for URL?(0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v57 = v9[6];
      v58 = (_OWORD *)((char *)a1 + v57);
      v59 = (_OWORD *)((char *)a2 + v57);
      v60 = v59[1];
      *v58 = *v59;
      v58[1] = v60;
      v61 = v9[7];
      v62 = (_OWORD *)((char *)a1 + v61);
      v63 = (_OWORD *)((char *)a2 + v61);
      v64 = v63[1];
      *v62 = *v63;
      v62[1] = v64;
      v65 = v9[8];
      v66 = (_OWORD *)((char *)a1 + v65);
      v67 = (_OWORD *)((char *)a2 + v65);
      v68 = v67[1];
      *v66 = *v67;
      v66[1] = v68;
      *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
      *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
      v69 = v9[11];
      v52 = (char *)a1 + v69;
      v53 = (char *)a2 + v69;
      type metadata accessor for Predicate<Pack{URL}>();
      v55 = v70;
      v56 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v70))
        goto LABEL_26;
      goto LABEL_33;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v7 = type metadata accessor for FileExportOperation.Mode(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        }
        else
        {
          v22 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
          v23 = type metadata accessor for FileExportOperation.Move(0);
          *(_OWORD *)((char *)a1 + *(int *)(v23 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v23 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 24));
          swift_storeEnumTagMultiPayload();
        }
        v24 = (int *)type metadata accessor for FileExportOperation(0);
        *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
        v25 = v24[6];
        v26 = (char *)a1 + v25;
        v27 = (char *)a2 + v25;
        v28 = type metadata accessor for URL();
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          type metadata accessor for URL?(0);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v72 = v24[7];
        v73 = (_OWORD *)((char *)a1 + v72);
        v74 = (_OWORD *)((char *)a2 + v72);
        v75 = v74[1];
        *v73 = *v74;
        v73[1] = v75;
        v76 = v24[8];
        v77 = (_OWORD *)((char *)a1 + v76);
        v78 = (_OWORD *)((char *)a2 + v76);
        v79 = v78[1];
        *v77 = *v78;
        v77[1] = v79;
        v80 = v24[9];
        v81 = (_OWORD *)((char *)a1 + v80);
        v82 = (_OWORD *)((char *)a2 + v80);
        v83 = v82[1];
        *v81 = *v82;
        v81[1] = v83;
        v84 = v24[10];
        v85 = (char *)a1 + v84;
        v86 = (char *)a2 + v84;
        type metadata accessor for Predicate<Pack{URL}>();
        v88 = v87;
        v89 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v87))
        {
LABEL_32:
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
LABEL_36:
          *((_BYTE *)a1 + v24[11]) = *((_BYTE *)a2 + v24[11]);
          v108 = v24[12];
          v109 = (char *)a1 + v108;
          v110 = (char *)a2 + v108;
          *(_QWORD *)v109 = *(_QWORD *)v110;
          v109[8] = v110[8];
          goto LABEL_37;
        }
LABEL_35:
        (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v85, v86, v88);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v85, 0, 1, v88);
        goto LABEL_36;
      }
      *a1 = *a2;
      v9 = (int *)type metadata accessor for FileImportOperation(0);
      v10 = v9[5];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for URL();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        type metadata accessor for URL?(0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      v39 = v9[6];
      v40 = (_OWORD *)((char *)a1 + v39);
      v41 = (_OWORD *)((char *)a2 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      v43 = v9[7];
      v44 = (_OWORD *)((char *)a1 + v43);
      v45 = (_OWORD *)((char *)a2 + v43);
      v46 = v45[1];
      *v44 = *v45;
      v44[1] = v46;
      v47 = v9[8];
      v48 = (_OWORD *)((char *)a1 + v47);
      v49 = (_OWORD *)((char *)a2 + v47);
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
      *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
      v51 = v9[11];
      v52 = (char *)a1 + v51;
      v53 = (char *)a2 + v51;
      type metadata accessor for Predicate<Pack{URL}>();
      v55 = v54;
      v56 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v54))
      {
LABEL_26:
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
LABEL_34:
        *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
        v105 = v9[13];
        v106 = (char *)a1 + v105;
        v107 = (char *)a2 + v105;
        *(_QWORD *)v106 = *(_QWORD *)v107;
        v106[8] = v107[8];
        *(_OWORD *)((char *)a1 + v9[14]) = *(_OWORD *)((char *)a2 + v9[14]);
        *(_OWORD *)((char *)a1 + v9[15]) = *(_OWORD *)((char *)a2 + v9[15]);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_33:
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v53, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v52, 0, 1, v55);
      goto LABEL_34;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t ForEach.reuseID<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
  swift_getKeyPath();
  type metadata accessor for KeyPath();
  v5 = _AppendKeyPath.appending<A, B, C>(path:)();
  swift_release();
  v6 = *(int *)(a1 + 68);
  result = swift_release();
  *(_QWORD *)(a2 + v6) = v5;
  return result;
}

uint64_t sub_18771AD88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of Hashable.hashValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18771ADC0()
{
  return 56;
}

__n128 sub_18771ADCC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t _ReclaimForEachElementsViewModifier.isEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _ReclaimForEachElementsViewModifier.isEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_ReclaimForEachElementsViewModifier.isEnabled.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ReclaimForEachElementsViewModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for _GraphValue<_ReclaimForEachElementsViewModifier>();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  return PropertyList.subscript.setter();
}

void type metadata accessor for _GraphValue<_ReclaimForEachElementsViewModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>);
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ReclaimForEachElementsViewModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ReclaimForEachElementsViewModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _ReclaimForEachElementsViewModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ReclaimForEachElementsViewModifier()
{
  type metadata accessor for _GraphValue<_ReclaimForEachElementsViewModifier>();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  return PropertyList.subscript.setter();
}

uint64_t static ForEach.makeWithKeyPath(_:id:content:)(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v7[1] = a2;
  swift_retain();
  swift_retain();
  return ForEach.init(_:idGenerator:content:)();
}

uint64_t static ForEach.makeWithOffset<>(_:content:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v5[1] = 0;
  swift_retain();
  return ForEach.init(_:idGenerator:content:)();
}

uint64_t ForEach.makeID(index:offset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_retain();
  ForEach.data.getter();
  v9 = v4;
  v10 = *(_OWORD *)(a3 + 24);
  v11 = *(_OWORD *)(a3 + 40);
  type metadata accessor for ForEach.IDGenerator();
  ForEach.IDGenerator.makeID(data:index:offset:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

BOOL ForEach.isConstant.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 64));
  swift_retain();
  type metadata accessor for ForEach.IDGenerator();
  swift_release();
  return v2 == 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ReclaimForEachElementsViewModifier()
{
  return &protocol witness table for _ReclaimForEachElementsViewModifier;
}

uint64_t storeEnumTagSinglePayload for _ReclaimForEachElementsViewModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18771B350 + 4 * byte_187C52765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18771B384 + 4 * asc_187C52760[v4]))();
}

uint64_t sub_18771B384(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18771B38C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18771B394);
  return result;
}

uint64_t sub_18771B3A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18771B3A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18771B3AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18771B3B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ReclaimForEachElementsViewModifier()
{
  return &type metadata for _ReclaimForEachElementsViewModifier;
}

uint64_t AccessibilityAttachment.mergedProperties.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v3 = *v1;
  v14 = *v1;
  swift_bridgeObjectRetain_n();
  AGGraphClearUpdate();
  v4 = swift_bridgeObjectRetain();
  v5 = (void *)specialized AccessibilityProperties.subscript.getter(v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    ObjectType = swift_getObjectType();
    PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(ObjectType, (uint64_t *)v12);

    v7 = *(_QWORD *)&v12[0];
  }
  else
  {
    v7 = 0;
  }
  AGGraphSetUpdate();
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    *(_QWORD *)&v12[0] = v7;
    AccessibilityProperties.merge(with:)((uint64_t *)v12);
    v3 = v14;
    v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v3 + 56) + 40 * v11), (uint64_t)v12);
      specialized _NativeDictionary._delete(at:)(v11, v3);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = 0;
      memset(v12, 0, sizeof(v12));
    }
    outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)v12);
    result = swift_bridgeObjectRelease();
  }
  *a1 = v3;
  return result;
}

double static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int OffsetAttribute2;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 80);
  v18 = *(_QWORD *)a2;
  v19 = v6;
  v20 = v7;
  v21 = *(_OWORD *)(a2 + 24);
  v22 = v8;
  v23 = v9;
  v24 = *(_OWORD *)(a2 + 56);
  v15 = v24;
  v25 = *(_QWORD *)(a2 + 72);
  v26 = v10;
  a3(&v16);
  v18 = v9;
  v19 = v15;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    v18 = v9;
    v19 = v15;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LODWORD(v18) = v5;
      type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformViewModifier>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE1470]);
      _GraphValue.value.getter();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v18) = v5;
      _GraphValue.value.getter();
      v18 = __PAIR64__(AGGraphCreateOffsetAttribute2(), OffsetAttribute2);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v12 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v9;
      v19 = v15;
      MEMORY[0x1E0C80A78](v12, v13);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)a4 = v16;
  result = v17;
  a4[1] = v17;
  return result;
}

uint64_t static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int OffsetAttribute2;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  __int128 v39[5];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = *(_OWORD *)(a1 + 48);
  v39[2] = *(_OWORD *)(a1 + 32);
  v39[3] = v9;
  v39[4] = *(_OWORD *)(a1 + 64);
  v40 = *(_DWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 16);
  v39[0] = *(_OWORD *)a1;
  v39[1] = v10;
  v37 = v9;
  v38 = DWORD2(v9);
  v35 = v9;
  v36 = DWORD2(v9);
  v11 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v11 & 1) != 0)
  {
    LODWORD(v35) = a2;
    MEMORY[0x1E0C80A78](v11, v12);
    v32 = type metadata accessor for AccessibilityBridgedPlatformView(0, a4, a5, v13);
    v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>, v32);
    type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(0, &lazy cache variable for type metadata for Attribute<AccessibilityPlatformViewModifier>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v31, v32, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
    _GraphValue.init(_:)();
    v16 = v34;
    v17 = *(_QWORD *)a3;
    v18 = *(unsigned int *)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 12);
    v35 = v37;
    v36 = v38;
    swift_bridgeObjectRetain();
    v20 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((v20 & 1) != 0)
    {
      v21 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v16, v39, v17, v18 | (v19 << 32), 0);
      LOBYTE(v35) = 1;
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v21, 0x100000000, (uint64_t)v39);
    }
    swift_bridgeObjectRelease();
    LOBYTE(v35) = (v20 & 1) == 0;
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    v35 = v37;
    v36 = v38;
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      LODWORD(v35) = a2;
      MEMORY[0x1E0C80A78](result, v23);
      v32 = type metadata accessor for AccessibilityBridgedPlatformView(0, a4, a5, v24);
      v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>, v32);
      type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(0, &lazy cache variable for type metadata for Attribute<AccessibilityPlatformViewModifier>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)v31, v32, MEMORY[0x1E0DEDCE8], v25, MEMORY[0x1E0DEDD18], v26);
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v35 = __PAIR64__(AGGraphCreateOffsetAttribute2(), OffsetAttribute2);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v28 = Attribute.init<A>(body:value:flags:update:)();
      v35 = v37;
      v36 = v38;
      MEMORY[0x1E0C80A78](v28, v29);
      LODWORD(v32) = v30;
      outlined retain of [Text.Modifier]((uint64_t)&v37);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)();
}

uint64_t implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityPlatformViewModifier.PlatformViewAttachment()
{
  void *v0;
  id v1;

  AGGraphGetValue();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v0 = *(void **)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v1 = v0;
  return AccessibilityAttachment.init(properties:platformElement:)();
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityPlatformViewModifier()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = v1;
  return AccessibilityAttachment.init(properties:platformElement:)();
}

id protocol witness for AccessibilityViewModifier.createOrUpdateNode(viewRendererHost:existingNode:) in conformance AccessibilityPlatformViewModifier(uint64_t a1, uint64_t a2, void *a3)
{
  void **v3;
  void *v5;
  id v6;
  id v8;
  uint64_t v9;
  id v10;

  v5 = *v3;
  if (a3)
  {
    v6 = a3;
  }
  else
  {
    v8 = objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    v9 = swift_unknownObjectRetain();
    v6 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v9, a2, 0);
    swift_unknownObjectRelease();
  }
  v10 = a3;
  objc_msgSend(v5, sel_setAccessibilityNodeForPlatformElement_, v6);
  return v6;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityPlatformViewModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall AccessibilityBridgedPlatformView.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Value;
  char v15;
  char v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id *OutputValue;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for ViewLeafView(255, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v30 - v10;
  v13 = *(int *)(v12 + 48);
  Value = AGGraphGetValue();
  v16 = v15;
  v17 = *(_QWORD *)(v2 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v11, Value, v2);
  v11[v13] = v16 & 1;
  v19 = *(int *)(TupleTypeMetadata2 + 48);
  v18(v7, (uint64_t)v11, v2);
  v7[v19] = v16 & 1;
  v20 = *(void (**)(char *, uint64_t))(v17 + 8);
  v21 = *(id *)&v7[*(int *)(v2 + 36)];
  v20(v7, v2);
  v22 = (void *)PlatformViewHost.representedView.getter();

  if ((v16 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v23 = v22;
    v24 = Dictionary.init(minimumCapacity:)();
    v32 = v23;
    v33 = v24;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();

  }
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v25 = v22;
  v31 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v34 = v26;
  v35 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>();
  v32 = v22;
  specialized Dictionary.subscript.setter((uint64_t)&v32, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  v27 = v31;
  OutputValue = (id *)AGGraphGetOutputValue();
  if (!OutputValue)
    __break(1u);
  v29 = *OutputValue;
  v32 = v29;
  v33 = v27;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v11, TupleTypeMetadata2);
}

Swift::Void __swiftcall AccessibilityHostedViewBridgeTransform.updateValue()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t *Value;
  char v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v1 = HIDWORD(v0);
  v2 = *(_QWORD *)AGGraphGetValue();
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = v3 != 1 || *MEMORY[0x1E0CFED28] == (_DWORD)v1;
  if (v4 || (Value = (unint64_t *)AGGraphGetValue(), (v6 & 1) == 0))
  {
    AGGraphGetValue();
    AGGraphSetOutputValue();
    return;
  }
  v7 = *Value;
  v8 = *(_QWORD *)AGGraphGetValue();
  if ((v8 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = MEMORY[0x18D75E3BC](0, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_22:
      swift_bridgeObjectRetain();
      v10 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v10)
        goto LABEL_14;
      goto LABEL_18;
    }
    v9 = *(void **)(v8 + 32);
    swift_bridgeObjectRetain();
    v2 = v9;
  }
  AGGraphGetValue();
  if (v7 >> 62)
    goto LABEL_22;
  v10 = *(void **)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v10)
  {
LABEL_14:
    if ((v7 & 0xC000000000000001) != 0)
    {
      v11 = (id)MEMORY[0x18D75E3BC](0, v7);
    }
    else
    {
      if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
        __break(1u);
      v11 = *(id *)(v7 + 32);
    }
    v10 = v11;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakAssign();
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();

}

void protocol witness for StatefulRule.updateValue() in conformance AccessibilityHostedViewBridgeTransform()
{
  AccessibilityHostedViewBridgeTransform.updateValue()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityHostedViewBridgeTransform()
{
  return 0xD000000000000026;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAttachment.DeferredTransform, &type metadata for AccessibilityAttachment.DeferredTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform);
  }
  return result;
}

uint64_t _s7SwiftUI33AccessibilityPlatformViewModifierV04makecD9Transform6inputs13representable7outputsyAA01_E6InputsV_14AttributeGraph0M0VyAA0e4LeafE0VyxGGAA01_E7OutputsVztAA0dE13RepresentableRzlFZALyyAA0C10AttachmentVAAE4TreeOzcGyXEfu_TA_0()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)();
}

ValueMetadata *type metadata accessor for AccessibilityPlatformViewModifier.PlatformViewAttachment()
{
  return &type metadata for AccessibilityPlatformViewModifier.PlatformViewAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityPlatformViewModifier()
{
  return &type metadata for AccessibilityPlatformViewModifier;
}

ValueMetadata *type metadata accessor for AccessibilityHostedViewBridgeTransform()
{
  return &type metadata for AccessibilityHostedViewBridgeTransform;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityPlatformViewModifier()
{
  return &protocol witness table for AccessibilityPlatformViewModifier;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityPlatformViewModifier(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier();
  result = lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

unint64_t ViewTraitCollection.listItemBackground(kind:)(unsigned __int8 *a1)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v1 = *a1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v2 = v5;
  if (v5 == 1)
  {
    if (v1)
      return 0;
LABEL_7:
    ViewTraitCollection.value<A>(for:defaultValue:)();
    return v4;
  }
  if (v1 < 0x40 && ((v4 >> v1) & 1) == 0)
  {
    outlined consume of Text.LineStyle?(v4, v5);
    if (v1)
      return 0;
    goto LABEL_7;
  }
  return v2;
}

Swift::Bool __swiftcall ListItemKind.Set.contains(_:)(SwiftUI::ListItemKind a1)
{
  _QWORD *v1;
  unsigned int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)a1;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  return (v3 & ~*v1) == 0;
}

double static ListItemBackgroundTraitKey.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187BF9840;
  return result;
}

uint64_t ListItemKind.Set.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ListItemKind.Set.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ListItemKind.Set.rawValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::ListItemKind::Set __swiftcall ListItemKind.Set.init(rawValue:)(SwiftUI::ListItemKind::Set rawValue)
{
  SwiftUI::ListItemKind::Set *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ListItemKind.Set.row.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ListItemKind.Set.header.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ListItemKind.Set.footer.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static ListItemKind.Set.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static ListItemKind.Set.all;
  return result;
}

SwiftUI::ListItemKind::Set __swiftcall ListItemKind.Set.init(_:)(SwiftUI::ListItemKind a1)
{
  uint64_t *v1;
  unsigned int v2;
  uint64_t v3;
  SwiftUI::ListItemKind::Set result;

  v2 = *(unsigned __int8 *)a1;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  *v1 = v3;
  LOBYTE(result.rawValue) = a1;
  return result;
}

uint64_t ListItemKind.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::ListItemKind_optional __swiftcall ListItemKind.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::ListItemKind_optional)rawValue;
}

unint64_t lazy protocol witness table accessor for type ListItemKind.Set and conformance ListItemKind.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListItemKind.Set, &type metadata for ListItemKind.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListItemKind.Set, &type metadata for ListItemKind.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListItemKind.Set, &type metadata for ListItemKind.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListItemKind.Set, &type metadata for ListItemKind.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListItemKind and conformance ListItemKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListItemKind and conformance ListItemKind;
  if (!lazy protocol witness table cache variable for type ListItemKind and conformance ListItemKind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListItemKind, &type metadata for ListItemKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind and conformance ListItemKind);
  }
  return result;
}

SwiftUI::ListItemKind_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ListItemKind(Swift::Int *a1)
{
  return ListItemKind.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for ListItemBackgroundTraitKey()
{
  return &type metadata for ListItemBackgroundTraitKey;
}

uint64_t storeEnumTagSinglePayload for ListItemKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18771C948 + 4 * byte_187C52B35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18771C97C + 4 * byte_187C52B30[v4]))();
}

uint64_t sub_18771C97C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18771C984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18771C98CLL);
  return result;
}

uint64_t sub_18771C998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18771C9A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18771C9A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18771C9AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListItemKind()
{
  return &type metadata for ListItemKind;
}

ValueMetadata *type metadata accessor for ListItemKind.Set()
{
  return &type metadata for ListItemKind.Set;
}

uint64_t EnvironmentValues.menuTitleVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<MenuTitleVisibilityKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
  }
}

uint64_t EnvironmentValues.menuTitleVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.menuTitleVisibility.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.menuTitleVisibility.modify;
}

uint64_t EnvironmentValues.menuTitleVisibility.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuTitle(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18771CE6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuTitleVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18771CE94()
{
  return EnvironmentValues.menuTitleVisibility.setter();
}

void View.overrideMenuTitle(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v7[0] = a1;
  v7[1] = a2;
  v8 = a3 & 1;
  v9 = a4;
  View.platformItemLabel<A, B>(_:flags:)((uint64_t)v7, a2, a5, MEMORY[0x1E0CE6CF8], (uint64_t)&type metadata for TextPlatformItemListFlags, a6, MEMORY[0x1E0CE6C58], (uint64_t)&protocol witness table for TextPlatformItemListFlags, a7);
}

uint64_t sub_18771CF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void sub_18771CF98()
{
  type metadata accessor for PlatformItemLabelView();
}

uint64_t sub_18771CFE0(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemLabelView<A, B, C>, a1);
}

void *type metadata accessor for MenuTitleVisibilityKey()
{
  return &unk_1E1ADC7D0;
}

ValueMetadata *type metadata accessor for DetachDeferredAccessibilityAttachmentModifier()
{
  return &type metadata for DetachDeferredAccessibilityAttachmentModifier;
}

ValueMetadata *type metadata accessor for EnableDeferredAccessibilityAttachmentModifier()
{
  return &type metadata for EnableDeferredAccessibilityAttachmentModifier;
}

ValueMetadata *type metadata accessor for DetachedGeometryModifier()
{
  return &type metadata for DetachedGeometryModifier;
}

ValueMetadata *type metadata accessor for DisableDeferredAccessibilityAttachmentModifier()
{
  return &type metadata for DisableDeferredAccessibilityAttachmentModifier;
}

ValueMetadata *type metadata accessor for AccessibilityAttachment.Key()
{
  return &type metadata for AccessibilityAttachment.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in DisableDeferredAccessibilityAttachmentModifier()
{
  return &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
}

uint64_t View.accessibilityAttachment<A>(content:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];

  v54 = a7;
  v56 = a5;
  v59 = a3;
  v58 = a2;
  v57 = a1;
  v61 = a8;
  v53 = type metadata accessor for ModifiedContent();
  v60 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v11);
  v55 = (char *)v47 - v12;
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  v17 = MEMORY[0x1E0CE63C0];
  _s7SwiftUI17_AnyPreferenceKeyVyAA23AccessibilityAttachmentVAAE0E0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE63C0]);
  v18 = type metadata accessor for ModifiedContent();
  v77[0] = a7;
  v77[1] = &protocol witness table for DetachedGeometryModifier;
  v19 = MEMORY[0x1E0CE2E70];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v77);
  v21 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v76[0] = v20;
  v76[1] = v21;
  v75[0] = MEMORY[0x18D75FFDC](v19, v14, v76);
  v75[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v74[0] = MEMORY[0x18D75FFDC](v19, v15, v75);
  v74[1] = &protocol witness table for _HiddenModifier;
  v22 = MEMORY[0x18D75FFDC](v19, v16, v74);
  v23 = lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))v17, MEMORY[0x1E0CE63D0]);
  v73[0] = v22;
  v73[1] = v23;
  v47[1] = v18;
  v47[2] = MEMORY[0x18D75FFDC](v19, v18, v73);
  v48 = type metadata accessor for _BackgroundModifier();
  v24 = v53;
  v25 = type metadata accessor for ModifiedContent();
  v49 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v47 - v27;
  v29 = type metadata accessor for ModifiedContent();
  v51 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v47 - v31;
  v50 = type metadata accessor for ModifiedContent();
  v52 = *(_QWORD *)(v50 - 8);
  v34 = MEMORY[0x1E0C80A78](v50, v33);
  v36 = (char *)v47 - v35;
  v37 = v55;
  MEMORY[0x18D75B4AC](v34);
  v62 = a4;
  v63 = v56;
  v64 = a6;
  v65 = v54;
  v66 = v57;
  v67 = v58;
  v68 = v59;
  static Alignment.center.getter();
  v72[0] = a6;
  v72[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v24, v72);
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v24);
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v48);
  v71[0] = v38;
  v71[1] = v39;
  v40 = MEMORY[0x1E0CE2E70];
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v25, v71);
  View.accessibility()(v25, v41);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v25);
  v70[0] = v41;
  v70[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v42 = MEMORY[0x18D75FFDC](v40, v29, v70);
  MEMORY[0x18D75B4AC](v42, v29, &type metadata for DetachDeferredAccessibilityAttachmentModifier, v42);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v29);
  v69[0] = v42;
  v69[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v43 = v40;
  v44 = v50;
  v45 = MEMORY[0x18D75FFDC](v43, v50, v69);
  MEMORY[0x18D75B4AC](v45, v44, &type metadata for EnableDeferredAccessibilityAttachmentModifier, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v36, v44);
}

void View.accessibilityDetachedGeometry()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t View.accessibilityDeferredAttachmentTransform(_:)()
{
  return View.transformPreference<A>(_:_:)();
}

void AccessibilityAttachment.Tree.combine(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v2 = v1;
  v3 = *a1;
  v4 = (void *)a1[1];
  v5 = *(char **)v1;
  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) == 1)
    {
      v6 = *((_QWORD *)v5 + 2);
      if (v6)
      {
        v7 = 0;
        v8 = 32;
        while (1)
        {
          v17 = v3;
          v18 = v4;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
          if (v7 >= *((_QWORD *)v5 + 2))
            break;
          ++v7;
          AccessibilityAttachment.Tree.combine(with:)(&v17);
          v8 += 24;
          if (v6 == v7)
            goto LABEL_13;
        }
        __break(1u);
      }
      else
      {
LABEL_13:
        *(_QWORD *)v1 = v5;
        *(_QWORD *)(v1 + 8) = 0;
        *(_BYTE *)(v1 + 16) = 1;
      }
    }
    else
    {
      *(_QWORD *)v1 = v3;
      *(_QWORD *)(v1 + 8) = v4;
      *(_BYTE *)(v1 + 16) = 0;
      v14 = v4;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    v9 = *(void **)(v1 + 8);
    v17 = *a1;
    v18 = v4;
    v15 = (uint64_t)v5;
    v10 = v4;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)(&v15);
    v11 = v17;
    v12 = v18;
    v15 = v17;
    v16 = v18;
    v13 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v13 || (v15 = (uint64_t)v5, v16 = v9, !AccessibilityAttachment.platformElement.getter()))
    {
      outlined consume of AccessibilityAttachment.Tree((uint64_t)v5, v9, 0);
    }
    else
    {
      AccessibilityAttachment.platformElement.setter();
      outlined consume of AccessibilityAttachment.Tree((uint64_t)v5, v9, 0);
      v11 = v17;
      v12 = v18;
    }
    *(_QWORD *)v2 = v11;
    *(_QWORD *)(v2 + 8) = v12;
    *(_BYTE *)(v2 + 16) = 0;
  }
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance AccessibilityAttachment.Key(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

void closure #1 in AccessibilityAttachment.DeferredTransform.value.getter()
{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2[2];

  Value = (uint64_t *)AGGraphGetValue();
  v1 = Value[1];
  v2[0] = *Value;
  v2[1] = v1;
  AccessibilityAttachment.Tree.combine(with:)(v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityAttachment.DeferredTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int *v1;
  int v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = _s7SwiftUI23AccessibilityAttachmentVAAE17DeferredTransformV5valueyyAcAE4TreeOzcvgyAHzcfU_TA_0;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance EnableDeferredAccessibilityAttachmentModifier()
{
  uint64_t (*v0)(void);

  v0 = MEMORY[0x1E0CE4070];
  _s7SwiftUI17_AnyPreferenceKeyVyAA23AccessibilityAttachmentVAAE0E0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))v0, MEMORY[0x1E0CE4078]);
  return PreferenceKeys.add(_:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EnableDeferredAccessibilityAttachmentModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = a2[5];
  v6 = a2[6];
  v7 = *((_DWORD *)a2 + 20);
  v21 = *a2;
  v22 = v3;
  v23 = v4;
  v24 = *(_OWORD *)(a2 + 3);
  v25 = v5;
  v26 = v6;
  v27 = *(_OWORD *)(a2 + 7);
  v28 = a2[9];
  v29 = v7;
  v8 = MEMORY[0x1E0CE4070];
  _s7SwiftUI17_AnyPreferenceKeyVyAA23AccessibilityAttachmentVAAE0E0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))v8, MEMORY[0x1E0CE4078]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v12 = v21;
  v13 = v22;
  v14 = v4;
  v15 = v24;
  v16 = v5;
  v17 = v6;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EnableDeferredAccessibilityAttachmentModifier()
{
  lazy protocol witness table accessor for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance EnableDeferredAccessibilityAttachmentModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance DisableDeferredAccessibilityAttachmentModifier()
{
  uint64_t result;

  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
    return PreferenceKeys.remove<A>(_:)();
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DetachedGeometryModifier()
{
  return &protocol witness table for DetachedGeometryModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DisableDeferredAccessibilityAttachmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DisableDeferredAccessibilityAttachmentModifier()
{
  lazy protocol witness table accessor for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance DisableDeferredAccessibilityAttachmentModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

double protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance DetachedGeometryModifier(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  double v12;
  int v13;

  _ViewInputs.withoutGeometryDependencies.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 56) = v11;
  result = v12;
  *(double *)(a2 + 72) = v12;
  *(_DWORD *)(a2 + 80) = v13;
  *(_DWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 36) = (v9 & 0xFFFFFFBF ^ 0x80) & v9;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in EnableDeferredAccessibilityAttachmentModifier()
{
  return &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DetachDeferredAccessibilityAttachmentModifier()
{
  return &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DetachedGeometryModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DetachedGeometryModifier()
{
  lazy protocol witness table accessor for type DetachedGeometryModifier and conformance DetachedGeometryModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance DetachedGeometryModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

double static DetachDeferredAccessibilityAttachmentModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;

  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 20);
  v12 = *a2;
  v13 = v5;
  v14 = v6;
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v7;
  v17 = v8;
  v18 = *(_OWORD *)(a2 + 7);
  v11 = v18;
  v19 = a2[9];
  v20 = v9;
  a3(&v21, a1, &v12);
  v12 = v8;
  v13 = v11;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    LOBYTE(v12) = 1;
    _ViewOutputs.subscript.setter();
  }
  *(_QWORD *)a4 = v21;
  result = v22;
  a4[1] = v22;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance DetachDeferredAccessibilityAttachmentModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

void closure #1 in View.accessibilityAttachment<A>(content:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _QWORD v22[21];
  _QWORD v23[3];

  v22[10] = a2;
  v22[11] = a3;
  v22[3] = a1;
  v22[12] = a5;
  v6 = type metadata accessor for ModifiedContent();
  v22[4] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  v22[6] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for ModifiedContent();
  v22[7] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = type metadata accessor for ModifiedContent();
  v22[8] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v22[2] = (char *)v22 - v14;
  _s7SwiftUI17_AnyPreferenceKeyVyAA23AccessibilityAttachmentVAAE0E0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE63C0]);
  v15 = type metadata accessor for ModifiedContent();
  v22[9] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v22[1] = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22[5] = (char *)v22 - v21;
  MEMORY[0x18D75B4AC](v20);
  v23[0] = a4;
  v23[1] = &protocol witness table for DetachedGeometryModifier;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v23);
  View.accessibilityRepresentationStyle()();
}

void sub_18771E104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 8))(v5, v4);
  v7 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  *(_QWORD *)(v6 - 120) = v0;
  *(_QWORD *)(v6 - 112) = v7;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC]();
  MEMORY[0x18D75B4AC](v9, v2, &type metadata for EnableDeferredAccessibilityAttachmentModifier, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 224) + 8))(v3, v2);
  *(_QWORD *)(v6 - 136) = v9;
  *(_QWORD *)(v6 - 128) = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  MEMORY[0x18D75FFDC](v8, v1, v6 - 136);
  View.hidden()();
}

uint64_t sub_18771E1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 216) + 8))(v5, v1);
  *(_QWORD *)(v7 - 152) = v0;
  *(_QWORD *)(v7 - 144) = &protocol witness table for _HiddenModifier;
  v8 = MEMORY[0x18D75FFDC](v6, v3, v7 - 152);
  v9 = *(_QWORD *)(v7 - 264);
  View.transformPreference<A>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 208) + 8))(v4, v3);
  v10 = lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))MEMORY[0x1E0CE63C0], MEMORY[0x1E0CE63D0]);
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 160) = v10;
  v11 = MEMORY[0x18D75FFDC](v6, v2, v7 - 168);
  v12 = *(_QWORD *)(v7 - 232);
  static ViewBuilder.buildExpression<A>(_:)(v9, v2, v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 200) + 8);
  v13(v9, v2);
  static ViewBuilder.buildBlock<A>(_:)(v12, v2, *(_QWORD *)(v7 - 176));
  return v13(v12, v2);
}

uint64_t sub_18771E2C8()
{
  return swift_deallocObject();
}

void _s7SwiftUI23AccessibilityAttachmentVAAE17DeferredTransformV5valueyyAcAE4TreeOzcvgyAHzcfU_TA_0()
{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2[2];

  Value = (uint64_t *)AGGraphGetValue();
  v1 = Value[1];
  v2[0] = *Value;
  v2[1] = v1;
  AccessibilityAttachment.Tree.combine(with:)(v2);
}

uint64_t sub_18771E324()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized static AccessibilityAttachment.Tree.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v10[2];
  _QWORD v11[2];

  v3 = *(_QWORD *)a1;
  v2 = *(void **)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v11[0] = *(_QWORD *)a1;
      v11[1] = v2;
      v10[0] = v6;
      v10[1] = v5;
      outlined copy of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined copy of AccessibilityAttachment.Tree(v3, v2, 0);
      outlined copy of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined copy of AccessibilityAttachment.Tree(v3, v2, 0);
      v7 = MEMORY[0x18D75A1E0](v11, v10);
      outlined consume of AccessibilityAttachment.Tree(v3, v2, 0);
      outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined consume of AccessibilityAttachment.Tree(v3, v2, 0);
      return v7 & 1;
    }
    goto LABEL_11;
  }
  if (v4 != 1)
  {
    if (v7 == 2 && (v5 | v6) == 0)
    {
      outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, v2, 2);
      outlined consume of AccessibilityAttachment.Tree(0, 0, 2);
      LOBYTE(v7) = 1;
      return v7 & 1;
    }
    goto LABEL_11;
  }
  if (v7 != 1)
  {
LABEL_11:
    outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)a2, *(void **)(a2 + 8), v7);
    outlined copy of AccessibilityAttachment.Tree(v3, v2, v4);
    outlined consume of AccessibilityAttachment.Tree(v3, v2, v4);
    outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, v7);
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)a2, *(void **)(a2 + 8), 1);
  outlined copy of AccessibilityAttachment.Tree(v3, v2, 1);
  LOBYTE(v7) = specialized static Array<A>.== infix(_:_:)(v3, v6);
  outlined consume of AccessibilityAttachment.Tree(v3, v2, 1);
  outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, 1);
  return v7 & 1;
}

void specialized static AccessibilityAttachment.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;

  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  v7 = outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)a1, v5, v6);
  a2(&v19, v7);
  v8 = v19;
  v9 = (void *)v20;
  v10 = v21;
  v11 = v20 | v19;
  outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
  if (v10 != 2 || v11 != 0)
  {
    if (v6)
    {
      if (v6 != 1)
      {
LABEL_18:
        *(_QWORD *)a1 = v8;
        *(_QWORD *)(a1 + 8) = v9;
        *(_BYTE *)(a1 + 16) = v10;
        return;
      }
      if (v10 != 1)
      {
        outlined copy of AccessibilityAttachment.Tree(v8, v9, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
        v15 = *(_QWORD *)(v4 + 16);
        v14 = *(_QWORD *)(v4 + 24);
        if (v15 >= v14 >> 1)
          v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v4);
        *(_QWORD *)(v4 + 16) = v15 + 1;
        v16 = v4 + 24 * v15;
        *(_QWORD *)(v16 + 32) = v8;
        *(_QWORD *)(v16 + 40) = v9;
        *(_BYTE *)(v16 + 48) = v10;
        outlined consume of AccessibilityAttachment.Tree(v8, v9, v10);
        v9 = 0;
        LOBYTE(v10) = 1;
        v8 = v4;
        goto LABEL_18;
      }
      v18 = v4;
    }
    else
    {
      if (v10 != 1)
      {
        type metadata accessor for _ContiguousArrayStorage<AccessibilityAttachment.Tree>();
        v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_187BF9820;
        *(_QWORD *)(v17 + 32) = v4;
        *(_QWORD *)(v17 + 40) = v5;
        *(_BYTE *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = v8;
        *(_QWORD *)(v17 + 64) = v9;
        *(_BYTE *)(v17 + 72) = v10;
        LOBYTE(v10) = 1;
        v8 = v17;
        v9 = 0;
        goto LABEL_18;
      }
      type metadata accessor for _ContiguousArrayStorage<AccessibilityAttachment.Tree>();
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v13 + 32) = v4;
      *(_QWORD *)(v13 + 40) = v5;
      *(_BYTE *)(v13 + 48) = 0;
      v18 = v13;
    }
    specialized Array.append<A>(contentsOf:)(v8);
    v9 = 0;
    v8 = v18;
    LOBYTE(v10) = 1;
    goto LABEL_18;
  }
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityAttachment.Tree>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment.Tree>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment.Tree>);
  }
}

unint64_t lazy protocol witness table accessor for type DetachedGeometryModifier and conformance DetachedGeometryModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DetachedGeometryModifier and conformance DetachedGeometryModifier;
  if (!lazy protocol witness table cache variable for type DetachedGeometryModifier and conformance DetachedGeometryModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DetachedGeometryModifier, &type metadata for DetachedGeometryModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetachedGeometryModifier and conformance DetachedGeometryModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableDeferredAccessibilityAttachmentModifier, &type metadata for EnableDeferredAccessibilityAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableDeferredAccessibilityAttachmentModifier, &type metadata for DisableDeferredAccessibilityAttachmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier);
  }
  return result;
}

void _s7SwiftUI17_AnyPreferenceKeyVyAA23AccessibilityAttachmentVAAE0E0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for AccessibilityAttachment.Key, &protocol witness table for AccessibilityAttachment.Key);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    _s7SwiftUI17_AnyPreferenceKeyVyAA23AccessibilityAttachmentVAAE0E0VGMaTm_0(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in View.accessibilityAttachment<A>(content:_:)(uint64_t a1@<X8>)
{
  uint64_t *v1;

  closure #1 in View.accessibilityAttachment<A>(content:_:)(v1[6], v1[7], v1[8], v1[5], a1);
}

ValueMetadata *type metadata accessor for AccessibilityAttachment.DeferredTransform()
{
  return &type metadata for AccessibilityAttachment.DeferredTransform;
}

void destroy for AccessibilityAttachment.Tree(uint64_t a1)
{
  outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityAttachment.Tree(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessibilityAttachment.Tree(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityAttachment.Tree(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AccessibilityAttachment.Tree(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessibilityAttachment.Tree(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityAttachment.Tree()
{
  return &type metadata for AccessibilityAttachment.Tree;
}

uint64_t destroy for KeyEvent(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for KeyEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = a2 + 64;
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 64, v5, v7);
  return a1;
}

uint64_t assignWithCopy for KeyEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  return a1;
}

uint64_t assignWithTake for KeyEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyEvent()
{
  return &type metadata for KeyEvent;
}

ValueMetadata *type metadata accessor for KeyEvent.Tracker()
{
  return &type metadata for KeyEvent.Tracker;
}

uint64_t KeyEvent.Tracker.serial(for:)(_BYTE *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[5];

  v2 = v1;
  if (*a1 == 1)
  {
    v6 = (uint64_t)(a1 + 64);
    v7 = *v1;
    if (!*(_QWORD *)(*v2 + 16) || (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) == 0))
    {
      DisplayList.Version.init(forUpdate:)();
      v4 = v17[0];
      v5 = v6;
      goto LABEL_11;
    }
    return *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  }
  else
  {
    if (!*a1)
    {
      DisplayList.Version.init(forUpdate:)();
      v4 = v17[0];
      v5 = (uint64_t)(a1 + 64);
LABEL_11:
      outlined init with copy of AnyHashable(v5, (uint64_t)v17);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = *v2;
      *v2 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
      *v2 = v16;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v17);
      return v4;
    }
    v10 = *v1;
    if (*(_QWORD *)(*v2 + 16)
      && (v11 = (uint64_t)(a1 + 64),
          v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)(a1 + 64)),
          (v13 & 1) != 0))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v12);
      specialized Dictionary._Variant.removeValue(forKey:)(v11, (uint64_t)v17);
    }
    else
    {
      DisplayList.Version.init(forUpdate:)();
      return v17[0];
    }
  }
  return v4;
}

uint64_t protocol witness for ModifiersEventType.modifiers.setter in conformance KeyEvent(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance KeyEvent@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double protocol witness for EventType.init(_:) in conformance KeyEvent@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    v2 = v11;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = v2;
    *(_QWORD *)(a1 + 96) = v12;
    v3 = v7;
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v3;
    v4 = v9;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v4;
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    outlined destroy of KeyEvent?((uint64_t)&v6);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return *(double *)&v4;
}

uint64_t specialized static KeyEvent.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return 0;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    if (v5)
    {
      if (v4 != v5)
        return 0;
      goto LABEL_8;
    }
    swift_retain();
LABEL_17:
    swift_release();
    return 0;
  }
  if (v5)
    goto LABEL_17;
LABEL_8:
  if (*((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3)
    && (*((_QWORD *)a1 + 4) == *((_QWORD *)a2 + 4) && *((_QWORD *)a1 + 5) == *((_QWORD *)a2 + 5)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (*((_QWORD *)a1 + 6) == *((_QWORD *)a2 + 6) && *((_QWORD *)a1 + 7) == *((_QWORD *)a2 + 7)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    JUMPOUT(0x18D75E284);
  }
  return 0;
}

uint64_t protocol witness for EventType.init(_:) in conformance TransformEvent@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  type metadata accessor for EventType();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    v3 = v10;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
    v3 = 0uLL;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  *(_OWORD *)(a1 + 72) = v3;
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance TransformEvent()
{
  lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();
  return HitTestableEventType<>.hitTestLocation.getter();
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance TransformEvent()
{
  lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();
  return HitTestableEventType<>.hitTestRadius.getter();
}

uint64_t initializeWithCopy for TransformEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TransformEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for TransformEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransformEvent()
{
  return &type metadata for TransformEvent;
}

BOOL specialized static TransformEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;

  result = 0;
  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return result;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v8 = *(double *)(a1 + 40);
  v7 = *(double *)(a1 + 48);
  v10 = *(double *)(a1 + 56);
  v9 = *(double *)(a1 + 64);
  v12 = *(double *)(a1 + 72);
  v11 = *(double *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(double *)(a2 + 24);
  if (v4)
  {
    if (v13)
    {
      result = 0;
      if (v4 != v13 || v6 != v14)
        return result;
      goto LABEL_13;
    }
    swift_retain();
LABEL_11:
    swift_release();
    return 0;
  }
  if (v13)
    goto LABEL_11;
  result = 0;
  if (v6 != v14)
    return result;
LABEL_13:
  if (v5 == *(double *)(a2 + 32)
    && v8 == *(double *)(a2 + 40)
    && v7 == *(double *)(a2 + 48)
    && v10 == *(double *)(a2 + 56)
    && v9 == *(double *)(a2 + 64)
    && v12 == *(double *)(a2 + 72))
  {
    return v11 == *(double *)(a2 + 80);
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v7 = a3 + 32;
    swift_bridgeObjectRetain();
    v8 = v5 - 1;
    do
    {
      v9 = v8;
      v10 = (v4 != 0) | a1(v7);
      if ((v10 & 1) != 0)
        break;
      v8 = v9 - 1;
      v7 += 48;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  char v28;
  uint64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v2;
  v31 = a1;
  v32 = a2;
  type metadata accessor for (AnyToken?, Range<AttributedString.Index>)();
  v34 = v5;
  v33 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (AnyToken?, Range<AttributedString.Index>)?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E0CAF0F0]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v30 - v18;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E0CAF0D8]);
  v21 = v20;
  v30 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v30 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, v4, v15, v23);
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>();
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator();
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v34);
    if (v26 == 1)
      break;
    outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for (AnyToken?, Range<AttributedString.Index>));
    v27 = v31(v8);
    if (v3)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for (AnyToken?, Range<AttributedString.Index>));
      break;
    }
    v28 = v27;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for (AnyToken?, Range<AttributedString.Index>));
  }
  while ((v28 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v21);
  return v26 != 1;
}

uint64_t SearchCompletion.init(kind:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  outlined init with take of TextInputSuggestionCompletionKind(a1, a5);
  v10 = type metadata accessor for SearchCompletion(0, a3, a4, v9);
  a2();
  v11 = (uint64_t *)(a5 + *(int *)(v10 + 40));
  *v11 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  return swift_storeEnumTagMultiPayload();
}

void SearchCompletion.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Button(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(255);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  type metadata accessor for StaticIf();
}

void sub_18771F84C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_QWORD *)(v9 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v9 - 208) = v8;
  *(_QWORD *)(v9 - 200) = v2;
  *(_QWORD *)(v9 - 192) = v3;
  *(_QWORD *)(v9 - 256) = v8;
  *(_QWORD *)(v9 - 248) = v2;
  *(_QWORD *)(v9 - 240) = v3;
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v6, v12);
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  *(_QWORD *)(v9 - 136) = v13;
  *(_QWORD *)(v9 - 128) = v14;
  v15 = MEMORY[0x1E0CE2E70];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9 - 136);
  v17 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  *(_QWORD *)(v9 - 152) = v16;
  *(_QWORD *)(v9 - 144) = v17;
  *(_QWORD *)(v9 - 160) = MEMORY[0x18D75FFDC](v15, v4, v9 - 152);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v5, v9 - 160);
  StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE4C90], (void (*)(void))partial apply for closure #1 in SearchCompletion.body.getter);
}

uint64_t sub_18771F980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 176) = v0;
  *(_QWORD *)(v5 - 168) = v1;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5 - 176);
  static ViewBuilder.buildExpression<A>(_:)(v3, v4, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 288) + 8);
  v7(v3, v4);
  static ViewBuilder.buildBlock<A>(_:)(v2, v4, *(_QWORD *)(v5 - 280));
  return v7(v2, v4);
}

uint64_t closure #1 in SearchCompletion.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD v28[2];
  _QWORD v29[2];

  v7 = type metadata accessor for Button(255, a1, a2, a3);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(255);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v28 - v16;
  v19 = type metadata accessor for SearchCompletion(0, a1, a2, v18);
  SearchCompletion.completionContent.getter(v19, (uint64_t)v13);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v7);
  v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  v29[0] = v20;
  v29[1] = v21;
  v22 = MEMORY[0x1E0CE2E70];
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v29);
  v24 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  v28[0] = v23;
  v28[1] = v24;
  v25 = MEMORY[0x18D75FFDC](v22, v9, v28);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, v25);
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v13, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v9, a4);
  return ((uint64_t (*)(char *, uint64_t))v26)(v17, v9);
}

uint64_t SearchCompletion.completionContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];

  v47 = a2;
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v46 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for SearchCompletionButtonStyle();
  MEMORY[0x1E0C80A78](v42, v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v18 = type metadata accessor for Button(0, v16, v15, v17);
  v43 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v40 = (_WORD *)((char *)&v40 - v20);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(255);
  v21 = type metadata accessor for ModifiedContent();
  v22 = *(_QWORD *)(v21 - 8);
  v44 = v21;
  v45 = v22;
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v41 = (char *)&v40 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v14, v2, a1, v24);
  v26 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v16;
  *(_QWORD *)(v27 + 24) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v27 + v26, v14, a1);
  v49 = v16;
  v50 = v15;
  v28 = v2;
  v51 = v2;
  v29 = v40;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in SearchCompletion.completionContent.getter, v27, (void (*)(uint64_t))partial apply for closure #2 in SearchCompletion.completionContent.getter, (uint64_t)v48, v16, v15, v40);
  outlined init with copy of TextInputSuggestionCompletionKind(v28, (uint64_t)v9);
  v30 = v42;
  v31 = (uint64_t *)&v9[*(int *)(v42 + 20)];
  *v31 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v32 = &v9[*(int *)(v30 + 24)];
  *(_QWORD *)v32 = swift_getKeyPath();
  *((_QWORD *)v32 + 1) = 0;
  v32[16] = 0;
  v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v18);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle, (uint64_t (*)(uint64_t))type metadata accessor for SearchCompletionButtonStyle, (uint64_t)&protocol conformance descriptor for SearchCompletionButtonStyle);
  v34 = v41;
  View.buttonStyle<A>(_:)((uint64_t)v9, v18, v30, v33);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchCompletionButtonStyle);
  (*(void (**)(_WORD *, uint64_t))(v43 + 8))(v29, v18);
  v35 = v46;
  specialized Environment.wrappedValue.getter(v46);
  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  v52[0] = v33;
  v52[1] = v37;
  v38 = v44;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v44, v52);
  View.disabled(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v34, v38);
}

uint64_t closure #2 in SearchCompletion.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[2];
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];

  v48 = a4;
  v6 = type metadata accessor for Button(255, a1, a2, a3);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(255);
  v49 = v6;
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v50 = v7;
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v46 - v15;
  v17 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v46 - v23;
  v26 = type metadata accessor for SearchCompletion(0, a1, a2, v25);
  if ((SearchCompletion.shouldRenderPreV6.getter() & 1) != 0)
  {
    SearchCompletion.completionContent.getter(v26, (uint64_t)v12);
    v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v49);
    v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
    v52[0] = v27;
    v52[1] = v28;
    v29 = MEMORY[0x1E0CE2E70];
    v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v50, v52);
    v31 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
    v51[0] = v30;
    v51[1] = v31;
    v32 = MEMORY[0x18D75FFDC](v29, v8, v51);
    static ViewBuilder.buildExpression<A>(_:)(v12, v8, v32);
    v33 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33(v12, v8);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, (uint64_t)v20);
    v33(v16, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v20, 1, 1, v8);
    v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v49);
    v35 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
    v57[0] = v34;
    v57[1] = v35;
    v36 = MEMORY[0x1E0CE2E70];
    v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v50, v57);
    v38 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
    v56[0] = v37;
    v56[1] = v38;
    MEMORY[0x18D75FFDC](v36, v8, v56);
  }
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v20, (uint64_t)v24);
  v39 = *(void (**)(char *, uint64_t))(v47 + 8);
  v39(v20, v17);
  v40 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v49);
  v41 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  v55[0] = v40;
  v55[1] = v41;
  v42 = MEMORY[0x1E0CE2E70];
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v50, v55);
  v44 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  v54[0] = v43;
  v54[1] = v44;
  v53 = MEMORY[0x18D75FFDC](v42, v8, v54);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v17, &v53);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v17, v48);
  return ((uint64_t (*)(char *, uint64_t))v39)(v24, v17);
}

uint64_t SearchCompletion.shouldRenderPreV6.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[4];
  uint64_t v39;
  _OWORD v40[4];
  uint64_t v41;
  char v42;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E0CAF0F0]);
  v37 = v1;
  v36 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v35 - v3;
  v35 = type metadata accessor for AttributedString.Runs();
  v5 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v35 - v15;
  v17 = type metadata accessor for AttributedString();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  SearchCompletion.text.getter((uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v22 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v16, v17);
    outlined init with copy of TextInputSuggestionCompletionKind(v0, (uint64_t)v40);
    if ((v42 & 1) != 0)
    {
      v38[2] = v40[2];
      v38[3] = v40[3];
      v39 = v41;
      v38[0] = v40[0];
      v38[1] = v40[1];
      AttributedString.runs.getter();
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath, v24);
      *(&v35 - 2) = v25;
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
      AttributedString.Runs.subscript.getter();
      swift_release();
      v26 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v35);
      MEMORY[0x1E0C80A78](v26, v27);
      *(&v35 - 2) = (uint64_t)v38;
      v28 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in SearchCompletion.shouldRenderPreV6.getter, (uint64_t)(&v35 - 4));
      (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      v22 = !v28;
      outlined destroy of AnyToken((uint64_t)v38);
    }
    else
    {
      v29 = v40[0];
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v12, v21, v17);
      v30 = SearchAttributedString.lastText.getter();
      v32 = v31;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SearchAttributedString);
      if (v32)
      {
        if (__PAIR128__(v32, v30) == v29)
          v33 = 1;
        else
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v33 = 0;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      swift_bridgeObjectRelease_n();
      v22 = v33 ^ 1;
    }
  }
  return v22 & 1;
}

uint64_t closure #1 in SearchCompletion.completionContent.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[4];
  uint64_t v32;
  _OWORD v33[4];
  uint64_t v34;
  char v35;

  v6 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v31 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v31 - v20;
  outlined init with copy of TextInputSuggestionCompletionKind(a1, (uint64_t)v33);
  if ((v35 & 1) != 0)
  {
    v31[2] = v33[2];
    v31[3] = v33[3];
    v32 = v34;
    v31[0] = v33[0];
    v31[1] = v33[1];
    v23 = type metadata accessor for SearchCompletion(0, a2, a3, v22);
    SearchCompletion.text.getter((uint64_t)v13);
    v24 = type metadata accessor for AttributedString();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1, v24))
    {
      outlined init with copy of AttributedString?((uint64_t)v13, (uint64_t)v17);
      SearchCompletion.text.setter((uint64_t)v17, v23);
      outlined destroy of AnyToken((uint64_t)v31);
      return outlined destroy of Binding<AttributedString>((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v9, v13, v24);
      SearchAttributedString.append(token:)((uint64_t)v31);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v24);
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v13, v9, v24);
      SearchCompletion.text.setter((uint64_t)v13, v23);
      return outlined destroy of AnyToken((uint64_t)v31);
    }
  }
  else
  {
    v27 = (Swift::String)v33[0];
    v28 = type metadata accessor for SearchCompletion(0, a2, a3, v22);
    SearchCompletion.text.getter((uint64_t)v21);
    v29 = type metadata accessor for AttributedString();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v21, 1, v29))
    {
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString?((uint64_t)v21, (uint64_t)v17);
      SearchCompletion.text.setter((uint64_t)v17, v28);
      return outlined destroy of Binding<AttributedString>((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v9, v21, v29);
      SearchAttributedString.update(text:)(v27);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v29);
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v21, v9, v29);
      return SearchCompletion.text.setter((uint64_t)v21, v28);
    }
  }
}

uint64_t SearchCompletion.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Environment.wrappedValue.getter((uint64_t)v5);
  type metadata accessor for Binding<AttributedString>();
  v7 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
    v8 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    MEMORY[0x18D75B9C8](v7);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
    v10 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
  }
}

uint64_t SearchCompletion.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[15];
  BOOL v16;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v15[-v12];
  outlined init with copy of AttributedString?(a1, (uint64_t)&v15[-v12]);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v8, v13, v4);
    closure #1 in SearchCompletion.text.setter(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), &v16);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  return outlined destroy of Binding<AttributedString>(a1, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t closure #2 in SearchCompletion.completionContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SearchCompletion(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t closure #1 in SearchCompletion.shouldRenderPreV6.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;
  _BYTE v19[40];
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[40];
  _OWORD v27[2];
  uint64_t v28;

  type metadata accessor for (AnyToken?, Range<AttributedString.Index>)();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(int *)(v8 + 48);
  v10 = (uint64_t)&v7[v9];
  v11 = a1 + v9;
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v7, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, v10, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  outlined init with take of AnyToken?((uint64_t)v7, (uint64_t)v20);
  if (v21)
  {
    outlined init with copy of AnyHashable((uint64_t)&v22, (uint64_t)v27);
    outlined destroy of AnyToken((uint64_t)v20);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v10, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v10, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    outlined destroy of AccessibilityTableContext?((uint64_t)v20, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken);
    memset(v27, 0, sizeof(v27));
    v28 = 0;
  }
  outlined init with copy of AnyHashable(a2 + 32, (uint64_t)v26);
  v12 = MEMORY[0x1E0DEC198];
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v27, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v26, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v12);
  if (!v21)
  {
    v14 = MEMORY[0x1E0DEC198];
    outlined destroy of AccessibilityTableContext?((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined destroy of AccessibilityTableContext?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v14);
    if (!*((_QWORD *)&v24 + 1))
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
      v13 = 1;
      return v13 & 1;
    }
LABEL_10:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable?, AnyHashable?));
    v13 = 0;
    return v13 & 1;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v20, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  if (!*((_QWORD *)&v24 + 1))
  {
    v15 = MEMORY[0x1E0DEC198];
    outlined destroy of AccessibilityTableContext?((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined destroy of AccessibilityTableContext?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v15);
    outlined destroy of AnyHashable((uint64_t)v19);
    goto LABEL_10;
  }
  v17[0] = v23;
  v17[1] = v24;
  v18 = v25;
  v13 = MEMORY[0x18D75E284](v19, v17);
  outlined destroy of AnyHashable((uint64_t)v17);
  outlined destroy of AccessibilityTableContext?((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v12);
  outlined destroy of AccessibilityTableContext?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v12);
  outlined destroy of AnyHashable((uint64_t)v19);
  outlined destroy of AccessibilityTableContext?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v12);
  return v13 & 1;
}

uint64_t closure #1 in SearchCompletion.text.setter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t (*v13)(_QWORD);
  uint64_t result;
  uint64_t v15;

  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchCompletion(0, a1, a2, v10);
  specialized Environment.wrappedValue.getter((uint64_t)v9);
  type metadata accessor for Binding<AttributedString>();
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11);
  if (v12 == 1)
  {
    v13 = (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?;
  }
  else
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    v13 = (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>;
  }
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, v13);
  *a3 = v12 == 1;
  return result;
}

uint64_t closure #1 in SearchCompletionButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t *);
  uint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for DismissSearchAccessoryAction(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrimitiveButtonStyleConfiguration.trigger()();
  v7 = a2 + *(int *)(type metadata accessor for SearchCompletionButtonStyle() + 24);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_BYTE *)(v7 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, v9, v10);
  v11 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v8, v9, v10);
  outlined consume of Environment<AppIntentExecutor?>.Content(v8, v9, v10, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  if (v11)
  {
    v14 = 4;
    v11(&v14);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
  }
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  DismissSearchAccessoryAction.callAsFunction()();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for DismissSearchAccessoryAction);
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance SearchCompletionButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t (**v25)();
  uint64_t v27;
  uint64_t v28;

  v5 = v3;
  v28 = a3;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x1E0C80A78](v16, v19);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for SearchCompletionButtonStyle);
  v21 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v22 = (v18 + *(unsigned __int8 *)(v12 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v23 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v21, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, (uint64_t (*)(_QWORD))type metadata accessor for SearchCompletionButtonStyle);
  v24 = a1[1];
  *v11 = *a1;
  v11[1] = v24;
  v25 = (uint64_t (**)())&v11[*(int *)(v8 + 36)];
  *v25 = partial apply for closure #1 in SearchCompletionButtonStyle.makeBody(configuration:);
  v25[1] = (uint64_t (*)())v23;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11, v28);
  return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DefinesSearchCompletionModifier@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int v2;
  uint64_t result;

  v2 = *v1;
  if (*v1)
  {
    *(_DWORD *)a1 = v2;
    *(_BYTE *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 8) = v2;
    *(_WORD *)(a1 + 12) = 0;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t SearchSuggestionsVisibilityModifier.body(content:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  if (*(_BYTE *)v1 == 2)
  {
    v3 = *(unsigned __int8 *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 8);
    v4 = *(_QWORD *)(v1 + 16);
    outlined copy of Environment<ControlSize>.Content(v4, v3);
    specialized Environment.wrappedValue.getter(v4, v3, &v9);
    v6 = v9;
    result = outlined consume of Environment<ControlSize>.Content(v4, v3);
    v8 = (v5 >> v6) & 1;
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  *a1 = v8;
  return result;
}

uint64_t View.searchCompletion(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD v13[9];
  char v14;

  v13[0] = a1;
  v13[1] = a2;
  v14 = 0;
  swift_bridgeObjectRetain();
  outlined init with take of TextInputSuggestionCompletionKind((uint64_t)v13, a5);
  v10 = type metadata accessor for SearchCompletion(0, a3, a4, v9);
  closure #1 in __App.ShoeboxAdaptor.body.getter(v5, a3, a5 + *(int *)(v10 + 36));
  v11 = (uint64_t *)(a5 + *(int *)(v10 + 40));
  *v11 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t View.searchCompletion<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v18[80];

  v10 = MEMORY[0x1E0C80A78](a1, a1);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v13 + 16))(v12, v10);
  AnyToken.init<A>(_:)((uint64_t)v12, a3, (uint64_t)v18);
  v18[72] = 1;
  outlined init with take of TextInputSuggestionCompletionKind((uint64_t)v18, a5);
  v15 = type metadata accessor for SearchCompletion(0, a2, a4, v14);
  closure #2 in ModalLink.body.getter(v5, a2, a5 + *(int *)(v15 + 36));
  v16 = (uint64_t *)(a5 + *(int *)(v15 + 40));
  *v16 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t View.searchSuggestions(_:for:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t KeyPath;
  char v11;

  v6 = *a2;
  v8[0] = a1;
  v9 = v6;
  KeyPath = swift_getKeyPath();
  v11 = 0;
  MEMORY[0x18D75B4AC](v8, a3, &type metadata for SearchSuggestionsVisibilityModifier, a4);
  return swift_release();
}

uint64_t View.searchSuggestions(_:in:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = *a2;
  return View.searchSuggestions(_:for:)(a1, &v5, a3, a4);
}

uint64_t key path getter for EnvironmentValues.searchSuggestionsPlacement : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchSuggestionsPlacement : EnvironmentValues()
{
  return EnvironmentValues.searchSuggestionsPlacement.setter();
}

uint64_t sub_1877218D0()
{
  return EnvironmentValues.searchSuggestionsPlacement.setter();
}

void sub_187721904(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SearchCompletion(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchCompletion);
}

void sub_187721938(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SearchCompletion(255, *a1, a1[2], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187721964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsVisibilityModifier, &type metadata for SearchSuggestionsVisibilityModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier);
  }
  return result;
}

void type metadata completion function for SearchCompletion()
{
  unint64_t v0;
  unint64_t v1;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchCompletion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t __n;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for AttributedString();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | 7;
  if (((v12 + 16) & (unint64_t)~v12) + *(_QWORD *)(v11 + 64) <= 8)
    v14 = 8;
  else
    v14 = ((v12 + 16) & ~v12) + *(_QWORD *)(v11 + 64);
  if ((v12 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || v14
     + (((v12 | 7) + v9 + ((v7 + 73) & ~(unint64_t)v7)) & ~(v12 | 7))
     + 1 > 0x18)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16));
  }
  else
  {
    v44 = v14;
    v18 = *((unsigned __int8 *)a2 + 72);
    if (v18 >= 2)
      v18 = *(_DWORD *)a2 + 2;
    __n = ((v12 + 16) & ~v12) + *(_QWORD *)(v11 + 64);
    v41 = *(_QWORD *)(v10 - 8);
    v42 = v10;
    v19 = ~(unint64_t)v7;
    v20 = ~v13;
    v43 = *(_DWORD *)(v11 + 84);
    if (v18 == 1)
    {
      v21 = a2[3];
      *(_QWORD *)(a1 + 24) = v21;
      (**(void (***)(uint64_t, uint64_t *))(v21 - 8))(a1, a2);
      v22 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 56) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 32, (uint64_t)(a2 + 4));
      v23 = 1;
    }
    else
    {
      v24 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v24;
      swift_bridgeObjectRetain();
      v23 = 0;
    }
    *(_BYTE *)(a1 + 72) = v23;
    v25 = (uint64_t)a2 + v8;
    v26 = (a1 + v8 + 73) & v19;
    v27 = (v25 + 73) & v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v26, v27, v5);
    v28 = (_QWORD *)((v26 + v9 + v13) & v20);
    v29 = (_QWORD *)((v27 + v9 + v13) & v20);
    v30 = *((unsigned __int8 *)v29 + v44);
    if (v30 >= 2)
    {
      if (v44 <= 3)
        v31 = v44;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {
      v32 = ~v12;
      v33 = (uint64_t *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v43 < 0)
      {
        if ((*(unsigned int (**)(unint64_t))(v41 + 48))(((unint64_t)v33 + v12 + 8) & v32))
        {
LABEL_28:
          memcpy(v28, v29, __n);
LABEL_33:
          *((_BYTE *)v28 + v44) = 1;
          return a1;
        }
      }
      else
      {
        v34 = *v33;
        if ((unint64_t)*v33 >= 0xFFFFFFFF)
          LODWORD(v34) = -1;
        if ((_DWORD)v34 != -1)
          goto LABEL_28;
      }
      *v28 = *v29;
      v35 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v35 = *v33;
      v36 = ((unint64_t)v35 + v12 + 8) & v32;
      v37 = ((unint64_t)v33 + v12 + 8) & v32;
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
      swift_retain();
      swift_retain();
      v38(v36, v37, v42);
      goto LABEL_33;
    }
    *v28 = *v29;
    *((_BYTE *)v28 + v44) = 0;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for SearchCompletion(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v6);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v6 + v7 + (v10 | 7)) & ~(v10 | 7);
  v12 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v12 <= 8)
    v12 = 8;
  v13 = *(unsigned __int8 *)(v11 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  if (v13 != 1)
    return swift_release();
  v15 = ~v10;
  v16 = (uint64_t *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v9 + 48))(((unint64_t)v16 + v10 + 8) & v15);
    if ((_DWORD)result)
      return result;
LABEL_21:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v16 + v10 + 8) & v15, v8);
  }
  v17 = *v16;
  if ((unint64_t)*v16 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  result = (v17 + 1);
  if ((_DWORD)v17 == -1)
    goto LABEL_21;
  return result;
}

uint64_t initializeWithCopy for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 >= 2)
    v6 = *(_DWORD *)a2 + 2;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
    v9 = 1;
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v10;
    swift_bridgeObjectRetain();
    v9 = 0;
  }
  *(_BYTE *)(a1 + 72) = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 73 + a1) & ~v12;
  v14 = (v12 + 73 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 | 7) + v15;
  v20 = (_QWORD *)((v19 + v13) & ~(v18 | 7));
  v21 = (_QWORD *)((v19 + v14) & ~(v18 | 7));
  v22 = *(_QWORD *)(v17 + 64);
  v23 = ((v18 + 16) & ~v18) + v22;
  if (v23 <= 8)
    v24 = 8;
  else
    v24 = ((v18 + 16) & ~v18) + v22;
  v25 = *((unsigned __int8 *)v21 + v24);
  if (v25 >= 2)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  if (v25 == 1)
  {
    v27 = ~v18;
    v28 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v17 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v17 + 48))(((unint64_t)v28 + v18 + 8) & v27))
      {
LABEL_19:
        memcpy(v20, v21, v23);
LABEL_23:
        *((_BYTE *)v20 + v24) = 1;
        return a1;
      }
    }
    else
    {
      v29 = *v28;
      if ((unint64_t)*v28 >= 0xFFFFFFFF)
        LODWORD(v29) = -1;
      if ((_DWORD)v29 != -1)
        goto LABEL_19;
    }
    *v20 = *v21;
    v30 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v28;
    v31 = ((unint64_t)v30 + v18 + 8) & v27;
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    swift_retain();
    swift_retain();
    v32(v31, ((unint64_t)v28 + v18 + 8) & v27, v16);
    goto LABEL_23;
  }
  *v20 = *v21;
  *((_BYTE *)v20 + v24) = 0;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
      *(_BYTE *)(a1 + 72) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 73 + a1) & ~v11;
  v13 = (v11 + 73 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = type metadata accessor for AttributedString();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 | 7) + v14;
  v19 = (_QWORD *)((v18 + v12) & ~(v17 | 7));
  v20 = (_QWORD *)((v18 + v13) & ~(v17 | 7));
  if (v19 == v20)
    return a1;
  v21 = v15;
  v22 = *(unsigned int *)(v16 + 84);
  v23 = *(_QWORD *)(v16 + 64);
  v24 = v23 + ((v17 + 16) & ~v17);
  if (v24 <= 8)
    v25 = 8;
  else
    v25 = v23 + ((v17 + 16) & ~v17);
  v26 = *((unsigned __int8 *)v19 + v25);
  if (v26 >= 2)
  {
    if (v25 <= 3)
      v27 = v25;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  v38 = ~v17;
  if (v26 == 1)
  {
    v28 = (uint64_t *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 0x80000000) == 0)
    {
      v29 = *v28;
      if ((unint64_t)*v28 >= 0xFFFFFFFF)
        LODWORD(v29) = -1;
      if ((_DWORD)v29 != -1)
        goto LABEL_30;
      goto LABEL_29;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(((unint64_t)v28 + v17 + 8) & v38, v22, v15))
    {
LABEL_29:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v28 + v17 + 8) & v38, v21);
    }
  }
  else
  {
    swift_release();
  }
LABEL_30:
  v30 = *((unsigned __int8 *)v20 + v25);
  if (v30 >= 2)
  {
    if (v25 <= 3)
      v31 = v25;
    else
      v31 = 4;
    __asm { BR              X12 }
  }
  if (v30 == 1)
  {
    v32 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(((unint64_t)v32 + v17 + 8) & v38, v22, v21))
      {
LABEL_40:
        memcpy(v19, v20, v24);
LABEL_44:
        *((_BYTE *)v19 + v25) = 1;
        return a1;
      }
    }
    else
    {
      v33 = *v32;
      if ((unint64_t)*v32 >= 0xFFFFFFFF)
        LODWORD(v33) = -1;
      if ((_DWORD)v33 != -1)
        goto LABEL_40;
    }
    *v19 = *v20;
    v34 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v34 = *v32;
    v35 = ((unint64_t)v34 + v17 + 8) & v38;
    v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16);
    swift_retain();
    swift_retain();
    v36(v35, ((unint64_t)v32 + v17 + 8) & v38, v21);
    goto LABEL_44;
  }
  *v19 = *v20;
  *((_BYTE *)v19 + v25) = 0;
  swift_retain();
  return a1;
}

uint64_t initializeWithTake for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;

  v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 73 + a1) & ~v9;
  v11 = (v9 + 73 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for AttributedString();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + v12;
  v17 = (_QWORD *)((v16 + v10) & ~(v15 | 7));
  v18 = (_QWORD *)((v16 + v11) & ~(v15 | 7));
  v19 = *(_QWORD *)(v14 + 64);
  v20 = ((v15 + 16) & ~v15) + v19;
  if (v20 <= 8)
    v21 = 8;
  else
    v21 = ((v15 + 16) & ~v15) + v19;
  v22 = *((unsigned __int8 *)v18 + v21);
  if (v22 >= 2)
  {
    if (v21 <= 3)
      v23 = v21;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  if (v22 == 1)
  {
    v24 = ~v15;
    v25 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v14 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v14 + 48))(((unint64_t)v25 + v15 + 8) & v24))
      {
LABEL_19:
        memcpy(v17, v18, v20);
LABEL_23:
        v27 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF)
        LODWORD(v26) = -1;
      if ((_DWORD)v26 != -1)
        goto LABEL_19;
    }
    *v17 = *v18;
    v28 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v28 = *v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v28 + v15 + 8) & v24, ((unint64_t)v25 + v15 + 8) & v24, v13);
    goto LABEL_23;
  }
  v27 = 0;
  *v17 = *v18;
LABEL_24:
  *((_BYTE *)v17 + v21) = v27;
  return a1;
}

uint64_t assignWithTake for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v38;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 72) = v10;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 73 + a1) & ~v12;
  v14 = (v12 + 73 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 | 7) + v15;
  v20 = (_QWORD *)((v19 + v13) & ~(v18 | 7));
  v21 = (_QWORD *)((v19 + v14) & ~(v18 | 7));
  if (v20 != v21)
  {
    v22 = v16;
    v23 = *(unsigned int *)(v17 + 84);
    v24 = *(_QWORD *)(v17 + 64);
    v25 = v24 + ((v18 + 16) & ~v18);
    if (v25 <= 8)
      v26 = 8;
    else
      v26 = v24 + ((v18 + 16) & ~v18);
    v27 = *((unsigned __int8 *)v20 + v26);
    if (v27 >= 2)
    {
      if (v26 <= 3)
        v28 = v26;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    v38 = ~v18;
    if (v27 != 1)
    {
      swift_release();
      goto LABEL_31;
    }
    v29 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v23 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(((unint64_t)v29 + v18 + 8) & v38, v23, v16))
      {
        goto LABEL_31;
      }
    }
    else
    {
      v30 = *v29;
      if ((unint64_t)*v29 >= 0xFFFFFFFF)
        LODWORD(v30) = -1;
      if ((_DWORD)v30 != -1)
      {
LABEL_31:
        v31 = *((unsigned __int8 *)v21 + v26);
        if (v31 >= 2)
        {
          if (v26 <= 3)
            v32 = v26;
          else
            v32 = 4;
          __asm { BR              X12 }
        }
        if (v31 != 1)
        {
          v35 = 0;
          *v20 = *v21;
LABEL_46:
          *((_BYTE *)v20 + v26) = v35;
          return a1;
        }
        v33 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v23 & 0x80000000) != 0)
        {
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(((unint64_t)v33 + v18 + 8) & v38, v23, v22))
          {
LABEL_41:
            memcpy(v20, v21, v25);
LABEL_45:
            v35 = 1;
            goto LABEL_46;
          }
        }
        else
        {
          v34 = *v33;
          if ((unint64_t)*v33 >= 0xFFFFFFFF)
            LODWORD(v34) = -1;
          if ((_DWORD)v34 != -1)
            goto LABEL_41;
        }
        *v20 = *v21;
        v36 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v36 = *v33;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 32))(((unint64_t)v36 + v18 + 8) & v38, ((unint64_t)v33 + v18 + 8) & v38, v22);
        goto LABEL_45;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v17 + 8))(((unint64_t)v29 + v18 + 8) & v38, v22);
    goto LABEL_31;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCompletion(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unsigned int v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64);
  v12 = 8;
  if (v11 > 8)
    v12 = v11;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v6 + 80);
  if (a2 <= v8)
    goto LABEL_24;
  v14 = v12 + (((v10 | 7) + *(_QWORD *)(v6 + 64) + ((v13 + 73) & ~v13)) & ~(v10 | 7)) + 1;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v18 < 2)
    {
LABEL_24:
      if (v7 > 0xFE)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))((a1 + v13 + 73) & ~v13, v7, v5);
      v20 = *(unsigned __int8 *)(a1 + 72);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_24;
LABEL_17:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X11 }
  }
  return v8 + v19 + 1;
}

void storeEnumTagSinglePayload for SearchCompletion(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0xFEu)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64);
  v12 = ((v10 | 7)
       + *(_QWORD *)(v7 + 64)
       + ((*(unsigned __int8 *)(v7 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(v10 | 7);
  if (v11 <= 8)
    v11 = 8;
  v13 = v11 + v12 + 1;
  if (a3 <= v8)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v8 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v8 < a2)
  {
    v15 = ~v8 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t destroy for SearchSuggestionsVisibilityModifier(uint64_t a1)
{
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t initializeWithCopy for SearchSuggestionsVisibilityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<ControlSize>.Content(v3, v4);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for SearchSuggestionsVisibilityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<ControlSize>.Content(v3, v4);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for SearchSuggestionsVisibilityModifier(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v3;
  outlined consume of Environment<ControlSize>.Content(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for SearchSuggestionsVisibilityModifier()
{
  return &type metadata for SearchSuggestionsVisibilityModifier;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchCompletionButtonStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 72);
    if (v7 == 255)
    {
      v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else if ((v7 & 1) != 0)
    {
      v12 = a2[3];
      *(_QWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 56) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 32, (uint64_t)(a2 + 4));
      *(_BYTE *)(v4 + 72) = 1;
    }
    else
    {
      v11 = a2[1];
      *(_QWORD *)v4 = *a2;
      *(_QWORD *)(v4 + 8) = v11;
      *(_BYTE *)(v4 + 72) = 0;
      swift_bridgeObjectRetain();
    }
    v14 = *(int *)(a3 + 20);
    v15 = (_QWORD *)(v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      v18 = v17;
      v19 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v40 = v16[1];
        *v15 = *v16;
        v15[1] = v40;
        v21 = *(int *)(v18 + 32);
        v41 = v19;
        v22 = (char *)v15 + v21;
        v23 = (char *)v16 + v21;
        *v22 = *((_BYTE *)v16 + v21);
        v22[1] = *((_BYTE *)v16 + v21 + 1);
        *((_WORD *)v22 + 1) = *(_WORD *)((char *)v16 + v21 + 2);
        v22[8] = *((_BYTE *)v16 + v21 + 8);
        *((_DWORD *)v22 + 1) = *(_DWORD *)((char *)v16 + v21 + 4);
        v24 = (int *)type metadata accessor for SearchFieldState();
        v25 = v24[9];
        v38 = &v23[v25];
        v39 = &v22[v25];
        v26 = type metadata accessor for AttributedString();
        v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        swift_retain();
        swift_retain();
        v37(v39, v38, v26);
        v22[v24[10]] = v23[v24[10]];
        v27 = v24[11];
        v28 = &v22[v27];
        v29 = &v23[v27];
        v28[4] = v29[4];
        *(_DWORD *)v28 = *(_DWORD *)v29;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v15, 0, 1, v18);
      }
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v30 = *(int *)(a3 + 24);
    v31 = v4 + v30;
    v32 = (uint64_t)a2 + v30;
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)(v32 + 8);
    v35 = *(_BYTE *)(v32 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v32, v34, v35);
    *(_QWORD *)v31 = v33;
    *(_QWORD *)(v31 + 8) = v34;
    *(_BYTE *)(v31 + 16) = v35;
  }
  return v4;
}

_OWORD *initializeWithTake for SearchCompletionButtonStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v31;
  char *v32;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v14 = v13;
    v15 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v13))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = v10[1];
      *v9 = *v10;
      v9[1] = v17;
      v18 = *(int *)(v14 + 32);
      v19 = (char *)v9 + v18;
      v20 = (char *)v10 + v18;
      *v19 = *((_BYTE *)v10 + v18);
      v19[1] = *((_BYTE *)v10 + v18 + 1);
      *((_WORD *)v19 + 1) = *(_WORD *)((char *)v10 + v18 + 2);
      v19[8] = *((_BYTE *)v10 + v18 + 8);
      *((_DWORD *)v19 + 1) = *(_DWORD *)((char *)v10 + v18 + 4);
      v21 = (int *)type metadata accessor for SearchFieldState();
      v22 = v21[9];
      v31 = &v20[v22];
      v32 = &v19[v22];
      v23 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v32, v31, v23);
      v19[v21[10]] = v20[v21[10]];
      v24 = v21[11];
      v25 = &v19[v24];
      v26 = &v20[v24];
      v25[4] = v26[4];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v27 = *(int *)(a3 + 24);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v28[16] = v29[16];
  return a1;
}

uint64_t assignWithTake for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v37;
  char *v38;

  if (*(unsigned __int8 *)(a1 + 72) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 72) == 255 || a1 != a2)
  {
    outlined destroy of TextInputSuggestionCompletionKind(a1);
LABEL_7:
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>(a1 + v9, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, v12);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      v16 = v15;
      v17 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v15))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v19 = v11[1];
        *v10 = *v11;
        v10[1] = v19;
        v20 = *(int *)(v16 + 32);
        v21 = (char *)v10 + v20;
        v22 = (char *)v11 + v20;
        *v21 = *((_BYTE *)v11 + v20);
        v21[1] = *((_BYTE *)v11 + v20 + 1);
        *((_WORD *)v21 + 1) = *(_WORD *)((char *)v11 + v20 + 2);
        v21[8] = *((_BYTE *)v11 + v20 + 8);
        *((_DWORD *)v21 + 1) = *(_DWORD *)((char *)v11 + v20 + 4);
        v23 = (int *)type metadata accessor for SearchFieldState();
        v24 = v23[9];
        v37 = &v22[v24];
        v38 = &v21[v24];
        v25 = type metadata accessor for AttributedString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v38, v37, v25);
        v21[v23[10]] = v22[v23[10]];
        v26 = v23[11];
        v27 = &v21[v26];
        v28 = &v22[v26];
        v27[4] = v28[4];
        *(_DWORD *)v27 = *(_DWORD *)v28;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  v29 = *(int *)(a3 + 24);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_BYTE *)(v31 + 16);
  v33 = *(_QWORD *)v30;
  v34 = *(_QWORD *)(v30 + 8);
  v35 = *(_BYTE *)(v30 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = v32;
  outlined consume of Environment<AppIntentExecutor?>.Content(v33, v34, v35, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCompletionButtonStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187723828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SearchCompletionButtonStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1877238CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchSuggestionsVisibilityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchCompletion<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in SearchCompletionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1877239B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int EnumCaseMultiPayload;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for SearchCompletionButtonStyle();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = v0 + *(int *)(v1 + 24) + v3;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_8;
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_WORD *)(v8 + 32), *(_BYTE *)(v8 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64), *(_WORD *)(v8 + 72), *(_BYTE *)(v8 + 74));
  v10 = v8 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v11 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
LABEL_8:
  v12 = v0 + v7;
  v13 = *(unsigned __int8 *)(v0 + v7 + 72);
  if (v13 != 255)
  {
    if ((v13 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + v7);
      __swift_destroy_boxed_opaque_existential_1(v12 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v14 = v12 + *(int *)(v5 + 20);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v16 = v15;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_release();
      swift_release();
      v17 = *(int *)(v16 + 32);
      v18 = v14 + v17 + *(int *)(type metadata accessor for SearchFieldState() + 36);
      v19 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v12 + *(int *)(v5 + 24)), *(_QWORD *)(v12 + *(int *)(v5 + 24) + 8), *(_BYTE *)(v12 + *(int *)(v5 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchCompletionButtonStyle.makeBody(configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchCompletionButtonStyle() - 8) + 80);
  return closure #1 in SearchCompletionButtonStyle.makeBody(configuration:)(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t partial apply for closure #1 in SearchCompletion.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SearchCompletion.body.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t partial apply for closure #2 in SearchCompletion.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in SearchCompletion.body.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_187723C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for SearchCompletion(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v4 + v8;
  if ((*(_BYTE *)(v4 + v8 + 72) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4 + v8);
    __swift_destroy_boxed_opaque_existential_1(v9 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + *(int *)(v6 + 36), v5);
  v10 = v9 + *(int *)(v6 + 40);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    v12 = v11;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_release();
      swift_release();
      v13 = v10 + *(int *)(v12 + 32);
      v14 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    }
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchCompletion.completionContent.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchCompletion(0, v5, v6, a4) - 8) + 80);
  return closure #1 in SearchCompletion.completionContent.getter(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t partial apply for closure #2 in SearchCompletion.completionContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in SearchCompletion.completionContent.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t outlined init with copy of AttributedString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute);
  }
  return result;
}

uint64_t sub_187723ED8()
{
  return 8;
}

uint64_t sub_187723EE4()
{
  return swift_release();
}

uint64_t sub_187723EEC(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *sub_187723F00(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t partial apply for closure #1 in SearchCompletion.shouldRenderPreV6.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SearchCompletion.shouldRenderPreV6.getter(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void type metadata accessor for (AnyToken?, Range<AttributedString.Index>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyToken?, Range<AttributedString.Index>))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for Range<AttributedString.Index>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyToken?, Range<AttributedString.Index>));
  }
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E0CAF0F0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF108], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E0CAF0D8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF0E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator);
  }
  return result;
}

uint64_t outlined init with take of AnyToken?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with take of TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  __swift_memcpy73_8(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for DefinesSearchCompletionModifier()
{
  return &type metadata for DefinesSearchCompletionModifier;
}

uint64_t sub_187724194()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

void sub_1877241C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Button(255, *a1, a1[1], a4);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(255);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  type metadata accessor for StaticIf();
}

uint64_t sub_18772427C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[14];

  v12[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v3);
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, v4, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  v7 = MEMORY[0x1E0CE2E70];
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v12);
  v11[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  v10 = MEMORY[0x18D75FFDC](v7, v5, v11);
  v9[0] = v10;
  v9[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v10);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v9);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?)
  {
    type metadata accessor for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier, (uint64_t)&type metadata for SearchSuggestionsVisibilityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier, (uint64_t)&type metadata for SearchSuggestionsVisibilityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DefinesSearchCompletionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187724480()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>();
    type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DefinesSearchCompletionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier, (uint64_t)&type metadata for DefinesSearchCompletionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>);
  }
}

void type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3430]);
    lazy protocol witness table accessor for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>();
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>);
  }
}

unint64_t lazy protocol witness table accessor for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>;
  if (!lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3430]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>);
  }
  return result;
}

void type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>)
  {
    type metadata accessor for TagValueTraitKey<ViewIdentity?>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity?> and conformance TagValueTraitKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for TagValueTraitKey<ViewIdentity?>, MEMORY[0x1E0CE3440]);
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>);
  }
}

void type metadata accessor for TagValueTraitKey<ViewIdentity?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ViewIdentity?, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type ViewIdentity? and conformance <A> A?();
    v0 = type metadata accessor for TagValueTraitKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity?>);
  }
}

unint64_t lazy protocol witness table accessor for type ViewIdentity? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ViewIdentity? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ViewIdentity? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ViewIdentity?, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewIdentity? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>, lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity>> and conformance _TraitWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DefinesSearchCompletionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier, (uint64_t)&type metadata for DefinesSearchCompletionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity>> and conformance _TraitWritingModifier<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity>> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>, MEMORY[0x1E0CE52E0]);
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>> and conformance _TraitWritingModifier<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>, MEMORY[0x1E0CE52E0]);
}

uint64_t EnvironmentValues.searchFieldPlacement.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter((unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.isSearchVibrancyEnabled.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchScopeActivation.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchFieldPlacement.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unsigned __int8 v8;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v8;
}

uint64_t EnvironmentValues.searchScopeActivation.setter(uint64_t a1)
{
  return EnvironmentValues.searchScopeActivation.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchFieldPlacement.setter(uint64_t a1)
{
  return EnvironmentValues.searchScopeActivation.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchScopeActivation.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double EnvironmentValues.searchFocusContext.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t EnvironmentValues.searchText.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

Swift::Void __swiftcall DismissSearchAccessoryAction.callAsFunction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (unsigned __int8 *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (unsigned __int8 *)&v17 - v8;
  type metadata accessor for Binding<SearchFieldState>?(0);
  v10 = type metadata accessor for Binding<SearchFieldState>?;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  v16 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15) != 1)
  {
    MEMORY[0x18D75B9C8](v16);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (*v5 != 2)
      *v5 = 0;
    if ((specialized static SearchFieldState.== infix(_:_:)(v9, v5) & 1) == 0)
      dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    v10 = type metadata accessor for Binding<SearchFieldState>;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))v10);
}

uint64_t EnvironmentValues.searchText.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
}

uint64_t EnvironmentValues.isSearching.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.isSearching : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isSearching.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isSearching : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchSuggestionsPlacement.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchSuggestionsPlacement.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchSuggestionsPlacementKey@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static EnvironmentValues.SearchSuggestionsPlacementKey.defaultValue;
  return result;
}

Swift::Void __swiftcall DismissSearchAction.callAsFunction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  void (*v47)(char *, uint64_t);
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = type metadata accessor for AttributedString.CharacterView();
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v49 - v11;
  v13 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v13, v14);
  v53 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v49 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (unsigned __int8 *)&v49 - v22;
  type metadata accessor for Binding<SearchFieldState>?(0);
  v24 = type metadata accessor for Binding<SearchFieldState>?;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  v30 = v29;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) == 1)
  {
LABEL_19:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))v24);
    return;
  }
  MEMORY[0x18D75B9C8](v30);
  v49 = v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v23, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  *v19 = 2;
  AttributedString.init(stringLiteral:)();
  v51 = v13;
  v31 = &v19[*(int *)(v13 + 36)];
  v32 = v54;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v31, v54);
  v52 = v5;
  v33 = *(void (**)(char *, char *, uint64_t))(v5 + 24);
  v50 = v12;
  v34 = v32;
  v33(v31, v12, v32);
  v35 = v8;
  AttributedString.characters.getter();
  v36 = AttributedString.CharacterView._count.getter();
  v37 = v56;
  v38 = *(void (**)(char *, uint64_t))(v55 + 8);
  v38(v4, v56);
  AttributedString.characters.getter();
  v39 = AttributedString.CharacterView._count.getter();
  v38(v4, v37);
  v40 = v39 - v36;
  if (__OFSUB__(v39, v36))
  {
    __break(1u);
  }
  else
  {
    v42 = v51;
    v41 = v52;
    v43 = v50;
    v44 = v53;
    if ((v40 & 0x8000000000000000) == 0 || (v45 = __OFSUB__(0, v40), v40 = -v40, !v45))
    {
      if (v40 != 1 || v39 < 1 || *v19 == 2)
        goto LABEL_14;
      v46 = v19[2];
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, v53, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v46 == 2)
      {
        v46 = *(unsigned __int8 *)(v44 + 3);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        if (v46 == 2)
        {
LABEL_14:
          v47 = *(void (**)(char *, uint64_t))(v41 + 8);
          v47(v43, v34);
          v47(v35, v34);
          if ((v19[8] & 1) == 0)
          {
            *((_DWORD *)v19 + 1) = 0;
            v19[8] = 1;
          }
          v19[*(int *)(v42 + 40)] = 0;
          v48 = v49;
          if ((specialized static SearchFieldState.== infix(_:_:)(v49, (unsigned __int8 *)v19) & 1) == 0)
            dispatch thunk of AnyLocation.set(_:transaction:)();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
          v24 = type metadata accessor for Binding<SearchFieldState>;
          goto LABEL_19;
        }
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      }
      if ((v46 & 1) != 0)
        *v19 = 1;
      goto LABEL_14;
    }
  }
  __break(1u);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchFieldStateKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?, (uint64_t)static EnvironmentValues.SearchFieldStateKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchTextKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?, (uint64_t)static EnvironmentValues.SearchTextKey.defaultValue, a1);
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchField()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchSuggestions()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchCustomScopeBar()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchCustomAccessory()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SearchFieldPlacementKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

Swift::Void __swiftcall StartSearchAction.callAsFunction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (unsigned __int8 *)&v23 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (unsigned __int8 *)&v23 - v12;
  type metadata accessor for Binding<SearchFieldState>?(0);
  v14 = type metadata accessor for Binding<SearchFieldState>?;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  v20 = v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19) == 1)
    goto LABEL_12;
  MEMORY[0x18D75B9C8](v20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if ((*v9 & 1) == 0)
  {
    v21 = v9[2];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v21 == 2)
    {
      v21 = v5[3];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v21 == 2)
      {
        v22 = 0;
LABEL_8:
        *v9 = v22;
        v9[*(int *)(v2 + 40)] = 1;
        goto LABEL_9;
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    }
    v22 = v21 & 1;
    goto LABEL_8;
  }
LABEL_9:
  if ((specialized static SearchFieldState.== infix(_:_:)(v13, v9) & 1) == 0)
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  v14 = type metadata accessor for Binding<SearchFieldState>;
LABEL_12:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))v14);
}

uint64_t EnvironmentValues.dismissSearchAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return outlined init with take of Binding<SearchFieldState>?((uint64_t)v6, a1);
}

uint64_t View.searchVibrancyEnabled(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t outlined init with take of Binding<SearchFieldState>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<SearchFieldState>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187725DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSearchVibrancyEnabled.getter, a3);
}

uint64_t sub_187725DD0(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187725E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSearching.getter, a3);
}

uint64_t sub_187725E24(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t getEnumTagSinglePayload for DismissSearchAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for DismissSearchAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for DismissSearchAction(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DismissSearchAction);
}

_QWORD *assignWithTake for DismissSearchAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;

  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v4);
  v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_release();
      a1[1] = a2[1];
      swift_release();
      v24 = *(int *)(v5 + 32);
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      *v25 = *((_BYTE *)a2 + v24);
      v25[1] = *((_BYTE *)a2 + v24 + 1);
      *((_WORD *)v25 + 1) = *(_WORD *)((char *)a2 + v24 + 2);
      *((_DWORD *)v25 + 1) = *(_DWORD *)((char *)a2 + v24 + 4);
      v25[8] = *((_BYTE *)a2 + v24 + 8);
      v27 = (int *)type metadata accessor for SearchFieldState();
      v28 = v27[9];
      v29 = &v25[v28];
      v30 = &v26[v28];
      v31 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
      v25[v27[10]] = v26[v27[10]];
      v32 = v27[11];
      v33 = &v25[v32];
      v34 = &v26[v32];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = *(int *)(v5 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *v12 = *((_BYTE *)a2 + v11);
  v12[1] = *((_BYTE *)a2 + v11 + 1);
  *((_WORD *)v12 + 1) = *(_WORD *)((char *)a2 + v11 + 2);
  v12[8] = *((_BYTE *)a2 + v11 + 8);
  *((_DWORD *)v12 + 1) = *(_DWORD *)((char *)a2 + v11 + 4);
  v14 = (int *)type metadata accessor for SearchFieldState();
  v15 = v14[9];
  v16 = &v12[v15];
  v17 = &v13[v15];
  v18 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v12[v14[10]] = v13[v14[10]];
  v19 = v14[11];
  v20 = &v12[v19];
  v21 = &v13[v19];
  v20[4] = v21[4];
  *(_DWORD *)v20 = *(_DWORD *)v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartSearchAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for StartSearchAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for StartSearchAction(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for StartSearchAction);
}

uint64_t *initializeBufferWithCopyOfBuffer for DismissSearchAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  char *v23;
  char *v24;

  type metadata accessor for Binding<SearchFieldState>?(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *(int *)(v8 + 32);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      *v13 = *((_BYTE *)a2 + v12);
      v13[1] = *((_BYTE *)a2 + v12 + 1);
      *((_WORD *)v13 + 1) = *(_WORD *)((char *)a2 + v12 + 2);
      v13[8] = *((_BYTE *)a2 + v12 + 8);
      *((_DWORD *)v13 + 1) = *(_DWORD *)((char *)a2 + v12 + 4);
      v15 = (int *)type metadata accessor for SearchFieldState();
      v16 = v15[9];
      v23 = &v14[v16];
      v24 = &v13[v16];
      v17 = type metadata accessor for AttributedString();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_retain();
      swift_retain();
      v18(v24, v23, v17);
      v13[v15[10]] = v14[v15[10]];
      v19 = v15[11];
      v20 = &v13[v19];
      v21 = &v14[v19];
      v20[4] = v21[4];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for DismissSearchAction(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Binding<SearchFieldState>(0);
  v3 = v2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v5 = a1 + *(int *)(v3 + 32);
    v6 = v5 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v7 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  return result;
}

_QWORD *initializeWithCopy for DismissSearchAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  char *v20;
  char *v21;

  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = *(int *)(v5 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v20 = &v11[v13];
    v21 = &v10[v13];
    v14 = type metadata accessor for AttributedString();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v21, v20, v14);
    v10[v12[10]] = v11[v12[10]];
    v16 = v12[11];
    v17 = &v10[v16];
    v18 = &v11[v16];
    v17[4] = v18[4];
    *(_DWORD *)v17 = *(_DWORD *)v18;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

_QWORD *assignWithCopy for DismissSearchAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;

  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v4);
  v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      v23 = *(int *)(v5 + 32);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      *v24 = *((_BYTE *)a2 + v23);
      v24[1] = *((_BYTE *)a2 + v23 + 1);
      v24[2] = *((_BYTE *)a2 + v23 + 2);
      v24[3] = *((_BYTE *)a2 + v23 + 3);
      LODWORD(v23) = *(_DWORD *)((char *)a2 + v23 + 4);
      v24[8] = v25[8];
      *((_DWORD *)v24 + 1) = v23;
      v26 = (int *)type metadata accessor for SearchFieldState();
      v27 = v26[9];
      v28 = &v24[v27];
      v29 = &v25[v27];
      v30 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
      v24[v26[10]] = v25[v26[10]];
      v31 = v26[11];
      v32 = &v24[v31];
      v33 = &v25[v31];
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v32[4] = v33[4];
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v10 = *(int *)(v5 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *v11 = *((_BYTE *)a2 + v10);
  v11[1] = *((_BYTE *)a2 + v10 + 1);
  v11[2] = *((_BYTE *)a2 + v10 + 2);
  v11[3] = *((_BYTE *)a2 + v10 + 3);
  LODWORD(v10) = *(_DWORD *)((char *)a2 + v10 + 4);
  v11[8] = v12[8];
  *((_DWORD *)v11 + 1) = v10;
  v13 = (int *)type metadata accessor for SearchFieldState();
  v14 = v13[9];
  v34 = &v12[v14];
  v35 = &v11[v14];
  v15 = type metadata accessor for AttributedString();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_retain();
  swift_retain();
  v16(v35, v34, v15);
  v11[v13[10]] = v12[v13[10]];
  v17 = v13[11];
  v18 = &v11[v17];
  v19 = &v12[v17];
  v20 = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  v18[4] = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

_QWORD *initializeWithTake for DismissSearchAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = *(int *)(v5 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    v10[v12[10]] = v11[v12[10]];
    v17 = v12[11];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DismissSearchAccessoryAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<SearchFieldState>?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DismissSearchAccessoryAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<SearchFieldState>?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DismissSearchAccessoryAction(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DismissSearchAccessoryAction);
}

uint64_t sub_1877268D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchSuggestions()
{
  return &type metadata for EnvironmentValues.SearchSuggestions;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchSuggestionsPlacementKey()
{
  return &type metadata for EnvironmentValues.SearchSuggestionsPlacementKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSearchingKey()
{
  return &type metadata for EnvironmentValues.IsSearchingKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchFieldStateKey()
{
  return &type metadata for EnvironmentValues.SearchFieldStateKey;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchSuggestions()
{
  return &protocol witness table for EnvironmentValues.SearchSuggestions;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchSuggestions(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchFocusContextKey()
{
  return &type metadata for EnvironmentValues.SearchFocusContextKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchTextKey()
{
  return &type metadata for EnvironmentValues.SearchTextKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSearchVibrancyEnabledKey()
{
  return &type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchFieldPlacementKey()
{
  return &type metadata for EnvironmentValues.SearchFieldPlacementKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchScopeActivationKey()
{
  return &type metadata for EnvironmentValues.SearchScopeActivationKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchCustomScopeBar()
{
  return &type metadata for EnvironmentValues.SearchCustomScopeBar;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchCustomAccessory()
{
  return &type metadata for EnvironmentValues.SearchCustomAccessory;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchField()
{
  return &type metadata for EnvironmentValues.SearchField;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchField()
{
  return &protocol witness table for EnvironmentValues.SearchField;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchCustomAccessory()
{
  return &protocol witness table for EnvironmentValues.SearchCustomAccessory;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchCustomScopeBar()
{
  return &protocol witness table for EnvironmentValues.SearchCustomScopeBar;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchField(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchCustomAccessory(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.SearchCustomScopeBar(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void _PullDownButton.init(label:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for View.body.getter in conformance _PullDownButton<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PullDownButton<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

void _PullDownButton<>.init(_:content:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in _PullDownButton<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _PullDownButton<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PullDownButton<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _PullDownButton<A, B>()
{
  return &protocol witness table for _PullDownButton<A, B>;
}

uint64_t type metadata completion function for _PullDownButton()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PullDownButton(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v10 + v16) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
  }
  return v4;
}

uint64_t destroy for _PullDownButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)v8, *(_BYTE *)(v8 + 8));
}

uint64_t initializeWithCopy for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v12) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v12);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v12;
  return a1;
}

uint64_t assignWithCopy for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v12) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v12);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v12;
  outlined consume of Environment<Bool>.Content(v17, v18);
  return a1;
}

uint64_t initializeWithTake for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v16;
  return a1;
}

uint64_t assignWithTake for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = *(_BYTE *)(v15 + 8);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PullDownButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v19 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v19);
      }
      else
      {
        v20 = *(unsigned __int8 *)(((v12 + v19) & 0xFFFFFFFFFFFFF8) + 8);
        if (v20 > 1)
          return (v20 ^ 0xFF) + 1;
        else
          return 0;
      }
    }
  }
  else
  {
    v13 = ((v12 + (v11 & ~(_DWORD)v10)) & 0xFFFFFFF8) + 9;
    v14 = (a2 - v9 + 255) >> (8 * v13);
    if (v13 < 4)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18772720C + 4 * byte_187C53980[v17]))();
  }
}

void storeEnumTagSinglePayload for _PullDownButton(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v7 = 254;
  v8 = ((*(_QWORD *)(v6 + 64)
       + 7
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_19:
      __asm { BR              X0 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_1877273FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187727494);
}

void sub_187727404(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18772740CLL);
  JUMPOUT(0x187727494);
}

void sub_187727450()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187727494);
}

void sub_187727458()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187727494);
}

uint64_t sub_187727460(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x187727494);
  if (v6 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t))(v9 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v10)
      JUMPOUT(0x18772746CLL);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void type metadata accessor for _PullDownButton()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1877274B8()
{
  return MEMORY[0x1E0CE7C28];
}

void _PullDownButton<>.init<A>(_:content:)()
{
  _PullDownButton.init(label:content:)();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_BYTE *, uint64_t *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _BYTE v17[128];
  uint64_t v18;
  _BYTE v19[128];
  uint64_t v20;
  int64_t v21;

  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(_QWORD *)(a1 + 48) + (i << 7), (uint64_t)v19);
    outlined init with copy of SearchFieldConfiguration.Data?(*(_QWORD *)(a1 + 56) + 8 * i, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    outlined init with take of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)((uint64_t)v19, (uint64_t)v17);
    if ((a2(v17, &v18) & 1) != 0)
    {
      swift_release();
      return outlined init with take of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)((uint64_t)v17, a3);
    }
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>));
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v21)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v21)
        goto LABEL_25;
      v14 = *(_QWORD *)(v5 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v21)
          goto LABEL_25;
        v14 = *(_QWORD *)(v5 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v21)
            goto LABEL_25;
          v14 = *(_QWORD *)(v5 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_20:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v21)
  {
LABEL_25:
    result = swift_release();
    *(_QWORD *)(a3 + 128) = 0;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v21)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DocumentViewController.setupLaunchOptions()()
{
  char *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  char v6;
  id v7;
  void *v8;
  id v9;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_launchOptions);
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentBrowserMediator + 8];
  ObjectType = swift_getObjectType();
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
  objc_msgSend(v2, sel_setBrowserViewController_, v5);

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
  v9 = objc_msgSend(v1, sel_launchOptions);
  if ((v6 & 1) != 0)
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_createDocumentActionWithIntent_, *MEMORY[0x1E0DC4990]);
    objc_msgSend(v9, sel_setPrimaryAction_, v7);

    v8 = v7;
  }
  else
  {
    objc_msgSend(v9, sel_setPrimaryAction_, 0);
    v8 = v9;
  }

}

uint64_t DocumentViewController.rootModifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[48];
  uint64_t v11;
  _BYTE v12[104];

  v3 = v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier;
  swift_beginAccess();
  outlined assign with copy of RootModifier?(a1, v3);
  swift_endAccess();
  outlined init with copy of AccessibilityValueStorage?(v3, (uint64_t)v10, &lazy cache variable for type metadata for RootModifier?);
  if (v11 == 1)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v10, &lazy cache variable for type metadata for RootModifier?);
  }
  else
  {
    outlined init with take of RootModifier((uint64_t)v10, (uint64_t)v12);
    v4 = MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
    if (v4)
    {
      v5 = (void *)v4;
      type metadata accessor for DocumentHostingController();
      v6 = swift_dynamicCastClass();
      if (v6)
      {
        v7 = v6;
        outlined init with copy of RootModifier((uint64_t)v12, (uint64_t)v10);
        v8 = v7 + direct field offset for DocumentHostingController.rootModifier;
        swift_beginAccess();
        outlined assign with copy of RootModifier((uint64_t)v10, v8);
        swift_endAccess();
        DocumentHostingController.scenesDidChange(phaseChanged:)(1);
        outlined destroy of RootModifier((uint64_t)v10);
      }

    }
    outlined destroy of RootModifier((uint64_t)v12);
  }
  return outlined destroy of AccessibilityValueStorage?(a1, &lazy cache variable for type metadata for RootModifier?);
}

Swift::OpaquePointer_optional __swiftcall DocumentViewController.presentDocuments(at:)(Swift::OpaquePointer at)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t, double);
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  Swift::Bool v19;
  void *v20;
  uint64_t v21;
  Swift::OpaquePointer_optional result;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*((_QWORD *)at._rawValue + 2))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v8 + 56))(v6, 1, 1, v7, v10);
    goto LABEL_6;
  }
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = (char *)at._rawValue + v13;
  v15 = *(void (**)(char *, char *, uint64_t, double))(v8 + 16);
  v15(v6, v14, v7, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
LABEL_7:
    v18 = 0;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentBrowserMediator + 8);
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, ObjectType, v16) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    goto LABEL_7;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  ((void (*)(unint64_t, char *, uint64_t))v15)(v18 + v13, v12, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
LABEL_8:
  v20 = (void *)v18;
  result.value._rawValue = v20;
  result.is_nil = v19;
  return result;
}

void __swiftcall DocumentViewController.makeDocumentHostingController()(UIViewController *__return_ptr retstr)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[3];

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for IdentifiedDocumentGroupDocumentCreation();
  if (!swift_dynamicCastClass())
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_initWithNibName_bundle_, 0, 0);
    return;
  }
  swift_unknownObjectRetain();
  v6 = objc_msgSend(v1, sel_document);
  if (v6)
  {
    v7 = v6;
    type metadata accessor for PlatformDocument();
    v8 = swift_dynamicCastClass();
    if (v8)
    {
      v9 = (void *)v8;
      v10 = swift_beginAccess();
      MEMORY[0x1E0C80A78](v10, v11);
      *(_QWORD *)&v21[-16] = v9;
      v12 = swift_bridgeObjectRetain();
      specialized Sequence.first(where:)(v12, (uint64_t (*)(_BYTE *, uint64_t *))partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.configuration(for:), (uint64_t)&v22);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v22 + 1))
      {
        v34 = v26;
        v35 = v27;
        v36[0] = v28[0];
        *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)v28 + 9);
        v30 = v22;
        v31 = v23;
        v32 = v24;
        v33 = v25;
        outlined destroy of Binding<AttributedString>((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
        if (*((_QWORD *)&v30 + 1))
        {
          v41 = v34;
          v42 = v35;
          v43[0] = v36[0];
          *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)v36 + 9);
          v37 = v30;
          v38 = v31;
          v39 = v32;
          v40 = v33;
          DocumentViewController.makeDocumentHostingController(_:_:)(v9, (uint64_t)&v37);

          swift_unknownObjectRelease();
          outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v37);
          return;
        }
      }
      else
      {
        outlined destroy of Binding<AttributedString>((uint64_t)&v22, &lazy cache variable for type metadata for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        memset(v36, 0, 25);
      }

      outlined destroy of AccessibilityValueStorage?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    }
    else
    {

    }
  }
  IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter((uint64_t)&v37);
  if (*((_QWORD *)&v37 + 1))
  {
    v26 = v41;
    v27 = v42;
    v28[0] = v43[0];
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v43 + 9);
    v22 = v37;
    v23 = v38;
    v24 = v39;
    v25 = v40;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = 0;
    v14 = type metadata accessor for URL();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
    v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)&v22, (uint64_t)&v37);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v13;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = v42;
    *(_OWORD *)(v16 + 96) = v41;
    *(_OWORD *)(v16 + 112) = v17;
    *(_OWORD *)(v16 + 128) = v43[0];
    *(_OWORD *)(v16 + 137) = *(_OWORD *)((char *)v43 + 9);
    v18 = v38;
    *(_OWORD *)(v16 + 32) = v37;
    *(_OWORD *)(v16 + 48) = v18;
    v19 = v40;
    *(_OWORD *)(v16 + 64) = v39;
    *(_OWORD *)(v16 + 80) = v19;
    swift_retain();
    swift_retain();
    specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)&v22, (uint64_t)v5, 0, 0, (uint64_t)partial apply for closure #1 in DocumentViewController.makeDocumentHostingController(), v16);
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v22);
    swift_release();
    swift_beginAccess();
    v20 = *(void **)(v13 + 16);
    if (v20)
    {
      v20;
      swift_release();
      swift_unknownObjectRelease();
      return;
    }
    swift_release();
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v37, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  }
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_initWithNibName_bundle_, 0, 0);
  swift_unknownObjectRelease();
}

id DocumentViewController.makeDocumentHostingController(_:_:)(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10[2];
  char v11;
  _BYTE v12[104];
  _BYTE v13[48];
  uint64_t v14;
  _BYTE v15[104];
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v5 = (uint64_t)v2 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier;
  swift_beginAccess();
  outlined init with copy of AccessibilityValueStorage?(v5, (uint64_t)v13, &lazy cache variable for type metadata for RootModifier?);
  if (v14 == 1)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v13, &lazy cache variable for type metadata for RootModifier?);
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_initWithNibName_bundle_, 0, 0);
  }
  else
  {
    outlined init with take of RootModifier((uint64_t)v13, (uint64_t)v15);
    outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v13);
    outlined init with copy of RootModifier((uint64_t)v15, (uint64_t)v12);
    v7 = a1;
    specialized NavigationItemDescription.init(from:)(objc_msgSend(v2, sel_navigationItem), (uint64_t *)v16);
    v18[0] = v16[0];
    v18[1] = v16[1];
    v19 = v17;
    v10[0] = 0;
    v10[1] = DocumentViewController.presentationModeLocation.getter();
    v11 = 1;
    v8 = objc_allocWithZone((Class)type metadata accessor for DocumentHostingController());
    v6 = specialized DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)(v7, (uint64_t)v13, (uint64_t)v12, (uint64_t *)v18, v10);

    outlined destroy of RootModifier((uint64_t)v15);
  }
  return (id)v6;
}

void DocumentViewController.handleNewDocument()()
{
  _QWORD *v0;
  id v1;
  char *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  UIViewController_optional *v8;
  id v9;
  void *v10;
  id v11;

  v1 = objc_msgSend(v0, sel_document);

  if (v1)
  {
    v2 = (char *)v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController;
    v3 = (void *)MEMORY[0x18D760234]((char *)v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
    if (!v3)
    {
LABEL_5:
      v6 = (void *)MEMORY[0x18D760234](v2);
      objc_msgSend(v6, sel_removeFromParentViewController);

      v7 = swift_unknownObjectWeakAssign();
      v8 = (UIViewController_optional *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))(v7);
      UIDocumentViewController.embedDocumentHostingController(_:)(v8);
      swift_unknownObjectWeakAssign();
      v9 = objc_msgSend(v0, sel_launchOptions);
      v10 = (void *)MEMORY[0x18D760234](v2);
      v11 = objc_msgSend(v10, sel_view);

      objc_msgSend(v9, sel_setDocumentTargetView_, v11);
      return;
    }
    v4 = v3;
    v5 = objc_msgSend(v3, sel_view);

    if (v5)
    {
      objc_msgSend(v5, sel_removeFromSuperview);

      goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t DocumentViewController.presentationModeLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation);
  }
  else
  {
    v3 = v0;
    swift_unknownObjectWeakInit();
    type metadata accessor for LocationBox<DocumentPresentationModeLocation>();
    swift_allocObject();
    v2 = LocationBox.init(_:)();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - v4;
  v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  v8 = a1;
  v9 = static MainActor.shared.getter();
  v10 = (_QWORD *)swift_allocObject();
  v11 = MEMORY[0x1E0DF06E8];
  v10[2] = v9;
  v10[3] = v11;
  v10[4] = v7;
  v10[5] = v8;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:), (uint64_t)v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1 + 16);
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, sel_setDocument_, *(_QWORD *)(v0 + 56));

  }
  **(_BYTE **)(v0 + 40) = v3 == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void DocumentViewController.document.didset(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void (*v14)(char *);
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v24 - v6;
  type metadata accessor for URL?(0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v1, sel_document, v10);

  if (v13)
  {
    DocumentViewController.handleNewDocument()();
    return;
  }
  v14 = *(void (**)(char *))&v1[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_onDocumentClose];
  if (v14)
  {
    if (a1)
    {
      type metadata accessor for PlatformDocument();
      v15 = swift_dynamicCastClass();
      if (v15)
      {
        v16 = (void *)v15;
        outlined copy of AppIntentExecutor?((uint64_t)v14);
        v17 = a1;
        v18 = objc_msgSend(v16, sel_fileURL);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v19 = type metadata accessor for URL();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 0, 1, v19);
LABEL_10:
        v14(v12);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v14);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
        return;
      }
      type metadata accessor for StubDocument(0);
      v20 = swift_dynamicCastClass();
      if (v20)
      {
        v21 = v20 + OBJC_IVAR____TtC7SwiftUI12StubDocument_documentURL;
        swift_beginAccess();
        v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
        outlined init with copy of SearchFieldConfiguration.Data?(v21, (uint64_t)v7, &lazy cache variable for type metadata for Binding<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
        swift_retain();
        MEMORY[0x18D75B9C8](v4);
        outlined destroy of Binding<AttributedString>((uint64_t)v7, &lazy cache variable for type metadata for Binding<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, v22);
        goto LABEL_10;
      }
    }
    v23 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 1, 1, v23);
    swift_retain();
    goto LABEL_10;
  }
}

Swift::Void __swiftcall DocumentViewController.navigationItemDidUpdate()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = MEMORY[0x18D760234](&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController]);
  if (v1)
  {
    v22 = (id)v1;
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for URLDocumentHostingController<AnyView>, MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for URLDocumentHostingController);
    if (!swift_dynamicCastClass())
    {
LABEL_25:

      return;
    }
    specialized NavigationItemDescription.init(from:)(objc_msgSend(v0, sel_navigationItem), &v23);
    v2 = v24;
    v3 = v25;
    v4 = v26;
    v5 = v27;
    v6 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
    v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
    v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription + 8];
    v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription + 16];
    v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription + 24];
    v11 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription + 32];
    v21 = v23;
    if (!v10)
    {
      v13 = v23;
      v14 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of NavigationItemDescription?(v13, v2, v3);
      outlined consume of NavigationItemDescription?(v14, v8, 0);
LABEL_24:
      specialized URLDocumentHostingController.scenesDidChange(phaseChanged:)();
      v17 = *v6;
      v18 = v6[1];
      v19 = v6[2];
      *v6 = v21;
      v6[1] = v2;
      v6[2] = v3;
      v6[3] = v4;
      v6[4] = v5;
      outlined consume of NavigationItemDescription?(v17, v18, v19);
      goto LABEL_25;
    }
    if (v24)
    {
      if (!v8)
      {
        v16 = v7;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        outlined copy of NavigationItemDescription?(v16, 0, v10);
        v15 = 0;
        goto LABEL_22;
      }
      v20 = v7;
      v12 = v23 == v7 && v24 == v8;
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_21:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        outlined copy of NavigationItemDescription?(v20, v8, v10);
        swift_bridgeObjectRelease();
        v15 = 0;
LABEL_22:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v15)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v20 = v7;
      if (v8)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        outlined copy of NavigationItemDescription?(v20, v8, v10);
        swift_bridgeObjectRelease();
        v15 = 0;
        goto LABEL_22;
      }
    }
    if (specialized static Array<A>.== infix(_:_:)(v3, v10) && specialized static Array<A>.== infix(_:_:)(v4, v9))
    {
      v15 = specialized static Array<A>.== infix(_:_:)(v5, v11);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      outlined copy of NavigationItemDescription?(v20, v8, v10);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    goto LABEL_21;
  }
}

void closure #1 in DocumentViewController.makeDocumentHostingController()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;

  if (a1)
  {
    v6 = (void **)(a2 + 16);
    v7 = a3 + 16;
    swift_beginAccess();
    v8 = MEMORY[0x18D760234](v7);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = a1;
      v11 = DocumentViewController.makeDocumentHostingController(_:_:)(v10, a4);

    }
    else
    {
      v11 = 0;
    }
    swift_beginAccess();
    v12 = *v6;
    *v6 = v11;

  }
}

Swift::Void __swiftcall UIDocumentViewController.embedDocumentHostingController(_:)(UIViewController_optional *a1)
{
  void *v1;
  void *v2;
  UIViewController_optional *v3;
  id v4;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  UIViewController_optional *v19;

  if (a1)
  {
    v2 = v1;
    v3 = a1;
    v4 = objc_msgSend(v2, sel_childViewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = v3;
    LOBYTE(v3) = specialized Sequence.contains(where:)(v5, (uint64_t)v19);
    swift_bridgeObjectRelease();

    if ((v3 & 1) != 0)
    {
LABEL_18:

      return;
    }
    objc_msgSend(v2, sel_addChildViewController_, v19);
    v6 = objc_msgSend(v2, sel_view);
    if (!v6)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v7 = v6;
    v8 = -[UIViewController_optional view](v19, sel_view);
    if (!v8)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v9 = v8;
    objc_msgSend(v7, sel_addSubview_, v8);

    v10 = -[UIViewController_optional view](v19, sel_view);
    if (!v10)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v11 = v10;
    v12 = objc_msgSend(v10, sel_superview);
    if (!v12)
    {
LABEL_23:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v13 = v12;
    v14 = UIView.constrainToView(_:exceptEdges:identifier:)(v12, 0, 0xD00000000000001BLL, (void *)0x8000000187BE73E0);

    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      if (v15)
        goto LABEL_9;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_9:
        if (v15 >= 1)
        {
          for (i = 0; i != v15; ++i)
          {
            if ((v14 & 0xC000000000000001) != 0)
              v17 = (id)MEMORY[0x18D75E3BC](i, v14);
            else
              v17 = *(id *)(v14 + 8 * i + 32);
            v18 = v17;
            objc_msgSend(v17, sel_setActive_, 1);

          }
          goto LABEL_17;
        }
        __break(1u);
        goto LABEL_20;
      }
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    -[UIViewController_optional didMoveToParentViewController:](v19, sel_didMoveToParentViewController_, v2);
    goto LABEL_18;
  }
}

id DocumentViewController.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for DocumentViewController);
}

uint64_t type metadata accessor for DocumentViewController()
{
  return objc_opt_self();
}

void protocol witness for Location.get() in conformance DocumentPresentationModeLocation(BOOL *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = (void *)MEMORY[0x18D760234](v1);
  v4 = objc_msgSend(v3, sel_document);

  if (v4)
  *a1 = v4 != 0;
}

void protocol witness for Location.set(_:transaction:) in conformance DocumentPresentationModeLocation(_BYTE *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  if ((*a1 & 1) == 0)
  {
    v2 = (void *)MEMORY[0x18D760234](v1);
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, sel_setDocument_, 0);

    }
  }
}

uint64_t protocol witness for Location.update() in conformance DocumentPresentationModeLocation(BOOL *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = (void *)MEMORY[0x18D760234](v1);
  v4 = objc_msgSend(v3, sel_document);

  if (v4)
  *a1 = v4 != 0;
  return 1;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter(&OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultEditorConfiguration, (void (*)(uint64_t))closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter, a1);
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[16];
  _OWORD v13[6];
  _OWORD v14[2];

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v5, (uint64_t)v13);
      v6 = v13[0];
      outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v13, (uint64_t)v12);
      if ((v6 & 1) != 0)
      {
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
      }
      else
      {
        v7 = *(_QWORD *)(v12[12] + 16);
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
        if (v7)
        {
          v8 = v13[5];
          a2[4] = v13[4];
          a2[5] = v8;
          a2[6] = v14[0];
          *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)((char *)v14 + 9);
          v9 = v13[1];
          *a2 = v13[0];
          a2[1] = v9;
          v10 = v13[3];
          a2[2] = v13[2];
          a2[3] = v10;
          return swift_bridgeObjectRelease();
        }
      }
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v13);
      v5 += 128;
      if (!--v4)
        goto LABEL_9;
    }
  }
  swift_bridgeObjectRetain();
LABEL_9:
  *(_OWORD *)((char *)a2 + 105) = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return swift_bridgeObjectRelease();
}

uint64_t IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter(&OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultConfiguration, (void (*)(uint64_t))closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter, a1);
}

uint64_t IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter@<X0>(_QWORD *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;

  v6 = v3 + *a1;
  swift_beginAccess();
  outlined init with copy of NewDocumentProvider?(v6, (uint64_t)v8, &lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration??, (uint64_t)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v9 != 1)
    return outlined init with take of IdentifiedDocumentGroupConfiguration?((uint64_t)v8, a3);
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)v8, &lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration??, (uint64_t)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  a2(v3);
  outlined init with copy of AccessibilityValueStorage?(a3, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  swift_beginAccess();
  outlined assign with take of IdentifiedDocumentGroupConfiguration??((uint64_t)v8, v6);
  return swift_endAccess();
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[16];
  _OWORD v13[6];
  _OWORD v14[2];

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v5, (uint64_t)v13);
      v6 = *(_QWORD *)(*(_QWORD *)&v14[0] + 16);
      outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v13, (uint64_t)v12);
      if (v6)
        break;
      v7 = *(_QWORD *)(v12[11] + 16);
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
      if (v7)
        goto LABEL_10;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v13);
      v5 += 128;
      if (!--v4)
        goto LABEL_8;
    }
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
LABEL_10:
    v8 = v13[5];
    a2[4] = v13[4];
    a2[5] = v8;
    a2[6] = v14[0];
    *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)((char *)v14 + 9);
    v9 = v13[1];
    *a2 = v13[0];
    a2[1] = v9;
    v10 = v13[3];
    a2[2] = v13[2];
    a2[3] = v10;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_8:
    *(_OWORD *)((char *)a2 + 105) = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return swift_bridgeObjectRelease();
}

id IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser);
  }
  else
  {
    v4 = closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter(uint64_t a1)
{
  id v2;
  Class isa;
  id v4;
  _BOOL8 v5;
  _QWORD v7[16];

  IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter();
  v2 = objc_allocWithZone(MEMORY[0x1E0CEA530]);
  type metadata accessor for UTType();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initForOpeningContentTypes_, isa);

  IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter((uint64_t)v7);
  v5 = v7[1] != 0;
  outlined destroy of AccessibilityValueStorage?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  objc_msgSend(v4, sel_setAllowsDocumentCreation_, v5);
  objc_msgSend(v4, sel_setDelegate_, a1);
  return v4;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.canCreateNewDocuments.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char New;

  v1 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___canCreateNewDocuments;
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___canCreateNewDocuments);
  if (v2 == 2)
  {
    New = closure #1 in IdentifiedDocumentGroupDocumentCreation.canCreateNewDocuments.getter(v0);
    *(_BYTE *)(v0 + v1) = New & 1;
  }
  else
  {
    New = v2 & 1;
  }
  return New & 1;
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.canCreateNewDocuments.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[96];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = v1 + 32;
  swift_bridgeObjectRetain();
  v4 = v1 + 32;
  do
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v4, (uint64_t)v11);
    v5 = v11[0];
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v11);
    if (v5 != 1)
      break;
    v4 += 128;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v1 + 16);
  if (!v6)
    return 0;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; ++i)
  {
    v9 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v3, (uint64_t)v11);
    v10 = *(_QWORD *)(v12 + 16);
    result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v11);
    if (v10)
      break;
    v3 += 128;
    if (v9 == v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return (v5 & 1) == 0;
}

id IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v5 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentsMap;
  v6 = v2;
  *(_QWORD *)&v2[v5] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7 = &v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultEditorConfiguration];
  *(_OWORD *)(v7 + 105) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_OWORD *)v7 = xmmword_187BF9840;
  v8 = &v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultConfiguration];
  *(_OWORD *)(v8 + 105) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = xmmword_187BF9840;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser] = 0;
  v9 = &v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_newDocumentHandler];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___canCreateNewDocuments] = 2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_strategies] = a2;

  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes;
  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes);
  }
  else
  {
    v2 = closure #1 in IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter(v0);
    *(_QWORD *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(uint64_t, uint64_t);
  char *v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _BYTE v88[88];
  uint64_t v89;
  uint64_t v90;

  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v69 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v79 = (char *)&v69 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v69 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v23 = (char *)&v69 - v22;
  v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  v71 = *(_QWORD *)(v24 + 16);
  if (v71)
  {
    v83 = v20;
    v70 = v24 + 32;
    v72 = v24;
    v78 = v21;
    swift_bridgeObjectRetain();
    result = v72;
    v26 = 0;
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v80 = v3;
    v84 = v17;
    v85 = v10;
    v86 = v23;
LABEL_5:
    if (v26 >= *(_QWORD *)(result + 16))
      goto LABEL_65;
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v70 + (v26 << 7), (uint64_t)v88);
    v28 = v90;
    v76 = *(_QWORD *)(v90 + 16);
    v73 = v26;
    if (!v76)
      goto LABEL_32;
    v81 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v75 = v90 + v81;
    result = swift_bridgeObjectRetain();
    v29 = 0;
    v74 = v28;
    while (1)
    {
      if (v29 >= *(_QWORD *)(v28 + 16))
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        return result;
      }
      v87 = *(_QWORD *)(v3 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
      v30(v23, v75 + v87 * v29, v2);
      v31 = v27[2];
      if (!v31)
        goto LABEL_24;
      v32 = (char *)v27 + v81;
      v33 = v27;
      v34 = v84;
      v30(v84, (unint64_t)v32, v2);
      v35 = v3;
      v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      swift_bridgeObjectRetain();
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v38 = *(void (**)(char *, uint64_t))(v35 + 8);
      v38(v34, v2);
      if ((v37 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v27 = v33;
        v10 = v85;
        v23 = v86;
        v28 = v74;
        v3 = v80;
      }
      else
      {
        v77 = v36;
        v82 = v33;
        if (v31 == 1)
        {
          v27 = v82;
          swift_bridgeObjectRelease();
          v10 = v85;
          v23 = v86;
          v3 = v80;
LABEL_24:
          v30(v79, (unint64_t)v23, v2);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          v28 = v74;
          v47 = v27[2];
          v46 = v27[3];
          if (v47 >= v46 >> 1)
            v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v27);
          v27[2] = v47 + 1;
          (*(void (**)(char *, char *, uint64_t))(v3 + 32))((char *)v27 + v81 + v47 * v87, v79, v2);
          v38 = *(void (**)(char *, uint64_t))(v3 + 8);
          goto LABEL_9;
        }
        v39 = v84;
        v30(v84, (unint64_t)&v32[v87], v2);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38(v39, v2);
        v27 = v82;
        v10 = v85;
        v3 = v80;
        if ((v40 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v23 = v86;
        }
        else
        {
          v23 = v86;
          if (v31 == 2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          v41 = (uint64_t)v82 + 2 * v87 + v81;
          v42 = 2;
          while (1)
          {
            v43 = v84;
            result = ((uint64_t (*)(char *, uint64_t, uint64_t))v30)(v84, v41, v2);
            v44 = v42 + 1;
            if (__OFADD__(v42, 1))
              goto LABEL_63;
            v45 = dispatch thunk of static Equatable.== infix(_:_:)();
            v38(v43, v2);
            if ((v45 & 1) != 0)
              break;
            ++v42;
            v23 = v86;
            v41 += v87;
            if (v44 == v31)
            {
              v27 = v82;
              swift_bridgeObjectRelease();
              v3 = v80;
              v10 = v85;
              goto LABEL_24;
            }
          }
          v27 = v82;
          swift_bridgeObjectRelease();
          v3 = v80;
          v10 = v85;
          v23 = v86;
        }
        v28 = v74;
      }
LABEL_9:
      ++v29;
      result = ((uint64_t (*)(char *, uint64_t))v38)(v23, v2);
      if (v29 == v76)
      {
        swift_bridgeObjectRelease();
        v26 = v73;
LABEL_32:
        v48 = v89;
        v76 = *(_QWORD *)(v89 + 16);
        if (v76)
        {
          v81 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
          v75 = v89 + v81;
          result = swift_bridgeObjectRetain();
          v49 = 0;
          v74 = v48;
          while (1)
          {
            if (v49 >= *(_QWORD *)(v48 + 16))
              goto LABEL_62;
            v50 = *(_QWORD *)(v3 + 72);
            v51 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
            v51(v10, v75 + v50 * v49, v2);
            v52 = v27[2];
            if (!v52)
              goto LABEL_47;
            v87 = v50;
            v53 = (char *)v27 + v81;
            v54 = v27;
            v55 = v83;
            v51(v83, (unint64_t)v53, v2);
            v56 = v3;
            v57 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
            swift_bridgeObjectRetain();
            v58 = dispatch thunk of static Equatable.== infix(_:_:)();
            v59 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
            v59((uint64_t)v55, v2);
            if ((v58 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v23 = v86;
              v27 = v54;
              v10 = v85;
            }
            else
            {
              v77 = v57;
              v82 = v54;
              if (v52 == 1)
              {
                v27 = v82;
                swift_bridgeObjectRelease();
                v10 = v85;
LABEL_46:
                v23 = v86;
                v50 = v87;
                v3 = v80;
LABEL_47:
                v51(v78, (unint64_t)v10, v2);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
                v48 = v74;
                v63 = v27[2];
                v62 = v27[3];
                if (v63 >= v62 >> 1)
                  v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v27);
                v27[2] = v63 + 1;
                (*(void (**)(char *, char *, uint64_t))(v3 + 32))((char *)v27 + v81 + v63 * v50, v78, v2);
                v59 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
                goto LABEL_36;
              }
              v60 = v83;
              v51(v83, (unint64_t)&v53[v87], v2);
              v10 = v85;
              v61 = dispatch thunk of static Equatable.== infix(_:_:)();
              v59((uint64_t)v60, v2);
              if ((v61 & 1) == 0)
              {
                if (v52 != 2)
                {
                  v64 = (uint64_t)v82 + 2 * v87 + v81;
                  v65 = 2;
                  while (1)
                  {
                    v66 = v83;
                    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v51)(v83, v64, v2);
                    v67 = v65 + 1;
                    if (__OFADD__(v65, 1))
                      goto LABEL_64;
                    v68 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v59((uint64_t)v66, v2);
                    if ((v68 & 1) != 0)
                    {
                      v27 = v82;
                      swift_bridgeObjectRelease();
                      v3 = v80;
                      v10 = v85;
                      v23 = v86;
                      v48 = v74;
                      goto LABEL_36;
                    }
                    ++v65;
                    v64 += v87;
                    if (v67 == v52)
                    {
                      v27 = v82;
                      swift_bridgeObjectRelease();
                      v3 = v80;
                      v10 = v85;
                      v23 = v86;
                      v50 = v87;
                      goto LABEL_47;
                    }
                  }
                }
                v27 = v82;
                swift_bridgeObjectRelease();
                goto LABEL_46;
              }
              v27 = v82;
              swift_bridgeObjectRelease();
              v23 = v86;
            }
            v48 = v74;
            v3 = v80;
LABEL_36:
            ++v49;
            result = ((uint64_t (*)(char *, uint64_t))v59)(v10, v2);
            if (v49 == v76)
            {
              swift_bridgeObjectRelease();
              v26 = v73;
              break;
            }
          }
        }
        ++v26;
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v88);
        result = v72;
        if (v26 == v71)
        {
          swift_bridgeObjectRelease();
          return (uint64_t)v27;
        }
        goto LABEL_5;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

id IdentifiedDocumentGroupDocumentCreation.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for IdentifiedDocumentGroupDocumentCreation);
}

id DocumentViewController.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for IdentifiedDocumentGroupDocumentCreation()
{
  return objc_opt_self();
}

uint64_t IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[3];

  v2 = v1;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v33 - v10;
  v12 = type metadata accessor for UTType();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  static DocumentUtils.contentType(of:)(a1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    memset(v45, 0, 25);
LABEL_16:
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v35 = a1;
    v36 = v7;
    v38 = v17 + 32;
    swift_bridgeObjectRetain();
    v19 = 0;
    v37 = v2;
    v34 = v18;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v38 + (v19 << 7), (uint64_t)&v46);
      v20 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 16);
      if (v20)
        break;
LABEL_5:
      ++v19;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v46);
      if (v19 == v18)
      {
        swift_bridgeObjectRelease();
        a1 = v35;
        v7 = v36;
        goto LABEL_13;
      }
    }
    v21 = *((_QWORD *)&v51 + 1)
        + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    swift_bridgeObjectRetain_n();
    v22 = *(_QWORD *)(v13 + 72);
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v21 += v22;
      if (!--v20)
      {
        swift_bridgeObjectRelease_n();
        v18 = v34;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v43 = v50;
    v44 = v51;
    v45[0] = v52[0];
    *(_OWORD *)((char *)v45 + 9) = *(_OWORD *)((char *)v52 + 9);
    v39 = v46;
    v40 = v47;
    v41 = v48;
    v42 = v49;
    v7 = v36;
    a1 = v35;
  }
  else
  {
LABEL_13:
    v44 = 0u;
    memset(v45, 0, 25);
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (!*((_QWORD *)&v39 + 1))
    goto LABEL_16;
  v50 = v43;
  v51 = v44;
  v52[0] = v45[0];
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)((char *)v45 + 9);
  v46 = v39;
  v47 = v40;
  v48 = v41;
  v49 = v42;
  v23 = type metadata accessor for URL();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, a1, v23);
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
  v26 = 1;
  v25(v7, 0, 1, v23);
  v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)&v46, (uint64_t)&v39);
  v28 = swift_allocObject();
  v29 = v44;
  *(_OWORD *)(v28 + 88) = v43;
  *(_OWORD *)(v28 + 104) = v29;
  *(_OWORD *)(v28 + 120) = v45[0];
  *(_OWORD *)(v28 + 129) = *(_OWORD *)((char *)v45 + 9);
  v30 = v40;
  *(_OWORD *)(v28 + 24) = v39;
  *(_OWORD *)(v28 + 40) = v30;
  v31 = v42;
  *(_OWORD *)(v28 + 56) = v41;
  *(_QWORD *)(v28 + 16) = v27;
  *(_OWORD *)(v28 + 72) = v31;
  swift_retain();
  specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)&v46, (uint64_t)v7, 0, 0, (uint64_t)partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:), v28);
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v46);
  swift_release();
  return v26;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.findConfiguration(for:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[3];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v3 + 32 + (v5 << 7), (uint64_t)&v26);
      v6 = *(_QWORD *)&v32[0];
      v7 = *(_QWORD *)(*(_QWORD *)&v32[0] + 16);
      if (v7)
        break;
LABEL_3:
      ++v5;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v26);
      if (v5 == v4)
        goto LABEL_12;
    }
    v8 = *(_QWORD *)(type metadata accessor for UTType() - 8);
    v9 = v6 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain_n();
    while ((static UTType.== infix(_:_:)() & 1) == 0)
    {
      v9 += v10;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease_n();
    v37 = v30;
    v38 = v31;
    v39[0] = v32[0];
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v32 + 9);
    v33 = v26;
    v34 = v27;
    v35 = v28;
    v36 = v29;
    result = swift_bridgeObjectRelease();
    if (*((_QWORD *)&v33 + 1))
    {
      v12 = v38;
      a1[4] = v37;
      a1[5] = v12;
      a1[6] = v39[0];
      *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v39 + 9);
      v13 = v34;
      *a1 = v33;
      a1[1] = v13;
      v14 = v36;
      a1[2] = v35;
      a1[3] = v14;
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_12:
    v38 = 0u;
    memset(v39, 0, 25);
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of AccessibilityValueStorage?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  v15 = *(_QWORD *)(v3 + 16);
  if (v15)
  {
    v16 = v3 + 32;
    swift_bridgeObjectRetain();
    v17 = 0;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v16 + (v17 << 7), (uint64_t)&v26);
      v18 = *(_QWORD *)&v32[0];
      v19 = *(_QWORD *)(*(_QWORD *)&v32[0] + 16);
      if (v19)
        break;
LABEL_15:
      ++v17;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v26);
      if (v17 == v15)
        goto LABEL_23;
    }
    v20 = *(_QWORD *)(type metadata accessor for UTType() - 8);
    v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v22 = *(_QWORD *)(v20 + 72);
    swift_bridgeObjectRetain_n();
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v21 += v22;
      if (!--v19)
      {
        swift_bridgeObjectRelease_n();
        v16 = v3 + 32;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease_n();
    v23 = v31;
    a1[4] = v30;
    a1[5] = v23;
    a1[6] = v32[0];
    *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v32 + 9);
    v24 = v27;
    *a1 = v26;
    a1[1] = v24;
    v25 = v29;
    a1[2] = v28;
    a1[3] = v25;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_23:
    *(_OWORD *)((char *)a1 + 105) = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return swift_bridgeObjectRelease();
}

void closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(void *a1, void (*a2)(char *, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v12 = a1;
    specialized IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(v12, (uint64_t)a2, a3);

  }
  else
  {
    v10 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    a2(v9, 0);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
}

ValueMetadata *type metadata accessor for DocumentPresentationModeLocation()
{
  return &type metadata for DocumentPresentationModeLocation;
}

_QWORD *initializeWithCopy for NavigationItemDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NavigationItemDescription(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationItemDescription(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationItemDescription()
{
  return &type metadata for NavigationItemDescription;
}

void closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (a1)
  {
    v5 = a2 + 16;
    swift_beginAccess();
    v6 = MEMORY[0x18D760234](v5);
    if (v6)
    {
      v7 = (void *)v6;
      v8 = a1;
      IdentifiedDocumentGroupDocumentCreation.updateCurrentDocument(with:configuration:)((uint64_t)v8, a3);

    }
  }
}

uint64_t IdentifiedDocumentGroupDocumentCreation.updateCurrentDocument(with:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void (*v5)(uint64_t);
  _BYTE v6[24];
  _BYTE v7[16];
  _BYTE v8[128];

  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<PlatformDocument>((uint64_t)v6, (uint64_t)v7);
  v7[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)v8);
  result = swift_endAccess();
  v5 = *(void (**)(uint64_t))(v2
                                      + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_newDocumentHandler);
  if (v5)
  {
    swift_retain();
    v5(a1);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
  }
  return result;
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[16] = a8;
  v8[17] = v11;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  type metadata accessor for MainActor();
  v8[18] = static MainActor.shared.getter();
  v8[19] = dispatch thunk of Actor.unownedExecutor.getter();
  v8[20] = v9;
  return swift_task_switch();
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t);

  v1 = *(int **)(v0 + 96);
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
    swift_getObjectType();
    result = swift_conformsToProtocol2();
    if (result)
    {
      *(_QWORD *)(v0 + 56) = v2;
      *(_QWORD *)(v0 + 64) = result;
      outlined copy of AppIntentExecutor?((uint64_t)v1);
      v13 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
      swift_unknownObjectRetain();
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v4;
      *v4 = v0;
      v4[1] = closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:);
      return v13(v0 + 56);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 136);
    swift_release();
    outlined init with copy of NewDocumentProvider?(v5 + 24, v0 + 16, (unint64_t *)&lazy cache variable for type metadata for NewDocumentProvider?, (uint64_t)&lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    v6 = *(_QWORD *)(v0 + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v8 + 8))(*(_QWORD *)(v7 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox), *(_QWORD *)(v7 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8), v6, v8);
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    }
    else
    {
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(v0 + 16, (unint64_t *)&lazy cache variable for type metadata for NewDocumentProvider?, (uint64_t)&lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    }
    v9 = *(void (**)(uint64_t))(v0 + 120);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 40))(0, ObjectType, v11);
    v9(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  swift_unknownObjectRelease();
  v2 = *(void (**)(uint64_t))(v0 + 120);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 40))(0, ObjectType, v4);
  v2(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD);
  uint64_t v3;
  Swift::String v4;

  v1 = *(void **)(v0 + 176);
  v2 = *(void (**)(_QWORD))(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release();
  _StringGuts.grow(_:)(45);
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0xE000000000000000;
  v4._object = (void *)0x8000000187BE7310;
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  *(_QWORD *)(v0 + 88) = v1;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  MEMORY[0x18D75AC90](*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease();
  v2(0);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1, void (*a2)(char *, _QWORD), uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[6];

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)aBlock - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v14, v18);
    v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a2;
    *(_QWORD *)(v20 + 24) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, (char *)aBlock - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    aBlock[4] = partial apply for closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_34_0;
    v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a4, sel_closeWithCompletionHandler_, v21);
    _Block_release(v21);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v15 + 56))(v13, 1, 1, v14, v18);
    a2(v13, 0);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
}

uint64_t closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a4, v11);
    v13 = 0;
    v14 = 2;
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v13, 1, v11);
  a2(v10, v14);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationItemDescription.Group(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationItemDescription.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = a1[1];
  v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationItemDescription(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return specialized static NavigationItemDescription.== infix(_:_:)(v5, v7);
}

unint64_t lazy protocol witness table accessor for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation;
  if (!lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentPresentationModeLocation, &type metadata for DocumentPresentationModeLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation;
  if (!lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentPresentationModeLocation, &type metadata for DocumentPresentationModeLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation);
  }
  return result;
}

uint64_t sub_18772B9FC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18772BA20()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(a1, v4, v5, v7, v6);
}

uint64_t sub_18772BACC()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 72))
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144));
  return swift_deallocObject();
}

void partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(void *a1)
{
  uint64_t v1;

  closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

BOOL specialized static NavigationItemDescription.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *a1 == *a2 && v4 == v5;
    if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2])
    && specialized static Array<A>.== infix(_:_:)(a1[3], a2[3]))
  {
    return specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]);
  }
  return 0;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) == 0)
      {
        if (__OFADD__(v5, 1))
          goto LABEL_13;
        v9 = *(_QWORD *)(a1 + 32 + 8 * v5++);
        if (v9 == a2)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_4:
        if (v5 == v4)
          goto LABEL_15;
      }
      v6 = MEMORY[0x18D75E3BC](v5, a1);
      if (!__OFADD__(v5++, 1))
        break;
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        goto LABEL_15;
    }
    v8 = v6;
    swift_unknownObjectRelease();
    if (v8 == a2)
      goto LABEL_11;
    goto LABEL_4;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

void specialized NavigationItemDescription.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v2 = objc_msgSend(a1, sel_title);
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v80 = v5;
    v81 = v4;

  }
  else
  {
    v80 = 0;
    v81 = 0;
  }
  v6 = objc_msgSend(a1, sel_leadingItemGroups);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
    goto LABEL_66;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v107 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = 0;
      v11 = v107;
      v93 = v7;
      v96 = v7 & 0xC000000000000001;
      v87 = v7 + 32;
      v90 = v8;
      while (1)
      {
        if (v10 == v8)
        {
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        v102 = v10;
        v105 = v11;
        if (v96)
          v12 = (id)MEMORY[0x18D75E3BC]();
        else
          v12 = *(id *)(v87 + 8 * v10);
        v13 = v12;
        v14 = objc_msgSend(v12, sel_barButtonItems);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
        v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v15 >> 62)
        {
          swift_bridgeObjectRetain();
          v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v16)
          {
LABEL_15:
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
            if (v16 < 0)
              goto LABEL_64;
            v99 = v13;
            v17 = 0;
            v18 = v9;
            do
            {
              if ((v15 & 0xC000000000000001) != 0)
                v19 = (id)MEMORY[0x18D75E3BC](v17, v15);
              else
                v19 = *(id *)(v15 + 8 * v17 + 32);
              v20 = v19;
              v21 = objc_msgSend(v19, sel_title);
              if (v21)
              {
                v22 = v21;
                v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v25 = v24;

              }
              else
              {

                v23 = 0;
                v25 = 0;
              }
              v27 = *(_QWORD *)(v18 + 16);
              v26 = *(_QWORD *)(v18 + 24);
              if (v27 >= v26 >> 1)
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1);
              ++v17;
              *(_QWORD *)(v18 + 16) = v27 + 1;
              v28 = v18 + 16 * v27;
              *(_QWORD *)(v28 + 32) = v23;
              *(_QWORD *)(v28 + 40) = v25;
            }
            while (v16 != v17);
            swift_bridgeObjectRelease();

            v9 = MEMORY[0x1E0DEE9D8];
            v8 = v90;
            v7 = v93;
            goto LABEL_29;
          }
        }
        else
        {
          v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v16)
            goto LABEL_15;
        }
        swift_bridgeObjectRelease();

        v18 = v9;
LABEL_29:
        v29 = v102;
        v11 = v105;
        v31 = *(_QWORD *)(v105 + 16);
        v30 = *(_QWORD *)(v105 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1);
          v29 = v102;
          v11 = v105;
        }
        v10 = v29 + 1;
        *(_QWORD *)(v11 + 16) = v31 + 1;
        *(_QWORD *)(v11 + 8 * v31 + 32) = v18;
        if (v10 == v8)
        {
          v106 = v11;
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
      }
    }
    __break(1u);
    goto LABEL_103;
  }
  swift_bridgeObjectRelease();
  v106 = MEMORY[0x1E0DEE9D8];
LABEL_34:
  v32 = objc_msgSend(a1, sel_centerItemGroups);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    v33 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v33)
      goto LABEL_36;
    goto LABEL_68;
  }
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v33)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    v104 = MEMORY[0x1E0DEE9D8];
LABEL_69:
    v56 = objc_msgSend(a1, sel_trailingItemGroups);
    v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v57 >> 62)
      goto LABEL_99;
    v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v58)
    {
LABEL_100:
      swift_bridgeObjectRelease();

      v60 = MEMORY[0x1E0DEE9D8];
LABEL_101:
      *a2 = v81;
      a2[1] = v80;
      a2[2] = v106;
      a2[3] = v104;
      a2[4] = v60;
      return;
    }
LABEL_71:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58 & ~(v58 >> 63), 0);
    if (v58 < 0)
      goto LABEL_104;
    v59 = 0;
    v60 = v9;
    v89 = v57;
    v92 = v57 & 0xC000000000000001;
    v84 = v57 + 32;
    v86 = v58;
    while (1)
    {
      if (v59 == v58)
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        swift_bridgeObjectRetain();
        v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v58)
          goto LABEL_100;
        goto LABEL_71;
      }
      if (v92)
        v61 = (id)MEMORY[0x18D75E3BC](v59, v57);
      else
        v61 = *(id *)(v84 + 8 * v59);
      v62 = v61;
      v63 = objc_msgSend(v61, sel_barButtonItems);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v64 >> 62)
      {
        swift_bridgeObjectRetain();
        v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v65)
        {
LABEL_92:
          swift_bridgeObjectRelease();

          v67 = v9;
          goto LABEL_93;
        }
      }
      else
      {
        v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v65)
          goto LABEL_92;
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65 & ~(v65 >> 63), 0);
      if (v65 < 0)
        goto LABEL_98;
      v95 = v62;
      v98 = v59;
      v101 = v60;
      v66 = 0;
      v67 = v9;
      do
      {
        if ((v64 & 0xC000000000000001) != 0)
          v68 = (id)MEMORY[0x18D75E3BC](v66, v64);
        else
          v68 = *(id *)(v64 + 8 * v66 + 32);
        v69 = v68;
        v70 = objc_msgSend(v68, sel_title);
        if (v70)
        {
          v71 = v70;
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v74 = v73;

        }
        else
        {

          v72 = 0;
          v74 = 0;
        }
        v76 = *(_QWORD *)(v67 + 16);
        v75 = *(_QWORD *)(v67 + 24);
        if (v76 >= v75 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1);
        ++v66;
        *(_QWORD *)(v67 + 16) = v76 + 1;
        v77 = v67 + 16 * v76;
        *(_QWORD *)(v77 + 32) = v72;
        *(_QWORD *)(v77 + 40) = v74;
      }
      while (v65 != v66);
      swift_bridgeObjectRelease();

      v9 = MEMORY[0x1E0DEE9D8];
      v58 = v86;
      v57 = v89;
      v59 = v98;
      v60 = v101;
LABEL_93:
      v79 = *(_QWORD *)(v60 + 16);
      v78 = *(_QWORD *)(v60 + 24);
      if (v79 >= v78 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1);
      ++v59;
      *(_QWORD *)(v60 + 16) = v79 + 1;
      *(_QWORD *)(v60 + 8 * v79 + 32) = v67;
      if (v59 == v58)
      {
        swift_bridgeObjectRelease();

        goto LABEL_101;
      }
    }
  }
LABEL_36:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
  if ((v33 & 0x8000000000000000) == 0)
  {
    v34 = 0;
    v35 = v9;
    v91 = v7;
    v94 = v7 & 0xC000000000000001;
    v85 = v7 + 32;
    v88 = v33;
    while (1)
    {
      if (v34 == v33)
        goto LABEL_63;
      v100 = v34;
      v103 = v35;
      if (v94)
        v36 = (id)MEMORY[0x18D75E3BC]();
      else
        v36 = *(id *)(v85 + 8 * v34);
      v37 = v36;
      v38 = objc_msgSend(v36, sel_barButtonItems);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v39 >> 62)
      {
        swift_bridgeObjectRetain();
        v40 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v40)
        {
LABEL_44:
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0);
          if (v40 < 0)
            goto LABEL_65;
          v97 = v37;
          v41 = 0;
          v42 = v9;
          do
          {
            if ((v39 & 0xC000000000000001) != 0)
              v43 = (id)MEMORY[0x18D75E3BC](v41, v39);
            else
              v43 = *(id *)(v39 + 8 * v41 + 32);
            v44 = v43;
            v45 = objc_msgSend(v43, sel_title);
            if (v45)
            {
              v46 = v45;
              v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v49 = v48;

            }
            else
            {

              v47 = 0;
              v49 = 0;
            }
            v51 = *(_QWORD *)(v42 + 16);
            v50 = *(_QWORD *)(v42 + 24);
            if (v51 >= v50 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1);
            ++v41;
            *(_QWORD *)(v42 + 16) = v51 + 1;
            v52 = v42 + 16 * v51;
            *(_QWORD *)(v52 + 32) = v47;
            *(_QWORD *)(v52 + 40) = v49;
          }
          while (v40 != v41);
          swift_bridgeObjectRelease();

          v9 = MEMORY[0x1E0DEE9D8];
          v33 = v88;
          v7 = v91;
          goto LABEL_58;
        }
      }
      else
      {
        v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v40)
          goto LABEL_44;
      }
      swift_bridgeObjectRelease();

      v42 = v9;
LABEL_58:
      v53 = v100;
      v35 = v103;
      v55 = *(_QWORD *)(v103 + 16);
      v54 = *(_QWORD *)(v103 + 24);
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
        v53 = v100;
        v35 = v103;
      }
      v34 = v53 + 1;
      *(_QWORD *)(v35 + 16) = v55 + 1;
      *(_QWORD *)(v35 + 8 * v55 + 32) = v42;
      if (v34 == v33)
      {
        v104 = v35;
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
    }
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
}

void specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t ObjCClassFromMetadata;
  id v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  uint64_t countAndFlagsBits;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[6];
  uint64_t v66;
  char v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;

  v64 = a5;
  v63 = a4;
  v62 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v61 = (char *)&v58 - v11;
  v60 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v58 - v27;
  outlined init with copy of DocumentGroupConfiguration(a1, (uint64_t)v67);
  outlined init with copy of URL?(a2, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v28, v19, v20);
    goto LABEL_5;
  }
  v59 = v28;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v30 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v71._object = (void *)0x8000000187BD9E80;
  v31._countAndFlagsBits = 0x64656C7469746E55;
  v31._object = (void *)0xE800000000000000;
  v32.value._countAndFlagsBits = 0x746E656D75636F44;
  v32.value._object = (void *)0xE900000000000073;
  v33._countAndFlagsBits = 0x64656C7469746E55;
  v33._object = (void *)0xE800000000000000;
  v71._countAndFlagsBits = 0xD00000000000001DLL;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v30, v33, v71)._countAndFlagsBits;

  if (*(_QWORD *)(v70 + 16))
  {
    v35 = v70 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v58 = countAndFlagsBits;
    v37 = v60;
    v36(v15, v35, v60);
    v38 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v39 = a6;
    v40 = objc_msgSend(v38, sel_temporaryDirectory);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    a6 = v39;
    v41 = v59;
    URL.appendingPathComponent(_:conformingTo:)();
    v28 = v41;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v37);
LABEL_5:
    v43 = v68;
    v42 = v69;
    v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v68, v69);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v28, v20);
    v45 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 120))(v24, v43, v42);
    v46 = type metadata accessor for TaskPriority();
    v47 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v61, 1, 1, v46);
    outlined init with copy of DocumentGroupConfiguration((uint64_t)v67, (uint64_t)v65);
    type metadata accessor for MainActor();
    v48 = v62;
    v49 = v63;
    outlined copy of AppIntentExecutor?(v62);
    v50 = v45;
    swift_retain();
    v51 = static MainActor.shared.getter();
    v52 = swift_allocObject();
    v53 = v65[2];
    *(_OWORD *)(v52 + 120) = v65[3];
    v54 = v65[5];
    *(_OWORD *)(v52 + 136) = v65[4];
    *(_OWORD *)(v52 + 152) = v54;
    v55 = v65[1];
    *(_OWORD *)(v52 + 72) = v65[0];
    *(_OWORD *)(v52 + 88) = v55;
    v56 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v52 + 16) = v51;
    *(_QWORD *)(v52 + 24) = v56;
    *(_QWORD *)(v52 + 32) = v48;
    *(_QWORD *)(v52 + 40) = v49;
    v57 = v64;
    *(_QWORD *)(v52 + 48) = v50;
    *(_QWORD *)(v52 + 56) = v57;
    *(_QWORD *)(v52 + 64) = a6;
    *(_QWORD *)(v52 + 168) = v66;
    *(_OWORD *)(v52 + 104) = v53;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:), v52);

    swift_release();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v20);
    outlined destroy of DocumentGroupConfiguration((uint64_t)v67);
    return;
  }
  __break(1u);
}

uint64_t outlined init with copy of DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DocumentGroupConfiguration(a2, a1);
  return a2;
}

uint64_t sub_18772CB78()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();

  swift_release();
  if (*(_QWORD *)(v0 + 120))
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t outlined destroy of DocumentGroupConfiguration(uint64_t a1)
{
  destroy for DocumentGroupConfiguration(a1);
  return a1;
}

void type metadata accessor for LocationBox<DocumentPresentationModeLocation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocationBox<DocumentPresentationModeLocation>)
  {
    lazy protocol witness table accessor for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation();
    v0 = type metadata accessor for LocationBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<DocumentPresentationModeLocation>);
  }
}

void specialized DocumentViewController.init(coder:)()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;

  swift_unknownObjectWeakInit();
  v1 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_onDocumentClose];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier];
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *(_OWORD *)v3 = 0u;
  *((_QWORD *)v3 + 6) = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized URLDocumentHostingController.scenesDidChange(phaseChanged:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  MEMORY[0x18D75B908]();
  specialized NavigationItemDescription.init(from:)(objc_msgSend(v0, sel_navigationItem), &v46);
  v1 = v46;
  v2 = v47;
  v3 = v48;
  v38 = v0;
  v40 = v48;
  v4 = (uint64_t *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription];
  v5 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription];
  v6 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 8];
  v7 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 16];
  v8 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 24];
  v43 = v49;
  v44 = v50;
  v41 = v47;
  v42 = v46;
  if (!v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of NavigationItemDescription?(v1, v2, v3);
    outlined consume of NavigationItemDescription?(v5, v6, 0);
    v16 = v0;
    goto LABEL_21;
  }
  v36 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 32];
  if (!v47)
  {
    v9 = v50;
    if (!v6)
      goto LABEL_13;
    v17 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 16];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined copy of NavigationItemDescription?(v5, v6, v17);
    swift_bridgeObjectRelease();
LABEL_20:
    v16 = v38;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v9 = v50;
  if (!v6)
  {
    v24 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 16];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined copy of NavigationItemDescription?(v5, 0, v24);
    goto LABEL_20;
  }
  if (v46 != v5 || v47 != v6)
  {
    v11 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 24];
    v12 = *(_QWORD *)&v0[direct field offset for URLDocumentHostingController.navigationItemDescription + 16];
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v7 = v12;
    v8 = v11;
    if ((v13 & 1) == 0)
    {
      v14 = v7;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v15 = v5;
LABEL_19:
      outlined copy of NavigationItemDescription?(v15, v6, v14);
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
LABEL_13:
  v14 = v7;
  if (!specialized static Array<A>.== infix(_:_:)(v3, v7))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v15 = v5;
    goto LABEL_19;
  }
  if (!specialized static Array<A>.== infix(_:_:)(v43, v8))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined copy of NavigationItemDescription?(v5, v6, v14);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v18 = specialized static Array<A>.== infix(_:_:)(v9, v36);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined copy of NavigationItemDescription?(v5, v6, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v38;
  if (!v18)
  {
LABEL_21:
    v19 = *v4;
    v20 = v4[1];
    v21 = v4[2];
    v22 = v4[3];
    v23 = v4[4];
    outlined copy of NavigationItemDescription?(*v4, v20, v21);
    goto LABEL_22;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
LABEL_22:
  v25 = *(void (**)(_QWORD *__return_ptr, uint64_t))&v16[direct field offset for URLDocumentHostingController.content];
  v26 = swift_retain();
  v25(v45, v26);
  swift_release();
  v27 = v45[0];
  v28 = *(_QWORD **)&v16[direct field offset for UIHostingController.host];
  v29 = (_QWORD *)((char *)v28 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v28) + 0x60));
  swift_beginAccess();
  v37 = v29[2];
  v39 = v29[1];
  v35 = v29[3];
  *v29 = v27;
  v29[1] = v19;
  v29[2] = v20;
  v29[3] = v21;
  v29[4] = v22;
  v29[5] = v23;
  swift_retain();
  outlined copy of NavigationItemDescription?(v19, v20, v21);
  swift_retain();
  outlined copy of NavigationItemDescription?(v19, v20, v21);
  v30 = v28;
  swift_release();
  outlined consume of NavigationItemDescription?(v39, v37, v35);
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  swift_release();
  outlined consume of NavigationItemDescription?(v19, v20, v21);
  swift_release();

  outlined consume of NavigationItemDescription?(v19, v20, v21);
  v31 = *v4;
  v32 = v4[1];
  v33 = v4[2];
  *v4 = v42;
  v4[1] = v41;
  v4[2] = v40;
  v4[3] = v43;
  v4[4] = v44;
  outlined consume of NavigationItemDescription?(v31, v32, v33);
  return static Update.end()();
}

uint64_t specialized IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(void *a1, char *a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSURL *v47;
  void *v48;
  void *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSURL *v83;
  void *v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  id v95;
  uint64_t v97;
  void *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD v107[6];
  _OWORD v108[2];
  _OWORD v109[6];
  _OWORD v110[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[2];
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[2];
  _OWORD v131[6];
  _OWORD v132[3];

  v6 = type metadata accessor for UTType();
  v103 = *(_QWORD *)(v6 - 8);
  v104 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v99 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v106 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v105 = (uint64_t)&v97 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v101 = (char *)&v97 - v18;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v100 = (char *)&v97 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v97 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v97 - v32;
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v97 - v36;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = a3;
  _Block_copy(a3);
  IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter((uint64_t)&v124);
  if (!*((_QWORD *)&v124 + 1))
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    v45 = type metadata accessor for URL();
    v46 = *(_QWORD *)(v45 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v37, 1, 1, v45);
    outlined init with copy of URL?((uint64_t)v37, (uint64_t)v33);
    v48 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v33, 1, v45) != 1)
    {
      URL._bridgeToObjectiveC()(v47);
      v48 = v49;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v45);
    }
    ((void (**)(_QWORD, void *, _QWORD))a3)[2](a3, v48, 0);

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    return swift_release();
  }
  v102 = v29;
  v131[4] = v128;
  v131[5] = v129;
  v132[0] = v130[0];
  *(_OWORD *)((char *)v132 + 9) = *(_OWORD *)((char *)v130 + 9);
  v131[0] = v124;
  v131[1] = v125;
  v131[2] = v126;
  v131[3] = v127;
  v39 = objc_msgSend(a1, sel_activeDocumentCreationIntent);
  v40 = (uint64_t)v106;
  if (v39)
  {
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;
    if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v43 == v44)
    {
      swift_bridgeObjectRelease_n();
LABEL_10:
      v51 = type metadata accessor for URL();
      v52 = (uint64_t)v102;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v102, 1, 1, v51);
      v53 = (_QWORD *)swift_allocObject();
      v53[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ();
      v53[3] = v38;
      v53[4] = a2;
      swift_retain();
      v54 = a2;
      specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)v131, v52, 0, 0, (uint64_t)partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), (uint64_t)v53);

      swift_release();
      v55 = v52;
      goto LABEL_34;
    }
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0)
      goto LABEL_10;
  }
  v98 = a2;
  v56 = *(_QWORD *)&a2[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_strategies];
  v57 = *(_QWORD *)(v56 + 16);
  if (!v57)
  {
    swift_bridgeObjectRetain();
    v67 = (uint64_t)v102;
LABEL_24:
    *(_QWORD *)&v126 = 0;
    v124 = 0u;
    v125 = 0u;
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v125 + 1))
      goto LABEL_31;
    goto LABEL_25;
  }
  v97 = v38;
  v58 = v56 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of TableColumnList(v58, (uint64_t)&v111);
    v59 = *((_QWORD *)&v112 + 1);
    v60 = v113;
    __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60);
    v63 = v62;
    if (!v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v63 == v64)
      break;
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v66 & 1) != 0)
      goto LABEL_30;
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
    v58 += 40;
    if (!--v57)
    {
      swift_bridgeObjectRelease();
      v38 = v97;
      v67 = (uint64_t)v102;
      v40 = (uint64_t)v106;
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  outlined init with take of OptionalBinaryInteger(&v111, (uint64_t)&v124);
  swift_bridgeObjectRelease();
  v38 = v97;
  v67 = (uint64_t)v102;
  v40 = (uint64_t)v106;
  if (*((_QWORD *)&v125 + 1))
  {
LABEL_25:
    outlined init with take of OptionalBinaryInteger(&v124, (uint64_t)v121);
    v129 = 0u;
    memset(v130, 0, 25);
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v124 = 0u;
    v68 = v122;
    v69 = v123;
    __swift_project_boxed_opaque_existential_1(v121, v122);
    (*(void (**)(uint64_t, uint64_t))(v69 + 24))(v68, v69);
    v70 = v105;
    outlined init with copy of TableColumnList((uint64_t)v121, (uint64_t)v118);
    v71 = v103;
    v72 = v104;
    v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
    if (v73(v70, 1, v104) == 1)
    {
      v74 = v119;
      v75 = v120;
      __swift_project_boxed_opaque_existential_1(v118, v119);
      v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 40))(v74, v75);
      v77 = (uint64_t)v101;
      if (*(_QWORD *)(v76 + 16))
      {
        v78 = v103;
        v72 = v104;
        (*(void (**)(char *, unint64_t, uint64_t))(v103 + 16))(v101, v76 + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)), v104);
        v79 = 0;
      }
      else
      {
        v79 = 1;
        v78 = v103;
        v72 = v104;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v77, v79, 1, v72);
      swift_bridgeObjectRelease();
      outlined destroy of Binding<AttributedString>(v105, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v71 = v78;
      v40 = (uint64_t)v106;
    }
    else
    {
      v77 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v101, v70, v72);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v77, 0, 1, v72);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
    outlined init with copy of SearchFieldConfiguration.Data?(v77, v40, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v73(v40, 1, v72) == 1)
    {
      outlined destroy of Binding<AttributedString>(v40, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      v86 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v99, v40, v72);
      IdentifiedDocumentGroupDocumentCreation.findConfiguration(for:)(&v111);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v86, v72);
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
      outlined init with take of IdentifiedDocumentGroupConfiguration?((uint64_t)&v111, (uint64_t)&v124);
    }
    outlined init with copy of AccessibilityValueStorage?((uint64_t)&v124, (uint64_t)v109, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v131, (uint64_t)v107);
    if (*((_QWORD *)&v109[0] + 1))
    {
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v107);
      v115 = v109[4];
      v116 = v109[5];
      v117[0] = v110[0];
      *(_OWORD *)((char *)v117 + 9) = *(_OWORD *)((char *)v110 + 9);
      v111 = v109[0];
      v112 = v109[1];
      v113 = v109[2];
      v114 = v109[3];
    }
    else
    {
      v115 = v107[4];
      v116 = v107[5];
      v117[0] = v108[0];
      *(_OWORD *)((char *)v117 + 9) = *(_OWORD *)((char *)v108 + 9);
      v111 = v107[0];
      v112 = v107[1];
      v113 = v107[2];
      v114 = v107[3];
      outlined destroy of AccessibilityValueStorage?((uint64_t)v109, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    }
    v87 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v67, 1, 1, v87);
    v88 = v122;
    v89 = v123;
    __swift_project_boxed_opaque_existential_1(v121, v122);
    v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 32))(v88, v89);
    v92 = v91;
    v93 = (_QWORD *)swift_allocObject();
    v93[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ();
    v93[3] = v38;
    v94 = v98;
    v93[4] = v98;
    swift_retain();
    v95 = v94;
    specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)&v111, v67, v90, v92, (uint64_t)partial apply for closure #3 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), (uint64_t)v93);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v90);

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v111);
    outlined destroy of Binding<AttributedString>(v77, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v131);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v121);
    return swift_release();
  }
LABEL_31:
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)&v124, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy, (uint64_t)&protocol descriptor for DocumentCreationStrategy, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  v80 = type metadata accessor for URL();
  v81 = *(_QWORD *)(v80 - 8);
  v82 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v100, 1, 1, v80);
  outlined init with copy of URL?(v82, (uint64_t)v22);
  v84 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v22, 1, v80) != 1)
  {
    URL._bridgeToObjectiveC()(v83);
    v84 = v85;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v22, v80);
  }
  ((void (**)(_QWORD, void *, _QWORD))a3)[2](a3, v84, 0);

  v55 = v82;
LABEL_34:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v131);
  return swift_release();
}

uint64_t specialized IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  char *v21;
  void *v22;
  id v23;
  _QWORD aBlock[6];

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)aBlock - v14;
  v16 = objc_msgSend(a1, sel_fileURL, v13);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v15, v6);
  v20 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = a2;
  *((_QWORD *)v21 + 3) = a3;
  *((_QWORD *)v21 + 4) = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v21[v20], v10, v6);
  aBlock[4] = partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_49;
  v22 = _Block_copy(aBlock);
  swift_retain();
  v23 = a1;
  swift_release();
  objc_msgSend(v23, sel_saveToURL_forSaveOperation_completionHandler_, v19, 0, v22);
  _Block_release(v22);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v15, v6);
}

uint64_t specialized IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didPickDocumentsAt:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t, double))(v7 + 16))(v5, a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
      IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)((uint64_t)v11);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v7 + 56))(v5, 1, 1, v6, v9);
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t sub_18772E1A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

void partial apply for closure #3 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(void *a1)
{
  uint64_t v1;

  closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(a1, *(void (**)(char *, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined init with take of IdentifiedDocumentGroupConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_21Tm_1()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18772E270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(a1, *(void (**)(char *, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_18772E330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  return closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(a1, *(void (**)(char *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t outlined init with copy of NewDocumentProvider?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined assign with take of IdentifiedDocumentGroupConfiguration??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(0, &lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration??, (uint64_t)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of NavigationItemDescription?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18772E4EC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_18772E510()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_BYTE *)(v0 + 152));
  return swift_deallocObject();
}

void partial apply for closure #1 in DocumentViewController.makeDocumentHostingController()(void *a1)
{
  uint64_t v1;

  closure #1 in DocumentViewController.makeDocumentHostingController()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

void *partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.configuration(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *result;
  void *v5;

  v3 = *(void **)(v2 + 16);
  result = (void *)MEMORY[0x18D760234](a2);
  if (result)
  {
    v5 = result;

    return (void *)(v5 == v3);
  }
  return result;
}

void type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>));
  }
}

uint64_t outlined init with take of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of RootModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for RootModifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for NavigationItemDescription.Item()
{
  return &type metadata for NavigationItemDescription.Item;
}

ValueMetadata *type metadata accessor for NavigationItemDescription.Group()
{
  return &type metadata for NavigationItemDescription.Group;
}

uint64_t SelectionShapeStyle.hasProminentAppearance(in:)(uint64_t a1)
{
  unsigned __int8 v2;
  char v3;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    if (v3 == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
LABEL_6:
      swift_release_n();
      return v2;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    if ((v3 & 1) != 0)
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_6;
    }
  }
  return 1;
}

uint64_t SelectionShapeStyle._apply(to:)(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 56);
  v2 = (__int128 *)(a1 + 48);
  *(_QWORD *)&v6 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)&v6 + 1) = v3;
  swift_retain();
  swift_retain();
  if ((SelectionShapeStyle.hasProminentAppearance(in:)((uint64_t)&v6) & 1) != 0)
    v4 = static Color.accentColor.getter();
  else
    v4 = static Color.gray.getter();
  *(_QWORD *)&v6 = v4;
  AnyShapeStyle.init<A>(_:)();
  swift_release();
  swift_release();
  dispatch thunk of AnyShapeStyleBox.apply(to:)();
  result = swift_release();
  if (*(_BYTE *)(a1 + 24) == 4)
  {
    v6 = *v2;
    if ((SelectionShapeStyle.hasProminentAppearance(in:)((uint64_t)&v6) & 1) != 0)
      static BackgroundProminence.increased.getter();
    else
      static BackgroundProminence.standard.getter();
    return EnvironmentValues.backgroundProminence.setter();
  }
  return result;
}

_BYTE *static SelectionShapeStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t static SelectionShapeStyle._makeView<A>(view:inputs:)()
{
  return static _ShapeView._makeView(view:inputs:)();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance SelectionShapeStyle(uint64_t a1)
{
  return SelectionShapeStyle._apply(to:)(a1);
}

ValueMetadata *type metadata accessor for SelectionShapeStyle()
{
  return &type metadata for SelectionShapeStyle;
}

void __swiftcall DefaultMenuButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DefaultMenuButtonStyle._body(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in DefaultMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultMenuButtonStyle()
{
  return &type metadata for DefaultMenuButtonStyle;
}

void UIKitMainMenuController.buildMenu(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  BOOL v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  void *v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  Swift::UInt v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;

  v2 = v1;
  v4 = type metadata accessor for MainMenuItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v102 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v103 = (char *)&v92 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v92 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (uint64_t *)((char *)&v92 - v17);
  v19 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v20 = objc_msgSend(v19, sel_userInterfaceIdiom);

  if (v20)
  {
    v96 = a1;
    specialized UIKitMainMenuController.synthesizeSystemMenus(_:)(a1);
    v21 = MEMORY[0x1E0DEE9D8];
    v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)&v109 = v21;
    *((_QWORD *)&v109 + 1) = v22;
    v110 = MEMORY[0x1E0DEE9E8];
    v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList);
    swift_bridgeObjectRetain();
    CommandsList.resolveOperations(into:)((uint64_t)&v109, v23);
    swift_bridgeObjectRelease();
    v107 = v110;
    v108 = v21;
    v97 = (char *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_environment);
    v105 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_environment);
    v106 = v109;
    v24 = _ResolvedCommands.mainMenuItems(env:)((uint64_t *)&v105);
    v25 = *(_QWORD *)(v24 + 16);
    v93 = v2;
    if (v25)
    {
      v26 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_topLevelItemCoordinators);
      v100 = v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_focusedValues;
      v27 = *(unsigned __int8 *)(v5 + 80);
      v95 = v24;
      v28 = v24 + ((v27 + 32) & ~v27);
      v29 = type metadata accessor for MainMenuItem;
      v98 = *(_QWORD *)(v5 + 72);
      v99 = v18;
      v30 = (uint64_t)v103;
      v101 = v14;
      do
      {
        *(_QWORD *)&v104 = v25;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)v18, v29);
        v32 = *v18;
        v31 = v18[1];
        swift_beginAccess();
        v33 = *v26;
        if (*(_QWORD *)(*v26 + 16))
        {
          swift_bridgeObjectRetain();
          v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
          if ((v35 & 1) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v34);
            swift_retain();
          }
          else
          {
            v36 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v36 = 0;
        }
        swift_endAccess();
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, (uint64_t)v14, v29);
        if (!v36)
        {
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, v30, v29);
          v37 = *((_QWORD *)v97 + 1);
          *(_QWORD *)&v106 = *(_QWORD *)v97;
          *((_QWORD *)&v106 + 1) = v37;
          type metadata accessor for MainMenuItemCoordinator();
          swift_allocObject();
          swift_retain();
          swift_retain();
          v36 = MainMenuItemCoordinator.init(_:environment:)(v30, (unint64_t *)&v106);
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, v29);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v30, v29);
        v38 = *(_QWORD *)(v36 + 16);
        v39 = v29;
        v40 = v102;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v30, v102, v39);
        v41 = v38 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem;
        swift_beginAccess();
        swift_retain();
        outlined assign with copy of MainMenuItem(v40, v41);
        swift_endAccess();
        LOWORD(v106) = 1;
        type metadata accessor for MainMenuItemHost(0);
        lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, v39);
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v30, v39);
        v42 = *(_BYTE *)(v100 + 8);
        v43 = *(_DWORD *)(v100 + 12);
        v44 = *(_QWORD *)(v36 + 16) + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_focusedValues;
        v45 = *(_DWORD *)(v44 + 12);
        *(_QWORD *)v44 = *(_QWORD *)v100;
        *(_BYTE *)(v44 + 8) = v42;
        *(_DWORD *)(v44 + 12) = v43;
        swift_retain();
        swift_retain();
        if (v45 == -1 || v43 == -1 || v45 != v43)
        {
          LOWORD(v106) = 4;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        }
        swift_release();
        swift_release();
        MainMenuItemCoordinator.updateIfNeeded()();
        v46 = swift_retain();
        MEMORY[0x18D75CF58](v46);
        v30 = (uint64_t)v103;
        v14 = v101;
        v29 = v39;
        if (*(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v18 = v99;
        v47 = *v99;
        v48 = v99[1];
        swift_beginAccess();
        swift_retain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v105 = *v26;
        *v26 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v47, v48, isUniquelyReferenced_nonNull_native);
        *v26 = v105;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, v29);
        v28 += v98;
        v25 = v104 - 1;
      }
      while ((_QWORD)v104 != 1);
      swift_bridgeObjectRelease();
      v50 = v108;
    }
    else
    {
      swift_bridgeObjectRelease();
      v50 = MEMORY[0x1E0DEE9D8];
    }
    v51 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if (v50 >> 62)
      goto LABEL_78;
    v52 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    while (v52)
    {
      v53 = 0;
      v98 = v50;
      v99 = (uint64_t *)(v50 & 0xC000000000000001);
      v94 = v50 + 32;
      v95 = v50 & 0xFFFFFFFFFFFFFF8;
      v97 = (char *)v52;
      while (v99)
      {
        v54 = MEMORY[0x18D75E3BC](v53, v50);
        v55 = __OFADD__(v53, 1);
        v56 = v53 + 1;
        if (v55)
          goto LABEL_76;
LABEL_32:
        v101 = v56;
        v57 = *(_QWORD *)(v54 + 64);
        v58 = *(_QWORD *)(v57 + 16);
        if (v58)
        {
          v59 = v54;
          swift_getObjectType();
          swift_bridgeObjectRetain();
          v60 = (char *)(v57 + 48);
          do
          {
            v61 = (void *)*((_QWORD *)v60 - 2);
            v62 = (void *)*((_QWORD *)v60 - 1);
            v63 = *v60;
            v60 += 24;
            outlined copy of MenuBuilderInstruction(v61, v62, v63);
            UIMenuBuilder.perform(instruction:)((uint64_t)v61, (uint64_t)v62, v63);
            outlined consume of MenuBuilderInstruction(v61, v62, v63);
            --v58;
          }
          while (v58);
          swift_bridgeObjectRelease();
          v54 = v59;
        }
        v50 = *(_QWORD *)(v54 + 32);
        if (*(_QWORD *)(v50 + 16))
        {
          v100 = v54;
          swift_bridgeObjectRetain();
          v64 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v106 = v51;
          v65 = *(_QWORD *)(v50 + 64);
          v102 = v50 + 64;
          v66 = 1 << *(_BYTE *)(v50 + 32);
          if (v66 < 64)
            v67 = ~(-1 << v66);
          else
            v67 = -1;
          v68 = v67 & v65;
          v103 = (char *)((unint64_t)(v66 + 63) >> 6);
          swift_bridgeObjectRetain();
          v69 = 0;
          while (1)
          {
            if (v68)
            {
              v71 = __clz(__rbit64(v68));
              v68 &= v68 - 1;
              v72 = v71 | (v69 << 6);
            }
            else
            {
              v73 = v69 + 1;
              if (__OFADD__(v69, 1))
                goto LABEL_74;
              if (v73 >= (uint64_t)v103)
              {
LABEL_24:
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_25;
              }
              v74 = *(_QWORD *)(v102 + 8 * v73);
              ++v69;
              if (!v74)
              {
                v69 = v73 + 1;
                if (v73 + 1 >= (uint64_t)v103)
                  goto LABEL_24;
                v74 = *(_QWORD *)(v102 + 8 * v69);
                if (!v74)
                {
                  v69 = v73 + 2;
                  if (v73 + 2 >= (uint64_t)v103)
                    goto LABEL_24;
                  v74 = *(_QWORD *)(v102 + 8 * v69);
                  if (!v74)
                  {
                    v69 = v73 + 3;
                    if (v73 + 3 >= (uint64_t)v103)
                      goto LABEL_24;
                    v74 = *(_QWORD *)(v102 + 8 * v69);
                    if (!v74)
                    {
                      v75 = v73 + 4;
                      if (v75 >= (uint64_t)v103)
                        goto LABEL_24;
                      v74 = *(_QWORD *)(v102 + 8 * v75);
                      if (!v74)
                      {
                        while (1)
                        {
                          v69 = v75 + 1;
                          if (__OFADD__(v75, 1))
                            goto LABEL_75;
                          if (v69 >= (uint64_t)v103)
                            goto LABEL_24;
                          v74 = *(_QWORD *)(v102 + 8 * v69);
                          ++v75;
                          if (v74)
                            goto LABEL_60;
                        }
                      }
                      v69 = v75;
                    }
                  }
                }
              }
LABEL_60:
              v68 = (v74 - 1) & v74;
              v72 = __clz(__rbit64(v74)) + (v69 << 6);
            }
            v76 = *(_QWORD *)(*(_QWORD *)(v50 + 48) + 8 * v72);
            v104 = *(_OWORD *)(*(_QWORD *)(v50 + 56) + 16 * v72);
            v77 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
            v79 = v51[2];
            v80 = (v78 & 1) == 0;
            v81 = v79 + v80;
            if (__OFADD__(v79, v80))
            {
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
              goto LABEL_76;
            }
            v82 = v77;
            v83 = v78;
            v84 = v50;
            v85 = v51[3];
            v50 = *((_QWORD *)&v104 + 1);
            swift_retain();
            if (v85 >= v81)
            {
              if ((v64 & 1) == 0)
                specialized _NativeDictionary.copy()();
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v64 & 1);
              v86 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
              if ((v83 & 1) != (v87 & 1))
              {
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return;
              }
              v82 = v86;
            }
            v88 = v104;
            v51 = (_QWORD *)v106;
            if ((v83 & 1) != 0)
            {
              v104 = *(_OWORD *)(*(_QWORD *)(v106 + 56) + 16 * v82);
              swift_retain();
              swift_release();
              v70 = (_OWORD *)(v51[7] + 16 * v82);
              swift_release();
              *v70 = v104;
            }
            else
            {
              *(_QWORD *)(v106 + 8 * (v82 >> 6) + 64) |= 1 << v82;
              *(_QWORD *)(v51[6] + 8 * v82) = v76;
              *(_OWORD *)(v51[7] + 16 * v82) = v88;
              v89 = v51[2];
              v55 = __OFADD__(v89, 1);
              v90 = v89 + 1;
              if (v55)
                goto LABEL_73;
              v51[2] = v90;
            }
            v64 = 1;
            v50 = v84;
          }
        }
        swift_release();
LABEL_25:
        v50 = v98;
        v53 = v101;
        if (v101 == v97)
          goto LABEL_79;
      }
      if ((unint64_t)v53 >= *(_QWORD *)(v95 + 16))
        goto LABEL_77;
      v54 = swift_retain();
      v55 = __OFADD__(v53, 1);
      v56 = v53 + 1;
      if (!v55)
        goto LABEL_32;
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      swift_bridgeObjectRetain_n();
      v52 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_79:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91 = (_QWORD *)(v93 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap);
    swift_beginAccess();
    *v91 = v51;
    swift_bridgeObjectRelease();
  }
}

uint64_t UIKitMainMenuController.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  objc_class *ObjectType;
  id v7;
  char v8;
  char v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v24[2];
  objc_super v25;
  _QWORD v26[3];
  uint64_t v27;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any?(a2, (uint64_t)v26);
  if (!v27)
  {
    outlined destroy of TableRowID?((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    goto LABEL_8;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
  if ((swift_dynamicCast() & 1) == 0
    || (v7 = UIKeyCommand.discoverabilityID.getter(), v9 = v8, v24[1], (v9 & 1) != 0))
  {
LABEL_8:
    outlined init with copy of Any?(a2, (uint64_t)v26);
    v16 = v27;
    if (v27)
    {
      v17 = __swift_project_boxed_opaque_existential_1(v26, v27);
      v18 = *(_QWORD *)(v16 - 8);
      v19 = MEMORY[0x1E0C80A78](v17, v17);
      v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v18 + 16))(v21, v19);
      v22 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    else
    {
      v22 = 0;
    }
    v25.receiver = v3;
    v25.super_class = ObjectType;
    v15 = (uint64_t)objc_msgSendSuper2(&v25, sel_canPerformAction_withSender_, a1, v22);
    swift_unknownObjectRelease();
    return v15;
  }
  v10 = &v2[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)(*(_QWORD *)v10 + 16)
    && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v7), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v12);
    swift_retain();
    v15 = 1;
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  swift_endAccess();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  return v15;
}

Swift::Void __swiftcall UIKitMainMenuController._performMainMenuShortcutKeyCommand(_:)(UIKeyCommand *a1)
{
  uint64_t v1;
  id v2;
  char v3;
  Swift::UInt v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v2 = UIKeyCommand.discoverabilityID.getter();
  if ((v3 & 1) == 0)
  {
    v4 = (Swift::UInt)v2;
    v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap);
    swift_beginAccess();
    v6 = *v5;
    if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v8 & 1) != 0))
    {
      v9 = *(void (**)(uint64_t))(*(_QWORD *)(v6 + 56) + 16 * v7);
      swift_endAccess();
      v10 = swift_retain();
      v9(v10);
      swift_release();
    }
    else
    {
      swift_endAccess();
    }
  }
}

id UIKitMainMenuController.init(commandsList:)(uint64_t a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v1;
  EnvironmentValues.init()();
  v5 = &v4[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_focusedValues];
  *(_QWORD *)v5 = 0;
  v5[8] = 0;
  *((_DWORD *)v5 + 3) = 0;
  v6 = OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_topLevelItemCoordinators;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v4[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v8 = OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap;
  *(_QWORD *)&v4[v8] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(_QWORD *)&v4[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList] = a1;

  v14.receiver = v4;
  v14.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v14, sel_init);
  v10 = v9;
  v11 = static AppGraph.shared;
  if (static AppGraph.shared)
  {
    v12 = v9;
    swift_retain();
    specialized AppGraph.addObserver(_:)(v12, v11);
    swift_release();

  }
  return v10;
}

void MainMenuItemCoordinator.updateIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  UIMenuElementSize preferredElementSize;
  id v21;
  Swift::String v22;
  UIMenu *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::OpaquePointer v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  UIImage_optional v41;

  if (*(_BYTE *)(v0 + 72) == 1)
  {
    v1 = v0;
    *(_BYTE *)(v0 + 72) = 0;
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
    swift_beginAccess();
    v3 = *(unsigned __int8 *)(v2 + 361);
    *(_BYTE *)(v2 + 361) = v3 | 2;
    if ((v3 | 2) != v3)
    {
      swift_retain();
      GraphHost.uninstantiate(immediately:)(0);
      swift_release();
    }
    v33 = 0;
    LOBYTE(v34) = 1;
    type metadata accessor for MainMenuItemHost(0);
    lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost();
    swift_retain();
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_release();
    swift_retain();
    ViewRendererHost.updateViewGraph<A>(body:)();
    swift_release();
    if (MEMORY[0x10])
    {
      v4 = MEMORY[0x1E0DEE9D8];
      v40 = MEMORY[0x1E0DEE9D8];
      v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      LOBYTE(v33) = 0;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
      v8 = (v7 + 32) & ~v7;
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
      v10 = v9 + v8;
      if (one-time initialization token for empty != -1)
        swift_once();
      v11 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, v10, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
      v12 = v33;
      v33 = 3;
      LOBYTE(v34) = 0;
      v35 = MEMORY[0x1E0DEE9E0];
      v36 = v5;
      *(_QWORD *)&v37 = v4;
      *((_QWORD *)&v37 + 1) = MEMORY[0x1E0DEE9E0];
      v38 = v12;
      v39 = v9;
      MenuVisitor.visit(_:uniqueNames:)(0, &v40);
      swift_bridgeObjectRelease();
      v13 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v37;
      *(_BYTE *)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 32) = v13;
      *(_QWORD *)(v1 + 40) = v5;
      *(_OWORD *)(v1 + 48) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v1 + 24))
      {
        if (*(_BYTE *)(v1 + 24) == 1)
        {
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuBuilderInstruction>, (uint64_t)&type metadata for MenuBuilderInstruction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_187BF9830;
          v16 = (void *)*MEMORY[0x1E0DC5188];
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
          v17 = (uint64_t *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem);
          swift_beginAccess();
          v19 = *v17;
          v18 = (void *)v17[1];
          preferredElementSize = *(_QWORD *)(v1 + 48);
          v21 = v16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v22._countAndFlagsBits = v19;
          v22._object = v18;
          v41.value.super.isa = 0;
          v41.is_nil = 0;
          UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v23, v22, (Swift::String_optional)0, v41, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v32);
          *(_QWORD *)(v15 + 32) = v21;
          *(_QWORD *)(v15 + 40) = v24;
          *(_BYTE *)(v15 + 48) = 2;
          *(_QWORD *)(v1 + 64) = v15;
        }
        else
        {
          v25 = *(_QWORD *)(v1 + 32);
          v26 = *(_QWORD *)(v1 + 40);
          v27 = *(_QWORD *)(v1 + 48);
          v28 = *(_QWORD *)(v1 + 56);
          LOBYTE(v33) = 2;
          v34 = v25;
          v35 = v26;
          v36 = v27;
          *(_QWORD *)&v37 = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized MainMenuItemCoordinator.mergeInstructions(from:)(&v33);
          v30 = v29;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v1 + 64) = v30;
        }
        swift_bridgeObjectRelease();
      }
      v31 = objc_msgSend((id)objc_opt_self(), sel_mainSystem);
      objc_msgSend(v31, sel_setNeedsRebuild);

    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void UIMenuBuilder.perform(instruction:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X11 }
}

uint64_t sub_18772FD58()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t result;
  _QWORD v9[16];

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in UIMenuBuilder.perform(instruction:);
  *(_QWORD *)(v4 + 24) = v3;
  v9[4] = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  v9[5] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  v9[3] = &block_descriptor_24_2;
  v5 = _Block_copy(v9);
  v6 = v2;
  v7 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v7, v5);

  _Block_release(v5);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v7 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x18772FE68);
  }
  return result;
}

uint64_t closure #1 in UIKitMainMenuController.synthesizeSystemMenus(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  Swift::Int v18;
  Swift::Int v19;
  void *v20;
  void *v21;
  unint64_t v22;
  UIMenuElementSize v23;
  UIMenuElementSize preferredElementSize;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  UIMenu *v29;
  uint64_t v30;
  Swift::OpaquePointer children;
  uint64_t v33;
  UIImage_optional v34;

  v1 = a1;
  children._rawValue = (void *)(a1 >> 62);
  if (a1 >> 62)
  {
LABEL_48:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      v3 = 0;
      v4 = v1 & 0xC000000000000001;
      v5 = *MEMORY[0x1E0DC5108];
      do
      {
        if (v4)
          v6 = (id)MEMORY[0x18D75E3BC](v3, v1);
        else
          v6 = *(id *)(v1 + 8 * v3 + 32);
        v7 = v6;
        objc_opt_self();
        v8 = swift_dynamicCastObjCClass();
        if (v8)
        {
          v9 = (void *)v8;
          v10 = v7;
          v11 = objc_msgSend(v9, sel_identifier);
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v14 = v13;
          if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
          {

            swift_bridgeObjectRelease_n();
LABEL_20:
            v33 = v1;
            v19 = v3 + 4;
            if (__OFADD__(v3, 4))
            {
              __break(1u);
            }
            else if (v19 >= v3)
            {
              if (!children._rawValue)
              {
                v5 = v1 & 0xFFFFFFFFFFFFFF8;
                v10 = *(id *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if ((uint64_t)v10 >= v3)
                {
                  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  goto LABEL_30;
                }
LABEL_52:
                __break(1u);
                goto LABEL_53;
              }
              if (v1 < 0)
                v5 = v1;
              else
                v5 = v1 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain();
              if (_CocoaArrayWrapper.endIndex.getter() < v3)
                goto LABEL_52;
              swift_bridgeObjectRetain();
              v5 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_30:
              if (v5 < v19)
              {
LABEL_53:
                __break(1u);
                goto LABEL_54;
              }
              if (v4 && v3 != v19)
              {
                if (v3 < (unint64_t)v19)
                {
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3 + 1);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3 + 2);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3 + 3);
                  goto LABEL_35;
                }
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
                goto LABEL_56;
              }
LABEL_35:
              if (!children._rawValue)
              {
                v5 = v1 & 0xFFFFFFFFFFFFFF8;
                v10 = (id)((v1 & 0xFFFFFFFFFFFFFF8) + 32);
                v14 = (2 * v19) | 1;
                swift_bridgeObjectRetain();
                v11 = (id)v3;
                goto LABEL_39;
              }
              swift_bridgeObjectRetain();
              v5 = _CocoaArrayWrapper.subscript.getter();
              v10 = v20;
              v11 = v21;
              v14 = v22;
              swift_bridgeObjectRelease();
              if ((v14 & 1) != 0)
              {
LABEL_39:
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                v25 = swift_dynamicCastClass();
                if (!v25)
                {
                  swift_unknownObjectRelease();
                  v25 = MEMORY[0x1E0DEE9D8];
                }
                v26 = *(_QWORD *)(v25 + 16);
                swift_release();
                if (__OFSUB__(v14 >> 1, v11))
                  goto LABEL_55;
                if (v26 != (v14 >> 1) - (_QWORD)v11)
                {
LABEL_56:
                  swift_unknownObjectRelease();
                  goto LABEL_38;
                }
                preferredElementSize = swift_dynamicCastClass();
                if (preferredElementSize == UIMenuElementSizeSmall)
                {
                  swift_unknownObjectRelease();
                  preferredElementSize = MEMORY[0x1E0DEE9D8];
                }
              }
              else
              {
LABEL_38:
                specialized _copyCollectionToContiguousArray<A>(_:)(v5, (uint64_t)v10, (uint64_t)v11, v14);
                preferredElementSize = v23;
              }
              swift_unknownObjectRelease();
              type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v27 = swift_allocObject();
              *(_OWORD *)(v27 + 16) = xmmword_187BFF9C0;
              type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
              v34.is_nil = MEMORY[0x18D75CC88](0xD000000000000029, 0x8000000187BE7560);
              v28._countAndFlagsBits = 0;
              v28._object = (void *)0xE000000000000000;
              v34.value.super.isa = 0;
              UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v29, v28, (Swift::String_optional)0, v34, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, children);
              *(_QWORD *)(v27 + 32) = v30;
              specialized Array._endMutation()();
              specialized Array.replaceSubrange<A>(_:with:)(v3, v3 + 4, v27);
              return v33;
            }
            __break(1u);
            goto LABEL_52;
          }
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v17 & 1) != 0)
            goto LABEL_20;
          v18 = v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
        }
        else
        {

          v18 = v3 + 1;
          if (__OFADD__(v3, 1))
            goto LABEL_47;
        }
        ++v3;
      }
      while (v18 != v2);
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

Class thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement])(uint64_t a1)
{
  void (*v1)(void);
  Class isa;

  v1 = *(void (**)(void))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v1();
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t closure #2 in UIKitMainMenuController.synthesizeSystemMenus(_:)(UIMenuElementSize a1)
{
  uint64_t v2;
  char v3;
  Swift::String v4;
  UIMenu *v5;
  uint64_t v6;
  Swift::OpaquePointer v8;
  UIImage_optional v9;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_187BFF9C0;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v3 = MEMORY[0x18D75CC88](0xD00000000000002CLL, 0x8000000187BE7590);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v9.value.super.isa = 0;
  v9.is_nil = v3;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v5, v4, (Swift::String_optional)0, v9, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, a1, v8);
  *(_QWORD *)(v2 + 32) = v6;
  specialized Array._endMutation()();
  return v2;
}

uint64_t UIKitMainMenuController.documentCommands()()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  int64_t v37;
  int isUniquelyReferenced_nonNull_native;
  int64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CommandGroupPlacement(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacement>, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = *(_QWORD *)(v6 + 72);
  v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_187BF9820;
  v47 = v13;
  v14 = v13 + v12;
  if (one-time initialization token for saveItem != -1)
    goto LABEL_54;
  while (1)
  {
    v15 = __swift_project_value_buffer(v5, (uint64_t)static CommandGroupPlacement.saveItem);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, v14, type metadata accessor for CommandGroupPlacement);
    v50 = v11;
    v51 = v14;
    v11 += v14;
    if (one-time initialization token for printItem != -1)
      swift_once();
    v52 = v5;
    v16 = __swift_project_value_buffer(v5, (uint64_t)static CommandGroupPlacement.printItem);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, v11, type metadata accessor for CommandGroupPlacement);
    v17 = v0 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_topLevelItemCoordinators;
    swift_beginAccess();
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(*(_QWORD *)v17 + 64);
    v44 = *(_QWORD *)v17 + 64;
    v20 = 1 << *(_BYTE *)(v18 + 32);
    v21 = -1;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    v0 = v21 & v19;
    v45 = (unint64_t)(v20 + 63) >> 6;
    v46 = v18;
    result = swift_bridgeObjectRetain();
    v23 = 0;
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v14 = v47;
LABEL_8:
    if (!v0)
      break;
    v25 = __clz(__rbit64(v0));
    v0 &= v0 - 1;
    v26 = v25 | (v23 << 6);
LABEL_26:
    if (*(_QWORD *)(v14 + 16) < 2uLL)
      goto LABEL_52;
    v48 = v0;
    v49 = v23;
    v30 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v26);
    swift_retain();
    swift_bridgeObjectRetain();
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v5 = v31;
      v33 = *(_QWORD *)(v30 + 40);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v51 + v32 * v50, (uint64_t)v9, type metadata accessor for CommandGroupPlacement);
      (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, &v9[*(int *)(v52 + 20)], v53);
      v34 = *(_QWORD *)(v33 + 16);
      swift_bridgeObjectRetain();
      if (v34)
      {
        v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
        v0 = MEMORY[0x1E0DEE9D8];
        if ((v36 & 1) != 0)
        {
          v0 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v35);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v0 = MEMORY[0x1E0DEE9D8];
      }
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v53);
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
      v11 = *(_QWORD *)(v0 + 16);
      v37 = v24[2];
      v14 = v37 + v11;
      if (__OFADD__(v37, v11))
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v14 <= v24[3] >> 1)
      {
        if (*(_QWORD *)(v0 + 16))
          goto LABEL_43;
      }
      else
      {
        if (v37 <= v14)
          v39 = v37 + v11;
        else
          v39 = v37;
        v24 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v39, 1, v24);
        if (*(_QWORD *)(v0 + 16))
        {
LABEL_43:
          v14 = (v24[3] >> 1) - v24[2];
          type metadata accessor for PlatformItemList.Item();
          if (v14 < v11)
            goto LABEL_50;
          swift_arrayInitWithCopy();
          if (v11)
          {
            v40 = v24[2];
            v41 = __OFADD__(v40, v11);
            v42 = v40 + v11;
            if (v41)
              goto LABEL_51;
            v24[2] = v42;
          }
          goto LABEL_29;
        }
      }
      if (v11)
        goto LABEL_49;
LABEL_29:
      swift_bridgeObjectRelease();
      v31 = 1;
      v32 = 1;
      if ((v5 & 1) != 0)
      {
        swift_release();
        v14 = v47;
        result = swift_bridgeObjectRelease();
        v0 = v48;
        v23 = v49;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
  v27 = v23 + 1;
  if (__OFADD__(v23, 1))
    goto LABEL_53;
  if (v27 >= v45)
  {
LABEL_47:
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    return (uint64_t)v24;
  }
  v28 = *(_QWORD *)(v44 + 8 * v27);
  ++v23;
  if (v28)
    goto LABEL_25;
  v23 = v27 + 1;
  if (v27 + 1 >= v45)
    goto LABEL_47;
  v28 = *(_QWORD *)(v44 + 8 * v23);
  if (v28)
    goto LABEL_25;
  v23 = v27 + 2;
  if (v27 + 2 >= v45)
    goto LABEL_47;
  v28 = *(_QWORD *)(v44 + 8 * v23);
  if (v28)
    goto LABEL_25;
  v23 = v27 + 3;
  if (v27 + 3 >= v45)
    goto LABEL_47;
  v28 = *(_QWORD *)(v44 + 8 * v23);
  if (v28)
  {
LABEL_25:
    v0 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v23 << 6);
    goto LABEL_26;
  }
  v29 = v27 + 4;
  if (v29 >= v45)
    goto LABEL_47;
  v28 = *(_QWORD *)(v44 + 8 * v29);
  if (v28)
  {
    v23 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v23 >= v45)
      goto LABEL_47;
    v28 = *(_QWORD *)(v44 + 8 * v23);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UIKitMainMenuController()
{
  return objc_opt_self();
}

uint64_t MainMenuItemCoordinator.init(_:environment:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  unint64_t v25[2];

  v3 = v2;
  v6 = type metadata accessor for MainMenuItem(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  v11 = a2[1];
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_BYTE *)(v3 + 24) = 0;
  v14 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 40) = v13;
  *(_QWORD *)(v3 + 48) = v12;
  *(_QWORD *)(v3 + 56) = v14;
  *(_QWORD *)(v3 + 64) = v12;
  *(_BYTE *)(v3 + 72) = 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, type metadata accessor for MainMenuItem);
  v25[0] = v10;
  v25[1] = v11;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v15 = specialized Dictionary.init(dictionaryLiteral:)(v12);
  v19 = 0;
  v20 = v12;
  v21 = v15;
  type metadata accessor for MainMenuItemHost(0);
  swift_allocObject();
  v16 = MainMenuItemHost.init(_:environment:focusedValues:focusStore:)((uint64_t)v9, v25, &v22, &v19);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for MainMenuItem);
  *(_QWORD *)(v3 + 16) = v16;
  *(uint64_t *)((char *)v16 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_delegate + 8) = (uint64_t)&protocol witness table for MainMenuItemCoordinator;
  swift_unknownObjectUnownedAssign();
  return v3;
}

id closure #1 in MainMenuItemCoordinator.mergeInstructions(from:)@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  id result;
  uint64_t v27;
  int v28;
  void *v29;
  id v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  char v41;
  id v42;
  _QWORD *v43;
  char v44;
  uint64_t *v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t *v56;
  char isUniquelyReferenced_nonNull_native;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  char v62;
  char v63;
  char v64;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t *v74;
  char v75;
  uint64_t v76;
  id v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  char v84;
  id v85;
  id v86;
  uint64_t *v87;
  char v88;
  _QWORD *v89;
  id v90;
  uint64_t v91;
  id v92;
  char v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;

  v96 = a4;
  v95 = a3;
  v97 = a5;
  v7 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v94 - v13;
  v15 = type metadata accessor for CommandOperation();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (unsigned __int8 *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(v21 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v16 + 56))(v14, 1, 1, v15, v18);
LABEL_7:
    result = (id)outlined destroy of TableRowID?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for CommandOperation?, (uint64_t)type metadata accessor for CommandOperation, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_22:
    v43 = v97;
    *v97 = 0;
    v43[1] = 0;
    v44 = -1;
LABEL_23:
    *((_BYTE *)v43 + 16) = v44;
    return result;
  }
  v22 = *a1;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22);
  if ((v24 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v21 + 56) + *(_QWORD *)(v16 + 72) * v23, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v25, 1, v15);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    goto LABEL_7;
  outlined init with take of CommandOperation((uint64_t)v14, (uint64_t)v20);
  v27 = (uint64_t)v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v20[*(int *)(v15 + 20)], (uint64_t)v10, type metadata accessor for CommandGroupPlacement);
  v28 = *v20;
  objc_opt_self();
  v29 = (void *)swift_dynamicCastObjCClass();
  if (v29)
    v30 = v22;
  if (one-time initialization token for placements != -1)
    swift_once();
  v31 = static MenuBuilderInstruction.placements;
  if (!*((_QWORD *)static MenuBuilderInstruction.placements + 2)
    || (v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v10[*(int *)(v7 + 20)]), (v33 & 1) == 0))
  {

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    result = (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for CommandGroupPlacement);
    goto LABEL_22;
  }
  v34 = *(void **)(v31[7] + 8 * v32);
  if (v28 == 2)
  {
    v45 = v96;
    if (v29)
    {
      v46 = v34;
      if ((objc_msgSend(v29, sel_options) & 1) != 0)
      {
        v47 = *v45;
        if (*(_QWORD *)(*v45 + 16))
        {
          v48 = v46;
          v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48);
          if ((v50 & 1) != 0)
          {
            v51 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v49);
            swift_bridgeObjectRetain();

            v99 = v51;
            v52 = objc_msgSend(v29, sel_children);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
            v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            specialized Array.append<A>(contentsOf:)(v53);
            v54 = v99;
            v55 = v48;
            v56 = v96;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v98 = *v56;
            *v56 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v55, isUniquelyReferenced_nonNull_native);
            *v56 = v98;

LABEL_55:
            swift_bridgeObjectRelease();
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
            result = (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, type metadata accessor for CommandGroupPlacement);
            v42 = 0;
            v29 = 0;
            v64 = -1;
            goto LABEL_52;
          }

          v45 = v96;
        }
        v90 = objc_msgSend(v29, sel_children);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        v91 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v92 = v46;
        v93 = swift_isUniquelyReferenced_nonNull_native();
        v99 = *v45;
        *v45 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v91, v92, v93);
        *v45 = v99;

        goto LABEL_55;
      }
    }
    else
    {
      v65 = v34;
    }
    v66 = *v45;
    if (*(_QWORD *)(*v45 + 16))
    {
      v67 = v34;
      v68 = specialized __RawDictionaryStorage.find<A>(_:)(v67);
      if ((v69 & 1) != 0)
      {
        v70 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v68);
        swift_bridgeObjectRetain();

        v99 = v70;
        v71 = v22;
        MEMORY[0x18D75CF58]();
        if (*(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v72 = v99;
        v73 = v67;
        v74 = v96;
        v75 = swift_isUniquelyReferenced_nonNull_native();
        v98 = *v74;
        *v74 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v72, v73, v75);
        *v74 = v98;

        goto LABEL_46;
      }

    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v80 + 32) = v22;
    v99 = v80;
    specialized Array._endMutation()();
    v81 = v99;
    v82 = v22;
    v83 = v34;
    v84 = swift_isUniquelyReferenced_nonNull_native();
    v99 = *v45;
    *v45 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v81, v83, v84);
    *v45 = v99;

LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  if (v28 == 1)
  {
    if (v29)
    {
      v58 = v34;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      result = (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for CommandGroupPlacement);
      v43 = v97;
      *v97 = v58;
      v43[1] = v29;
      v44 = 2;
      goto LABEL_23;
    }
    v76 = *(_QWORD *)(*v96 + 16);
    v77 = v34;
    v42 = v77;
    if (!v76
      || (v61 = v77,
          specialized __RawDictionaryStorage.find<A>(_:)(v61),
          v79 = v78,
          v61,
          (v79 & 1) == 0))
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for CommandGroupPlacement);
      result = v22;
      v64 = 0;
      v29 = v22;
      goto LABEL_52;
    }
    goto LABEL_42;
  }
  if (v28)
  {
LABEL_47:

    goto LABEL_48;
  }
  if (v29)
  {
    v35 = *v95;
    v36 = *(_QWORD *)(*v95 + 16);
    v37 = v34;
    v38 = v37;
    if (v36)
    {
      v39 = v37;
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
      if ((v41 & 1) != 0)
      {
        v42 = *(id *)(*(_QWORD *)(v35 + 56) + 8 * v40);

LABEL_51:
        v85 = objc_msgSend(v29, sel_identifier);
        v86 = v38;
        v87 = v95;
        v88 = swift_isUniquelyReferenced_nonNull_native();
        v99 = *v87;
        *v87 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v85, v86, v88);
        *v87 = v99;

        swift_bridgeObjectRelease();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        result = (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, type metadata accessor for CommandGroupPlacement);
        v64 = 3;
        goto LABEL_52;
      }

    }
    v42 = v38;
    goto LABEL_51;
  }
  v59 = *(_QWORD *)(*v96 + 16);
  v60 = v34;
  v42 = v60;
  if (v59)
  {
    v61 = v60;
    specialized __RawDictionaryStorage.find<A>(_:)(v61);
    v63 = v62;

    if ((v63 & 1) != 0)
    {
LABEL_42:

LABEL_48:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      result = (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, type metadata accessor for CommandGroupPlacement);
      v42 = 0;
      v29 = 0;
      v64 = -1;
      goto LABEL_52;
    }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for CommandGroupPlacement);
  result = v22;
  v64 = 1;
  v29 = v22;
LABEL_52:
  v89 = v97;
  *v97 = v42;
  v89[1] = v29;
  *((_BYTE *)v89 + 16) = v64;
  return result;
}

uint64_t MainMenuItemCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MainMenuItemCoordinator()
{
  return objc_opt_self();
}

id outlined copy of MenuBuilderInstruction(id result, void *a2, char a3)
{
  id v3;
  id v4;

  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      v3 = result;
      result = a2;
      break;
    case 4:
      v4 = result;
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for MenuBuilderInstruction(uint64_t a1)
{
  outlined consume of MenuBuilderInstruction(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void outlined consume of MenuBuilderInstruction(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:

      break;
    case 4:

      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MenuBuilderInstruction(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MenuBuilderInstruction(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MenuBuilderInstruction(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MenuBuilderInstruction(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of MenuBuilderInstruction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MenuBuilderInstruction(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of MenuBuilderInstruction(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MenuBuilderInstruction()
{
  return &type metadata for MenuBuilderInstruction;
}

void *one-time initialization function for placements()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  void *v88;
  id v89;
  void *result;
  uint64_t v91;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UUID, UIMenuIdentifier)>, (uint64_t (*)(uint64_t))type metadata accessor for (UUID, UIMenuIdentifier), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  type metadata accessor for (UUID, UIMenuIdentifier)();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187C53C80;
  v91 = v5;
  v6 = v5 + v4;
  v7 = *(int *)(v1 + 48);
  if (one-time initialization token for appInfo != -1)
    swift_once();
  v8 = type metadata accessor for CommandGroupPlacement(0);
  v9 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.appInfo) + *(int *)(v8 + 20);
  v10 = type metadata accessor for UUID();
  v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v6, v9, v10);
  v12 = (void *)*MEMORY[0x1E0DC5010];
  *(_QWORD *)(v6 + v7) = *MEMORY[0x1E0DC5010];
  v13 = *(int *)(v1 + 48);
  v14 = one-time initialization token for appSettings;
  v15 = v12;
  if (v14 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.appSettings);
  v11(v6 + v3, v16 + *(int *)(v8 + 20), v10);
  v17 = (void *)*MEMORY[0x1E0DC50C0];
  *(_QWORD *)(v6 + v3 + v13) = *MEMORY[0x1E0DC50C0];
  v18 = *(int *)(v1 + 48);
  v19 = one-time initialization token for systemServices;
  v20 = v17;
  if (v19 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.systemServices);
  v11(v6 + 2 * v3, v21 + *(int *)(v8 + 20), v10);
  v22 = (void *)*MEMORY[0x1E0DC50E8];
  *(_QWORD *)(v6 + 2 * v3 + v18) = *MEMORY[0x1E0DC50E8];
  v23 = *(int *)(v1 + 48);
  v24 = one-time initialization token for appVisibility;
  v25 = v22;
  if (v24 != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.appVisibility);
  v11(v6 + 3 * v3, v26 + *(int *)(v8 + 20), v10);
  v27 = (void *)*MEMORY[0x1E0DC5090];
  *(_QWORD *)(v6 + 3 * v3 + v23) = *MEMORY[0x1E0DC5090];
  v28 = *(int *)(v1 + 48);
  v29 = one-time initialization token for appTermination;
  v30 = v27;
  if (v29 != -1)
    swift_once();
  v31 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.appTermination);
  v11(v6 + 4 * v3, v31 + *(int *)(v8 + 20), v10);
  v32 = (void *)*MEMORY[0x1E0DC50D0];
  *(_QWORD *)(v6 + 4 * v3 + v28) = *MEMORY[0x1E0DC50D0];
  v33 = *(int *)(v1 + 48);
  v34 = one-time initialization token for newItem;
  v35 = v32;
  if (v34 != -1)
    swift_once();
  v36 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.newItem);
  v11(v6 + 5 * v3, v36 + *(int *)(v8 + 20), v10);
  v37 = (void *)*MEMORY[0x1E0DC50B0];
  *(_QWORD *)(v6 + 5 * v3 + v33) = *MEMORY[0x1E0DC50B0];
  v38 = *(int *)(v1 + 48);
  v39 = one-time initialization token for saveItem;
  v40 = v37;
  if (v39 != -1)
    swift_once();
  v41 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.saveItem);
  v11(v6 + 6 * v3, v41 + *(int *)(v8 + 20), v10);
  v42 = (void *)*MEMORY[0x1E0DC5038];
  *(_QWORD *)(v6 + 6 * v3 + v38) = *MEMORY[0x1E0DC5038];
  v43 = *(int *)(v1 + 48);
  v44 = one-time initialization token for importExport;
  v45 = v42;
  if (v44 != -1)
    swift_once();
  v46 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.importExport);
  v11(v6 - v3 + 8 * v3, v46 + *(int *)(v8 + 20), v10);
  *(_QWORD *)(v6 - v3 + 8 * v3 + v43) = MEMORY[0x18D75CC88](0xD00000000000002ALL, 0x8000000187BE7530);
  v47 = *(int *)(v1 + 48);
  if (one-time initialization token for printItem != -1)
    swift_once();
  v48 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.printItem);
  v11(v6 + 8 * v3, v48 + *(int *)(v8 + 20), v10);
  v49 = (void *)*MEMORY[0x1E0DC50C8];
  *(_QWORD *)(v6 + 8 * v3 + v47) = *MEMORY[0x1E0DC50C8];
  v50 = *(int *)(v1 + 48);
  v51 = one-time initialization token for undoRedo;
  v52 = v49;
  if (v51 != -1)
    swift_once();
  v53 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.undoRedo);
  v11(v6 + 9 * v3, v53 + *(int *)(v8 + 20), v10);
  v54 = (void *)*MEMORY[0x1E0DC5178];
  *(_QWORD *)(v6 + 9 * v3 + v50) = *MEMORY[0x1E0DC5178];
  v55 = *(int *)(v1 + 48);
  v56 = one-time initialization token for pasteboard;
  v57 = v54;
  if (v56 != -1)
    swift_once();
  v58 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.pasteboard);
  v11(v6 + 10 * v3, v58 + *(int *)(v8 + 20), v10);
  v59 = (void *)*MEMORY[0x1E0DC5120];
  *(_QWORD *)(v6 + 10 * v3 + v55) = *MEMORY[0x1E0DC5120];
  v60 = *(int *)(v1 + 48);
  v61 = one-time initialization token for textEditing;
  v62 = v59;
  if (v61 != -1)
    swift_once();
  v63 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.textEditing);
  v11(v6 + 11 * v3, v63 + *(int *)(v8 + 20), v10);
  *(_QWORD *)(v6 + 11 * v3 + v60) = MEMORY[0x18D75CC88](0xD000000000000029, 0x8000000187BE7560);
  v64 = *(int *)(v1 + 48);
  if (one-time initialization token for textFormatting != -1)
    swift_once();
  v65 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.textFormatting);
  v11(v6 + 12 * v3, v65 + *(int *)(v8 + 20), v10);
  *(_QWORD *)(v6 + 12 * v3 + v64) = MEMORY[0x18D75CC88](0xD00000000000002CLL, 0x8000000187BE7590);
  v66 = *(int *)(v1 + 48);
  if (one-time initialization token for toolbar != -1)
    swift_once();
  v67 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.toolbar);
  v11(v6 + 13 * v3, v67 + *(int *)(v8 + 20), v10);
  v68 = (void *)*MEMORY[0x1E0DC5168];
  *(_QWORD *)(v6 + 13 * v3 + v66) = *MEMORY[0x1E0DC5168];
  v69 = *(int *)(v1 + 48);
  v70 = one-time initialization token for sidebar;
  v71 = v68;
  if (v70 != -1)
    swift_once();
  v72 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.sidebar);
  v11(v6 + 14 * v3, v72 + *(int *)(v8 + 20), v10);
  v73 = (void *)*MEMORY[0x1E0DC5080];
  *(_QWORD *)(v6 + 14 * v3 + v69) = *MEMORY[0x1E0DC5080];
  v74 = *(int *)(v1 + 48);
  v75 = one-time initialization token for windowSize;
  v76 = v73;
  if (v75 != -1)
    swift_once();
  v77 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.windowSize);
  v11(v6 - v3 + 16 * v3, v77 + *(int *)(v8 + 20), v10);
  v78 = (void *)*MEMORY[0x1E0DC50A8];
  *(_QWORD *)(v6 - v3 + 16 * v3 + v74) = *MEMORY[0x1E0DC50A8];
  v79 = *(int *)(v1 + 48);
  v80 = one-time initialization token for windowArrangement;
  v81 = v78;
  if (v80 != -1)
    swift_once();
  v82 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.windowArrangement);
  v11(v6 + 16 * v3, v82 + *(int *)(v8 + 20), v10);
  v83 = (void *)*MEMORY[0x1E0DC5030];
  *(_QWORD *)(v6 + 16 * v3 + v79) = *MEMORY[0x1E0DC5030];
  v84 = *(int *)(v1 + 48);
  v85 = one-time initialization token for help;
  v86 = v83;
  if (v85 != -1)
    swift_once();
  v87 = __swift_project_value_buffer(v8, (uint64_t)static CommandGroupPlacement.help);
  v11(v6 + 17 * v3, v87 + *(int *)(v8 + 20), v10);
  v88 = (void *)*MEMORY[0x1E0DC5088];
  *(_QWORD *)(v6 + 17 * v3 + v84) = *MEMORY[0x1E0DC5088];
  v89 = v88;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v91);
  static MenuBuilderInstruction.placements = result;
  return result;
}

uint64_t closure #1 in UIMenuBuilder.perform(instruction:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v3 + 32) = a2;
  v7 = v3;
  specialized Array._endMutation()();
  v4 = a2;
  v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  return v7;
}

uint64_t closure #2 in UIMenuBuilder.perform(instruction:)(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x18D75CF58](v3);
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return a1;
}

unint64_t lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost;
  if (!lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost)
  {
    v1 = type metadata accessor for MainMenuItemHost(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MainMenuItemHost, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost);
  }
  return result;
}

void specialized UIKitMainMenuController.scenesDidChange(phaseChanged:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;

  if (static AppGraph.shared)
  {
    if (*(_DWORD *)(static AppGraph.shared + 232) == *MEMORY[0x1E0CFED28])
    {
      v1 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v1 = *(_QWORD *)AGGraphGetValue();
      swift_bridgeObjectRetain();
    }
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList) = v1;
    swift_retain();
    v3 = swift_bridgeObjectRetain();
    v4 = specialized static CommandsList.== infix(_:_:)(v3, v2);
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = objc_msgSend((id)objc_opt_self(), sel_mainSystem);
      objc_msgSend(v5, sel_setNeedsRebuild);
      swift_release();
      swift_bridgeObjectRelease();

    }
  }
}

char *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t i;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v20;
  __int128 v21;
  unsigned __int8 v22;
  id v23;

  if (a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = (char *)MEMORY[0x1E0DEE9D8];
    for (i = 4; ; ++i)
    {
      v10 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](i - 4, a1) : *(id *)(a1 + 8 * i);
      v11 = v10;
      v12 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v23 = v10;
      closure #1 in MainMenuItemCoordinator.mergeInstructions(from:)(&v23, a2, a3, a4, &v21);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      v13 = v22;
      if (v22 != 255)
      {
        v20 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v15 = *((_QWORD *)v7 + 2);
        v14 = *((_QWORD *)v7 + 3);
        if (v15 >= v14 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v7);
        *((_QWORD *)v7 + 2) = v15 + 1;
        v9 = &v7[24 * v15];
        *((_OWORD *)v9 + 2) = v20;
        v9[48] = v13;
      }
      if (v12 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)MEMORY[0x1E0DEE9D8];
}

uint64_t specialized UIKitMainMenuController.synthesizeSystemMenus(_:)(void *a1)
{
  Swift::String v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  Swift::OpaquePointer v11;
  uint64_t aBlock;
  uint64_t v13;
  Class (*v14)(uint64_t);
  void *v15;
  uint64_t (*v16)();
  uint64_t v17;
  UIImage_optional v18;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v18.is_nil = MEMORY[0x18D75CC88](0xD00000000000002ALL, 0x8000000187BE7530);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v18.value.super.isa = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(MEMORY[0x1E0DEE9D8], v2, (Swift::String_optional)0, v18, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, MEMORY[0x1E0DEE9D8], v11);
  v4 = v3;
  objc_msgSend(a1, sel_insertSiblingMenu_afterMenuForIdentifier_, v3, *MEMORY[0x1E0DC5038]);

  v5 = *MEMORY[0x1E0DC5058];
  v16 = specialized thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  v17 = 0;
  v6 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  v15 = &block_descriptor_27;
  v7 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a1, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v5, v7);
  _Block_release(v7);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v9 = *MEMORY[0x1E0DC5078];
  v16 = specialized thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  v17 = 0;
  aBlock = v6;
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  v15 = &block_descriptor_30_2;
  v10 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a1, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v9, v10);
  _Block_release(v10);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
LABEL_5:
    __break(1u);
  return result;
}

void specialized MainMenuItemCoordinator.mergeInstructions(from:)(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = MEMORY[0x1E0DEE9E0];
  v24 = MEMORY[0x1E0DEE9E0];
  v2 = a1[1];
  v26 = a1[2];
  v27 = v2;
  v3 = a1[3];
  v25 = a1[4];
  outlined retain of [Text.Modifier]((uint64_t)&v27);
  outlined retain of [Text.Modifier]((uint64_t)&v26);
  swift_bridgeObjectRetain();
  outlined retain of [Text.Modifier]((uint64_t)&v25);
  v4 = specialized Sequence.compactMap<A>(_:)(v3, (uint64_t)a1, &v24, &v23);
  outlined release of _IncrementalLayout_Placements((uint64_t)&v27);
  outlined release of _IncrementalLayout_Placements((uint64_t)&v26);
  outlined release of _IncrementalLayout_Placements((uint64_t)&v25);
  swift_bridgeObjectRelease();
  v5 = v23;
  v6 = v23 + 64;
  v7 = 1 << *(_BYTE *)(v23 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v23 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 8 * i;
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17);
    v19 = *(id *)(*(_QWORD *)(v5 + 48) + v17);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v21 = *((_QWORD *)v4 + 2);
    v20 = *((_QWORD *)v4 + 3);
    if (v21 >= v20 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v21 + 1;
    v22 = &v4[24 * v21];
    *((_QWORD *)v22 + 4) = v19;
    *((_QWORD *)v22 + 5) = v18;
    v22[48] = 4;

    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_25;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_25;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

uint64_t outlined init with take of CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (UUID, UIMenuIdentifier)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UUID, UIMenuIdentifier))
  {
    type metadata accessor for UUID();
    type metadata accessor for UIMenuIdentifier(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID, UIMenuIdentifier));
  }
}

uint64_t outlined assign with copy of MainMenuItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_187732C60()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_187732C84()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIMenuBuilder.perform(instruction:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in UIMenuBuilder.perform(instruction:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_187732C9C()
{
  return swift_deallocObject();
}

uint64_t sub_187732CAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIMenuBuilder.perform(instruction:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UIMenuBuilder.perform(instruction:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_187732CD8()
{
  return swift_deallocObject();
}

uint64_t TitleAndIconLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t TextLine;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  v5 = swift_getKeyPath();
  v6 = static VerticalAlignment._firstTextLineCenter.getter();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = TextLine;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = result;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

uint64_t closure #1 in TitleAndIconLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t closure #1 in closure #2 in TitleAndIconLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t TextLine;
  uint64_t result;

  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  result = swift_getKeyPath();
  *(_QWORD *)a3 = TextLine;
  *(_QWORD *)(a3 + 8) = a1;
  *(_BYTE *)(a3 + 16) = a2 & 1;
  *(_QWORD *)(a3 + 24) = result;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance TitleAndIconLabelStyle@<Q0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  closure #1 in TitleAndIconLabelStyle.makeBody(configuration:)((uint64_t)&v21);
  closure #1 in closure #2 in TitleAndIconLabelStyle.makeBody(configuration:)(0, 1, (uint64_t)&v13);
  closure #1 in closure #2 in TitleAndIconLabelStyle.makeBody(configuration:)(0, 1, (uint64_t)&v17);
  v2 = v14;
  v3 = v15;
  v4 = v16;
  v5 = v18;
  v6 = v19;
  v7 = v20;
  result = v13;
  v9 = v17;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  *(_QWORD *)a1 = v21;
  *(_BYTE *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 24) = v12;
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 104) = v7;
  return result;
}

uint64_t sub_187732F24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187732F4C()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in TitleAndIconLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TitleAndIconLabelStyle()
{
  return &type metadata for TitleAndIconLabelStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>();
    v2[0] = lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>));
    v2[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>;
  if (!lazy cache variable for type metadata for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>));
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>();
    lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>))
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>));
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>(255);
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E0CE4EC0], MEMORY[0x1E0CE4EB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>));
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
  }
}

void type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&type metadata for LabelIconPlatformItemModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>));
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>();
    v2[0] = lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>();
    v2[1] = v2[0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EffectiveFormStyleKey()
{
  return &type metadata for EffectiveFormStyleKey;
}

ValueMetadata *type metadata accessor for EffectiveFormStyle()
{
  return &type metadata for EffectiveFormStyle;
}

void UtilityWindow.init(_:id:content:)(uint64_t a1, uint64_t a2, char a3)
{
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void UtilityWindow.init(_:id:content:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void UtilityWindow.init<A>(_:id:content:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void UtilityWindow.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in UtilityWindow<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for UtilityWindow()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UtilityWindow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(unint64_t, unint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 48) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)v11 = v13;
    *(_QWORD *)(v11 + 8) = v14;
    *(_BYTE *)(v11 + 16) = v15;
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
    v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v16((v11 + v6 + 32) & ~v6, (v12 + v6 + 32) & ~v6, v4);
  }
  return a1;
}

uint64_t destroy for UtilityWindow(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  swift_bridgeObjectRelease();
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for UtilityWindow(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_BYTE *)(v7 + 16);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v8, v9, v10);
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = v9;
  *(_BYTE *)(v6 + 16) = v10;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32 + v6) & ~v13;
  v15 = (v13 + 32 + v7) & ~v13;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v16(v14, v15, v11);
  return a1;
}

_QWORD *assignWithCopy for UtilityWindow(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_BYTE *)(v7 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v7, v9, v10);
  v11 = *(_QWORD *)v6;
  v12 = *(_QWORD *)(v6 + 8);
  v13 = *(_BYTE *)(v6 + 16);
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = v9;
  *(_BYTE *)(v6 + 16) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 24))((*(unsigned __int8 *)(v14 + 80) + 32 + v6) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 32 + v7) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_OWORD *initializeWithTake for UtilityWindow(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *assignWithTake for UtilityWindow(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)v7;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_BYTE *)(v7 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(unsigned __int8 *)(v13 + 80) + 32 + v7) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(unsigned __int8 *)(v13 + 80) + 32 + v8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityWindow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 48) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187733AB4 + 4 * byte_187C53E50[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for UtilityWindow(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for UtilityWindow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UtilityWindow);
}

void static ButtonStyle<>.largeSidebarFooterAdd.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void LargeSidebarFooterAddButtonStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in LargeSidebarFooterAddButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LargeSidebarFooterAddButtonStyle()
{
  return &type metadata for LargeSidebarFooterAddButtonStyle;
}

uint64_t initializeWithCopy for HoverEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HoverEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for HoverEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEvent()
{
  return &type metadata for HoverEvent;
}

uint64_t protocol witness for EventType.init(_:) in conformance HoverEvent@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;

  type metadata accessor for EventType();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 1;
  }
  return result;
}

BOOL specialized static HoverEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;

  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v7)
      return v5 == *(double *)(a2 + 32) && v6 == *(double *)(a2 + 24);
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_retain();
LABEL_15:
    swift_release();
    return 0;
  }
  if (v4 != v7)
    return 0;
  return v5 == *(double *)(a2 + 32) && v6 == *(double *)(a2 + 24);
}

uint64_t _BackdropGroupEffect.enabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _BackdropGroupEffect.enabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_BackdropGroupEffect.enabled.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_BackdropGroupEffect __swiftcall _BackdropGroupEffect.init(enabled:)(Swift::Bool enabled)
{
  return (SwiftUI::_BackdropGroupEffect)enabled;
}

uint64_t _BackdropGroupEffect.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result & 1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  return result;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _BackdropGroupEffect(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
}

void protocol witness for ViewModifier.body(content:) in conformance _BackdropGroupEffect()
{
  specialized ViewModifier.bodyError()();
}

uint64_t View.backdropGroup(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _BackdropGroupEffect, a3);
}

_UNKNOWN **base witness table accessor for ViewModifier in _BackdropGroupEffect()
{
  return &protocol witness table for _BackdropGroupEffect;
}

uint64_t storeEnumTagSinglePayload for _BackdropGroupEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187734250 + 4 * byte_187C54005[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187734284 + 4 * byte_187C54000[v4]))();
}

uint64_t sub_187734284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18773428C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187734294);
  return result;
}

uint64_t sub_1877342A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877342A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1877342AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877342B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877342C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _BackdropGroupEffect;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void CirclePlaybackButtonStyle._storage.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 5;
}

void protocol witness for PlaybackButtonStyle._storage.getter in conformance CirclePlaybackButtonStyle(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 5;
}

ValueMetadata *type metadata accessor for CirclePlaybackButtonStyle()
{
  return &type metadata for CirclePlaybackButtonStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for CirclePlaybackButtonStyleBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  id v38;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v8);
    *v4 = v7;
    *((_BYTE *)v4 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)v4 + v9;
    v11 = (char *)(a2 + v9);
    type metadata accessor for ClosedRange<Date>();
    v13 = v12;
    v14 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for Date();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      v18(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    v19 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    v20 = v19[5];
    v21 = &v10[v20];
    v22 = &v11[v20];
    v23 = type metadata accessor for Date();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 2, v23))
    {
      v25 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 2, v23);
    }
    v26 = v19[6];
    v27 = &v10[v26];
    v28 = &v11[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v10[v19[7]] = v11[v19[7]];
    v10[v19[8]] = v11[v19[8]];
    *(_OWORD *)&v10[v19[9]] = *(_OWORD *)&v11[v19[9]];
    v30 = v19[10];
    v31 = &v10[v30];
    v32 = &v11[v30];
    v33 = *(_QWORD *)&v11[v30];
    v34 = *(_QWORD *)&v11[v30 + 8];
    v35 = v32[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
    *(_QWORD *)v31 = v33;
    *((_QWORD *)v31 + 1) = v34;
    v31[16] = v35;
    v36 = *((_QWORD *)v32 + 5);
    v37 = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 24) = v37;
    *((_QWORD *)v31 + 5) = v36;
    v38 = (id)v37;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  id v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  type metadata accessor for ClosedRange<Date>();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Date();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v9, v10, v15);
    v16(&v9[*(int *)(v12 + 36)], &v10[*(int *)(v12 + 36)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  v17 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v18 = v17[5];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = type metadata accessor for Date();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 2, v21))
  {
    v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 2, v21);
  }
  v24 = v17[6];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  v9[v17[7]] = v10[v17[7]];
  v9[v17[8]] = v10[v17[8]];
  *(_OWORD *)&v9[v17[9]] = *(_OWORD *)&v10[v17[9]];
  v28 = v17[10];
  v29 = &v9[v28];
  v30 = &v10[v28];
  v31 = *(_QWORD *)&v10[v28];
  v32 = *(_QWORD *)&v10[v28 + 8];
  v33 = v30[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v31, v32, v33);
  *(_QWORD *)v29 = v31;
  *((_QWORD *)v29 + 1) = v32;
  v29[16] = v33;
  v34 = *((_QWORD *)v30 + 5);
  v35 = *(_OWORD *)(v30 + 24);
  *(_OWORD *)(v29 + 24) = v35;
  *((_QWORD *)v29 + 5) = v34;
  v36 = (id)v35;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  type metadata accessor for ClosedRange<Date>();
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v11, 1, v13);
  v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v19 = type metadata accessor for Date();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v52 = type metadata accessor for Date();
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24);
  v53(v11, v12, v52);
  v53(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v52);
LABEL_7:
  v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v23 = v22[5];
  v24 = &v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 2, v26);
  v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  v32 = v22[6];
  v33 = &v11[v32];
  v34 = &v12[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  v35 = v22[9];
  v36 = &v11[v35];
  v37 = &v12[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  v38 = v22[10];
  v39 = &v11[v38];
  v40 = &v12[v38];
  v41 = *(_QWORD *)&v12[v38];
  v42 = *(_QWORD *)&v12[v38 + 8];
  v43 = v40[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v41, v42, v43);
  v44 = *(_QWORD *)v39;
  v45 = *((_QWORD *)v39 + 1);
  v46 = v39[16];
  *(_QWORD *)v39 = v41;
  *((_QWORD *)v39 + 1) = v42;
  v39[16] = v43;
  outlined consume of Environment<AppIntentExecutor?>.Content(v44, v45, v46);
  v47 = (void *)*((_QWORD *)v40 + 3);
  v48 = (void *)*((_QWORD *)v39 + 3);
  *((_QWORD *)v39 + 3) = v47;
  v49 = v47;

  v50 = *((_QWORD *)v40 + 5);
  *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
  *((_QWORD *)v39 + 5) = v50;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v5, v6, v11);
    v12(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v14 = v13[5];
  v15 = &v5[v14];
  v16 = &v6[v14];
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  *(_OWORD *)&v5[v13[6]] = *(_OWORD *)&v6[v13[6]];
  v5[v13[7]] = v6[v13[7]];
  v5[v13[8]] = v6[v13[8]];
  *(_OWORD *)&v5[v13[9]] = *(_OWORD *)&v6[v13[9]];
  v20 = v13[10];
  v21 = &v5[v20];
  v22 = &v6[v20];
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

uint64_t assignWithTake for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)(a1 + v10);
  v12 = (char *)a2 + v10;
  type metadata accessor for ClosedRange<Date>();
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v11, 1, v13);
  v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v19 = type metadata accessor for Date();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v45 = type metadata accessor for Date();
  v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 40);
  v46(v11, v12, v45);
  v46(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v45);
LABEL_7:
  v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v23 = v22[5];
  v24 = &v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 2, v26);
  v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  v32 = v22[6];
  v33 = &v11[v32];
  v34 = &v12[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  *(_OWORD *)&v11[v22[9]] = *(_OWORD *)&v12[v22[9]];
  v37 = v22[10];
  v38 = &v11[v37];
  v39 = &v12[v37];
  LOBYTE(v37) = v39[16];
  v40 = *(_QWORD *)v38;
  v41 = *((_QWORD *)v38 + 1);
  v42 = v38[16];
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v38[16] = v37;
  outlined consume of Environment<AppIntentExecutor?>.Content(v40, v41, v42);
  v43 = (void *)*((_QWORD *)v38 + 3);
  *((_QWORD *)v38 + 3) = *((_QWORD *)v39 + 3);

  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CirclePlaybackButtonStyleBody()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187734F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CirclePlaybackButtonStyleBody()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187734FC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for PlaybackButton.Configuration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CirclePlaybackButtonStyleBody()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CirclePlaybackButtonStyleBody;
  if (!type metadata singleton initialization cache for CirclePlaybackButtonStyleBody)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for CirclePlaybackButtonStyleBody()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CirclePlaybackButtonStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CirclePlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v2 = v1;
  v44 = a1;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v43 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PlaybackButton.Configuration(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (uint64_t *)((char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(0);
  v23 = v22;
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo(0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v43 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v21 = static Alignment.center.getter();
  v21[1] = v31;
  type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Modifie();
  closure #1 in CirclePlaybackButtonStyleBody.body.getter((uint64_t)v21 + *(int *)(v32 + 44));
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo);
  v33 = &v26[*(int *)(v23 + 36)];
  v34 = v46;
  *(_OWORD *)v33 = v45;
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v47;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo);
  v35 = *(_QWORD *)v2;
  LOBYTE(v21) = *(_BYTE *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v2, (char)v21);
  v36 = specialized Environment.wrappedValue.getter(v35, (char)v21);
  outlined consume of Environment<Bool>.Content(v35, (char)v21);
  if (v36 == 2)
    v37 = 4;
  else
    v37 = 5;
  v38 = type metadata accessor for CirclePlaybackButtonStyleBody();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(v38 + 20), (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v13[*(int *)(v10 + 20)], (uint64_t)v9, type metadata accessor for PlaybackButton.State);
  v39 = v43;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, v43, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v17, type metadata accessor for PlaybackButton.State);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
  v41 = &v17[*(int *)(v40 + 36)];
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = 0;
  v41[16] = v37;
  outlined init with take of TableCellFormula(v39, (uint64_t)&v17[*(int *)(v40 + 40)], (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  specialized AccessibilityPlaybackButtonModifier.body(content:)((uint64_t)v26, (uint64_t)v30);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo);
  return outlined init with take of TableCellFormula((uint64_t)v30, v44, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
}

uint64_t closure #1 in CirclePlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[16];
  _OWORD v60[16];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v33 - v8;
  CirclePlaybackButtonStyleBody.platter.getter(v59);
  CirclePlaybackButtonStyleBody.playbackStateImage.getter(&v61);
  v10 = v61;
  v11 = v62;
  v39 = BYTE8(v62);
  v12 = v63;
  v40 = v9;
  v41 = *(_QWORD *)&v64[0];
  v37 = *((_QWORD *)&v64[1] + 1);
  v38 = *((_QWORD *)&v63 + 1);
  v36 = v65;
  v13 = v66;
  v35 = v67;
  v34 = a1 + 256;
  v42 = *(_OWORD *)((char *)v64 + 8);
  CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter((uint64_t)v9);
  v55 = v59[12];
  v56 = v59[13];
  v57 = v59[14];
  v58 = v59[15];
  v51 = v59[8];
  v52 = v59[9];
  v53 = v59[10];
  v54 = v59[11];
  v47 = v59[4];
  v48 = v59[5];
  v49 = v59[6];
  v50 = v59[7];
  v43 = v59[0];
  v44 = v59[1];
  v45 = v59[2];
  v46 = v59[3];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  v14 = v56;
  v60[12] = v55;
  v60[13] = v56;
  v15 = v57;
  v16 = v58;
  v60[14] = v57;
  v60[15] = v58;
  v17 = v51;
  v18 = v52;
  v60[8] = v51;
  v60[9] = v52;
  v19 = v53;
  v20 = v54;
  v60[10] = v53;
  v60[11] = v54;
  v21 = v47;
  v22 = v48;
  v60[4] = v47;
  v60[5] = v48;
  v23 = v49;
  v24 = v50;
  v60[6] = v49;
  v60[7] = v50;
  v25 = v43;
  v26 = v44;
  v60[0] = v43;
  v60[1] = v44;
  v27 = v45;
  v28 = v46;
  v60[2] = v45;
  v60[3] = v46;
  *(_OWORD *)(a1 + 192) = v55;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 128) = v17;
  *(_OWORD *)(a1 + 144) = v18;
  *(_OWORD *)(a1 + 160) = v19;
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 64) = v21;
  *(_OWORD *)(a1 + 80) = v22;
  *(_OWORD *)(a1 + 96) = v23;
  *(_OWORD *)(a1 + 112) = v24;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v26;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v28;
  v33[1] = v10;
  *(_OWORD *)(a1 + 256) = v10;
  *(_QWORD *)(a1 + 272) = v11;
  *(_BYTE *)(a1 + 280) = v39;
  v29 = v37;
  v30 = v38;
  *(_QWORD *)(a1 + 288) = v12;
  *(_QWORD *)(a1 + 296) = v30;
  *(_QWORD *)(a1 + 304) = v41;
  *(_OWORD *)(v34 + 56) = v42;
  *(_QWORD *)(a1 + 328) = v29;
  *(_OWORD *)(a1 + 336) = v36;
  *(_OWORD *)(a1 + 352) = v13;
  *(_BYTE *)(a1 + 368) = v35;
  type metadata accessor for (TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Mod();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v5, a1 + *(int *)(v31 + 64), (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  outlined retain of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>((uint64_t)v60);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v72 = v55;
  v73 = v56;
  v74 = v57;
  v75 = v58;
  v68 = v51;
  v69 = v52;
  v70 = v53;
  v71 = v54;
  v64[1] = v47;
  v65 = v48;
  v66 = v49;
  v67 = v50;
  v61 = v43;
  v62 = v44;
  v63 = v45;
  v64[0] = v46;
  return outlined release of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>((uint64_t)&v61);
}

uint64_t CirclePlaybackButtonStyleBody.platter.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v48[4];
  int v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  _BYTE v54[192];
  _QWORD v55[24];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD v72[24];
  _BYTE v73[200];

  v3 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v3, v4);
  v51 = &v48[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v48[-v8];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v48[-v12];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v48[-v16];
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v48[-v20];
  static Color.white.getter();
  v22 = v1 + *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v21, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v21[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v21[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v21[v3[7]] = 0x3FA999999999999ALL;
  v23 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v52 = Color.opacity(_:)();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v17, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v17[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v17[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v17[v3[7]] = 0x3FA999999999999ALL;
  v53 = v17[*(int *)(v23 + 32)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  static UnitPoint.center.getter();
  v25 = v24;
  v27 = v26;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v13[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v13[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v13[v3[7]] = 0x3FA999999999999ALL;
  v29 = *(int *)(v23 + 32);
  v28 = static Animation.spring(response:dampingFraction:blendDuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  LODWORD(v29) = *(unsigned __int8 *)(v22 + v29);
  if ((*(unsigned __int8 *)(v22 + *(int *)(v23 + 28)) | 2) == 3)
  {
    static Color.white.getter();
    v49 = v29;
    v50 = v28;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v9[v3[5]] = 0x4000000000000000;
    *(_QWORD *)&v9[v3[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v9[v3[7]] = 0x3FA999999999999ALL;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v30 = Color.opacity(_:)();
    swift_release();
    v29 = (uint64_t)v51;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v51, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)(v29 + v3[5]) = 0x4000000000000000;
    *(_QWORD *)(v29 + v3[6]) = 0x3FB47AE147AE147BLL;
    *(_QWORD *)(v29 + v3[7]) = 0x3FA999999999999ALL;
    if (*(_BYTE *)(v29 + *(int *)(v23 + 32)))
      v31 = 0.9;
    else
      v31 = 1.0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    static UnitPoint.center.getter();
    v33 = v32;
    v35 = v34;
    v28 = v50;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22, (uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v9[v3[5]] = 0x4000000000000000;
    *(_QWORD *)&v9[v3[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v9[v3[7]] = 0x3FA999999999999ALL;
    static Animation.timingCurve(_:_:_:_:duration:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v36 = Animation.repeatForever(autoreverses:)();
    swift_retain_n();
    LOBYTE(v29) = v49;
    swift_release();
    *(_QWORD *)&v56 = v30;
    WORD4(v56) = 256;
    *(double *)&v57 = v31;
    *((double *)&v57 + 1) = v31;
    *(_QWORD *)&v58 = v33;
    *((_QWORD *)&v58 + 1) = v35;
    LOBYTE(v59) = 20;
    *((_QWORD *)&v59 + 1) = v30;
    LOWORD(v60) = 256;
    *((double *)&v60 + 1) = v31;
    *(double *)&v61 = v31;
    *((_QWORD *)&v61 + 1) = v33;
    *(_QWORD *)&v62 = v35;
    BYTE8(v62) = 20;
    *(_QWORD *)&v63 = 0x3FF0000000000000;
    *((_QWORD *)&v63 + 1) = v30;
    LOWORD(v64) = 256;
    *((double *)&v64 + 1) = v31;
    *(double *)&v65 = v31;
    *((_QWORD *)&v65 + 1) = v33;
    *(_QWORD *)&v66 = v35;
    BYTE8(v66) = 20;
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = v36;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v56);
    outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)&v56, (uint64_t)v73);
    v37 = (double *)&unk_187BFC000;
  }
  else
  {
    _s7SwiftUI23AppearanceAnimationViewVyAA15ModifiedContentVyAEyAA06_ShapeE0VyAA6CircleVAA5ColorVGAA12_ScaleEffectVGAA010_BlendModeL0VGAEyArA08_OpacityL0VGGSgWOi0_(&v56);
    outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)&v56, (uint64_t)v73);
    v37 = (double *)&unk_187BFC000;
  }
  if (v53)
    v38 = v37[113];
  else
    v38 = 1.0;
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v73, (uint64_t)v54);
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v54, (uint64_t)v55);
  *(_QWORD *)&v56 = v52;
  WORD4(v56) = 256;
  *(double *)&v57 = v38;
  *((double *)&v57 + 1) = v38;
  *(_QWORD *)&v58 = v25;
  *((_QWORD *)&v58 + 1) = v27;
  *(_QWORD *)&v59 = v28;
  BYTE8(v59) = v29;
  BYTE9(v59) = 20;
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v55, (uint64_t)&v60);
  v39 = v69;
  a1[12] = v68;
  a1[13] = v39;
  v40 = v71;
  a1[14] = v70;
  a1[15] = v40;
  v41 = v65;
  a1[8] = v64;
  a1[9] = v41;
  v42 = v67;
  a1[10] = v66;
  a1[11] = v42;
  v43 = v61;
  a1[4] = v60;
  a1[5] = v43;
  v44 = v63;
  a1[6] = v62;
  a1[7] = v44;
  v45 = v57;
  *a1 = v56;
  a1[1] = v45;
  v46 = v59;
  a1[2] = v58;
  a1[3] = v46;
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v54, (uint64_t)v72);
  swift_retain();
  swift_retain();
  outlined retain of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?);
  outlined retain of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?);
  swift_release();
  return swift_release();
}

uint64_t CirclePlaybackButtonStyleBody.playbackStateImage.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t result;
  char v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;

  v55 = a1;
  type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0(0);
  *(_QWORD *)&v59 = v2;
  *(_QWORD *)&v58 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>();
  *(_QWORD *)&v60 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v57 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v56 = (char *)&v52 - v11;
  v12 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v12, v13);
  v62 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v52 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v52 - v21;
  v63 = v1 + *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, (uint64_t)v22, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v22[v12[5]] = 0x4000000000000000;
  *(_QWORD *)&v22[v12[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v22[v12[7]] = 0x3FA999999999999ALL;
  v61 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  v23 = v22[v61[7]];
  v24 = (uint64_t *)&v22[v61[6]];
  if (v23 >= 2)
    v25 = 0x69662E6573756170;
  else
    v25 = 0x6C69662E79616C70;
  if (v23 >= 2)
    v26 = 0xEA00000000006C6CLL;
  else
    v26 = 0xE90000000000006CLL;
  if (v24[1])
  {
    v25 = *v24;
    v26 = swift_bridgeObjectRetain();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  *(_DWORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 36) = 1;
  *(_OWORD *)(v27 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v27 + 56) = v25;
  *(_QWORD *)(v27 + 64) = v26;
  *(_OWORD *)(v27 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v27 + 88) = 0;
  swift_bridgeObjectRetain();
  v54 = static Color.white.getter();
  KeyPath = swift_getKeyPath();
  static UnitPoint.center.getter();
  *(_QWORD *)&v71 = 0x3EE4F8B588E368F1;
  *((_QWORD *)&v71 + 1) = v28;
  v72 = v29;
  v30 = lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
  v31 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
  v32 = MEMORY[0x1E0CE2F20];
  v33 = MEMORY[0x1E0CE3EF8];
  Transition.combined<A>(with:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, (uint64_t)v18, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v18[v12[5]] = 0x4000000000000000;
  *(_QWORD *)&v18[v12[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v18[v12[7]] = 0x3FA999999999999ALL;
  v34 = 0.8;
  static Animation.spring(response:dampingFraction:blendDuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  *(_QWORD *)&v71 = v32;
  *((_QWORD *)&v71 + 1) = v33;
  v72 = v30;
  v73 = v31;
  swift_getOpaqueTypeConformance2();
  v35 = (uint64_t)v56;
  v36 = v59;
  Transition.animation(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v5, v36);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v35, v57, (uint64_t (*)(_QWORD))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0> and conformance FilteredTransition<A>, (uint64_t (*)(uint64_t))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>, MEMORY[0x1E0CE4248]);
  v37 = AnyTransition.init<A>(_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  v38 = static Font.footnote.getter();
  v39 = swift_getKeyPath();
  v64 = v27;
  v65 = KeyPath;
  v66 = v54;
  v67 = 20;
  v68 = v37;
  v69 = v39;
  v70 = v38;
  static Font.Weight.bold.getter();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v40 = v72;
  v41 = v73;
  v42 = v75;
  v43 = v77;
  v58 = v71;
  v59 = v74;
  v60 = v76;
  v44 = v63;
  v45 = v62;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, v62, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)(v45 + v12[5]) = 0x4000000000000000;
  *(_QWORD *)(v45 + v12[6]) = 0x3FB47AE147AE147BLL;
  *(_QWORD *)(v45 + v12[7]) = 0x3FA999999999999ALL;
  v46 = v61;
  if (!*(_BYTE *)(v45 + v61[8]))
    v34 = 1.0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  result = static UnitPoint.center.getter();
  v48 = *(_BYTE *)(v44 + v46[7]);
  v49 = v55;
  *v55 = v58;
  *((_QWORD *)v49 + 2) = v40;
  *((_BYTE *)v49 + 24) = v41;
  v49[2] = v59;
  *((_QWORD *)v49 + 6) = v42;
  *(_OWORD *)((char *)v49 + 56) = v60;
  *((_QWORD *)v49 + 9) = v43;
  *((double *)v49 + 10) = v34;
  *((double *)v49 + 11) = v34;
  *((_QWORD *)v49 + 12) = v50;
  *((_QWORD *)v49 + 13) = v51;
  *((_BYTE *)v49 + 112) = v48;
  return result;
}

uint64_t CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (**v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[328];
  _QWORD v101[43];
  _BYTE v102[352];

  v99 = a1;
  v2 = type metadata accessor for Date();
  v93 = *(_QWORD *)(v2 - 8);
  v94 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v89 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v81, v5);
  v82 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CirclePlaybackButtonStyleBody();
  v83 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v85 = v9;
  v86 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(0);
  v91 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v88 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v92 = (char *)&v78 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v95 = (uint64_t)&v78 - v18;
  v80 = type metadata accessor for ProgressViewSchedule(0);
  MEMORY[0x1E0C80A78](v80, v19);
  v84 = (uint64_t)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v87 = (uint64_t)&v78 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v90 = (uint64_t)&v78 - v26;
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  v97 = *(_QWORD *)(v27 - 8);
  v98 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v96 = (char *)&v78 - v29;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v35 = v34;
  v36 = *(_QWORD *)(v34 - 8);
  v37 = *(_QWORD *)(v36 + 64);
  MEMORY[0x1E0C80A78](v34, v38);
  v39 = (char *)&v78 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v78 - v42;
  v44 = v1 + *(int *)(v7 + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35) == 1)
  {
    v45 = (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?;
    v46 = (uint64_t)v33;
LABEL_5:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, v45);
    v50 = 1;
    v51 = v99;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v51, v50, 1, v98);
  }
  outlined init with take of TableCellFormula((uint64_t)v33, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v47 = *(_QWORD *)v1;
  v79 = v1;
  v48 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v47, v48);
  v49 = specialized Environment.wrappedValue.getter(v47, v48);
  outlined consume of Environment<Bool>.Content(v47, v48);
  if (v49 == 2)
  {
    v45 = (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>;
    v46 = (uint64_t)v43;
    goto LABEL_5;
  }
  v52 = v43;
  if (*(_BYTE *)(v44 + *(int *)(type metadata accessor for PlaybackButton.Configuration(0) + 28)) == 2)
  {
    v53 = (uint64_t)v43;
    v54 = (uint64_t)v43;
    v78 = v43;
    v55 = v90;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54, v90, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    *(_BYTE *)(v55 + *(int *)(v80 + 20)) = 0;
    v56 = v87;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v55, v87, type metadata accessor for ProgressViewSchedule);
    v57 = v86;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v86, (uint64_t (*)(_QWORD))type metadata accessor for CirclePlaybackButtonStyleBody);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v53, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v58 = (*(unsigned __int8 *)(v83 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
    v59 = (v85 + *(unsigned __int8 *)(v36 + 80) + v58) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    v60 = swift_allocObject();
    outlined init with take of TableCellFormula(v57, v60 + v58, (uint64_t (*)(_QWORD))type metadata accessor for CirclePlaybackButtonStyleBody);
    outlined init with take of TableCellFormula((uint64_t)v39, v60 + v59, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v61 = v84;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v56, v84, type metadata accessor for ProgressViewSchedule);
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = partial apply for closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter;
    *(_QWORD *)(v62 + 24) = v60;
    v63 = v61;
    v64 = v88;
    outlined init with take of TableCellFormula(v63, v88, type metadata accessor for ProgressViewSchedule);
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
    *(_QWORD *)(v65 + 24) = v62;
    v66 = (uint64_t)v92;
    v67 = (uint64_t (**)(uint64_t))(v64 + *(int *)(v91 + 44));
    *v67 = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
    v67[1] = (uint64_t (*)(uint64_t))v65;
    outlined init with take of TableCellFormula(v64, v66, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, type metadata accessor for ProgressViewSchedule);
    v68 = v95;
    outlined init with take of TableCellFormula(v66, v95, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
    v69 = (uint64_t)v96;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, (uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, type metadata accessor for ProgressViewSchedule);
    v70 = (uint64_t)v78;
  }
  else
  {
    v71 = v82;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, v82, type metadata accessor for PlaybackButton.Configuration);
    v72 = v81;
    *(_QWORD *)(v71 + *(int *)(v81 + 20)) = 0x4000000000000000;
    *(_QWORD *)(v71 + *(int *)(v72 + 24)) = 0x3FB47AE147AE147BLL;
    *(_QWORD *)(v71 + *(int *)(v72 + 28)) = 0x3FA999999999999ALL;
    v73 = v89;
    PlaybackButton.Specs.resolvedPauseDate.getter(v89);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v74 = static Alignment.center.getter();
    v76 = v75;
    closure #1 in CirclePlaybackButtonStyleBody.progressStroke(interval:referenceDate:)(v79, (uint64_t)v102);
    outlined init with take of TableCellFormula((uint64_t)v102, (uint64_t)v100, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
    v101[0] = v74;
    v101[1] = v76;
    outlined init with take of TableCellFormula((uint64_t)v100, (uint64_t)&v101[2], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
    memcpy(v102, v101, 0x151uLL);
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v73, v94);
    v69 = (uint64_t)v96;
    memcpy(v96, v102, 0x151uLL);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    v70 = (uint64_t)v52;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v70, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v51 = v99;
  outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(v69, v99);
  v50 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v51, v50, 1, v98);
}

void *closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[328];
  _QWORD __src[43];

  v4 = static Alignment.center.getter();
  v6 = v5;
  closure #1 in CirclePlaybackButtonStyleBody.progressStroke(interval:referenceDate:)(a1, (uint64_t)__src);
  outlined init with take of TableCellFormula((uint64_t)__src, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
  __src[0] = v4;
  __src[1] = v6;
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&__src[2], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
  return memcpy(a2, __src, 0x151uLL);
}

uint64_t closure #1 in CirclePlaybackButtonStyleBody.progressStroke(interval:referenceDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v52[12];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  _OWORD v87[21];
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  _OWORD v112[8];
  uint64_t v113;
  _BYTE v114[328];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[344];

  v64 = a2;
  v3 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v52[-v9];
  v11 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v11, v12);
  v63 = &v52[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v52[-v16];
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v52[-v20];
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v52[-v24];
  v26 = *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  v62 = a1;
  v27 = a1 + v26;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v25, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v25[v11[5]] = 0x4000000000000000;
  *(_QWORD *)&v25[v11[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v25[v11[7]] = 0x3FA999999999999ALL;
  ClosedRange<>.progress(at:countdown:)();
  v29 = v28;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v61 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27 + *(int *)(v61 + 20), (uint64_t)v10, type metadata accessor for PlaybackButton.State);
  v30 = type metadata accessor for Date();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 2, v30);
  v31 = specialized static PlaybackButton.State.== infix(_:_:)((uint64_t)v10, (uint64_t)v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for PlaybackButton.State);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for PlaybackButton.State);
  if ((v31 & 1) != 0)
  {
    _s7SwiftUI9TupleViewVyAA15ModifiedContentVyAEyAA011StrokeShapeD0VyAA6CircleV6_InsetVAA5ColorVAA05EmptyD0VGAA15_RotationEffectVGAA06_ScaleN0VG_AEyAEyAEyAEyAEyAGyAA08_TrimmedH0VyAKGAmOGARGAUGAA010_BlendModeN0VGAA18_AnimationModifierVyAA14PlaybackButtonV5PhaseOGGA5_ySbGGtGSgWOi0_((uint64_t)v114);
  }
  else
  {
    CirclePlaybackButtonStyleBody.trackStroke.getter((uint64_t)&v115);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v25, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v25[v11[5]] = 0x4000000000000000;
    *(_QWORD *)&v25[v11[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v25[v11[7]] = 0x3FA999999999999ALL;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    static Color.white.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v21, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v21[v11[5]] = 0x4000000000000000;
    *(_QWORD *)&v21[v11[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v21[v11[7]] = 0x3FA999999999999ALL;
    v32 = v61;
    v62 = v29;
    v33 = 1.0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v60 = Color.opacity(_:)();
    swift_release();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v25, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v25[v11[5]] = 0x4000000000000000;
    *(_QWORD *)&v25[v11[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v25[v11[7]] = 0x3FA999999999999ALL;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    v34 = v124;
    v58 = v126;
    v59 = v125;
    v35 = v127;
    v57 = v128;
    v36 = v129;
    v37 = static Alignment.center.getter();
    v55 = v38;
    v56 = v37;
    static UnitPoint.center.getter();
    v40 = v39;
    v42 = v41;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v17, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v17[v11[5]] = 0x4000000000000000;
    *(_QWORD *)&v17[v11[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v17[v11[7]] = 0x3FA999999999999ALL;
    if (v17[*(int *)(v32 + 32)])
      v33 = 0.9;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    static UnitPoint.center.getter();
    v44 = v43;
    v46 = v45;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v25, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v25[v11[5]] = 0x4000000000000000;
    *(_QWORD *)&v25[v11[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v25[v11[7]] = 0x3FA999999999999ALL;
    v54 = static Animation.spring(response:dampingFraction:blendDuration:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v53 = *(unsigned __int8 *)(v27 + *(int *)(v32 + 28));
    v47 = v63;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v63, type metadata accessor for PlaybackButton.Configuration);
    *(_QWORD *)&v47[v11[5]] = 0x4000000000000000;
    *(_QWORD *)&v47[v11[6]] = 0x3FB47AE147AE147BLL;
    *(_QWORD *)&v47[v11[7]] = 0x3FA999999999999ALL;
    v48 = *(int *)(v32 + 32);
    v49 = static Animation.spring(response:dampingFraction:blendDuration:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
    v71 = v121;
    v72 = v122;
    v67 = v117;
    v68 = v118;
    v69 = v119;
    v70 = v120;
    v65 = v115;
    v66 = v116;
    v74[6] = v121;
    v74[7] = v122;
    v74[2] = v117;
    v74[3] = v118;
    v74[4] = v119;
    v74[5] = v120;
    v74[0] = v115;
    v74[1] = v116;
    v87[6] = v121;
    v87[7] = v122;
    v87[2] = v117;
    v87[3] = v118;
    v50 = *(_BYTE *)(v27 + v48);
    v87[4] = v119;
    v87[5] = v120;
    v76 = xmmword_187C54140;
    *(_QWORD *)&v77 = v62;
    *((_QWORD *)&v77 + 1) = v34;
    *(_QWORD *)&v78 = __PAIR64__(v58, v59);
    *((_QWORD *)&v78 + 1) = v35;
    *(_QWORD *)&v79 = v57;
    *((_QWORD *)&v79 + 1) = v36;
    *(_QWORD *)&v80 = v60;
    WORD4(v80) = 256;
    *(_QWORD *)&v81 = v56;
    *((_QWORD *)&v81 + 1) = v55;
    *(_QWORD *)&v82 = 0xBFF921FB54442D18;
    *((_QWORD *)&v82 + 1) = v40;
    *(_QWORD *)&v83 = v42;
    *((double *)&v83 + 1) = v33;
    *(double *)&v84 = v33;
    *((_QWORD *)&v84 + 1) = v44;
    *(_QWORD *)&v85 = v46;
    BYTE8(v85) = 20;
    *(_QWORD *)&v86[0] = v54;
    BYTE8(v86[0]) = v53;
    *(_QWORD *)&v86[1] = v49;
    BYTE8(v86[1]) = v50;
    v87[0] = v115;
    v87[1] = v116;
    *(_OWORD *)((char *)&v87[16] + 8) = v84;
    *(_OWORD *)((char *)&v87[17] + 8) = v85;
    *(_OWORD *)((char *)&v87[18] + 8) = v86[0];
    *(_OWORD *)((char *)&v87[19] + 1) = *(_OWORD *)((char *)v86 + 9);
    *(_OWORD *)((char *)&v87[12] + 8) = v80;
    *(_OWORD *)((char *)&v87[13] + 8) = v81;
    *(_OWORD *)((char *)&v87[14] + 8) = v82;
    *(_OWORD *)((char *)&v87[15] + 8) = v83;
    *(_OWORD *)((char *)&v87[8] + 8) = xmmword_187C54140;
    *(_OWORD *)((char *)&v87[9] + 8) = v77;
    *(_OWORD *)((char *)&v87[10] + 8) = v78;
    v73 = v123;
    v75 = v123;
    *(_QWORD *)&v87[8] = v123;
    *(_OWORD *)((char *)&v87[11] + 8) = v79;
    v88 = xmmword_187C54140;
    v89 = v62;
    v90 = v34;
    v91 = v59;
    v92 = v58;
    v93 = v35;
    v94 = v57;
    v95 = v36;
    v96 = v60;
    v97 = 256;
    v98 = v56;
    v99 = v55;
    v100 = 0xBFF921FB54442D18;
    v101 = v40;
    v102 = v42;
    v103 = v33;
    v104 = v33;
    v105 = v44;
    v106 = v46;
    v107 = 20;
    v108 = v54;
    v109 = v53;
    v110 = v49;
    v111 = v50;
    outlined retain of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>((uint64_t)v74);
    outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>((uint64_t)&v76);
    outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>((uint64_t)&v88);
    v112[6] = v71;
    v112[7] = v72;
    v113 = v73;
    v112[2] = v67;
    v112[3] = v68;
    v112[5] = v70;
    v112[4] = v69;
    v112[1] = v66;
    v112[0] = v65;
    outlined release of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>((uint64_t)v112);
    memcpy(v114, v87, 0x141uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v114);
  }
  outlined init with take of TableCellFormula((uint64_t)v114, (uint64_t)v130, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
  return outlined init with take of TableCellFormula((uint64_t)v130, v64, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
}

uint64_t CirclePlaybackButtonStyleBody.trackStroke.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];

  v3 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v28 - v9;
  v11 = v1 + *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v10[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v10[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v10[v3[7]] = 0x3FA999999999999ALL;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  static Color.white.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v10[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v10[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v10[v3[7]] = 0x3FA999999999999ALL;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  v28[0] = Color.opacity(_:)();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, (uint64_t)v10, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v10[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v10[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v10[v3[7]] = 0x3FA999999999999ALL;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v12 = v28[1];
  v13 = v28[3];
  v14 = v28[4];
  v15 = v28[5];
  v16 = static Alignment.center.getter();
  v18 = v17;
  static UnitPoint.center.getter();
  v20 = v19;
  v22 = v21;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v11, (uint64_t)v6, type metadata accessor for PlaybackButton.Configuration);
  *(_QWORD *)&v6[v3[5]] = 0x4000000000000000;
  *(_QWORD *)&v6[v3[6]] = 0x3FB47AE147AE147BLL;
  *(_QWORD *)&v6[v3[7]] = 0x3FA999999999999ALL;
  if (v6[*(int *)(type metadata accessor for PlaybackButton.Configuration(0) + 32)])
    v23 = 0.9;
  else
    v23 = 1.0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlaybackButton.Specs);
  result = static UnitPoint.center.getter();
  *(_QWORD *)a1 = 0x3FF0000000000000;
  v25 = v28[2];
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v28[0];
  *(_WORD *)(a1 + 56) = 256;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = 0xBFF921FB54442D18;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v22;
  *(double *)(a1 + 104) = v23;
  *(double *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v27;
  return result;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>(255);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?));
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined retain of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 64);
  swift_retain();
  swift_retain();
  outlined copy of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v3);
  return a1;
}

uint64_t outlined copy of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 64);
  swift_release();
  swift_release();
  outlined consume of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v3);
  return a1;
}

uint64_t outlined consume of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187737BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, uint64_t);
  uint64_t v19;

  v1 = type metadata accessor for CirclePlaybackButtonStyleBody();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v19 = *(_QWORD *)(v2 + 64);
  type metadata accessor for ClosedRange<Date>();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + v3), *(_BYTE *)(v0 + v3 + 8));
  v8 = v0 + v3 + *(int *)(v1 + 20);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
  {
    v9 = type metadata accessor for Date();
    v10 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    v10(v8 + *(int *)(v5 + 36), v9);
  }
  v11 = type metadata accessor for PlaybackButton.Configuration(0);
  v12 = v8 + *(int *)(v11 + 20);
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 2, v13))
    (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v12, v13);
  v15 = (v3 + v19 + v7) & ~v7;
  swift_bridgeObjectRelease();
  v16 = v8 + *(int *)(v11 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));

  swift_release();
  v17 = *(void (**)(unint64_t, uint64_t))(v14 + 8);
  v17(v0 + v15, v13);
  v17(v0 + v15 + *(int *)(v5 + 36), v13);
  return swift_deallocObject();
}

void *partial apply for closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = type metadata accessor for CirclePlaybackButtonStyleBody();
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  type metadata accessor for ClosedRange<Date>();
  return closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter(v1 + v4, a1);
}

uint64_t sub_187737DE8()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in TimelineView<>.init(_:content:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(_QWORD *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

double _s7SwiftUI9TupleViewVyAA15ModifiedContentVyAEyAA011StrokeShapeD0VyAA6CircleV6_InsetVAA5ColorVAA05EmptyD0VGAA15_RotationEffectVGAA06_ScaleN0VG_AEyAEyAEyAEyAEyAGyAA08_TrimmedH0VyAKGAmOGARGAUGAA010_BlendModeN0VGAA18_AnimationModifierVyAA14PlaybackButtonV5PhaseOGGA5_ySbGGtGSgWOi0_(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double _s7SwiftUI23AppearanceAnimationViewVyAA15ModifiedContentVyAEyAA06_ShapeE0VyAA6CircleVAA5ColorVGAA12_ScaleEffectVGAA010_BlendModeL0VGAEyArA08_OpacityL0VGGSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *outlined retain of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t sub_187738058()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEf, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

void PrintPage.content.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrintPage.content.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrintPage.content.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PrintPage.init(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PrintPage._makePrintContent(content:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for PrintContent.PrintBody : PrintContent in PrintPage<A>()
{
  return &protocol witness table for Never;
}

uint64_t getEnumTagSinglePayload for PrintPage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18773819C + 4 * byte_187C54248[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PrintPage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PrintPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrintPage);
}

id UISecureWindow.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UISecureWindow();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UISecureWindow()
{
  return objc_opt_self();
}

uint64_t static Image.transferRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  _QWORD v22[2];

  v22[1] = a1;
  type metadata accessor for (DataRepresentation<Image>, DataRepresentation<Image>)();
  v2 = v1;
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UTType();
  MEMORY[0x1E0C80A78](v6, v7);
  type metadata accessor for DataRepresentation<Image>();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v22 - v16;
  static UTType.png.getter();
  lazy protocol witness table accessor for type Image and conformance Image();
  DataRepresentation.init(contentType:exporting:importing:)();
  static UTType.jpeg.getter();
  DataRepresentation.init(contentType:exporting:importing:)();
  v18 = &v5[*(int *)(v2 + 48)];
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v19(v5, v17, v9);
  v19(v18, v13, v9);
  TupleTransferRepresentation.init(_:)();
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, v9);
}

void type metadata accessor for (DataRepresentation<Image>, DataRepresentation<Image>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DataRepresentation<Image>, DataRepresentation<Image>))
  {
    type metadata accessor for DataRepresentation<Image>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DataRepresentation<Image>, DataRepresentation<Image>));
  }
}

void type metadata accessor for DataRepresentation<Image>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DataRepresentation<Image>)
  {
    lazy protocol witness table accessor for type Image and conformance Image();
    v0 = type metadata accessor for DataRepresentation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataRepresentation<Image>);
  }
}

unint64_t lazy protocol witness table accessor for type Image and conformance Image()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image and conformance Image;
  if (!lazy protocol witness table cache variable for type Image and conformance Image)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Image, MEMORY[0x1E0CE7298]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image);
  }
  return result;
}

uint64_t closure #1 in static Image.transferRepresentation.getter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for UTType();
  v1[2] = v3;
  v1[3] = *(_QWORD *)(v3 - 8);
  v4 = swift_task_alloc();
  v5 = *a1;
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch();
}

uint64_t closure #1 in static Image.transferRepresentation.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  CFMutableDataRef v3;
  uint64_t v4;
  uint64_t v5;
  CFMutableDataRef v6;

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  static UTType.png.getter();
  v3 = specialized static Image.getData(from:contentType:)(v2, v1);
  v5 = v4;
  v6 = v3;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 8))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16));
  swift_task_dealloc();
  return (*(uint64_t (**)(CFMutableDataRef, uint64_t))(v0 + 8))(v6, v5);
}

uint64_t closure #2 in static Image.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UTType();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in static Image.transferRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  static UTType.png.getter();
  v6 = static Image.makeImage(from:contentType:)(v5, v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  **(_QWORD **)(v0 + 16) = v6;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Image.makeImage(from:contentType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const __CFData *isa;
  CGDataProviderRef v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;

  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - v11;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = CGDataProviderCreateWithCFData(isa);

  if (v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a3, v4);
    static UTType.png.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    if ((v15 & 1) != 0)
    {
      v16(v12, v4);
      if (!CGImageCreateWithPNGDataProvider(v14, 0, 0, kCGRenderingIntentDefault))
      {
LABEL_9:
        v17 = type metadata accessor for TransferableError();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
        swift_allocError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v20, *MEMORY[0x1E0CA8740], v17);
        swift_willThrow();

        return v17;
      }
    }
    else
    {
      static UTType.jpeg.getter();
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16(v8, v4);
      v16(v12, v4);
      if ((v19 & 1) == 0 || !CGImageCreateWithJPEGDataProvider(v14, 0, 0, kCGRenderingIntentDefault))
        goto LABEL_9;
    }
    v17 = Image.init(decorative:scale:orientation:)();

  }
  else
  {
    v17 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v18, *MEMORY[0x1E0CA8740], v17);
    swift_willThrow();
  }
  return v17;
}

uint64_t closure #3 in static Image.transferRepresentation.getter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for UTType();
  v1[2] = v3;
  v1[3] = *(_QWORD *)(v3 - 8);
  v4 = swift_task_alloc();
  v5 = *a1;
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch();
}

uint64_t closure #3 in static Image.transferRepresentation.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  CFMutableDataRef v3;
  uint64_t v4;
  uint64_t v5;
  CFMutableDataRef v6;

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  static UTType.jpeg.getter();
  v3 = specialized static Image.getData(from:contentType:)(v2, v1);
  v5 = v4;
  v6 = v3;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 8))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16));
  swift_task_dealloc();
  return (*(uint64_t (**)(CFMutableDataRef, uint64_t))(v0 + 8))(v6, v5);
}

uint64_t closure #4 in static Image.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UTType();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #4 in static Image.transferRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  static UTType.jpeg.getter();
  v6 = static Image.makeImage(from:contentType:)(v5, v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  **(_QWORD **)(v0 + 16) = v6;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t associated type witness table accessor for Transferable.Representation : TransferRepresentation in Image()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187738F28()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>, MEMORY[0x1E0CA8840]);
}

void type metadata accessor for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>)
  {
    type metadata accessor for (DataRepresentation<Image>, DataRepresentation<Image>)();
    lazy protocol witness table accessor for type Image and conformance Image();
    v0 = type metadata accessor for TupleTransferRepresentation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>);
  }
}

uint64_t closure #1 in static Image.getData(from:contentType:)()
{
  GraphicsImage.size.getter();
  return GraphicsContext.draw(_:in:style:shading:)();
}

CFMutableDataRef specialized static Image.getData(from:contentType:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  id v12;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  CGImage *v23;
  CFMutableDataRef result;
  __CFData *v25;
  uint64_t v26;
  __CFString *v27;
  CGImageDestination *v28;
  __CFData *v29;
  __CFData *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  id v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  char v52;
  __int128 v53;
  __int128 v54;
  int v55;
  char v56;
  int v57;
  char v58;
  int v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[32];
  __int128 v65;
  __int128 v66;
  int v67;

  v37 = a2;
  type metadata accessor for Text.Style?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  EnvironmentValues.init()();
  static DisplayGamut.deviceDefault.getter();
  LOBYTE(v39) = (_BYTE)v46;
  EnvironmentValues.displayGamut.setter();
  LOBYTE(v39) = 0;
  default argument 2 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)();
  LOBYTE(v38[0]) = 1;
  RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)();
  v10 = v59;
  if ((v59 & 1) == 0)
  {
    v10 = v59 | 1;
    v59 |= 1u;
  }
  v39 = v61;
  v11 = type metadata accessor for Text.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  Image.resolve(in:)();
  v12 = v46;
  v13 = v47;
  *(_QWORD *)&v62 = v46;
  BYTE8(v62) = v47;
  v63 = v48;
  *(_QWORD *)v64 = v49;
  v64[8] = v50;
  *(_OWORD *)&v64[12] = v51;
  v64[28] = v52;
  v65 = v53;
  v66 = v54;
  v67 = v55;
  outlined copy of GraphicsImage.Contents?(v46, v47);
  outlined release of Image.Resolved((uint64_t)&v46);
  type metadata accessor for CGImageRef(0);
  v43 = v65;
  v44 = v66;
  v45 = v67;
  v39 = v62;
  v40 = v63;
  v41 = *(_OWORD *)v64;
  v42 = *(_OWORD *)&v64[16];
  GraphicsImage.size.getter();
  v15 = v14;
  v17 = v16;
  v43 = v65;
  v44 = v66;
  v45 = v67;
  v39 = v62;
  v40 = v63;
  v41 = *(_OWORD *)v64;
  v42 = *(_OWORD *)&v64[16];
  GraphicsImage.scale.getter();
  v19 = v18;
  v20 = v9[1];
  v38[0] = *v9;
  v38[1] = v20;
  LOBYTE(v39) = v56;
  DWORD1(v39) = v57;
  BYTE8(v39) = v58;
  HIDWORD(v39) = v10;
  LOBYTE(v40) = v60;
  MEMORY[0x1E0C80A78](v20, v21);
  *(&v36 - 2) = (uint64_t)&v62;
  swift_retain();
  swift_retain();
  v22 = (void *)MEMORY[0x18D75D708](v38, &v39, partial apply for closure #1 in static Image.getData(from:contentType:), &v36 - 4, v15, v17, v19);
  swift_release();
  swift_release();
  if (!v22)
  {
    v32 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v33, *MEMORY[0x1E0CA8738], v32);
    swift_willThrow();
    goto LABEL_11;
  }
  v23 = v22;
  result = CFDataCreateMutable(0, 0);
  if (result)
  {
    v25 = result;
    v26 = UTType.identifier.getter();
    v27 = (__CFString *)MEMORY[0x18D75CC88](v26);
    swift_bridgeObjectRelease();
    v28 = CGImageDestinationCreateWithData(v25, v27, 1uLL, 0);

    if (v28)
    {
      CGImageDestinationAddImage(v28, v23, 0);
      if (CGImageDestinationFinalize(v28))
      {
        v29 = v25;
        v37 = v12;
        v30 = v29;
        v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

        outlined consume of GraphicsImage.Contents?(v37, v13);
        outlined destroy of ImageResolutionContext((uint64_t)v9);
        swift_release();
        swift_release();
        return (CFMutableDataRef)v31;
      }

    }
    v34 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v35, *MEMORY[0x1E0CA8738], v34);
    swift_willThrow();

LABEL_11:
    outlined consume of GraphicsImage.Contents?(v12, v13);
    outlined destroy of ImageResolutionContext((uint64_t)v9);
    v31 = *((_QWORD *)&v61 + 1);
    swift_release();
    swift_release();
    return (CFMutableDataRef)v31;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static Image.getData(from:contentType:)()
{
  return closure #1 in static Image.getData(from:contentType:)();
}

uint64_t CodableAlignment.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AlignmentGuide.viewDebugValue.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  (*(void (**)(void))(a1 + 16))();
  AlignmentKey.id.getter();
  result = _typeName(_:qualified:)();
  a2[3] = MEMORY[0x1E0DEA968];
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for CustomViewDebugValueConvertible.viewDebugValue.getter in conformance HorizontalAlignment@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  AlignmentKey.id.getter();
  result = _typeName(_:qualified:)();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Alignment.codingProxy.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

__n128 protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance Alignment@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t CodableAlignment.base.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CodableAlignment.base.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*CodableAlignment.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for Hashable.hash(into:) in conformance CodableAlignment.VerticalCodingValue()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAlignment.VerticalCodingValue@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CodableAlignment.VerticalCodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableAlignment.VerticalCodingValue(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAlignment.VerticalCodingValue()
{
  lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAlignment.VerticalCodingValue()
{
  lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue();
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableAlignment.VerticalCodingValue()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAlignment.VerticalCodingValue()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAlignment.HorizontalCodingValue@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CodableAlignment.HorizontalCodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAlignment.HorizontalCodingValue()
{
  lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAlignment.HorizontalCodingValue()
{
  lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue();
  return RawRepresentable<>.encode(to:)();
}

uint64_t CodableAlignment.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];
  uint64_t v7;

  v3 = *v1;
  v4 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  if (static VerticalAlignment.top.getter() != v4
    && static VerticalAlignment.bottom.getter() != v4
    && static VerticalAlignment.firstTextBaseline.getter() != v4
    && static VerticalAlignment.lastTextBaseline.getter() != v4)
  {
    static VerticalAlignment._firstTextLineCenter.getter();
  }
  if (static HorizontalAlignment.leading.getter() != v3
    && static HorizontalAlignment.trailing.getter() != v3
    && static HorizontalAlignment.leadingText.getter() != v3)
  {
    if (one-time initialization token for formDetailLeading != -1)
      swift_once();
    if (static HorizontalAlignment.formDetailLeading != v3)
    {
      if (one-time initialization token for listRowSeparatorLeading != -1)
        swift_once();
      if (static HorizontalAlignment.listRowSeparatorLeading != v3
        && one-time initialization token for listRowSeparatorTrailing != -1)
      {
        swift_once();
      }
    }
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.VerticalCodingValue, &unk_1E1ABE990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.VerticalCodingValue, &unk_1E1ABE990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.VerticalCodingValue, &unk_1E1ABE990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.VerticalCodingValue, &unk_1E1ABE990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.HorizontalCodingValue, &unk_1E1ABEA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.HorizontalCodingValue, &unk_1E1ABEA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.HorizontalCodingValue, &unk_1E1ABEA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAlignment.HorizontalCodingValue, &unk_1E1ABEA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

uint64_t CodableAlignment.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;
  unsigned __int8 v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
    lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    v3 = v7;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
    lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __asm { BR              X9 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_187739C8C()
{
  uint64_t v0;

  static VerticalAlignment.top.getter();
  return ((uint64_t (*)(void))((char *)sub_187739CD4 + 4 * byte_187C542F6[v0]))();
}

void sub_187739CD4(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  v3 = static HorizontalAlignment.leading.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
  *v2 = v3;
  v2[1] = v1;
  JUMPOUT(0x187739C48);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAlignment(_QWORD *a1)
{
  return CodableAlignment.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAlignment(_QWORD *a1)
{
  return CodableAlignment.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for CodableAlignment()
{
  return &type metadata for CodableAlignment;
}

uint64_t storeEnumTagSinglePayload for CodableAlignment.HorizontalCodingValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_187739EB4 + 4 * byte_187C54302[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_187739EE8 + 4 * byte_187C542FD[v4]))();
}

uint64_t sub_187739EE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187739EF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187739EF8);
  return result;
}

uint64_t sub_187739F04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187739F0CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_187739F10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187739F18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAlignment.HorizontalCodingValue()
{
  return &unk_1E1ABEA20;
}

uint64_t storeEnumTagSinglePayload for CodableAlignment.VerticalCodingValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187739F80 + 4 * byte_187C5430C[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_187739FB4 + 4 * byte_187C54307[v4]))();
}

uint64_t sub_187739FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187739FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187739FC4);
  return result;
}

uint64_t sub_187739FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187739FD8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_187739FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187739FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAlignment.VerticalCodingValue()
{
  return &unk_1E1ABE990;
}

uint64_t specialized CodableAlignment.VerticalCodingValue.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 7)
    return 6;
  else
    return (0x5040302010006uLL >> (8 * a1));
}

uint64_t specialized CodableAlignment.HorizontalCodingValue.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 8)
    return 7;
  else
    return (0x605040302010007uLL >> (8 * a1));
}

void _OpenStageAction.callAsFunction<A>(value:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

Swift::Void __swiftcall _OpenStageAction.callAsFunction(id:)(Swift::String id)
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _OpenStageAction.callAsFunction<A>(id:value:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.openStage.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._openStage.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18773A1C0()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18773A1E4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for _OpenStageAction()
{
  return &type metadata for _OpenStageAction;
}

uint64_t ScrollView.init(_:content:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return ScrollView.init(_:showsIndicators:content:)(a1, 1, a2, a3, a4, a5, a6);
}

uint64_t ScrollView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ScrollView.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ScrollView.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ScrollView.axes.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t ScrollView.axes.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*ScrollView.axes.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v2 + *(int *)(a2 + 36));
  return ScrollView.axes.modify;
}

uint64_t ScrollView.axes.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 36)) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t ScrollView.showsIndicators.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 1);
}

uint64_t ScrollView.showsIndicators.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36) + 1) = result;
  return result;
}

uint64_t (*ScrollView.showsIndicators.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v2 + *(int *)(a2 + 36) + 1);
  return ScrollView.showsIndicators.modify;
}

uint64_t ScrollView.showsIndicators.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + *(int *)(*(_QWORD *)result + 36) + 1) = *(_BYTE *)(result + 16);
  return result;
}

void closure #1 in SystemScrollViewContainer.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E0CE54F8], MEMORY[0x1E0CE54E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired(255, a2, a3, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>.InertPaddingLayoutRequired, v6);
  type metadata accessor for StaticIf();
}

void sub_18773A440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t refreshed;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v17 = type metadata accessor for ModifiedContent();
  v18 = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v15 - 104) = v14;
  *(_QWORD *)(v15 - 96) = v18;
  v19 = MEMORY[0x1E0CE2E70];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v15 - 104);
  refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v15 - 120) = v20;
  *(_QWORD *)(v15 - 112) = refreshed;
  v22 = MEMORY[0x18D75FFDC](v19, v11, v15 - 120);
  v23 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v15 - 136) = v22;
  *(_QWORD *)(v15 - 128) = v23;
  v24 = MEMORY[0x18D75FFDC](v19, v12, v15 - 136);
  v25 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v15 - 152) = MEMORY[0x1E0CE2BC0];
  *(_QWORD *)(v15 - 144) = v25;
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v15 - 152);
  *(_QWORD *)(v15 - 168) = v24;
  *(_QWORD *)(v15 - 160) = v26;
  v27 = MEMORY[0x18D75FFDC](v19, v17, v15 - 168);
  v9[16] = v17;
  v9[17] = v27;
  MEMORY[0x18D75FF88](255, v9 + 16, MEMORY[0x1E0CE6EC0], 0);
  v28 = type metadata accessor for ModifiedContent();
  type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier(255, v13, v14, v29);
  v30 = type metadata accessor for ModifiedContent();
  v9[10] = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v9[12] = (char *)&a9 - v32;
  v9[16] = v17;
  v9[17] = v27;
  *(_QWORD *)(v15 - 184) = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v15 - 176) = &protocol witness table for ResetContentMarginModifier;
  *(_QWORD *)(v15 - 200) = MEMORY[0x18D75FFDC](v19, v28, v15 - 184);
  *(_QWORD *)(v15 - 192) = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  v33 = MEMORY[0x18D75FFDC](v19, v30, v15 - 200);
  v9[9] = v33;
  v35 = type metadata accessor for SystemScrollView(0, v30, v33, v34);
  v9[11] = *(_QWORD *)(v35 - 8);
  v9[6] = v35;
  MEMORY[0x1E0C80A78](v35, v36);
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
  v37 = type metadata accessor for ModifiedContent();
  v9[8] = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v38);
  v9[3] = v37;
  v39 = type metadata accessor for ModifiedContent();
  v9[7] = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v9[4] = (char *)&a9 - v41;
  v42 = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v15 - 216) = &protocol witness table for SystemScrollView<A>;
  *(_QWORD *)(v15 - 208) = v42;
  v43 = MEMORY[0x18D75FFDC](v19, v37, v15 - 216);
  v9[1] = v43;
  *(_QWORD *)(v15 - 232) = v43;
  *(_QWORD *)(v15 - 224) = &protocol witness table for ResolvedScrollBehaviorModifier;
  v44 = MEMORY[0x18D75FFDC](v19, v39, v15 - 232);
  v9[2] = v44;
  v9[16] = v39;
  v9[17] = v44;
  v45 = MEMORY[0x18D75FF88](0, v9 + 16, MEMORY[0x1E0CE6F48], 0);
  v9[5] = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v46);
  MEMORY[0x1E0C80A78](v47, v48);
  outlined init with copy of ScrollViewConfiguration(v9[14], (uint64_t)(v9 + 16));
  v50 = type metadata accessor for SystemScrollViewContainer(0, v9[13], v14, v49);
  SystemScrollViewContainer.adjustedContent.getter(v50, v9[12]);
}

void sub_18773A790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  SystemScrollView.init(configuration:content:)(v0 + 128, v1, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 72), v2);
  View.inferredToolbarScope()();
}

uint64_t sub_18773A7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t (*v13)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 8))(v1, v2);
  *(_BYTE *)(v0 + 128) = *v7;
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  MEMORY[0x18D75B4AC](v0 + 128, v9, &unk_1E1AFDBA8, *(_QWORD *)(v0 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 8))(v8, v9);
  v11 = *(_QWORD *)(v0 + 16);
  View.configuresScrollPhaseState()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 8))(v10, v3);
  *(_QWORD *)(v0 + 128) = v3;
  *(_QWORD *)(v0 + 136) = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static ViewBuilder.buildExpression<A>(_:)(v4, v6, OpaqueTypeConformance2);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 40) + 8);
  v13(v4, v6);
  static ViewBuilder.buildBlock<A>(_:)(v5, v6, *(_QWORD *)(v0 + 120));
  return v13(v5, v6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedScrollBehaviorModifier.UpdateEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return ResolvedScrollBehaviorModifier.UpdateEnvironment.value.getter(a1);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ResolvedScrollBehaviorModifier.MakeBehavior@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResolvedScrollBehaviorModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ResolvedScrollBehaviorModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.scrollViewStyleContext()()
{
  return View.styleContext<A>(_:)();
}

void View.enableResponsiveScrolling()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t ScrollView._alwaysBounceAxes.getter()
{
  return 0;
}

uint64_t ScrollView._alwaysBounceAxes.setter(uint64_t a1, uint64_t a2)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
}

uint64_t (*ScrollView._alwaysBounceAxes.modify(_BYTE *a1))(_QWORD)
{
  *a1 = 0;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ScrollView.scrollsContentToBeginningInRightToLeft.getter()
{
  return 1;
}

uint64_t (*ScrollView.scrollsContentToBeginningInRightToLeft.modify(_BYTE *a1))(_QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t specialized static ResolvedScrollBehaviorModifier._makeInputs(modifier:inputs:)()
{
  _GraphInputs.environment.getter();
  type metadata accessor for PropertyList.Tracker();
  PropertyList.Tracker.__allocating_init()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedScrollBehaviorModifier>, (uint64_t)&unk_1E1AFDBA8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior();
  Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t sub_18773ACA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for ScrollView(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  result = ScrollView.axes.getter(v5);
  *a4 = result;
  return result;
}

uint64_t sub_18773ACDC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for ScrollView(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return ScrollView.axes.setter(v4, v5);
}

uint64_t sub_18773AD18()
{
  return 16;
}

__n128 sub_18773AD24(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18773AD30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for ScrollView(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  result = ScrollView.showsIndicators.getter(v5);
  *a4 = result & 1;
  return result;
}

uint64_t sub_18773AD6C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for ScrollView(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return ScrollView.showsIndicators.setter(v4, v5);
}

uint64_t sub_18773ADA8()
{
  return 16;
}

__n128 sub_18773ADB4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_18773ADC0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_18773ADC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_6Tm(a1, a2, a3, a4, destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation);
}

uint64_t sub_18773ADD4()
{
  return 16;
}

__n128 sub_18773ADE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_18773ADEC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_18773ADF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_6Tm(a1, a2, a3, a4, destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation);
}

uint64_t keypath_set_6Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = type metadata accessor for ScrollView(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return a5(v6);
}

uint64_t sub_18773AE38()
{
  return 16;
}

__n128 sub_18773AE44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t outlined destroy of ScrollToTopGestureAction(uint64_t a1)
{
  destroy for UpdateViewCache();
  return a1;
}

uint64_t outlined destroy of RefreshAction(uint64_t a1)
{
  destroy for UpdateViewCache();
  return a1;
}

uint64_t assignWithTake for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(v8 + 40);
  v9 = (_OWORD *)(v7 + 48);
  v10 = *(_QWORD *)(v8 + 48);
  if (*(_QWORD *)(v7 + 48))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v7 + 48) = v10;
      *(_QWORD *)(v7 + 56) = v11;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of ScrollToTopGestureAction((uint64_t)v9);
  }
  *v9 = *(_OWORD *)(v8 + 48);
LABEL_6:
  swift_unknownObjectWeakTakeAssign();
  v13 = (_OWORD *)(v7 + 80);
  v12 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  v15 = (_OWORD *)(v8 + 80);
  v14 = *(_QWORD *)(v8 + 80);
  if (v12)
  {
    if (v14)
    {
      v16 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v7 + 80) = v14;
      *(_QWORD *)(v7 + 88) = v16;
      swift_release();
      *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(v7 + 80);
      v18 = *(_QWORD *)(v8 + 96);
      *v13 = *v15;
      *(_QWORD *)(v7 + 96) = v18;
    }
  }
  else
  {
    v17 = *v15;
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
    *v13 = v17;
  }
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

void sub_18773B014(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SystemScrollViewContainer(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18773B03C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E0CE54F8], MEMORY[0x1E0CE54E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E0CE54F8], MEMORY[0x1E0CE54E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t sub_18773B120(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t assignWithTake for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v5;
      *(_QWORD *)(a1 + 56) = v7;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  *v4 = *v6;
LABEL_6:
  swift_unknownObjectWeakTakeAssign();
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (!v9)
  {
LABEL_10:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_11;
  }
  if (!v8)
  {
    outlined destroy of RefreshAction(a1 + 80);
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v10;
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
LABEL_11:
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewConfiguration(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 72) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)(a1 + 64) & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      *(_QWORD *)(result + 72) = 1;
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t assignWithTake for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v9;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  *v6 = *v8;
LABEL_6:
  swift_unknownObjectWeakTakeAssign();
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (!v11)
  {
LABEL_10:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_11;
  }
  if (!v10)
  {
    outlined destroy of RefreshAction(a1 + 80);
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v12;
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
LABEL_11:
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 40))((*(unsigned __int8 *)(v14 + 80) + 120 + a1) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 120 + a2) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemScrollViewContainer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 120) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 120) & ~v7);
      if ((*(_QWORD *)(a1 + 72) & 0xF000000000000007) != 0)
        return (*(_DWORD *)(a1 + 64) & 0x7FFFFFFFu) + 1;
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18773B4DC + 4 * byte_187C546DF[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SystemScrollViewContainer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

unint64_t lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature;
  if (!lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InferredToolbarUserDefaultFeature, &type metadata for InferredToolbarUserDefaultFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>;
  if (!lazy protocol witness table cache variable for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>)
  {
    type metadata accessor for BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1748], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>);
  }
  return result;
}

void partial apply for closure #1 in SystemScrollViewContainer.body.getter()
{
  uint64_t *v0;

  closure #1 in SystemScrollViewContainer.body.getter(v0[4], v0[2], v0[3]);
}

void sub_18773B800(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<ScrollViewStyleContext>, MEMORY[0x1E0CE54F8], MEMORY[0x1E0CE54E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for SystemScrollViewContainer.InertPaddingLayoutRequired(255, v1, v2, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>.InertPaddingLayoutRequired, v4);
  type metadata accessor for StaticIf();
}

uint64_t sub_18773B920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[18];

  v8 = type metadata accessor for ModifiedContent();
  v30[0] = v2;
  v30[1] = lazy protocol witness table accessor for type StyleContextWriter<ScrollViewStyleContext> and conformance StyleContextWriter<A>();
  v9 = MEMORY[0x1E0CE2E70];
  v29[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v30);
  v29[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v28[0] = MEMORY[0x18D75FFDC](v9, v4, v29);
  v28[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v10 = MEMORY[0x18D75FFDC](v9, v5, v28);
  v27[0] = MEMORY[0x1E0CE2BC0];
  v27[1] = MEMORY[0x1E0CE1E88];
  v26[0] = v10;
  v26[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v27);
  v11 = MEMORY[0x18D75FFDC](v9, v8, v26);
  *(_QWORD *)(v6 - 112) = v8;
  *(_QWORD *)(v6 - 104) = v11;
  MEMORY[0x18D75FF88](255, v6 - 112, MEMORY[0x1E0CE6EC0], 0);
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for SystemScrollViewContainer.EnvironmentAxesModifier(255, v1, v2, v13);
  v14 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v6 - 112) = v8;
  *(_QWORD *)(v6 - 104) = v11;
  v25[0] = swift_getOpaqueTypeConformance2();
  v25[1] = &protocol witness table for ResetContentMarginModifier;
  v24[0] = MEMORY[0x18D75FFDC](v9, v12, v25);
  v24[1] = &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
  v15 = MEMORY[0x18D75FFDC](v9, v14, v24);
  type metadata accessor for SystemScrollView(255, v14, v15, v16);
  type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
  v17 = type metadata accessor for ModifiedContent();
  v18 = type metadata accessor for ModifiedContent();
  v23[0] = &protocol witness table for SystemScrollView<A>;
  v23[1] = lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v22[0] = MEMORY[0x18D75FFDC](v9, v17, v23);
  v22[1] = &protocol witness table for ResolvedScrollBehaviorModifier;
  v19 = MEMORY[0x18D75FFDC](v9, v18, v22);
  *(_QWORD *)(v6 - 112) = v18;
  *(_QWORD *)(v6 - 104) = v19;
  MEMORY[0x18D75FF88](255, v6 - 112, MEMORY[0x1E0CE6F48], 0);
  *(_QWORD *)(v6 - 112) = v18;
  *(_QWORD *)(v6 - 104) = v19;
  swift_getOpaqueTypeConformance2();
  v20 = type metadata accessor for _UnaryViewAdaptor();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v20);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResolvedScrollBehaviorModifier()
{
  return &protocol witness table for ResolvedScrollBehaviorModifier;
}

void *type metadata accessor for ResolvedScrollBehaviorModifier.UpdateEnvironment()
{
  return &unk_1E1AFDA90;
}

void *type metadata accessor for ResolvedScrollBehaviorModifier.MakeBehavior()
{
  return &unk_1E1AFDA10;
}

void *type metadata accessor for ResolvedScrollBehaviorModifier.TrackedEnvironment()
{
  return &unk_1E1AFDB18;
}

uint64_t InspectorModifier.init(inspectorContent:isPresented:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  result = type metadata accessor for InspectorModifier(0, a5, a6, v13);
  v15 = a7 + *(int *)(result + 36);
  *(_QWORD *)v15 = a2;
  *(_QWORD *)(v15 + 8) = a3;
  *(_BYTE *)(v15 + 16) = a4;
  return result;
}

uint64_t InspectorModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v29 = a2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorModifier<A>);
  v4 = type metadata accessor for _ViewModifier_Content();
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v4);
  v27 = type metadata accessor for UnaryInspectorRoot(255, v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for _VariadicView.Tree();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v26 - v14;
  v16 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  v18 = *v16;
  v17 = v16[1];
  LOBYTE(v16) = *((_BYTE *)v16 + 16);
  v35 = v18;
  v36 = v17;
  v37 = (char)v16;
  v20 = type metadata accessor for UnaryInspectorRoot(0, v4, v5, v19);
  (*(void (**)(char *))(*(_QWORD *)(v4 - 8) + 32))((char *)&v35 + *(int *)(v20 + 36));
  v33[2] = v35;
  v33[3] = v36;
  v34 = v37;
  v21 = *(_QWORD *)(a1 + 24);
  v30 = v7;
  v31 = v21;
  v32 = v2;
  swift_retain();
  swift_retain();
  v22 = v27;
  _VariadicView.Tree.init(_:content:)();
  v33[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnaryInspectorRoot<A>, v22);
  v33[1] = v21;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v8, v33);
  static ViewBuilder.buildExpression<A>(_:)(v11, v8, v23);
  v24 = *(void (**)(char *, uint64_t))(v28 + 8);
  v24(v11, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v8, v29);
  return ((uint64_t (*)(char *, uint64_t))v24)(v15, v8);
}

double closure #1 in UnaryInspectorRoot.inspectorColumnWidth(from:)@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t UnaryInspectorRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _BYTE v36[56];
  _OWORD v37[10];
  uint64_t v38;
  _QWORD v39[2];
  char v40;
  _BYTE v41[56];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[48];

  v4 = v3;
  v28 = a1;
  v33 = a3;
  v7 = type metadata accessor for ModifiedContent();
  v32 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - v9;
  type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>(255);
  v30 = v11;
  v12 = type metadata accessor for ModifiedContent();
  v31 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - v18;
  specialized UnaryInspectorRoot.inspectorColumnWidth(from:)(a1, (uint64_t)v52);
  static Alignment.center.getter();
  v29 = *(_QWORD *)(a2 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v20 = *(_QWORD *)(v4 + 8);
  v21 = *(_BYTE *)(v4 + 16);
  v39[0] = *(_QWORD *)v4;
  v39[1] = v20;
  v40 = v21;
  swift_retain();
  swift_retain();
  outlined init with take of InspectorColumnWidth?((uint64_t)v52, (uint64_t)v41);
  outlined init with copy of _VariadicView_Children(v28, (uint64_t)v36);
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v37, 0.0, 1, INFINITY, 0);
  outlined destroy of _UnaryViewAdaptor<_VariadicView_Children>((uint64_t)v36);
  v49 = v37[8];
  v50 = v37[9];
  v45 = v37[4];
  v46 = v37[5];
  v51 = v38;
  v48 = v37[7];
  v47 = v37[6];
  *(_OWORD *)&v41[40] = v37[0];
  v42 = v37[1];
  v44 = v37[3];
  v43 = v37[2];
  v35[0] = v29;
  v35[1] = MEMORY[0x1E0CE35E0];
  v22 = MEMORY[0x1E0CE2E70];
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v35);
  MEMORY[0x18D75B4AC](v39, v7, v30, v23);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v7);
  v34[0] = v23;
  v34[1] = &protocol witness table for PortableInspectorModifier<A>;
  v24 = MEMORY[0x18D75FFDC](v22, v12, v34);
  static ViewBuilder.buildExpression<A>(_:)(v15, v12, v24);
  v25 = *(void (**)(char *, uint64_t))(v31 + 8);
  v25(v15, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v19, v12, v33);
  return ((uint64_t (*)(char *, uint64_t))v25)(v19, v12);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance UnaryInspectorRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnaryInspectorRoot<A>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t static PortableInspectorModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t (*v11)(void);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  int v20;
  _DWORD v21[4];
  char v22;
  uint64_t v23;
  __int128 v24;

  v8 = *a1;
  type metadata accessor for PortableInspectorModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v20 = _GraphValue.value.getter();
  v9 = MEMORY[0x1E0DEAFA0];
  v10 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<Bool>>, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, v9, (uint64_t (*)(_QWORD, uint64_t))v10);
  v19 = _GraphValue.value.getter();
  v11 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<Bool>>(0, &lazy cache variable for type metadata for _GraphValue<InspectorColumnWidth?>, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))v11);
  v18 = _GraphValue.value.getter();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_getKeyPath();
  v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v21[0] = v20;
  v21[1] = v19;
  v21[2] = v18;
  v21[3] = v12;
  v22 = v8;
  v14 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, a5, a6, v13);
  v24 = 0uLL;
  v23 = 0;
  outlined retain of PortableInspectorModifier<A>.SplitWrapper((uint64_t)v21);
  v16 = type metadata accessor for PortableInspectorModifier.SplitWrapper(0, a5, a6, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>.SplitWrapper, v16);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>.SplitWrapperModifier, v14);
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  return outlined release of PortableInspectorModifier<A>.SplitWrapper((uint64_t)v21);
}

uint64_t closure #1 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for PortableInspectorModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 40);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #2 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for PortableInspectorModifier(0, a2, a3, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t closure #3 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v4 = a1 + 24;
  v10[2] = type metadata accessor for PortableInspectorModifier(0, a2, a3, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_14, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t PortableInspectorModifier.SplitWrapper.isPresented.getter()
{
  uint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v0 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t PortableInspectorModifier.SplitWrapper.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t Value;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  char v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(id *, char *, uint64_t);
  _QWORD *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[12];
  int v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _QWORD v71[2];
  _QWORD v72[2];
  _OWORD v73[2];
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  id v78;
  id v79;
  uint64_t v80;
  _QWORD v81[3];

  v5 = v4;
  v81[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, v8, v7, a4);
  v67 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v66 = &v62[-v11];
  v12 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for ModifiedContent();
  v65 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v64 = &v62[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v62[-v22];
  Value = AGGraphGetValue();
  v25 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v16, Value, v8);
  MEMORY[0x18D75B4AC](v25, v8, &unk_1E1AEB240, v7);
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v16, v8);
  v68 = v9;
  if (!AGGraphGetOutputValue())
  {
    v26 = lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier();
    v72[0] = v7;
    v72[1] = v26;
    v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v72);
    v29 = objc_allocWithZone((Class)type metadata accessor for InspectorHostingView(0, v17, v27, v28));
    specialized _UIHostingView.init(rootView:)();
  }
  v30 = v7;
  v31 = v17;
  v32 = v23;
  v33 = v5[1];
  v75 = *v5;
  v76 = v33;
  v77 = v5[2];
  v69 = PortableInspectorModifier.SplitWrapper.isPresented.getter();
  v35 = v34;
  v63 = v36;
  v37 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v38 = AGGraphGetValue();
  v39 = *(_BYTE *)(v38 + 32);
  v40 = *(_OWORD *)(v38 + 16);
  v73[0] = *(_OWORD *)v38;
  v73[1] = v40;
  v74 = v39;
  outlined init with take of UIKitNavigationController?((uint64_t)&v76 + 8, (uint64_t)&v79);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E0CE5528], (uint64_t (*)(_QWORD, uint64_t))v37);
  v41 = *(unsigned __int8 *)AGGraphGetValue();
  v70 = (v41 == 2) | v41 & 1;
  outlined init with take of UIKitNavigationController?((uint64_t)&v79, (uint64_t)&v80);
  v42 = v80;
  if (!v80)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  v43 = lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier();
  v71[0] = v30;
  v71[1] = v43;
  v44 = v31;
  v45 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v31, v71);
  type metadata accessor for UIHostingController(255, v31, v45, v46);
  v47 = type metadata accessor for Optional();
  v48 = *(void (**)(id *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
  v48(&v78, (char *)&v77 + 8, v47);
  v48((id *)v81, (char *)&v78, v47);
  v49 = (_QWORD *)v81[0];
  if (!v81[0])
    goto LABEL_7;
  v50 = v76;
  v51 = v65;
  v52 = (uint64_t)v64;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 16))(v64, v32, v44);
  v61 = v30;
  v53 = v66;
  v54 = PortableInspectorModifier.SplitWrapperModifier.init(isPresented:width:horizontalSizeClass:hostedPortableInspector:hostingControllerInspector:inspectorContent:inNavigationContext:)(v69, v35, v63 & 1, (uint64_t)v73, &v70, v42, v49, v52, (uint64_t)v66, v50, v61);
  v56 = MEMORY[0x1E0C80A78](v54, v55);
  v60 = a1;
  v61 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>.SplitWrapper, a1, v56);
  outlined retain of ButtonRepeatModifier.RepeatState?(&v79);
  outlined retain of ButtonRepeatModifier.RepeatState?(&v78);
  v57 = v68;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v53, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v62[-32], v68, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v58);
  (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v53, v57);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v51 + 8))(v32, v44);
}

uint64_t PortableInspectorModifier.SplitWrapperModifier.init(isPresented:width:horizontalSizeClass:hostedPortableInspector:hostingControllerInspector:inspectorContent:inNavigationContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v15 = *MEMORY[0x1E0DEEDD8] & *a7;
  v16 = *a5;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  outlined init with take of InspectorColumnWidth?(a4, a9 + 24);
  *(_BYTE *)(a9 + 57) = v16;
  *(_QWORD *)(a9 + 64) = a6;
  *(_QWORD *)(a9 + 72) = a7;
  v17 = *(_QWORD *)(v15 + 80);
  v19 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, *(_QWORD *)(v17 + 16), a11, v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a9 + *(int *)(v19 + 52), a8, v17);
  *(_BYTE *)(a9 + *(int *)(v19 + 56)) = a10;
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PortableInspectorModifier<A>.SplitWrapper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[8];
  char v72;

  v65 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v66 = a2;
  v53 = type metadata accessor for ModifiedContent();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v7);
  v51 = (char *)&v50 - v8;
  v54 = *(_QWORD *)(a2 + 24);
  v10 = type metadata accessor for ContainerViewControllerRepresentable(0, v5, v54, v9);
  v59 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v50 - v12;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v14 = type metadata accessor for ModifiedContent();
  v61 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v50 - v16;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  v18 = type metadata accessor for ModifiedContent();
  v63 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v55 = (char *)&v50 - v20;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v21 = type metadata accessor for ModifiedContent();
  v62 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v56 = (char *)&v50 - v23;
  v60 = type metadata accessor for ModifiedContent();
  v64 = *(_QWORD *)(v60 - 8);
  v25 = MEMORY[0x1E0C80A78](v60, v24);
  v57 = (char *)&v50 - v26;
  LOBYTE(v26) = *a1;
  v58 = v3;
  LOBYTE(v71[0]) = *(_BYTE *)(v3 + 57);
  v72 = v26;
  v28 = *(void **)(v3 + 64);
  v27 = *(_QWORD **)(v3 + 72);
  v29 = v51;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v52 + 16))(v51, v3 + *(int *)(v66 + 52), v53, v25);
  v30 = *MEMORY[0x1E0DEEDD8] & *v27;
  v31 = v72;
  *v13 = v71[0];
  v13[1] = v31;
  *((_QWORD *)v13 + 1) = v28;
  *((_QWORD *)v13 + 2) = v27;
  v32 = *(_QWORD *)(v30 + 80);
  v34 = type metadata accessor for ContainerViewControllerRepresentable(0, *(_QWORD *)(v32 + 16), v54, v33);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(&v13[*(int *)(v34 + 48)], v29, v32);
  v35 = v28;
  v36 = v27;
  UIHostingController.presentationOptions.getter();
  View.preference<A>(key:value:)();
  outlined destroy of PresentationOptionsPreference(v71);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v10);
  v71[0] = static Color.clear.getter();
  static Edge.Set.all.getter();
  v37 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  v70[0] = &protocol witness table for ContainerViewControllerRepresentable<A>;
  v70[1] = v37;
  v38 = MEMORY[0x1E0CE2E70];
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v70);
  v40 = v55;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v17, v14);
  v41 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  v69[0] = v39;
  v69[1] = v41;
  v42 = MEMORY[0x18D75FFDC](v38, v18, v69);
  v43 = v56;
  View.transformPreference<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v18);
  v44 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v68[0] = v42;
  v68[1] = v44;
  v45 = MEMORY[0x18D75FFDC](v38, v21, v68);
  v46 = v57;
  MEMORY[0x18D75B4AC](v45, v21, &type metadata for UpdateEnvironmentToAllowedBehaviors, v45);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v21);
  LOBYTE(v71[0]) = *(_BYTE *)(v58 + *(int *)(v66 + 56));
  v67[0] = v45;
  v67[1] = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  v47 = v60;
  v48 = MEMORY[0x18D75FFDC](v38, v60, v67);
  MEMORY[0x18D75B4AC](v71, v47, &type metadata for InspectorBarManagement, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v46, v47);
}

void UIHostingController.presentationOptions.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = (void *)specialized UIHostingController.host.getter();
  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v5 = v2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  ViewRendererHost.preferenceValue<A>(_:)();

}

uint64_t *closure #1 in PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)(uint64_t *result)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;

  v1 = result;
  if (result[6] == 2)
  {
    v2 = (void *)*MEMORY[0x1E0DC5380];
    result[6] = *MEMORY[0x1E0DC5380];
    result = v2;
  }
  if (!*(_QWORD *)(*v1 + 16))
  {
    v3 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of closure #1 in PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:));
    result = (uint64_t *)swift_bridgeObjectRelease();
    *v1 = v3;
  }
  return result;
}

void PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  void (*v10)(char *, uint64_t *, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  int v30;
  int v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];

  v32 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  v29[0] = v3[1];
  v29[1] = v8;
  v9 = *((unsigned __int8 *)v3 + 16);
  v30 = *((unsigned __int8 *)v3 + 57);
  v31 = v9;
  v10 = *(void (**)(char *, uint64_t *, uint64_t))(v5 + 16);
  swift_retain();
  swift_retain();
  v10(v7, v3, a2);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, v7, a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>.SplitWrapperModifier, a2);
  v15 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContainerViewControllerRepresentable(255, v13, v14, v16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v17 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  v18 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v19 = type metadata accessor for ModifiedContent();
  v20 = type metadata accessor for ModifiedContent();
  v21 = type metadata accessor for ModifiedContent();
  v22 = type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v15);
  v23 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  v38[0] = &protocol witness table for ContainerViewControllerRepresentable<A>;
  v38[1] = v23;
  v24 = MEMORY[0x1E0CE2E70];
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v38);
  v26 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  v37[0] = v25;
  v37[1] = v26;
  v27 = MEMORY[0x18D75FFDC](v24, v18, v37);
  v28 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v36[0] = v27;
  v36[1] = v28;
  v35[0] = MEMORY[0x18D75FFDC](v24, v19, v36);
  v35[1] = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  v34[0] = MEMORY[0x18D75FFDC](v24, v20, v35);
  v34[1] = &protocol witness table for InspectorBarManagement;
  v33[0] = MEMORY[0x18D75FFDC](v24, v21, v34);
  v33[1] = MEMORY[0x1E0CE65D8];
  MEMORY[0x18D75FFDC](v24, v22, v33);
  View.inspectorSheet<A>(isPresented:activeInspector:content:)();
}

uint64_t sub_18773D908()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  char v44;

  v34[1] = a1;
  v37 = a5;
  type metadata accessor for ContainerViewControllerRepresentable(255, a2, a3, a4);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  v34[0] = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v35 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v34 - v12;
  v14 = type metadata accessor for ModifiedContent();
  v36 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v34 - v20;
  v44 = 0;
  v23 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, a2, a3, v22);
  PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)(&v44, v23, (uint64_t)v13);
  static Edge.Set.all.getter();
  v24 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  v43[0] = &protocol witness table for ContainerViewControllerRepresentable<A>;
  v43[1] = v24;
  v25 = MEMORY[0x1E0CE2E70];
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v43);
  v27 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  v42[0] = v26;
  v42[1] = v27;
  v28 = MEMORY[0x18D75FFDC](v25, v34[0], v42);
  v29 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v41[0] = v28;
  v41[1] = v29;
  v40[0] = MEMORY[0x18D75FFDC](v25, v8, v41);
  v40[1] = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  v39[0] = MEMORY[0x18D75FFDC](v25, v9, v40);
  v39[1] = &protocol witness table for InspectorBarManagement;
  v30 = MEMORY[0x18D75FFDC](v25, v10, v39);
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
  v38[0] = v30;
  v38[1] = MEMORY[0x1E0CE65D8];
  v31 = MEMORY[0x18D75FFDC](v25, v14, v38);
  static ViewBuilder.buildExpression<A>(_:)(v17, v14, v31);
  v32 = *(void (**)(char *, uint64_t))(v36 + 8);
  v32(v17, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v14, v37);
  return ((uint64_t (*)(char *, uint64_t))v32)(v21, v14);
}

void PortableInspectorModifier.SplitWrapperModifier.body(content:)(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[3];

  v26 = a3;
  type metadata accessor for ContainerViewControllerRepresentable(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v24 = a1;
  v25 = (char *)v22 - v11;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>.SplitWrapperModifier, a1, v10);
  type metadata accessor for _ViewModifier_Content();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  v23 = v13;
  v14 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  v36[0] = &protocol witness table for ContainerViewControllerRepresentable<A>;
  v36[1] = v14;
  v15 = MEMORY[0x1E0CE2E70];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v36);
  v17 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  v35[0] = v16;
  v35[1] = v17;
  v18 = MEMORY[0x18D75FFDC](v15, v5, v35);
  v19 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v34[0] = v18;
  v34[1] = v19;
  v33[0] = MEMORY[0x18D75FFDC](v15, v6, v34);
  v33[1] = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  v32[0] = MEMORY[0x18D75FFDC](v15, v7, v33);
  v32[1] = &protocol witness table for InspectorBarManagement;
  v22[5] = v8;
  v31[0] = MEMORY[0x18D75FFDC](v15, v8, v32);
  v31[1] = MEMORY[0x1E0CE65D8];
  v22[2] = v31[0];
  v20 = MEMORY[0x18D75FFDC](v15, v12, v31);
  v21 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>();
  v27 = v12;
  v28 = v23;
  v29 = v20;
  v30 = v21;
  type metadata accessor for SheetPresentationModifier();
}

void sub_18773DF18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for ModifiedContent();
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v4);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a1);
  *(_QWORD *)(v6 - 200) = v9;
  *(_QWORD *)(v6 - 192) = v10;
  v1[6] = v8;
  v11 = MEMORY[0x18D75FFDC](v5, v8, v6 - 200);
  v1[4] = v11;
  v1[11] = v8;
  v1[12] = v2;
  v1[13] = v11;
  v1[14] = v3;
  type metadata accessor for InspectorSplitView();
}

void sub_18773DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  *(_QWORD *)(v9 + 56) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v9 + 24) = (char *)&a9 - v13;
  v14 = *v10;
  v15 = v10[1];
  v16 = *((_BYTE *)v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)(v10 + 3);
  v17 = v10[5];
  v18 = v10[6];
  v19 = *((_BYTE *)v10 + 56);
  swift_retain();
  v20 = swift_retain();
  *(_QWORD *)(v9 + 360) = v14;
  *(_QWORD *)(v9 + 368) = v15;
  *(_BYTE *)(v9 + 376) = v16;
  *(_BYTE *)(v9 + 377) = 1;
  *(_OWORD *)(v9 + 384) = *(_OWORD *)v9;
  *(_QWORD *)(v9 + 400) = v17;
  *(_QWORD *)(v9 + 408) = v18;
  *(_BYTE *)(v9 + 416) = v19;
  PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)(v20, *(_QWORD *)(v9 + 64), v9 + 296);
}

void sub_18773E034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_BYTE *)(v0 + 312);
  v7 = *(_BYTE *)(v0 + 352);
  v8 = *(_BYTE *)(v0 + 353);
  v9 = *(_BYTE *)(v0 + 354);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 240) = v5;
  *(_BYTE *)(v0 + 248) = v6;
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 336);
  *(_BYTE *)(v0 + 288) = v7;
  *(_BYTE *)(v0 + 289) = v8;
  *(_BYTE *)(v0 + 290) = v9;
  *(_BYTE *)(v0 + 88) = v3;
  PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)((_BYTE *)(v0 + 88), v4, *(_QWORD *)(v0 + 72));
  *(_BYTE *)(v0 + 231) = *(_BYTE *)(v1 + 57);
  UIHostingController.hasToolbarItems.getter();
  UIHostingController.presentationOptions.getter();
  InspectorSplitView.init(inspectorState:mainContent:inspectorContent:horizontalSizeClass:inspectorHasToolbarItems:presentationOptions:)(v0 + 360, v2);
}

uint64_t sub_18773E0DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorSplitView<A, B>, v2);
  v4 = v0[3];
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0[7] + 8);
  v5(v1, v2);
  static ViewBuilder.buildBlock<A>(_:)(v4, v2, v0[10]);
  return v5(v4, v2);
}

BOOL UIHostingController.hasToolbarItems.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = (void *)specialized UIHostingController.host.getter();
  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v5 = v2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  ViewRendererHost.preferenceValue<A>(_:)();

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRelease();
  return v6 != 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortableInspectorModifier<A>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PortableInspectorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InspectorBarManagement(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InspectorBarManagement(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance InspectorBarManagement()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance InspectorBarManagement()
{
  lazy protocol witness table accessor for type InspectorBarManagement and conformance InspectorBarManagement();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t static NavigationBarDefaults._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, _QWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  _BYTE v27[32];
  _BYTE v28[32];
  int v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;

  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 16);
  v31 = *(_OWORD *)(a1 + 32);
  v32 = v4;
  v6 = *(_OWORD *)(a1 + 48);
  v33 = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v7;
  *(_OWORD *)&v27[16] = v31;
  *(_OWORD *)v28 = v6;
  *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 64);
  v34 = *(_DWORD *)(a1 + 80);
  v29 = *(_DWORD *)(a1 + 80);
  v26 = v30[0];
  *(_OWORD *)v27 = v5;
  v8 = MEMORY[0x1E0CE4070];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>();
  outlined retain of _ViewInputs((uint64_t)v30);
  PreferenceKeys.add(_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v8);
  lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  v18 = HIDWORD(v30[0]);
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v9 = *(_QWORD *)v28;
  v16 = v26;
  v17 = DWORD2(v26);
  v19 = *(_QWORD *)v27;
  v20 = *(_OWORD *)&v27[8];
  v21 = *(_QWORD *)&v27[24];
  v22 = *(_QWORD *)v28;
  v13 = *(_DWORD *)&v28[8];
  v23 = *(_OWORD *)&v28[8];
  v24 = *(_QWORD *)&v28[24];
  v25 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a2(&v14, v10, &v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v16 = v14;
  v17 = v15;
  PreferencesOutputs.subscript.getter();
  v16 = v9;
  v17 = v13;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  v16 = v9;
  v17 = v13;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *a3 = v14;
  a3[1] = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t implicit closure #1 in static NavigationBarDefaults._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t implicit closure #2 in static NavigationBarDefaults._makeView(modifier:inputs:body:)()
{
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility();
  return Attribute.init<A>(body:value:flags:update:)();
}

__int128 *closure #1 in NavigationBarDefaults.DefaultTitle.value.getter(__int128 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *((_QWORD *)result + 3);
  if (v1 == 1)
  {
    v2 = 0;
    v1 = 0;
    v3 = 0;
    v4 = 0uLL;
    v5 = 5;
    v6 = 1;
    v7 = 3;
  }
  else
  {
    if (*((_BYTE *)result + 40) != 5)
      return result;
    v7 = *((_BYTE *)result + 56);
    v3 = *((_QWORD *)result + 6);
    v5 = *((unsigned __int8 *)result + 40);
    v6 = *((_QWORD *)result + 4);
    v2 = *((_QWORD *)result + 2);
    v4 = *result;
  }
  *result = v4;
  *((_QWORD *)result + 2) = v2;
  *((_QWORD *)result + 3) = v1;
  *((_QWORD *)result + 4) = v6;
  *((_QWORD *)result + 5) = v5;
  *((_QWORD *)result + 6) = v3;
  *((_BYTE *)result + 56) = v7;
  *((_BYTE *)result + 40) = 3;
  return result;
}

void protocol witness for Rule.value.getter in conformance NavigationBarDefaults.DefaultTitle(_QWORD *a1@<X8>)
{
  *a1 = specialized thunk for @escaping @callee_guaranteed (@inout NavigationTitleStorage?) -> ();
  a1[1] = 0;
}

uint64_t closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter(uint64_t result, int a2, char a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 v52;

  if ((a3 & 1) != 0)
  {
    v4 = result;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E0CE5528], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = *(unsigned __int8 *)AGGraphGetValue();
    if (v5 != 2 && (v5 & 1) == 0)
    {
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v20 = *(_QWORD *)v4;
      if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
        return outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v43);
      if ((v22 & 1) == 0)
        return outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      v23 = (unsigned __int8 *)(*(_QWORD *)(v20 + 56) + 80 * v21);
      v24 = *v23;
      v25 = *((_QWORD *)v23 + 1);
      v26 = *((_QWORD *)v23 + 2);
      v38 = v23[24];
      v36 = *((_QWORD *)v23 + 4);
      v27 = v23[40];
      v28 = *((_QWORD *)v23 + 6);
      v29 = v23[56];
      v33 = v23[58];
      v34 = v23[57];
      v30 = *((_QWORD *)v23 + 8);
      v31 = v23[72];
      swift_retain();
      swift_retain();
      swift_retain();
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      if (*MEMORY[0x1E0CFED28] != a2)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        if (*(_QWORD *)(AGGraphGetValue() + 24) >= 2uLL)
          goto LABEL_20;
      }
      if (v24)
        goto LABEL_20;
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      LOBYTE(v43) = 2;
      *((_QWORD *)&v43 + 1) = v25;
      *(_QWORD *)&v44 = v26;
      BYTE8(v44) = v38;
      v45 = v36;
      v46 = v27;
      v47 = v28;
      v48 = v29;
      v49 = v34;
      v50 = v33;
      v51 = v30;
      v52 = v31;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v7 = *(_QWORD *)v4;
      if (*(_QWORD *)(*(_QWORD *)v4 + 16))
      {
        v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v43);
        if ((v9 & 1) != 0)
        {
          v10 = *(_QWORD *)(v7 + 56) + 80 * v8;
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(_QWORD *)(v10 + 16);
          v37 = *(_BYTE *)(v10 + 24);
          v35 = *(_QWORD *)(v10 + 32);
          v13 = *(_BYTE *)(v10 + 40);
          v14 = *(_QWORD *)(v10 + 48);
          v15 = *(_BYTE *)(v10 + 56);
          v16 = *(_BYTE *)(v10 + 57);
          v17 = *(_BYTE *)(v10 + 58);
          v18 = *(_QWORD *)(v10 + 64);
          v19 = *(_BYTE *)(v10 + 72);
          swift_retain();
          swift_retain();
          swift_retain();
        }
        else
        {
          v11 = 0;
          v12 = 0;
          v37 = 0;
          v35 = 0;
          v14 = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v16 = 2;
          v15 = 1;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v37 = 0;
        v35 = 0;
        v14 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v15 = 1;
        v13 = 1;
        v16 = 2;
      }
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      LOBYTE(v43) = 2;
      *((_QWORD *)&v43 + 1) = v11;
      *(_QWORD *)&v44 = v12;
      BYTE8(v44) = v37;
      v45 = v35;
      v46 = v13;
      v47 = v14;
      v48 = v15;
      v49 = v16;
      v50 = v17;
      v51 = v18;
      v52 = v19;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = *(_QWORD *)v4;
    *(_QWORD *)v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v43, (uint64_t)&v40, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v4 = v39;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v40);
LABEL_20:
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationBarDefaults.DefaultNavigationBarVisibility@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_BYTE *)(v1 + 8);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = *(_QWORD *)v1;
  *(_BYTE *)(v4 + 24) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationBarDefaults()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance PreparedInspectorModifier@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static Edge.Set.all.getter();
  *a1 = result;
  return result;
}

id ContainerCoordinator.add(_:to:)(void *a1, id a2)
{
  uint64_t v2;
  id result;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;

  objc_msgSend(a2, sel_addChildViewController_, a1);
  result = objc_msgSend(a2, sel_view);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  result = objc_msgSend(a1, sel_view);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = result;
  objc_msgSend(v6, sel_addSubview_, result);

  result = objc_msgSend(a1, sel_view);
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result;
  result = objc_msgSend(a2, sel_view);
  if (result)
  {
    v9 = result;
    v10 = (uint64_t *)(v2 + 24);
    swift_beginAccess();
    v11 = *(_QWORD *)(v2 + 24);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_7:
        v12 = *v10;
        if ((unint64_t)*v10 >> 62)
        {
          swift_bridgeObjectRetain_n();
          result = (id)_CocoaArrayWrapper.endIndex.getter();
          v13 = (uint64_t)result;
          if (result)
            goto LABEL_9;
        }
        else
        {
          v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = (id)swift_bridgeObjectRetain_n();
          if (v13)
          {
LABEL_9:
            if (v13 >= 1)
            {
              for (i = 0; i != v13; ++i)
              {
                if ((v12 & 0xC000000000000001) != 0)
                  v15 = (id)MEMORY[0x18D75E3BC](i, v12);
                else
                  v15 = *(id *)(v12 + 8 * i + 32);
                v16 = v15;
                objc_msgSend(v15, sel_setActive_, 1);

              }
              goto LABEL_18;
            }
            __break(1u);
            goto LABEL_21;
          }
        }
LABEL_18:
        swift_bridgeObjectRelease_n();
        goto LABEL_19;
      }
    }
    else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    v18 = UIView.constrainToView(_:exceptEdges:identifier:)(v9, 0, 0x6F74636570736E69, (void *)0xE900000000000072);
    swift_beginAccess();
    specialized Array.append<A>(contentsOf:)(v18);
    swift_endAccess();
LABEL_19:

    return objc_msgSend(a1, sel_didMoveToParentViewController_, a2);
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t ContainerCoordinator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContainerCoordinator()
{
  return objc_opt_self();
}

void *ContainerViewControllerRepresentable.makeUIViewController(context:)(uint64_t *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  id v9;
  unint64_t v10;
  uint64_t v11;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_initWithNibName_bundle_, 0, 0);
  v5 = v4;
  v6 = (void *)*((_QWORD *)v2 + 1);
  v7 = *v2;
  v8 = *(unsigned __int8 *)(v3 + 16);
  if (v7 == v8)
  {
    v9 = objc_msgSend(v4, sel_childViewControllers);
    type metadata accessor for UIViewController();
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v11)
    {
      ContainerCoordinator.add(_:to:)(v6, v5);
      return v5;
    }
    v8 = *(unsigned __int8 *)(v3 + 16);
  }
  if (v7 != v8)
    specialized ContainerCoordinator.remove(_:from:)(v6);
  return v5;
}

uint64_t ContainerViewControllerRepresentable.makeCoordinator()()
{
  uint64_t v0;
  char v1;
  uint64_t result;

  v1 = *(_BYTE *)(v0 + 1);
  type metadata accessor for ContainerCoordinator();
  result = swift_allocObject();
  *(_QWORD *)(result + 24) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(result + 16) = v1;
  return result;
}

void ContainerViewControllerRepresentable.updateUIViewController(_:context:)(void *a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  id v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;

  v4 = v3;
  v6 = *a2;
  v7 = (void *)*((_QWORD *)v4 + 1);
  v8 = *v4;
  v9 = *(unsigned __int8 *)(*a2 + 16);
  if (v8 == v9)
  {
    v11 = objc_msgSend(a1, sel_childViewControllers);
    type metadata accessor for UIViewController();
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v13)
    {
      ContainerCoordinator.add(_:to:)(v7, a1);
      goto LABEL_9;
    }
    v9 = *(unsigned __int8 *)(v6 + 16);
  }
  if (v8 != v9)
    specialized ContainerCoordinator.remove(_:from:)(v7);
LABEL_9:
  v14 = (void *)specialized UIHostingController.host.getter();
  v15 = (uint64_t)&v4[*(int *)(a3 + 48)];
  v16 = v14;
  _UIHostingView.setRootView(_:transaction:)(v15);

}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance ContainerViewControllerRepresentable<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ContainerViewControllerRepresentable.makeCoordinator()();
  *a1 = result;
  return result;
}

id @objc InspectorHostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return StyleContextSplitViewNavigationController.init(coder:)(a3);
}

uint64_t type metadata accessor for InspectorHostingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InspectorHostingView);
}

uint64_t type metadata completion function for InspectorModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InspectorModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_retain();
  swift_release();
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t initializeWithTake for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v9;
  return a1;
}

uint64_t assignWithTake for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_release();
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18773F6E4 + 4 * byte_187C54B10[v12]))();
  }
}

void storeEnumTagSinglePayload for InspectorModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18773F894()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18773F910);
}

void sub_18773F89C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18773F8A4);
  JUMPOUT(0x18773F910);
}

void sub_18773F8E8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18773F910);
}

void sub_18773F8F0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18773F910);
}

uint64_t sub_18773F8F8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x18773F904);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x18773F910);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InspectorModifier);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InspectorModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UnaryInspectorRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryInspectorRoot);
}

uint64_t specialized LazyFilterSequence<>.startIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_OWORD *);
  void (*v4)(_OWORD *__return_ptr, _OWORD *);
  char v5;
  uint64_t result;
  uint64_t v7;
  _OWORD v8[2];
  char v9;
  _OWORD v10[2];
  char v11;
  _BYTE v12[56];
  void (*v13)(_OWORD *__return_ptr, _OWORD *);
  uint64_t (*v14)(_OWORD *);

  v1 = v0;
  v2 = _VariadicView_Children.endIndex.getter();
  outlined init with copy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(v0, (uint64_t)v12);
  if (v2)
  {
    v2 = 0;
    while (1)
    {
      v3 = v14;
      v4 = v13;
      swift_retain();
      _VariadicView_Children.subscript.getter();
      v4(v10, v8);
      outlined destroy of _VariadicView_Children.Element((uint64_t)v8);
      v8[0] = v10[0];
      v8[1] = v10[1];
      v9 = v11;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
      v5 = v3(v8);
      swift_release();
      if ((v5 & 1) != 0)
        break;
      result = _VariadicView_Children.endIndex.getter();
      if (v2 >= result)
      {
        __break(1u);
        return result;
      }
      ++v2;
      v7 = _VariadicView_Children.endIndex.getter();
      outlined init with copy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(v1, (uint64_t)v12);
      if (v2 == v7)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
  }
  return v2;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 1 != 0xFFFFFFFFLL || *(unsigned __int8 *)(a1 + 32) > 1u;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned __int8 *)(result + 32);
  if (v2 >> 1 != 0xFFFFFFFF || v3 >= 2)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    *(_QWORD *)(a2 + 8) = v2;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
    *(_BYTE *)(a2 + 32) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized ContainerCoordinator.remove(_:from:)(void *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  id result;
  uint64_t i;
  id v7;
  void *v8;
  void *v9;

  objc_msgSend(a1, sel_willMoveToParentViewController_, 0);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = (id)_CocoaArrayWrapper.endIndex.getter();
    v4 = (uint64_t)result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain_n();
    if (!v4)
      goto LABEL_10;
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_13;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x18D75E3BC](i, v3);
    else
      v7 = *(id *)(v3 + 8 * i + 32);
    v8 = v7;
    objc_msgSend(v7, sel_setActive_, 0);

  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  result = objc_msgSend(a1, sel_view);
  if (result)
  {
    v9 = result;
    objc_msgSend(result, sel_removeFromSuperview);

    return objc_msgSend(a1, sel_removeFromParentViewController);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized UnaryInspectorRoot.inspectorColumnWidth(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t (*v9)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t result;
  _QWORD v12[4];
  char v13;
  __int128 v14;
  _BYTE v15[56];
  double (*v16)@<D0>(uint64_t@<X8>);
  uint64_t v17;
  BOOL (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v21;

  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v12);
  outlined init with copy of _VariadicView_Children((uint64_t)v12, (uint64_t)v15);
  v16 = closure #1 in UnaryInspectorRoot.inspectorColumnWidth(from:);
  v17 = 0;
  v18 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  v19 = 0;
  v20 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
  v21 = 0;
  outlined destroy of LazySequence<_VariadicView_Children>((uint64_t)v12);
  v3 = specialized LazyFilterSequence<>.startIndex.getter();
  if (v3 == _VariadicView_Children.endIndex.getter())
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0x1FFFFFFFELL;
  }
  else
  {
    v9 = v20;
    v10 = v16;
    _VariadicView_Children.subscript.getter();
    ((void (*)(__int128 *__return_ptr, _QWORD *))v10)(&v14, v12);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v12);
    ((void (*)(_QWORD *__return_ptr, __int128 *))v9)(v12, &v14);
    v4 = v12[0];
    v8 = v12[1];
    v5 = v12[2];
    v6 = v12[3];
    v7 = v13;
  }
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

uint64_t type metadata completion function for UnaryInspectorRoot()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UnaryInspectorRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18773FEB4 + 4 * byte_187C54B1F[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for UnaryInspectorRoot(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_187740120(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v4 = a1[1];
  v5 = type metadata accessor for InspectorModifier(255, *a1, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorModifier<A>, v5);
  v6 = type metadata accessor for _ViewModifier_Content();
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  v9 = type metadata accessor for UnaryInspectorRoot(255, v6, v7, v8);
  v10 = type metadata accessor for _VariadicView.Tree();
  v12[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnaryInspectorRoot<A>, v9);
  v12[1] = v4;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v10, v12);
}

uint64_t instantiation function for generic protocol witness table for UnaryInspectorRoot<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnaryInspectorRoot<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in UnaryInspectorRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PortableInspectorModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>);
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE55F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>();
    v3[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>;
  if (!lazy protocol witness table cache variable for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE55F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>);
  }
  return result;
}

uint64_t type metadata accessor for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PortableInspectorModifier);
}

uint64_t outlined init with take of InspectorColumnWidth?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _UnaryViewAdaptor<_VariadicView_Children>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE55F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of LazySequence<_VariadicView_Children>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for LazySequence<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E0CE5600], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC310]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>)
  {
    type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>> and conformance LazyFilterSequence<A>, (uint64_t (*)(uint64_t))type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, MEMORY[0x1E0DECCA8]);
    v0 = type metadata accessor for LazyMapSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>);
  }
}

void type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>)
  {
    type metadata accessor for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?> and conformance LazyMapSequence<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>, MEMORY[0x1E0DEC858]);
    v0 = type metadata accessor for LazyFilterSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
  }
}

void type metadata accessor for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v0 = type metadata accessor for LazyMapSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>);
  }
}

uint64_t outlined init with copy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata completion function for PortableInspectorModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, unint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 57) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v12 = a1 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    *(_BYTE *)(v12 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    *(_OWORD *)(v12 + 40) = v14;
    *(_OWORD *)(v12 + 24) = v13;
    v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 57) & ~v6;
    v16 = ((a2 & 0xFFFFFFFFFFFFFFF8) + v6 + 57) & ~v6;
    v17 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
  }
  return a1;
}

uint64_t destroy for PortableInspectorModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, unint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v5 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  v12 = (v10 + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  v13 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v13(v11, v12, v8);
  return a1;
}

uint64_t assignWithCopy for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v6 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(unsigned __int8 *)(v9 + 80) + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t initializeWithTake for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v4 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v6 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PortableInspectorModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 57) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 57) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187740BD4 + 4 * byte_187C54B2D[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for PortableInspectorModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_187740E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>(255);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = MEMORY[0x1E0CE35E0];
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = &protocol witness table for PortableInspectorModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

_UNKNOWN **base witness table accessor for ViewModifier in PortableInspectorModifier<A>()
{
  return &protocol witness table for PortableInspectorModifier<A>;
}

uint64_t partial apply for closure #1 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #2 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #3 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #3 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void type metadata accessor for _GraphValue<Binding<Bool>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, a5);
    v6 = type metadata accessor for _GraphValue();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PortableInspectorModifier.SplitWrapperModifier);
}

uint64_t outlined retain of PortableInspectorModifier<A>.SplitWrapper(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v2 = *(void **)(a1 + 24);
  v3 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  return a1;
}

uint64_t type metadata accessor for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PortableInspectorModifier.SplitWrapper);
}

uint64_t outlined release of PortableInspectorModifier<A>.SplitWrapper(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(a1 + 40);

  return a1;
}

void destroy for PortableInspectorModifier.SplitWrapper(id *a1)
{

}

uint64_t initializeWithCopy for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(void **)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 40);
  v11 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);

  v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t type metadata completion function for PortableInspectorModifier.SplitWrapperModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  void **v16;
  void *v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  id v24;
  id v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v6 > 7 || v8 != 0 || v7 + ((v6 + 80) & (unint64_t)~v6) + 1 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v12 = a1 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    *(_BYTE *)(v12 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    *(_OWORD *)(v12 + 40) = v14;
    *(_OWORD *)(v12 + 24) = v13;
    *(_BYTE *)(v12 + 57) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
    v15 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);
    v16 = (void **)(((a2 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);
    v17 = *v16;
    *v15 = *v16;
    v18 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (void **)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = *v19;
    *v18 = *v19;
    v21 = ((unint64_t)v18 + v6 + 8) & ~v6;
    v22 = ((unint64_t)v19 + v6 + 8) & ~v6;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v24 = v17;
    v25 = v20;
    v23(v21, v22, v4);
    *(_BYTE *)(v21 + v7) = *(_BYTE *)(v22 + v7);
  }
  return a1;
}

uint64_t destroy for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2)
{
  id *v4;
  id *v5;

  swift_release();
  swift_release();
  v4 = (id *)(((a1 & 0xFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);

  v5 = (id *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  id v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v5 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(_BYTE *)(v5 + 57) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  v8 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);
  v9 = (void **)(((a2 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);
  v10 = *v9;
  *v8 = *v9;
  v11 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (void **)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = *v12;
  *v11 = *v12;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)v11 + v16 + 8) & ~v16;
  v18 = ((unint64_t)v12 + v16 + 8) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_retain();
  swift_retain();
  v20 = v10;
  v21 = v13;
  v19(v17, v18, v14);
  *(_BYTE *)(v17 + *(_QWORD *)(v15 + 64)) = *(_BYTE *)(v18 + *(_QWORD *)(v15 + 64));
  return a1;
}

uint64_t assignWithCopy for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  void **v11;
  void *v12;
  void *v13;
  id v14;
  void **v15;
  void **v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v6 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v8;
  *(_BYTE *)(v6 + 57) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  v10 = (void **)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  v11 = (void **)((v7 + 65) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = *v10;
  *v10 = *v11;
  v14 = v12;

  v15 = (void **)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  v18 = *v15;
  *v15 = *v16;
  v19 = v17;

  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = ((unint64_t)v15 + v21 + 8) & ~v21;
  v23 = ((unint64_t)v16 + v21 + 8) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v20 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v20 + 64));
  return a1;
}

uint64_t initializeWithTake for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_BYTE *)(v4 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(_BYTE *)(v4 + 57) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  v7 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v9 + v12 + 8) & ~v12;
  v14 = ((unint64_t)v10 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v13, v14);
  *(_BYTE *)(v13 + *(_QWORD *)(v11 + 64)) = *(_BYTE *)(v14 + *(_QWORD *)(v11 + 64));
  return a1;
}

uint64_t assignWithTake for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v9 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v6 + 40) = v9;
  *(_BYTE *)(v6 + 56) = v8;
  *(_BYTE *)(v6 + 57) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  v10 = (void **)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  v11 = (void **)((v7 + 65) & 0xFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;

  v13 = (void **)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v13;
  *v13 = *v14;

  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = ((unint64_t)v13 + v17 + 8) & ~v17;
  v19 = ((unint64_t)v14 + v17 + 8) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 40))(v18, v19);
  *(_BYTE *)(v18 + *(_QWORD *)(v16 + 64)) = *(_BYTE *)(v19 + *(_QWORD *)(v16 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = *(_QWORD *)(v4 + 64) + ((v7 + 80) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187741860 + 4 * byte_187C54B3B[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for PortableInspectorModifier.SplitWrapperModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 80) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_187741B60()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187741B4CLL);
}

void sub_187741B68()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187741B4CLL);
}

void sub_187741B78()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187741B4CLL);
}

void *type metadata accessor for PreparedInspectorModifier()
{
  return &unk_1E1AEB240;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PreparedInspectorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PortableInspectorModifier<A>.SplitWrapperModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in PortableInspectorModifier<A>.SplitWrapper()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreparedInspectorModifier and conformance PreparedInspectorModifier;
  if (!lazy protocol witness table cache variable for type PreparedInspectorModifier and conformance PreparedInspectorModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreparedInspectorModifier, &unk_1E1AEB240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreparedInspectorModifier and conformance PreparedInspectorModifier);
  }
  return result;
}

uint64_t outlined init with take of UIKitNavigationController?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIKitNavigationController?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UIKitNavigationController?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIKitNavigationController?)
  {
    type metadata accessor for UIKitNavigationController();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitNavigationController?);
  }
}

uint64_t type metadata accessor for ContainerViewControllerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerViewControllerRepresentable);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>;
  if (!lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NullSheetAnchor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>);
  }
  return result;
}

uint64_t sub_187741DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 52), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(0, v4, v5, a1)- 8)+ 80);
  return closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)(v2 + ((v6 + 32) & ~v6), v4, v5, v7, a2);
}

uint64_t storeEnumTagSinglePayload for InspectorBarManagement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187741EE4 + 4 * byte_187C54B52[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187741F18 + 4 * byte_187C54B4D[v4]))();
}

uint64_t sub_187741F18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187741F20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187741F28);
  return result;
}

uint64_t sub_187741F34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187741F3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187741F40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187741F48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InspectorBarManagement()
{
  return &type metadata for InspectorBarManagement;
}

uint64_t type metadata completion function for ContainerViewControllerRepresentable()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ContainerViewControllerRepresentable(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  id v19;
  id v20;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v10 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFF8);
    v11 = (void **)(((unint64_t)a2 + 9) & 0xFFFFFFFFFFFFF8);
    v12 = *v11;
    *v10 = *v11;
    v13 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = *v14;
    *v13 = *v14;
    v16 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v17 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v19 = v12;
    v20 = v15;
    v18(v16, v17, v4);
  }
  return v3;
}

uint64_t destroy for ContainerViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  id *v3;
  id *v4;

  v3 = (id *)((a1 + 9) & 0xFFFFFFFFFFFFFFF8);

  v4 = (id *)(((unint64_t)v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *initializeWithCopy for ContainerViewControllerRepresentable(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  void **v5;
  void *v6;
  _QWORD *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;
  id v17;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFF8);
  v5 = (void **)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFF8);
  v6 = *v5;
  *v4 = *v5;
  v7 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void **)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v16 = v6;
  v17 = v9;
  v15(v13, v14, v10);
  return a1;
}

_BYTE *assignWithCopy for ContainerViewControllerRepresentable(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  id v9;
  void **v10;
  void **v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (void **)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v6 = (void **)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFF8);
  v7 = *v6;
  v8 = *v5;
  *v5 = *v6;
  v9 = v7;

  v10 = (void **)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (void **)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = *v10;
  *v10 = *v11;
  v14 = v12;

  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(((unint64_t)v10 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v11 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

_BYTE *initializeWithTake for ContainerViewControllerRepresentable(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_BYTE *assignWithTake for ContainerViewControllerRepresentable(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (void **)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v6 = (void **)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFF8);
  v7 = *v5;
  *v5 = *v6;

  v8 = (void **)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 = (void **)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v8;
  *v8 = *v9;

  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ContainerViewControllerRepresentable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 9) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187742480 + 4 * byte_187C54B57[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ContainerViewControllerRepresentable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_18774276C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187742758);
}

void sub_187742774()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187742758);
}

void sub_187742784()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187742758);
}

void *type metadata accessor for NavigationBarDefaults()
{
  return &unk_1E1AD7EC0;
}

void sub_1877427A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PortableInspectorModifier<A>.SplitWrapperModifier, v6);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContainerViewControllerRepresentable(255, v4, v5, v7);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  v20[0] = &protocol witness table for ContainerViewControllerRepresentable<A>;
  v20[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  v14 = MEMORY[0x1E0CE2E70];
  v19[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v20);
  v19[1] = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  v18[0] = MEMORY[0x18D75FFDC](v14, v9, v19);
  v18[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v17[0] = MEMORY[0x18D75FFDC](v14, v10, v18);
  v17[1] = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  v16[0] = MEMORY[0x18D75FFDC](v14, v11, v17);
  v16[1] = &protocol witness table for InspectorBarManagement;
  v15[0] = MEMORY[0x18D75FFDC](v14, v12, v16);
  v15[1] = MEMORY[0x1E0CE65D8];
  MEMORY[0x18D75FFDC](v14, v13, v15);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>();
  type metadata accessor for SheetPresentationModifier();
}

void sub_187742A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = type metadata accessor for ModifiedContent();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v13);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a1);
  a9 = v17;
  a10 = v18;
  v19 = MEMORY[0x18D75FFDC](v14, v16, &a9);
  a11 = v16;
  a13 = v19;
  type metadata accessor for InspectorSplitView();
}

uint64_t sub_187742A70(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorSplitView<A, B>, a1);
}

uint64_t sub_187742AA0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>, MEMORY[0x1E0CE2C40], MEMORY[0x1E0CE2C30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<PreparedInspectorModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier, (uint64_t)&unk_1E1AEB240, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<InspectorStyleContext>, MEMORY[0x1E0CE50D8], MEMORY[0x1E0CE50C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>);
    v3[1] = &protocol witness table for NavigationBarDefaults;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<PreparedInspectorModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier, (uint64_t)&unk_1E1AEB240, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<InspectorStyleContext>, MEMORY[0x1E0CE50D8], MEMORY[0x1E0CE50C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>, MEMORY[0x1E0CE2C40], MEMORY[0x1E0CE2C30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationBarDefaults()
{
  return &protocol witness table for NavigationBarDefaults;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in InspectorBarManagement()
{
  return &protocol witness table for InspectorBarManagement;
}

_UNKNOWN **base witness table accessor for ViewModifier in InspectorBarManagement()
{
  return &protocol witness table for InspectorBarManagement;
}

uint64_t specialized static InspectorBarManagement.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  _BYTE *Value;
  uint64_t v6;
  unint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[5];

  v3 = *(_QWORD *)(a2 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v11[0] &= ~0x10uLL;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (*(_QWORD *)(a2 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeSet.update(with:isUnique:)((uint64_t)v9, isUniquelyReferenced_nonNull_native, (uint64_t)v11);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role?((uint64_t)v11);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  Value = (_BYTE *)AGGraphGetValue();
  v6 = *(_QWORD *)(a2 + 8);
  if (*Value == 1)
  {
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v7 = v11[0] | 1;
  }
  else
  {
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v7 = v11[0] & 0xFFFFFFFFFFFFFFFELL;
  }
  v11[0] = v7;
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type InspectorBarManagement and conformance InspectorBarManagement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorBarManagement and conformance InspectorBarManagement;
  if (!lazy protocol witness table cache variable for type InspectorBarManagement and conformance InspectorBarManagement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorBarManagement, &type metadata for InspectorBarManagement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorBarManagement and conformance InspectorBarManagement);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static NavigationBarDefaults._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static NavigationBarDefaults._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility;
  if (!lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationBarDefaults.DefaultNavigationBarVisibility, &unk_1E1AD7E18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility);
  }
  return result;
}

uint64_t sub_187743424()
{
  return swift_deallocObject();
}

uint64_t sub_187743434()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle;
  if (!lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationBarDefaults.DefaultTitle, &unk_1E1AD7EA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle);
  }
  return result;
}

void *type metadata accessor for NavigationBarDefaults.DefaultTitle()
{
  return &unk_1E1AD7EA0;
}

void *type metadata accessor for NavigationBarDefaults.DefaultNavigationBarVisibility()
{
  return &unk_1E1AD7E18;
}

SwiftUI::ClarityUIApplicationSceneClientSetting_optional __swiftcall ClarityUIApplicationSceneClientSetting.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = rawValue + 64;
  if ((unint64_t)(rawValue - 312000) >= 3)
    v2 = 3;
  *v1 = v2;
  return (SwiftUI::ClarityUIApplicationSceneClientSetting_optional)rawValue;
}

uint64_t ClarityUIApplicationSceneClientSetting.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 312000;
}

unint64_t lazy protocol witness table accessor for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting;
  if (!lazy protocol witness table cache variable for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClarityUIApplicationSceneClientSetting, &type metadata for ClarityUIApplicationSceneClientSetting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ClarityUIApplicationSceneClientSetting()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 312000);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ClarityUIApplicationSceneClientSetting()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 312000);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClarityUIApplicationSceneClientSetting()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 312000);
  return Hasher._finalize()();
}

SwiftUI::ClarityUIApplicationSceneClientSetting_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ClarityUIApplicationSceneClientSetting(Swift::Int *a1)
{
  return ClarityUIApplicationSceneClientSetting.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ClarityUIApplicationSceneClientSetting(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 312000;
}

uint64_t dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 48))(a1, a2 & 1);
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t storeEnumTagSinglePayload for ClarityUIApplicationSceneClientSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1877436C4 + 4 * byte_187C55195[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1877436F8 + 4 * byte_187C55190[v4]))();
}

uint64_t sub_1877436F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187743700(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187743708);
  return result;
}

uint64_t sub_187743714(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18774371CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187743720(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187743728(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIApplicationSceneClientSetting()
{
  return &type metadata for ClarityUIApplicationSceneClientSetting;
}

uint64_t static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)(void *a1)
{
  uint64_t v2;
  _OWORD v3[2];
  _BYTE v4[24];
  uint64_t v5;

  if (objc_msgSend(a1, sel_objectForSetting_, 312000))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Data], MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if ((swift_dynamicCast() & 1) != 0)
      return v2;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
  }
  static Log.internalWarning(_:)();
  return MEMORY[0x1E0DEE9D8];
}

unint64_t implicit closure #1 in static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)()
{
  return 0xD00000000000002CLL;
}

uint64_t static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)(void *a1)
{
  unsigned __int8 v2;
  _OWORD v3[2];
  _BYTE v4[24];
  uint64_t v5;

  if (objc_msgSend(a1, sel_objectForSetting_, 312001))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    if ((swift_dynamicCast() & 1) != 0)
      return v2;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
  }
  static Log.internalWarning(_:)();
  return 1;
}

unint64_t implicit closure #1 in static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)()
{
  return 0xD000000000000027;
}

uint64_t static ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress(otherSettings:)(void *a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _BYTE v5[32];

  if (objc_msgSend(a1, sel_objectForSetting_, 312002))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v3 = 0u;
    v4 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v3, (uint64_t)v5);
  outlined init with take of Any?((uint64_t)v5, (uint64_t)&v3);
  if (*((_QWORD *)&v4 + 1))
  {
    if (swift_dynamicCast())
      return v2;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v3);
    return 0;
  }
}

id ClarityUIApplicationSceneClientSettings.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for ClarityUIApplicationSceneClientSettings);
}

uint64_t type metadata accessor for ClarityUIApplicationSceneClientSettings()
{
  return objc_opt_self();
}

void (*ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v3;
  uint64_t v4;

  a1[1] = (uint64_t)v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  v4 = static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)(v3);

  *a1 = v4;
  return ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify;
}

void ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify(uint64_t a1, char a2)
{
  void *v2;
  NSArray v3;
  id v4;

  v2 = *(void **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = objc_msgSend(v2, sel_otherSettings);
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setObject_forSetting_, v3.super.isa, 312000);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 8), sel_otherSettings);
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setObject_forSetting_, v3.super.isa, 312000);
  }

}

void (*ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify(uint64_t a1))(id *a1)
{
  void *v1;
  id v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  v4 = static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)(v3);

  *(_BYTE *)(a1 + 8) = v4 & 1;
  return ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify;
}

void ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify(id *a1)
{
  Class isa;
  id v2;

  v2 = objc_msgSend(*a1, sel_otherSettings);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v2, sel_setObject_forSetting_, isa, 312001);

}

void (*ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  char v5;
  char v6;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  v4 = static ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress(otherSettings:)(v3);
  v6 = v5;

  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify;
}

void ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify(uint64_t a1)
{
  char v1;
  Class isa;
  id v3;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = objc_msgSend(*(id *)(a1 + 16), sel_otherSettings);
  if ((v1 & 1) != 0)
    isa = 0;
  else
    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v3, sel_setObject_forSetting_, isa, 312002);
  swift_unknownObjectRelease();

}

uint64_t ClarityUIApplicationSceneClientSettings.keyDescription(forSetting:)(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  uint64_t v3;
  id v5;
  void *v6;
  objc_super v8;
  char v9;

  if ((unint64_t)(a1 - 312000) > 2)
  {
    v8.receiver = v2;
    v8.super_class = (Class)a2();
    v5 = objc_msgSendSuper2(&v8, sel_keyDescriptionForSetting_, a1);
    if (v5)
    {
      v6 = v5;
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  else
  {
    v9 = a1 + 64;
    return String.init<A>(describing:)();
  }
  return v3;
}

id @objc ClarityUIApplicationSceneClientSettings.keyDescription(forSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v6 = a1;
  v7 = ClarityUIApplicationSceneClientSettings.keyDescription(forSetting:)(a3, a4);
  v9 = v8;

  if (v9)
  {
    v10 = (void *)MEMORY[0x18D75CC88](v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

uint64_t ClarityUIApplicationSceneClientSettings.valueDescription(for:object:ofSetting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  void *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;
  _QWORD v21[3];
  uint64_t v22;

  if ((unint64_t)(a3 - 312000) > 2)
  {
    v9 = outlined init with copy of Any?(a2, (uint64_t)v21);
    v10 = v22;
    if (v22)
    {
      v11 = __swift_project_boxed_opaque_existential_1(v21, v22);
      v12 = *(_QWORD *)(v10 - 8);
      v13 = MEMORY[0x1E0C80A78](v11, v11);
      v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v12 + 16))(v15, v13);
      v16 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
      v9 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      v16 = 0;
    }
    v17 = (objc_class *)a4(v9);
    v20.receiver = v4;
    v20.super_class = v17;
    v18 = objc_msgSendSuper2(&v20, sel_valueDescriptionForFlag_object_ofSetting_, a1, v16, a3);
    swift_unknownObjectRelease();
    if (v18)
    {
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  else
  {
    outlined init with copy of Any?(a2, (uint64_t)v21);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return String.init<A>(describing:)();
  }
  return v5;
}

id @objc ClarityUIApplicationSceneClientSettings.valueDescription(for:object:ofSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _OWORD v17[2];

  if (a4)
  {
    v10 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    v11 = a1;
  }
  v12 = ClarityUIApplicationSceneClientSettings.valueDescription(for:object:ofSetting:)(a3, (uint64_t)v17, a5, a6);
  v14 = v13;

  outlined destroy of Any?((uint64_t)v17);
  if (!v14)
    return 0;
  v15 = (void *)MEMORY[0x18D75CC88](v12, v14);
  swift_bridgeObjectRelease();
  return v15;
}

id @objc ClarityUIApplicationSceneClientSettings.mutableCopy(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return objc_msgSend(objc_allocWithZone((Class)a4()), sel_initWithSettings_, a1);
}

id @objc ClarityUIApplicationSceneClientSettings.init(settings:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  objc_super v6;

  v6.receiver = a1;
  v6.super_class = (Class)a4();
  return objc_msgSendSuper2(&v6, sel_initWithSettings_, a3);
}

id @objc ClarityUIApplicationSceneClientSettings.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ClarityUIMutableApplicationSceneClientSettings.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for ClarityUIMutableApplicationSceneClientSettings);
}

uint64_t type metadata accessor for ClarityUIMutableApplicationSceneClientSettings()
{
  return objc_opt_self();
}

void protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.setter in conformance ClarityUIMutableApplicationSceneClientSettings()
{
  void *v0;
  id v1;
  Class isa;

  v1 = objc_msgSend(v0, sel_otherSettings);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setObject_forSetting_, isa, 312000);

}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.modify in conformance ClarityUIMutableApplicationSceneClientSettings(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.setter in conformance ClarityUIMutableApplicationSceneClientSettings()
{
  void *v0;
  id v1;
  Class isa;

  v1 = objc_msgSend(v0, sel_otherSettings);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v1, sel_setObject_forSetting_, isa, 312001);

}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.modify in conformance ClarityUIMutableApplicationSceneClientSettings(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.setter in conformance ClarityUIMutableApplicationSceneClientSettings(uint64_t a1, char a2)
{
  void *v2;
  id v4;
  NSNumber v5;

  v4 = objc_msgSend(v2, sel_otherSettings);
  if ((a2 & 1) != 0)
    v5.super.super.isa = 0;
  else
    v5.super.super.isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v4, sel_setObject_forSetting_, v5.super.super.isa, 312002);

  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.modify in conformance ClarityUIMutableApplicationSceneClientSettings(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles.getter in conformance ClarityUIApplicationSceneClientSettings()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_otherSettings);
  v2 = static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)(v1);

  return v2;
}

uint64_t protocol witness for ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible.getter in conformance ClarityUIApplicationSceneClientSettings()
{
  void *v0;
  id v1;
  char v2;

  v1 = objc_msgSend(v0, sel_otherSettings);
  v2 = static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)(v1);

  return v2 & 1;
}

uint64_t protocol witness for ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.getter in conformance ClarityUIApplicationSceneClientSettings()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_otherSettings);
  v2 = static ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress(otherSettings:)(v1);

  return v2;
}

ValueMetadata *type metadata accessor for IsSearchImplementedModifier()
{
  return &type metadata for IsSearchImplementedModifier;
}

ValueMetadata *type metadata accessor for SearchAdjustmentModifier()
{
  return &type metadata for SearchAdjustmentModifier;
}

uint64_t storeEnumTagSinglePayload for SearchAdjustmentModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1877445AC + 4 * byte_187C55385[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1877445E0 + 4 * byte_187C55380[v4]))();
}

uint64_t sub_1877445E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877445E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877445F0);
  return result;
}

uint64_t sub_1877445FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187744604);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187744608(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187744610(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchAdjustment()
{
  return &type metadata for SearchAdjustment;
}

unint64_t lazy protocol witness table accessor for type SearchAdjustment and conformance SearchAdjustment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchAdjustment and conformance SearchAdjustment;
  if (!lazy protocol witness table cache variable for type SearchAdjustment and conformance SearchAdjustment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchAdjustment, &type metadata for SearchAdjustment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchAdjustment and conformance SearchAdjustment);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchAdjustmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchAdjustmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance SearchAdjustmentModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance SearchAdjustmentModifier(uint64_t a1, uint64_t a2)
{
  char *Value;

  Value = (char *)AGGraphGetValue();
  return specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(*Value, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchAdjustmentModifier()
{
  lazy protocol witness table accessor for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchAdjustmentModifier()
{
  return &protocol witness table for SearchAdjustmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchAdjustmentModifier()
{
  return &protocol witness table for SearchAdjustmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in IsSearchImplementedModifier()
{
  return &protocol witness table for IsSearchImplementedModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchDisabledAdjustmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchDisabledAdjustmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance SearchDisabledAdjustmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance SearchDisabledAdjustmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(1, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchDisabledAdjustmentModifier()
{
  lazy protocol witness table accessor for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsSearchAllowedPredicate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

double static IsSearchImplementedModifier._makeView(modifier:inputs:body:)@<D0>(__int128 *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  double result;
  _OWORD v10[5];
  int v11;
  uint64_t v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v4 = a1[3];
  v5 = a1[1];
  v16 = a1[2];
  v17 = v4;
  v6 = a1[3];
  v18 = a1[4];
  v7 = a1[1];
  v14 = *a1;
  v15 = v7;
  v10[2] = v16;
  v10[3] = v6;
  v10[4] = a1[4];
  v19 = *((_DWORD *)a1 + 20);
  v11 = *((_DWORD *)a1 + 20);
  v10[0] = v14;
  v10[1] = v5;
  a2(&v12);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  *(_QWORD *)&v10[0] = v17;
  DWORD2(v10[0]) = DWORD2(v17);
  outlined retain of [Text.Modifier]((uint64_t)v10);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v12;
  result = v13;
  a3[1] = v13;
  return result;
}

unint64_t getter of isSearchImplemented #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;

  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
    return *(_QWORD *)(a1 + 16);
  type metadata accessor for _GraphValue<IsSearchImplementedModifier>();
  v2 = _GraphValue.value.getter();
  swift_getKeyPath();
  v3 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v5 = v2 | (unint64_t)(v3 << 32);
  swift_beginAccess();
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 28) = 0;
  return v5;
}

uint64_t implicit closure #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  getter of isSearchImplemented #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(a1);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented();
  return Attribute.init<A>(body:value:flags:update:)();
}

_BYTE *(*IsSearchImplementedModifier.IsSearchImplemented.value.getter())(_BYTE *result)
{
  char v0;

  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0)
  {
    static Semantics.v6.getter();
    v0 = isLinkedOnOrAfter(_:)();
  }
  else
  {
    v0 = (*(_BYTE *)AGGraphGetValue() & 0xFE) != 6;
  }
  *(_BYTE *)(swift_allocObject() + 16) = v0 & 1;
  return _s7SwiftUI27IsSearchImplementedModifier33_B12688D62B96A847C61E3B59FA9667D2LLV0cdE0V5valueyySbzcvgySbzcfU_TA_0;
}

_BYTE *closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter(_BYTE *result, char a2)
{
  *result = (*result | a2) & 1;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance IsSearchImplementedModifier.IsSearchImplemented@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  _BYTE *(*v2)(_BYTE *);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = IsSearchImplementedModifier.IsSearchImplemented.value.getter();
  v4 = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance IsSearchImplementedModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t sub_187744DA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented;
  if (!lazy protocol witness table cache variable for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSearchImplementedModifier.IsSearchImplemented, &unk_1E1AF3238);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented);
  }
  return result;
}

uint64_t sub_187744E70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187744E94()
{
  return swift_deallocObject();
}

_BYTE *_s7SwiftUI27IsSearchImplementedModifier33_B12688D62B96A847C61E3B59FA9667D2LLV0cdE0V5valueyySbzcvgySbzcfU_TA_0(_BYTE *result)
{
  uint64_t v1;

  *result = (*result | *(_BYTE *)(v1 + 16)) & 1;
  return result;
}

void type metadata accessor for _GraphValue<IsSearchImplementedModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<IsSearchImplementedModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<IsSearchImplementedModifier>);
  }
}

uint64_t specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(char a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    v4 = v6;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
    swift_release_n();
    v4 = v6;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  if (a1 == 1 && (v4 & 0xFE) != 6)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier;
  if (!lazy protocol witness table cache variable for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchAdjustmentModifier, &type metadata for SearchAdjustmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier);
  }
  return result;
}

void *type metadata accessor for IsSearchImplementedModifier.IsSearchImplemented()
{
  return &unk_1E1AF3238;
}

ValueMetadata *type metadata accessor for SearchDisabledAdjustmentModifier()
{
  return &type metadata for SearchDisabledAdjustmentModifier;
}

ValueMetadata *type metadata accessor for IsSearchAllowedPredicate()
{
  return &type metadata for IsSearchAllowedPredicate;
}

uint64_t storeEnumTagSinglePayload for IsSearchImplementedModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187745330 + 4 * byte_187C5538F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187745364 + 4 * byte_187C5538A[v4]))();
}

uint64_t sub_187745364(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18774536C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187745374);
  return result;
}

uint64_t sub_187745380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187745388);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18774538C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187745394(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchImplementation()
{
  return &type metadata for SearchImplementation;
}

unint64_t lazy protocol witness table accessor for type SearchImplementation and conformance SearchImplementation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchImplementation and conformance SearchImplementation;
  if (!lazy protocol witness table cache variable for type SearchImplementation and conformance SearchImplementation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchImplementation, &type metadata for SearchImplementation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchImplementation and conformance SearchImplementation);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchDisabledAdjustmentModifier()
{
  return &protocol witness table for SearchDisabledAdjustmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchDisabledAdjustmentModifier()
{
  return &protocol witness table for SearchDisabledAdjustmentModifier;
}

unint64_t lazy protocol witness table accessor for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier;
  if (!lazy protocol witness table cache variable for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchDisabledAdjustmentModifier, &type metadata for SearchDisabledAdjustmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier);
  }
  return result;
}

uint64_t AutomaticNavigationSplitViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_WORD *)(a1 + 16);
  v4 = *(_WORD *)(a1 + 18);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 18) = 1;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 41) = 1;
  *(_WORD *)(a2 + 42) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in AutomaticNavigationSplitViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance AutomaticNavigationSplitViewStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_WORD *)(a1 + 16);
  v4 = *(_WORD *)(a1 + 18);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 18) = 1;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 41) = 1;
  *(_WORD *)(a2 + 42) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

ValueMetadata *type metadata accessor for AutomaticNavigationSplitViewStyle()
{
  return &type metadata for AutomaticNavigationSplitViewStyle;
}

uint64_t sub_187745560()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>, lazy protocol witness table accessor for type ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>)
  {
    type metadata accessor for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>();
    type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>(255, &lazy cache variable for type metadata for NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle, (uint64_t)&type metadata for BalancedNavigationSplitViewStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>);
  }
}

void type metadata accessor for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>();
    type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>(255, &lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone, (uint64_t)&type metadata for AutomaticNavigationSplitViewStyle_Phone);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>);
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone;
  if (!lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticNavigationSplitViewStyle_Phone, &type metadata for AutomaticNavigationSplitViewStyle_Phone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone);
  }
  return result;
}

void type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for NavigationSplitStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle;
  if (!lazy protocol witness table cache variable for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BalancedNavigationSplitViewStyle, &type metadata for BalancedNavigationSplitViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = &protocol witness table for NavigationSplitStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>;
  if (!lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>)
  {
    v1 = type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>);
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticNavigationSplitViewStyle_Phone()
{
  return &type metadata for AutomaticNavigationSplitViewStyle_Phone;
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in AutomaticNavigationSplitViewStyle_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance AutomaticNavigationSplitViewStyle_Phone@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v8;
  *(_BYTE *)(a2 + 81) = 2;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t TooltipBridge.responder(at:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  result = MEMORY[0x18D760234]((char *)v0 + direct field offset for TooltipBridge.host);
  if (result)
  {
    v5 = (void *)result;
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    v7 = ViewRendererHost.responderNode.getter();

    if (v7)
    {
      type metadata accessor for ViewResponder();
      v8 = swift_dynamicCastClass();
      if (v8)
      {
        MEMORY[0x1E0C80A78](v8, v9);
        type metadata accessor for ViewResponder?();
        static Update.ensure<A>(_:)();
        if (v10)
        {
          type metadata accessor for TooltipResponder();
          ResponderNode.firstAncestor<A>(ofType:)();
          swift_release();
          swift_release();
          return v10;
        }
      }
      swift_release();
    }
    return 0;
  }
  return result;
}

id @objc TooltipBridge.toolTipInteraction(_:configurationAt:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a5;
  v9 = a1;
  v10 = specialized TooltipBridge.toolTipInteraction(_:configurationAt:)(a2, a3);

  return v10;
}

uint64_t specialized TooltipBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

id specialized TooltipBridge.toolTipInteraction(_:configurationAt:)(double a1, double a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v18;

  v5 = (void *)MEMORY[0x18D760234](v2 + direct field offset for TooltipBridge.host);
  if (!v5)
    return 0;
  v6 = v5;
  objc_msgSend(v5, sel_convertPoint_toView_, 0, a1, a2);
  if (TooltipBridge.responder(at:)())
  {
    type metadata accessor for String?();
    static Update.dispatchImmediately<A>(_:)();
    v7 = v18;
    if (v18)
    {
      objc_msgSend(v6, sel_convertRect_fromView_, 0, TooltipResponder.globalFrame.getter());
      v9 = v8;
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v16 = (void *)MEMORY[0x18D75CC88]();
      swift_bridgeObjectRelease();
      v7 = objc_msgSend((id)objc_opt_self(), sel_configurationWithToolTip_inRect_, v16, v9, v11, v13, v15);

      swift_release();
    }
    else
    {

      swift_release();
    }
  }
  else
  {

    return 0;
  }
  return v7;
}

uint64_t partial apply for closure #1 in TooltipBridge.responder(at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ViewResponder.hitTest(globalPoint:radius:options:)();
  *a1 = result;
  return result;
}

void type metadata accessor for ViewResponder?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ViewResponder?)
  {
    type metadata accessor for ViewResponder();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponder?);
  }
}

double _ArchivableView.sizeThatFits(in:)()
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, a3);
  return static _ArchivableView._makeView(view:inputs:)(a1, a2, a3, v8, a4);
}

double static _ArchivableView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double result;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;

  v51 = a4;
  v57 = a3;
  v53 = a5;
  v52 = 0;
  v80 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *a2;
  v54 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v49 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 8);
  v55 = *((_DWORD *)a2 + 7);
  v56 = v8;
  v9 = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 15);
  v58 = *((_DWORD *)a2 + 14);
  v59 = v9;
  v13 = *((_DWORD *)a2 + 16);
  v14 = *((_DWORD *)a2 + 17);
  v15 = *((_DWORD *)a2 + 19);
  v50 = *((_DWORD *)a2 + 18);
  v16 = *((_DWORD *)a2 + 20);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v48 = v5;
  if ((v64 & 1) == 0)
  {
    v64 = v6;
    LODWORD(v65) = v54;
    v66 = v7;
    v67 = v49;
    v68 = v55;
    v69 = v56;
    v70 = v59 & 0xFFFFFFFD;
    v71 = v10;
    v72 = v11;
    v73 = v58;
    v74 = v12;
    v75 = v13;
    v76 = v14;
    v77 = v50;
    v78 = v15;
    v79 = v16;
    v17 = v51;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = v57;
    static View.makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v62 = v60;
    v63 = v61;
    if ((v59 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v44 = v12;
  v45 = v10;
  v46 = v13;
  v43 = v15;
  v47 = v16;
  _ViewOutputs.init()();
  v62 = v64;
  v63 = *(double *)&v65;
  v64 = v11;
  LODWORD(v65) = v58;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    _DisplayList_Identity.init()();
    v41 = v64;
    v42 = v7;
    v38 = v14;
    LODWORD(v60) = v64;
    _ViewInputs.pushIdentity(_:)();
    type metadata accessor for _GraphValue();
    v40 = _GraphValue.value.getter();
    v39 = _ViewInputs.animatedPosition()();
    v37 = _ViewInputs.animatedSize()();
    HIWORD(v66) = HIWORD(v7);
    v67 = v49;
    v68 = v55;
    v69 = v56;
    v70 = v59;
    v71 = v45;
    v72 = v11;
    v73 = v58;
    v74 = v44;
    v75 = v46;
    v76 = v14;
    v77 = v50;
    v78 = v43;
    v79 = v47;
    v19 = _ViewInputs.containerPosition.getter();
    HIDWORD(v64) = v40;
    *(double *)&v65 = COERCE_DOUBLE(__PAIR64__(v37, v39));
    LODWORD(v66) = v19;
    WORD2(v66) = 0;
    MEMORY[0x1E0C80A78](v19, v20);
    v21 = v57;
    v17 = v51;
    v35 = type metadata accessor for ArchivableDisplayList(0, v57, v51, v22);
    v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableDisplayList<A>, v35);
    type metadata accessor for Attribute<LayoutComputer>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>);
    v23 = v52;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v34, v35, MEMORY[0x1E0DEDCE8], v24, MEMORY[0x1E0DEDD18], v25);
    v52 = v23;
    v18 = v21;
    LOBYTE(v21) = v59;
    LOBYTE(v64) = 0;
    _ViewOutputs.subscript.setter();
    if ((v21 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v17 = v51;
  v18 = v57;
  if ((v59 & 2) != 0)
  {
LABEL_8:
    LODWORD(v64) = v48;
    type metadata accessor for _GraphValue();
    v26 = _GraphValue.value.getter();
    LODWORD(v64) = v26;
    MEMORY[0x1E0C80A78](v26, v27);
    v29 = type metadata accessor for ArchivableLayoutComputer(0, v18, v17, v28);
    v35 = v29;
    v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLayoutComputer<A>, v29);
    type metadata accessor for Attribute<LayoutComputer>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v34, v29, MEMORY[0x1E0DEDCE8], v30, MEMORY[0x1E0DEDD18], v31);
    LOBYTE(v64) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
LABEL_9:
  v32 = v53;
  *(_QWORD *)v53 = v62;
  result = v63;
  v32[1] = v63;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, a3);
  return static _ArchivableView._makeViewList(view:inputs:)();
}

uint64_t static _ArchivableView._makeViewList(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView);
  return 1;
}

uint64_t static _ArchivableView._viewListCount(inputs:)()
{
  return 1;
}

uint64_t static _ArchivableView.registerDecoder()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for ArchivableFactory(0, a1, a2, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, v4);
  return static ViewDecoders.registerDecodableFactoryType<A, B>(_:forType:)();
}

double protocol witness for _ArchivableView.sizeThatFits(in:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  return result;
}

uint64_t ArchivableDisplayList.updateValue()(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t Value;
  char v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD v31[3];
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v31 - v10;
  v12 = *v2;
  v13 = v2[2];
  v31[2] = v2[3];
  v32 = v12;
  v14 = v2[4];
  v31[0] = v13;
  v31[1] = v14;
  LOWORD(v15) = *((_WORD *)v2 + 10);
  Value = AGGraphGetValue();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v11, Value, v4);
  DisplayList.Version.init(forUpdate:)();
  v20 = v40;
  if ((v18 & 1) != 0)
  {
    if ((_QWORD)v40)
      v15 = (2 * ((33 * ((unint64_t)v40 >> 16)) ^ v40)) | 1;
    else
      LOWORD(v15) = 0;
    *((_WORD *)v2 + 10) = v15;
  }
  v21 = swift_allocObject();
  v19(v7, (uint64_t)v11, v4);
  v23 = type metadata accessor for ArchivableFactory(0, v4, *(_QWORD *)(a1 + 24), v22);
  *(_QWORD *)(v21 + 40) = v23;
  *(_QWORD *)(v21 + 48) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, v23);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 16));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v7, v4);
  v40 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v40 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v35 = v21 | 0xB000000000000000;
  v36 = (unsigned __int16)v15;
  v37 = 0;
  v39 = 0;
  v38 = 0;
  v25 = (__int128 *)AGGraphGetValue();
  v26 = v25[1];
  v40 = *v25;
  v41 = v26;
  v27 = swift_retain();
  MEMORY[0x18D75BE3C](v27);
  v34 = v32;
  v33 = v20;
  DisplayList.Item.init(_:frame:identity:version:)();
  v28 = v42;
  v29 = v43;
  outlined copy of DisplayList.Item.Value(v42, v43);
  DisplayList.init(_:)();
  *(_QWORD *)&v40 = v35;
  WORD4(v40) = v36;
  BYTE10(v40) = BYTE2(v36);
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Item.Value(v28, v29);
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t ArchivableLayoutComputer.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[10];
  char v23;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ArchivableLayoutComputer.Engine(0, v3, *(_QWORD *)(v7 + 24), v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v22 - v12;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  default argument 0 of ViewSizeCache.init(cache:)();
  ViewSizeCache.init(cache:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v13, v6, v3);
  v15 = &v13[*(int *)(v9 + 36)];
  v16 = v22[9];
  *((_OWORD *)v15 + 8) = v22[8];
  *((_OWORD *)v15 + 9) = v16;
  v15[160] = v23;
  v17 = v22[5];
  *((_OWORD *)v15 + 4) = v22[4];
  *((_OWORD *)v15 + 5) = v17;
  v18 = v22[7];
  *((_OWORD *)v15 + 6) = v22[6];
  *((_OWORD *)v15 + 7) = v18;
  v19 = v22[1];
  *(_OWORD *)v15 = v22[0];
  *((_OWORD *)v15 + 1) = v19;
  v20 = v22[3];
  *((_OWORD *)v15 + 2) = v22[2];
  *((_OWORD *)v15 + 3) = v20;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLayoutComputer<A>, a1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLayoutComputer<A>.Engine, v9);
  StatefulRule<>.update<A>(to:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

double ArchivableLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v9, v6);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *((_BYTE *)v14 + 8);
  v16 = v14[2];
  v17 = *((_BYTE *)v14 + 24);
  v31 = *v14;
  v13 = v31;
  v32 = v15;
  v33 = v16;
  v34 = v17;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v18 + 16))(v5, v2, a2, v10);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v12, v5, v7);
  v19 = *(_QWORD *)(a2 + 24);
  v24 = v7;
  v25 = v19;
  v26 = v12;
  v27 = v13;
  v28 = v15;
  v29 = v16;
  v30 = v17;
  ViewSizeCache.get(_:makeValue:)();
  v21 = v20;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v12, v7);
  return v21;
}

uint64_t ArchivableFactory.makeView()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = MEMORY[0x1E0C80A78](a1, v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  return AnyView.init<A>(_:)();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  __int128 v11;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = *(int *)(a1 + 56);
  v10 = *(_DWORD *)(v1 + *(int *)(a1 + 52));
  v11 = *(_OWORD *)(v1 + v6);
  MEMORY[0x18D75B4AC](v1, &type metadata for ArchivablePlaceholder, v3, &protocol witness table for ArchivablePlaceholder);
  v7 = *(_QWORD *)(a1 + 40);
  v9[0] = &protocol witness table for ArchivablePlaceholder;
  v9[1] = v7;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v9);
  return AnyView.init<A>(_:)();
}

uint64_t ArchivableFactory.encoding()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;

  v5 = a2 + 2;
  *a2 = _typeName(_:qualified:)();
  a2[1] = v6;
  a2[5] = a1;
  a2[6] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, a1);
  a2[7] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, a1);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
}

{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;

  v5 = a2 + 2;
  *a2 = _typeName(_:qualified:)();
  a2[1] = v6;
  a2[5] = a1;
  a2[6] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, a1);
  a2[7] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>, a1);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
}

uint64_t ArchivableFactory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 2003134838 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265696669646F6DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t ArchivableFactory.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for ArchivableFactory.CodingKeys(255, v13, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t ArchivableFactory.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v29 = a4;
  v33 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v34 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArchivableFactory.CodingKeys(255, v8, v9, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>.CodingKeys, v11);
  v35 = type metadata accessor for KeyedDecodingContainer();
  v30 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v12);
  v14 = (char *)&v28 - v13;
  v31 = a2;
  v32 = a3;
  v16 = type metadata accessor for ArchivableFactory(0, a2, a3, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v28 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v21 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    v22 = v20;
    v28 = v17;
    v36 = v16;
    v23 = v30;
    v24 = v31;
    v25 = v33;
    v26 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v35);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v26, v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v29, v22, v36);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableFactory<A>.CodingKeys()
{
  return 2003134838;
}

{
  char *v0;

  return ArchivableFactory.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableFactory<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ArchivableFactory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

{
  uint64_t result;

  result = ArchivableFactory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ArchivableFactory<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
  *a1 = result & 1;
  return result;
}

{
  uint64_t result;

  result = protocol witness for static AccessibilityViewModifier.options.getter in conformance AccessibilityAttachmentModifier();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableFactory<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableFactory<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableFactory<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableFactory<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ArchivableFactory.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableFactory<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ArchivableFactory.encode(to:)(a1, a2, a3, a4);
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance ArchivableFactory<A>(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(a1 + 16));
}

{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(a1 + 16));
}

uint64_t type metadata accessor for ArchivableLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivableLayoutComputer);
}

uint64_t type metadata accessor for ArchivableDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivableDisplayList);
}

uint64_t type metadata accessor for ArchivableFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivableFactory);
}

uint64_t dispatch thunk of _ArchivableView.sizeThatFits(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t getEnumTagSinglePayload for ArchivableFactory(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187747250 + 4 * byte_187C558B0[(v7 - 1)]))();
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_187B42244 + 4 * byte_187C91600[v8]))();
}

void storeEnumTagSinglePayload for ArchivableFactory(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTagSinglePayload for ArchivableDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 22))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ArchivableDisplayList(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 22) = v3;
  return result;
}

void base witness table accessor for AnyViewFactory in ArchivableFactory<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ArchivableDisplayList<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ArchivableLayoutComputer<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivableLayoutComputer.Engine);
}

uint64_t sub_1877474DC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t type metadata accessor for ArchivableFactory.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivableFactory.CodingKeys);
}

uint64_t storeEnumTagSinglePayload for ArchivableFactory.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18774754C + 4 * byte_187C558CA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18774756C + 4 * byte_187C558CF[v4]))();
}

_BYTE *sub_18774754C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18774756C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187747574(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18774757C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187747584(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18774758C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t type metadata completion function for ArchivableLayoutComputer.Engine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArchivableLayoutComputer.Engine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_OWORD *)(v11 + 16);
    v12 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v12;
    v14 = *(_OWORD *)(v11 + 96);
    v16 = *(_OWORD *)(v11 + 48);
    v15 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(v10 + 96) = v14;
    *(_OWORD *)(v10 + 48) = v16;
    *(_OWORD *)(v10 + 64) = v15;
    v18 = *(_OWORD *)(v11 + 128);
    v17 = *(_OWORD *)(v11 + 144);
    v19 = *(_OWORD *)(v11 + 112);
    *(_BYTE *)(v10 + 160) = *(_BYTE *)(v11 + 160);
    *(_OWORD *)(v10 + 128) = v18;
    *(_OWORD *)(v10 + 144) = v17;
    *(_OWORD *)(v10 + 112) = v19;
  }
  return v4;
}

uint64_t initializeWithCopy for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  v11 = *(_OWORD *)(v8 + 96);
  v13 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  v15 = *(_OWORD *)(v8 + 128);
  v14 = *(_OWORD *)(v8 + 144);
  v16 = *(_OWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 160) = *(_BYTE *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithCopy for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)v7 = v11;
  v12 = *(_OWORD *)(v8 + 56);
  v13 = *(_OWORD *)(v8 + 72);
  v14 = *(_OWORD *)(v8 + 88);
  *(_BYTE *)(v7 + 104) = *(_BYTE *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  v15 = *(_BYTE *)(v8 + 160);
  v17 = *(_OWORD *)(v8 + 128);
  v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(_BYTE *)(v7 + 160) = v15;
  return a1;
}

uint64_t initializeWithTake for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  v11 = *(_OWORD *)(v8 + 96);
  v13 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  v15 = *(_OWORD *)(v8 + 128);
  v14 = *(_OWORD *)(v8 + 144);
  v16 = *(_OWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 160) = *(_BYTE *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithTake for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)v7 = v11;
  v12 = *(_OWORD *)(v8 + 56);
  v13 = *(_OWORD *)(v8 + 72);
  v14 = *(_OWORD *)(v8 + 88);
  *(_BYTE *)(v7 + 104) = *(_BYTE *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  v15 = *(_BYTE *)(v8 + 160);
  v17 = *(_OWORD *)(v8 + 128);
  v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(_BYTE *)(v7 + 160) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableLayoutComputer.Engine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = (a2 - v5 + 255) >> (8 * (((*(_BYTE *)(v4 + 64) + 7) & 0xF8) - 95));
  if (((*(_DWORD *)(v4 + 64) + 7) & 0xFFFFFFF8) + 161 < 4)
    v7 = v6 + 1;
  else
    v7 = 2;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1877479C8 + 4 * byte_187C558D4[v9]))();
}

void storeEnumTagSinglePayload for ArchivableLayoutComputer.Engine(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 161;
  if (v7 >= a3)
  {
    v12 = 0u;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * (((*(_BYTE *)(v6 + 64) + 7) & 0xF8) - 95));
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_187747B40()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187747B48(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187747B50);
}

void sub_187747B6C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187747B74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_187747B7C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x187747B84);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void base witness table accessor for Equatable in ArchivableFactory<A>.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for CustomDebugStringConvertible in ArchivableFactory<A>.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for CustomStringConvertible in ArchivableFactory<A>.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in ArchivableLayoutComputer.Engine.sizeThatFits(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_BYTE *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 32))(&v7, v1);
}

UIContextMenuConfiguration_optional __swiftcall ContextMenuBridge.outermostConfiguration()()
{
  objc_class *v0;
  Swift::Bool v1;
  objc_class *v2;
  UIContextMenuConfiguration_optional result;

  v0 = (objc_class *)ContextMenuBridge.outermostContextMenuResponder.getter();
  if (v0)
  {
    v2 = (objc_class *)ContextMenuBridge.menuConfigurationFromResponder(_:)(v0);
    swift_release();
    v0 = v2;
  }
  result.value.super.isa = v0;
  result.is_nil = v1;
  return result;
}

id specialized UIViewSnapshotResponder.platformPreviewTarget<A>(host:preferredContainer:)(void *a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  double v19;
  CGSize v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  double x;
  double y;
  CGSize size;
  double v31;
  double v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v3 = v2;
  AGGraphClearUpdate();
  v6 = *(_DWORD *)(v2 + 88);
  v7 = *(_QWORD *)(v2 + 96);
  v8 = *(_DWORD *)(v2 + 160);
  *(_QWORD *)v38 = *(_QWORD *)(v2 + 80);
  *(_DWORD *)&v38[8] = v6;
  *(_QWORD *)&v38[16] = v7;
  v39 = *(_OWORD *)(v2 + 104);
  v40 = *(_OWORD *)(v2 + 120);
  v41 = *(_OWORD *)(v2 + 136);
  v42 = *(_QWORD *)(v2 + 152);
  v43 = v8;
  _ViewInputs.position.getter();
  *(_OWORD *)v38 = *(_OWORD *)AGGraphGetValue();
  v9 = MEMORY[0x18D755E9C]();
  v11 = v10;
  AGGraphSetUpdate();
  v12 = v11 - *(double *)(v2 + 240);
  v44.origin.x = v9 - *(double *)(v2 + 232);
  v44.origin.y = v12;
  v44.size = *(CGSize *)(v2 + 216);
  type metadata accessor for HostingScrollViewResponder();
  ResponderNode.firstAncestor<A>(ofType:)();
  if (!*(_QWORD *)v38)
  {
LABEL_9:
    hostingViewCoordinateSpace.getter();
    LOBYTE(v40) = 1;
    AGGraphClearUpdate();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
    static Update.dispatchImmediately<A>(_:)();
    AGGraphSetUpdate();
    if (v34 == 1)
      ViewTransform.init()();
    ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
    CGRect.convert(to:transform:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v38);
    v17 = a1;
    if (!a2)
      goto LABEL_16;
    goto LABEL_12;
  }
  v13 = (void *)MEMORY[0x18D760234](*(_QWORD *)v38 + 48);
  if (!v13)
  {
    swift_release();
    goto LABEL_9;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, sel_superview);

  swift_release();
  if (!v15)
    goto LABEL_9;
  v16 = objc_msgSend(v15, sel_window);
  if (!v16)
  {

    goto LABEL_9;
  }

  v17 = v15;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v35 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    *(_QWORD *)v38 = v35;
    *(_OWORD *)&v38[8] = v36;
    v39 = v37;
  }
  ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v38);

  swift_release();
  if (!a2)
    goto LABEL_16;
LABEL_12:
  if (v17 == a2)
  {
LABEL_16:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragPreviewTarget);
    x = v44.origin.x;
    y = v44.origin.y;
    size = v44.size;
    v31 = x + CGRectGetWidth(v44) * 0.5;
    v47.origin.x = x;
    v47.origin.y = y;
    v47.size = size;
    v32 = y + CGRectGetHeight(v47) * 0.5;
    v27 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithContainer_center_, v17, v31, v32);
    goto LABEL_17;
  }
  v18 = v44.origin.x;
  v19 = v44.origin.y;
  v20 = v44.size;
  v21 = a2;
  v45.origin.x = v18;
  v45.origin.y = v19;
  v45.size = v20;
  v22 = v18 + CGRectGetWidth(v45) * 0.5;
  v46.origin.x = v18;
  v46.origin.y = v19;
  v46.size = v20;
  objc_msgSend(v17, sel_convertPoint_toCoordinateSpace_, v21, v22, v19 + CGRectGetHeight(v46) * 0.5);
  v24 = v23;
  v26 = v25;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragPreviewTarget);
  v27 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithContainer_center_, v21, v24, v26);

  v17 = v21;
LABEL_17:

  return v27;
}

{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  double v19;
  CGSize v20;
  id v21;
  double v22;
  double v23;
  double v24;
  id v25;
  double x;
  double y;
  CGSize size;
  double v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[24];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v3 = v2;
  AGGraphClearUpdate();
  v6 = *(_DWORD *)(v2 + 88);
  v7 = *(_QWORD *)(v2 + 96);
  v8 = *(_DWORD *)(v2 + 160);
  *(_QWORD *)v35 = *(_QWORD *)(v2 + 80);
  *(_DWORD *)&v35[8] = v6;
  *(_QWORD *)&v35[16] = v7;
  v36 = *(_OWORD *)(v2 + 104);
  v37 = *(_OWORD *)(v2 + 120);
  v38 = *(_OWORD *)(v2 + 136);
  v39 = *(_QWORD *)(v2 + 152);
  v40 = v8;
  _ViewInputs.position.getter();
  *(_OWORD *)v35 = *(_OWORD *)AGGraphGetValue();
  v9 = MEMORY[0x18D755E9C]();
  v11 = v10;
  AGGraphSetUpdate();
  v12 = v11 - *(double *)(v2 + 240);
  v41.origin.x = v9 - *(double *)(v2 + 232);
  v41.origin.y = v12;
  v41.size = *(CGSize *)(v2 + 216);
  type metadata accessor for HostingScrollViewResponder();
  ResponderNode.firstAncestor<A>(ofType:)();
  if (!*(_QWORD *)v35)
  {
LABEL_9:
    hostingViewCoordinateSpace.getter();
    LOBYTE(v37) = 1;
    AGGraphClearUpdate();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
    static Update.dispatchImmediately<A>(_:)();
    AGGraphSetUpdate();
    if (v31 == 1)
      ViewTransform.init()();
    ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
    CGRect.convert(to:transform:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v35);
    v17 = a1;
    if (!a2)
      goto LABEL_16;
    goto LABEL_12;
  }
  v13 = (void *)MEMORY[0x18D760234](*(_QWORD *)v35 + 48);
  if (!v13)
  {
    swift_release();
    goto LABEL_9;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, sel_superview);

  swift_release();
  if (!v15)
    goto LABEL_9;
  v16 = objc_msgSend(v15, sel_window);
  if (!v16)
  {

    goto LABEL_9;
  }

  v17 = v15;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v32 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    *(_QWORD *)v35 = v32;
    *(_OWORD *)&v35[8] = v33;
    v36 = v34;
  }
  ViewTransform.appendPosition(_:)(*(CGPoint *)(v3 + 232));
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v35);

  swift_release();
  if (!a2)
    goto LABEL_16;
LABEL_12:
  if (v17 == a2)
  {
LABEL_16:
    x = v41.origin.x;
    y = v41.origin.y;
    size = v41.size;
    v29 = x + CGRectGetWidth(v41) * 0.5;
    v44.origin.x = x;
    v44.origin.y = y;
    v44.size = size;
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B88]), sel_initWithContainer_center_, v17, v29, y + CGRectGetHeight(v44) * 0.5);
    goto LABEL_17;
  }
  v18 = v41.origin.x;
  v19 = v41.origin.y;
  v20 = v41.size;
  v21 = a2;
  v42.origin.x = v18;
  v42.origin.y = v19;
  v42.size = v20;
  v22 = v18 + CGRectGetWidth(v42) * 0.5;
  v43.origin.x = v18;
  v43.origin.y = v19;
  v43.size = v20;
  objc_msgSend(v17, sel_convertPoint_toCoordinateSpace_, v21, v22, v19 + CGRectGetHeight(v43) * 0.5);
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B88]), sel_initWithContainer_center_, v21, v23, v24);

  v17 = v21;
LABEL_17:

  return v25;
}

id UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  id (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v9 = MEMORY[0x1E0C809B0];
  if (!a2)
  {
    v10 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v18 = a2;
  v19 = a3;
  v14 = MEMORY[0x1E0C809B0];
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
  v17 = &block_descriptor_49_0;
  v10 = _Block_copy(&v14);
  swift_retain();
  swift_release();
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v18 = a4;
  v19 = a5;
  v14 = v9;
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  v17 = &block_descriptor_46;
  v11 = _Block_copy(&v14);
  swift_retain();
  swift_release();
LABEL_6:
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_configurationWithIdentifier_previewProvider_actionProvider_, a1, v10, v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
  swift_unknownObjectRelease();
  _Block_release(v11);
  _Block_release(v10);
  return v12;
}

uint64_t ContextMenuBridge.outermostContextMenuResponder.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  result = MEMORY[0x18D760234]((char *)v0 + direct field offset for ContextMenuBridge.host);
  if (result)
  {
    v5 = (void *)result;
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    v7 = ViewRendererHost.responderNode.getter();

    if (v7)
    {
      MEMORY[0x1E0C80A78](v8, v9);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesContextMenuInteraction()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesContextMenuInteraction()
{
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  return PropertyList.subscript.setter();
}

void ContextMenuBridge.presentedMenu.didset(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *MEMORY[0x1E0DEEDD8];
  if (*(_DWORD *)((char *)v1 + direct field offset for ContextMenuBridge.presentedMenu) != (_DWORD)a1
    || ((BYTE4(a1) & 1 ^ *((unsigned __int8 *)v1 + direct field offset for ContextMenuBridge.presentedMenu + 4)) & 1) != 0)
  {
    v4 = MEMORY[0x18D760234]((char *)v1 + direct field offset for ContextMenuBridge.host);
    if (v4)
    {
      v6 = (void *)v4;
      v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v3 & v2) + 0x50), *(_QWORD *)((v3 & v2) + 0x58), v5);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
    else
    {
      __break(1u);
    }
  }
}

id ContextMenuBridge.menuConfigurationFromResponder(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;
  uint64_t v18;

  v2 = v1;
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for PlatformItemList?);
  static Update.ensure<A>(_:)();
  if (v18)
    v4 = v18;
  else
    v4 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v4 + 16))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextMenuConfiguration);
    v5 = (objc_class *)type metadata accessor for ContextMenuIdentity();
    v6 = (char *)objc_allocWithZone(v5);
    v7 = &v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath];
    v8 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
    *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base] = a1;
    v17.receiver = v6;
    v17.super_class = v5;
    swift_retain();
    v9 = objc_msgSendSuper2(&v17, sel_init);
    v11 = (*(uint64_t (**)(id, uint64_t))(class metadata base offset for ContextMenuResponder + *a1 + 16))(v9, v10);
    v13 = v12;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v4;
    v15 = UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)((uint64_t)v9, v11, v13, (uint64_t)partial apply for closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:), v14);
    objc_msgSend(v15, sel_setPreferredMenuElementOrder_, qword_187C55FA0[*(char *)(v2 + direct field offset for ContextMenuBridge.menuOrder)], v17.receiver, v17.super_class);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v15;
}

uint64_t closure #1 in ContextMenuBridge.outermostContextMenuResponder.getter@<X0>(uint64_t *a1@<X1>, char *a2@<X8>)
{
  uint64_t result;
  char v5;

  type metadata accessor for ContextMenuResponder(0);
  result = swift_dynamicCastClass();
  if (result)
  {
    *a1 = result;
    swift_retain();
    result = swift_release();
    v5 = 2;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

void closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:)(uint64_t a1, uint64_t a2)
{
  UIMenuElementSize preferredElementSize;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  UIMenu *v10;
  uint64_t v11;
  UIImage_optional v12;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  preferredElementSize = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9D8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
  if (one-time initialization token for empty != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of MenuVisitor.MenuStackGroup(v8, v7 + v6);
  MenuVisitor.visit(_:uniqueNames:)(a2, &v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v12.value.super.isa = 0;
  v12.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v10, v9, (Swift::String_optional)0, v12, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0);
}

void *ContextMenuBridge.contextMenuResponder(at:)(double a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *result;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *v2;
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = (char *)v2 + direct field offset for ContextMenuBridge.host;
  result = (void *)MEMORY[0x18D760234]((char *)v2 + direct field offset for ContextMenuBridge.host);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = result;
  objc_msgSend(result, sel_convertPoint_toView_, 0, a1, a2);

  result = (void *)MEMORY[0x18D760234](v7);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v6 & v5) + 0x50), *(_QWORD *)((v6 & v5) + 0x58), v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v12);
  v13 = ViewRendererHost.responderNode.getter();

  result = 0;
  if (v13)
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      v14 = ViewResponder.hitTest(globalPoint:radius:options:)();
      swift_release();
      result = 0;
      if (v14)
      {
        type metadata accessor for ContextMenuResponder(0);
        ResponderNode.firstAncestor<A>(ofType:)();
        swift_release();
        return 0;
      }
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

id @objc ContextMenuBridge.contextMenuInteraction(_:configurationForMenuAtLocation:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a5;
  v9 = a1;
  v10 = specialized ContextMenuBridge.contextMenuInteraction(_:configurationForMenuAtLocation:)(a2, a3);

  return v10;
}

UITargetedPreview_optional __swiftcall ContextMenuBridge.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(UIContextMenuInteraction _, UIContextMenuConfiguration previewForHighlightingMenuWithConfiguration)
{
  uint64_t v2;
  id v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  objc_class *v11;
  Swift::Bool v12;
  char v13;
  UITargetedPreview_optional result;

  if (-[objc_class menuAppearance](_.super.isa, sel_menuAppearance) != (id)2)
  {
    v4 = -[objc_class identifier](previewForHighlightingMenuWithConfiguration.super.isa, sel_identifier);
    type metadata accessor for ContextMenuIdentity();
    v5 = *(_DWORD *)(*(_QWORD *)(swift_dynamicCastClassUnconditional()
                               + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base)
                   + 296);
    swift_retain();
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      static Update.dispatchImmediately<A>(_:)();
      swift_release();
      v6 = v13;
    }
    else
    {
      swift_release();
      v6 = 0;
    }
    v7 = v2 + direct field offset for ContextMenuBridge.presentedMenu;
    v8 = *(unsigned int *)(v2 + direct field offset for ContextMenuBridge.presentedMenu);
    v9 = *(unsigned __int8 *)(v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
    *(_DWORD *)v7 = v5;
    *(_BYTE *)(v7 + 4) = v6;
    v10 = 0x100000000;
    if (!v9)
      v10 = 0;
    ContextMenuBridge.presentedMenu.didset(v10 | v8);
    swift_unknownObjectRelease();
  }
  v11 = (objc_class *)ContextMenuBridge.targetedPreview(for:)(previewForHighlightingMenuWithConfiguration.super.isa);
  result.value.super.isa = v11;
  result.is_nil = v12;
  return result;
}

UIView *ContextMenuBridge.targetedPreview(for:)(void *a1)
{
  uint64_t v1;
  id v2;
  UIView *result;
  UIView *v4;
  unint64_t v5;

  v2 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  if (swift_dynamicCastClass())
  {
    result = (UIView *)MEMORY[0x18D760234](v1 + direct field offset for ContextMenuBridge.host);
    if (result)
    {
      v4 = result;
      v5 = (unint64_t)ContextMenuIdentity.preview(host:)(result);
      swift_unknownObjectRelease();

      return (UIView *)v5;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

id @objc ContextMenuBridge.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = (void *)ContextMenuBridge.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)((UIContextMenuInteraction)v6, (UIContextMenuConfiguration)v7);

  return v9;
}

UIView *@objc ContextMenuBridge.contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  UIView *v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized ContextMenuBridge.contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:)(v7);

  return v9;
}

uint64_t closure #1 in closure #1 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?);
  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_BYTE *)(Value + 16);
  *(_BYTE *)(a1 + 16) = v5;
  return outlined copy of ContextMenuPreviewAction?(v4, v3, v5);
}

void @objc ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(v9, a5);

  swift_unknownObjectRelease();
}

uint64_t ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v14[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:);
  *(_QWORD *)(v7 + 24) = v6;
  if (a3)
  {
    v14[4] = partial apply for closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:);
    v14[5] = v7;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_17_0;
    v8 = _Block_copy(v14);
    v9 = a2;
    v10 = a1;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(a3, sel_addCompletion_, v8);
    _Block_release(v8);
    swift_unknownObjectRelease();
  }
  else
  {
    v11 = a2;
    v12 = a1;
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
  }
  ContextMenuBridge.setupNotifications()();
  return swift_release();
}

uint64_t closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, UIContextMenuInteraction a2)
{
  id v3;

  v3 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  swift_dynamicCastClassUnconditional();
  swift_retain();
  ContextMenuResponder.startTrackingUpdates(interaction:)(a2);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain();
  static Update.enqueueAction(_:)();
  return swift_release();
}

uint64_t ContextMenuBridge.setupNotifications()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v7[6];

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for willPresent != -1)
    swift_once();
  v2 = static SheetInspectorBridgeNotifications.willPresent;
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v7[4] = partial apply for closure #1 in ContextMenuBridge.setupNotifications();
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v7[3] = &block_descriptor_26_0;
  v4 = _Block_copy(v7);
  swift_release();
  v5 = objc_msgSend(v1, sel_addObserverForName_object_queue_usingBlock_, v2, 0, 0, v4);

  _Block_release(v4);
  *(_QWORD *)(v0 + direct field offset for ContextMenuBridge.inspectorBridgeToken) = v5;
  return swift_unknownObjectRelease();
}

void @objc ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(v8, v9, a5);

  swift_unknownObjectRelease();
}

void closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v2 + direct field offset for ContextMenuBridge.presentedMenu;
    v5 = *(unsigned int *)(v2 + direct field offset for ContextMenuBridge.presentedMenu);
    v6 = *(unsigned __int8 *)(v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
    *(_DWORD *)v4 = 0;
    *(_BYTE *)(v4 + 4) = 0;
    v7 = 0x100000000;
    if (!v6)
      v7 = 0;
    ContextMenuBridge.presentedMenu.didset(v7 | v5);

  }
}

void @objc ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(v9, a5);

  swift_unknownObjectRelease();
}

UITargetedPreview_optional __swiftcall ContextMenuIdentity.preview(host:)(UIView *host)
{
  uint64_t v1;
  uint64_t v2;
  UIWindow *v4;
  Swift::Bool v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  id v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  objc_class *v22;
  uint64_t v23;
  void *v24;
  id v25;
  objc_class *v26;
  void *v27;
  UIView *v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  unsigned __int8 v53;
  _QWORD v54[4];
  unsigned __int8 v55;
  _OWORD v56[2];
  unsigned __int8 v57;
  _OWORD v58[2];
  unsigned __int8 v59;
  _BYTE v60[40];
  _QWORD v61[4];
  unsigned __int8 v62;
  UITargetedPreview_optional result;
  CGRect v64;
  CGRect v65;

  v2 = v1;
  v4 = -[UIView window](host, sel_window);
  if (!v4)
  {
    v22 = 0;
    goto LABEL_20;
  }

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
  v7 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  objc_msgSend(v6, sel_setBackgroundColor_, v7);

  v8 = OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base;
  swift_retain();
  UIViewSnapshotResponder.contentPath.getter((uint64_t)v54);
  v9 = v54[0];
  v10 = v54[1];
  v11 = v54[2];
  v12 = v54[3];
  v13 = v55;
  swift_release();
  outlined init with take of Path?((uint64_t)v54, (uint64_t)v60);
  if (v60[32] != 255)
  {
    v61[0] = v9;
    v61[1] = v10;
    v61[2] = v11;
    v61[3] = v12;
    v62 = v13;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path?);
    outlined copy of Path.Storage(v9, v10, v11, v12, v13);
    v14 = UIBezierPath.init(_:)((uint64_t)v61);
    objc_msgSend(v6, sel_setVisiblePath_, v14);

    outlined retain of TableColumnCustomizationID.Base((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
  }
  v53 = v13;
  swift_retain();
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    swift_release();
LABEL_19:
    v23 = *(_QWORD *)(v2 + v8);
    swift_retain();
    AGGraphClearUpdate();
    closure #1 in UIViewSnapshotResponder.snapshotView(host:)(v23, host, v58);
    AGGraphSetUpdate();
    swift_release();
    v24 = *(void **)&v58[0];
    swift_retain();
    v25 = specialized UIViewSnapshotResponder.platformPreviewTarget<A>(host:preferredContainer:)(host, 0);
    swift_release();
    v22 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_parameters_target_, v24, v6, v25);

    outlined retain of TableColumnCustomizationID.Base((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
    goto LABEL_20;
  }
  static Update.dispatchImmediately<A>(_:)();
  swift_release();
  if ((v58[0] & 1) == 0)
    goto LABEL_19;
  v15 = specialized UIView.firstDescendantWhere(_:)(host, *(unsigned int *)(*(_QWORD *)(v2 + v8) + 296), 1);
  if (!v15)
    goto LABEL_19;
  v51 = v15;
  v52 = v12;
  v16 = objc_msgSend(v15, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62)
    goto LABEL_23;
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v18)
  {
    v47 = v11;
    v48 = v10;
    v49 = v9;
    v50 = v6;
    v10 = v17 & 0xC000000000000001;
    v11 = 4;
    while (1)
    {
      v9 = v11 - 4;
      v19 = v10 ? (id)MEMORY[0x18D75E3BC](v11 - 4, v17) : *(id *)(v17 + 8 * v11);
      v20 = v19;
      v6 = (id)(v11 - 3);
      if (__OFADD__(v9, 1))
        break;
      v21 = UIView.findLiftPreview(kind:)(1);

      if (v21)
      {

        swift_bridgeObjectRelease();
        v27 = v21;
        v9 = v49;
        v6 = v50;
        v11 = v47;
        v10 = v48;
        goto LABEL_26;
      }
      ++v11;
      if (v6 == (id)v18)
      {
        swift_bridgeObjectRelease();
        v9 = v49;
        v6 = v50;
        v11 = v47;
        v10 = v48;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_25:
  v27 = v51;
LABEL_26:
  swift_retain();
  UIViewSnapshotResponder.previewTargetContainer(host:)(v28, host);
  v30 = v29;
  swift_release();
  outlined init with take of Path?((uint64_t)v54, (uint64_t)v56);
  if (v57 == 255)
  {
    objc_msgSend(v27, sel_bounds);
    v32 = v39;
    v34 = v40;
    v36 = v41;
    v38 = v42;
  }
  else
  {
    v58[0] = v56[0];
    v58[1] = v56[1];
    v59 = v57;
    outlined copy of Path.Storage(v9, v10, v11, v52, v53);
    Path.boundingRect.getter();
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v38 = v37;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
  }
  v64.origin.x = v32;
  v64.origin.y = v34;
  v64.size.width = v36;
  v64.size.height = v38;
  v43 = v32 + CGRectGetWidth(v64) * 0.5;
  v65.origin.x = v32;
  v65.origin.y = v34;
  v65.size.width = v36;
  v65.size.height = v38;
  objc_msgSend(v27, sel_convertPoint_toCoordinateSpace_, v30, v43, v34 + CGRectGetHeight(v65) * 0.5);
  v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B88]), sel_initWithContainer_center_, v30, v44, v45);
  v22 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_parameters_target_, v27, v6, v46);

  outlined retain of TableColumnCustomizationID.Base((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
LABEL_20:
  v26 = v22;
  result.value.super.isa = v26;
  result.is_nil = v5;
  return result;
}

void closure #1 in ContextMenuBridge.setupNotifications()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_dismissMenu);

  }
}

BOOL ContextMenuIdentity.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (v8)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base];
      swift_retain();

      if (v3)
      {
        v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base);
        swift_unknownObjectRelease();
        return v4 == v3;
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
  }
  return 0;
}

uint64_t ContextMenuIdentity.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(25);
  v0._object = (void *)0x8000000187BE7AB0;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t ObjC metadata update function for ContextMenuIdentity()
{
  return type metadata accessor for ContextMenuIdentity();
}

uint64_t type metadata accessor for ContextMenuIdentity()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContextMenuIdentity;
  if (!type metadata singleton initialization cache for ContextMenuIdentity)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ContextMenuIdentity()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ProvidesContextMenuInteraction()
{
  return &protocol witness table for ProvidesContextMenuInteraction;
}

id specialized ContextMenuBridge.contextMenuInteraction(_:configurationForMenuAtLocation:)(double a1, double a2)
{
  uint64_t v2;
  _QWORD *v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = ContextMenuBridge.contextMenuResponder(at:)(a1, a2);
  if (v3)
  {
    v4 = ContextMenuBridge.menuConfigurationFromResponder(_:)(v3);
    swift_release();
    return v4;
  }
  else
  {
    v6 = v2 + direct field offset for ContextMenuBridge.presentedMenu;
    v7 = *(unsigned int *)(v2 + direct field offset for ContextMenuBridge.presentedMenu);
    v8 = *(unsigned __int8 *)(v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
    *(_DWORD *)v6 = 0;
    *(_BYTE *)(v6 + 4) = 0;
    v9 = 0x100000000;
    if (!v8)
      v9 = 0;
    ContextMenuBridge.presentedMenu.didset(v9 | v7);
    return 0;
  }
}

UIView *specialized ContextMenuBridge.contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:)(void *a1)
{
  uint64_t v1;
  UIView *result;
  UIView *v4;
  UIWindow *v5;

  result = (UIView *)MEMORY[0x18D760234](v1 + direct field offset for ContextMenuBridge.host);
  if (result)
  {
    v4 = result;
    v5 = -[UIView window](result, sel_window);

    if (v5)
    {

      return ContextMenuBridge.targetedPreview(for:)(a1);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t aBlock;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t (*v19)();
  uint64_t v20;

  v3 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  v4 = swift_dynamicCastClass();
  if (!v4)
    return swift_unknownObjectRelease();
  if ((*(_BYTE *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base) + 308) & 1) != 0)
    return swift_unknownObjectRelease();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
    return swift_unknownObjectRelease();
  v5 = AGGraphClearUpdate();
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  v7 = (char)v17;
  if (v17 > 0xFDu)
    return swift_unknownObjectRelease();
  v9 = aBlock;
  v10 = v16;
  if ((v17 & 0x80) != 0)
  {
    swift_retain();
    swift_retain();
    objc_msgSend(a2, sel_setPreferredCommitStyle_, 1);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = aBlock;
    *(_QWORD *)(v13 + 24) = v10;
    *(_BYTE *)(v13 + 32) = v7 & 1;
    v19 = partial apply for closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
    v20 = v13;
    aBlock = MEMORY[0x1E0C809B0];
    v16 = 1107296256;
    v17 = thunk for @escaping @callee_guaranteed () -> ();
    v18 = &block_descriptor_32_1;
    v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_addAnimations_, v14);
    swift_unknownObjectRelease();
    outlined consume of ContextMenuPreviewAction?(v9, v10, v7);
    _Block_release(v14);
    swift_release();
    return swift_release();
  }
  else
  {
    outlined copy of ContextMenuPreviewAction(aBlock, v16, (char)v17);
    objc_msgSend(a2, sel_setPreferredCommitStyle_, 0);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
    v19 = partial apply for closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
    v20 = v11;
    aBlock = MEMORY[0x1E0C809B0];
    v16 = 1107296256;
    v17 = thunk for @escaping @callee_guaranteed () -> ();
    v18 = &block_descriptor_38_1;
    v12 = _Block_copy(&aBlock);
    outlined copy of ContextMenuPreviewAction(v9, v10, v7);
    swift_release();
    objc_msgSend(a2, sel_addAnimations_, v12);
    swift_unknownObjectRelease();
    outlined consume of ContextMenuPreviewAction?(v9, v10, v7);
    _Block_release(v12);
    return outlined consume of ContextMenuPreviewAction?(v9, v10, v7);
  }
}

void specialized ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(void *a1, void *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v14[6];

  v4 = *v2;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  if (*(_BYTE *)(*(_QWORD *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base)
                + 316) == 1)
  {
    swift_unknownObjectRelease();
    if (a2)
    {
LABEL_3:
      v7 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v8 = (_QWORD *)swift_allocObject();
      v8[2] = *(_QWORD *)((v5 & v4) + 0x50);
      v8[3] = *(_QWORD *)((v5 & v4) + 0x58);
      v8[4] = v7;
      v14[4] = partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:);
      v14[5] = v8;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1107296256;
      v14[2] = thunk for @escaping @callee_guaranteed () -> ();
      v14[3] = &block_descriptor_51;
      v9 = _Block_copy(v14);
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(a2, sel_addCompletion_, v9);
      _Block_release(v9);
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    swift_retain();
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
    swift_unknownObjectRelease();
    swift_release();
    if (a2)
      goto LABEL_3;
  }
  v10 = (char *)v2 + direct field offset for ContextMenuBridge.presentedMenu;
  v11 = *(unsigned int *)((char *)v2 + direct field offset for ContextMenuBridge.presentedMenu);
  v12 = *((unsigned __int8 *)v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
  *(_DWORD *)v10 = 0;
  v10[4] = 0;
  v13 = 0x100000000;
  if (!v12)
    v13 = 0;
  ContextMenuBridge.presentedMenu.didset(v13 | v11);
}

uint64_t sub_18774A788()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18774A7AC()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)()
{
  uint64_t v0;

  closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_18774A7DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  uint64_t v0;
  UIContextMenuInteraction v1;

  v1.super.isa = *(Class *)(v0 + 24);
  return closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(*(void **)(v0 + 16), v1);
}

uint64_t sub_18774A810()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  uint64_t v0;

  return closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #1 in ContextMenuBridge.setupNotifications()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ContextMenuBridge.setupNotifications()(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(a1);
}

uint64_t sub_18774A84C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18774A878()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18774A89C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in ContextMenuBridge.hostRemovedFromWindow()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_dismissMenu);
}

uint64_t sub_18774A8D0()
{
  return swift_deallocObject();
}

void *type metadata accessor for EnvironmentValues.PresentingContextMenuKey()
{
  return &unk_1E1AC3A70;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;
  uint64_t result;
  _QWORD v7[6];

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a2;
  v7[5] = a1;
  v5 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v4, (uint64_t (*)(uint64_t *))partial apply for closure #1 in UIView._findMatchedTransitionSource<A>(id:in:), (uint64_t)v7);
  type metadata accessor for MatchedTransitionSourceMarkingView();
  result = swift_dynamicCastClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t View.matchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.matchedTransitionSource<A, B>(id:in:configuration:)(a1, a2, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a3, a4, (uint64_t)&type metadata for EmptyMatchedTransitionSourceConfiguration, a5, a6, (uint64_t)&protocol witness table for EmptyMatchedTransitionSourceConfiguration);
}

uint64_t View.matchedTransitionSource<A, B>(id:in:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[24];
  char v29;

  v19 = a8;
  v18 = a5;
  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  v26 = 0u;
  v29 = 1;
  v15();
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a10 + 8))(&v26, a7, a10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a7);
  _convertToAnyHashable<A>(_:)();
  v20[0] = a2;
  v21 = v26;
  v22 = v27;
  v23 = *(_QWORD *)v28;
  v24 = *(_OWORD *)&v28[8];
  v25 = v29;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v20, v18, &type metadata for MatchedTransitionSourceModifier, v19);
  outlined destroy of MatchedTransitionSourceModifier((uint64_t)v20);
  swift_release();
  return swift_release();
}

uint64_t outlined destroy of MatchedTransitionSourceModifier(uint64_t a1)
{
  destroy for MatchedTransitionSourceModifier(a1);
  return a1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ResolvedMatchedTransitionSourceConfiguration.Shadow(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  _BOOL8 result;

  v3 = *(double *)(a1 + 8);
  v2 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v7 = *(double *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (v3 != v6)
      return 0;
    return v4 == v7 && v2 == v5;
  }
  v8 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
  result = 0;
  if ((v8 & 1) != 0 && v3 == v6)
    return v4 == v7 && v2 == v5;
  return result;
}

void MatchedTransitionSourceConfiguration.shadow(color:radius:x:y:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  _QWORD v7[4];

  v7[0] = a1;
  *(double *)&v7[1] = a5;
  *(double *)&v7[2] = a6;
  *(double *)&v7[3] = a7;
  MatchedTransitionSourceConfiguration.concat<A>(_:)((uint64_t)v7, a2, (uint64_t)&unk_1E1AD01B8, a3, (uint64_t)&protocol witness table for ShadowConfiguration, a4);
}

void MatchedTransitionSourceConfiguration.concat<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v17, v15);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for CombinedMatchedTransitionSourceConfiguration();
}

uint64_t sub_18774AD80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void MatchedTransitionSourceConfiguration.clipShape(_:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  __int128 v5;
  char v6;

  v4 = *((_BYTE *)a1 + 16);
  v5 = *a1;
  v6 = v4;
  MatchedTransitionSourceConfiguration.concat<A>(_:)((uint64_t)&v5, a2, (uint64_t)&unk_1E1ACD4F0, a3, (uint64_t)&protocol witness table for CornerConfiguration, a4);
}

void MatchedTransitionSourceConfiguration.background(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = a1;
  MatchedTransitionSourceConfiguration.concat<A>(_:)((uint64_t)&v4, a2, (uint64_t)&unk_1E1AF5F08, a3, (uint64_t)&protocol witness table for BackgroundColorConfiguration, a4);
}

void MatchedTransitionSourceConfiguration.background<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t CombinedMatchedTransitionSourceConfiguration._update(configuration:)(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(uint64_t, _QWORD))(a2[4] + 8))(a1, a2[2]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2[5] + 8))(a1, a2[3]);
}

uint64_t protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance BackgroundColorConfiguration(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

__n128 protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance CornerConfiguration(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  *(_BYTE *)(a1 + 56) = v1[1].n128_u8[0];
  result = *v1;
  *(__n128 *)(a1 + 40) = *v1;
  return result;
}

__n128 protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance ShadowConfiguration(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v3 = *v1;
  v6 = *(__n128 *)(v1 + 1);
  v4 = v1[3];
  swift_retain();
  swift_release();
  *(_QWORD *)a1 = v3;
  result = v6;
  *(__n128 *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

id UIView.findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  id v6;

  v4 = UIView._findMatchedTransitionSource<A>(id:in:)(a1, a2, a3, a4);
  if (!v4)
    return 0;
  v5 = (void *)v4;
  v6 = *(id *)(v4 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView);

  return v6;
}

id UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _BYTE *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v14[6];

  v6 = UIView._findMatchedTransitionSource<A>(id:in:)(a1, a2, a4, a5);
  if (!v6)
    return 0;
  v7 = (_BYTE *)v6;
  v8 = objc_msgSend(a3, sel_transitionCoordinator);
  if (v8)
  {
    v9 = v8;
    v7[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 1;
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
    objc_msgSend(v7, sel_setNeedsLayout);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v7;
    v14[4] = partial apply for closure #1 in UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:);
    v14[5] = v10;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v14[3] = &block_descriptor_52;
    v11 = _Block_copy(v14);
    v7 = v7;
    swift_release();
    objc_msgSend(v9, sel_animateAlongsideTransitionInView_animation_completion_, 0, 0, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  v12 = *(id *)&v7[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];

  return v12;
}

uint64_t closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  char v18;
  _BYTE v21[40];
  _BYTE v22[40];

  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v21[-v12 - 8];
  v15 = (uint64_t *)(*v14 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect);
  swift_beginAccess();
  v16 = *v15;
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16);
  v17(v13, a3, a4);
  if (v16 == a2)
  {
    outlined init with copy of AnyHashable((uint64_t)(v15 + 1), (uint64_t)v22);
    v17(v9, v13, a4);
    AnyHashable.init<A>(_:)();
    v18 = MEMORY[0x18D75E284](v22, v21);
    outlined destroy of AnyHashable((uint64_t)v21);
    outlined destroy of AnyHashable((uint64_t)v22);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v13, a4);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v13, a4);
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t closure #1 in MatchedTransitionSourceModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[144];

  MatchedTransitionSourceModifier.makeEffect(in:)((uint64_t)v3);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v3, a1);
  return outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v3);
}

__n128 MatchedTransitionSourceModifier.makeEffect(in:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int8x16_t v11;
  __int32 v12;
  int32x2_t v13;
  int8x16_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int8x16_t v18;
  __int32 v19;
  int32x2_t v20;
  __int128 v21;
  char v22;
  __n128 result;
  int8x16_t v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v2 = v1;
  v4 = *v1;
  outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)v26);
  v5 = v1[6];
  v6 = 0uLL;
  if (!v5)
  {
    v14 = 0uLL;
    v7 = 0;
    v25 = 0u;
    v15 = v1[10];
    if (!v15)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = v1[9];
  v25 = *(_OWORD *)(v1 + 7);
  dispatch thunk of AnyColorBox.resolve(in:)();
  v9 = v8;
  v6 = 0uLL;
  v11.i64[0] = v10;
  v11.i64[1] = v9;
  v13.i32[1] = v12;
  v14 = vorrq_s8((int8x16_t)vshll_n_s32(v13, 0x20uLL), v11);
  v15 = v1[10];
  if (v15)
  {
LABEL_3:
    v24 = v14;
    dispatch thunk of AnyColorBox.resolve(in:)();
    v18.i64[0] = v16;
    v18.i64[1] = v17;
    v20.i32[1] = v19;
    v14 = v24;
    v6 = vorrq_s8((int8x16_t)vshll_n_s32(v20, 0x20uLL), v18);
  }
LABEL_4:
  v21 = v26[1];
  *(_OWORD *)(a1 + 8) = v26[0];
  v22 = *((_BYTE *)v2 + 104);
  *(_QWORD *)a1 = v4;
  *(_OWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 40) = v27;
  *(int8x16_t *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v5 == 0;
  *(_OWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 88) = v7;
  *(int8x16_t *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 112) = v15 == 0;
  result = *(__n128 *)(v2 + 11);
  *(__n128 *)(a1 + 120) = result;
  *(_BYTE *)(a1 + 136) = v22;
  return result;
}

__n128 protocol witness for ViewModifier.body(content:) in conformance MatchedTransitionSourceModifier@<Q0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[5];
  _OWORD v8[2];

  outlined init with copy of MatchedTransitionSourceModifier(v1, (uint64_t)v7);
  v3 = swift_allocObject();
  v4 = v8[0];
  *(_OWORD *)(v3 + 80) = v7[4];
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 105) = *(_OWORD *)((char *)v8 + 9);
  v5 = v7[1];
  *(_OWORD *)(v3 + 16) = v7[0];
  *(_OWORD *)(v3 + 32) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(v3 + 48) = v7[2];
  *(__n128 *)(v3 + 64) = result;
  *a1 = partial apply for closure #1 in MatchedTransitionSourceModifier.body(content:);
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v3;
  return result;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance MatchedTransitionSourceSourceMarkingEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (_QWORD *)swift_allocObject();
  v5[5] = a1;
  v5[6] = lazy protocol witness table accessor for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect();
  v6 = swift_allocObject();
  v5[2] = v6;
  result = outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v2, v6 + 16);
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 3;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  lazy protocol witness table accessor for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect();
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t MatchedTransitionSourceSourceMarkingEffect.updatePlatformGroup(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[144];

  type metadata accessor for MatchedTransitionSourceMarkingView();
  swift_unknownObjectRetain();
  v1 = swift_dynamicCastClass();
  if (!v1)
    return swift_unknownObjectRelease();
  v2 = v1;
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v0, (uint64_t)v5);
  v3 = v2 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect;
  swift_beginAccess();
  outlined assign with copy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5, v3);
  swift_endAccess();
  MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(*(_BYTE *)(v2
                                                                           + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom));
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5);
  return swift_unknownObjectRelease();
}

uint64_t MatchedTransitionSourceSourceMarkingEffect.needsUpdateFor(newValue:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  _OWORD v5[7];
  _OWORD v6[2];
  _BYTE v7[144];
  _BYTE v8[32];
  uint64_t v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[144];
  _OWORD v18[9];
  _BYTE v19[40];

  outlined init with copy of TableColumnList(a1, (uint64_t)v19);
  type metadata accessor for PlatformGroupFactory();
  if ((swift_dynamicCast() & 1) == 0)
    memset(v18, 0, 137);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v1, (uint64_t)v17);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v18, (uint64_t)v8);
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v17, (uint64_t)v10);
  if (!v9)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
    if (!(_QWORD)v11)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
      v3 = 0;
      goto LABEL_10;
    }
LABEL_9:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?));
    v3 = 1;
    goto LABEL_10;
  }
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?((uint64_t)v8, (uint64_t)v7);
  if (!(_QWORD)v11)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
    outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v7);
    goto LABEL_9;
  }
  v5[6] = v15;
  v6[0] = v16[0];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v16 + 9);
  v5[2] = v11;
  v5[3] = v12;
  v5[4] = v13;
  v5[5] = v14;
  v5[0] = v10[0];
  v5[1] = v10[1];
  v2 = specialized static MatchedTransitionSourceSourceMarkingEffect.== infix(_:_:)((uint64_t)v7, (uint64_t)v5);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v7);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
  v3 = v2 ^ 1;
LABEL_10:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?);
  return v3 & 1;
}

char *protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  uint64_t v0;
  id v1;
  _BYTE v3[144];

  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(v0, (uint64_t)v3);
  v1 = objc_allocWithZone((Class)type metadata accessor for MatchedTransitionSourceMarkingView());
  return MatchedTransitionSourceMarkingView.init(effect:)((uint64_t)v3);
}

id protocol witness for PlatformGroupFactory.platformGroupContainer(_:) in conformance MatchedTransitionSourceSourceMarkingEffect()
{
  type metadata accessor for MatchedTransitionSourceMarkingView();
  return objc_retain(*(id *)(swift_dynamicCastClassUnconditional()
                           + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView));
}

id MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(char a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id *v10;
  id v11;
  int v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  double v28;
  _QWORD v30[8];

  v3 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView);
  v4 = objc_msgSend(v3, sel_layer);
  v5 = v1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect;
  swift_beginAccess();
  v6 = 0;
  if ((*(_BYTE *)(v5 + 112) & 1) == 0)
    v6 = (void *)Color.Resolved.cgColor.getter();
  objc_msgSend(v4, sel_setBackgroundColor_, v6);

  v7 = objc_msgSend(v3, sel_layer);
  v8 = *(_QWORD *)(v5 + 128);
  v30[0] = *(_QWORD *)(v5 + 120);
  v30[1] = v8;
  v30[2] = v30[0];
  v30[3] = v8;
  v30[4] = v30[0];
  v30[5] = v8;
  v30[6] = v30[0];
  v30[7] = v8;
  objc_msgSend(v7, sel_setCornerRadii_, v30);

  v9 = objc_msgSend(v3, sel_layer);
  v10 = (id *)MEMORY[0x1E0CD2A60];
  if (*(_BYTE *)(v5 + 136))
    v10 = (id *)MEMORY[0x1E0CD2A68];
  v11 = *v10;
  objc_msgSend(v9, sel_setCornerCurve_, v11);

  v12 = 0;
  v13 = objc_msgSend(v3, sel_layer);
  v14 = (void *)Color.Resolved.cgColor.getter();
  objc_msgSend(v13, sel_setShadowColor_, v14);

  v15 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v15, sel_setShadowRadius_, *(double *)(v5 + 72));

  v16 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v16, sel_setShadowOffset_, *(double *)(v5 + 80), *(double *)(v5 + 88));

  v17 = objc_msgSend(v3, sel_layer);
  v19 = v17;
  if ((a1 & 1) == 0 && (*(_BYTE *)(v5 + 64) & 1) == 0)
    v12 = *(_DWORD *)(v5 + 60);
  LODWORD(v18) = v12;
  objc_msgSend(v17, sel_setShadowOpacity_, v18);

  v20 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v20, sel_setMasksToBounds_, 1);

  v21 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView);
  v22 = objc_msgSend(v21, sel_layer);
  v23 = (void *)Color.Resolved.cgColor.getter();
  objc_msgSend(v22, sel_setShadowColor_, v23);

  v24 = objc_msgSend(v21, sel_layer);
  objc_msgSend(v24, sel_setShadowRadius_, *(double *)(v5 + 72));

  v25 = objc_msgSend(v21, sel_layer);
  objc_msgSend(v25, sel_setShadowOffset_, *(double *)(v5 + 80), *(double *)(v5 + 88));

  v26 = objc_msgSend(v21, sel_layer);
  v27 = v26;
  LODWORD(v28) = 0;
  if ((*(_BYTE *)(v5 + 64) & 1) == 0)
    LODWORD(v28) = *(_DWORD *)(v5 + 60);
  objc_msgSend(v26, sel_setShadowOpacity_, v28);

  return objc_msgSend(v21, sel_setHidden_, a1 & 1);
}

uint64_t sub_18774BC58()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:)()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom) = 0;
  return MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
}

uint64_t destroy for _ResolvedMatchedTransitionSourceConfiguration()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for _ResolvedMatchedTransitionSourceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ResolvedMatchedTransitionSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for _ResolvedMatchedTransitionSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ResolvedMatchedTransitionSourceConfiguration(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ResolvedMatchedTransitionSourceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ResolvedMatchedTransitionSourceConfiguration()
{
  return &type metadata for _ResolvedMatchedTransitionSourceConfiguration;
}

uint64_t dispatch thunk of MatchedTransitionSourceConfiguration._update(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for EmptyMatchedTransitionSourceConfiguration()
{
  return &type metadata for EmptyMatchedTransitionSourceConfiguration;
}

char *MatchedTransitionSourceMarkingView.init(effect:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  objc_class *ObjCClassFromMetadata;
  id v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  objc_super v23;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView;
  type metadata accessor for _UIGraphicsView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v7 = objc_allocWithZone(ObjCClassFromMetadata);
  v8 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v7, sel_init);
  v9 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView;
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v8[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 0;
  outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(a1, (uint64_t)&v8[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect]);

  v23.receiver = v8;
  v23.super_class = ObjectType;
  v10 = (char *)objc_msgSendSuper2(&v23, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = objc_msgSend(v10, sel_layer);
  objc_msgSend(v11, sel_setAllowsGroupOpacity_, 0);

  v12 = objc_msgSend(v10, sel_layer);
  objc_msgSend(v12, sel_setAllowsGroupBlending_, 0);

  v13 = objc_msgSend(v10, sel_layer);
  objc_msgSend(v13, sel_setShadowPathIsBounds_, 1);

  v14 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView;
  v15 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView], sel_layer);
  objc_msgSend(v15, sel_setAllowsGroupOpacity_, 0);

  v16 = objc_msgSend(*(id *)&v10[v14], sel_layer);
  objc_msgSend(v16, sel_setAllowsGroupBlending_, 0);

  v17 = objc_msgSend(*(id *)&v10[v14], sel_layer);
  objc_msgSend(v17, sel_setShadowPathIsBounds_, 1);

  objc_msgSend(v10, sel_addSubview_, *(_QWORD *)&v10[v14]);
  v18 = OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView;
  v19 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView], sel_layer);
  objc_msgSend(v19, sel_setAllowsGroupOpacity_, 0);

  v20 = objc_msgSend(*(id *)&v10[v18], sel_layer);
  objc_msgSend(v20, sel_setAllowsGroupBlending_, 0);

  v21 = objc_msgSend(*(id *)&v10[v18], sel_layer);
  objc_msgSend(v21, sel_setShadowPathIsBounds_, 1);

  objc_msgSend(v10, sel_addSubview_, *(_QWORD *)&v10[v18]);
  outlined destroy of MatchedTransitionSourceSourceMarkingEffect(a1);
  return v10;
}

Swift::Void __swiftcall MatchedTransitionSourceMarkingView.layoutSubviews()()
{
  char *v0;
  void *v1;
  void *v2;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_shadowView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
  v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);
  MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(v0[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom]);
}

uint64_t MatchedTransitionSourceMarkingView.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of MatchedTransitionSourceSourceMarkingEffect(v0 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect);
}

uint64_t type metadata accessor for MatchedTransitionSourceMarkingView()
{
  return objc_opt_self();
}

uint64_t sub_18774C368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceModifier, &type metadata for MatchedTransitionSourceModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier);
  }
  return result;
}

uint64_t sub_18774C404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

_UNKNOWN **sub_18774C45C()
{
  return &protocol witness table for CombinedMatchedTransitionSourceConfiguration<A, B>;
}

_UNKNOWN **sub_18774C468()
{
  return &protocol witness table for CombinedMatchedTransitionSourceConfiguration<A, B>;
}

_UNKNOWN **sub_18774C474()
{
  return &protocol witness table for CombinedMatchedTransitionSourceConfiguration<A, B>;
}

uint64_t sub_18774C480(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t getEnumTagSinglePayload for CombinedMatchedTransitionSourceConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18774C564 + 4 * byte_187C55FC0[v17 - 1]))();
}

void storeEnumTagSinglePayload for CombinedMatchedTransitionSourceConfiguration(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for CombinedMatchedTransitionSourceConfiguration()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeWithCopy for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t assignWithCopy for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedTransitionSourceSourceMarkingEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchedTransitionSourceSourceMarkingEffect()
{
  return &type metadata for MatchedTransitionSourceSourceMarkingEffect;
}

ValueMetadata *type metadata accessor for _ResolvedMatchedTransitionSourceConfiguration.Shadow()
{
  return &type metadata for _ResolvedMatchedTransitionSourceConfiguration.Shadow;
}

void *type metadata accessor for BackgroundColorConfiguration()
{
  return &unk_1E1AF5F08;
}

uint64_t getEnumTagSinglePayload for CornerConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

void *type metadata accessor for CornerConfiguration()
{
  return &unk_1E1ACD4F0;
}

uint64_t initializeWithCopy for _ResolvedMatchedTransitionSourceConfiguration.Shadow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ResolvedMatchedTransitionSourceConfiguration.Shadow(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _ResolvedMatchedTransitionSourceConfiguration.Shadow(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void *type metadata accessor for ShadowConfiguration()
{
  return &unk_1E1AD01B8;
}

uint64_t destroy for MatchedTransitionSourceModifier(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedTransitionSourceModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedTransitionSourceModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchedTransitionSourceModifier()
{
  return &type metadata for MatchedTransitionSourceModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in MatchedTransitionSourceSourceMarkingEffect()
{
  return &protocol witness table for MatchedTransitionSourceSourceMarkingEffect;
}

unint64_t lazy protocol witness table accessor for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MatchedTransitionSourceSourceMarkingEffect, &type metadata for MatchedTransitionSourceSourceMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceSourceMarkingEffect and conformance MatchedTransitionSourceSourceMarkingEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in MatchedTransitionSourceModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 8, a1 + 8);
  v5 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_BYTE *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 136);
  return a2;
}

uint64_t outlined assign with copy of MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  assignWithCopy for MatchedTransitionSourceSourceMarkingEffect(a2, a1);
  return a2;
}

uint64_t outlined destroy of MatchedTransitionSourceSourceMarkingEffect(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return a1;
}

unint64_t type metadata accessor for PlatformGroupFactory()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PlatformGroupFactory;
  if (!lazy cache variable for type metadata for PlatformGroupFactory)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PlatformGroupFactory);
  }
  return result;
}

uint64_t outlined init with copy of MatchedTransitionSourceSourceMarkingEffect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MatchedTransitionSourceSourceMarkingEffect?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MatchedTransitionSourceSourceMarkingEffect?);
  }
}

void type metadata accessor for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?))
  {
    type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?));
  }
}

uint64_t specialized static MatchedTransitionSourceSourceMarkingEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  BOOL v5;
  BOOL v6;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || (MEMORY[0x18D75E284](a1 + 8, a2 + 8) & 1) == 0)
    goto LABEL_23;
  v4 = *(_BYTE *)(a2 + 64);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 64))
      return v4 & 1;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 64) & 1) != 0)
      goto LABEL_23;
    v5 = *(float *)(a1 + 48) == COERCE_FLOAT(*(_QWORD *)(a2 + 48))
      && *(float *)(a1 + 52) == COERCE_FLOAT(HIDWORD(*(_QWORD *)(a2 + 48)));
    v6 = v5 && *(float *)(a1 + 56) == COERCE_FLOAT(*(_QWORD *)(a2 + 56));
    if (!v6 || *(float *)(a1 + 60) != COERCE_FLOAT(HIDWORD(*(_QWORD *)(a2 + 56))))
      goto LABEL_23;
  }
  if (*(double *)(a1 + 72) != *(double *)(a2 + 72)
    || (*(double *)(a1 + 80) == *(double *)(a2 + 80) ? (v8 = *(double *)(a1 + 88) == *(double *)(a2 + 88)) : (v8 = 0),
        !v8))
  {
LABEL_23:
    v4 = 0;
    return v4 & 1;
  }
  v4 = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 112))
      return v4 & 1;
LABEL_33:
    v4 = 0;
    if (*(double *)(a1 + 120) == *(double *)(a2 + 120) && *(double *)(a1 + 128) == *(double *)(a2 + 128))
      v4 = *(_BYTE *)(a1 + 136) ^ *(_BYTE *)(a2 + 136) ^ 1;
    return v4 & 1;
  }
  if ((*(_BYTE *)(a2 + 112) & 1) != 0)
    goto LABEL_23;
  v4 = 0;
  v10 = *(_QWORD *)(a2 + 96);
  if (*(float *)(a1 + 96) == *(float *)&v10 && *(float *)(a1 + 100) == *((float *)&v10 + 1))
  {
    v11 = *(_QWORD *)(a2 + 104);
    if (*(float *)(a1 + 104) == *(float *)&v11 && *(float *)(a1 + 108) == *((float *)&v11 + 1))
      goto LABEL_33;
  }
  return v4 & 1;
}

uint64_t outlined init with copy of MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MatchedTransitionSourceModifier(a2, a1);
  return a2;
}

uint64_t sub_18774D38C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MatchedTransitionSourceModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in MatchedTransitionSourceModifier.body(content:)(a1);
}

uint64_t sub_18774D3C8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_18774D430()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(a1, *(_QWORD *)(v1 + 32), *(_BYTE **)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_18774D4A4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>> and conformance EnvironmentReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>, MEMORY[0x1E0CE38A8]);
}

void type metadata accessor for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for EnvironmentReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>)
  {
    type metadata accessor for _ViewModifier_Content<MatchedTransitionSourceModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>);
  }
}

void type metadata accessor for _ViewModifier_Content<MatchedTransitionSourceModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<MatchedTransitionSourceModifier>)
  {
    lazy protocol witness table accessor for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<MatchedTransitionSourceModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<MatchedTransitionSourceModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<MatchedTransitionSourceModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = &protocol witness table for MatchedTransitionSourceSourceMarkingEffect;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void MatchedTransitionSourceConfiguration.clipShape<A>(_:)()
{
  MatchedTransitionSourceConfiguration.background<A>(_:)();
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v8, v9);
  outlined init with copy of AccessibilityCustomAttributes.Value(a3, (uint64_t)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  AccessibilityCustomAttributes.init(_:value:)();
  v12[0] = v12[1];
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57D0], (uint64_t)v12, 1, a4, MEMORY[0x1E0CE57D0], a5);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSNumber *v12;
  uint64_t v14;

  v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (NSNumber *)((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12->super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v12, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v12);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, double))MEMORY[0x1E0CB1C10]);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSNumber *v12;
  uint64_t v14;

  v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (NSNumber *)((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12->super.super.isa = Int8._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v12, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v12);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, double))MEMORY[0x1E0CB23E0]);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0CAFFF8]);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0CB0870]);
}

uint64_t outlined destroy of AccessibilityCustomAttributes.Value(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v15;

  v10 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v10, v10);
  v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = a3;
  swift_storeEnumTagMultiPayload();
  v13 = a3;
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v12, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v12);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, double))
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (uint64_t *)((char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v16 = a6(a3, v14);
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v16, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v16);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSNumber *v11;
  uint64_t v13;

  v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (NSNumber *)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11->super.super.isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v11, a3, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v11);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v12, v12);
  v14 = (uint64_t *)((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v14 = a3;
  v14[1] = a4;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v14, a5, a6);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v14);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;

  v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v12, v12);
  v14 = (uint64_t *)((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v14 = a3;
  v14[1] = a4;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(a3, a4);
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v14, a5, a6);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v14);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, double))
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a6(0, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, a3, v17);
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v16, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v16);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];

  v6 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v6, v7);
  outlined init with copy of AccessibilityCustomAttributes.Value(a1, (uint64_t)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  AccessibilityCustomAttributes.init(_:value:)();
  v11[0] = v11[1];
  v9 = lazy protocol witness table accessor for type AccessibilityCustomAttributes? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE57D0], (uint64_t)v11, 1, a2, MEMORY[0x1E0CE57D0], MEMORY[0x1E0CE57C8], v9, a3);
  return swift_bridgeObjectRelease();
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t (*)(uint64_t, double))MEMORY[0x1E0CB1C10], a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t (*)(uint64_t, double))MEMORY[0x1E0CB23E0], a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0CAFFF8], a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0CB0870], a3);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v11;

  v6 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v6, v6);
  v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = a1;
  swift_storeEnumTagMultiPayload();
  v9 = a1;
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v8, a2, a3);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v8);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t, double)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (uint64_t *)((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = a3(a1, v10);
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v12, a2, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v12);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSNumber *v7;
  uint64_t v9;

  v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (NSNumber *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7->super.super.isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v7, a1, a2);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v7);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v8, v8);
  v10 = (uint64_t *)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v10, a3, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v10);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;

  v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1E0C80A78](v8, v8);
  v10 = (uint64_t *)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(a1, a2);
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v10, a3, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v10);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(_QWORD, double)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3(0, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, a1, v13);
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v12, a2, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v12);
}

void type metadata accessor for AccessibilityCustomAttributes?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityCustomAttributes?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityCustomAttributes?);
  }
}

double TransformGestureAnchorHelper.startPoints(_:)()
{
  uint64_t Value;
  __int128 v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  _BYTE v24[48];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  MEMORY[0x18D75B908]();
  AGGraphClearUpdate();
  Value = AGGraphGetValue();
  v28 = *(_QWORD *)Value;
  v1 = *(_OWORD *)(Value + 24);
  v29 = *(_OWORD *)(Value + 8);
  v30 = v1;
  swift_retain();
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  v2 = (uint64_t *)AGGraphGetValue();
  v3 = *v2;
  v4 = v2[1];
  v5 = AGGraphSetUpdate();
  *(_QWORD *)&v20 = v3;
  *((_QWORD *)&v20 + 1) = v4;
  *(double *)&v6 = MEMORY[0x18D755E9C](v5);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v7, v6));
  AGGraphClearUpdate();
  v8 = AGGraphGetValue();
  v15 = *(_OWORD *)v8;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  AGGraphSetUpdate();
  v26 = v29;
  v25 = v28;
  v27 = v30;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 2;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v16, (uint64_t)v24);
  v24[41] = 4;
  swift_retain();
  outlined destroy of CoordinateSpace((uint64_t)&v16);
  ViewTransform.convert(_:point:)();
  outlined destroy of ViewTransform.Conversion((uint64_t)&v20);
  v11 = swift_release();
  v20 = v15;
  *(_QWORD *)&v21 = v9;
  *((_QWORD *)&v21 + 1) = v10;
  MEMORY[0x18D75BE3C](v11);
  UnitPoint.init(_:in:)();
  v13 = v12;
  swift_release();
  static Update.end()();
  return v13;
}

ValueMetadata *type metadata accessor for TransformGestureAnchorHelper()
{
  return &type metadata for TransformGestureAnchorHelper;
}

uint64_t key path setter for EnvironmentValues.listPadding : EnvironmentValues()
{
  return EnvironmentValues.listPadding.setter();
}

uint64_t EnvironmentValues.listPadding.setter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListPaddingAnchorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  swift_retain();
  PropertyList.subscript.setter();
  v1 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.listPadding(top:bottom:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char v10;

  if ((a4 & 1) != 0)
    v8 = !(a2 & 1);
  else
    v8 = !(a2 & 1) | 4u;
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(&v10);
  return View.contentMargins(_:_:for:)(v8, &v10, a5, a6);
}

uint64_t View.listPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char v5;

  v5 = 1;
  return View.contentMargins(_:_:for:)(a1, *(_QWORD *)&a4, 0, &v5, a2, a3);
}

uint64_t View.listPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 1;
  return View.contentMargins(_:_:for:)(a1, &v4, a2, a3);
}

uint64_t View.listPadding(anchor:)()
{
  swift_getKeyPath();
  OptionalEdgeInsets.init()();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t View.listPadding(_:_:anchor:)()
{
  swift_getKeyPath();
  OptionalEdgeInsets.init(_:edges:)();
  View.environment<A>(_:_:)();
  return swift_release();
}

{
  swift_getKeyPath();
  OptionalEdgeInsets.init(_:edges:)();
  View.environment<A>(_:_:)();
  return swift_release();
}

void static ListPaddingAnchor.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ListPaddingAnchor.readableContent.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ListPaddingAnchor.safeArea.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ListPaddingAnchor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_18774ED3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ListPadding>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ListPadding>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListPadding>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListPadding>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ListPadding>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ListPaddingAnchor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18774EE80 + 4 * byte_187C56405[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18774EEB4 + 4 * asc_187C56400[v4]))();
}

uint64_t sub_18774EEB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18774EEBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18774EEC4);
  return result;
}

uint64_t sub_18774EED0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18774EED8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18774EEDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18774EEE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage;
  if (!lazy protocol witness table cache variable for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListPaddingAnchor.Storage, &unk_1E1AC5398);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage);
  }
  return result;
}

uint64_t specialized static ListPadding.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 v34;

  if (*a1 == *a2)
  {
    v2 = a2[64];
    v3 = *((_QWORD *)a2 + 7);
    v4 = a2[48];
    v5 = *((_QWORD *)a2 + 5);
    v6 = a2[32];
    v7 = *((_QWORD *)a2 + 3);
    v8 = a2[16];
    v9 = *((_QWORD *)a2 + 1);
    v10 = a1[64];
    v11 = *((_QWORD *)a1 + 7);
    v12 = a1[48];
    v13 = *((_QWORD *)a1 + 5);
    v14 = a1[32];
    v15 = *((_QWORD *)a1 + 3);
    v16 = a1[16];
    v27 = *((_QWORD *)a1 + 1);
    v28 = v16;
    v29 = v15;
    v30 = v14;
    v31 = v13;
    v32 = v12;
    v33 = v11;
    v34 = v10;
    v19 = v9;
    v20 = v8;
    v21 = v7;
    v22 = v6;
    v23 = v5;
    v24 = v4;
    v25 = v3;
    v26 = v2;
    v17 = MEMORY[0x18D7593E8](&v27, &v19);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

void *type metadata accessor for ListPaddingAnchorKey()
{
  return &unk_1E1AD3830;
}

uint64_t type metadata accessor for DefaultPreviewDropPayloadResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DefaultPreviewDropPayloadResponder;
  if (!type metadata singleton initialization cache for DefaultPreviewDropPayloadResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DefaultPreviewDropPayloadResponder()
{
  return swift_initClassMetadata2();
}

uint64_t DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  outlined init with copy of TableColumnList(a6, (uint64_t)&v28);
  v15 = type metadata accessor for FunctionalDropDelegate();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a4;
  *(_BYTE *)(v16 + 40) = a5;
  outlined init with take of OptionalBinaryInteger(&v28, v16 + 48);
  v17 = *(_QWORD *)(v16 + 88);
  *(_QWORD *)(v16 + 88) = a7;
  *(_QWORD *)(v16 + 96) = a8;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(a3, a4);
  outlined copy of AppIntentExecutor?(a7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  v29 = v15;
  v30 = &protocol witness table for FunctionalDropDelegate;
  swift_retain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v28 = v16;
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  if ((a1 & 1) != 0)
  {
    outlined init with take of OptionalBinaryInteger(&v28, (uint64_t)v23);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v24 = 0;
    memset(v23, 0, sizeof(v23));
  }
  outlined assign with take of DropDelegate?((uint64_t)v23, (uint64_t)&v25);
  v18 = v26;
  *(_OWORD *)a9 = v25;
  *(_OWORD *)(a9 + 16) = v18;
  *(_QWORD *)(a9 + 32) = v27;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a7);
  outlined consume of Binding<NavigationSplitViewColumn>?(a3, a4);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(a6);
}

__n128 DropPreviewModifier.init(base:preview:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v5;

  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  return result;
}

unint64_t specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  char v21;
  unint64_t v23;
  int v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  v31[5] = *MEMORY[0x1E0C80C00];
  outlined init with take of AccessibilityActivationPointStorage?((uint64_t)a1, (uint64_t)v31);
  v8 = v31[0];
  v9 = v31[1];
  v10 = v31[2];
  v11 = v31[3];
  v12 = v31[4];
  v25 = *(_QWORD **)(a2 + 48);
  v26 = *(_DWORD *)(a2 + 56);
  v27 = v25;
  LODWORD(v28) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v23 = a4;
    outlined retain of AccessibilityActivationPointStorage?(a1);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v24 = Dictionary.init(minimumCapacity:)();
    v13 = MEMORY[0x1E0CE67B0];
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E0CE67B0]);
    v29 = v14;
    v30 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, v13);
    v15 = (_QWORD *)swift_allocObject();
    v27 = v15;
    v15[2] = v8;
    v15[3] = v9;
    v15[4] = v10;
    v15[5] = v11;
    v15[6] = v12;
    specialized Dictionary.subscript.setter((uint64_t)&v27, MEMORY[0x1E0CE5788]);
    AccessibilityAttachment.init(properties:)();
    v16 = v27;
    v17 = v28;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v17;
    v27 = (_QWORD *)v18;
    v28 = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityAttachmentModifier> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _GraphValue.init(_:)();
    v27 = v25;
    LODWORD(v28) = v26;
    v19 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v20 = 0;
    if ((v19 & 1) != 0)
      v20 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v24, (__int128 *)a2, a3, v23, 0);
    swift_release();
    v21 = v19 ^ 1;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  return v20 | ((unint64_t)(v21 & 1) << 32);
}

unint64_t specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  char v19;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v22 = *(_QWORD *)(a4 + 48);
  v23 = *(_DWORD *)(a4 + 56);
  v24 = v22;
  LODWORD(v25) = *(_DWORD *)(a4 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v21 = Dictionary.init(minimumCapacity:)();
    v12 = MEMORY[0x1E0CE0CF0];
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>, (unint64_t *)&lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E0CE0CF0]);
    v28 = v13;
    v29 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>, (unint64_t *)&lazy cache variable for type metadata for StrongHash?, v12);
    v24 = a1;
    v25 = a2;
    v26 = a3;
    v27 = BYTE4(a3) & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)&type metadata for AccessibilityProperties.TemporalState);
    AccessibilityAttachment.init(properties:)();
    v14 = v24;
    v15 = v25;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v15;
    v24 = v16;
    v25 = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityAttachmentModifier> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _GraphValue.init(_:)();
    v24 = v22;
    LODWORD(v25) = v23;
    v17 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v18 = 0;
    if ((v17 & 1) != 0)
      v18 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v21, (__int128 *)a4, a5, a6, 0);
    swift_release();
    v19 = v17 ^ 1;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  return v18 | ((unint64_t)(v19 & 1) << 32);
}

uint64_t static DropPreviewModifier._makeView(modifier:inputs:body:)@<X0>(__int128 *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _OWORD *v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = a1[3];
  v52 = a1[2];
  v53 = v9;
  v54 = a1[4];
  v55 = *((_DWORD *)a1 + 20);
  v10 = *a1;
  v11 = a1[1];
  v37 = DWORD2(v53);
  v36 = v53;
  v50 = v10;
  v51 = v11;
  *(_QWORD *)&v44 = v53;
  DWORD2(v44) = DWORD2(v53);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
    return a2();
  v31 = a4;
  v32 = a5;
  v46 = v52;
  v47 = v53;
  v48 = v54;
  v49 = v55;
  v45 = v51;
  *(_QWORD *)&v44 = _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragLiftIdentity and conformance DragLiftIdentity();
  v30 = Attribute.init<A>(body:value:flags:update:)();
  UniqueID.init()();
  v12 = v44;
  closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)((uint64_t)&v50, v44, (void (*)(uint64_t, uint64_t *))a2);
  v44 = v35;
  v13 = _ViewOutputs.subscript.getter();
  if ((v13 & 0x100000000) == 0)
  {
    type metadata accessor for DropPreviewModifier(255, a3, v31, v15);
    type metadata accessor for _GraphValue();
    v29 = _GraphValue.value.getter();
    v46 = v52;
    v47 = v53;
    v48 = v54;
    v49 = v55;
    v44 = v50;
    v45 = v51;
    outlined retain of _ViewInputs((uint64_t)&v50);
    v16 = _ViewOutputs.viewResponders()();
    type metadata accessor for DropPayloadCustomPreviewResponder(0, a3, v31, v17);
    v40 = v52;
    v41 = v53;
    v42 = v54;
    v43 = v55;
    v38 = v50;
    v39 = v51;
    v34 = v12;
    outlined retain of _ViewInputs((uint64_t)&v50);
    v33 = 0;
    v18 = DropPayloadCustomPreviewResponder.__allocating_init(inputs:space:displayList:)((uint64_t *)&v38, &v34);
    v19 = DropPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)(v29, v30, v16, v18, (uint64_t)&v38);
    MEMORY[0x1E0C80A78](v19, v20);
    v27 = (__int128 *)type metadata accessor for DropPreviewResponderFilter(0, a3, v31, v21);
    v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropPreviewResponderFilter<A>, v27);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v38, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v26, (uint64_t)v27, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
    swift_release();
    LOBYTE(v44) = 0;
    v13 = _ViewOutputs.subscript.setter();
  }
  *(_QWORD *)&v44 = v36;
  DWORD2(v44) = v37;
  MEMORY[0x1E0C80A78](v13, v14);
  v27 = &v50;
  outlined retain of [Text.Modifier]((uint64_t)&v36);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v44 = v36;
  DWORD2(v44) = v37;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    static AccessibilityActivationPointStorage.defaultDrop.getter();
    v44 = v38;
    *(_QWORD *)&v45 = v39;
    *((_QWORD *)&v45 + 1) = *((_QWORD *)&v39 + 1);
    *(_QWORD *)&v46 = v40;
    v25 = v35;
    swift_bridgeObjectRetain();
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)((uint64_t *)&v44, (uint64_t)&v50, v25, *((unint64_t *)&v25 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = _ViewOutputs.subscript.setter();
  }
  *v32 = v35;
  return result;
}

uint64_t DropPayloadCustomPreviewResponder.__allocating_init(inputs:space:displayList:)(uint64_t *a1, uint64_t *a2)
{
  swift_allocObject();
  return DropPayloadCustomPreviewResponder.init(inputs:space:displayList:)(a1, a2);
}

uint64_t DropPreviewResponderFilter.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for DropPreviewModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DropPreviewModifier<A>@<X0>(__int128 *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, _OWORD *a4@<X8>)
{
  return static DropPreviewModifier._makeView(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DropPreviewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropPreviewModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t key path getter for EnvironmentValues.dragItemGroupID : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.dragItemGroupID.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.dragItemGroupID : EnvironmentValues()
{
  return EnvironmentValues.dragItemGroupID.setter();
}

uint64_t DropPreviewResponderFilter.updateValue()(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t Value;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(__int128 *, uint64_t);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  _BYTE v41[40];
  _OWORD v42[3];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  _BYTE v49[12];
  uint64_t v50;
  uint64_t v51;

  v2 = v1;
  v51 = *MEMORY[0x1E0C80C00];
  v40 = *((_QWORD *)v1 + 6);
  Value = AGGraphGetValue();
  v6 = v5;
  v7 = *(_QWORD *)(Value + 16);
  v8 = *(_QWORD *)(Value + 24);
  v9 = (uint64_t *)AGGraphGetValue();
  v10 = *v9;
  v11 = v9[1];
  if (((v6 | v12) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    *(_QWORD *)&v47 = v7;
    *((_QWORD *)&v47 + 1) = v8;
    *(double *)(v40 + 216) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v40 + 224) = v13;
    *(_QWORD *)&v46 = v10;
    *((_QWORD *)&v46 + 1) = v11;
    *(double *)(v40 + 232) = MEMORY[0x18D755E9C]();
    *(_QWORD *)(v40 + 240) = v14;
  }
  v15 = AGGraphGetValue();
  v43 = *(_QWORD *)v15;
  v44 = *(_OWORD *)(v15 + 8);
  v45 = *(_OWORD *)(v15 + 24);
  v16 = swift_retain();
  *(_QWORD *)&v46 = v10;
  *((_QWORD *)&v46 + 1) = v11;
  *(double *)&v17 = MEMORY[0x18D755E9C](v16);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v18, v17));
  DropPreviewResponderFilter.modifier.getter(a1, v19, (uint64_t)&v46);
  v21 = *(_QWORD *)&v49[4];
  v20 = v50;
  v23 = type metadata accessor for DropPreviewModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v22);
  v24 = *(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
  swift_retain();
  v24(&v46, v23);
  v25 = (uint64_t *)(v40 + *(_QWORD *)(class metadata base offset for CustomPreviewDropResponder + *(_QWORD *)v40 + 32));
  v26 = *v25;
  *v25 = v21;
  v25[1] = v20;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
  v27 = *((_QWORD *)v2 + 6);
  v28 = *((_DWORD *)v2 + 8);
  v29 = v2[1];
  v46 = *v2;
  v47 = v29;
  v48 = v28;
  *(_QWORD *)v49 = *(_QWORD *)((char *)v2 + 36);
  v50 = v27;
  *(_BYTE *)(v27 + 256) = *(_BYTE *)AGGraphGetValue();
  *(_QWORD *)(v27 + 248) = AGCreateWeakAttribute();
  *(_QWORD *)&v42[0] = v10;
  *((_QWORD *)&v42[0] + 1) = v11;
  v30 = MEMORY[0x18D755E9C]();
  v32 = v31;
  v42[0] = *(_OWORD *)AGGraphGetValue();
  *(double *)(v27 + 272) = v30 - MEMORY[0x18D755E9C]();
  *(double *)(v27 + 280) = v32 - v33;
  DropPreviewResponderFilter.modifier.getter(a1, v34, (uint64_t)v42);
  outlined init with copy of DropDelegate?((uint64_t)v42, (uint64_t)v41);
  v24(v42, v23);
  v35 = v27 + *(_QWORD *)(class metadata base offset for DropPayloadCustomPreviewResponder + *(_QWORD *)v27 + 16);
  swift_beginAccess();
  outlined assign with take of DropDelegate?((uint64_t)v41, v35);
  swift_endAccess();
  v36 = *((_QWORD *)v2 + 6);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v37 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  *(_DWORD *)(v36 + 304) = *(_DWORD *)AGGraphGetValue();
  *(_QWORD *)(v36 + 296) = *(_QWORD *)AGGraphGetValue();
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v38 + 32) = v36;
    *(_QWORD *)&v42[0] = v38;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t static DropModifier._makeView(modifier:inputs:body:)@<X0>(__int128 *a1@<X1>, uint64_t (*a2)(void)@<X2>, _OWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a1[3];
  v39 = a1[2];
  v40 = v5;
  v41 = a1[4];
  v42 = *((_DWORD *)a1 + 20);
  v6 = *a1;
  v7 = a1[1];
  v19 = v40;
  v20 = DWORD2(v40);
  v37 = v6;
  v38 = v7;
  *(_QWORD *)&v31 = v40;
  DWORD2(v31) = DWORD2(v40);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
    return a2();
  UniqueID.init()();
  v8 = v31;
  if ((static ViewIdentity.nextSeed + 1) > 1)
    v9 = static ViewIdentity.nextSeed + 1;
  else
    v9 = 1;
  static ViewIdentity.nextSeed = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewIdentity> and conformance External<A>, &lazy cache variable for type metadata for External<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity);
  v17 = Attribute.init<A>(body:value:flags:update:)();
  closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)((uint64_t)&v37, v31, (void (*)(uint64_t, uint64_t *))a2);
  v31 = v18;
  v10 = _ViewOutputs.subscript.getter();
  if ((v10 & 0x100000000) == 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<DropModifier>, (uint64_t)&type metadata for DropModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v12 = _GraphValue.value.getter();
    v33 = v39;
    v34 = v40;
    v35 = v41;
    v36 = v42;
    v31 = v37;
    v32 = v38;
    outlined retain of _ViewInputs((uint64_t)&v37);
    v13 = _ViewOutputs.viewResponders()();
    type metadata accessor for DefaultPreviewDropPayloadResponder();
    v14 = swift_allocObject();
    *(_BYTE *)(v14 + 288) = 0;
    *(_QWORD *)(v14 + 296) = 0;
    *(_DWORD *)(v14 + 304) = 0;
    *(_QWORD *)(v14 + 344) = 0;
    *(_OWORD *)(v14 + 312) = 0u;
    *(_OWORD *)(v14 + 328) = 0u;
    *(_BYTE *)(v14 + 308) = 2;
    v23 = v39;
    v24 = v40;
    v25 = v41;
    v26 = v42;
    v21 = v37;
    v22 = v38;
    *(_QWORD *)&v27 = v8;
    outlined retain of _ViewInputs((uint64_t)&v37);
    v15 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v21, (uint64_t *)&v27);
    DropPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)(v12, v17, v13, v15, (uint64_t)&v21);
    v31 = v21;
    v32 = v22;
    v33 = v23;
    *(_QWORD *)&v34 = v24;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DropResponderFilter and conformance DropResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of DropResponderFilter((uint64_t)&v21);
    LOBYTE(v31) = 0;
    v10 = _ViewOutputs.subscript.setter();
  }
  *(_QWORD *)&v31 = v19;
  DWORD2(v31) = v20;
  MEMORY[0x1E0C80A78](v10, v11);
  outlined retain of [Text.Modifier]((uint64_t)&v19);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v31 = v19;
  DWORD2(v31) = v20;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    static AccessibilityActivationPointStorage.defaultDrop.getter();
    v31 = v27;
    *(_QWORD *)&v32 = v28;
    *((_QWORD *)&v32 + 1) = v29;
    *(_QWORD *)&v33 = v30;
    swift_bridgeObjectRetain();
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)((uint64_t *)&v31, (uint64_t)&v37, v18, *((unint64_t *)&v18 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = _ViewOutputs.subscript.setter();
  }
  *a3 = v18;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance DropModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DropResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __int128 *v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[40];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v27 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_QWORD *)(Value + 24);
  v7 = (uint64_t *)AGGraphGetValue();
  v8 = *v7;
  v9 = v7[1];
  if (((v4 | v10) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    v11 = *(_QWORD *)(v1 + 48);
    v25 = v5;
    v26 = v6;
    *(double *)(v11 + 216) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v11 + 224) = v12;
    *(_QWORD *)&v24 = v8;
    *((_QWORD *)&v24 + 1) = v9;
    *(double *)(v11 + 232) = MEMORY[0x18D755E9C]();
    *(_QWORD *)(v11 + 240) = v13;
  }
  v14 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v14 + 248) = AGCreateWeakAttribute();
  *(_BYTE *)(v14 + 256) = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(v14 + 288) = *(_BYTE *)AGGraphGetValue();
  *(_QWORD *)&v24 = v8;
  *((_QWORD *)&v24 + 1) = v9;
  v16 = MEMORY[0x18D755E9C]();
  v18 = v17;
  v24 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v14 + 272) = v16 - MEMORY[0x18D755E9C]();
  *(double *)(v14 + 280) = v18 - v19;
  *(_DWORD *)(v14 + 304) = *(_DWORD *)AGGraphGetValue();
  *(_QWORD *)(v14 + 296) = *(_QWORD *)AGGraphGetValue();
  v20 = (__int128 *)AGGraphGetValue();
  outlined init with copy of DropModifier(v20, (uint64_t)&v24);
  outlined init with take of DropDelegate?((uint64_t)&v24, (uint64_t)v23);
  swift_beginAccess();
  outlined assign with take of DropDelegate?((uint64_t)v23, v14 + 312);
  swift_endAccess();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v1 + 48);
    *(_QWORD *)&v24 = v22;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall DefaultPreviewDropPayloadResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x74736544706F7264;
  v1._object = (void *)0xEF6E6F6974616E69;
  String.append(_:)(v1);
}

uint64_t DefaultPreviewDropPayloadResponder.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of DropDelegate?(v0 + 312);
}

uint64_t DefaultPreviewDropPayloadResponder.__deallocating_deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  outlined destroy of DropDelegate?(v0 + 312);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DefaultPreviewDropPayloadResponder()
{
  return type metadata accessor for DefaultPreviewDropPayloadResponder();
}

