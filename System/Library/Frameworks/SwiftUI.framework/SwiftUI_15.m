uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v4();
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance CustomizableDocumentViewControllerRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CustomizableDocumentViewControllerRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance CustomizableDocumentViewControllerRepresentable()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TabItemGroup.HostView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance TabItemGroup.HostView()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

char *specialized DisplayList.HostedViews.Preference.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt32 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char **Value;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[10];
  __int128 v43;

  v0 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (Swift::UInt32 *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 120);
  v7 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 128);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return (char *)MEMORY[0x1E0DEE9D8];
  v10 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRetain();
  result = (char *)swift_bridgeObjectRetain();
  v12 = 0;
  v28 = v9 - 1;
  v30 = (char *)MEMORY[0x1E0DEE9D8];
  LODWORD(v29) = 1;
  while (2)
  {
    v13 = v12;
    while (1)
    {
      if (v13 >= *(_QWORD *)(v8 + 16))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v10 + *(_QWORD *)(v1 + 72) * v13, (uint64_t)v4, type metadata accessor for DisplayList.HostedViewState.Key);
      if (*(_QWORD *)(v6 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v15 & 1) != 0))
      {
        outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(_QWORD *)(v6 + 56) + 176 * v14, (uint64_t)&v31);
      }
      else
      {
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v31 = 0u;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for DisplayList.HostedViewState.Key);
      if (*((_QWORD *)&v33 + 1))
        break;
      result = (char *)outlined destroy of AccessibilityTableContext?((uint64_t)&v31, &lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo);
LABEL_5:
      if (v9 == ++v13)
        goto LABEL_32;
    }
    v42[8] = v39;
    v42[9] = v40;
    v43 = v41;
    v42[4] = v35;
    v42[5] = v36;
    v42[6] = v37;
    v42[7] = v38;
    v42[0] = v31;
    v42[1] = v32;
    v42[2] = v33;
    v42[3] = v34;
    if (!*((_QWORD *)&v40 + 1)
      || (*(_QWORD *)&v31 = *((_QWORD *)&v40 + 1),
          *((_QWORD *)&v31 + 1) = v43,
          (_ViewOutputs.subscript.getter() & 0x100000000) != 0))
    {
      result = (char *)outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v42);
      goto LABEL_5;
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    Value = (char **)AGGraphGetValue();
    v17 = *Value;
    if ((v29 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v42);
      result = (char *)swift_bridgeObjectRelease();
      v30 = v17;
      goto LABEL_31;
    }
    v18 = *((_QWORD *)v17 + 2);
    result = *Value;
    v19 = v30;
    v20 = *((_QWORD *)v30 + 2);
    v29 = v18;
    v25 = v20;
    v27 = v20 + v18;
    if (__OFADD__(v20, v18))
      goto LABEL_36;
    v26 = result;
    swift_bridgeObjectRetain();
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)result || v27 > *((_QWORD *)v19 + 3) >> 1)
    {
      if (v25 <= v27)
        v21 = v27;
      else
        v21 = v25;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v21, 1, v19);
      v30 = result;
    }
    if (!*((_QWORD *)v26 + 2))
    {
      if (!v29)
        goto LABEL_30;
      goto LABEL_37;
    }
    if ((*((_QWORD *)v30 + 3) >> 1) - *((_QWORD *)v30 + 2) < v29)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    result = (char *)swift_arrayInitWithCopy();
    if (!v29)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      result = (char *)outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v42);
LABEL_31:
      LODWORD(v29) = 0;
      v12 = v13 + 1;
      if (v28 != v13)
        continue;
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v30;
    }
    break;
  }
  v22 = *((_QWORD *)v30 + 2);
  v23 = __OFADD__(v22, v29);
  v24 = v22 + v29;
  if (!v23)
  {
    *((_QWORD *)v30 + 2) = v24;
    goto LABEL_30;
  }
LABEL_39:
  __break(1u);
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance UIKitAdaptableTabView(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance UIKitAdaptableTabView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance UIKitAdaptableTabView()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t specialized DisplayListTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t Value;
  unsigned __int16 v11;
  char v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  void *v56;
  char *v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int *v73;
  unsigned __int128 *v74;
  unsigned __int128 v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  void *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t KeyPath;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(unsigned __int128 *__return_ptr, uint64_t, uint64_t);
  id v93;
  id v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(unsigned __int128 *__return_ptr, uint64_t, uint64_t);
  id v128;
  id v129;
  id v130;
  id v131;
  uint64_t (*v132)(void);
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int *v144;
  int v145;
  unsigned __int128 *v146;
  unsigned __int128 v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  __int16 v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  unsigned __int128 *v159;
  unsigned __int128 v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  _QWORD v170[2];
  int v171;
  int v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  unsigned __int128 v199;
  unsigned __int128 v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int16 v204;
  char v205;
  int v206;
  unsigned __int128 v207;
  unsigned __int128 v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int16 v212;
  char v213;
  int v214;
  unsigned __int128 v215;
  _BYTE v216[24];
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int16 v223;
  char v224;
  __int128 v225;

  v3 = type metadata accessor for AccessibilityNodeAttachment();
  v189 = *(_QWORD *)(v3 - 8);
  v190 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v184 = (char *)v170 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v193 = (uint64_t)v170 - v8;
  v177 = v1;
  v9 = v1[12];
  LODWORD(v197) = *MEMORY[0x1E0CFED28];
  if (v9 == (_DWORD)v197)
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v11 = *(_WORD *)(Value + 8);
    v12 = *(_BYTE *)(Value + 10);
    v222 = *(_QWORD *)Value;
    v223 = v11;
    v224 = v12;
    swift_bridgeObjectRetain();
  }
  v13 = v177;
  v14 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  if (v177[14] != (_DWORD)v197)
  {
    v15 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v13 = v177;
  }
  v188 = v13[11];
  v215 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v20 = v223;
    v21 = v224;
    *(_QWORD *)a1 = v222;
    *(_WORD *)(a1 + 8) = v20;
    *(_BYTE *)(a1 + 10) = v21;
    return result;
  }
  v173 = (_QWORD *)a1;
  v221 = v14;
  v16 = (char *)((unint64_t)v15 >> 62);
  if ((unint64_t)v15 >> 62)
    goto LABEL_168;
  v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
  v18 = v177[7];
  if (v17)
  {
    v191 = 0;
  }
  else
  {
    v22 = AGGraphGetValue();
    v191 = 0;
    if (!*(_QWORD *)(v22 + 8))
      v191 = (v223 >> 1) & 1;
  }
  v23 = AGGraphGetValue();
  v25 = *(_QWORD **)v23;
  v24 = *(_QWORD *)(v23 + 8);
  if (v24)
  {
    v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 80);
    swift_retain();
    swift_retain_n();
    a1 = v26(v15);
    swift_release();
    swift_release_n();
    goto LABEL_16;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_20;
LABEL_75:
    swift_beginAccess();
    v67 = v25[3];
    *(_QWORD *)&v215 = v25[2];
    *((_QWORD *)&v215 + 1) = v67;
    v24 = AccessibilityAttachment.isEmpty.getter();
    swift_release();
    a1 = v24 ^ 1;
LABEL_16:
    if (((a1 | v191) & 1) == 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v24 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  if (!v24)
    goto LABEL_75;
LABEL_20:
  swift_release();
  if (!v191)
  {
LABEL_26:
    if (AGGraphGetCurrentAttribute() == (_DWORD)v197)
    {
LABEL_170:
      __break(1u);
    }
    else
    {
      AccessibilityAttachmentToken.init<A>(_:)();
      v192 = v215;
      v187 = BYTE8(v215);
      if (!v16)
      {
        v34 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_34:
        if (v34)
        {
          v194 = v15;
          *(_QWORD *)&v195 = v17;
          v176 = 0;
          LODWORD(v196) = v177[13];
          v185 = v15 & 0xFFFFFFFFFFFFFF8;
          v186 = v15 & 0xC000000000000001;
          while (1)
          {
            v35 = v18;
            v36 = (uint64_t *)AGGraphGetValue();
            v37 = *v36;
            v15 = v36[1];
            swift_beginAccess();
            v38 = *(_QWORD *)(v37 + 16);
            v39 = *(void **)(v37 + 24);
            *(_QWORD *)&v207 = v38;
            *((_QWORD *)&v207 + 1) = v39;
            if (!v15)
            {
              v45 = v39;
              swift_bridgeObjectRetain();
              goto LABEL_52;
            }
            if ((_QWORD)v195 == 1)
            {
              *(_QWORD *)&v199 = v192;
              BYTE8(v199) = v187;
              a1 = *(_QWORD *)(*(_QWORD *)v15 + 120);
              v40 = v39;
              swift_retain_n();
              swift_retain();
              swift_bridgeObjectRetain();
              ((void (*)(__int128 *__return_ptr, unsigned __int128 *, uint64_t))a1)(&v225, &v199, v194);
              swift_release();
              if ((v225 & 0x40) == 0)
              {
                if (v186)
                {
                  v41 = (id)MEMORY[0x18D75E3BC](0, v194);
                }
                else
                {
                  if (!*(_QWORD *)(v185 + 16))
                  {
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    swift_bridgeObjectRetain();
                    v17 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    goto LABEL_9;
                  }
                  v41 = *(id *)(v194 + 32);
                }
                v42 = v41;
                AccessibilityNode.platformElement.getter();
                v44 = v43;

                if (!v44)
                {
                  if (v186)
                  {
                    swift_retain();
                    v62 = (char *)MEMORY[0x18D75E3BC](0, v194);
                  }
                  else
                  {
                    v63 = *(void **)(v194 + 32);
                    swift_retain();
                    v62 = v63;
                  }
                  v64 = v62;
                  v65 = &v62[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
                  swift_beginAccess();
                  v66 = *(_QWORD *)v65;
                  swift_bridgeObjectRetain();

                  (*(void (**)(unsigned __int128 *__return_ptr, uint64_t))(*(_QWORD *)v15 + 88))(&v215, v66);
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_48;
                }

              }
            }
            else
            {
              v46 = v39;
              swift_retain_n();
              swift_retain();
              swift_bridgeObjectRetain();
            }
            AccessibilityAttachment.init()();
LABEL_48:
            v47 = (void *)*((_QWORD *)&v215 + 1);
            v16 = (char *)v215;
            *(_QWORD *)&v199 = v215;
            AccessibilityProperties.merge(with:)((uint64_t *)&v199);
            v39 = (void *)*((_QWORD *)&v207 + 1);
            v38 = v207;
            v199 = v207;
            v48 = (void *)AccessibilityAttachment.platformElement.getter();

            if (v48
              || (v199 = __PAIR128__((unint64_t)v47, (unint64_t)v16),
                  !AccessibilityAttachment.platformElement.getter()))
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_release_n();

            }
            else
            {
              AccessibilityAttachment.platformElement.setter();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release_n();

              v39 = (void *)*((_QWORD *)&v207 + 1);
              v38 = v207;
            }
LABEL_52:
            *(_QWORD *)&v215 = v38;
            *((_QWORD *)&v215 + 1) = v39;
            if ((_DWORD)v196 != (_DWORD)v197)
            {
              v49 = AGGraphGetValue();
              v51 = *(_QWORD *)v49;
              v50 = *(void **)(v49 + 8);
              if (!*(_BYTE *)(v49 + 16))
              {
                v55 = v50;
                swift_bridgeObjectRetain();
                goto LABEL_57;
              }
              if (*(_BYTE *)(v49 + 16) == 1)
              {
                v52 = swift_bridgeObjectRetain();
                v53 = v176;
                v54 = specialized Sequence.compactMap<A>(_:)(v52);
                v176 = v53;
                static AccessibilityAttachment.combine(_:)(v54, (uint64_t *)&v207);
                swift_bridgeObjectRelease();
                outlined consume of AccessibilityAttachment.Tree(v51, v50, 1);
                v50 = (void *)*((_QWORD *)&v207 + 1);
                v51 = v207;
LABEL_57:
                *(_QWORD *)&v207 = v51;
                AccessibilityProperties.merge(with:)((uint64_t *)&v207);
                v39 = (void *)*((_QWORD *)&v215 + 1);
                v38 = v215;
                v207 = v215;
                v56 = (void *)AccessibilityAttachment.platformElement.getter();

                if (v56
                  || (*(_QWORD *)&v207 = v51,
                      *((_QWORD *)&v207 + 1) = v50,
                      !AccessibilityAttachment.platformElement.getter()))
                {
                  swift_bridgeObjectRelease();

                }
                else
                {
                  AccessibilityAttachment.platformElement.setter();
                  swift_bridgeObjectRelease();

                  v39 = (void *)*((_QWORD *)&v215 + 1);
                  v38 = v215;
                }
              }
            }
            v18 = v35;
            *(_QWORD *)&v207 = v38;
            *((_QWORD *)&v207 + 1) = v39;
            if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
            {
              swift_bridgeObjectRelease();

              if (!--v34)
                goto LABEL_73;
            }
            else
            {
              v57 = (char *)v221;
              v58 = v39;
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
              v60 = *((_QWORD *)v57 + 2);
              v59 = *((_QWORD *)v57 + 3);
              v16 = (char *)(v60 + 1);
              if (v60 >= v59 >> 1)
                v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v57);
              *((_QWORD *)v57 + 2) = v16;
              v61 = &v57[16 * v60];
              *((_QWORD *)v61 + 4) = v38;
              *((_QWORD *)v61 + 5) = v39;

              swift_bridgeObjectRelease();
              v221 = (uint64_t)v57;
              if (!--v34)
              {
LABEL_73:
                swift_bridgeObjectRelease();
                v172 = 0;
                goto LABEL_86;
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        v172 = 0;
        v176 = 0;
        goto LABEL_86;
      }
      if (v15 < 0)
        v24 = v15;
      else
        v24 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((v34 & 0x8000000000000000) == 0)
        goto LABEL_34;
    }
    __break(1u);
    goto LABEL_172;
  }
  LODWORD(a1) = 0;
LABEL_22:
  v172 = a1;
  v27 = (_QWORD *)AGGraphGetValue();
  v28 = v27[1];
  *(_QWORD *)&v207 = *v27;
  *((_QWORD *)&v207 + 1) = v28;
  swift_retain();
  swift_retain();
  AccessibilityAttachmentModifier.initialAttachment(for:)(v15, (uint64_t *)&v215);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v177[13] == (_DWORD)v197)
    goto LABEL_29;
  v29 = AGGraphGetValue();
  v31 = *(_QWORD *)v29;
  v30 = *(void **)(v29 + 8);
  if (*(_BYTE *)(v29 + 16))
  {
    if (*(_BYTE *)(v29 + 16) == 1)
    {
      v32 = swift_bridgeObjectRetain();
      v33 = specialized Sequence.compactMap<A>(_:)(v32);
      v176 = 0;
      static AccessibilityAttachment.combine(_:)(v33, (uint64_t *)&v207);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v31, v30, 1);
      v30 = (void *)*((_QWORD *)&v207 + 1);
      v31 = v207;
      goto LABEL_78;
    }
LABEL_29:
    v176 = 0;
    goto LABEL_82;
  }
  v68 = v30;
  swift_bridgeObjectRetain();
  v176 = 0;
LABEL_78:
  *(_QWORD *)&v207 = v31;
  AccessibilityProperties.merge(with:)((uint64_t *)&v207);
  v207 = v215;
  v69 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v69)
  {
    *(_QWORD *)&v207 = v31;
    *((_QWORD *)&v207 + 1) = v30;
    if (AccessibilityAttachment.platformElement.getter())
      AccessibilityAttachment.platformElement.setter();
  }
  swift_bridgeObjectRelease();

LABEL_82:
  v15 = *((_QWORD *)&v215 + 1);
  v24 = v215;
  v25 = *((id *)&v215 + 1);
  swift_bridgeObjectRetain();
  a1 = MEMORY[0x1E0DEE9D8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_172:
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1, (char *)a1);
  v71 = *(_QWORD *)(a1 + 16);
  v70 = *(_QWORD *)(a1 + 24);
  if (v71 >= v70 >> 1)
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1, (char *)a1);
  *(_QWORD *)(a1 + 16) = v71 + 1;
  v72 = a1 + 16 * v71;
  *(_QWORD *)(v72 + 32) = v24;
  *(_QWORD *)(v72 + 40) = v15;

  swift_bridgeObjectRelease();
  v221 = a1;
LABEL_86:
  v73 = v177;
  v215 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v215 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v171 = v73[8];
  v74 = (unsigned __int128 *)AGGraphGetValue();
  v75 = v74[1];
  v215 = *v74;
  *(_OWORD *)v216 = v75;
  v76 = MEMORY[0x18D75BE3C]();
  v78 = v77;
  DisplayList.Version.init(forUpdate:)();
  v187 = *((unsigned __int8 *)v73 + 4);
  v174 = v215;
  if ((v187 & 1) == 0)
  {
    v175 = 0;
    v79 = 1;
    v80 = v184;
    if ((v172 & 1) == 0)
      goto LABEL_135;
LABEL_88:
    v81 = 1;
    goto LABEL_136;
  }
  v80 = v184;
  v180 = *(_QWORD *)(v221 + 16);
  if (!v180)
  {
    v175 = 0;
    v79 = 1;
    if ((v172 & 1) == 0)
      goto LABEL_135;
    goto LABEL_88;
  }
  v179 = v221 + 32;
  v170[1] = v221;
  swift_bridgeObjectRetain_n();
  v82 = 0;
  v175 = 0;
  v79 = 1;
  v178 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v192 = v79;
    v83 = (uint64_t *)(v179 + 16 * v82);
    v15 = *v83;
    v84 = (void *)v83[1];
    v85 = (uint64_t *)AGGraphGetValue();
    v86 = *v85;
    v194 = v85[1];
    KeyPath = swift_getKeyPath();
    if (*(_QWORD *)(v15 + 16)
      && (v88 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v89 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v15 + 56) + 40 * v88, (uint64_t)&v215);
      v90 = *(_QWORD *)&v216[8];
      v91 = *(_QWORD *)&v216[16];
      __swift_project_boxed_opaque_existential_1(&v215, *(uint64_t *)&v216[8]);
      v92 = *(void (**)(unsigned __int128 *__return_ptr, uint64_t, uint64_t))(v91 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v93 = v84;
      swift_retain();
      v92(&v207, v90, v91);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v215);
    }
    else
    {
      v207 = 0u;
      v208 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v94 = v84;
      swift_retain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v178, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v95 = swift_dynamicCast();
    v185 = KeyPath;
    v186 = (unint64_t)v84;
    if (v95)
    {
      v96 = v215;
    }
    else
    {
      *(_QWORD *)&v215 = 0;
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v96 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v97 = *(_QWORD *)(v96 + 16);
    if (v97)
    {
      v182 = v15;
      v183 = v82;
      v98 = (_QWORD *)(v96 + 32);
      v181 = v96;
      swift_bridgeObjectRetain();
      a1 = MEMORY[0x1E0DEE9D8];
      do
      {
        v101 = v98[3];
        v100 = v98[4];
        __swift_project_boxed_opaque_existential_1(v98, v101);
        *(_QWORD *)&v207 = v86;
        *((_QWORD *)&v207 + 1) = v194;
        (*(void (**)(unsigned __int128 *__return_ptr, unsigned __int128 *, uint64_t, uint64_t))(v100 + 96))(&v215, &v207, v101, v100);
        if ((_QWORD)v218)
        {
          v197 = v218;
          v102 = *(_WORD *)v216;
          v195 = v215;
          v196 = *(_OWORD *)&v216[8];
          v103 = v217;
          v104 = v219;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1, (char *)a1);
          v106 = *(_QWORD *)(a1 + 16);
          v105 = *(_QWORD *)(a1 + 24);
          v107 = v197;
          if (v106 >= v105 >> 1)
          {
            v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v105 > 1), v106 + 1, 1, (char *)a1);
            v107 = v197;
            a1 = (uint64_t)v108;
          }
          *(_QWORD *)(a1 + 16) = v106 + 1;
          v99 = a1 + 72 * v106;
          *(_OWORD *)(v99 + 32) = v195;
          *(_WORD *)(v99 + 48) = v102;
          *(_OWORD *)(v99 + 56) = v196;
          *(_BYTE *)(v99 + 72) = v103 & 1;
          *(_OWORD *)(v99 + 80) = v107;
          *(_QWORD *)(v99 + 96) = v104;
        }
        v98 += 6;
        --v97;
      }
      while (v97);
      swift_bridgeObjectRelease();
      v15 = v182;
      v82 = v183;
    }
    else
    {
      a1 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v109 = *(_QWORD *)(a1 + 16);
    v110 = v185;
    swift_release();
    v79 = v192;
    v111 = (void *)v186;
    if (!v109)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_92:

      goto LABEL_93;
    }
    if (!v192)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_133:
      swift_release();
      goto LABEL_92;
    }
    if (v192 != 1)
    {
      v24 = *(_QWORD *)(a1 + 16);
      v25 = *(_QWORD **)(v192 + 16);
      v16 = (char *)v25 + v24;
      if (__OFADD__(v25, v24))
      {
        __break(1u);
LABEL_165:
        __break(1u);
        goto LABEL_166;
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && (uint64_t)v16 <= *(_QWORD *)(v79 + 24) >> 1)
      {
        if (*(_QWORD *)(a1 + 16))
          goto LABEL_123;
      }
      else
      {
        if ((uint64_t)v25 <= (uint64_t)v16)
          v116 = (int64_t)v25 + v24;
        else
          v116 = (int64_t)v25;
        v79 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v116, 1, (char *)v79);
        if (*(_QWORD *)(a1 + 16))
        {
LABEL_123:
          if ((*(_QWORD *)(v79 + 24) >> 1) - *(_QWORD *)(v79 + 16) < v24)
            goto LABEL_167;
          swift_arrayInitWithCopy();
          if (v24)
          {
            v113 = *(_QWORD *)(v79 + 16);
            v114 = __OFADD__(v113, v24);
            v115 = v113 + v24;
            if (v114)
            {
              __break(1u);
              goto LABEL_170;
            }
            *(_QWORD *)(v79 + 16) = v115;
          }
          goto LABEL_132;
        }
      }
      if (v24)
        goto LABEL_165;
LABEL_132:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_133;
    }
    swift_bridgeObjectRelease();

    v175 = v110;
    v79 = a1;
LABEL_93:
    ++v82;
    v80 = v184;
  }
  while (v82 != v180);
  swift_bridgeObjectRelease_n();
  if ((v172 & 1) != 0)
    goto LABEL_88;
LABEL_135:
  v81 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v222, &v221, v76, v78);
LABEL_136:
  v117 = *(_QWORD *)(v221 + 16);
  v118 = MEMORY[0x1E0DEE9D8];
  v192 = v79;
  if (!v117)
    goto LABEL_155;
  v220 = MEMORY[0x1E0DEE9D8];
  v119 = v221;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v117, 0);
  v225 = *(_OWORD *)(v177 + 2);
  LODWORD(v197) = v81 & 1;
  *(_QWORD *)&v195 = v119;
  v120 = (void **)(v119 + 40);
  *(_QWORD *)&v196 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v122 = (uint64_t)*(v120 - 1);
    v121 = *v120;
    if (*(_QWORD *)(v122 + 16)
      && (v123 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v124 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v122 + 56) + 40 * v123, (uint64_t)&v215);
      v126 = *(_QWORD *)&v216[8];
      v125 = *(_QWORD *)&v216[16];
      __swift_project_boxed_opaque_existential_1(&v215, *(uint64_t *)&v216[8]);
      v127 = *(void (**)(unsigned __int128 *__return_ptr, uint64_t, uint64_t))(v125 + 8);
      v128 = v121;
      swift_bridgeObjectRetain_n();
      v129 = v128;
      v127(&v207, v126, v125);
      v80 = v184;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v215);
    }
    else
    {
      v207 = 0u;
      v208 = 0u;
      v130 = v121;
      swift_bridgeObjectRetain_n();
      v131 = v130;
    }
    v132 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v196, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v132);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v216[1] = 0;
      v134 = *((_QWORD *)&v215 + 1);
      v133 = v215;
      v135 = v216[0];
      swift_bridgeObjectRelease();
      if ((v135 & 1) == 0)
      {
        v136 = 0;
        if ((v187 & 1) != 0)
          goto LABEL_145;
LABEL_148:
        *v80 = v122;
        v80[1] = v121;
        goto LABEL_149;
      }
    }
    else
    {
      v215 = 0uLL;
      *(_WORD *)v216 = 256;
      swift_bridgeObjectRelease();
    }
    v133 = 0;
    v134 = 0;
    v136 = 1;
    if ((v187 & 1) == 0)
      goto LABEL_148;
LABEL_145:
    v137 = (uint64_t *)AGGraphGetValue();
    v139 = *v137;
    v138 = v137[1];
    *(_QWORD *)&v207 = v122;
    *((_QWORD *)&v207 + 1) = v121;
    v215 = 0u;
    *(_OWORD *)v216 = 0u;
    *(_QWORD *)&v216[16] = v133;
    v217 = v134;
    LOBYTE(v218) = v136;
    *(_QWORD *)&v199 = v139;
    *((_QWORD *)&v199 + 1) = v138;
    v198 = v225;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_149:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v140 = v190;
    *((_BYTE *)v80 + *(int *)(v190 + 20)) = v197;
    *((_BYTE *)v80 + *(int *)(v140 + 24)) = v191;
    outlined init with take of TableCellFormula((uint64_t)v80, v193, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v118 = v220;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v118 + 16) + 1, 1);
      v118 = v220;
    }
    v142 = *(_QWORD *)(v118 + 16);
    v141 = *(_QWORD *)(v118 + 24);
    if (v142 >= v141 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v141 > 1, v142 + 1, 1);
      v118 = v220;
    }
    v120 += 2;
    *(_QWORD *)(v118 + 16) = v142 + 1;
    outlined init with take of TableCellFormula(v193, v118+ ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80))+ *(_QWORD *)(v189 + 72) * v142, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    if (--v117)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v79 = v192;
LABEL_155:
  swift_bridgeObjectRelease();
  v143 = swift_allocObject();
  *(_QWORD *)(v143 + 16) = v118;
  *(_QWORD *)&v207 = v143;
  *((_QWORD *)&v207 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v208 = v222;
  BYTE10(v208) = v224;
  WORD4(v208) = v223;
  if (v79 == 1)
  {
    v144 = v177;
    v145 = *v177;
    swift_bridgeObjectRetain();
  }
  else
  {
    v146 = (unsigned __int128 *)AGGraphGetValue();
    v147 = v146[1];
    v215 = *v146;
    *(_OWORD *)v216 = v147;
    v148 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v148);
    v145 = 0;
    v144 = v177;
  }
  LODWORD(v198) = v145;
  *(_QWORD *)&v199 = v174;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v197) = *((unsigned __int8 *)v144 + 24);
  LOBYTE(v207) = v197;
  DisplayList.Item.canonicalize(options:)();
  v149 = v217;
  v150 = v218;
  v151 = (unsigned __int16)v219 | (BYTE2(v219) << 16);
  v207 = v215;
  v208 = *(_OWORD *)v216;
  v209 = *(_QWORD *)&v216[16];
  v210 = v217;
  v211 = v218;
  v213 = BYTE2(v219);
  v212 = v219;
  v214 = HIDWORD(v219);
  outlined copy of DisplayList.Item.Value(v217, v218);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v152 = v199;
  v153 = WORD4(v199);
  v154 = BYTE10(v199);
  v155 = v192;
  if (v192 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v149, v150);
  }
  else
  {
    v156 = swift_allocObject();
    LODWORD(v196) = v151;
    v157 = (_QWORD *)v156;
    v158 = *v144;
    v159 = (unsigned __int128 *)AGGraphGetValue();
    v160 = v159[1];
    v207 = *v159;
    v208 = v160;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v195 = v150;
    v161 = v175;
    outlined copy of AccessibilityArchivableViewAttachment?(v175, 0, 0, v155);
    outlined copy of Environment<AppIntentExecutor?>.Content(v161, 0, 0);
    v162 = swift_bridgeObjectRetain();
    v194 = v149;
    v163 = MEMORY[0x18D75BE3C](v162);
    v165 = v164;
    v157[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v157[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v166 = swift_allocObject();
    v157[2] = v166;
    *(_QWORD *)(v166 + 16) = v161;
    *(_QWORD *)(v166 + 24) = 0;
    *(_BYTE *)(v166 + 32) = 0;
    *(_QWORD *)(v166 + 40) = v155;
    *(_DWORD *)(v166 + 48) = v158;
    *(double *)(v166 + 56) = v163;
    *(_QWORD *)(v166 + 64) = v165;
    *(_QWORD *)&v199 = v157;
    *((_QWORD *)&v199 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v200 = v152;
    BYTE10(v200) = v154;
    WORD4(v200) = v153;
    LODWORD(v220) = v158;
    *(_QWORD *)&v198 = v174;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v199) = v197;
    DisplayList.Item.canonicalize(options:)();
    v167 = v210;
    v168 = v211;
    v199 = v207;
    v200 = v208;
    v201 = v209;
    v202 = v210;
    v203 = v211;
    v205 = v213;
    v204 = v212;
    v206 = v214;
    outlined copy of DisplayList.Item.Value(v210, v211);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v161, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v161, 0, 0, v155);
    outlined consume of DisplayList.Item.Value(v167, v168);
    outlined consume of DisplayList.Item.Value(v194, v195);
    result = swift_bridgeObjectRelease();
    v152 = v198;
    v153 = WORD4(v198);
    v154 = BYTE10(v198);
  }
  v169 = v173;
  *v173 = v152;
  *((_WORD *)v169 + 4) = v153;
  *((_BYTE *)v169 + 10) = v154;
  return result;
}

{
  int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t Value;
  __int16 v12;
  char v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  __int16 v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  void (*v39)();
  unint64_t v40;
  char v41;
  unint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  void *v54;
  __int128 v55;
  char *v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  id v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  int *v69;
  __int128 *v70;
  __int128 v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  uint64_t v75;
  _QWORD *v76;
  char v77;
  uint64_t *v78;
  void *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t KeyPath;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v88;
  id v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  char *v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  int64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t (*v127)(void);
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int *v139;
  int v140;
  __int128 *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  __int16 v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  __int128 *v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  int v166;
  int v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  void *v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int16 v198;
  char v199;
  int v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int16 v206;
  char v207;
  int v208;
  __int128 v209;
  _BYTE v210[24];
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  char v221;

  v4 = type metadata accessor for AccessibilityNodeAttachment();
  v184 = *(_QWORD *)(v4 - 8);
  v185 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v179 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v187 = (uint64_t)&v165 - v9;
  v172 = v1;
  LODWORD(v10) = *MEMORY[0x1E0CFED28];
  if (v1[12] == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v12 = *(_WORD *)(Value + 8);
    v13 = *(_BYTE *)(Value + 10);
    v219 = *(_QWORD *)Value;
    v220 = v12;
    v221 = v13;
    swift_bridgeObjectRetain();
  }
  v14 = v172;
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  if (v172[14] != (_DWORD)v10)
  {
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v14 = v172;
  }
  v183 = v14[11];
  v209 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v30 = v220;
    v31 = v221;
    *(_QWORD *)a1 = v219;
    *(_WORD *)(a1 + 8) = v30;
    *(_BYTE *)(a1 + 10) = v31;
    return result;
  }
  v168 = (_QWORD *)a1;
  v218 = v15;
  v17 = (char *)((unint64_t)v16 >> 62);
  if ((unint64_t)v16 >> 62)
  {
LABEL_152:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v188 = v16;
  v18 = (unsigned __int8 *)AGGraphGetValue();
  v19 = *v18;
  v20 = *((_DWORD *)v18 + 1);
  v21 = (id)*((_QWORD *)v18 + 1);
  LOBYTE(v201) = *v18;
  DWORD1(v201) = v20;
  *((_QWORD *)&v201 + 1) = v21;
  swift_bridgeObjectRetain();
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v209);
  v22 = *(_QWORD *)&v210[8];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v209, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
  swift_bridgeObjectRelease();
  if (v22)
    v23 = v19;
  else
    v23 = 0;
  v167 = v23;
  if (v23 == 1)
  {
    v24 = AGGraphGetValue();
    v25 = *(_DWORD *)(v24 + 4);
    v26 = *(_QWORD *)(v24 + 8);
    LOBYTE(v193) = *(_BYTE *)v24;
    DWORD1(v193) = v25;
    *((_QWORD *)&v193 + 1) = v26;
    swift_bridgeObjectRetain();
    AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v201);
    if (*((_QWORD *)&v202 + 1))
    {
      outlined init with take of OptionalBinaryInteger(&v201, (uint64_t)&v209);
      *(_QWORD *)&v215 = v26;
      outlined init with copy of TableColumnList((uint64_t)&v209, (uint64_t)&v201);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v201, (uint64_t)&v193, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
      swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.setter((uint64_t)&v193);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v201, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v27 = swift_allocObject();
      static AccessibilityVisibility.containerElement.getter();
      v28 = *(_DWORD *)(v27 + 32);
      swift_setDeallocating();
      swift_deallocClassInstance();
      LODWORD(v201) = v28;
      DWORD1(v201) = v28;
      AccessibilityProperties.visibility.setter();
      *(_QWORD *)&v193 = v215;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v201, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
      *(_QWORD *)&v209 = v26;
      static AccessibilityAttachment.properties(_:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v172[13] != (_DWORD)v10)
    {
      v59 = AGGraphGetValue();
      v61 = *(_QWORD *)v59;
      v60 = *(void **)(v59 + 8);
      if (!*(_BYTE *)(v59 + 16))
      {
        v64 = v60;
        swift_bridgeObjectRetain();
        v171 = 0;
LABEL_63:
        *(_QWORD *)&v209 = v61;
        AccessibilityProperties.merge(with:)((uint64_t *)&v209);
        v209 = v201;
        v65 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v65)
        {
          *(_QWORD *)&v209 = v61;
          *((_QWORD *)&v209 + 1) = v60;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }
        swift_bridgeObjectRelease();

LABEL_67:
        v2 = *((_QWORD *)&v201 + 1);
        v22 = v201;
        v21 = *((id *)&v201 + 1);
        swift_bridgeObjectRetain();
        v17 = (char *)MEMORY[0x1E0DEE9D8];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_68:
          v67 = *((_QWORD *)v17 + 2);
          v66 = *((_QWORD *)v17 + 3);
          if (v67 >= v66 >> 1)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v17);
          *((_QWORD *)v17 + 2) = v67 + 1;
          v68 = &v17[16 * v67];
          *((_QWORD *)v68 + 4) = v22;
          *((_QWORD *)v68 + 5) = v2;

          swift_bridgeObjectRelease();
          v218 = (uint64_t)v17;
          goto LABEL_71;
        }
LABEL_156:
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        goto LABEL_68;
      }
      if (*(_BYTE *)(v59 + 16) == 1)
      {
        v62 = swift_bridgeObjectRetain();
        v63 = specialized Sequence.compactMap<A>(_:)(v62);
        v171 = 0;
        static AccessibilityAttachment.combine(_:)(v63, (uint64_t *)&v209);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v61, v60, 1);
        v60 = (void *)*((_QWORD *)&v209 + 1);
        v61 = v209;
        goto LABEL_63;
      }
    }
    v171 = 0;
    goto LABEL_67;
  }
  if (AGGraphGetCurrentAttribute() == (_DWORD)v10)
  {
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  if (!v17)
  {
    v32 = *(_QWORD *)((v188 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_22;
  }
  v21 = (id)v188;
  if (v188 < 0)
    v22 = v188;
  else
    v22 = v188 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v32 < 0)
  {
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
LABEL_22:
  if (v32)
  {
    v33 = v172[13];
    type metadata accessor for [Scrollable]();
    *(_QWORD *)&v191 = v34;
    v171 = 0;
    v189 = xmmword_187BF9830;
    LODWORD(v190) = v10;
    while (1)
    {
      v35 = *(_QWORD *)(AGGraphGetValue() + 8);
      v36 = AGGraphGetValue();
      if (!*(_QWORD *)(*(_QWORD *)v36 + 16))
        break;
      outlined init with copy of TableColumnList(*(_QWORD *)v36 + 32, (uint64_t)&v193);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) == 0)
      {
        v217 = 0;
        v215 = 0u;
        v216 = 0u;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v215, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
        goto LABEL_31;
      }
      outlined init with take of OptionalBinaryInteger(&v215, (uint64_t)&v201);
      outlined init with take of OptionalBinaryInteger(&v201, (uint64_t)&v209);
      *(_QWORD *)&v192 = v35;
      outlined init with copy of TableColumnList((uint64_t)&v209, (uint64_t)&v201);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v201, (uint64_t)&v193, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v193, (uint64_t)&v215, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
      if (*((_QWORD *)&v216 + 1))
      {
        swift_bridgeObjectRetain();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v215, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
        type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>();
        *((_QWORD *)&v216 + 1) = v37;
        v217 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>, MEMORY[0x1E0CE6310]);
        *(_QWORD *)&v215 = swift_allocObject();
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v193, v215 + 16, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
        specialized Dictionary.subscript.setter((uint64_t)&v215, (uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        v38 = &v193;
        v39 = type metadata accessor for ScrollableCollection?;
      }
      else
      {
        v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        if ((v41 & 1) != 0)
        {
          v42 = v40;
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v214 = v35;
          v44 = v35;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v44 = v214;
          }
          outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v44 + 56) + 40 * v42), (uint64_t)&v215);
          specialized _NativeDictionary._delete(at:)(v42, v44);
          *(_QWORD *)&v192 = v44;
          swift_bridgeObjectRelease();
        }
        else
        {
          v217 = 0;
          v215 = 0u;
          v216 = 0u;
          swift_bridgeObjectRetain();
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v193, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
        v38 = &v215;
        v39 = type metadata accessor for AnyAccessibilityPropertiesEntry?;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))v39);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v201, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v189;
      static AccessibilityVisibility.containerElement.getter();
      v46 = *(_DWORD *)(v45 + 32);
      swift_bridgeObjectRelease();
      LODWORD(v201) = v46;
      DWORD1(v201) = v46;
      AccessibilityProperties.visibility.setter();
      *(_QWORD *)&v193 = v192;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
LABEL_39:
      swift_bridgeObjectRelease();
      if (v33 != (_DWORD)v10)
      {
        v47 = AGGraphGetValue();
        v49 = *(_QWORD *)v47;
        v48 = *(void **)(v47 + 8);
        if (!*(_BYTE *)(v47 + 16))
        {
          v53 = v48;
          swift_bridgeObjectRetain();
LABEL_44:
          *(_QWORD *)&v209 = v49;
          AccessibilityProperties.merge(with:)((uint64_t *)&v209);
          v209 = v201;
          v54 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v54)
          {
            *(_QWORD *)&v209 = v49;
            *((_QWORD *)&v209 + 1) = v48;
            if (AccessibilityAttachment.platformElement.getter())
              AccessibilityAttachment.platformElement.setter();
          }
          swift_bridgeObjectRelease();

          goto LABEL_48;
        }
        if (*(_BYTE *)(v47 + 16) == 1)
        {
          v50 = swift_bridgeObjectRetain();
          v51 = v171;
          v52 = specialized Sequence.compactMap<A>(_:)(v50);
          v171 = v51;
          static AccessibilityAttachment.combine(_:)(v52, (uint64_t *)&v209);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v49, v48, 1);
          v48 = (void *)*((_QWORD *)&v209 + 1);
          v49 = v209;
          goto LABEL_44;
        }
      }
LABEL_48:
      v55 = v201;
      v209 = v201;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
      {
        swift_bridgeObjectRelease();

        if (!--v32)
          goto LABEL_54;
      }
      else
      {
        v56 = (char *)v218;
        v57 = *((id *)&v55 + 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
        v10 = *((_QWORD *)v56 + 2);
        v58 = *((_QWORD *)v56 + 3);
        if (v10 >= v58 >> 1)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v10 + 1, 1, v56);
        *((_QWORD *)v56 + 2) = v10 + 1;
        *(_OWORD *)&v56[16 * v10 + 32] = v55;

        swift_bridgeObjectRelease();
        v218 = (uint64_t)v56;
        LODWORD(v10) = v190;
        if (!--v32)
        {
LABEL_54:
          swift_bridgeObjectRelease();
          goto LABEL_71;
        }
      }
    }
    swift_bridgeObjectRetain();
LABEL_31:
    *(_QWORD *)&v209 = v35;
    static AccessibilityAttachment.properties(_:)();
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  v171 = 0;
LABEL_71:
  v69 = v172;
  v209 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v209 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v166 = v69[8];
  v70 = (__int128 *)AGGraphGetValue();
  v71 = v70[1];
  v209 = *v70;
  *(_OWORD *)v210 = v71;
  v72 = MEMORY[0x18D75BE3C]();
  v74 = v73;
  DisplayList.Version.init(forUpdate:)();
  v182 = *((unsigned __int8 *)v69 + 4);
  v169 = v209;
  if ((v182 & 1) == 0)
  {
    v170 = 0;
    v75 = 1;
    v76 = v179;
    if ((v167 & 1) == 0)
      goto LABEL_120;
LABEL_73:
    v77 = 1;
    goto LABEL_121;
  }
  v76 = v179;
  v175 = *(_QWORD *)(v218 + 16);
  if (!v175)
  {
    v170 = 0;
    v75 = 1;
    if ((v167 & 1) == 0)
      goto LABEL_120;
    goto LABEL_73;
  }
  v174 = v218 + 32;
  v165 = v218;
  swift_bridgeObjectRetain_n();
  v10 = 0;
  v170 = 0;
  v75 = 1;
  v173 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v186 = v75;
    v78 = (uint64_t *)(v174 + 16 * v10);
    v2 = *v78;
    v79 = (void *)v78[1];
    v80 = (uint64_t *)AGGraphGetValue();
    v81 = *v80;
    v188 = v80[1];
    KeyPath = swift_getKeyPath();
    if (*(_QWORD *)(v2 + 16)
      && (v83 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v84 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v2 + 56) + 40 * v83, (uint64_t)&v209);
      v85 = *(_QWORD *)&v210[8];
      v86 = *(_QWORD *)&v210[16];
      __swift_project_boxed_opaque_existential_1(&v209, *(uint64_t *)&v210[8]);
      v87 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v86 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v88 = v79;
      swift_retain();
      v87(&v201, v85, v86);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
    }
    else
    {
      v201 = 0u;
      v202 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v89 = v79;
      swift_retain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v173, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v90 = swift_dynamicCast();
    v180 = KeyPath;
    v181 = v79;
    if (v90)
    {
      v91 = v209;
    }
    else
    {
      *(_QWORD *)&v209 = 0;
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v91 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v92 = *(_QWORD *)(v91 + 16);
    if (v92)
    {
      v177 = v2;
      v178 = v10;
      v93 = (_QWORD *)(v91 + 32);
      v176 = v91;
      swift_bridgeObjectRetain();
      v17 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v96 = v93[3];
        v95 = v93[4];
        __swift_project_boxed_opaque_existential_1(v93, v96);
        *(_QWORD *)&v201 = v81;
        *((_QWORD *)&v201 + 1) = v188;
        (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v95 + 96))(&v209, &v201, v96, v95);
        if ((_QWORD)v212)
        {
          v191 = v212;
          v97 = *(_WORD *)v210;
          v189 = v209;
          v190 = *(_OWORD *)&v210[8];
          v98 = v211;
          v99 = v213;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
          v101 = *((_QWORD *)v17 + 2);
          v100 = *((_QWORD *)v17 + 3);
          v102 = v191;
          if (v101 >= v100 >> 1)
          {
            v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v100 > 1), v101 + 1, 1, v17);
            v102 = v191;
            v17 = v103;
          }
          *((_QWORD *)v17 + 2) = v101 + 1;
          v94 = &v17[72 * v101];
          *((_OWORD *)v94 + 2) = v189;
          *((_WORD *)v94 + 24) = v97;
          *(_OWORD *)(v94 + 56) = v190;
          v94[72] = v98 & 1;
          *((_OWORD *)v94 + 5) = v102;
          *((_QWORD *)v94 + 12) = v99;
        }
        v93 += 6;
        --v92;
      }
      while (v92);
      swift_bridgeObjectRelease();
      v2 = v177;
      v10 = v178;
    }
    else
    {
      v17 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v104 = *((_QWORD *)v17 + 2);
    v105 = v180;
    swift_release();
    v75 = v186;
    v106 = v181;
    if (!v104)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_77:

      goto LABEL_78;
    }
    if (!v186)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_118:
      swift_release();
      goto LABEL_77;
    }
    if (v186 != 1)
    {
      v22 = *((_QWORD *)v17 + 2);
      v21 = *(id *)(v186 + 16);
      v16 = (uint64_t)v21 + v22;
      if (__OFADD__(v21, v22))
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }
      swift_bridgeObjectRetain();
      v107 = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)v107 && v16 <= *(_QWORD *)(v75 + 24) >> 1)
      {
        if (*((_QWORD *)v17 + 2))
          goto LABEL_108;
      }
      else
      {
        if ((uint64_t)v21 <= v16)
          v111 = (int64_t)v21 + v22;
        else
          v111 = (int64_t)v21;
        v75 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v107, v111, 1, (char *)v75);
        if (*((_QWORD *)v17 + 2))
        {
LABEL_108:
          if ((*(_QWORD *)(v75 + 24) >> 1) - *(_QWORD *)(v75 + 16) < v22)
            goto LABEL_151;
          swift_arrayInitWithCopy();
          if (v22)
          {
            v108 = *(_QWORD *)(v75 + 16);
            v109 = __OFADD__(v108, v22);
            v110 = v108 + v22;
            if (v109)
            {
              __break(1u);
              goto LABEL_154;
            }
            *(_QWORD *)(v75 + 16) = v110;
          }
          goto LABEL_117;
        }
      }
      if (v22)
        goto LABEL_150;
LABEL_117:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_118;
    }
    swift_bridgeObjectRelease();

    v170 = v105;
    v75 = (uint64_t)v17;
LABEL_78:
    ++v10;
    v76 = v179;
  }
  while (v10 != v175);
  swift_bridgeObjectRelease_n();
  if ((v167 & 1) != 0)
    goto LABEL_73;
LABEL_120:
  v77 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v219, &v218, v72, v74);
LABEL_121:
  v112 = *(_QWORD *)(v218 + 16);
  v113 = MEMORY[0x1E0DEE9D8];
  v186 = v75;
  if (!v112)
    goto LABEL_140;
  v214 = MEMORY[0x1E0DEE9D8];
  v114 = v218;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112, 0);
  v215 = *(_OWORD *)(v172 + 2);
  LODWORD(v191) = v77 & 1;
  *(_QWORD *)&v189 = v114;
  v115 = (void **)(v114 + 40);
  *(_QWORD *)&v190 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v117 = (uint64_t)*(v115 - 1);
    v116 = *v115;
    if (*(_QWORD *)(v117 + 16)
      && (v118 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v119 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v117 + 56) + 40 * v118, (uint64_t)&v209);
      v121 = *(_QWORD *)&v210[8];
      v120 = *(_QWORD *)&v210[16];
      __swift_project_boxed_opaque_existential_1(&v209, *(uint64_t *)&v210[8]);
      v122 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v120 + 8);
      v123 = v116;
      swift_bridgeObjectRetain_n();
      v124 = v123;
      v122(&v201, v121, v120);
      v76 = v179;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
    }
    else
    {
      v201 = 0u;
      v202 = 0u;
      v125 = v116;
      swift_bridgeObjectRetain_n();
      v126 = v125;
    }
    v127 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v190, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v127);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v210[1] = 0;
      v129 = *((_QWORD *)&v209 + 1);
      v128 = v209;
      v130 = v210[0];
      swift_bridgeObjectRelease();
      if ((v130 & 1) == 0)
      {
        v131 = 0;
        if ((v182 & 1) != 0)
          goto LABEL_130;
LABEL_133:
        *v76 = v117;
        v76[1] = v116;
        goto LABEL_134;
      }
    }
    else
    {
      v209 = 0uLL;
      *(_WORD *)v210 = 256;
      swift_bridgeObjectRelease();
    }
    v128 = 0;
    v129 = 0;
    v131 = 1;
    if ((v182 & 1) == 0)
      goto LABEL_133;
LABEL_130:
    v132 = (uint64_t *)AGGraphGetValue();
    v134 = *v132;
    v133 = v132[1];
    *(_QWORD *)&v201 = v117;
    *((_QWORD *)&v201 + 1) = v116;
    v209 = 0u;
    *(_OWORD *)v210 = 0u;
    *(_QWORD *)&v210[16] = v128;
    v211 = v129;
    LOBYTE(v212) = v131;
    *(_QWORD *)&v193 = v134;
    *((_QWORD *)&v193 + 1) = v133;
    v192 = v215;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_134:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v135 = v185;
    *((_BYTE *)v76 + *(int *)(v185 + 20)) = v191;
    *((_BYTE *)v76 + *(int *)(v135 + 24)) = 0;
    outlined init with take of TableCellFormula((uint64_t)v76, v187, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v113 = v214;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v113 + 16) + 1, 1);
      v113 = v214;
    }
    v137 = *(_QWORD *)(v113 + 16);
    v136 = *(_QWORD *)(v113 + 24);
    if (v137 >= v136 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v136 > 1, v137 + 1, 1);
      v113 = v214;
    }
    v115 += 2;
    *(_QWORD *)(v113 + 16) = v137 + 1;
    outlined init with take of TableCellFormula(v187, v113+ ((*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80))+ *(_QWORD *)(v184 + 72) * v137, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    if (--v112)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v75 = v186;
LABEL_140:
  swift_bridgeObjectRelease();
  v138 = swift_allocObject();
  *(_QWORD *)(v138 + 16) = v113;
  *(_QWORD *)&v201 = v138;
  *((_QWORD *)&v201 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v202 = v219;
  BYTE10(v202) = v221;
  WORD4(v202) = v220;
  if (v75 == 1)
  {
    v139 = v172;
    v140 = *v172;
    swift_bridgeObjectRetain();
  }
  else
  {
    v141 = (__int128 *)AGGraphGetValue();
    v142 = v141[1];
    v209 = *v141;
    *(_OWORD *)v210 = v142;
    v143 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v143);
    v140 = 0;
    v139 = v172;
  }
  LODWORD(v192) = v140;
  *(_QWORD *)&v193 = v169;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v191) = *((unsigned __int8 *)v139 + 24);
  LOBYTE(v201) = v191;
  DisplayList.Item.canonicalize(options:)();
  v144 = v211;
  v145 = v212;
  v146 = (unsigned __int16)v213 | (BYTE2(v213) << 16);
  v201 = v209;
  v202 = *(_OWORD *)v210;
  v203 = *(_QWORD *)&v210[16];
  v204 = v211;
  v205 = v212;
  v207 = BYTE2(v213);
  v206 = v213;
  v208 = HIDWORD(v213);
  outlined copy of DisplayList.Item.Value(v211, v212);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v147 = v193;
  v148 = WORD4(v193);
  v149 = BYTE10(v193);
  v150 = v186;
  if (v186 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v144, v145);
  }
  else
  {
    v151 = swift_allocObject();
    LODWORD(v190) = v146;
    v152 = (_QWORD *)v151;
    v153 = *v139;
    v154 = (__int128 *)AGGraphGetValue();
    v155 = v154[1];
    v201 = *v154;
    v202 = v155;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v189 = v145;
    v156 = v170;
    outlined copy of AccessibilityArchivableViewAttachment?(v170, 0, 0, v150);
    outlined copy of Environment<AppIntentExecutor?>.Content(v156, 0, 0);
    v157 = swift_bridgeObjectRetain();
    v188 = v144;
    v158 = MEMORY[0x18D75BE3C](v157);
    v160 = v159;
    v152[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v152[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v161 = swift_allocObject();
    v152[2] = v161;
    *(_QWORD *)(v161 + 16) = v156;
    *(_QWORD *)(v161 + 24) = 0;
    *(_BYTE *)(v161 + 32) = 0;
    *(_QWORD *)(v161 + 40) = v150;
    *(_DWORD *)(v161 + 48) = v153;
    *(double *)(v161 + 56) = v158;
    *(_QWORD *)(v161 + 64) = v160;
    *(_QWORD *)&v193 = v152;
    *((_QWORD *)&v193 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v194 = v147;
    BYTE10(v194) = v149;
    WORD4(v194) = v148;
    LODWORD(v214) = v153;
    *(_QWORD *)&v192 = v169;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v193) = v191;
    DisplayList.Item.canonicalize(options:)();
    v162 = v204;
    v163 = v205;
    v193 = v201;
    v194 = v202;
    v195 = v203;
    v196 = v204;
    v197 = v205;
    v199 = v207;
    v198 = v206;
    v200 = v208;
    outlined copy of DisplayList.Item.Value(v204, v205);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v156, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v156, 0, 0, v150);
    outlined consume of DisplayList.Item.Value(v162, v163);
    outlined consume of DisplayList.Item.Value(v188, v189);
    result = swift_bridgeObjectRelease();
    v147 = v192;
    v148 = WORD4(v192);
    v149 = BYTE10(v192);
  }
  v164 = v168;
  *v168 = v147;
  *((_WORD *)v164 + 4) = v148;
  *((_BYTE *)v164 + 10) = v149;
  return result;
}

{
  _DWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t Value;
  __int16 v11;
  char v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  __int16 v26;
  char v27;
  id v28;
  void *v29;
  __int128 v30;
  id v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t KeyPath;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  int64_t v80;
  void **v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t (*v93)(void);
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int *v107;
  int v108;
  __int128 *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  __int16 v116;
  char v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  __int128 *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  int v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int16 v165;
  char v166;
  int v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int16 v173;
  char v174;
  int v175;
  __int128 v176;
  _BYTE v177[24];
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  char v184;
  __int128 v185;

  v3 = type metadata accessor for AccessibilityNodeAttachment();
  v149 = *(_QWORD *)(v3 - 8);
  v150 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v148 = (uint64_t *)((char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6, v7);
  v154 = (uint64_t)&v132 - v8;
  v139 = v1;
  v9 = *MEMORY[0x1E0CFED28];
  if (v1[12] == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v11 = *(_WORD *)(Value + 8);
    v12 = *(_BYTE *)(Value + 10);
    v182 = *(_QWORD *)Value;
    v183 = v11;
    v184 = v12;
    swift_bridgeObjectRetain();
  }
  v13 = v139;
  if (v139[14] == v9)
  {
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v14 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v13 = v139;
  }
  v152 = v13[11];
  v176 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v26 = v183;
    v27 = v184;
    *(_QWORD *)a1 = v182;
    *(_WORD *)(a1 + 8) = v26;
    *(_BYTE *)(a1 + 10) = v27;
    return result;
  }
  v136 = (_QWORD *)a1;
  if (v14 >> 62)
  {
LABEL_101:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v15 = v139;
  v16 = AGGraphGetValue();
  v17 = *(void **)v16;
  *(_QWORD *)&v168 = *(_QWORD *)(v16 + 8);
  v18 = v17;
  swift_bridgeObjectRetain_n();
  v19 = v18;
  AccessibilityAttachment.init(properties:platformElement:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v15[13] == v9)
    goto LABEL_14;
  v20 = AGGraphGetValue();
  v22 = *(_QWORD *)v20;
  v21 = *(void **)(v20 + 8);
  if (*(_BYTE *)(v20 + 16))
  {
    if (*(_BYTE *)(v20 + 16) == 1)
    {
      v23 = swift_bridgeObjectRetain();
      v24 = specialized Sequence.compactMap<A>(_:)(v23);
      v133 = 0;
      static AccessibilityAttachment.combine(_:)(v24, (uint64_t *)&v168);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v22, v21, 1);
      v21 = (void *)*((_QWORD *)&v168 + 1);
      v22 = v168;
      goto LABEL_16;
    }
LABEL_14:
    v133 = 0;
    goto LABEL_20;
  }
  v28 = v21;
  swift_bridgeObjectRetain();
  v133 = 0;
LABEL_16:
  *(_QWORD *)&v168 = v22;
  AccessibilityProperties.merge(with:)((uint64_t *)&v168);
  v168 = v176;
  v29 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v29)
  {
    *(_QWORD *)&v168 = v22;
    *((_QWORD *)&v168 + 1) = v21;
    if (AccessibilityAttachment.platformElement.getter())
      AccessibilityAttachment.platformElement.setter();
  }
  swift_bridgeObjectRelease();

LABEL_20:
  v30 = v176;
  swift_bridgeObjectRetain();
  v31 = *((id *)&v30 + 1);
  v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v34 = *((_QWORD *)v32 + 2);
  v33 = *((_QWORD *)v32 + 3);
  if (v34 >= v33 >> 1)
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v32);
  *((_QWORD *)v32 + 2) = v34 + 1;
  v142 = v32 + 32;
  *(_OWORD *)&v32[16 * v34 + 32] = v30;
  v35 = v32;

  swift_bridgeObjectRelease();
  v36 = v139;
  v176 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v176 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v135 = v36[8];
  v37 = (__int128 *)AGGraphGetValue();
  v38 = v37[1];
  v176 = *v37;
  *(_OWORD *)v177 = v38;
  MEMORY[0x18D75BE3C]();
  DisplayList.Version.init(forUpdate:)();
  v147 = *((unsigned __int8 *)v36 + 4);
  v137 = v176;
  if ((v147 & 1) != 0)
  {
    v141 = *((_QWORD *)v35 + 2);
    if (!v141)
    {
      v138 = 0;
      v39 = 1;
      goto LABEL_90;
    }
    v134 = v35;
    swift_bridgeObjectRetain_n();
    v41 = 0;
    v138 = 0;
    v39 = 1;
    v140 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v42 = &v142[16 * v41];
      v43 = *(_QWORD *)v42;
      v44 = (void *)*((_QWORD *)v42 + 1);
      v45 = (uint64_t *)AGGraphGetValue();
      v46 = *v45;
      v155 = v45[1];
      KeyPath = swift_getKeyPath();
      if (!*(_QWORD *)(v43 + 16))
        goto LABEL_33;
      v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
      if ((v49 & 1) != 0)
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v43 + 56) + 40 * v48, (uint64_t)&v176);
        v50 = KeyPath;
        v51 = *(_QWORD *)&v177[8];
        v52 = *(_QWORD *)&v177[16];
        __swift_project_boxed_opaque_existential_1(&v176, *(uint64_t *)&v177[8]);
        *(_QWORD *)&v158 = *(_QWORD *)(v52 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        v53 = v44;
        swift_retain();
        v54 = v52;
        KeyPath = v50;
        ((void (*)(__int128 *__return_ptr, uint64_t, uint64_t))v158)(&v168, v51, v54);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
      }
      else
      {
LABEL_33:
        v168 = 0u;
        v169 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        v55 = v44;
        swift_retain();
      }
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v140, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v56 = swift_dynamicCast();
      v153 = v39;
      if (v56)
      {
        v57 = v176;
      }
      else
      {
        *(_QWORD *)&v176 = 0;
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        v58 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v57 = v58;
      }
      swift_bridgeObjectRelease();
      v151 = v44;
      v59 = *(_QWORD *)(v57 + 16);
      if (v59)
      {
        v144 = v43;
        v145 = KeyPath;
        v146 = v41;
        v60 = (_QWORD *)(v57 + 32);
        v143 = v57;
        swift_bridgeObjectRetain();
        v61 = (char *)MEMORY[0x1E0DEE9D8];
        do
        {
          v64 = v60[3];
          v63 = v60[4];
          __swift_project_boxed_opaque_existential_1(v60, v64);
          *(_QWORD *)&v168 = v46;
          *((_QWORD *)&v168 + 1) = v155;
          (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v63 + 96))(&v176, &v168, v64, v63);
          if ((_QWORD)v179)
          {
            v158 = v179;
            v65 = *(_WORD *)v177;
            v156 = v176;
            v157 = *(_OWORD *)&v177[8];
            v66 = v178;
            v67 = v180;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v61 + 2) + 1, 1, v61);
            v69 = *((_QWORD *)v61 + 2);
            v68 = *((_QWORD *)v61 + 3);
            v70 = v158;
            if (v69 >= v68 >> 1)
            {
              v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v61);
              v70 = v158;
              v61 = v71;
            }
            *((_QWORD *)v61 + 2) = v69 + 1;
            v62 = &v61[72 * v69];
            *((_OWORD *)v62 + 2) = v156;
            *((_WORD *)v62 + 24) = v65;
            *(_OWORD *)(v62 + 56) = v157;
            v62[72] = v66 & 1;
            *((_OWORD *)v62 + 5) = v70;
            *((_QWORD *)v62 + 12) = v67;
          }
          v60 += 6;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease();
        KeyPath = v145;
        v41 = v146;
        LODWORD(v43) = v144;
      }
      else
      {
        v61 = (char *)MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v72 = *((_QWORD *)v61 + 2);
      swift_release();
      v39 = v153;
      if (v72)
        break;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_28:

LABEL_29:
      if (++v41 == v141)
      {
        v35 = v134;
        swift_bridgeObjectRelease_n();
        v36 = v139;
        v40 = *((_QWORD *)v35 + 2);
        if (!v40)
          goto LABEL_90;
LABEL_71:
        v153 = v39;
        v181 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
        v185 = *(_OWORD *)(v36 + 2);
        v134 = v35;
        v81 = (void **)(v35 + 40);
        *(_QWORD *)&v158 = MEMORY[0x1E0DEE9B8] + 8;
        while (2)
        {
          v83 = (uint64_t)*(v81 - 1);
          v82 = *v81;
          if (*(_QWORD *)(v83 + 16)
            && (v84 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
                (v85 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(_QWORD *)(v83 + 56) + 40 * v84, (uint64_t)&v176);
            v86 = *(_QWORD *)&v177[8];
            v87 = *(_QWORD *)&v177[16];
            __swift_project_boxed_opaque_existential_1(&v176, *(uint64_t *)&v177[8]);
            v88 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v87 + 8);
            v89 = v82;
            swift_bridgeObjectRetain_n();
            v90 = v89;
            v88(&v168, v86, v87);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v176);
          }
          else
          {
            v168 = 0u;
            v169 = 0u;
            v91 = v82;
            swift_bridgeObjectRetain_n();
            v92 = v91;
          }
          v93 = MEMORY[0x1E0DEB940];
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v158, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v93);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v177[1] = 0;
            v95 = *((_QWORD *)&v176 + 1);
            v94 = v176;
            v96 = v177[0];
            swift_bridgeObjectRelease();
            if ((v96 & 1) == 0)
            {
              v97 = 0;
              if ((v147 & 1) != 0)
                goto LABEL_79;
LABEL_82:
              v101 = (uint64_t)v148;
              *v148 = v83;
              *(_QWORD *)(v101 + 8) = v82;
              goto LABEL_83;
            }
          }
          else
          {
            v176 = 0uLL;
            *(_WORD *)v177 = 256;
            swift_bridgeObjectRelease();
          }
          v94 = 0;
          v95 = 0;
          v97 = 1;
          if ((v147 & 1) == 0)
            goto LABEL_82;
LABEL_79:
          v98 = (uint64_t *)AGGraphGetValue();
          v100 = *v98;
          v99 = v98[1];
          *(_QWORD *)&v168 = v83;
          *((_QWORD *)&v168 + 1) = v82;
          v176 = 0u;
          *(_OWORD *)v177 = 0u;
          *(_QWORD *)&v177[16] = v94;
          v178 = v95;
          LOBYTE(v179) = v97;
          *(_QWORD *)&v160 = v100;
          *((_QWORD *)&v160 + 1) = v99;
          v159 = v185;
          swift_retain();
          swift_retain();
          v101 = (uint64_t)v148;
          CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_83:
          type metadata accessor for AccessibilityNodeAttachment.Storage();
          swift_storeEnumTagMultiPayload();
          v102 = v150;
          *(_BYTE *)(v101 + *(int *)(v150 + 20)) = 1;
          *(_BYTE *)(v101 + *(int *)(v102 + 24)) = 0;
          outlined init with take of TableCellFormula(v101, v154, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
          swift_bridgeObjectRelease();

          v103 = v181;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v103 + 16) + 1, 1);
            v103 = v181;
          }
          v105 = *(_QWORD *)(v103 + 16);
          v104 = *(_QWORD *)(v103 + 24);
          if (v105 >= v104 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
            v103 = v181;
          }
          v81 += 2;
          *(_QWORD *)(v103 + 16) = v105 + 1;
          outlined init with take of TableCellFormula(v154, v103+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(_QWORD *)(v149 + 72) * v105, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
          if (!--v40)
          {
            swift_bridgeObjectRelease_n();
            v39 = v153;
            goto LABEL_91;
          }
          continue;
        }
      }
    }
    if (!v153)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_69:
      swift_release();
      goto LABEL_28;
    }
    if (v153 == 1)
    {
      swift_bridgeObjectRelease();

      v138 = KeyPath;
      v39 = (uint64_t)v61;
      goto LABEL_29;
    }
    v9 = v43;
    v73 = *((_QWORD *)v61 + 2);
    v74 = *(_QWORD *)(v153 + 16);
    v75 = v74 + v73;
    if (__OFADD__(v74, v73))
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v75 <= *(_QWORD *)(v39 + 24) >> 1)
    {
      if (*((_QWORD *)v61 + 2))
        goto LABEL_59;
    }
    else
    {
      if (v74 <= v75)
        v80 = v74 + v73;
      else
        v80 = v74;
      v39 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v80, 1, (char *)v39);
      if (*((_QWORD *)v61 + 2))
      {
LABEL_59:
        if ((*(_QWORD *)(v39 + 24) >> 1) - *(_QWORD *)(v39 + 16) < v73)
          goto LABEL_100;
        result = swift_arrayInitWithCopy();
        if (v73)
        {
          v77 = *(_QWORD *)(v39 + 16);
          v78 = __OFADD__(v77, v73);
          v79 = v77 + v73;
          if (v78)
          {
            __break(1u);
            return result;
          }
          *(_QWORD *)(v39 + 16) = v79;
        }
        goto LABEL_68;
      }
    }
    if (v73)
      goto LABEL_99;
LABEL_68:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_69;
  }
  v138 = 0;
  v39 = 1;
  v40 = *((_QWORD *)v35 + 2);
  if (v40)
    goto LABEL_71;
LABEL_90:
  swift_bridgeObjectRelease();
  v103 = MEMORY[0x1E0DEE9D8];
LABEL_91:
  v106 = swift_allocObject();
  *(_QWORD *)(v106 + 16) = v103;
  *(_QWORD *)&v168 = v106;
  *((_QWORD *)&v168 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v169 = v182;
  BYTE10(v169) = v184;
  WORD4(v169) = v183;
  if (v39 == 1)
  {
    v107 = v139;
    v108 = *v139;
    swift_bridgeObjectRetain();
  }
  else
  {
    v109 = (__int128 *)AGGraphGetValue();
    v110 = v109[1];
    v176 = *v109;
    *(_OWORD *)v177 = v110;
    v111 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v111);
    v108 = 0;
    v107 = v139;
  }
  LODWORD(v159) = v108;
  *(_QWORD *)&v160 = v137;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v158) = *((unsigned __int8 *)v107 + 24);
  LOBYTE(v168) = v158;
  DisplayList.Item.canonicalize(options:)();
  v112 = v178;
  v113 = v179;
  v114 = (unsigned __int16)v180 | (BYTE2(v180) << 16);
  v168 = v176;
  v169 = *(_OWORD *)v177;
  v170 = *(_QWORD *)&v177[16];
  v171 = v178;
  v172 = v179;
  v174 = BYTE2(v180);
  v173 = v180;
  v175 = HIDWORD(v180);
  outlined copy of DisplayList.Item.Value(v178, v179);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v115 = v160;
  v116 = WORD4(v160);
  v117 = BYTE10(v160);
  if (v39 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v112, v113);
  }
  else
  {
    v118 = swift_allocObject();
    LODWORD(v157) = v114;
    v119 = (_QWORD *)v118;
    v120 = *v107;
    v121 = (__int128 *)AGGraphGetValue();
    v122 = v121[1];
    v168 = *v121;
    v169 = v122;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v156 = v113;
    v123 = v138;
    outlined copy of AccessibilityArchivableViewAttachment?(v138, 0, 0, v39);
    outlined copy of Environment<AppIntentExecutor?>.Content(v123, 0, 0);
    v124 = swift_bridgeObjectRetain();
    v155 = v112;
    v125 = MEMORY[0x18D75BE3C](v124);
    v127 = v126;
    v119[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v119[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v128 = swift_allocObject();
    v119[2] = v128;
    *(_QWORD *)(v128 + 16) = v123;
    *(_QWORD *)(v128 + 24) = 0;
    *(_BYTE *)(v128 + 32) = 0;
    *(_QWORD *)(v128 + 40) = v39;
    *(_DWORD *)(v128 + 48) = v120;
    *(double *)(v128 + 56) = v125;
    *(_QWORD *)(v128 + 64) = v127;
    *(_QWORD *)&v160 = v119;
    *((_QWORD *)&v160 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v161 = v115;
    BYTE10(v161) = v117;
    WORD4(v161) = v116;
    LODWORD(v181) = v120;
    *(_QWORD *)&v159 = v137;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v160) = v158;
    DisplayList.Item.canonicalize(options:)();
    v129 = v171;
    v130 = v172;
    v160 = v168;
    v161 = v169;
    v162 = v170;
    v163 = v171;
    v164 = v172;
    v166 = v174;
    v165 = v173;
    v167 = v175;
    outlined copy of DisplayList.Item.Value(v171, v172);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v123, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v123, 0, 0, v39);
    outlined consume of DisplayList.Item.Value(v129, v130);
    outlined consume of DisplayList.Item.Value(v155, v156);
    result = swift_bridgeObjectRelease();
    v115 = v159;
    v116 = WORD4(v159);
    v117 = BYTE10(v159);
  }
  v131 = v136;
  *v136 = v115;
  *((_WORD *)v131 + 4) = v116;
  *((_BYTE *)v131 + 10) = v117;
  return result;
}

uint64_t specialized DisplayListTransform.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Value;
  __int16 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  __int16 v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  char *v63;
  char *v64;
  void *v65;
  uint64_t v66;
  id v67;
  void **v68;
  uint64_t v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  int v80;
  void *v81;
  char *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  void *v88;
  _BYTE *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  id v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  id v107;
  void *v108;
  char *v109;
  void *v110;
  uint64_t v111;
  id v112;
  void **v113;
  uint64_t v114;
  void *v115;
  id v116;
  void *v117;
  uint64_t v118;
  void *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  id v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  id v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  id v145;
  void *v146;
  uint64_t v147;
  void *v148;
  void *v149;
  uint64_t *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  id v155;
  void *v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  __int128 *v160;
  __int128 v161;
  CGFloat v162;
  double v163;
  CGFloat v164;
  uint64_t v165;
  uint64_t *v166;
  void *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t KeyPath;
  unint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  __int16 v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  __int128 v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  int64_t v198;
  uint64_t v199;
  uint64_t v200;
  void **v201;
  void *v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v209;
  id v210;
  id v211;
  id v212;
  uint64_t (*v213)(void);
  uint64_t v214;
  uint64_t v215;
  char v216;
  char v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(void);
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  int v228;
  __int128 *v229;
  __int128 v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  __int16 v237;
  int *v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  int v243;
  __int128 *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  void *v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  __int16 v294;
  char v295;
  int v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  uint64_t v300;
  __int128 v301;
  __int16 v302;
  char v303;
  int v304;
  __int128 v305;
  _BYTE v306[24];
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  __int16 v314;
  char v315;
  __int128 v316;

  v4 = v1;
  v266 = a1;
  v5 = type metadata accessor for AccessibilityNodeAttachment();
  v281 = *(_QWORD *)(v5 - 8);
  v282 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v255 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v284 = (uint64_t)&v255 - v11;
  LODWORD(v12) = *MEMORY[0x1E0CFED28];
  if (*(_DWORD *)(v4 + 48) == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v14 = *(_WORD *)(Value + 8);
    v15 = *(_BYTE *)(Value + 10);
    v313 = *(_QWORD *)Value;
    v314 = v14;
    v315 = v15;
    swift_bridgeObjectRetain();
  }
  v280 = v8;
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  if (*(_DWORD *)(v4 + 56) != (_DWORD)v12)
  {
    v17 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v279 = *(_DWORD *)(v4 + 44);
  v305 = *(_OWORD *)AGGraphGetValue();
  v18 = (uint64_t)&v305;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v21 = v314;
    v22 = v315;
    v23 = v266;
    *v266 = v313;
    *((_WORD *)v23 + 4) = v21;
    *((_BYTE *)v23 + 10) = v22;
    return result;
  }
  v312 = v16;
  v19 = (char *)(v17 >> 62);
  v275 = v4;
  if (v17 >> 62)
    goto LABEL_205;
  if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    if ((v314 & 2) != 0)
      goto LABEL_127;
  }
LABEL_10:
  if (AGGraphGetCurrentAttribute() == (_DWORD)v12)
  {
    __break(1u);
LABEL_208:
    __break(1u);
    goto LABEL_209;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  if (v19)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 < 0)
      goto LABEL_208;
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v278 = 0;
    v283 = 0;
    goto LABEL_144;
  }
  v24 = 0;
  v283 = 0;
  v25 = *(_DWORD *)(v4 + 28);
  v277 = *(_DWORD *)(v4 + 52);
  v278 = v25;
  v276 = v17;
  v274 = v18;
  while (1)
  {
    if (v24 == v18)
    {
      __break(1u);
LABEL_205:
      swift_bridgeObjectRetain();
      v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v18)
        goto LABEL_9;
      goto LABEL_10;
    }
    *(_QWORD *)&v287 = v24;
    v26 = (uint64_t *)AGGraphGetValue();
    v2 = *v26;
    v27 = (void *)v26[1];
    *(_QWORD *)&v305 = *v26;
    *((_QWORD *)&v305 + 1) = v27;
    if (v277 != (_DWORD)v12)
    {
      v28 = AGGraphGetValue();
      v30 = *(_QWORD *)v28;
      v29 = *(char **)(v28 + 8);
      if (!*(_BYTE *)(v28 + 16))
      {
        v35 = v27;
        swift_bridgeObjectRetain();
        v19 = v29;
        outlined copy of AccessibilityAttachment.Tree(v30, v29, 0);
LABEL_29:
        *(_QWORD *)&v297 = v30;
        AccessibilityProperties.merge(with:)((uint64_t *)&v297);
        v27 = (void *)*((_QWORD *)&v305 + 1);
        v2 = v305;
        v297 = v305;
        v37 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v37
          || (*(_QWORD *)&v297 = v30, *((_QWORD *)&v297 + 1) = v19, !AccessibilityAttachment.platformElement.getter()))
        {
          swift_bridgeObjectRelease();

        }
        else
        {
          AccessibilityAttachment.platformElement.setter();
          swift_bridgeObjectRelease();

          v27 = (void *)*((_QWORD *)&v305 + 1);
          v2 = v305;
        }
        goto LABEL_33;
      }
      if (*(_BYTE *)(v28 + 16) == 1)
        break;
    }
    v34 = v27;
    swift_bridgeObjectRetain();
LABEL_33:
    *(_QWORD *)&v297 = v2;
    *((_QWORD *)&v297 + 1) = v27;
    if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();

    }
    else
    {
      v38 = (char *)v312;
      v19 = v27;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
      v3 = *((_QWORD *)v38 + 2);
      v39 = *((_QWORD *)v38 + 3);
      if (v3 >= v39 >> 1)
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v3 + 1, 1, v38);
      *((_QWORD *)v38 + 2) = v3 + 1;
      v40 = &v38[16 * v3];
      *((_QWORD *)v40 + 4) = v2;
      *((_QWORD *)v40 + 5) = v27;

      swift_bridgeObjectRelease();
      v312 = (uint64_t)v38;
    }
    v24 = v287 + 1;
    v18 = v274;
    v17 = v276;
    if ((_QWORD)v287 + 1 == v274)
    {
      swift_bridgeObjectRelease();
      v278 = 0;
      goto LABEL_144;
    }
  }
  v264 = *(_QWORD *)(v30 + 16);
  if (!v264)
  {
    v36 = v27;
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityAttachment.Tree(v30, v29, 1);
    v33 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_28:
    static AccessibilityAttachment.combine(_:)(v33, (uint64_t *)&v297);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v30, v29, 1);
    v19 = (char *)*((_QWORD *)&v297 + 1);
    v30 = v297;
    goto LABEL_29;
  }
  v268 = v30 + 32;
  outlined copy of AccessibilityAttachment.Tree(v30, v29, 1);
  v31 = v27;
  swift_bridgeObjectRetain();
  v256 = v30;
  v257 = v29;
  outlined copy of AccessibilityAttachment.Tree(v30, v29, 1);
  v32 = 0;
  v33 = (char *)MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v46 = v268 + 24 * v32;
    v48 = *(_QWORD *)v46;
    v47 = *(void **)(v46 + 8);
    v49 = *(unsigned __int8 *)(v46 + 16);
    if (!v49)
    {
      v263 = v32;
      v52 = v47;
      v53 = v47;
      swift_bridgeObjectRetain();
LABEL_47:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
      v55 = *((_QWORD *)v33 + 2);
      v54 = *((_QWORD *)v33 + 3);
      v32 = v263;
      if (v55 >= v54 >> 1)
      {
        v41 = v33;
        v42 = v263;
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v41);
        v44 = v52;
        v32 = v42;
        v33 = v43;
      }
      else
      {
        v44 = v52;
      }
      *((_QWORD *)v33 + 2) = v55 + 1;
      v45 = &v33[16 * v55];
      *((_QWORD *)v45 + 4) = v48;
      *((_QWORD *)v45 + 5) = v44;
LABEL_41:
      if (++v32 == v264)
      {
        v30 = v256;
        v29 = v257;
        outlined consume of AccessibilityAttachment.Tree(v256, v257, 1);
        goto LABEL_28;
      }
      continue;
    }
    break;
  }
  if (v49 != 1)
    goto LABEL_41;
  v262 = (uint64_t)v33;
  v263 = v32;
  v50 = *(_QWORD *)(v48 + 16);
  v261 = v48;
  v265 = v50;
  v258 = v47;
  if (!v50)
  {
    outlined copy of AccessibilityAttachment.Tree(v48, v47, 1);
    outlined copy of AccessibilityAttachment.Tree(v48, v47, 1);
    swift_bridgeObjectRetain();
    v56 = (char *)MEMORY[0x1E0DEE9D8];
    v57 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v57)
    {
LABEL_52:
      v58 = v57 - 1;
      if (v57 != 1)
      {
        v63 = v56;
        v64 = &v56[16 * v58];
        v66 = *((_QWORD *)v64 + 4);
        v65 = (void *)*((_QWORD *)v64 + 5);
        *(_QWORD *)&v289 = v66;
        *((_QWORD *)&v289 + 1) = v65;
        v67 = v65;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v272 = v63;
        v68 = (void **)&v63[16 * v57 + 8];
        v3 = v57 - 2;
        while (v3 < v58)
        {
          v69 = (uint64_t)*(v68 - 1);
          v70 = *v68;
          *(_QWORD *)&v316 = v69;
          v71 = v70;
          swift_bridgeObjectRetain();
          AccessibilityProperties.merge(with:)((uint64_t *)&v316);
          v316 = v289;
          v72 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v72)
          {
            *(_QWORD *)&v316 = v69;
            *((_QWORD *)&v316 + 1) = v70;
            if (AccessibilityAttachment.platformElement.getter())
              AccessibilityAttachment.platformElement.setter();
          }

          swift_bridgeObjectRelease();
          v68 -= 2;
          if (--v3 == -1)
          {
            swift_bridgeObjectRelease_n();
            v73 = v261;
            v74 = v258;
            outlined consume of AccessibilityAttachment.Tree(v261, v258, 1);
            outlined consume of AccessibilityAttachment.Tree(v73, v74, 1);
            outlined consume of AccessibilityAttachment.Tree(v73, v74, 1);
            v52 = (void *)*((_QWORD *)&v289 + 1);
            v48 = v289;
            v33 = (char *)v262;
            goto LABEL_47;
          }
        }
        goto LABEL_134;
      }
      v60 = (void *)*((_QWORD *)v56 + 5);
      *(_QWORD *)&v297 = *((_QWORD *)v56 + 4);
      v59 = v297;
      v61 = v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v62 = v258;
      outlined consume of AccessibilityAttachment.Tree(v48, v258, 1);
      outlined consume of AccessibilityAttachment.Tree(v48, v62, 1);
      outlined consume of AccessibilityAttachment.Tree(v48, v62, 1);
      v48 = v59;
      v52 = v60;
    }
    else
    {
LABEL_123:
      AccessibilityAttachment.init()();
      swift_bridgeObjectRelease();
      v149 = v258;
      outlined consume of AccessibilityAttachment.Tree(v48, v258, 1);
      outlined consume of AccessibilityAttachment.Tree(v48, v149, 1);
      outlined consume of AccessibilityAttachment.Tree(v48, v149, 1);
      v52 = (void *)*((_QWORD *)&v297 + 1);
      v48 = v297;
    }
    goto LABEL_47;
  }
  v270 = v48 + 32;
  outlined copy of AccessibilityAttachment.Tree(v48, v47, 1);
  outlined copy of AccessibilityAttachment.Tree(v48, v47, 1);
  outlined copy of AccessibilityAttachment.Tree(v48, v47, 1);
  swift_bridgeObjectRetain();
  v51 = 0;
  v272 = (char *)MEMORY[0x1E0DEE9D8];
  LODWORD(v267) = v12;
  while (1)
  {
    v77 = v270 + 24 * v51;
    v79 = *(_QWORD *)v77;
    v78 = *(void **)(v77 + 8);
    v80 = *(unsigned __int8 *)(v77 + 16);
    if (!v80)
    {
      v269 = v51;
      v3 = (uint64_t)v78;
      v123 = v78;
      v124 = v79;
      swift_bridgeObjectRetain();
LABEL_105:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v75 = v272;
      else
        v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v272 + 2) + 1, 1, v272);
      v126 = *((_QWORD *)v75 + 2);
      v125 = *((_QWORD *)v75 + 3);
      if (v126 >= v125 >> 1)
        v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v125 > 1), v126 + 1, 1, v75);
      *((_QWORD *)v75 + 2) = v126 + 1;
      v272 = v75;
      v76 = &v75[16 * v126];
      *((_QWORD *)v76 + 4) = v124;
      *((_QWORD *)v76 + 5) = v3;
      v51 = v269;
      goto LABEL_63;
    }
    if (v80 == 1)
      break;
LABEL_63:
    if (++v51 == v265)
    {
      outlined consume of AccessibilityAttachment.Tree(v48, v258, 1);
      v56 = v272;
      v57 = *((_QWORD *)v272 + 2);
      if (v57)
        goto LABEL_52;
      goto LABEL_123;
    }
  }
  v269 = v51;
  v285 = *(_QWORD *)(v79 + 16);
  v259 = v78;
  v260 = v79;
  if (!v285)
  {
    v127 = v78;
    outlined copy of AccessibilityAttachment.Tree(v79, v78, 1);
    outlined copy of AccessibilityAttachment.Tree(v79, v127, 1);
    swift_bridgeObjectRetain();
    v128 = MEMORY[0x1E0DEE9D8];
    v129 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v129)
    {
LABEL_110:
      v58 = v129 - 1;
      if (v129 != 1)
      {
        v137 = v128;
        v138 = v128 + 16 * v58;
        v140 = *(_QWORD *)(v138 + 32);
        v139 = *(void **)(v138 + 40);
        *(_QWORD *)&v316 = v140;
        *((_QWORD *)&v316 + 1) = v139;
        v141 = v139;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(_QWORD *)&v288 = v137;
        v68 = (void **)(v137 + 16 * v129 + 8);
        v142 = v129 - 2;
        while (v142 < v58)
        {
          v143 = (uint64_t)*(v68 - 1);
          v144 = *v68;
          *(_QWORD *)&v311 = v143;
          v145 = v144;
          swift_bridgeObjectRetain();
          AccessibilityProperties.merge(with:)((uint64_t *)&v311);
          v311 = v316;
          v146 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v146)
          {
            *(_QWORD *)&v311 = v143;
            *((_QWORD *)&v311 + 1) = v144;
            if (AccessibilityAttachment.platformElement.getter())
              AccessibilityAttachment.platformElement.setter();
          }

          swift_bridgeObjectRelease();
          v68 -= 2;
          if (--v142 == -1)
          {
            swift_bridgeObjectRelease_n();
            v148 = v259;
            v147 = v260;
            outlined consume of AccessibilityAttachment.Tree(v260, v259, 1);
            outlined consume of AccessibilityAttachment.Tree(v147, v148, 1);
            outlined consume of AccessibilityAttachment.Tree(v147, v148, 1);
            v3 = *((_QWORD *)&v316 + 1);
            v124 = v316;
            v48 = v261;
            v33 = (char *)v262;
            goto LABEL_105;
          }
        }
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        v155 = (id)v58;
        swift_bridgeObjectRetain();
        v283 = 0;
LABEL_136:
        *(_QWORD *)&v297 = v68;
        AccessibilityProperties.merge(with:)((uint64_t *)&v297);
        v3 = *((_QWORD *)&v305 + 1);
        v2 = v305;
        v297 = v305;
        v156 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v156
          || (*(_QWORD *)&v297 = v68, *((_QWORD *)&v297 + 1) = v58, !AccessibilityAttachment.platformElement.getter()))
        {
          swift_bridgeObjectRelease();

        }
        else
        {
          AccessibilityAttachment.platformElement.setter();
          swift_bridgeObjectRelease();

          v3 = *((_QWORD *)&v305 + 1);
          v2 = v305;
        }
        goto LABEL_140;
      }
      v131 = *(void **)(v128 + 40);
      *(_QWORD *)&v289 = *(_QWORD *)(v128 + 32);
      v130 = v289;
      v132 = v131;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v134 = v259;
      v133 = v260;
      outlined consume of AccessibilityAttachment.Tree(v260, v259, 1);
      outlined consume of AccessibilityAttachment.Tree(v133, v134, 1);
      outlined consume of AccessibilityAttachment.Tree(v133, v134, 1);
      v124 = v130;
      v3 = (uint64_t)v131;
    }
    else
    {
LABEL_113:
      AccessibilityAttachment.init()();
      swift_bridgeObjectRelease();
      v136 = v259;
      v135 = v260;
      outlined consume of AccessibilityAttachment.Tree(v260, v259, 1);
      outlined consume of AccessibilityAttachment.Tree(v135, v136, 1);
      outlined consume of AccessibilityAttachment.Tree(v135, v136, 1);
      v3 = *((_QWORD *)&v289 + 1);
      v124 = v289;
    }
    goto LABEL_105;
  }
  *(_QWORD *)&v286 = v79 + 32;
  v81 = v78;
  outlined copy of AccessibilityAttachment.Tree(v79, v78, 1);
  outlined copy of AccessibilityAttachment.Tree(v79, v81, 1);
  outlined copy of AccessibilityAttachment.Tree(v79, v81, 1);
  swift_bridgeObjectRetain();
  v4 = 0;
  *(_QWORD *)&v288 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v83 = v286 + 24 * v4;
    v85 = *(_QWORD *)v83;
    v84 = *(void **)(v83 + 8);
    v86 = *(unsigned __int8 *)(v83 + 16);
    if (!v86)
    {
      v100 = v84;
      v101 = v84;
      swift_bridgeObjectRetain();
      goto LABEL_99;
    }
    if (v86 == 1)
      break;
LABEL_69:
    if (++v4 == v285)
    {
      outlined consume of AccessibilityAttachment.Tree(v260, v259, 1);
      v4 = v275;
      v128 = v288;
      v129 = *(_QWORD *)(v288 + 16);
      if (v129)
        goto LABEL_110;
      goto LABEL_113;
    }
  }
  v87 = *(_QWORD *)(v85 + 16);
  v271 = v85;
  v273 = v84;
  v88 = v84;
  if (v87)
  {
    outlined copy of AccessibilityAttachment.Tree(v85, v84, 1);
    outlined copy of AccessibilityAttachment.Tree(v85, v88, 1);
    outlined copy of AccessibilityAttachment.Tree(v85, v88, 1);
    swift_bridgeObjectRetain();
    v89 = (_BYTE *)(v85 + 48);
    v90 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v92 = *((_QWORD *)v89 - 2);
      v93 = (void *)*((_QWORD *)v89 - 1);
      if (!*v89)
        break;
      if (*v89 == 1)
      {
        outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v89 - 2), *((void **)v89 - 1), 1);
        outlined copy of AccessibilityAttachment.Tree(v92, v93, 1);
        v94 = swift_bridgeObjectRetain();
        v95 = v283;
        v96 = specialized Sequence.compactMap<A>(_:)(v94);
        v283 = v95;
        static AccessibilityAttachment.combine(_:)(v96, (uint64_t *)&v311);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v92, v93, 1);
        outlined consume of AccessibilityAttachment.Tree(v92, v93, 1);
        swift_bridgeObjectRelease();
        v93 = (void *)*((_QWORD *)&v311 + 1);
        v92 = v311;
LABEL_80:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v90 + 2) + 1, 1, v90);
        v99 = *((_QWORD *)v90 + 2);
        v98 = *((_QWORD *)v90 + 3);
        if (v99 >= v98 >> 1)
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v98 > 1), v99 + 1, 1, v90);
        *((_QWORD *)v90 + 2) = v99 + 1;
        v91 = &v90[16 * v99];
        *((_QWORD *)v91 + 4) = v92;
        *((_QWORD *)v91 + 5) = v93;
      }
      v89 += 24;
      if (!--v87)
      {
        v85 = v271;
        outlined consume of AccessibilityAttachment.Tree(v271, v273, 1);
        goto LABEL_87;
      }
    }
    v97 = v93;
    swift_bridgeObjectRetain();
    goto LABEL_80;
  }
  outlined copy of AccessibilityAttachment.Tree(v85, v84, 1);
  outlined copy of AccessibilityAttachment.Tree(v85, v88, 1);
  swift_bridgeObjectRetain();
  v90 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_87:
  v102 = *((_QWORD *)v90 + 2);
  v103 = v102 - 1;
  LODWORD(v12) = v267;
  if (v102 == 1)
  {
    v105 = v85;
    v85 = *((_QWORD *)v90 + 4);
    v106 = (void *)*((_QWORD *)v90 + 5);
    *(_QWORD *)&v316 = v85;
    v107 = v106;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v108 = v273;
    outlined consume of AccessibilityAttachment.Tree(v105, v273, 1);
    outlined consume of AccessibilityAttachment.Tree(v105, v108, 1);
    outlined consume of AccessibilityAttachment.Tree(v105, v108, 1);
    v100 = v106;
LABEL_98:
    v48 = v261;
    v33 = (char *)v262;
LABEL_99:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v120 = (char *)v288;
    else
      v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v288 + 16) + 1, 1, (char *)v288);
    v122 = *((_QWORD *)v120 + 2);
    v121 = *((_QWORD *)v120 + 3);
    if (v122 >= v121 >> 1)
      v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v121 > 1), v122 + 1, 1, v120);
    *((_QWORD *)v120 + 2) = v122 + 1;
    *(_QWORD *)&v288 = v120;
    v82 = &v120[16 * v122];
    *((_QWORD *)v82 + 4) = v85;
    *((_QWORD *)v82 + 5) = v100;
    goto LABEL_69;
  }
  if (!v102)
  {
    AccessibilityAttachment.init()();
    swift_bridgeObjectRelease();
    v104 = v273;
    outlined consume of AccessibilityAttachment.Tree(v85, v273, 1);
    outlined consume of AccessibilityAttachment.Tree(v85, v104, 1);
    outlined consume of AccessibilityAttachment.Tree(v85, v104, 1);
    v100 = (void *)*((_QWORD *)&v316 + 1);
    v85 = v316;
    goto LABEL_98;
  }
  v109 = &v90[16 * v103];
  v111 = *((_QWORD *)v109 + 4);
  v110 = (void *)*((_QWORD *)v109 + 5);
  *(_QWORD *)&v311 = v111;
  *((_QWORD *)&v311 + 1) = v110;
  v112 = v110;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v113 = (void **)&v90[16 * v102 + 8];
  v12 = v102 - 2;
  while (v12 < v103)
  {
    v114 = (uint64_t)*(v113 - 1);
    v115 = *v113;
    *(_QWORD *)&v310 = v114;
    v116 = v115;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)((uint64_t *)&v310);
    v310 = v311;
    v117 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v117)
    {
      *(_QWORD *)&v310 = v114;
      *((_QWORD *)&v310 + 1) = v115;
      if (AccessibilityAttachment.platformElement.getter())
        AccessibilityAttachment.platformElement.setter();
    }

    swift_bridgeObjectRelease();
    v113 -= 2;
    if (--v12 == -1)
    {
      swift_bridgeObjectRelease_n();
      v118 = v271;
      v119 = v273;
      outlined consume of AccessibilityAttachment.Tree(v271, v273, 1);
      outlined consume of AccessibilityAttachment.Tree(v118, v119, 1);
      outlined consume of AccessibilityAttachment.Tree(v118, v119, 1);
      v100 = (void *)*((_QWORD *)&v311 + 1);
      v85 = v311;
      LODWORD(v12) = v267;
      goto LABEL_98;
    }
  }
  __break(1u);
LABEL_127:
  v150 = (uint64_t *)AGGraphGetValue();
  v2 = *v150;
  v3 = v150[1];
  v151 = (id)v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v305 = v2;
  *((_QWORD *)&v305 + 1) = v3;
  if (*(_DWORD *)(v4 + 52) == (_DWORD)v12)
    goto LABEL_131;
  v152 = AGGraphGetValue();
  v68 = *(void ***)v152;
  v58 = *(_QWORD *)(v152 + 8);
  if (!*(_BYTE *)(v152 + 16))
    goto LABEL_135;
  if (*(_BYTE *)(v152 + 16) == 1)
  {
    v153 = swift_bridgeObjectRetain();
    v154 = specialized Sequence.compactMap<A>(_:)(v153);
    v283 = 0;
    static AccessibilityAttachment.combine(_:)(v154, (uint64_t *)&v297);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree((uint64_t)v68, (void *)v58, 1);
    v58 = *((_QWORD *)&v297 + 1);
    v68 = (void **)v297;
    goto LABEL_136;
  }
LABEL_131:
  v283 = 0;
LABEL_140:
  v18 = (uint64_t)(id)v3;
  swift_bridgeObjectRetain();
  v19 = (char *)MEMORY[0x1E0DEE9D8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_209:
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
  v158 = *((_QWORD *)v19 + 2);
  v157 = *((_QWORD *)v19 + 3);
  if (v158 >= v157 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v157 > 1), v158 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v158 + 1;
  v159 = &v19[16 * v158];
  *((_QWORD *)v159 + 4) = v2;
  *((_QWORD *)v159 + 5) = v3;

  swift_bridgeObjectRelease();
  v312 = (uint64_t)v19;
  v278 = 1;
LABEL_144:
  v305 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v305 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  LODWORD(v263) = *(_DWORD *)(v4 + 32);
  v160 = (__int128 *)AGGraphGetValue();
  v161 = v160[1];
  v305 = *v160;
  *(_OWORD *)v306 = v161;
  v162 = MEMORY[0x18D75BE3C]();
  v164 = v163;
  DisplayList.Version.init(forUpdate:)();
  v277 = *(unsigned __int8 *)(v4 + 4);
  v264 = v305;
  if ((v277 & 1) == 0 || (v269 = *(_QWORD *)(v312 + 16)) == 0)
  {
    v265 = 0;
    v276 = 1;
    goto LABEL_178;
  }
  v268 = v312 + 32;
  v262 = v312;
  swift_bridgeObjectRetain_n();
  v165 = 0;
  v265 = 0;
  v276 = 1;
  v267 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v166 = (uint64_t *)(v268 + 16 * v165);
    v168 = *v166;
    v167 = (void *)v166[1];
    v169 = (uint64_t *)AGGraphGetValue();
    v170 = *v169;
    v285 = v169[1];
    KeyPath = swift_getKeyPath();
    if (*(_QWORD *)(v168 + 16)
      && (v172 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v173 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v168 + 56) + 40 * v172, (uint64_t)&v305);
      v174 = KeyPath;
      v175 = *(_QWORD *)&v306[8];
      v176 = *(_QWORD *)&v306[16];
      __swift_project_boxed_opaque_existential_1(&v305, *(uint64_t *)&v306[8]);
      v177 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v176 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v178 = v167;
      swift_retain();
      v179 = v175;
      KeyPath = v174;
      v177(&v297, v179, v176);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v305);
    }
    else
    {
      v297 = 0u;
      v298 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v180 = v167;
      swift_retain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v267, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if (swift_dynamicCast())
    {
      v181 = v305;
    }
    else
    {
      *(_QWORD *)&v305 = 0;
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v181 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v182 = *(_QWORD *)(v181 + 16);
    if (v182)
    {
      v271 = KeyPath;
      v272 = (char *)v168;
      v273 = v167;
      v274 = v165;
      v183 = (_QWORD *)(v181 + 32);
      v270 = v181;
      swift_bridgeObjectRetain();
      v184 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v186 = v183[3];
        v187 = v183[4];
        __swift_project_boxed_opaque_existential_1(v183, v186);
        *(_QWORD *)&v297 = v170;
        *((_QWORD *)&v297 + 1) = v285;
        (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v187 + 96))(&v305, &v297, v186, v187);
        if ((_QWORD)v308)
        {
          v288 = v308;
          v188 = *(_WORD *)v306;
          v286 = v305;
          v287 = *(_OWORD *)&v306[8];
          v189 = v307;
          v190 = v309;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v184 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v184 + 2) + 1, 1, v184);
          v192 = *((_QWORD *)v184 + 2);
          v191 = *((_QWORD *)v184 + 3);
          v193 = v288;
          if (v192 >= v191 >> 1)
          {
            v194 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v191 > 1), v192 + 1, 1, v184);
            v193 = v288;
            v184 = v194;
          }
          *((_QWORD *)v184 + 2) = v192 + 1;
          v185 = &v184[72 * v192];
          *((_OWORD *)v185 + 2) = v286;
          *((_WORD *)v185 + 24) = v188;
          *(_OWORD *)(v185 + 56) = v287;
          v185[72] = v189 & 1;
          *((_OWORD *)v185 + 5) = v193;
          *((_QWORD *)v185 + 12) = v190;
        }
        v183 += 6;
        --v182;
      }
      while (v182);
      swift_bridgeObjectRelease();
      v167 = v273;
      v165 = v274;
      KeyPath = v271;
    }
    else
    {
      v184 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v195 = *((_QWORD *)v184 + 2);
    swift_release();
    v4 = v275;
    if (!v195)
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_148:
      swift_bridgeObjectRelease();

      goto LABEL_149;
    }
    if (v276 != 1)
    {
      if (v276)
      {
        *(_QWORD *)&v305 = v276;
        v196 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v196);
        swift_bridgeObjectRelease();
        swift_release();
        v276 = v305;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        v276 = 0;
      }
      goto LABEL_148;
    }
    swift_bridgeObjectRelease();

    v265 = KeyPath;
    v276 = (uint64_t)v184;
LABEL_149:
    if (++v165 != v269)
      continue;
    break;
  }
  swift_bridgeObjectRelease_n();
LABEL_178:
  v197 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v313, &v312, v162, v164);
  v198 = *(_QWORD *)(v312 + 16);
  v199 = MEMORY[0x1E0DEE9D8];
  if (!v198)
    goto LABEL_197;
  *(_QWORD *)&v310 = MEMORY[0x1E0DEE9D8];
  v200 = v312;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v198, 0);
  v316 = *(_OWORD *)(v4 + 8);
  LODWORD(v288) = v197 & 1;
  *(_QWORD *)&v286 = v200;
  v201 = (void **)(v200 + 40);
  *(_QWORD *)&v287 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v203 = (uint64_t)*(v201 - 1);
    v202 = *v201;
    if (*(_QWORD *)(v203 + 16)
      && (v204 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v205 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v203 + 56) + 40 * v204, (uint64_t)&v305);
      v207 = *(_QWORD *)&v306[8];
      v206 = *(_QWORD *)&v306[16];
      __swift_project_boxed_opaque_existential_1(&v305, *(uint64_t *)&v306[8]);
      v208 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v206 + 8);
      v209 = v202;
      swift_bridgeObjectRetain_n();
      v210 = v209;
      v208(&v297, v207, v206);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v305);
    }
    else
    {
      v297 = 0u;
      v298 = 0u;
      v211 = v202;
      swift_bridgeObjectRetain_n();
      v212 = v211;
    }
    v213 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v287, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v213);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v306[1] = 0;
      v215 = *((_QWORD *)&v305 + 1);
      v214 = v305;
      v216 = v306[0];
      swift_bridgeObjectRelease();
      if ((v216 & 1) == 0)
      {
        v217 = 0;
        if ((v277 & 1) != 0)
          goto LABEL_187;
LABEL_190:
        v221 = v280;
        *v280 = v203;
        v221[1] = v202;
        goto LABEL_191;
      }
    }
    else
    {
      v305 = 0uLL;
      *(_WORD *)v306 = 256;
      swift_bridgeObjectRelease();
    }
    v214 = 0;
    v215 = 0;
    v217 = 1;
    if ((v277 & 1) == 0)
      goto LABEL_190;
LABEL_187:
    v218 = (uint64_t *)AGGraphGetValue();
    v220 = *v218;
    v219 = v218[1];
    *(_QWORD *)&v297 = v203;
    *((_QWORD *)&v297 + 1) = v202;
    v305 = 0u;
    *(_OWORD *)v306 = 0u;
    *(_QWORD *)&v306[16] = v214;
    v307 = v215;
    LOBYTE(v308) = v217;
    *(_QWORD *)&v289 = v220;
    *((_QWORD *)&v289 + 1) = v219;
    v311 = v316;
    swift_retain();
    swift_retain();
    v221 = v280;
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_191:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v222 = v282;
    *((_BYTE *)v221 + *(int *)(v282 + 20)) = v288;
    *((_BYTE *)v221 + *(int *)(v222 + 24)) = v278;
    v223 = (uint64_t)v221;
    v224 = MEMORY[0x1E0CE6150];
    outlined init with take of TableCellFormula(v223, v284, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v199 = v310;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v199 + 16) + 1, 1);
      v199 = v310;
    }
    v226 = *(_QWORD *)(v199 + 16);
    v225 = *(_QWORD *)(v199 + 24);
    if (v226 >= v225 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v225 > 1, v226 + 1, 1);
      v199 = v310;
    }
    v201 += 2;
    *(_QWORD *)(v199 + 16) = v226 + 1;
    outlined init with take of TableCellFormula(v284, v199+ ((*(unsigned __int8 *)(v281 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v281 + 80))+ *(_QWORD *)(v281 + 72) * v226, (uint64_t (*)(_QWORD))v224);
    if (--v198)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v4 = v275;
LABEL_197:
  swift_bridgeObjectRelease();
  v227 = swift_allocObject();
  *(_QWORD *)(v227 + 16) = v199;
  *(_QWORD *)&v297 = v227;
  *((_QWORD *)&v297 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v298 = v313;
  BYTE10(v298) = v315;
  WORD4(v298) = v314;
  if (v276 == 1)
  {
    v228 = *(_DWORD *)v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v229 = (__int128 *)AGGraphGetValue();
    v230 = v229[1];
    v305 = *v229;
    *(_OWORD *)v306 = v230;
    v231 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v231);
    v228 = 0;
  }
  LODWORD(v311) = v228;
  *(_QWORD *)&v289 = v264;
  DisplayList.Item.init(_:frame:identity:version:)();
  v232 = *(unsigned __int8 *)(v4 + 24);
  LOBYTE(v297) = *(_BYTE *)(v4 + 24);
  DisplayList.Item.canonicalize(options:)();
  v233 = v307;
  v234 = v308;
  v235 = (unsigned __int16)v309 | (BYTE2(v309) << 16);
  v297 = v305;
  v298 = *(_OWORD *)v306;
  v299 = *(_QWORD *)&v306[16];
  v300 = v307;
  v301 = v308;
  v303 = BYTE2(v309);
  v302 = v309;
  v304 = HIDWORD(v309);
  outlined copy of DisplayList.Item.Value(v307, v308);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v236 = v289;
  v237 = WORD4(v289);
  v238 = (int *)v4;
  v239 = BYTE10(v289);
  if (v276 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v233, v234);
  }
  else
  {
    *(_QWORD *)&v287 = v234;
    v240 = v276;
    v241 = swift_allocObject();
    LODWORD(v285) = v232;
    v242 = (_QWORD *)v241;
    LODWORD(v288) = v235;
    v243 = *v238;
    v244 = (__int128 *)AGGraphGetValue();
    v245 = v244[1];
    v297 = *v244;
    v298 = v245;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v286 = v233;
    v246 = v265;
    outlined copy of AccessibilityArchivableViewAttachment?(v265, 0, 0, v240);
    outlined copy of Environment<AppIntentExecutor?>.Content(v246, 0, 0);
    v247 = swift_bridgeObjectRetain();
    v248 = MEMORY[0x18D75BE3C](v247);
    v250 = v249;
    v242[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v242[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v251 = swift_allocObject();
    v242[2] = v251;
    *(_QWORD *)(v251 + 16) = v246;
    *(_QWORD *)(v251 + 24) = 0;
    *(_BYTE *)(v251 + 32) = 0;
    *(_QWORD *)(v251 + 40) = v240;
    *(_DWORD *)(v251 + 48) = v243;
    *(double *)(v251 + 56) = v248;
    *(_QWORD *)(v251 + 64) = v250;
    *(_QWORD *)&v289 = v242;
    *((_QWORD *)&v289 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v290 = v236;
    BYTE10(v290) = v239;
    WORD4(v290) = v237;
    LODWORD(v310) = v243;
    *(_QWORD *)&v311 = v264;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v289) = v285;
    DisplayList.Item.canonicalize(options:)();
    v252 = v300;
    v253 = v301;
    v289 = v297;
    v290 = v298;
    v291 = v299;
    v292 = v300;
    v293 = v301;
    v295 = v303;
    v294 = v302;
    v296 = v304;
    outlined copy of DisplayList.Item.Value(v300, v301);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v246, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v246, 0, 0, v240);
    outlined consume of DisplayList.Item.Value(v252, v253);
    outlined consume of DisplayList.Item.Value(v286, v287);
    result = swift_bridgeObjectRelease();
    v236 = v311;
    v237 = WORD4(v311);
    v239 = BYTE10(v311);
  }
  v254 = v266;
  *v266 = v236;
  *((_WORD *)v254 + 4) = v237;
  *((_BYTE *)v254 + 10) = v239;
  return result;
}

uint64_t specialized DisplayListTransform.value.getter@<X0>(char *a1@<X8>)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  __int16 v12;
  char v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  __int128 v36;
  id v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  int *v43;
  __int128 *v44;
  __int128 v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  int64_t v88;
  char v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  char v93;
  void **v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t (*v106)(void);
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  int v120;
  __int128 *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int16 v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  __int128 *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  _DWORD v144[4];
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  id v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int16 v176;
  char v177;
  int v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int16 v184;
  char v185;
  int v186;
  __int128 v187;
  _BYTE v188[24];
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  char v196;
  __int128 v197;

  v3 = type metadata accessor for AccessibilityNodeAttachment();
  v162 = *(_QWORD *)(v3 - 8);
  v163 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v165 = (uint64_t)v144 - v9;
  v150 = v1;
  v10 = v1[12];
  LODWORD(v169) = *MEMORY[0x1E0CFED28];
  if (v10 == (_DWORD)v169)
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v12 = *(_WORD *)(Value + 8);
    v13 = *(_BYTE *)(Value + 10);
    v194 = *(_QWORD *)Value;
    v195 = v12;
    v196 = v13;
    swift_bridgeObjectRetain();
  }
  v14 = v150;
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  if (v150[14] != (_DWORD)v169)
  {
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v14 = v150;
  }
  v161 = v14[11];
  v187 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v20 = v195;
    v21 = v196;
    *(_QWORD *)a1 = v194;
    *((_WORD *)a1 + 4) = v20;
    a1[10] = v21;
    return result;
  }
  v193 = v15;
  v17 = (char *)(v16 >> 62);
  if (v16 >> 62)
    goto LABEL_118;
  while (1)
  {
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result == (_DWORD)v169)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
      return result;
    }
    AccessibilityAttachmentToken.init<A>(_:)();
    if (v17)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v19 < 0)
        goto LABEL_120;
    }
    else
    {
      v19 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v157 = v6;
    v145 = a1;
    if (v19)
    {
      v22 = 0;
      v149 = 0;
      LODWORD(v168) = v150[7];
      v23 = v150[13];
      *(_QWORD *)&v167 = v16 & 0xC000000000000001;
      v24 = (char *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v25 = *(_DWORD *)AGGraphGetValue();
        if ((_QWORD)v167)
          v26 = (id)MEMORY[0x18D75E3BC](v22, v16);
        else
          v26 = *(id *)(v16 + 8 * v22 + 32);
        v27 = v26;
        AccessibilityNode.visibility.getter((int *)&v187);

        if ((v187 & 4) != 0 || (v187 & 8) != 0 && (BYTE4(v187) & 4) == 0)
          AccessibilityAttachment.init()();
        else
          AccessibilityGestureModifier.initialAttachment(for:)(v16, v25);
        if (v23 != (_DWORD)v169)
        {
          v28 = AGGraphGetValue();
          v30 = *(_QWORD *)v28;
          v29 = *(void **)(v28 + 8);
          if (!*(_BYTE *)(v28 + 16))
          {
            v34 = v29;
            swift_bridgeObjectRetain();
LABEL_30:
            *(_QWORD *)&v179 = v30;
            AccessibilityProperties.merge(with:)((uint64_t *)&v179);
            v179 = v187;
            v35 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v35)
            {
              *(_QWORD *)&v179 = v30;
              *((_QWORD *)&v179 + 1) = v29;
              if (AccessibilityAttachment.platformElement.getter())
                AccessibilityAttachment.platformElement.setter();
            }
            swift_bridgeObjectRelease();

            goto LABEL_34;
          }
          if (*(_BYTE *)(v28 + 16) == 1)
          {
            v31 = swift_bridgeObjectRetain();
            v32 = v149;
            v33 = specialized Sequence.compactMap<A>(_:)(v31);
            v149 = v32;
            static AccessibilityAttachment.combine(_:)(v33, (uint64_t *)&v179);
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree(v30, v29, 1);
            v29 = (void *)*((_QWORD *)&v179 + 1);
            v30 = v179;
            goto LABEL_30;
          }
        }
LABEL_34:
        v36 = v187;
        v179 = v187;
        if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
        {
          swift_bridgeObjectRelease();

        }
        else
        {
          v37 = *((id *)&v36 + 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
          v38 = v24;
          v39 = *((_QWORD *)v24 + 2);
          v40 = v38;
          v41 = *((_QWORD *)v38 + 3);
          if (v39 >= v41 >> 1)
            v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v39 + 1, 1, v40);
          *((_QWORD *)v40 + 2) = v39 + 1;
          v42 = &v40[16 * v39];
          v24 = v40;
          *((_OWORD *)v42 + 2) = v36;

          swift_bridgeObjectRelease();
          v193 = (uint64_t)v24;
        }
        if (v19 == ++v22)
          goto LABEL_41;
      }
    }
    v149 = 0;
    v24 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_41:
    swift_bridgeObjectRelease();
    v43 = v150;
    v187 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18D755E9C]();
    v187 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18D755E9C]();
    v144[3] = v43[8];
    v44 = (__int128 *)AGGraphGetValue();
    v45 = v44[1];
    v187 = *v44;
    *(_OWORD *)v188 = v45;
    v46 = MEMORY[0x18D75BE3C]();
    v48 = v47;
    DisplayList.Version.init(forUpdate:)();
    v146 = v187;
    v159 = *((unsigned __int8 *)v43 + 4);
    if ((v159 & 1) == 0)
    {
      v147 = 0;
      v49 = 1;
      v50 = v157;
      goto LABEL_89;
    }
    v50 = v157;
    v153 = *((_QWORD *)v24 + 2);
    if (!v153)
      break;
    v152 = v24 + 32;
    swift_bridgeObjectRetain_n();
    v16 = 0;
    v147 = 0;
    v49 = 1;
    v151 = MEMORY[0x1E0DEE9B8] + 8;
    v148 = v24;
    while (1)
    {
      v160 = v49;
      v51 = &v152[16 * v16];
      v52 = *(_QWORD *)v51;
      v53 = (void *)*((_QWORD *)v51 + 1);
      v54 = (uint64_t *)AGGraphGetValue();
      v55 = *v54;
      v166 = v54[1];
      KeyPath = swift_getKeyPath();
      v57 = *(_QWORD *)(v52 + 16);
      v164 = v52;
      if (!v57)
        goto LABEL_50;
      v58 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
      if ((v59 & 1) != 0)
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v52 + 56) + 40 * v58, (uint64_t)&v187);
        v60 = KeyPath;
        v61 = *(_QWORD *)&v188[8];
        v62 = *(_QWORD *)&v188[16];
        __swift_project_boxed_opaque_existential_1(&v187, *(uint64_t *)&v188[8]);
        v63 = v16;
        v64 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v62 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        v65 = v53;
        swift_retain();
        v66 = v62;
        KeyPath = v60;
        v64(&v179, v61, v66);
        v16 = v63;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v187);
      }
      else
      {
LABEL_50:
        v179 = 0u;
        v180 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        v67 = v53;
        swift_retain();
      }
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v151, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      if (swift_dynamicCast())
      {
        v68 = v187;
      }
      else
      {
        *(_QWORD *)&v187 = 0;
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        v68 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v158 = v53;
      v69 = *(_QWORD *)(v68 + 16);
      if (v69)
      {
        v155 = KeyPath;
        v156 = v16;
        v70 = (_QWORD *)(v68 + 32);
        v154 = v68;
        swift_bridgeObjectRetain();
        v71 = (char *)MEMORY[0x1E0DEE9D8];
        do
        {
          v74 = v70[3];
          v73 = v70[4];
          __swift_project_boxed_opaque_existential_1(v70, v74);
          *(_QWORD *)&v179 = v55;
          *((_QWORD *)&v179 + 1) = v166;
          (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v73 + 96))(&v187, &v179, v74, v73);
          if ((_QWORD)v190)
          {
            v169 = v190;
            v75 = *(_WORD *)v188;
            v167 = v187;
            v168 = *(_OWORD *)&v188[8];
            v76 = v189;
            v77 = v191;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
            v79 = *((_QWORD *)v71 + 2);
            v78 = *((_QWORD *)v71 + 3);
            v80 = v169;
            if (v79 >= v78 >> 1)
            {
              v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1, v71);
              v80 = v169;
              v71 = v81;
            }
            *((_QWORD *)v71 + 2) = v79 + 1;
            v72 = &v71[72 * v79];
            *((_OWORD *)v72 + 2) = v167;
            *((_WORD *)v72 + 24) = v75;
            *(_OWORD *)(v72 + 56) = v168;
            v72[72] = v76 & 1;
            *((_OWORD *)v72 + 5) = v80;
            *((_QWORD *)v72 + 12) = v77;
          }
          v70 += 6;
          --v69;
        }
        while (v69);
        swift_bridgeObjectRelease();
        KeyPath = v155;
        v16 = v156;
      }
      else
      {
        v71 = (char *)MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v82 = *((_QWORD *)v71 + 2);
      swift_release();
      if (v82)
        break;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      v49 = v160;
LABEL_46:
      ++v16;
      v50 = v157;
      if (v16 == v153)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_89;
      }
    }
    v49 = v160;
    if (!v160)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    if (v160 == 1)
    {
      swift_bridgeObjectRelease();

      v147 = KeyPath;
      v49 = (uint64_t)v71;
      goto LABEL_46;
    }
    v6 = (char *)KeyPath;
    v83 = *((_QWORD *)v71 + 2);
    v17 = *(char **)(v160 + 16);
    a1 = &v17[v83];
    if (!__OFADD__(v17, v83))
    {
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && (uint64_t)a1 <= *(_QWORD *)(v49 + 24) >> 1)
      {
        if (*((_QWORD *)v71 + 2))
        {
LABEL_76:
          if ((*(_QWORD *)(v49 + 24) >> 1) - *(_QWORD *)(v49 + 16) < v83)
            goto LABEL_117;
          result = swift_arrayInitWithCopy();
          if (v83)
          {
            v85 = *(_QWORD *)(v49 + 16);
            v86 = __OFADD__(v85, v83);
            v87 = v85 + v83;
            if (v86)
              goto LABEL_121;
            *(_QWORD *)(v49 + 16) = v87;
          }
          goto LABEL_85;
        }
      }
      else
      {
        if ((uint64_t)v17 <= (uint64_t)a1)
          v88 = (int64_t)&v17[v83];
        else
          v88 = (int64_t)v17;
        v49 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v88, 1, (char *)v49);
        if (*((_QWORD *)v71 + 2))
          goto LABEL_76;
      }
      v17 = v6;
      if (v83)
        goto LABEL_116;
LABEL_85:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_86:
      swift_release();

      goto LABEL_46;
    }
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v147 = 0;
  v49 = 1;
LABEL_89:
  v89 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v194, &v193, v46, v48);
  v90 = v193;
  v91 = *(_QWORD *)(v193 + 16);
  v92 = MEMORY[0x1E0DEE9D8];
  if (!v91)
    goto LABEL_108;
  v93 = v89;
  v160 = v49;
  v192 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91, 0);
  v197 = *(_OWORD *)(v150 + 2);
  LODWORD(v169) = v93 & 1;
  *(_QWORD *)&v167 = v90;
  v94 = (void **)(v90 + 40);
  *(_QWORD *)&v168 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v96 = (uint64_t)*(v94 - 1);
    v95 = *v94;
    if (*(_QWORD *)(v96 + 16)
      && (v97 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v98 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v96 + 56) + 40 * v97, (uint64_t)&v187);
      v99 = *(_QWORD *)&v188[8];
      v100 = *(_QWORD *)&v188[16];
      __swift_project_boxed_opaque_existential_1(&v187, *(uint64_t *)&v188[8]);
      v101 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v100 + 8);
      v102 = v95;
      swift_bridgeObjectRetain_n();
      v103 = v102;
      v101(&v179, v99, v100);
      v50 = v157;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v187);
    }
    else
    {
      v179 = 0u;
      v180 = 0u;
      v104 = v95;
      swift_bridgeObjectRetain_n();
      v105 = v104;
    }
    v106 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v168, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v106);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v188[1] = 0;
      v108 = *((_QWORD *)&v187 + 1);
      v107 = v187;
      v109 = v188[0];
      swift_bridgeObjectRelease();
      if ((v109 & 1) == 0)
      {
        v110 = 0;
        if ((v159 & 1) != 0)
          goto LABEL_98;
LABEL_101:
        *v50 = v96;
        v50[1] = v95;
        goto LABEL_102;
      }
    }
    else
    {
      v187 = 0uLL;
      *(_WORD *)v188 = 256;
      swift_bridgeObjectRelease();
    }
    v107 = 0;
    v108 = 0;
    v110 = 1;
    if ((v159 & 1) == 0)
      goto LABEL_101;
LABEL_98:
    v111 = (uint64_t *)AGGraphGetValue();
    v113 = *v111;
    v112 = v111[1];
    *(_QWORD *)&v179 = v96;
    *((_QWORD *)&v179 + 1) = v95;
    v187 = 0u;
    *(_OWORD *)v188 = 0u;
    *(_QWORD *)&v188[16] = v107;
    v189 = v108;
    LOBYTE(v190) = v110;
    *(_QWORD *)&v171 = v113;
    *((_QWORD *)&v171 + 1) = v112;
    v170 = v197;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_102:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v114 = v163;
    *((_BYTE *)v50 + *(int *)(v163 + 20)) = v169;
    *((_BYTE *)v50 + *(int *)(v114 + 24)) = 0;
    outlined init with take of TableCellFormula((uint64_t)v50, v165, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v92 = v192;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v92 + 16) + 1, 1);
      v92 = v192;
    }
    v116 = *(_QWORD *)(v92 + 16);
    v115 = *(_QWORD *)(v92 + 24);
    if (v116 >= v115 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
      v92 = v192;
    }
    v94 += 2;
    *(_QWORD *)(v92 + 16) = v116 + 1;
    outlined init with take of TableCellFormula(v165, v92+ ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80))+ *(_QWORD *)(v162 + 72) * v116, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    if (--v91)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v49 = v160;
LABEL_108:
  swift_bridgeObjectRelease();
  v117 = swift_allocObject();
  *(_QWORD *)(v117 + 16) = v92;
  *(_QWORD *)&v179 = v117;
  *((_QWORD *)&v179 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v180 = v194;
  BYTE10(v180) = v196;
  WORD4(v180) = v195;
  v118 = v146;
  if (v49 == 1)
  {
    v119 = v150;
    v120 = *v150;
    swift_bridgeObjectRetain();
  }
  else
  {
    v121 = (__int128 *)AGGraphGetValue();
    v122 = v121[1];
    v187 = *v121;
    *(_OWORD *)v188 = v122;
    v123 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v123);
    v120 = 0;
    v119 = v150;
  }
  LODWORD(v170) = v120;
  *(_QWORD *)&v171 = v118;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v168) = *((unsigned __int8 *)v119 + 24);
  LOBYTE(v179) = v168;
  DisplayList.Item.canonicalize(options:)();
  v124 = v189;
  v125 = v190;
  v179 = v187;
  v180 = *(_OWORD *)v188;
  v181 = *(_QWORD *)&v188[16];
  v182 = v189;
  v183 = v190;
  v185 = BYTE2(v191);
  v184 = v191;
  v186 = HIDWORD(v191);
  LODWORD(v169) = (unsigned __int16)v191 | (BYTE2(v191) << 16);
  outlined copy of DisplayList.Item.Value(v189, v190);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v126 = v171;
  v127 = WORD4(v171);
  v128 = BYTE10(v171);
  if (v49 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v124, v125);
  }
  else
  {
    v129 = swift_allocObject();
    *(_QWORD *)&v167 = v125;
    v130 = v49;
    v131 = (_QWORD *)v129;
    v132 = *v119;
    v133 = (__int128 *)AGGraphGetValue();
    v134 = v133[1];
    v179 = *v133;
    v180 = v134;
    swift_bridgeObjectRetain();
    v135 = v147;
    outlined copy of AccessibilityArchivableViewAttachment?(v147, 0, 0, v130);
    outlined copy of Environment<AppIntentExecutor?>.Content(v135, 0, 0);
    v136 = swift_bridgeObjectRetain();
    v166 = v124;
    v137 = MEMORY[0x18D75BE3C](v136);
    v139 = v138;
    v131[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v131[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v140 = swift_allocObject();
    v131[2] = v140;
    *(_QWORD *)(v140 + 16) = v135;
    *(_QWORD *)(v140 + 24) = 0;
    *(_BYTE *)(v140 + 32) = 0;
    *(_QWORD *)(v140 + 40) = v130;
    *(_DWORD *)(v140 + 48) = v132;
    *(double *)(v140 + 56) = v137;
    *(_QWORD *)(v140 + 64) = v139;
    *(_QWORD *)&v171 = v131;
    *((_QWORD *)&v171 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v172 = v126;
    BYTE10(v172) = v128;
    WORD4(v172) = v127;
    LODWORD(v192) = v132;
    *(_QWORD *)&v170 = v146;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v171) = v168;
    DisplayList.Item.canonicalize(options:)();
    v141 = v182;
    v142 = v183;
    v171 = v179;
    v172 = v180;
    v173 = v181;
    v174 = v182;
    v175 = v183;
    v177 = v185;
    v176 = v184;
    v178 = v186;
    outlined copy of DisplayList.Item.Value(v182, v183);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v135, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v135, 0, 0, v130);
    outlined consume of DisplayList.Item.Value(v141, v142);
    outlined consume of DisplayList.Item.Value(v166, v167);
    result = swift_bridgeObjectRelease();
    v126 = v170;
    v127 = WORD4(v170);
    v128 = BYTE10(v170);
  }
  v143 = v145;
  *(_QWORD *)v145 = v126;
  *((_WORD *)v143 + 4) = v127;
  v143[10] = v128;
  return result;
}

uint64_t specialized DisplayListTransform.value.getter@<X0>(uint64_t *a1@<X8>)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t Value;
  __int16 v12;
  char v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t result;
  __int16 v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  void *v53;
  __int128 v54;
  char *v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  int *v59;
  __int128 *v60;
  __int128 v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(__int128 *__return_ptr, uint64_t, uint64_t);
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  char v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  char v106;
  void **v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v115;
  id v116;
  id v117;
  id v118;
  uint64_t (*v119)(void);
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(void);
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int *v132;
  int v133;
  __int128 *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  __int16 v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  __int128 *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  int64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int16 v193;
  char v194;
  int v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int16 v201;
  char v202;
  int v203;
  __int128 v204;
  _BYTE v205[24];
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int16 v212;
  char v213;

  v3 = type metadata accessor for AccessibilityNodeAttachment();
  v175 = *(_QWORD *)(v3 - 8);
  v176 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v158 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v179 = (uint64_t)&v158 - v9;
  v164 = v1;
  LODWORD(v10) = *MEMORY[0x1E0CFED28];
  if (v1[12] == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v12 = *(_WORD *)(Value + 8);
    v13 = *(_BYTE *)(Value + 10);
    v211 = *(_QWORD *)Value;
    v212 = v12;
    v213 = v13;
    swift_bridgeObjectRetain();
  }
  v14 = v164;
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  if (v164[14] != (_DWORD)v10)
  {
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v14 = v164;
  }
  v174 = v14[11];
  v204 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v19 = v212;
    v20 = v213;
    *a1 = v211;
    *((_WORD *)a1 + 4) = v19;
    *((_BYTE *)a1 + 10) = v20;
    return result;
  }
  v210 = v15;
  v17 = v16 >> 62;
  if (v16 >> 62)
    goto LABEL_126;
LABEL_8:
  if (AGGraphGetCurrentAttribute() == (_DWORD)v10)
  {
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v160 = a1;
  AccessibilityAttachmentToken.init<A>(_:)();
  v180 = v16;
  if (v17)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_128;
  }
  else
  {
    v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v178 = v6;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v163 = 0;
    goto LABEL_47;
  }
  v163 = 0;
  LODWORD(v183) = v164[7];
  LODWORD(v182) = v164[13];
  LODWORD(v181) = (_DWORD)v10;
  do
  {
    while (1)
    {
      if (*(double *)AGGraphGetValue() >= 0.001)
      {
        AccessibilityAttachment.init()();
        goto LABEL_30;
      }
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      v21 = Dictionary.init(minimumCapacity:)();
      type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
      v17 = v22;
      *(_QWORD *)&v205[8] = v22;
      v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, MEMORY[0x1E0CE6310]);
      *(_QWORD *)&v205[16] = v23;
      *(_QWORD *)&v204 = 8;
      outlined init with take of OptionalBinaryInteger(&v204, (uint64_t)&v196);
      LODWORD(v10) = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v187 = v21;
      v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v196, *((uint64_t *)&v197 + 1));
      a1 = &v158;
      v25 = MEMORY[0x1E0C80A78](v24, v24);
      v27 = (uint64_t *)((char *)&v158 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(_QWORD *, double))(v28 + 16))(v27, v25);
      *((_QWORD *)&v189 + 1) = v17;
      v190 = v23;
      *(_QWORD *)&v188 = *v27;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5728]);
      v31 = *(_QWORD *)(v21 + 16);
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
      {
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      v34 = v29;
      if (*(_QWORD *)(v21 + 24) >= v33)
      {
        if ((v10 & 1) != 0)
        {
          v37 = (_QWORD *)v187;
          if ((v29 & 1) == 0)
            goto LABEL_27;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v37 = (_QWORD *)v187;
          if ((v34 & 1) == 0)
            goto LABEL_27;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, (char)v10);
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5728]);
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_130;
        v30 = v35;
        v37 = (_QWORD *)v187;
        if ((v34 & 1) == 0)
        {
LABEL_27:
          v39 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v188, *((uint64_t *)&v189 + 1));
          v6 = (char *)&v158;
          v40 = MEMORY[0x1E0C80A78](v39, v39);
          v10 = (uint64_t *)((char *)&v158 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_QWORD *, double))(v42 + 16))(v10, v40);
          v185 = v17;
          v186 = v23;
          *(_QWORD *)&v184 = *v10;
          v37[(v30 >> 6) + 8] |= 1 << v30;
          *(_QWORD *)(v37[6] + 8 * v30) = MEMORY[0x1E0CE5728];
          outlined init with take of OptionalBinaryInteger(&v184, v37[7] + 40 * v30);
          v43 = v37[2];
          v44 = __OFADD__(v43, 1);
          v45 = v43 + 1;
          if (v44)
            goto LABEL_122;
          v37[2] = v45;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v188);
          goto LABEL_29;
        }
      }
      v38 = v37[7] + 40 * v30;
      __swift_destroy_boxed_opaque_existential_1(v38);
      outlined init with take of OptionalBinaryInteger(&v188, v38);
LABEL_29:
      LODWORD(v10) = v181;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v196);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v196 = v37;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      v6 = v178;
LABEL_30:
      if ((_DWORD)v182 == (_DWORD)v10)
        goto LABEL_39;
      v46 = AGGraphGetValue();
      v48 = *(_QWORD *)v46;
      v47 = *(void **)(v46 + 8);
      if (*(_BYTE *)(v46 + 16))
      {
        if (*(_BYTE *)(v46 + 16) != 1)
          goto LABEL_39;
        v49 = swift_bridgeObjectRetain();
        v50 = v163;
        v51 = specialized Sequence.compactMap<A>(_:)(v49);
        v163 = v50;
        static AccessibilityAttachment.combine(_:)(v51, (uint64_t *)&v196);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v48, v47, 1);
        v47 = (void *)*((_QWORD *)&v196 + 1);
        v48 = v196;
      }
      else
      {
        v52 = v47;
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)&v196 = v48;
      AccessibilityProperties.merge(with:)((uint64_t *)&v196);
      v196 = v204;
      v53 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v53)
      {
        *(_QWORD *)&v196 = v48;
        *((_QWORD *)&v196 + 1) = v47;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }
      swift_bridgeObjectRelease();

LABEL_39:
      v54 = v204;
      v196 = v204;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) == 0)
        break;
      swift_bridgeObjectRelease();

      if (!--v16)
        goto LABEL_45;
    }
    v55 = (char *)v210;
    v56 = *((id *)&v54 + 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v55 + 2) + 1, 1, v55);
    v58 = *((_QWORD *)v55 + 2);
    v57 = *((_QWORD *)v55 + 3);
    if (v58 >= v57 >> 1)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v55);
    *((_QWORD *)v55 + 2) = v58 + 1;
    *(_OWORD *)&v55[16 * v58 + 32] = v54;

    swift_bridgeObjectRelease();
    v210 = (uint64_t)v55;
    --v16;
  }
  while (v16);
LABEL_45:
  swift_bridgeObjectRelease();
LABEL_47:
  v59 = v164;
  v204 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v204 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v159 = v59[8];
  v60 = (__int128 *)AGGraphGetValue();
  v61 = v60[1];
  v204 = *v60;
  *(_OWORD *)v205 = v61;
  v62 = MEMORY[0x18D75BE3C]();
  v64 = v63;
  DisplayList.Version.init(forUpdate:)();
  v173 = *((unsigned __int8 *)v59 + 4);
  v161 = v204;
  if ((v173 & 1) == 0 || (v167 = *(_QWORD *)(v210 + 16)) == 0)
  {
    v162 = 0;
    v66 = 1;
    goto LABEL_95;
  }
  v166 = v210 + 32;
  v158 = v210;
  swift_bridgeObjectRetain_n();
  v65 = 0;
  v162 = 0;
  v66 = 1;
  v165 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v67 = (uint64_t *)(v166 + 16 * v65);
    v68 = *v67;
    v10 = (_QWORD *)v67[1];
    v69 = (uint64_t *)AGGraphGetValue();
    v70 = *v69;
    v180 = v69[1];
    KeyPath = swift_getKeyPath();
    v72 = *(_QWORD *)(v68 + 16);
    v177 = v68;
    if (v72
      && (v73 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v74 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v68 + 56) + 40 * v73, (uint64_t)&v204);
      v75 = KeyPath;
      v76 = *(_QWORD *)&v205[8];
      v77 = *(_QWORD *)&v205[16];
      __swift_project_boxed_opaque_existential_1(&v204, *(uint64_t *)&v205[8]);
      v78 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v77 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v79 = v10;
      swift_retain();
      v80 = v77;
      KeyPath = v75;
      v78(&v196, v76, v80);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v204);
    }
    else
    {
      v196 = 0u;
      v197 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v81 = v10;
      swift_retain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v165, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if (swift_dynamicCast())
    {
      v82 = v204;
    }
    else
    {
      *(_QWORD *)&v204 = 0;
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v83 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v82 = v83;
    }
    swift_bridgeObjectRelease();
    v84 = *(_QWORD *)(v82 + 16);
    if (v84)
    {
      v169 = KeyPath;
      v170 = v10;
      v171 = v65;
      v172 = v66;
      v85 = (_QWORD *)(v82 + 32);
      v168 = v82;
      swift_bridgeObjectRetain();
      v6 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v87 = v85[3];
        v88 = v85[4];
        __swift_project_boxed_opaque_existential_1(v85, v87);
        *(_QWORD *)&v196 = v70;
        *((_QWORD *)&v196 + 1) = v180;
        (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v88 + 96))(&v204, &v196, v87, v88);
        if ((_QWORD)v207)
        {
          v183 = v207;
          v89 = *(_WORD *)v205;
          v181 = v204;
          v182 = *(_OWORD *)&v205[8];
          v90 = v206;
          v91 = v208;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
          v93 = *((_QWORD *)v6 + 2);
          v92 = *((_QWORD *)v6 + 3);
          v94 = v183;
          if (v93 >= v92 >> 1)
          {
            v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v6);
            v94 = v183;
            v6 = v95;
          }
          *((_QWORD *)v6 + 2) = v93 + 1;
          v86 = &v6[72 * v93];
          *((_OWORD *)v86 + 2) = v181;
          *((_WORD *)v86 + 24) = v89;
          *(_OWORD *)(v86 + 56) = v182;
          v86[72] = v90 & 1;
          *((_OWORD *)v86 + 5) = v94;
          *((_QWORD *)v86 + 12) = v91;
        }
        v85 += 6;
        --v84;
      }
      while (v84);
      swift_bridgeObjectRelease();
      v65 = v171;
      v66 = v172;
      KeyPath = v169;
      v10 = v170;
    }
    else
    {
      v6 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v96 = *((_QWORD *)v6 + 2);
    swift_release();
    if (!v96)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_51:

      goto LABEL_52;
    }
    if (!v66)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_92:
      swift_release();
      goto LABEL_51;
    }
    if (v66 != 1)
    {
      v16 = KeyPath;
      v97 = *((_QWORD *)v6 + 2);
      v17 = *(_QWORD *)(v66 + 16);
      a1 = (uint64_t *)(v17 + v97);
      if (__OFADD__(v17, v97))
        goto LABEL_123;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && (uint64_t)a1 <= *(_QWORD *)(v66 + 24) >> 1)
      {
        if (*((_QWORD *)v6 + 2))
          goto LABEL_82;
      }
      else
      {
        if (v17 <= (uint64_t)a1)
          v101 = v17 + v97;
        else
          v101 = v17;
        v66 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v101, 1, (char *)v66);
        if (*((_QWORD *)v6 + 2))
        {
LABEL_82:
          if ((*(_QWORD *)(v66 + 24) >> 1) - *(_QWORD *)(v66 + 16) < v97)
            goto LABEL_125;
          swift_arrayInitWithCopy();
          if (v97)
          {
            v99 = *(_QWORD *)(v66 + 16);
            v44 = __OFADD__(v99, v97);
            v100 = v99 + v97;
            if (v44)
              goto LABEL_129;
            *(_QWORD *)(v66 + 16) = v100;
          }
LABEL_91:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_92;
        }
      }
      v17 = v16;
      if (v97)
        goto LABEL_124;
      goto LABEL_91;
    }
    swift_bridgeObjectRelease();

    v162 = KeyPath;
    v66 = (uint64_t)v6;
LABEL_52:
    ++v65;
    v6 = v178;
    if (v65 != v167)
      continue;
    break;
  }
  swift_bridgeObjectRelease_n();
LABEL_95:
  v102 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v211, &v210, v62, v64);
  v103 = v210;
  v104 = *(_QWORD *)(v210 + 16);
  v105 = MEMORY[0x1E0DEE9D8];
  v172 = v66;
  if (!v104)
    goto LABEL_114;
  v106 = v102;
  v209 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104, 0);
  v184 = *(_OWORD *)(v164 + 2);
  LODWORD(v183) = v106 & 1;
  *(_QWORD *)&v181 = v103;
  v107 = (void **)(v103 + 40);
  *(_QWORD *)&v182 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v109 = (uint64_t)*(v107 - 1);
    v108 = *v107;
    if (*(_QWORD *)(v109 + 16)
      && (v110 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v111 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v109 + 56) + 40 * v110, (uint64_t)&v204);
      v113 = *(_QWORD *)&v205[8];
      v112 = *(_QWORD *)&v205[16];
      __swift_project_boxed_opaque_existential_1(&v204, *(uint64_t *)&v205[8]);
      v114 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v112 + 8);
      v115 = v108;
      swift_bridgeObjectRetain_n();
      v116 = v115;
      v114(&v196, v113, v112);
      v6 = v178;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v204);
    }
    else
    {
      v196 = 0u;
      v197 = 0u;
      v117 = v108;
      swift_bridgeObjectRetain_n();
      v118 = v117;
    }
    v119 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v182, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v119);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v205[1] = 0;
      v121 = *((_QWORD *)&v204 + 1);
      v120 = v204;
      v122 = v205[0];
      swift_bridgeObjectRelease();
      if ((v122 & 1) == 0)
      {
        v123 = 0;
        if ((v173 & 1) != 0)
          goto LABEL_104;
LABEL_107:
        *(_QWORD *)v6 = v109;
        *((_QWORD *)v6 + 1) = v108;
        goto LABEL_108;
      }
    }
    else
    {
      v204 = 0uLL;
      *(_WORD *)v205 = 256;
      swift_bridgeObjectRelease();
    }
    v120 = 0;
    v121 = 0;
    v123 = 1;
    if ((v173 & 1) == 0)
      goto LABEL_107;
LABEL_104:
    v124 = (uint64_t *)AGGraphGetValue();
    v126 = *v124;
    v125 = v124[1];
    *(_QWORD *)&v196 = v109;
    *((_QWORD *)&v196 + 1) = v108;
    v204 = 0u;
    *(_OWORD *)v205 = 0u;
    *(_QWORD *)&v205[16] = v120;
    v206 = v121;
    LOBYTE(v207) = v123;
    *(_QWORD *)&v188 = v126;
    *((_QWORD *)&v188 + 1) = v125;
    v187 = v184;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_108:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v127 = v176;
    v6[*(int *)(v176 + 20)] = v183;
    v6[*(int *)(v127 + 24)] = 0;
    v128 = MEMORY[0x1E0CE6150];
    outlined init with take of TableCellFormula((uint64_t)v6, v179, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v105 = v209;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v105 + 16) + 1, 1);
      v105 = v209;
    }
    v130 = *(_QWORD *)(v105 + 16);
    v129 = *(_QWORD *)(v105 + 24);
    if (v130 >= v129 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1);
      v105 = v209;
    }
    v107 += 2;
    *(_QWORD *)(v105 + 16) = v130 + 1;
    outlined init with take of TableCellFormula(v179, v105+ ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80))+ *(_QWORD *)(v175 + 72) * v130, (uint64_t (*)(_QWORD))v128);
    if (--v104)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v66 = v172;
LABEL_114:
  swift_bridgeObjectRelease();
  v131 = swift_allocObject();
  *(_QWORD *)(v131 + 16) = v105;
  *(_QWORD *)&v196 = v131;
  *((_QWORD *)&v196 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v197 = v211;
  BYTE10(v197) = v213;
  WORD4(v197) = v212;
  if (v66 == 1)
  {
    v132 = v164;
    v133 = *v164;
    swift_bridgeObjectRetain();
  }
  else
  {
    v134 = (__int128 *)AGGraphGetValue();
    v135 = v134[1];
    v204 = *v134;
    *(_OWORD *)v205 = v135;
    v136 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v136);
    v133 = 0;
    v132 = v164;
  }
  LODWORD(v187) = v133;
  *(_QWORD *)&v188 = v161;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v183) = *((unsigned __int8 *)v132 + 24);
  LOBYTE(v196) = v183;
  DisplayList.Item.canonicalize(options:)();
  v137 = v206;
  v138 = v207;
  v139 = (unsigned __int16)v208 | (BYTE2(v208) << 16);
  v196 = v204;
  v197 = *(_OWORD *)v205;
  v198 = *(_QWORD *)&v205[16];
  v199 = v206;
  v200 = v207;
  v202 = BYTE2(v208);
  v201 = v208;
  v203 = HIDWORD(v208);
  outlined copy of DisplayList.Item.Value(v206, v207);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v140 = v188;
  v141 = WORD4(v188);
  v142 = BYTE10(v188);
  v143 = v172;
  if (v172 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v137, v138);
  }
  else
  {
    v144 = swift_allocObject();
    LODWORD(v182) = v139;
    v145 = (_QWORD *)v144;
    v146 = *v132;
    v147 = (__int128 *)AGGraphGetValue();
    v148 = v147[1];
    v196 = *v147;
    v197 = v148;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v181 = v138;
    v149 = v162;
    outlined copy of AccessibilityArchivableViewAttachment?(v162, 0, 0, v143);
    outlined copy of Environment<AppIntentExecutor?>.Content(v149, 0, 0);
    v150 = swift_bridgeObjectRetain();
    v180 = v137;
    v151 = MEMORY[0x18D75BE3C](v150);
    v153 = v152;
    v145[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v145[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v154 = swift_allocObject();
    v145[2] = v154;
    *(_QWORD *)(v154 + 16) = v149;
    *(_QWORD *)(v154 + 24) = 0;
    *(_BYTE *)(v154 + 32) = 0;
    *(_QWORD *)(v154 + 40) = v143;
    *(_DWORD *)(v154 + 48) = v146;
    *(double *)(v154 + 56) = v151;
    *(_QWORD *)(v154 + 64) = v153;
    *(_QWORD *)&v188 = v145;
    *((_QWORD *)&v188 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v189 = v140;
    BYTE10(v189) = v142;
    WORD4(v189) = v141;
    LODWORD(v209) = v146;
    *(_QWORD *)&v187 = v161;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v188) = v183;
    DisplayList.Item.canonicalize(options:)();
    v155 = v199;
    v156 = v200;
    v188 = v196;
    v189 = v197;
    v190 = v198;
    v191 = v199;
    v192 = v200;
    v194 = v202;
    v193 = v201;
    v195 = v203;
    outlined copy of DisplayList.Item.Value(v199, v200);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v149, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v149, 0, 0, v143);
    outlined consume of DisplayList.Item.Value(v155, v156);
    outlined consume of DisplayList.Item.Value(v180, v181);
    result = swift_bridgeObjectRelease();
    v140 = v187;
    v141 = WORD4(v187);
    v142 = BYTE10(v187);
  }
  v157 = v160;
  *v160 = v140;
  *((_WORD *)v157 + 4) = v141;
  *((_BYTE *)v157 + 10) = v142;
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t Value;
  __int16 v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int16 v20;
  char v21;
  ValueMetadata *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  id v60;
  void *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  __int128 *v66;
  __int128 v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  _QWORD *v71;
  uint64_t *v72;
  void *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t KeyPath;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(__int128 *__return_ptr, unint64_t, uint64_t);
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  char v112;
  void **v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v121;
  id v122;
  id v123;
  id v124;
  uint64_t (*v125)(void);
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  __int16 v145;
  char v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  int v150;
  __int128 *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int16 v193;
  char v194;
  int v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int16 v201;
  char v202;
  int v203;
  __int128 v204;
  _BYTE v205[24];
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  unint64_t v211;
  __int128 v212;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  char v221;

  v2 = v1;
  v4 = type metadata accessor for AccessibilityNodeAttachment();
  v180 = *(_QWORD *)(v4 - 8);
  v181 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (unint64_t)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v183 = (uint64_t)&v162 - v10;
  v11 = *((_DWORD *)v1 + 12);
  LODWORD(v186) = *MEMORY[0x1E0CFED28];
  if (v11 == (_DWORD)v186)
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v13 = *(_WORD *)(Value + 8);
    v14 = *(_BYTE *)(Value + 10);
    v219 = *(_QWORD *)Value;
    v220 = v13;
    v221 = v14;
    swift_bridgeObjectRetain();
  }
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  if (*((_DWORD *)v1 + 14) != (_DWORD)v186)
  {
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v179 = *((_DWORD *)v1 + 11);
  v204 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    result = swift_bridgeObjectRelease();
    v20 = v220;
    v21 = v221;
    *a1 = v219;
    *((_WORD *)a1 + 4) = v20;
    *((_BYTE *)a1 + 10) = v21;
    return result;
  }
  v218 = v15;
  v17 = v16 >> 62;
  if (v16 >> 62)
    goto LABEL_125;
LABEL_8:
  if (AGGraphGetCurrentAttribute() == (_DWORD)v186)
  {
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v175 = (_QWORD *)v7;
  v164 = a1;
  AccessibilityAttachmentToken.init<A>(_:)();
  v184 = v16;
  if (v17)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 < 0)
      goto LABEL_127;
  }
  else
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v182 = v2;
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v167 = 0;
    goto LABEL_46;
  }
  v167 = 0;
  v22 = &type metadata for AccessibilityScrollableContext;
  LODWORD(v185) = *((_DWORD *)v2 + 7);
  do
  {
    if (!v18)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    *(_QWORD *)&v187 = v18;
    v23 = AGGraphGetValue();
    outlined init with copy of AccessibilityScrollableContextModifier(v23, (uint64_t)&v204);
    outlined init with copy of AccessibilityScrollableContext((uint64_t)&v204, (uint64_t)&v196);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v24 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v17 = v25;
    *((_QWORD *)&v189 + 1) = v25;
    v7 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>();
    v190 = v7;
    v2 = (uint64_t *)&unk_1E1B39858;
    *(_QWORD *)&v188 = swift_allocObject();
    v26 = (uint64_t)v22;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v196, v188 + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)v22);
    outlined init with take of OptionalBinaryInteger(&v188, (uint64_t)&v216);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v215 = (_QWORD *)v24;
    v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v216, v217);
    a1 = &v162;
    v29 = MEMORY[0x1E0C80A78](v28, v28);
    v31 = (char *)&v162 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v32 + 16))(v31, v29);
    v213 = v17;
    v214 = v7;
    v33 = swift_allocObject();
    *(_QWORD *)&v212 = v33;
    v34 = *((_OWORD *)v31 + 3);
    *(_OWORD *)(v33 + 48) = *((_OWORD *)v31 + 2);
    *(_OWORD *)(v33 + 64) = v34;
    *(_QWORD *)(v33 + 79) = *(_QWORD *)(v31 + 63);
    v35 = *((_OWORD *)v31 + 1);
    *(_OWORD *)(v33 + 16) = *(_OWORD *)v31;
    *(_OWORD *)(v33 + 32) = v35;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
    v37 = *(_QWORD *)(v24 + 16);
    v38 = (v36 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      goto LABEL_120;
    v40 = v36;
    if (*(_QWORD *)(v24 + 24) >= v39)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v43 = v215;
        if ((v36 & 1) != 0)
          goto LABEL_26;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v43 = v215;
        if ((v40 & 1) != 0)
          goto LABEL_26;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_129;
      v16 = v41;
      v43 = v215;
      if ((v40 & 1) != 0)
      {
LABEL_26:
        v55 = v43[7] + 40 * v16;
        __swift_destroy_boxed_opaque_existential_1(v55);
        outlined init with take of OptionalBinaryInteger(&v212, v55);
        goto LABEL_27;
      }
    }
    v44 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v212, v213);
    v2 = &v162;
    v45 = MEMORY[0x1E0C80A78](v44, v44);
    v47 = (char *)&v162 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v48 + 16))(v47, v45);
    v210 = v17;
    v211 = v7;
    v49 = swift_allocObject();
    *(_QWORD *)&v209 = v49;
    *(_QWORD *)(v49 + 79) = *(_QWORD *)(v47 + 63);
    v50 = *((_OWORD *)v47 + 3);
    *(_OWORD *)(v49 + 48) = *((_OWORD *)v47 + 2);
    *(_OWORD *)(v49 + 64) = v50;
    v51 = *((_OWORD *)v47 + 1);
    *(_OWORD *)(v49 + 16) = *(_OWORD *)v47;
    *(_OWORD *)(v49 + 32) = v51;
    v43[(v16 >> 6) + 8] |= 1 << v16;
    *(_QWORD *)(v43[6] + 8 * v16) = &type metadata for AccessibilityProperties.ScrollableContextKey;
    outlined init with take of OptionalBinaryInteger(&v209, v43[7] + 40 * v16);
    v52 = v43[2];
    v53 = __OFADD__(v52, 1);
    v54 = v52 + 1;
    if (v53)
      goto LABEL_121;
    v43[2] = v54;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v212);
LABEL_27:
    v2 = v182;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v216);
    swift_bridgeObjectRelease();
    v22 = (ValueMetadata *)v26;
    outlined destroy of AccessibilityTableContext?((uint64_t)&v196, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, v26);
    *(_QWORD *)&v188 = v43;
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityScrollableContextModifier((uint64_t)&v204);
    if (*((_DWORD *)v2 + 13) == (_DWORD)v186)
      goto LABEL_36;
    v56 = AGGraphGetValue();
    v16 = *(_QWORD *)v56;
    v7 = *(_QWORD *)(v56 + 8);
    if (*(_BYTE *)(v56 + 16))
    {
      if (*(_BYTE *)(v56 + 16) != 1)
        goto LABEL_36;
      v57 = swift_bridgeObjectRetain();
      v58 = v167;
      v59 = specialized Sequence.compactMap<A>(_:)(v57);
      v167 = v58;
      static AccessibilityAttachment.combine(_:)(v59, (uint64_t *)&v204);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v16, (void *)v7, 1);
      v7 = *((_QWORD *)&v204 + 1);
      v16 = v204;
    }
    else
    {
      v60 = (id)v7;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)&v204 = v16;
    AccessibilityProperties.merge(with:)((uint64_t *)&v204);
    v204 = v196;
    v61 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v61)
    {
      *(_QWORD *)&v204 = v16;
      *((_QWORD *)&v204 + 1) = v7;
      if (AccessibilityAttachment.platformElement.getter())
        AccessibilityAttachment.platformElement.setter();
    }
    swift_bridgeObjectRelease();

LABEL_36:
    a1 = (uint64_t *)*((_QWORD *)&v196 + 1);
    v17 = v196;
    v204 = v196;
    if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();

    }
    else
    {
      v62 = (char *)v218;
      v7 = a1;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v62 + 2) + 1, 1, v62);
      v64 = *((_QWORD *)v62 + 2);
      v63 = *((_QWORD *)v62 + 3);
      v16 = v64 + 1;
      if (v64 >= v63 >> 1)
        v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, v62);
      *((_QWORD *)v62 + 2) = v16;
      v65 = &v62[16 * v64];
      *((_QWORD *)v65 + 4) = v17;
      *((_QWORD *)v65 + 5) = a1;

      swift_bridgeObjectRelease();
      v218 = (uint64_t)v62;
    }
    v18 = v187 - 1;
  }
  while ((_QWORD)v187 != 1);
  swift_bridgeObjectRelease();
LABEL_46:
  v204 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v204 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v163 = *((_DWORD *)v2 + 8);
  v66 = (__int128 *)AGGraphGetValue();
  v67 = v66[1];
  v204 = *v66;
  *(_OWORD *)v205 = v67;
  v68 = MEMORY[0x18D75BE3C]();
  v70 = v69;
  DisplayList.Version.init(forUpdate:)();
  v71 = v175;
  v178 = *((unsigned __int8 *)v2 + 4);
  v165 = v204;
  if ((v178 & 1) == 0 || (v170 = *(_QWORD *)(v218 + 16)) == 0)
  {
    v166 = 0;
    v177 = 1;
    goto LABEL_93;
  }
  v169 = v218 + 32;
  v162 = v218;
  swift_bridgeObjectRetain_n();
  v7 = 0;
  v166 = 0;
  v177 = 1;
  v168 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v72 = (uint64_t *)(v169 + 16 * v7);
    v74 = *v72;
    v73 = (void *)v72[1];
    v75 = (uint64_t *)AGGraphGetValue();
    v76 = *v75;
    v184 = v75[1];
    KeyPath = swift_getKeyPath();
    if (*(_QWORD *)(v74 + 16)
      && (v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v79 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v74 + 56) + 40 * v78, (uint64_t)&v204);
      v80 = KeyPath;
      v16 = *(_QWORD *)&v205[8];
      v81 = *(_QWORD *)&v205[16];
      __swift_project_boxed_opaque_existential_1(&v204, *(uint64_t *)&v205[8]);
      v82 = *(void (**)(__int128 *__return_ptr, unint64_t, uint64_t))(v81 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v83 = v73;
      swift_retain();
      v84 = v81;
      KeyPath = v80;
      v2 = v182;
      v82(&v196, v16, v84);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v204);
    }
    else
    {
      v196 = 0u;
      v197 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v85 = v73;
      swift_retain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v168, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if (swift_dynamicCast())
    {
      v86 = v204;
    }
    else
    {
      *(_QWORD *)&v204 = 0;
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v87 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v86 = v87;
    }
    swift_bridgeObjectRelease();
    v176 = v74;
    v88 = *(_QWORD *)(v86 + 16);
    if (v88)
    {
      v172 = KeyPath;
      v173 = v73;
      v174 = v7;
      v89 = (_QWORD *)(v86 + 32);
      v171 = v86;
      swift_bridgeObjectRetain();
      v90 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v92 = v89[3];
        v93 = v89[4];
        __swift_project_boxed_opaque_existential_1(v89, v92);
        *(_QWORD *)&v196 = v76;
        *((_QWORD *)&v196 + 1) = v184;
        (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v93 + 96))(&v204, &v196, v92, v93);
        if ((_QWORD)v207)
        {
          v187 = v207;
          v16 = *(_QWORD *)v205;
          v185 = v204;
          v186 = *(_OWORD *)&v205[8];
          v94 = v206;
          v95 = v208;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v90 + 2) + 1, 1, v90);
          v97 = *((_QWORD *)v90 + 2);
          v96 = *((_QWORD *)v90 + 3);
          v98 = v187;
          if (v97 >= v96 >> 1)
          {
            v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, v90);
            v98 = v187;
            v90 = v99;
          }
          *((_QWORD *)v90 + 2) = v97 + 1;
          v91 = &v90[72 * v97];
          *((_OWORD *)v91 + 2) = v185;
          *((_WORD *)v91 + 24) = v16;
          *(_OWORD *)(v91 + 56) = v186;
          v91[72] = v94 & 1;
          *((_OWORD *)v91 + 5) = v98;
          *((_QWORD *)v91 + 12) = v95;
        }
        v89 += 6;
        --v88;
      }
      while (v88);
      swift_bridgeObjectRelease();
      v2 = v182;
      v73 = v173;
      v7 = v174;
      KeyPath = v172;
    }
    else
    {
      v90 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v100 = *((_QWORD *)v90 + 2);
    swift_release();
    if (v100)
    {
      if (!v177)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        v177 = 0;
        goto LABEL_50;
      }
      if (v177 == 1)
      {
        swift_bridgeObjectRelease();

        v166 = KeyPath;
        v177 = (uint64_t)v90;
        goto LABEL_50;
      }
      v101 = *((_QWORD *)v90 + 2);
      v17 = *(_QWORD *)(v177 + 16);
      a1 = (uint64_t *)(v17 + v101);
      if (__OFADD__(v17, v101))
        goto LABEL_122;
      swift_bridgeObjectRetain();
      v102 = (char *)swift_isUniquelyReferenced_nonNull_native();
      v103 = (char *)v177;
      if (!(_DWORD)v102 || (uint64_t)a1 > *(_QWORD *)(v177 + 24) >> 1)
      {
        if (v17 <= (uint64_t)a1)
          v104 = v17 + v101;
        else
          v104 = v17;
        v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102, v104, 1, (char *)v177);
      }
      v105 = *((_QWORD *)v90 + 2);
      v177 = (uint64_t)v103;
      if (v105)
      {
        if ((*((_QWORD *)v103 + 3) >> 1) - *((_QWORD *)v103 + 2) < v101)
          goto LABEL_124;
        swift_arrayInitWithCopy();
        if (v101)
        {
          v106 = *(_QWORD *)(v177 + 16);
          v53 = __OFADD__(v106, v101);
          v107 = v106 + v101;
          if (v53)
            goto LABEL_128;
          *(_QWORD *)(v177 + 16) = v107;
        }
      }
      else if (v101)
      {
        goto LABEL_123;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }

LABEL_50:
    ++v7;
    v71 = v175;
    if (v7 != v170)
      continue;
    break;
  }
  swift_bridgeObjectRelease_n();
LABEL_93:
  v108 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v219, &v218, v68, v70);
  v109 = v218;
  v110 = *(_QWORD *)(v218 + 16);
  v111 = MEMORY[0x1E0DEE9D8];
  if (!v110)
    goto LABEL_112;
  v112 = v108;
  *(_QWORD *)&v209 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110, 0);
  v216 = *(_OWORD *)(v2 + 1);
  LODWORD(v187) = v112 & 1;
  *(_QWORD *)&v185 = v109;
  v113 = (void **)(v109 + 40);
  *(_QWORD *)&v186 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v115 = (uint64_t)*(v113 - 1);
    v114 = *v113;
    if (*(_QWORD *)(v115 + 16)
      && (v116 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v117 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v115 + 56) + 40 * v116, (uint64_t)&v204);
      v118 = *(_QWORD *)&v205[8];
      v119 = *(_QWORD *)&v205[16];
      __swift_project_boxed_opaque_existential_1(&v204, *(uint64_t *)&v205[8]);
      v120 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v119 + 8);
      v121 = v114;
      swift_bridgeObjectRetain_n();
      v122 = v121;
      v120(&v196, v118, v119);
      v71 = v175;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v204);
    }
    else
    {
      v196 = 0u;
      v197 = 0u;
      v123 = v114;
      swift_bridgeObjectRetain_n();
      v124 = v123;
    }
    v125 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v186, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v125);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v205[1] = 0;
      v127 = *((_QWORD *)&v204 + 1);
      v126 = v204;
      v128 = v205[0];
      swift_bridgeObjectRelease();
      if ((v128 & 1) == 0)
      {
        v129 = 0;
        if ((v178 & 1) != 0)
          goto LABEL_102;
LABEL_105:
        *v71 = v115;
        v71[1] = v114;
        goto LABEL_106;
      }
    }
    else
    {
      v204 = 0uLL;
      *(_WORD *)v205 = 256;
      swift_bridgeObjectRelease();
    }
    v126 = 0;
    v127 = 0;
    v129 = 1;
    if ((v178 & 1) == 0)
      goto LABEL_105;
LABEL_102:
    v130 = (uint64_t *)AGGraphGetValue();
    v132 = *v130;
    v131 = v130[1];
    *(_QWORD *)&v196 = v115;
    *((_QWORD *)&v196 + 1) = v114;
    v204 = 0u;
    *(_OWORD *)v205 = 0u;
    *(_QWORD *)&v205[16] = v126;
    v206 = v127;
    LOBYTE(v207) = v129;
    *(_QWORD *)&v188 = v132;
    *((_QWORD *)&v188 + 1) = v131;
    v212 = v216;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_106:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v133 = v181;
    *((_BYTE *)v71 + *(int *)(v181 + 20)) = v187;
    *((_BYTE *)v71 + *(int *)(v133 + 24)) = 0;
    outlined init with take of TableCellFormula((uint64_t)v71, v183, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v111 = v209;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v111 + 16) + 1, 1);
      v111 = v209;
    }
    v135 = *(_QWORD *)(v111 + 16);
    v134 = *(_QWORD *)(v111 + 24);
    if (v135 >= v134 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v134 > 1, v135 + 1, 1);
      v111 = v209;
    }
    v113 += 2;
    *(_QWORD *)(v111 + 16) = v135 + 1;
    outlined init with take of TableCellFormula(v183, v111+ ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80))+ *(_QWORD *)(v180 + 72) * v135, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    if (--v110)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v2 = v182;
LABEL_112:
  swift_bridgeObjectRelease();
  v136 = swift_allocObject();
  *(_QWORD *)(v136 + 16) = v111;
  *(_QWORD *)&v196 = v136;
  *((_QWORD *)&v196 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v197 = v219;
  BYTE10(v197) = v221;
  WORD4(v197) = v220;
  if (v177 == 1)
  {
    v137 = *(_DWORD *)v2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v138 = (__int128 *)AGGraphGetValue();
    v139 = v138[1];
    v204 = *v138;
    *(_OWORD *)v205 = v139;
    v140 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v140);
    v137 = 0;
  }
  LODWORD(v212) = v137;
  *(_QWORD *)&v188 = v165;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v187) = *((unsigned __int8 *)v2 + 24);
  LOBYTE(v196) = v187;
  DisplayList.Item.canonicalize(options:)();
  v141 = v206;
  v142 = v207;
  v143 = (unsigned __int16)v208 | (BYTE2(v208) << 16);
  v196 = v204;
  v197 = *(_OWORD *)v205;
  v198 = *(_QWORD *)&v205[16];
  v199 = v206;
  v200 = v207;
  v202 = BYTE2(v208);
  v201 = v208;
  v203 = HIDWORD(v208);
  outlined copy of DisplayList.Item.Value(v206, v207);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v144 = v188;
  v145 = WORD4(v188);
  v146 = BYTE10(v188);
  v147 = (char *)v177;
  if (v177 == 1)
  {
    result = outlined consume of DisplayList.Item.Value(v141, v142);
  }
  else
  {
    v148 = swift_allocObject();
    LODWORD(v186) = v143;
    v149 = (_QWORD *)v148;
    v150 = *(_DWORD *)v2;
    v151 = (__int128 *)AGGraphGetValue();
    v152 = v151[1];
    v196 = *v151;
    v197 = v152;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v185 = v142;
    v153 = v166;
    outlined copy of AccessibilityArchivableViewAttachment?(v166, 0, 0, (uint64_t)v147);
    outlined copy of Environment<AppIntentExecutor?>.Content(v153, 0, 0);
    v154 = swift_bridgeObjectRetain();
    v184 = v141;
    v155 = MEMORY[0x18D75BE3C](v154);
    v157 = v156;
    v149[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v149[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v158 = swift_allocObject();
    v149[2] = v158;
    *(_QWORD *)(v158 + 16) = v153;
    *(_QWORD *)(v158 + 24) = 0;
    *(_BYTE *)(v158 + 32) = 0;
    *(_QWORD *)(v158 + 40) = v147;
    *(_DWORD *)(v158 + 48) = v150;
    *(double *)(v158 + 56) = v155;
    *(_QWORD *)(v158 + 64) = v157;
    *(_QWORD *)&v188 = v149;
    *((_QWORD *)&v188 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v189 = v144;
    BYTE10(v189) = v146;
    WORD4(v189) = v145;
    LODWORD(v209) = v150;
    *(_QWORD *)&v212 = v165;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v188) = v187;
    DisplayList.Item.canonicalize(options:)();
    v159 = v199;
    v160 = v200;
    v188 = v196;
    v189 = v197;
    v190 = v198;
    v191 = v199;
    v192 = v200;
    v194 = v202;
    v193 = v201;
    v195 = v203;
    outlined copy of DisplayList.Item.Value(v199, v200);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v153, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v153, 0, 0, (uint64_t)v147);
    outlined consume of DisplayList.Item.Value(v159, v160);
    outlined consume of DisplayList.Item.Value(v184, v185);
    result = swift_bridgeObjectRelease();
    v144 = v212;
    v145 = WORD4(v212);
    v146 = BYTE10(v212);
  }
  v161 = v164;
  *v164 = v144;
  *((_WORD *)v161 + 4) = v145;
  *((_BYTE *)v161 + 10) = v146;
  return result;
}

void specialized DisplayListTransform.value.getter(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t Value;
  __int16 v12;
  char v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(unint64_t);
  void (*v23)(__int128 *__return_ptr, unint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *__return_ptr, __int128 *, unint64_t);
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  void *v54;
  void *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  id v60;
  unint64_t v61;
  id v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  int *v67;
  __int128 *v68;
  __int128 v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  uint64_t v73;
  char *v74;
  void *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t KeyPath;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v84;
  id v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  char *v103;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  int64_t v108;
  char v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v121;
  id v122;
  id v123;
  id v124;
  uint64_t (*v125)(void);
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(void);
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int *v140;
  int v141;
  __int128 *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  __int16 v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int v154;
  __int128 *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD v166[2];
  int v167;
  int v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  uint64_t v177;
  int *v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  _QWORD *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int16 v199;
  char v200;
  int v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int16 v207;
  char v208;
  int v209;
  __int128 v210;
  _BYTE v211[24];
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  __int16 v218;
  char v219;
  __int128 v220;

  v3 = type metadata accessor for AccessibilityNodeAttachment();
  v185 = *(_QWORD *)(v3 - 8);
  v186 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v166 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v188 = (uint64_t)v166 - v9;
  v173 = v1;
  LODWORD(v10) = *MEMORY[0x1E0CFED28];
  if (v1[12] == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
  }
  else
  {
    Value = AGGraphGetValue();
    v12 = *(_WORD *)(Value + 8);
    v13 = *(_BYTE *)(Value + 10);
    v217 = *(_QWORD *)Value;
    v218 = v12;
    v219 = v13;
    swift_bridgeObjectRetain();
  }
  v14 = v173;
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  if (v173[14] != (_DWORD)v10)
  {
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v14 = v173;
  }
  v184 = v14[11];
  v210 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v29 = v218;
    v30 = v219;
    *(_QWORD *)a1 = v217;
    *(_WORD *)(a1 + 8) = v29;
    *(_BYTE *)(a1 + 10) = v30;
    return;
  }
  v216 = (char *)v15;
  v17 = (char *)(v16 >> 62);
  v183 = v6;
  v169 = (_QWORD *)a1;
  if (v16 >> 62)
    goto LABEL_152;
  *(_QWORD *)&v192 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v18 = v173;
    v19 = v173[7];
    v20 = AGGraphGetValue();
    v21 = *(_QWORD *)v20;
    v22 = *(uint64_t (**)(unint64_t))(**(_QWORD **)v20 + 80);
    swift_retain();
    LODWORD(v22) = v22(v16);
    swift_release();
    v168 = (int)v22;
    if ((v22 & 1) != 0)
      break;
    if (AGGraphGetCurrentAttribute() == (_DWORD)v10)
    {
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    AccessibilityAttachmentToken.init<A>(_:)();
    v187 = v210;
    v182 = BYTE8(v210);
    if (v17)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31 < 0)
      {
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
        return;
      }
    }
    else
    {
      v31 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v31)
    {
      swift_bridgeObjectRelease();
      v172 = 0;
      goto LABEL_71;
    }
    LODWORD(v191) = v19;
    v32 = 0;
    v172 = 0;
    LODWORD(v190) = v173[13];
    v180 = v16 & 0xFFFFFFFFFFFFFF8;
    v181 = v16 & 0xC000000000000001;
    LODWORD(v189) = v10;
LABEL_24:
    v17 = *(char **)AGGraphGetValue();
    if ((_QWORD)v192 != 1)
    {
      swift_retain();
      goto LABEL_36;
    }
    *(_QWORD *)&v210 = v187;
    BYTE8(v210) = v182;
    v33 = *(void (**)(__int128 *__return_ptr, __int128 *, unint64_t))(*(_QWORD *)v17 + 120);
    swift_retain_n();
    v33(&v202, &v210, v16);
    swift_release();
    if ((v202 & 0x40) != 0)
      goto LABEL_36;
    if (v181)
    {
      v34 = (char *)MEMORY[0x18D75E3BC](0, v16);
    }
    else
    {
      if (!*(_QWORD *)(v180 + 16))
        goto LABEL_148;
      v34 = (char *)*(id *)(v16 + 32);
    }
    v35 = v34;
    v36 = &v34[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    v37 = *(_QWORD *)v36;
    v38 = *(_QWORD *)(*(_QWORD *)v36 + 16);
    if (!v38)
    {
      swift_bridgeObjectRetain();
LABEL_49:

      swift_bridgeObjectRelease();
      if (v181)
      {
        swift_retain();
        v53 = (char *)MEMORY[0x18D75E3BC](0, v16);
      }
      else
      {
        v54 = *(void **)(v16 + 32);
        swift_retain();
        v53 = v54;
      }
      v55 = v53;
      LODWORD(v10) = v189;
      v56 = &v53[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
      swift_beginAccess();
      v57 = *(_QWORD *)v56;
      swift_bridgeObjectRetain();

      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v17 + 88))(&v210, v57);
      swift_release_n();
      swift_bridgeObjectRelease();
      if ((_DWORD)v190 != (_DWORD)v10)
        goto LABEL_37;
      goto LABEL_53;
    }
    swift_bridgeObjectRetain();
    v10 = v37 + 40 * v38;
    while (v38 <= *(_QWORD *)(v37 + 16))
    {
      v39 = *(_QWORD *)v10;
      *(_QWORD *)&v210 = *(_QWORD *)(v10 - 8);
      *((_QWORD *)&v210 + 1) = v39;
      v40 = (void *)AccessibilityAttachment.platformElement.getter();

      if (v40)
      {
        if (v38 > *(_QWORD *)(v37 + 16))
          goto LABEL_157;
        v50 = *(_QWORD *)v10;
        *(_QWORD *)&v210 = *(_QWORD *)(v10 - 8);
        *((_QWORD *)&v210 + 1) = v50;
        v51 = AccessibilityAttachment.platformElement.getter();
        if (!v51)
          goto LABEL_158;
        v52 = (void *)v51;

        swift_bridgeObjectRelease();
        LODWORD(v10) = v189;
LABEL_36:
        v41 = v190;
        AccessibilityAttachment.init()();
        swift_release();
        if (v41 != (_DWORD)v10)
        {
LABEL_37:
          v42 = AGGraphGetValue();
          v44 = *(_QWORD *)v42;
          v43 = *(void **)(v42 + 8);
          if (!*(_BYTE *)(v42 + 16))
          {
            v48 = v43;
            swift_bridgeObjectRetain();
            goto LABEL_41;
          }
          if (*(_BYTE *)(v42 + 16) == 1)
          {
            v45 = swift_bridgeObjectRetain();
            v46 = v172;
            v47 = specialized Sequence.compactMap<A>(_:)(v45);
            v172 = v46;
            static AccessibilityAttachment.combine(_:)(v47, (uint64_t *)&v202);
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree(v44, v43, 1);
            v43 = (void *)*((_QWORD *)&v202 + 1);
            v44 = v202;
LABEL_41:
            *(_QWORD *)&v202 = v44;
            AccessibilityProperties.merge(with:)((uint64_t *)&v202);
            v202 = v210;
            v49 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v49)
            {
              *(_QWORD *)&v202 = v44;
              *((_QWORD *)&v202 + 1) = v43;
              if (AccessibilityAttachment.platformElement.getter())
                AccessibilityAttachment.platformElement.setter();
            }
            swift_bridgeObjectRelease();

          }
        }
LABEL_53:
        v58 = v210;
        v202 = v210;
        if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
        {
          swift_bridgeObjectRelease();

        }
        else
        {
          v59 = v216;
          v60 = *((id *)&v58 + 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
          v10 = *((_QWORD *)v59 + 2);
          v61 = *((_QWORD *)v59 + 3);
          if (v10 >= v61 >> 1)
            v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v10 + 1, 1, v59);
          *((_QWORD *)v59 + 2) = v10 + 1;
          *(_OWORD *)&v59[16 * v10 + 32] = v58;

          swift_bridgeObjectRelease();
          v216 = v59;
          LODWORD(v10) = v189;
        }
        if (++v32 == v31)
        {
          swift_bridgeObjectRelease();
          goto LABEL_71;
        }
        goto LABEL_24;
      }
      v10 -= 40;
      if (!--v38)
        goto LABEL_49;
    }
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    swift_bridgeObjectRetain();
    *(_QWORD *)&v192 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v23 = *(void (**)(__int128 *__return_ptr, unint64_t))(**(_QWORD **)AGGraphGetValue() + 88);
  swift_retain();
  v23(&v210, v16);
  swift_release();
  swift_bridgeObjectRelease();
  if (v18[13] != (_DWORD)v10)
  {
    v24 = AGGraphGetValue();
    v26 = *(_QWORD *)v24;
    v25 = *(void **)(v24 + 8);
    if (!*(_BYTE *)(v24 + 16))
    {
      v62 = v25;
      swift_bridgeObjectRetain();
      v172 = 0;
LABEL_63:
      *(_QWORD *)&v202 = v26;
      AccessibilityProperties.merge(with:)((uint64_t *)&v202);
      v202 = v210;
      v63 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v63)
      {
        *(_QWORD *)&v202 = v26;
        *((_QWORD *)&v202 + 1) = v25;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }
      swift_bridgeObjectRelease();

      goto LABEL_67;
    }
    if (*(_BYTE *)(v24 + 16) == 1)
    {
      v27 = swift_bridgeObjectRetain();
      v28 = specialized Sequence.compactMap<A>(_:)(v27);
      v172 = 0;
      static AccessibilityAttachment.combine(_:)(v28, (uint64_t *)&v202);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v26, v25, 1);
      v25 = (void *)*((_QWORD *)&v202 + 1);
      v26 = v202;
      goto LABEL_63;
    }
  }
  v172 = 0;
LABEL_67:
  v18 = (int *)*((_QWORD *)&v210 + 1);
  v21 = v210;
  v17 = (char *)*((id *)&v210 + 1);
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x1E0DEE9D8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    goto LABEL_68;
LABEL_155:
  v16 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
LABEL_68:
  v65 = *(_QWORD *)(v16 + 16);
  v64 = *(_QWORD *)(v16 + 24);
  if (v65 >= v64 >> 1)
    v16 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, (char *)v16);
  *(_QWORD *)(v16 + 16) = v65 + 1;
  v66 = (char *)(v16 + 16 * v65);
  *((_QWORD *)v66 + 4) = v21;
  *((_QWORD *)v66 + 5) = v18;

  swift_bridgeObjectRelease();
  v216 = (char *)v16;
LABEL_71:
  v67 = v173;
  v210 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v210 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v167 = v67[8];
  v68 = (__int128 *)AGGraphGetValue();
  v69 = v68[1];
  v210 = *v68;
  *(_OWORD *)v211 = v69;
  v70 = MEMORY[0x18D75BE3C]();
  v72 = v71;
  DisplayList.Version.init(forUpdate:)();
  v182 = *((unsigned __int8 *)v67 + 4);
  v170 = v210;
  if ((v182 & 1) != 0)
  {
    v176 = (_QWORD *)*((_QWORD *)v216 + 2);
    if (v176)
    {
      v175 = v216 + 32;
      v166[1] = v216;
      swift_bridgeObjectRetain_n();
      v10 = 0;
      v171 = 0;
      v73 = 1;
      v174 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        v187 = v73;
        v74 = &v175[16 * v10];
        v18 = *(int **)v74;
        v75 = (void *)*((_QWORD *)v74 + 1);
        v76 = (uint64_t *)AGGraphGetValue();
        v77 = *v76;
        v189 = v76[1];
        KeyPath = swift_getKeyPath();
        if (!*((_QWORD *)v18 + 2))
          goto LABEL_80;
        v79 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
        if ((v80 & 1) != 0)
        {
          outlined init with copy of TableColumnList(*((_QWORD *)v18 + 7) + 40 * v79, (uint64_t)&v210);
          v81 = *(_QWORD *)&v211[8];
          v82 = *(_QWORD *)&v211[16];
          __swift_project_boxed_opaque_existential_1(&v210, *(uint64_t *)&v211[8]);
          v83 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v82 + 8);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain_n();
          v84 = v75;
          swift_retain();
          v83(&v202, v81, v82);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v210);
        }
        else
        {
LABEL_80:
          v202 = 0u;
          v203 = 0u;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain_n();
          v85 = v75;
          swift_retain();
        }
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v174, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        v86 = swift_dynamicCast();
        v180 = KeyPath;
        v181 = (unint64_t)v75;
        if (v86)
        {
          v87 = v210;
        }
        else
        {
          *(_QWORD *)&v210 = 0;
          if (one-time initialization token for defaultValue != -1)
            swift_once();
          v87 = static AccessibilityProperties.ActionsKey.defaultValue;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v88 = *(_QWORD *)(v87 + 16);
        if (v88)
        {
          v178 = v18;
          v179 = (_QWORD *)v10;
          v89 = (_QWORD *)(v87 + 32);
          v177 = v87;
          swift_bridgeObjectRetain();
          v16 = MEMORY[0x1E0DEE9D8];
          do
          {
            v92 = v89[3];
            v91 = v89[4];
            __swift_project_boxed_opaque_existential_1(v89, v92);
            *(_QWORD *)&v202 = v77;
            *((_QWORD *)&v202 + 1) = v189;
            (*(void (**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t))(v91 + 96))(&v210, &v202, v92, v91);
            if ((_QWORD)v213)
            {
              v192 = v213;
              v93 = *(_WORD *)v211;
              v190 = v210;
              v191 = *(_OWORD *)&v211[8];
              v94 = v212;
              v95 = v214;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v16 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
              v97 = *(_QWORD *)(v16 + 16);
              v96 = *(_QWORD *)(v16 + 24);
              v98 = v192;
              if (v97 >= v96 >> 1)
              {
                v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, (char *)v16);
                v98 = v192;
                v16 = (unint64_t)v99;
              }
              *(_QWORD *)(v16 + 16) = v97 + 1;
              v90 = (char *)(v16 + 72 * v97);
              *((_OWORD *)v90 + 2) = v190;
              *((_WORD *)v90 + 24) = v93;
              *(_OWORD *)(v90 + 56) = v191;
              v90[72] = v94 & 1;
              *((_OWORD *)v90 + 5) = v98;
              *((_QWORD *)v90 + 12) = v95;
            }
            v89 += 6;
            --v88;
          }
          while (v88);
          swift_bridgeObjectRelease();
          v18 = v178;
          v10 = (unint64_t)v179;
        }
        else
        {
          v16 = MEMORY[0x1E0DEE9D8];
        }
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v100 = *(_QWORD *)(v16 + 16);
        v101 = v180;
        swift_release();
        v73 = v187;
        v102 = (void *)v181;
        if (v100)
          break;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_75:

LABEL_76:
        if ((_QWORD *)++v10 == v176)
        {
          swift_bridgeObjectRelease_n();
          if ((v168 & 1) != 0)
            goto LABEL_118;
LABEL_120:
          v109 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v217, (uint64_t *)&v216, v70, v72);
          goto LABEL_121;
        }
      }
      if (!v187)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_116:
        swift_release();
        goto LABEL_75;
      }
      if (v187 == 1)
      {
        swift_bridgeObjectRelease();

        v171 = v101;
        v73 = v16;
        goto LABEL_76;
      }
      v21 = *(_QWORD *)(v16 + 16);
      v17 = *(char **)(v187 + 16);
      v103 = &v17[v21];
      if (__OFADD__(v17, v21))
        goto LABEL_149;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && (uint64_t)v103 <= *(_QWORD *)(v73 + 24) >> 1)
      {
        if (*(_QWORD *)(v16 + 16))
          goto LABEL_106;
      }
      else
      {
        if ((uint64_t)v17 <= (uint64_t)v103)
          v108 = (int64_t)&v17[v21];
        else
          v108 = (int64_t)v17;
        v73 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v108, 1, (char *)v73);
        if (*(_QWORD *)(v16 + 16))
        {
LABEL_106:
          if ((*(_QWORD *)(v73 + 24) >> 1) - *(_QWORD *)(v73 + 16) < v21)
            goto LABEL_151;
          swift_arrayInitWithCopy();
          if (v21)
          {
            v105 = *(_QWORD *)(v73 + 16);
            v106 = __OFADD__(v105, v21);
            v107 = v105 + v21;
            if (v106)
            {
              __break(1u);
              goto LABEL_154;
            }
            *(_QWORD *)(v73 + 16) = v107;
          }
          goto LABEL_115;
        }
      }
      if (v21)
        goto LABEL_150;
LABEL_115:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_116;
    }
  }
  v171 = 0;
  v73 = 1;
  if ((v168 & 1) == 0)
    goto LABEL_120;
LABEL_118:
  v109 = 1;
LABEL_121:
  v110 = *((_QWORD *)v216 + 2);
  v111 = MEMORY[0x1E0DEE9D8];
  v187 = v73;
  if (!v110)
    goto LABEL_140;
  v215 = MEMORY[0x1E0DEE9D8];
  v112 = (uint64_t)v216;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110, 0);
  v220 = *(_OWORD *)(v173 + 2);
  LODWORD(v192) = v109 & 1;
  *(_QWORD *)&v190 = v112;
  v113 = (void **)(v112 + 40);
  *(_QWORD *)&v191 = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v115 = (uint64_t)*(v113 - 1);
    v114 = *v113;
    if (*(_QWORD *)(v115 + 16)
      && (v116 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v117 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v115 + 56) + 40 * v116, (uint64_t)&v210);
      v119 = *(_QWORD *)&v211[8];
      v118 = *(_QWORD *)&v211[16];
      __swift_project_boxed_opaque_existential_1(&v210, *(uint64_t *)&v211[8]);
      v120 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v118 + 8);
      v121 = v114;
      swift_bridgeObjectRetain_n();
      v122 = v121;
      v120(&v202, v119, v118);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v210);
    }
    else
    {
      v202 = 0u;
      v203 = 0u;
      v123 = v114;
      swift_bridgeObjectRetain_n();
      v124 = v123;
    }
    v125 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v191, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v125);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v211[1] = 0;
      v127 = *((_QWORD *)&v210 + 1);
      v126 = v210;
      v128 = v211[0];
      swift_bridgeObjectRelease();
      if ((v128 & 1) == 0)
      {
        v129 = 0;
        if ((v182 & 1) != 0)
          goto LABEL_130;
        goto LABEL_133;
      }
    }
    else
    {
      v210 = 0uLL;
      *(_WORD *)v211 = 256;
      swift_bridgeObjectRelease();
    }
    v126 = 0;
    v127 = 0;
    v129 = 1;
    if ((v182 & 1) != 0)
    {
LABEL_130:
      v130 = (uint64_t *)AGGraphGetValue();
      v132 = *v130;
      v131 = v130[1];
      *(_QWORD *)&v202 = v115;
      *((_QWORD *)&v202 + 1) = v114;
      v210 = 0u;
      *(_OWORD *)v211 = 0u;
      *(_QWORD *)&v211[16] = v126;
      v212 = v127;
      LOBYTE(v213) = v129;
      *(_QWORD *)&v194 = v132;
      *((_QWORD *)&v194 + 1) = v131;
      v193 = v220;
      swift_retain();
      swift_retain();
      v133 = v183;
      CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
      goto LABEL_134;
    }
LABEL_133:
    v133 = v183;
    *v183 = v115;
    v133[1] = v114;
LABEL_134:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    v134 = v186;
    *((_BYTE *)v133 + *(int *)(v186 + 20)) = v192;
    *((_BYTE *)v133 + *(int *)(v134 + 24)) = 0;
    v135 = (uint64_t)v133;
    v136 = MEMORY[0x1E0CE6150];
    outlined init with take of TableCellFormula(v135, v188, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6150]);
    swift_bridgeObjectRelease();

    v111 = v215;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v111 + 16) + 1, 1);
      v111 = v215;
    }
    v138 = *(_QWORD *)(v111 + 16);
    v137 = *(_QWORD *)(v111 + 24);
    if (v138 >= v137 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v137 > 1, v138 + 1, 1);
      v111 = v215;
    }
    v113 += 2;
    *(_QWORD *)(v111 + 16) = v138 + 1;
    outlined init with take of TableCellFormula(v188, v111+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(_QWORD *)(v185 + 72) * v138, (uint64_t (*)(_QWORD))v136);
    --v110;
  }
  while (v110);
  swift_bridgeObjectRelease();
  v73 = v187;
LABEL_140:
  swift_bridgeObjectRelease();
  v139 = swift_allocObject();
  *(_QWORD *)(v139 + 16) = v111;
  *(_QWORD *)&v202 = v139;
  *((_QWORD *)&v202 + 1) = 0x4000000D00000000;
  *(_QWORD *)&v203 = v217;
  BYTE10(v203) = v219;
  WORD4(v203) = v218;
  if (v73 == 1)
  {
    v140 = v173;
    v141 = *v173;
    swift_bridgeObjectRetain();
  }
  else
  {
    v142 = (__int128 *)AGGraphGetValue();
    v143 = v142[1];
    v210 = *v142;
    *(_OWORD *)v211 = v143;
    v144 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v144);
    v141 = 0;
    v140 = v173;
  }
  LODWORD(v193) = v141;
  *(_QWORD *)&v194 = v170;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v192) = *((unsigned __int8 *)v140 + 24);
  LOBYTE(v202) = v192;
  DisplayList.Item.canonicalize(options:)();
  v145 = v212;
  v146 = v213;
  v147 = (unsigned __int16)v214 | (BYTE2(v214) << 16);
  v202 = v210;
  v203 = *(_OWORD *)v211;
  v204 = *(_QWORD *)&v211[16];
  v205 = v212;
  v206 = v213;
  v208 = BYTE2(v214);
  v207 = v214;
  v209 = HIDWORD(v214);
  outlined copy of DisplayList.Item.Value(v212, v213);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v148 = v194;
  v149 = WORD4(v194);
  v150 = BYTE10(v194);
  v151 = v187;
  if (v187 == 1)
  {
    outlined consume of DisplayList.Item.Value(v145, v146);
  }
  else
  {
    v152 = swift_allocObject();
    LODWORD(v191) = v147;
    v153 = (_QWORD *)v152;
    v154 = *v140;
    v155 = (__int128 *)AGGraphGetValue();
    v156 = v155[1];
    v202 = *v155;
    v203 = v156;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v190 = v146;
    v157 = v171;
    outlined copy of AccessibilityArchivableViewAttachment?(v171, 0, 0, v151);
    outlined copy of Environment<AppIntentExecutor?>.Content(v157, 0, 0);
    v158 = swift_bridgeObjectRetain();
    v189 = v145;
    v159 = MEMORY[0x18D75BE3C](v158);
    v161 = v160;
    v153[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v153[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v162 = swift_allocObject();
    v153[2] = v162;
    *(_QWORD *)(v162 + 16) = v157;
    *(_QWORD *)(v162 + 24) = 0;
    *(_BYTE *)(v162 + 32) = 0;
    *(_QWORD *)(v162 + 40) = v151;
    *(_DWORD *)(v162 + 48) = v154;
    *(double *)(v162 + 56) = v159;
    *(_QWORD *)(v162 + 64) = v161;
    *(_QWORD *)&v194 = v153;
    *((_QWORD *)&v194 + 1) = 0x4000000C00000000;
    *(_QWORD *)&v195 = v148;
    BYTE10(v195) = v150;
    WORD4(v195) = v149;
    LODWORD(v215) = v154;
    *(_QWORD *)&v193 = v170;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v194) = v192;
    DisplayList.Item.canonicalize(options:)();
    v163 = v205;
    v164 = v206;
    v194 = v202;
    v195 = v203;
    v196 = v204;
    v197 = v205;
    v198 = v206;
    v200 = v208;
    v199 = v207;
    v201 = v209;
    outlined copy of DisplayList.Item.Value(v205, v206);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v157, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v157, 0, 0, v151);
    outlined consume of DisplayList.Item.Value(v163, v164);
    outlined consume of DisplayList.Item.Value(v189, v190);
    swift_bridgeObjectRelease();
    v148 = v193;
    v149 = WORD4(v193);
    v150 = BYTE10(v193);
  }
  v165 = v169;
  *v169 = v148;
  *((_WORD *)v165 + 4) = v149;
  *((_BYTE *)v165 + 10) = v150;
}

uint64_t specialized MakeResolvedRepresentation.value.getter@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t v17;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v17 - v5;
  v7 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ResolvedDatePickerStyle(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of ResolvedDatePickerStyle(Value, (uint64_t)v14);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v10, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Date>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v10[v7[6]], (uint64_t)&v6[v3[9]], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v10[v7[7]], (uint64_t)&v6[v3[10]], (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  *(_QWORD *)&v6[v3[11]] = *(_QWORD *)&v10[v7[8]];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v6, a1);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for ResolvedDatePickerStyle);
}

uint64_t (*specialized ToolbarAppearanceModifier.PreferenceValue.value.getter(uint64_t a1))(_QWORD *a1)
{
  char *v2;
  char v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;
  uint64_t v17;
  _QWORD v18[3];
  __int128 v19;

  v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v18, 0, sizeof(v18));
  v19 = xmmword_187C304C0;
  v3 = specialized Sequence<>.contains(_:)((uint64_t)v18, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
  if ((v3 & 1) == 0)
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v17 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)Value;
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_BYTE *)(Value + 56);
  v12 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v15 = *(_WORD *)(Value + 57);
  v16 = *(_BYTE *)(Value + 59);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v8;
  *(_QWORD *)(v13 + 64) = v9;
  *(_BYTE *)(v13 + 72) = v10;
  *(_WORD *)(v13 + 73) = v15;
  *(_QWORD *)(v13 + 80) = v12;
  *(_QWORD *)(v13 + 88) = v17;
  *(_BYTE *)(v13 + 96) = v16;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

{
  char *v2;
  char v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;
  uint64_t v17;
  _QWORD v18[3];
  __int128 v19;

  v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v18, 0, sizeof(v18));
  v19 = xmmword_187BFE310;
  v3 = specialized Sequence<>.contains(_:)((uint64_t)v18, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
  if ((v3 & 1) == 0)
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v17 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)Value;
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_BYTE *)(Value + 56);
  v12 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v15 = *(_WORD *)(Value + 57);
  v16 = *(_BYTE *)(Value + 59);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v8;
  *(_QWORD *)(v13 + 64) = v9;
  *(_BYTE *)(v13 + 72) = v10;
  *(_WORD *)(v13 + 73) = v15;
  *(_QWORD *)(v13 + 80) = v12;
  *(_QWORD *)(v13 + 88) = v17;
  *(_BYTE *)(v13 + 96) = v16;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

{
  char *v2;
  char v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;
  uint64_t v17;
  _QWORD v18[3];
  __int128 v19;

  v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v18, 0, sizeof(v18));
  v19 = xmmword_187C39070;
  v3 = specialized Sequence<>.contains(_:)((uint64_t)v18, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
  if ((v3 & 1) == 0)
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v17 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)Value;
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_BYTE *)(Value + 56);
  v12 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v15 = *(_WORD *)(Value + 57);
  v16 = *(_BYTE *)(Value + 59);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v8;
  *(_QWORD *)(v13 + 64) = v9;
  *(_BYTE *)(v13 + 72) = v10;
  *(_WORD *)(v13 + 73) = v15;
  *(_QWORD *)(v13 + 80) = v12;
  *(_QWORD *)(v13 + 88) = v17;
  *(_BYTE *)(v13 + 96) = v16;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

{
  char *v2;
  char v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;
  uint64_t v17;
  _QWORD v18[3];
  __int128 v19;

  v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v18, 0, sizeof(v18));
  v19 = xmmword_187C304D0;
  v3 = specialized Sequence<>.contains(_:)((uint64_t)v18, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
  if ((v3 & 1) == 0)
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v17 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)Value;
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_BYTE *)(Value + 56);
  v12 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v15 = *(_WORD *)(Value + 57);
  v16 = *(_BYTE *)(Value + 59);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v8;
  *(_QWORD *)(v13 + 64) = v9;
  *(_BYTE *)(v13 + 72) = v10;
  *(_WORD *)(v13 + 73) = v15;
  *(_QWORD *)(v13 + 80) = v12;
  *(_QWORD *)(v13 + 88) = v17;
  *(_BYTE *)(v13 + 96) = v16;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

{
  char *v2;
  char v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;
  uint64_t v17;
  _QWORD v18[3];
  __int128 v19;

  v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v18, 0, sizeof(v18));
  v19 = xmmword_187C0CDF0;
  v3 = specialized Sequence<>.contains(_:)((uint64_t)v18, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
  if ((v3 & 1) == 0)
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v17 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)Value;
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_BYTE *)(Value + 56);
  v12 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v15 = *(_WORD *)(Value + 57);
  v16 = *(_BYTE *)(Value + 59);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v8;
  *(_QWORD *)(v13 + 64) = v9;
  *(_BYTE *)(v13 + 72) = v10;
  *(_WORD *)(v13 + 73) = v15;
  *(_QWORD *)(v13 + 80) = v12;
  *(_QWORD *)(v13 + 88) = v17;
  *(_BYTE *)(v13 + 96) = v16;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

{
  char *v2;
  char v3;
  uint64_t Value;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v3 = specialized Sequence<>.contains(_:)((uint64_t)v18, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
  if ((v3 & 1) == 0)
    return (uint64_t (*)(_QWORD *))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v17 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v5 = *(_BYTE *)Value;
  v6 = *(_BYTE *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_BYTE *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_BYTE *)(Value + 56);
  v12 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v15 = *(_WORD *)(Value + 57);
  v16 = *(_BYTE *)(Value + 59);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v11;
  *(_BYTE *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v8;
  *(_QWORD *)(v13 + 64) = v9;
  *(_BYTE *)(v13 + 72) = v10;
  *(_WORD *)(v13 + 73) = v15;
  *(_QWORD *)(v13 + 80) = v12;
  *(_QWORD *)(v13 + 88) = v17;
  *(_BYTE *)(v13 + 96) = v16;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

uint64_t (*specialized ToolbarAppearanceModifier.PreferenceValue.value.getter(unint64_t a1))(_QWORD *a1)
{
  int v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;
  char v14;
  uint64_t v15;
  unint64_t v16;

  v1 = a1;
  v16 = HIDWORD(a1);
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  v15 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  Value = AGGraphGetValue();
  v3 = *(_BYTE *)Value;
  v4 = *(_BYTE *)(Value + 24);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_QWORD *)(Value + 48);
  v8 = *(_BYTE *)(Value + 56);
  v10 = *(_QWORD *)(Value + 8);
  v9 = *(_QWORD *)(Value + 16);
  v13 = *(_WORD *)(Value + 57);
  v14 = *(_BYTE *)(Value + 59);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v1;
  *(_DWORD *)(v11 + 20) = v16;
  *(_BYTE *)(v11 + 24) = v3;
  *(_QWORD *)(v11 + 32) = v9;
  *(_BYTE *)(v11 + 40) = v4;
  *(_QWORD *)(v11 + 48) = v5;
  *(_BYTE *)(v11 + 56) = v6;
  *(_QWORD *)(v11 + 64) = v7;
  *(_BYTE *)(v11 + 72) = v8;
  *(_WORD *)(v11 + 73) = v13;
  *(_QWORD *)(v11 + 80) = v10;
  *(_QWORD *)(v11 + 88) = v15;
  *(_BYTE *)(v11 + 96) = v14;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

char *specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter()
{
  char *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[24];
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  _QWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v0 = *(char **)(AGGraphGetValue() + 64);
  v1 = *((_QWORD *)v0 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    v17 = xmmword_187C304E0;
    outlined init with copy of ToolbarPlacement.Storage((uint64_t)v16, (uint64_t)v14);
    if ((_QWORD)v15 == 7)
    {
      v20 = 0;
      v19 = 0u;
      v18 = 0u;
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of ToolbarPlacement.Storage((uint64_t)v14);
      outlined init with copy of ToolbarPlacement((uint64_t)v16, (uint64_t)&v18);
    }
    outlined destroy of ToolbarPlacement((uint64_t)v16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v0 + 2) + 1, 1, v0);
    v3 = *((_QWORD *)v0 + 2);
    v2 = *((_QWORD *)v0 + 3);
    if (v3 >= v2 >> 1)
      v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v0);
    *((_QWORD *)v0 + 2) = v3 + 1;
    v4 = &v0[40 * v3];
    v5 = v18;
    v6 = v19;
    *((_QWORD *)v4 + 8) = v20;
    *((_OWORD *)v4 + 2) = v5;
    *((_OWORD *)v4 + 3) = v6;
    v1 = v3 + 1;
    if (v3 == -1)
    {
      swift_bridgeObjectRelease();
      return (char *)MEMORY[0x1E0DEE9D8];
    }
  }
  v7 = (uint64_t)(v0 + 32);
  swift_bridgeObjectRetain();
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of ToolbarPlacement(v7, (uint64_t)&v18);
    outlined init with copy of ToolbarPlacement.Storage((uint64_t)&v18, (uint64_t)v12);
    if (v13 == 7)
    {
      outlined destroy of ToolbarPlacement.Storage((uint64_t)v12);
      memset(v14, 0, sizeof(v14));
      v15 = xmmword_187C304E0;
    }
    else
    {
      outlined init with take of ToolbarPlacement.Role((uint64_t)v12, (uint64_t)v16);
      outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v14);
    }
    outlined destroy of ToolbarPlacement((uint64_t)&v18);
    if ((_QWORD)v15 == 7)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    }
    else
    {
      outlined init with take of ToolbarPlacement.Role((uint64_t)v14, (uint64_t)v16);
      outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v10 = *((_QWORD *)v8 + 2);
      v9 = *((_QWORD *)v8 + 3);
      if (v10 >= v9 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v10 + 1;
      outlined init with take of ToolbarPlacement.Role((uint64_t)v14, (uint64_t)&v8[40 * v10 + 32]);
    }
    v7 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(_QWORD *a1, __n128 a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t result;
  char v66;
  uint64_t v67;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD v85[5];
  _BYTE v86[24];
  uint64_t v87;
  _QWORD v88[3];
  __n128 v89;

  memset(v88, 0, sizeof(v88));
  v89 = a2;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v88, (uint64_t)v86, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  if (v87 == 7)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v88, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    v18 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
    v19 = *((_QWORD *)v18 + 2);
    if (!v19)
      return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v86, (uint64_t)v85);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v85, v20 + 32);
    outlined destroy of AccessibilityTableContext?((uint64_t)v88, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    v18 = (char *)v20;
    v19 = *(_QWORD *)(v20 + 16);
    if (!v19)
      return swift_bridgeObjectRelease();
  }
  v67 = a5;
  v21 = (uint64_t)(v18 + 32);
  v84 = a1;
  v66 = a8;
  while (1)
  {
    v72 = v21;
    v73 = v19;
    outlined init with copy of ToolbarPlacement.Role(v21, (uint64_t)v88);
    v23 = *a1;
    if (*(_QWORD *)(*a1 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88), (v25 & 1) != 0))
    {
      v26 = *(_QWORD *)(v23 + 56) + 80 * v24;
      v27 = *(_BYTE *)v26;
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(_QWORD *)(v26 + 16);
      v30 = *(_BYTE *)(v26 + 24);
      v79 = *(_QWORD *)(v26 + 32);
      v31 = *(_QWORD *)(v26 + 48);
      v81 = *(_BYTE *)(v26 + 40);
      v82 = *(_BYTE *)(v26 + 56);
      v32 = *(_BYTE *)(v26 + 57);
      v33 = *(_BYTE *)(v26 + 58);
      v34 = *(_BYTE *)(v26 + 72);
      v83 = *(_QWORD *)(v26 + 64);
      swift_retain();
      v35 = v28;
      v36 = v79;
      swift_retain();
      swift_retain();
    }
    else
    {
      v31 = 0;
      v33 = 0;
      v36 = 0;
      v30 = 0;
      v34 = 0;
      v27 = 0;
      v83 = 0;
      v35 = 0;
      v29 = 0;
      v32 = 2;
      v81 = 1;
      v82 = 1;
    }
    if (a4 == 3)
      v37 = v27;
    else
      v37 = a4;
    v80 = v37;
    if (v67)
    {
      swift_retain();
      swift_release();
      v29 = v67;
    }
    if (a6 == 4)
      v38 = v30;
    else
      v38 = a6;
    v75 = v38;
    v39 = a7;
    if ((a8 & 1) != 0)
      v39 = v36;
    v74 = v39;
    v40 = a9;
    if ((a10 & 1) != 0)
      v40 = v31;
    v76 = v40;
    if (a11 == 2)
      v41 = v32;
    else
      v41 = a11;
    if (a12 == 3)
      v42 = v33;
    else
      v42 = a12;
    v77 = v42;
    v78 = v41;
    if (a13)
    {
      swift_retain();
      swift_release();
      v35 = a13;
    }
    v43 = v83;
    if (a14)
    {
      swift_retain();
      swift_release();
      v43 = a14;
    }
    v44 = a15 == 3 ? v34 : a15;
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v88, (uint64_t)v86);
    v45 = v29;
    swift_retain();
    v46 = v43;
    swift_retain();
    v47 = v35;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85[0] = *v84;
    v49 = v85[0];
    *v84 = 0x8000000000000000;
    v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v86);
    v52 = *(_QWORD *)(v49 + 16);
    v53 = (v50 & 1) == 0;
    v54 = v52 + v53;
    if (__OFADD__(v52, v53))
      break;
    v55 = v50;
    if (*(_QWORD *)(v49 + 24) >= v54)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, isUniquelyReferenced_nonNull_native);
      v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v86);
      if ((v55 & 1) != (v57 & 1))
        goto LABEL_49;
      v51 = v56;
    }
    v58 = a8 & v81;
    v59 = a10 & v82;
    v60 = (_QWORD *)v85[0];
    if ((v55 & 1) != 0)
    {
      v22 = *(_QWORD *)(v85[0] + 56) + 80 * v51;
      swift_release();
      swift_release();
      swift_release();
      *(_BYTE *)v22 = v80;
      *(_QWORD *)(v22 + 8) = v47;
      *(_QWORD *)(v22 + 16) = v45;
      *(_BYTE *)(v22 + 24) = v75;
      *(_QWORD *)(v22 + 32) = v74;
      *(_BYTE *)(v22 + 40) = v58;
      *(_QWORD *)(v22 + 48) = v76;
      *(_BYTE *)(v22 + 56) = v59;
      *(_BYTE *)(v22 + 57) = v78;
      *(_BYTE *)(v22 + 58) = v77;
      *(_QWORD *)(v22 + 64) = v46;
      *(_BYTE *)(v22 + 72) = v44;
    }
    else
    {
      *(_QWORD *)(v85[0] + 8 * (v51 >> 6) + 64) |= 1 << v51;
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v86, v60[6] + 40 * v51);
      v61 = v60[7] + 80 * v51;
      *(_BYTE *)v61 = v80;
      *(_QWORD *)(v61 + 8) = v47;
      *(_QWORD *)(v61 + 16) = v45;
      *(_BYTE *)(v61 + 24) = v75;
      *(_QWORD *)(v61 + 32) = v74;
      *(_BYTE *)(v61 + 40) = v58;
      *(_QWORD *)(v61 + 48) = v76;
      *(_BYTE *)(v61 + 56) = v59;
      *(_BYTE *)(v61 + 57) = v78;
      *(_BYTE *)(v61 + 58) = v77;
      *(_QWORD *)(v61 + 64) = v46;
      *(_BYTE *)(v61 + 72) = v44;
      v62 = v60[2];
      v63 = __OFADD__(v62, 1);
      v64 = v62 + 1;
      if (v63)
        goto LABEL_48;
      v60[2] = v64;
    }
    a1 = v84;
    *v84 = v60;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v86);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v88);
    swift_release();
    swift_release();
    swift_release();
    v21 = v72 + 40;
    v19 = v73 - 1;
    a8 = v66;
    if (v73 == 1)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t result;
  char v65;
  uint64_t v66;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD v84[5];
  _BYTE v85[24];
  uint64_t v86;
  _OWORD v87[2];
  uint64_t v88;

  v88 = 0;
  memset(v87, 0, sizeof(v87));
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v87, (uint64_t)v85, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  if (v86 == 7)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v87, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    v17 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
    v18 = *((_QWORD *)v17 + 2);
    if (!v18)
      return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v85, (uint64_t)v84);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BF9830;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v84, v19 + 32);
    outlined destroy of AccessibilityTableContext?((uint64_t)v87, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    v17 = (char *)v19;
    v18 = *(_QWORD *)(v19 + 16);
    if (!v18)
      return swift_bridgeObjectRelease();
  }
  v66 = a4;
  v20 = (uint64_t)(v17 + 32);
  v83 = a1;
  v65 = a7;
  while (1)
  {
    v71 = v20;
    v72 = v18;
    outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v87);
    v22 = *a1;
    if (*(_QWORD *)(*a1 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87), (v24 & 1) != 0))
    {
      v25 = *(_QWORD *)(v22 + 56) + 80 * v23;
      v26 = *(_BYTE *)v25;
      v27 = *(_QWORD *)(v25 + 8);
      v28 = *(_QWORD *)(v25 + 16);
      v29 = *(_BYTE *)(v25 + 24);
      v78 = *(_QWORD *)(v25 + 32);
      v30 = *(_QWORD *)(v25 + 48);
      v80 = *(_BYTE *)(v25 + 40);
      v81 = *(_BYTE *)(v25 + 56);
      v31 = *(_BYTE *)(v25 + 57);
      v32 = *(_BYTE *)(v25 + 58);
      v33 = *(_BYTE *)(v25 + 72);
      v82 = *(_QWORD *)(v25 + 64);
      swift_retain();
      v34 = v27;
      v35 = v78;
      swift_retain();
      swift_retain();
    }
    else
    {
      v30 = 0;
      v32 = 0;
      v35 = 0;
      v29 = 0;
      v33 = 0;
      v26 = 0;
      v82 = 0;
      v34 = 0;
      v28 = 0;
      v31 = 2;
      v80 = 1;
      v81 = 1;
    }
    if (a3 == 3)
      v36 = v26;
    else
      v36 = a3;
    v79 = v36;
    if (v66)
    {
      swift_retain();
      swift_release();
      v28 = v66;
    }
    if (a5 == 4)
      v37 = v29;
    else
      v37 = a5;
    v74 = v37;
    v38 = a6;
    if ((a7 & 1) != 0)
      v38 = v35;
    v73 = v38;
    v39 = a8;
    if ((a9 & 1) != 0)
      v39 = v30;
    v75 = v39;
    if (a10 == 2)
      v40 = v31;
    else
      v40 = a10;
    if (a11 == 3)
      v41 = v32;
    else
      v41 = a11;
    v76 = v41;
    v77 = v40;
    if (a12)
    {
      swift_retain();
      swift_release();
      v34 = a12;
    }
    v42 = v82;
    if (a13)
    {
      swift_retain();
      swift_release();
      v42 = a13;
    }
    v43 = a14 == 3 ? v33 : a14;
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v87, (uint64_t)v85);
    v44 = v28;
    swift_retain();
    v45 = v42;
    swift_retain();
    v46 = v34;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84[0] = *v83;
    v48 = v84[0];
    *v83 = 0x8000000000000000;
    v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v85);
    v51 = *(_QWORD *)(v48 + 16);
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      break;
    v54 = v49;
    if (*(_QWORD *)(v48 + 24) >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
      v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v85);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_49;
      v50 = v55;
    }
    v57 = a7 & v80;
    v58 = a9 & v81;
    v59 = (_QWORD *)v84[0];
    if ((v54 & 1) != 0)
    {
      v21 = *(_QWORD *)(v84[0] + 56) + 80 * v50;
      swift_release();
      swift_release();
      swift_release();
      *(_BYTE *)v21 = v79;
      *(_QWORD *)(v21 + 8) = v46;
      *(_QWORD *)(v21 + 16) = v44;
      *(_BYTE *)(v21 + 24) = v74;
      *(_QWORD *)(v21 + 32) = v73;
      *(_BYTE *)(v21 + 40) = v57;
      *(_QWORD *)(v21 + 48) = v75;
      *(_BYTE *)(v21 + 56) = v58;
      *(_BYTE *)(v21 + 57) = v77;
      *(_BYTE *)(v21 + 58) = v76;
      *(_QWORD *)(v21 + 64) = v45;
      *(_BYTE *)(v21 + 72) = v43;
    }
    else
    {
      *(_QWORD *)(v84[0] + 8 * (v50 >> 6) + 64) |= 1 << v50;
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v85, v59[6] + 40 * v50);
      v60 = v59[7] + 80 * v50;
      *(_BYTE *)v60 = v79;
      *(_QWORD *)(v60 + 8) = v46;
      *(_QWORD *)(v60 + 16) = v44;
      *(_BYTE *)(v60 + 24) = v74;
      *(_QWORD *)(v60 + 32) = v73;
      *(_BYTE *)(v60 + 40) = v57;
      *(_QWORD *)(v60 + 48) = v75;
      *(_BYTE *)(v60 + 56) = v58;
      *(_BYTE *)(v60 + 57) = v77;
      *(_BYTE *)(v60 + 58) = v76;
      *(_QWORD *)(v60 + 64) = v45;
      *(_BYTE *)(v60 + 72) = v43;
      v61 = v59[2];
      v62 = __OFADD__(v61, 1);
      v63 = v61 + 1;
      if (v62)
        goto LABEL_48;
      v59[2] = v63;
    }
    a1 = v83;
    *v83 = v59;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v85);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v87);
    swift_release();
    swift_release();
    swift_release();
    v20 = v71 + 40;
    v18 = v72 - 1;
    a7 = v65;
    if (v72 == 1)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t key path getter for EnvironmentValues.fontModifiers : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.fontModifiers.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.fontModifiers : EnvironmentValues()
{
  swift_bridgeObjectRetain();
  return EnvironmentValues.fontModifiers.setter();
}

uint64_t specialized _TraitWritingTableRowModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *Value;
  uint64_t result;
  uint64_t v5;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v5 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  Value = (uint64_t *)AGGraphGetValue();
  outlined copy of Text?(*Value, Value[1], Value[2], Value[3]);
  result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v4 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  AGGraphGetValue();
  result = ViewTraitCollection.subscript.setter();
  *a2 = v4;
  return result;
}

{
  uint64_t *Value;
  uint64_t result;
  uint64_t v5;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v5 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  Value = (uint64_t *)AGGraphGetValue();
  outlined copy of PasteHelper?(*Value);
  result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

{
  uint64_t Value;
  uint64_t result;
  _BYTE v5[48];
  _BYTE v6[48];
  uint64_t v7;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v7 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  Value = AGGraphGetValue();
  outlined init with copy of _TraitWritingTableRowModifier<DropOntoTraitKey>(Value, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  outlined init with take of Image.Resolved?((uint64_t)v6, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  result = ViewTraitCollection.subscript.setter();
  *a2 = v7;
  return result;
}

uint64_t specialized _TraitWritingTableRowModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_QWORD)@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *Value;
  uint64_t result;
  uint64_t v13;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v13 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  Value = (_QWORD *)AGGraphGetValue();
  a5(*Value);
  result = ViewTraitCollection.subscript.setter();
  *a6 = v13;
  return result;
}

uint64_t UIViewControllerRepresentableContext.transaction.getter()
{
  return swift_retain();
}

uint64_t UIViewControllerRepresentableContext.environment.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 40));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t UIViewControllerRepresentableContext.animate(changes:completion:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[6];

  v8 = Transaction.animation.getter();
  if (v8)
  {
    v9 = v8;
    v10 = Transaction.disablesAnimations.getter();
    if ((v10 & 1) == 0)
    {
      MEMORY[0x1E0C80A78](v10, v11);
      v14[2] = a1;
      v14[3] = a2;
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = a3;
      *(_QWORD *)(v13 + 24) = a4;
      outlined copy of AppIntentExecutor?((uint64_t)a3);
      specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v9, partial apply for thunk for @callee_guaranteed () -> (@error @owned Error), (uint64_t)v14, (uint64_t)_sSo6UIViewC7SwiftUIE7animate_7changes10completionyAC9AnimationV_yyXEyycSgtFZySb_SbtcfU_TA_0, v13);
      swift_release();
      return swift_release();
    }
    v8 = swift_release();
  }
  result = a1(v8);
  if (a3)
    return a3(result);
  return result;
}

uint64_t UnsupportedDisplayList.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  DisplayList.Version.init(forUpdate:)();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D75BE3C]();
  v0 = swift_allocObject();
  v1 = MEMORY[0x1E0CE31A0];
  *(_QWORD *)(v0 + 40) = MEMORY[0x1E0CE31B0];
  *(_QWORD *)(v0 + 48) = v1;
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  return DisplayList.init(_:)();
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance GenericViewControllerRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GenericViewControllerRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance GenericViewControllerRepresentable()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v5 = *(_QWORD *)a3;
    v6 = *(unsigned int *)(a3 + 8);
    v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v12, (__int128 *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>> and conformance AccessibilityBridgedPlatformView<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for AccessibilityBridgedPlatformView<A>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1E0C80A78](v10, v11);
      outlined retain of [Text.Modifier]((uint64_t)&v13);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ContainerViewControllerRepresentable<A>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, (uint64_t)&protocol witness table for ContainerViewControllerRepresentable<A>, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContainerViewControllerRepresentable<A>()
{
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance ContainerViewControllerRepresentable<A>()
{
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BridgedSplitView<A, B>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedSplitView<A, B>, a2);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, v6, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BridgedSplitView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedSplitView<A, B>, a3);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance BridgedSplitView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedSplitView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t specialized closure #1 in AnchorTransform.value.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = Anchor.Source.prepare(geometry:)();
  a3(a1, v5);
  return swift_release();
}

_BYTE *specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter()
{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 8) == 0)
  {
    swift_release();
    return (_BYTE *)static HostPreferencesKey.defaultValue.getter();
  }
  return result;
}

{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 0x10) == 0)
  {
    swift_bridgeObjectRelease();
    return (_BYTE *)static DisplayList.Key.defaultValue.getter();
  }
  return result;
}

_BYTE *specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(_QWORD *a1)
{
  _BYTE *result;
  uint64_t v3;

  result = (_BYTE *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v3 = *((_QWORD *)&static AccessibilityNodesKey.defaultValue + 1);
    *a1 = static AccessibilityNodesKey.defaultValue;
    a1[1] = v3;
    return (_BYTE *)swift_bridgeObjectRetain();
  }
  return result;
}

{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 4) == 0)
  {
    swift_bridgeObjectRelease();
    result = (_BYTE *)static ViewRespondersKey.defaultValue.getter();
    *a1 = result;
  }
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance NavigationStackRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance NavigationStackRepresentable()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MultimodalNavigationStackViewHost<A>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationStackViewHost<A>, a2);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, v6, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MultimodalNavigationStackViewHost<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationStackViewHost<A>, a3);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance MultimodalNavigationStackViewHost<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationStackViewHost<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  a2(a1, a2);
  a3(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, (uint64_t)&protocol conformance descriptor for PlatformViewIdentifiedViews<A>);
  return Attribute.init<A>(body:value:flags:update:)();
}

void specialized PlatformViewIdentifiedViews.value.getter(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD *v9;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    Value = AGGraphGetValue();
    v3 = *(_QWORD *)(Value + 64);
    v4 = *(unsigned __int8 *)(Value + 72);
    v5 = *(void **)(Value + 80);
    v6 = *(void **)(Value + 88);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v3, v4);
    v9 = v5;
    v8 = v6;
    AGGraphClearUpdate();
    v7 = *(id *)((char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x78));
    objc_msgSend(v9, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    objc_msgSend(v7, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Environment<Color?>.Content(v3, v4);

  }
}

{
  uint64_t Value;
  void *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(Value + 8);
  v18 = *(id *)Value;
  v4 = v3;
  swift_retain();
  AGGraphClearUpdate();
  v5 = *(void **)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78));
  v6 = objc_msgSend(v5, sel_view);
  if (!v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, sel_view);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v9, sel_frameForAlignmentRect_);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;

    objc_msgSend(v7, sel_setFrame_, v11, v13, v15, v17);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    swift_release();

    return;
  }
LABEL_7:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;
  _QWORD *v7;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    Value = AGGraphGetValue();
    v3 = *(_QWORD *)Value;
    v4 = *(_BYTE *)(Value + 8);
    v5 = *(void **)(Value + 16);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)Value, v4);
    v7 = v5;
    AGGraphClearUpdate();
    v6 = *(id *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x78));
    objc_msgSend(v7, sel_bounds);
    objc_msgSend(v6, sel_frameForAlignmentRect_);
    objc_msgSend(v6, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    outlined consume of Environment<Bool>.Content(v3, v4);

  }
}

{
  uint64_t Value;
  void *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(Value + 8);
  v18 = *(id *)Value;
  v4 = v3;
  AGGraphClearUpdate();
  v5 = *(void **)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78));
  v6 = objc_msgSend(v5, sel_view);
  if (!v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, sel_view);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v9, sel_frameForAlignmentRect_);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;

    objc_msgSend(v7, sel_setFrame_, v11, v13, v15, v17);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return;
  }
LABEL_7:
  __break(1u);
}

double *specialized PlatformViewIdentifiedViews.value.getter@<X0>(uint64_t a1@<X8>)
{
  double *result;
  _QWORD *Value;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    Value = (_QWORD *)AGGraphGetValue();
    v4 = Value[1];
    v5 = Value[3];
    v6 = (void *)Value[7];
    v7 = (void *)Value[8];
    swift_retain();
    outlined copy of AppIntentExecutor?(v4);
    outlined copy of AppIntentExecutor?(v5);
    swift_retain();
    v8 = v6;
    v10 = v7;
    AGGraphClearUpdate();
    v9 = *(id *)((char *)v8 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x78));
    objc_msgSend(v8, sel_bounds);
    objc_msgSend(v9, sel_frameForAlignmentRect_);
    objc_msgSend(v9, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);

    return (double *)swift_release();
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  char *v4;
  uint64_t v5;
  id v6;
  id v7;
  _BYTE v8[80];
  char *v9;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    Value = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    AGGraphClearUpdate();
    v4 = v9;
    v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x78);
    v6 = *(id *)&v9[v5];
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v6, sel_frameForAlignmentRect_);
    objc_msgSend(v6, sel_setFrame_);

    v7 = *(id *)&v4[v5];
    UIKitPagingView._identifiedViewTree(in:)(v7, a1);

    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    Value = AGGraphGetValue();
    v4 = *(_QWORD *)(Value + 16);
    v22 = *(_QWORD *)Value;
    v5 = *(_BYTE *)(Value + 25);
    v6 = *(_QWORD *)(Value + 32);
    v23 = v6;
    v7 = *(unsigned __int8 *)(Value + 40);
    v8 = *(_QWORD *)(Value + 48);
    v9 = *(_BYTE *)(Value + 56);
    v18 = *(void **)(Value + 88);
    v19 = *(void **)(Value + 96);
    v10 = *(unsigned __int8 *)(Value + 24);
    v20 = *(unsigned __int8 *)(Value + 24);
    v21 = *(_BYTE *)(Value + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)Value, v21);
    outlined copy of Environment<CGFloat?>.Content(v4, v10, v5);
    v11 = v6;
    v12 = v7;
    outlined copy of Environment<Color?>.Content(v11, v7);
    v13 = v8;
    v14 = v8;
    LOBYTE(v8) = v9;
    outlined copy of Environment<Bool>.Content(v13, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    v15 = v18;
    v16 = v19;
    AGGraphClearUpdate();
    v17 = *(id *)((char *)v15 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v15) + 0x78));
    objc_msgSend(v15, sel_bounds);
    objc_msgSend(v17, sel_frameForAlignmentRect_);
    objc_msgSend(v17, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    outlined consume of Environment<Bool>.Content(v22, v21);
    outlined consume of Environment<CGFloat?>.Content(v4, v20, v5);
    outlined consume of Environment<Color?>.Content(v23, v12);
    outlined consume of Environment<Bool>.Content(v14, v8);

    swift_release();
    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  _QWORD *Value;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  id v10;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
    Value = (_QWORD *)AGGraphGetValue();
    v4 = (void *)Value[2];
    v5 = (void *)Value[6];
    v6 = (void *)Value[7];
    swift_bridgeObjectRetain();
    v7 = v5;
    v8 = v6;
    swift_retain();
    swift_retain();
    v9 = v4;
    AGGraphClearUpdate();
    v10 = *(id *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x78));
    objc_msgSend(v7, sel_bounds);
    objc_msgSend(v10, sel_frameForAlignmentRect_);
    objc_msgSend(v10, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    swift_bridgeObjectRelease();
    swift_release();
    return (double *)swift_release();
  }
  return result;
}

{
  double *result;
  void *v3;
  _QWORD *v4;
  id v5;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    v3 = *(void **)(AGGraphGetValue() + 8);
    swift_bridgeObjectRetain();
    v4 = v3;
    AGGraphClearUpdate();
    v5 = *(id *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78));
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v5, sel_frameForAlignmentRect_);
    objc_msgSend(v5, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  char *v4;
  uint64_t v5;
  void *v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  _BYTE v18[72];
  char *v19;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  AGGraphClearUpdate();
  v4 = v19;
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v19) + 0x78);
  v6 = *(void **)&v19[v5];
  result = (double *)objc_msgSend(v6, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = result;
  result = (double *)objc_msgSend(v6, sel_view);
  if (result)
  {
    v8 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    objc_msgSend(v7, sel_setFrame_, v10, v12, v14, v16);
    v17 = *(id *)&v4[v5];
    BridgedNavigationView._identifiedViewTree(in:)(v17, a1);

    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double *result;
  uint64_t Value;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  uint64_t v23;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  AGGraphClearUpdate();
  v9 = *(_QWORD **)&v6[*(int *)(v3 + 36)];
  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x78);
  v11 = *(void **)((char *)v9 + v10);
  result = (double *)objc_msgSend(v11, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v12 = result;
  result = (double *)objc_msgSend(v11, sel_view);
  if (result)
  {
    v13 = result;
    objc_msgSend(v9, sel_bounds);
    objc_msgSend(v13, sel_frameForAlignmentRect_);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v21 = v20;

    objc_msgSend(v12, sel_setFrame_, v15, v17, v19, v21);
    v22 = *(id *)((char *)v9 + v10);
    UITabBarController.identifiedViewTree.getter(a1);

    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  id v8;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    Value = AGGraphGetValue();
    v4 = *(void **)(Value + 40);
    v5 = *(void **)(Value + 48);
    swift_retain();
    swift_retain();
    v6 = v4;
    v7 = v5;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    v8 = *(id *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    objc_msgSend(v6, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    objc_msgSend(v8, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    swift_release();
    swift_release();
    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  void *v3;
  _QWORD *v4;
  id v5;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    v3 = *(void **)(AGGraphGetValue() + 16);
    swift_retain();
    v4 = v3;
    AGGraphClearUpdate();
    v5 = *(id *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78));
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v5, sel_frameForAlignmentRect_);
    objc_msgSend(v5, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return (double *)swift_release();
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  id v14;
  _OWORD v15[11];
  _QWORD *v16;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    Value = AGGraphGetValue();
    v4 = *(_OWORD *)(Value + 48);
    v6 = *(_OWORD *)Value;
    v5 = *(_OWORD *)(Value + 16);
    v15[2] = *(_OWORD *)(Value + 32);
    v15[3] = v4;
    v15[0] = v6;
    v15[1] = v5;
    v7 = *(_OWORD *)(Value + 112);
    v9 = *(_OWORD *)(Value + 64);
    v8 = *(_OWORD *)(Value + 80);
    v15[6] = *(_OWORD *)(Value + 96);
    v15[7] = v7;
    v15[4] = v9;
    v15[5] = v8;
    v11 = *(_OWORD *)(Value + 144);
    v10 = *(_OWORD *)(Value + 160);
    v12 = *(_OWORD *)(Value + 128);
    v16 = *(_QWORD **)(Value + 176);
    v15[9] = v11;
    v15[10] = v10;
    v15[8] = v12;
    outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v15);
    AGGraphClearUpdate();
    v13 = v16;
    v14 = *(id *)((char *)v16 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v16) + 0x78));
    objc_msgSend(v13, sel_bounds);
    objc_msgSend(v14, sel_frameForAlignmentRect_);
    objc_msgSend(v14, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v15);
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BYTE v16[368];
  _QWORD *v17;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  AGGraphClearUpdate();
  v4 = v17;
  v5 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
  result = (double *)objc_msgSend(v5, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  result = (double *)objc_msgSend(v5, sel_view);
  if (result)
  {
    v7 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v15 = v14;

    objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BYTE v16[176];
  _QWORD *v17;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  AGGraphClearUpdate();
  v4 = v17;
  v5 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
  result = (double *)objc_msgSend(v5, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  result = (double *)objc_msgSend(v5, sel_view);
  if (result)
  {
    v7 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v15 = v14;

    objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  id v8;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    Value = AGGraphGetValue();
    v4 = *(void **)(Value + 16);
    v5 = *(void **)(Value + 24);
    swift_bridgeObjectRetain();
    v6 = v4;
    v7 = v5;
    AGGraphClearUpdate();
    v8 = *(id *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    objc_msgSend(v6, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    objc_msgSend(v8, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BYTE v16[192];
  _QWORD *v17;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  AGGraphClearUpdate();
  v4 = v17;
  v5 = *(void **)((char *)v17 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78));
  result = (double *)objc_msgSend(v5, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  result = (double *)objc_msgSend(v5, sel_view);
  if (result)
  {
    v7 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v15 = v14;

    objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double *result;
  uint64_t Value;
  _QWORD *v9;
  void *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  AGGraphClearUpdate();
  v9 = *(_QWORD **)&v6[*(int *)(v3 + 36)];
  v10 = *(void **)((char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x78));
  result = (double *)objc_msgSend(v10, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = result;
  result = (double *)objc_msgSend(v10, sel_view);
  if (result)
  {
    v12 = result;
    objc_msgSend(v9, sel_bounds);
    objc_msgSend(v12, sel_frameForAlignmentRect_);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    objc_msgSend(v11, sel_setFrame_, v14, v16, v18, v20);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  id v8;

  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>(0);
    Value = AGGraphGetValue();
    v4 = *(void **)(Value + 48);
    v5 = *(void **)(Value + 56);
    swift_retain();
    swift_retain();
    v6 = v4;
    v7 = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    v8 = *(id *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x78));
    objc_msgSend(v6, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    objc_msgSend(v8, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (double *)swift_release();
  }
  return result;
}

double *specialized PlatformViewIdentifiedViews.value.getter@<X0>(uint64_t (*a1)(_QWORD)@<X1>, void (*a2)(uint64_t, char *)@<X2>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double *result;
  uint64_t Value;
  _QWORD *v13;
  id v14;
  uint64_t v15;

  v7 = a1(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v15 - v9;
  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    a2(Value, v10);
    AGGraphClearUpdate();
    v13 = *(_QWORD **)&v10[*(int *)(v7 + 36)];
    v14 = *(id *)((char *)v13 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v13) + 0x78));
    objc_msgSend(v13, sel_bounds);
    objc_msgSend(v14, sel_frameForAlignmentRect_);
    objc_msgSend(v14, sel_setFrame_);

    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_BYTE *)(a4 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)a3(v10);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.keyPressHandlers : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

uint64_t specialized PlatformArchivedDisplayList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory);
}

uint64_t specialized PlatformArchivedDisplayList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  DisplayList.Version.init(forUpdate:)();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 40) = a4(0);
  *(_QWORD *)(v7 + 48) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a5, a4, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>.Factory);
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v8 = swift_retain();
  MEMORY[0x18D75BE3C](v8);
  DisplayList.Item.init(_:frame:identity:version:)();
  outlined copy of DisplayList.Item.Value(v10, v11);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v10, v11);
}

void specialized RemoteSheetContainerVCWriter.value.getter(uint64_t a1@<X8>)
{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  _BYTE v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(*(_QWORD *)(Value + 80) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 80)) + 0x78));
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v12 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v4 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 0;
  }
  else
  {
    v11 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v5 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v9, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v6 = v10;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  _BYTE v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(*(_QWORD *)(Value + 56) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 56)) + 0x78));
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v12 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v4 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 0;
  }
  else
  {
    v11 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v5 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v9, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v6 = v10;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, a1);
}

{
  uint64_t Value;
  id v3;
  int v4;
  _BYTE v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  v3 = *(id *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x78));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v7 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v8, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v6 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v4 = v9;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, a1);
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, a1);
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  _BYTE v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(*(_QWORD *)(Value + 88) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 88)) + 0x78));
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v12 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v4 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 0;
  }
  else
  {
    v11 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v5 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v9, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v6 = v10;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, a1);
}

{
  uint64_t Value;
  id v3;
  int v4;
  _BYTE v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  v3 = *(id *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x78));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v7 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v8, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v6 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v4 = v9;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, a1);
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, a1);
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  _BYTE v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(*(_QWORD *)(Value + 40) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 40)) + 0x78));
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v12 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v4 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 0;
  }
  else
  {
    v11 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v5 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v9, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v6 = v10;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, a1);
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  _BYTE v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
  Value = AGGraphGetValue();
  v3 = *(void **)(*(_QWORD *)(Value + 176) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 176)) + 0x78));
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v12 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v4 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 0;
  }
  else
  {
    v11 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v5 = v3;
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v10 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v9, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v6 = v10;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  _BYTE v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  v3 = *(id *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x78));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v7 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v8, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v6 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v4 = v9;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  _BYTE v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  v3 = *(id *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x78));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v7 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v8, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v6 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v4 = v9;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, a1);
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (void (*)(uint64_t, _BYTE *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (void (*)(_BYTE *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, a1);
}

{
  uint64_t Value;
  id v3;
  int v4;
  _BYTE v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  v3 = *(id *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x78));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  v7 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v8, a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v6 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v4 = v9;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v8, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, a1);
}

void specialized RemoteSheetContainerVCWriter.value.getter(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  void *v4;
  id v5;
  id v6;
  int v7;
  id v8;
  _BYTE v9[16];
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;

  a1(0);
  Value = AGGraphGetValue();
  v4 = *(void **)(*(_QWORD *)(Value + 8) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 8)) + 0x78));
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = -1;
  v13 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v5 = v4;
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v11 = 0;
  }
  else
  {
    v12 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v8 = v4;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v6 = v4;
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v11 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v10, a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v7 = v11;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v7 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v10 = AGCreateWeakAttribute();
    v9[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v4;
  id v5;
  id v6;
  int v7;
  id v8;
  _BYTE v9[16];
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;

  a1(0);
  Value = AGGraphGetValue();
  v4 = *(void **)(*(_QWORD *)(Value + 16) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 16)) + 0x78));
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = -1;
  v13 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v5 = v4;
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v11 = 0;
  }
  else
  {
    v12 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v8 = v4;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v6 = v4;
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v11 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v10, a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v7 = v11;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v7 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v10 = AGCreateWeakAttribute();
    v9[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v4;
  id v5;
  id v6;
  int v7;
  id v8;
  _BYTE v9[16];
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;

  a1(0);
  Value = AGGraphGetValue();
  v4 = *(void **)(*(_QWORD *)(Value + 48) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(Value + 48)) + 0x78));
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = -1;
  v13 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    v5 = v4;
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v11 = 0;
  }
  else
  {
    v12 = &unk_1EDF65B50;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      v8 = v4;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v6 = v4;
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v11 = 1;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v10, a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v7 = v11;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v7 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v10 = AGCreateWeakAttribute();
    v9[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

void specialized RemoteSheetContainerVCWriter.value.getter(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(uint64_t, _BYTE *)@<X1>, void (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t Value;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  uint64_t v18;
  unsigned __int8 v19;
  void *v20;
  void *v21;

  v7 = a1(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v17[-v9];
  Value = AGGraphGetValue();
  a2(Value, v10);
  v12 = *(_QWORD **)&v10[*(int *)(v7 + 36)];
  v13 = *(id *)((char *)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0x78));
  a3(v10);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = -1;
  v21 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    v14 = swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula(v14, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a4, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v19 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v18, a4, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v20 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    v15 = swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula(v15, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a4, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v19 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a4, (uint64_t)&v18, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v16 = v19;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v18, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v16 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v18 = AGCreateWeakAttribute();
    v17[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

void specialized RemoteSheetContainerVCWriter.value.getter(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t Value;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[16];
  uint64_t v15;
  unsigned __int8 v16;
  void *v17;
  void *v18;

  v4 = a1(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v14[-v6];
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v7, a1);
  v9 = *(_QWORD **)&v7[*(int *)(v4 + 36)];
  v10 = *(id *)((char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x78));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, a1);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = -1;
  v18 = &unk_1EDF8DAC8;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    v11 = swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula(v11, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v16 = 0;
LABEL_5:
    outlined init with take of Image.Resolved?((uint64_t)&v15, a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v17 = &unk_1EDF65B50;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    v12 = swift_unknownObjectWeakAssign();
    outlined init with take of TableCellFormula(v12, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    outlined destroy of AccessibilityTableContext?(a2, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v16 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v15, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v13 = v16;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v15, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v13 == 255 || !swift_weakLoadStrong())
  {

  }
  else
  {
    v15 = AGCreateWeakAttribute();
    v14[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

uint64_t specialized CommandGroup.MakeList.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CommandsList.Item(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>);
  outlined init with take of TableCellFormula((uint64_t)v3, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(_QWORD *)&v8[*(int *)(v4 + 20)] = v13[1];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>, type metadata accessor for CommandsList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_187BF9830;
  outlined init with take of TableCellFormula((uint64_t)v8, v11 + v10, type metadata accessor for CommandsList.Item);
  return v11;
}

uint64_t specialized MakeRepresentable.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  _QWORD *Value;
  uint64_t v5;
  id v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t result;
  _BYTE v17[64];
  _OWORD v18[2];
  uint64_t v19;
  char v20;

  v2 = BYTE4(a1);
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for UICollectionViewListCoordinator);
  Value = (_QWORD *)AGGraphGetValue();
  v5 = *Value + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*Value) + 0x100);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 8))
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    MEMORY[0x18D75B9C8](v18);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
  }
  else
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v20 = -1;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SelectionManagerBox<AnyHashable>?);
  v6 = *(id *)AGGraphGetValue();
  v7 = AGCreateWeakAttribute();
  v8 = v7;
  v9 = HIDWORD(v7);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v15 = HIDWORD(v13);
  result = AGCreateWeakAttribute();
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v2 & 1;
  *(_DWORD *)(a2 + 12) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 28) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 36) = result;
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance CustomizableURLDocumentViewControllerRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CustomizableURLDocumentViewControllerRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance CustomizableURLDocumentViewControllerRepresentable()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance NavigationSplitRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance NavigationSplitRepresentable()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized ArchivableDisplayList.value.getter(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = swift_allocObject();
  AGGraphGetValue();
  v5 = MEMORY[0x18D75BE3C]();
  v7 = v6;
  *(_QWORD *)(v4 + 40) = type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
  *(_QWORD *)(v4 + 48) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  *(_DWORD *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = v7;
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v8 = swift_retain();
  MEMORY[0x18D75BE3C](v8);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v10, v11);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v10, v11);
}

{
  _QWORD *v4;
  uint64_t Value;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = (_QWORD *)swift_allocObject();
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)Value;
  v7 = *(_BYTE *)(Value + 8);
  AGGraphGetValue();
  v8 = outlined copy of Environment<Bool>.Content(v6, v7);
  v9 = MEMORY[0x18D75BE3C](v8);
  v11 = v10;
  v4[5] = type metadata accessor for ArchivableFactory<InvalidatableContentModifier>();
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<InvalidatableContentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<InvalidatableContentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  v12 = swift_allocObject();
  v4[2] = v12;
  *(_QWORD *)(v12 + 16) = v6;
  *(_BYTE *)(v12 + 24) = v7;
  *(_DWORD *)(v12 + 28) = a1;
  *(double *)(v12 + 32) = v9;
  *(_QWORD *)(v12 + 40) = v11;
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v13 = swift_retain();
  MEMORY[0x18D75BE3C](v13);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v15, v16);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v15, v16);
}

{
  _QWORD *v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = (_QWORD *)swift_allocObject();
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)Value;
  v7 = *(_QWORD *)(Value + 8);
  v8 = *(_BYTE *)(Value + 16);
  v9 = *(_QWORD *)(Value + 40);
  v10 = *(_BYTE *)(Value + 48);
  AGGraphGetValue();
  v19 = *(_OWORD *)(Value + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  v11 = (id)v19;
  v12 = swift_retain();
  v13 = MEMORY[0x18D75BE3C](v12);
  v15 = v14;
  v4[5] = type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>();
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableButtonAppIntentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  v16 = swift_allocObject();
  v4[2] = v16;
  *(_QWORD *)(v16 + 16) = v6;
  *(_QWORD *)(v16 + 24) = v7;
  *(_BYTE *)(v16 + 32) = v8;
  *(_OWORD *)(v16 + 40) = v19;
  *(_QWORD *)(v16 + 56) = v9;
  *(_BYTE *)(v16 + 64) = v10;
  *(_DWORD *)(v16 + 68) = a1;
  *(double *)(v16 + 72) = v13;
  *(_QWORD *)(v16 + 80) = v15;
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v17 = swift_retain();
  MEMORY[0x18D75BE3C](v17);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v20, v21);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v20, v21);
}

{
  _QWORD *v4;
  uint64_t Value;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = (_QWORD *)swift_allocObject();
  Value = AGGraphGetValue();
  v6 = *(_BYTE *)Value;
  v7 = *(_QWORD *)(Value + 8);
  v8 = *(_QWORD *)(Value + 16);
  v9 = *(_QWORD *)(Value + 24);
  v10 = *(_BYTE *)(Value + 32);
  v11 = *(_QWORD *)(Value + 56);
  v20 = *(_BYTE *)(Value + 64);
  AGGraphGetValue();
  swift_retain();
  v21 = *(_OWORD *)(Value + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
  v12 = (id)v21;
  v13 = swift_retain();
  v14 = MEMORY[0x18D75BE3C](v13);
  v16 = v15;
  v4[5] = type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>();
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableToggleAppIntentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  v17 = swift_allocObject();
  v4[2] = v17;
  *(_BYTE *)(v17 + 16) = v6;
  *(_QWORD *)(v17 + 24) = v7;
  *(_QWORD *)(v17 + 32) = v8;
  *(_QWORD *)(v17 + 40) = v9;
  *(_BYTE *)(v17 + 48) = v10;
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 72) = v11;
  *(_BYTE *)(v17 + 80) = v20;
  *(_DWORD *)(v17 + 84) = a1;
  *(double *)(v17 + 88) = v14;
  *(_QWORD *)(v17 + 96) = v16;
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v18 = swift_retain();
  MEMORY[0x18D75BE3C](v18);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v22, v23);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v22, v23);
}

{
  _QWORD *v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = (_QWORD *)swift_allocObject();
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)Value;
  v7 = *(_QWORD *)(Value + 8);
  v8 = *(_BYTE *)(Value + 16);
  v9 = *(_QWORD *)(Value + 24);
  AGGraphGetValue();
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  v10 = swift_bridgeObjectRetain();
  v11 = MEMORY[0x18D75BE3C](v10);
  v13 = v12;
  v4[5] = type metadata accessor for ArchivableFactory<ArchivableAccessibilityViewModifier>();
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityViewModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityViewModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  v14 = swift_allocObject();
  v4[2] = v14;
  *(_QWORD *)(v14 + 16) = v6;
  *(_QWORD *)(v14 + 24) = v7;
  *(_BYTE *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v9;
  *(_DWORD *)(v14 + 48) = a1;
  *(double *)(v14 + 56) = v11;
  *(_QWORD *)(v14 + 64) = v13;
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v15 = swift_retain();
  MEMORY[0x18D75BE3C](v15);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v17, v18);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v17, v18);
}

{
  _QWORD *v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = (_QWORD *)swift_allocObject();
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)Value;
  v7 = *(_QWORD *)(Value + 8);
  v8 = *(_BYTE *)(Value + 16);
  v9 = *(_QWORD *)(Value + 24);
  AGGraphGetValue();
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  v10 = swift_bridgeObjectRetain();
  v11 = MEMORY[0x18D75BE3C](v10);
  v13 = v12;
  v4[5] = type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>();
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityActionModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  v14 = swift_allocObject();
  v4[2] = v14;
  *(_QWORD *)(v14 + 16) = v6;
  *(_QWORD *)(v14 + 24) = v7;
  *(_BYTE *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v9;
  *(_DWORD *)(v14 + 48) = a1;
  *(double *)(v14 + 56) = v11;
  *(_QWORD *)(v14 + 64) = v13;
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v15 = swift_retain();
  MEMORY[0x18D75BE3C](v15);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v17, v18);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v17, v18);
}

uint64_t specialized ArchivableDisplayList.value.getter@<X0>(int a1@<W0>, unint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  return specialized ArchivableDisplayList.value.getter(a1, a2, a3, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>, &lazy protocol witness table cache variable for type ArchivableFactory<ArchivablePlaybackButtonViewModifier> and conformance ArchivableFactory<A>, a4);
}

{
  return specialized ArchivableDisplayList.value.getter(a1, a2, a3, type metadata accessor for ArchivableLinkModifier, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableLinkModifier>, &lazy protocol witness table cache variable for type ArchivableFactory<ArchivableLinkModifier> and conformance ArchivableFactory<A>, a4);
}

uint64_t specialized ArchivableDisplayList.value.getter@<X0>(int a1@<W0>, unint64_t a2@<X2>, int a3@<W3>, uint64_t (*a4)(_QWORD)@<X4>, uint64_t (*a5)(uint64_t)@<X5>, unint64_t *a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *boxed_opaque_existential_1;
  double *v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  int v48;
  int v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int16 v56;
  char v57;
  int v58;

  v33 = a6;
  v38 = a3;
  v39 = a7;
  v37 = a2;
  v10 = HIDWORD(a2);
  v11 = a4(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v33 - v13;
  if (*MEMORY[0x1E0CFED28] == (_DWORD)v10)
  {
    DisplayList.init()();
    v36 = v50;
    v35 = WORD4(v50);
    v34 = BYTE10(v50);
  }
  else
  {
    Value = AGGraphGetValue();
    v16 = *(_QWORD *)Value;
    v35 = *(unsigned __int16 *)(Value + 8);
    v34 = *(unsigned __int8 *)(Value + 10);
    v36 = v16;
    swift_bridgeObjectRetain();
  }
  v17 = (uint64_t *)swift_allocObject();
  v18 = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v18, (uint64_t)v14, a4);
  v19 = (__int128 *)AGGraphGetValue();
  v20 = v19[1];
  v50 = *v19;
  v51 = v20;
  v21 = MEMORY[0x18D75BE3C]();
  v23 = v22;
  v24 = a5(0);
  v17[5] = v24;
  v17[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v33, a5, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17 + 2);
  outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)boxed_opaque_existential_1, a4);
  *(_DWORD *)((char *)boxed_opaque_existential_1 + *(int *)(v24 + 52)) = a1;
  v26 = (double *)((char *)boxed_opaque_existential_1 + *(int *)(v24 + 56));
  *v26 = v21;
  *((_QWORD *)v26 + 1) = v23;
  v50 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v50 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  *(_QWORD *)&v40 = v17;
  *((_QWORD *)&v40 + 1) = 0x4000000C00000000;
  *(_QWORD *)&v41 = v36;
  BYTE10(v41) = v34;
  WORD4(v41) = v35;
  v27 = (__int128 *)AGGraphGetValue();
  v28 = v27[1];
  v50 = *v27;
  v51 = v28;
  v29 = swift_retain();
  MEMORY[0x18D75BE3C](v29);
  v49 = a1;
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v40) = v38;
  DisplayList.Item.canonicalize(options:)();
  v30 = v53;
  v31 = v54;
  v40 = v50;
  v41 = v51;
  v42 = v52;
  v43 = v53;
  v44 = v54;
  v45 = v55;
  v47 = v57;
  v46 = v56;
  v48 = v58;
  outlined copy of DisplayList.Item.Value(v53, v54);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v30, v31);
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance BridgedNavigationView(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BridgedNavigationView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance BridgedNavigationView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

_QWORD *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unint64_t lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsupportedDisplayList and conformance UnsupportedDisplayList;
  if (!lazy protocol witness table cache variable for type UnsupportedDisplayList and conformance UnsupportedDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UnsupportedDisplayList, &unk_1E1B18C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedDisplayList and conformance UnsupportedDisplayList);
  }
  return result;
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(id *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(__int128 *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(_QWORD *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unint64_t *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(id *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(__int128 *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(int *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ViewResponder]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in TooltipModifier.TransformPlatformItems.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  int v2;
  uint64_t v3;
  void (*v4)(char **);
  uint64_t Value;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;

  v1 = *a1;
  v2 = a1[1];
  AGGraphGetValue();
  v3 = 0;
  v4 = (void (*)(char **))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0 && v1 != *MEMORY[0x1E0CFED28])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v7 = *(void **)(Value + 8);
    v8 = *(_BYTE *)(Value + 16);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v6;
    *(_QWORD *)(v3 + 24) = v7;
    *(_BYTE *)(v3 + 32) = v8;
    *(_DWORD *)(v3 + 36) = v1;
    *(_DWORD *)(v3 + 40) = v2;
    outlined copy of AccessibilityAttachment.Tree(v6, v7, v8);
    v4 = partial apply for closure #2 in PlatformItemListTransform.value.getter;
  }
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t (*v6)(uint64_t);
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)AGGraphGetValue();
  if (v3 < 0)
  {
    v5 = 0;
    v6 = (unint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  else
  {
    v4 = a1[1];
    v5 = swift_allocObject();
    *(_DWORD *)(v5 + 16) = v2;
    *(_DWORD *)(v5 + 20) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = partial apply for closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter;
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in AccessibilityAttachment.DeferredTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in BarItemModifier.Transform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ViewIdentity : ConfirmationDialog]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v2;
  uint64_t v3;
  uint64_t Value;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *a1;
  v3 = swift_allocObject();
  Value = AGGraphGetValue();
  v5 = *(_OWORD *)(Value + 8);
  v6 = *(_OWORD *)(Value + 24);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)Value;
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + 40) = v6;
  v13 = *(_QWORD *)(a1 + 1);
  AGGraphGetValue();
  v7 = swift_retain();
  *(double *)&v8 = MEMORY[0x18D755E9C](v7);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v9, v8));
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v3;
  *(_DWORD *)(v10 + 24) = v2;
  *(_QWORD *)(v10 + 28) = v13;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in FocusableFillerBoundsTransform.value.getter;
  *(_QWORD *)(v11 + 24) = v10;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey, (void (*)(_QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey, (void (*)(_QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey, (void (*)(_QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD))
{
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  specialized _TraitWritingTableRowModifier.AddTrait.value.getter(*a1, a3, a4, a5, a6, v7);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  a3(v4);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD, double), void (*a5)(uint64_t, char *), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v9 = a3(0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)v16 - v12;
  a4(0, v11);
  Value = AGGraphGetValue();
  a5(Value, v13);
  AGGraphSetOutputValue();
  return a6(v13);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t, char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Value;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = a3(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v12 - v8;
  Value = AGGraphGetValue();
  a4(Value, v9);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, a3);
}

_QWORD *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  __int128 *Value;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v15[7];
  _QWORD __dst[39];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int8x16_t __src[17];
  _QWORD v40[40];

  v40[39] = *MEMORY[0x1E0C80C00];
  Value = (__int128 *)AGGraphGetValue();
  v1 = Value[1];
  v17 = *Value;
  v18 = v1;
  v3 = Value[4];
  v2 = Value[5];
  v4 = Value[3];
  v19 = Value[2];
  v20 = v4;
  v21 = v3;
  v22 = v2;
  v5 = *((_QWORD *)&v18 + 1);
  v6 = v19;
  v7 = BYTE8(v19);
  v23 = v17;
  v24 = v18;
  v25 = *((_QWORD *)&v18 + 1);
  v26 = v19;
  v27 = WORD4(v19);
  v28 = v4;
  v29 = v3;
  v30 = v2;
  v31 = v17;
  v32 = v18;
  v33 = *((_QWORD *)&v18 + 1);
  v34 = v19;
  v35 = WORD4(v19);
  v36 = v4;
  v37 = v3;
  v38 = v2;
  outlined retain of ToggleStyleConfiguration(&v17);
  specialized AccessibilityToggleModifier.body(content:)((uint64_t)&v23, __src);
  outlined release of ToggleStyleConfiguration(&v17);
  v40[0] = v5;
  v40[1] = v6;
  LOBYTE(v40[2]) = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v15);
  v8 = v15[0];
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = v8;
  memcpy(__dst, __src, 0x110uLL);
  v10 = (_OWORD *)swift_allocObject();
  v11 = v20;
  v10[3] = v19;
  v10[4] = v11;
  v12 = v22;
  v10[5] = v21;
  v10[6] = v12;
  v13 = v18;
  v10[1] = v17;
  v10[2] = v13;
  *(_DWORD *)((char *)&__dst[34] + 1) = *(_DWORD *)v15;
  HIDWORD(__dst[34]) = *(_DWORD *)&v15[3];
  LOBYTE(__dst[34]) = 1;
  __dst[35] = partial apply for closure #1 in View.platformItemToggleState(_:);
  __dst[36] = v9;
  __dst[37] = partial apply for closure #2 in ResolvedToggleStyle.body.getter;
  __dst[38] = v10;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>();
  outlined retain of ToggleStyleConfiguration(&v17);
  AGGraphSetOutputValue();
  memcpy(v40, __dst, 0x138uLL);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(v40);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD, double), uint64_t (*a5)(uint64_t, char *), void (*a6)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Value;
  uint64_t v20;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v10 = a3(0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)v22 - v13;
  v15 = a4(0, v12);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v22 - v17;
  Value = AGGraphGetValue();
  v20 = a5(Value, v14);
  a6(v20);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, a3);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))a4);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  a3(v4, *a1, a1[1]);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0x100000000;
  if (!*((_BYTE *)a1 + 4))
    v1 = 0;
  TableShowsFirstColumnOnlyModifier.Child.value.getter(v1 | *a1, &v3);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))specialized CommandGroup.MakeList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))SearchToolbarItem.ChildEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))ClarityUIEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))PlatformItemListTextRepresentable.PlatformRepresentation.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))PlatformItemListImageRepresentable.PlatformRepresentation.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD))
{
  a3(*a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), unint64_t *a4, uint64_t a5)
{
  a3(a1, a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(id *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = *(unsigned int *)a1;
  v2 = a1[1];
  v3 = UpdatedScrollViewContainer.value.getter(v1, v2);

  type metadata accessor for HostingScrollView.PlatformContainer();
  AGGraphSetOutputValue();

}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_DWORD *a1)
{
  id v1;
  _BYTE v3[8];
  _BYTE v4[8];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*a1 == *MEMORY[0x1E0CFED28])
  {
    v1 = 0;
  }
  else
  {
    type metadata accessor for HostingScrollView();
    v1 = *(id *)(*(_QWORD *)AGGraphGetValue() + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  }
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  outlined init with take of TableCellFormula((uint64_t)v3, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIView>);
  type metadata accessor for WeakBox<UIView>();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIView>);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  AccessibilityCollectionViewTableAttachment.value.getter(a2, a3, a4, v5);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1)
{
  uint64_t v1;
  id v2[7];

  v2[6] = *(id *)MEMORY[0x1E0C80C00];
  v1 = 0x100000000;
  if (!*((_BYTE *)a1 + 4))
    v1 = 0;
  specialized MakeRepresentable.value.getter(v1 | *a1, (uint64_t)v2);
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ListRepresentable);
  AGGraphSetOutputValue();

}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t, char *), uint64_t (*a5)(char *))
{
  _QWORD v6[22];

  v6[21] = *MEMORY[0x1E0C80C00];
  specialized PlatformViewIdentifiedViews.value.getter(a3, a4, a5, (uint64_t)v6);
  AGGraphSetOutputValue();
  return outlined destroy of _IdentifiedViewTree((uint64_t)v6);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v6;
  _BYTE v8[16];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v6 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v8, a3);
  a4(v9, v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, a3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return outlined destroy of AccessibilityTableContext?((uint64_t)v9, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD))
{
  _QWORD v4[22];

  v4[21] = *MEMORY[0x1E0C80C00];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return outlined destroy of _IdentifiedViewTree((uint64_t)v4);
}

{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  a3(v4, *a1);
  return AGGraphSetOutputValue();
}

{
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t))
{
  _BYTE v9[16];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, a3);
  a5(v10, a4);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, a3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return outlined destroy of AccessibilityTableContext?((uint64_t)v10, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a3, a4, a5, MEMORY[0x1E0CE5CA0]);
  PreferenceValueAttribute.value.getter();
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  a3(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3(*a1);
  v5 = v4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v5;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1)
{
  _QWORD v2[4];
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  outlined init with copy of ReplacedRootDismissModifier.ChildEnvironment(a1, v2);
  ReplacedRootDismissModifier.ChildEnvironment.value.getter(v3);
  outlined destroy of ReplacedRootDismissModifier.ChildEnvironment((uint64_t)v2);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  a3(v4, *(_QWORD *)a1, *(unsigned int *)(a1 + 8));
  return AGGraphSetOutputValue();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD))
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v6 = *a1;
  v7 = v3;
  v8[0] = a1[2];
  *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)a1 + 44);
  a3(&v5);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2, void (*a3)(_QWORD))
{
  a3(*a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unint64_t *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = SearchToolbarItem.SearchTransform.value.getter(*a1);
  v3 = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.SearchItem?);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(id *a1)
{
  id v1;

  v1 = *a1;
  AlwaysOnTimelinePreferenceWriter.value.getter((uint64_t)v1);

  type metadata accessor for [BLSAlwaysOnTimeline]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  __int128 v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (id *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  v7 = *a1;
  v8 = v4;
  v9 = *(__int128 *)((char *)a1 + 24);
  AuxiliaryViewMetadataPreferenceWriter.value.getter(v5);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (id *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *(__int128 *)((char *)a1 + 24);
  WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter.value.getter(v5);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

void specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt32 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  _OWORD v28[11];
  _OWORD v29[11];

  v26 = a1;
  v7 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (Swift::UInt32 *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - v14;
  if (!a3)
    return;
  if (a4[2] == a3)
  {
    swift_retain();
    return;
  }
  type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>();
  v27 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v25 = a2;
  if (a2 < 1)
    v16 = 0;
  else
    v16 = *v26;
  v17 = 0;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_25;
    }
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_29;
    if (v20 >= v25)
      return;
    v21 = v26[v20];
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v25)
        return;
      v21 = v26[v17];
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v25)
          return;
        v21 = v26[v17];
        if (!v21)
          break;
      }
    }
LABEL_24:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_25:
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4[6] + *(_QWORD *)(v8 + 72) * v19, (uint64_t)v15, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(a4[7] + 176 * v19, (uint64_t)v29);
    outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v11, type metadata accessor for DisplayList.HostedViewState.Key);
    v28[8] = v29[8];
    v28[9] = v29[9];
    v28[10] = v29[10];
    v28[4] = v29[4];
    v28[5] = v29[5];
    v28[6] = v29[6];
    v28[7] = v29[7];
    v28[0] = v29[0];
    v28[1] = v29[1];
    v28[2] = v29[2];
    v28[3] = v29[3];
    specialized _NativeDictionary._unsafeInsertNew(key:value:)(v11, (uint64_t)v28, v27);
    if (__OFSUB__(a3--, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (!a3)
      return;
  }
  v22 = v20 + 3;
  if (v22 >= v25)
    return;
  v21 = v26[v22];
  if (v21)
  {
    v17 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v25)
      return;
    v21 = v26[v17];
    ++v22;
    if (v21)
      goto LABEL_24;
  }
LABEL_30:
  __break(1u);
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  unint64_t *v21;
  uint64_t v22;
  int64_t v23;
  _QWORD v25[2];
  uint64_t v26;

  v21 = (unint64_t *)result;
  v22 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v23 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v6 << 6);
LABEL_15:
    v16 = *(_QWORD *)(a3 + 56);
    v17 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v18 = v17[1];
    v25[0] = *v17;
    v25[1] = v18;
    v26 = *(_QWORD *)(v16 + 8 * v12);
    swift_retain();
    swift_retain();
    v19 = closure #1 in IncrementalLayoutViewCache.collect()((uint64_t)v25, &v26, a4);
    swift_release();
    result = swift_release();
    if (v4)
      return result;
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)v21 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v22++, 1);
      if (v13)
        goto LABEL_28;
    }
  }
  v13 = __OFADD__(v6++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v6 >= v23)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  v14 = *(_QWORD *)(v7 + 8 * v6);
  if (v14)
  {
LABEL_14:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_15;
  }
  v15 = v6 + 1;
  if (v6 + 1 >= v23)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_13;
  v15 = v6 + 2;
  if (v6 + 2 >= v23)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
LABEL_13:
    v6 = v15;
    goto LABEL_14;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v23)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v21, a2, v22, a3);
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_14;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v3 = v2;
  v15[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v11);
    bzero((char *)v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v12 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    v12 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13, v8, a1, a2);
    swift_release();
    MEMORY[0x18D760108](v13, -1, -1);
    swift_release_n();
  }
  return v12;
}

{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v11);
    bzero((char *)v17 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v17 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    v13 = v12;
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, v9);
    swift_retain();
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v14, v8, a1, a2);
    v13 = v15;
    swift_release();
    MEMORY[0x18D760108](v14, -1, -1);
    swift_release_n();
  }
  return v13;
}

uint64_t specialized ViewResponderFilter.init(inputs:view:)@<X0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  __int128 v18;

  type metadata accessor for UIViewResponder();
  v8 = swift_allocObject();
  v9 = specialized UIViewResponder.init()(v8);
  swift_release();
  v10 = _ViewInputs.animatedPosition()();
  v11 = _ViewInputs.animatedSize()();
  v12 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  v13 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v18 = *a1;
  swift_getKeyPath();
  v14 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  a3(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, (uint64_t)&protocol conformance descriptor for RepresentablePreferredFocusableViewInput<A>);
  result = PropertyList.subscript.getter();
  *(_DWORD *)a5 = a2;
  *(_DWORD *)(a5 + 4) = v10;
  *(_DWORD *)(a5 + 8) = v11;
  *(_DWORD *)(a5 + 12) = v12;
  *(_DWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v9;
  *(_DWORD *)(a5 + 32) = v14;
  *(_DWORD *)(a5 + 36) = v18;
  return result;
}

uint64_t sub_1875E122C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t _sSo6UIViewC7SwiftUIE7animate_7changes10completionyAC9AnimationV_yyXEyycSgtFZySb_SbtcfU_TA_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static UIView.animate(_:changes:completion:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t dispatch thunk of UIViewControllerRepresentable.makeUIViewController(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable.updateUIViewController(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable.makeCoordinator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable._identifiedViewTree(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of static UIViewControllerRepresentable._layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

_QWORD *initializeBufferWithCopyOfBuffer for UIViewControllerRepresentableContext(_QWORD *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = v9;
    a1 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v12[1] = v13[1];
    *(_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *v10 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  v10[1] = *(_QWORD *)(v9 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  _OWORD *v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  v9[1] = v10[1];
  swift_release();
  *(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIViewControllerRepresentableContext(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

void storeEnumTagSinglePayload for UIViewControllerRepresentableContext(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFEu)
    v7 = 2147483646;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1875E19A0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1875E1A20);
}

void sub_1875E19A8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1875E19B0);
  JUMPOUT(0x1875E1A20);
}

void sub_1875E19F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875E1A20);
}

void sub_1875E1A00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875E1A20);
}

uint64_t sub_1875E1A08@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x1875E1A20);
  if (a1 < 0x7FFFFFFE)
  {
    if (v4 <= 0x7FFFFFFE)
      JUMPOUT(0x1875E1A1CLL);
    JUMPOUT(0x1875E1A14);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

void *type metadata accessor for UnsupportedDisplayList()
{
  return &unk_1E1B18C08;
}

uint64_t sub_1875E1E88()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1875E1EB8()
{
  uint64_t v0;

  outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1875E1EE0()
{
  return swift_deallocObject();
}

uint64_t sub_1875E1EF0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

    swift_release();
  }
  return swift_deallocObject();
}

_QWORD *outlined release of ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[6];
  v3 = a1[7];
  v5 = a1[8];
  v4 = (void *)a1[9];
  v9 = a1[15];
  v10 = a1[14];
  v7 = (void *)a1[17];
  v8 = a1[16];
  v13 = a1[27];
  v14 = a1[26];
  v11 = (void *)a1[29];
  v12 = a1[28];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v5, v4);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v10, v9, v8, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v14, v13, v12, v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined init with copy of ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvedTextFieldStyle);
}

uint64_t outlined destroy of ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>);
}

void type metadata accessor for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>)
  {
    lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>);
  }
}

void type metadata accessor for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>)
  {
    lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>);
  }
}

uint64_t sub_1875E21B8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityAttachment.DeferredTransform.value.getter()
{
  closure #1 in AccessibilityAttachment.DeferredTransform.value.getter();
}

uint64_t sub_1875E21D0()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for GroupBox<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v8 = type metadata accessor for ModifiedContent();
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1875E22CC()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI4ViewPAAE36accessibilityShowsLargeContentVieweryQrAA013AccessibilityfgC8BehaviorOFyAA0ifgC4TreeOzcfU_TA_0(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.accessibilityShowsLargeContentViewer(_:)(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1875E22E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0[5])
  {
    swift_bridgeObjectRelease();
    if (v0[7])
    {
      swift_release();
      swift_release();
    }
    if (v0[10])
    {
      swift_release();
      swift_release();
      v1 = v0[12];
      if (v1)
      {
        if (v1 == 1)
          goto LABEL_10;
        swift_release();
      }
      if (v0[14])
        swift_release();
    }
  }
LABEL_10:
  if (v0[19])
  {
    swift_bridgeObjectRelease();
    if (v0[21])
    {
      swift_release();
      swift_release();
    }
    if (v0[24])
    {
      swift_release();
      swift_release();
      v2 = v0[26];
      if (v2)
      {
        if (v2 == 1)
          return swift_deallocObject();
        swift_release();
      }
      if (v0[28])
        swift_release();
    }
  }
  return swift_deallocObject();
}

double partial apply for closure #2 in SwipeActions.MakeValueTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in SwipeActions.MakeValueTransform.value.getter(a1, (__int128 *)(v1 + 16));
}

uint64_t outlined init with copy of ResolvedSearchFieldStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ResolvedSearchFieldStyle);
}

uint64_t outlined destroy of ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>);
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = type metadata accessor for _AnchorTransformModifier(a1, v2, (uint64_t)&type metadata for SharingActivityPickerPresentation.Key, (uint64_t)&protocol witness table for SharingActivityPickerPresentation.Key);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>);
  }
}

uint64_t sub_1875E2464()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AnchorTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in AnchorTransform.value.getter(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t))(v1 + 24));
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1875E2518()
{
  uint64_t *v0;

  outlined consume of SharingPickerSource(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19]);
  return swift_deallocObject();
}

double partial apply for closure #1 in SharingActivityPickerModifier.Child.value.getter(char **a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in SharingActivityPickerModifier.Child.value.getter(a1, a2, *(_BYTE *)(v2 + 16), (_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 160));
}

uint64_t outlined init with copy of ResolvedDatePickerStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ResolvedDatePickerStyle);
}

uint64_t outlined destroy of ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>);
}

void type metadata accessor for Binding<Date>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

uint64_t outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>);
}

void type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
}

uint64_t partial apply for specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

{
  uint64_t v0;

  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(_QWORD *)(v0 + 16), (void (*)(uint64_t, _QWORD))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>, &lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>);
}

uint64_t partial apply for implicit closure #4 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  return implicit closure #4 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

unint64_t lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityHostedViewBridgeTransform, &type metadata for AccessibilityHostedViewBridgeTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform);
  }
  return result;
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory);
  }
}

unint64_t lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation;
  if (!lazy protocol witness table cache variable for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableTransparentBackgroundMutation, &type metadata for EnableTransparentBackgroundMutation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation);
  }
  return result;
}

void type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>)
  {
    type metadata accessor for _UISceneBSActionHandler(255, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>);
  }
}

void type metadata accessor for WeakBox<_UIRemoteSheetContaining>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>)
  {
    type metadata accessor for _UISceneBSActionHandler(255, &lazy cache variable for type metadata for _UIRemoteSheetContaining);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>);
  }
}

uint64_t sub_1875E29C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.keyPressHandlers.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1875E29F8()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIViewController>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIViewController>)
  {
    v2 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIViewController>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPlatformViewModifier.PlatformViewAttachment, &type metadata for AccessibilityPlatformViewModifier.PlatformViewAttachment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)();
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<TextEditorTextView>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<TextEditorTextView>, (uint64_t (*)(uint64_t))type metadata accessor for TextEditorTextView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  }
}

uint64_t sub_1875E2F10()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t outlined init with copy of ResolvedTextEditorStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ResolvedTextEditorStyle);
}

uint64_t outlined destroy of ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>);
}

uint64_t partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(_QWORD *a1)
{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_187C304C0);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_187C304E0);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_187BFE310);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_187C39070);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_187C304D0);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_187C0CDF0);
}

{
  uint64_t v1;

  return specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), *(_WORD *)(v1 + 73), HIBYTE(*(_WORD *)(v1 + 73)), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_BYTE *)(v1 + 96));
}

uint64_t sub_1875E2F70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(_QWORD *a1, __n128 a2)
{
  uint64_t v2;

  return specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), *(_WORD *)(v2 + 73), HIBYTE(*(_WORD *)(v2 + 73)), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_BYTE *)(v2 + 96));
}

uint64_t objectdestroy_95Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return ((uint64_t (*)(int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())
                                        + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())))(v2);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>;
  if (!lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>);
  }
  return result;
}

void type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    v9[0] = &type metadata for TableDataSourceAdaptor;
    v9[1] = v6;
    v9[2] = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    v9[3] = lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>();
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for SelectionManagerBox<AnyHashable>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>?);
  }
}

uint64_t outlined init with copy of _TraitWritingTableRowModifier<DropOntoTraitKey>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1875E3380@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.fontModifiers.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1875E33B8()
{
  swift_bridgeObjectRetain();
  return EnvironmentValues.fontModifiers.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationOptionsKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationOptionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationVisibilityKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of BridgedPopUpButtonProvider(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BridgedPopUpButtonProvider(a2, a1);
  return a2;
}

uint64_t outlined destroy of BridgedPopUpButtonProvider(uint64_t a1)
{
  destroy for BridgedPopUpButtonProvider();
  return a1;
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  }
}

uint64_t sub_1875E3854()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_1875E38E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CallbacksGesture<PrimitiveButtonGestureCallbacks>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks, (uint64_t)&type metadata for PrimitiveButtonGestureCallbacks, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3140]);
    lazy protocol witness table accessor for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>();
    lazy protocol witness table accessor for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
  }
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonGestureCallbacks, &type metadata for PrimitiveButtonGestureCallbacks);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>;
  if (!lazy protocol witness table cache variable for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CallbacksGesture<PrimitiveButtonGestureCallbacks>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks, (uint64_t)&type metadata for PrimitiveButtonGestureCallbacks, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3140]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3150], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonGestureCore, &type metadata for PrimitiveButtonGestureCore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIPasteControl>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIPasteControl>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIPasteControl);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIPasteControl>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UISwitch>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISwitch>)
  {
    v2 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UISwitch);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISwitch>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UISlider>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISlider>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UISlider);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISlider>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIColorWell>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIColorWell>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIColorWell);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIColorWell>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UISegmentedControl>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISegmentedControl>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UISegmentedControl);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISegmentedControl>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentedControl.UISegmentedControl, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  }
}

void type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>)
  {
    lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>);
  }
}

void type metadata accessor for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>)
  {
    lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIActivityIndicatorView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIActivityIndicatorView>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIActivityIndicatorView);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIActivityIndicatorView>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
  }
}

uint64_t sub_1875E57EC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey>, (uint64_t)&type metadata for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t)&protocol witness table for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>)
  {
    lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>);
  }
}

void type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    v6 = type metadata accessor for CommandGroup(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>)
  {
    type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut, (uint64_t)&type metadata for HasKeyboardShortcut, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  }
}

void type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardShortcut?>, &lazy cache variable for type metadata for KeyboardShortcut?, (uint64_t)&type metadata for KeyboardShortcut, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Button<Text> and conformance Button<A>, lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>);
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  if (!*a2)
  {
    v10[0] = a3(255);
    v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE2E88]);
    v8 = MEMORY[0x18D75FF88](a1, v10, MEMORY[0x1E0CE76F8], 0);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TappableSpatialEvent>, MEMORY[0x1E0CE4E80], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    type metadata accessor for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>);
  }
}

void type metadata accessor for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>)
  {
    v0 = MEMORY[0x1E0CE4E80];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for RepeatGesture<TappableSpatialEvent>, MEMORY[0x1E0CE4E80], MEMORY[0x1E0CE1FF0]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, v0, MEMORY[0x1E0CE4E70], MEMORY[0x1E0CE3400]);
    lazy protocol witness table accessor for type RepeatGesture<TappableSpatialEvent> and conformance RepeatGesture<A>();
    lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type RepeatGesture<TappableSpatialEvent> and conformance RepeatGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RepeatGesture<TappableSpatialEvent> and conformance RepeatGesture<A>;
  if (!lazy protocol witness table cache variable for type RepeatGesture<TappableSpatialEvent> and conformance RepeatGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for RepeatGesture<TappableSpatialEvent>, MEMORY[0x1E0CE4E80], MEMORY[0x1E0CE1FF0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2000], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatGesture<TappableSpatialEvent> and conformance RepeatGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>;
  if (!lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, MEMORY[0x1E0CE4E80], MEMORY[0x1E0CE4E70], MEMORY[0x1E0CE3400]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3410], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TappableSpatialEvent>, MEMORY[0x1E0CE4E80], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

uint64_t sub_1875E5F14()
{
  return swift_deallocObject();
}

_BYTE *partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter()
{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter();
}

{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter();
}

uint64_t sub_1875E5F2C()
{
  return swift_deallocObject();
}

_BYTE *partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(_QWORD *a1)
{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(a1);
}

{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(a1);
}

uint64_t sub_1875E5F44()
{
  return swift_deallocObject();
}

uint64_t sub_1875E5F5C()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, MEMORY[0x1E0CE4EF0], (uint64_t)&type metadata for ScrollViewGeometry, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _CoordinateSpaceModifier<ObjectIdentifier>, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _CoordinateSpaceModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>, (uint64_t)&type metadata for ScrollViewKey, (uint64_t)&protocol witness table for ScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>)
  {
    type metadata accessor for CategoryGesture<MagnifyGesture.Value>(255);
    type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>, MEMORY[0x1E0CE2C68]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>, MEMORY[0x1E0CE14D8]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>);
  }
}

void type metadata accessor for CategoryGesture<MagnifyGesture.Value>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E0CE2C58]);
}

void type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedMagnifyGesture;
    v8[1] = &type metadata for TouchBasedMagnifyGesture;
    v8[2] = lazy protocol witness table accessor for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1875E6264()
{
  return swift_deallocObject();
}

void _s7SwiftUI19SimultaneousGestureVyAA022TransformBasedRotationD033_BE4F31EA7CD17BEECFB3DECC6C6E6203LLVAA05TouchfgD0AELLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedRotationGesture;
    v8[1] = &type metadata for TouchBasedRotationGesture;
    v8[2] = lazy protocol witness table accessor for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>)
  {
    lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>);
  }
}

void type metadata accessor for _DictionaryStorage<ViewIdentity, ConfirmationDialog>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>)
  {
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>);
  }
}

void type metadata accessor for _DictionaryStorage<ViewIdentity, AlertStorage>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>)
  {
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>);
  }
}

uint64_t outlined init with copy of ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ResolvedTokenFieldStyle);
}

uint64_t outlined destroy of ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>);
}

void type metadata accessor for _ContiguousArrayStorage<Scrollable>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>);
  }
}

uint64_t sub_1875E648C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1875E64B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusableFillerBoundsTransform.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in FocusableFillerBoundsTransform.value.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1875E64E0()
{
  return swift_deallocObject();
}

uint64_t sub_1875E64F0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIDatePicker>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIDatePicker>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIDatePicker);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIDatePicker>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIKitToolbar>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitToolbar>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitToolbar, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  }
}

_QWORD *outlined init with copy of ReplacedRootDismissModifier.ChildEnvironment(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(a2, a1, (uint64_t)&type metadata for ReplacedRootDismissModifier.ChildEnvironment);
  return a2;
}

uint64_t outlined destroy of ReplacedRootDismissModifier.ChildEnvironment(uint64_t a1)
{
  destroy for ReplacedRootDismissModifier.ChildEnvironment();
  return a1;
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  }
}

uint64_t sub_1875E7490()
{
  uint64_t v0;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1875E74C8()
{
  uint64_t v0;

  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for ScrollableCollection?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrollableCollection?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?);
  }
}

uint64_t sub_1875E756C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void type metadata accessor for AnyAccessibilityPropertiesEntry?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?);
  }
}

uint64_t sub_1875E75FC()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter(_BYTE *a1)
{
  uint64_t v1;

  return closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter(a1, *(_BYTE *)(v1 + 16));
}

void type metadata accessor for SearchFieldConfiguration.Data?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1875E768C()
{
  return swift_deallocObject();
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UINavigationController>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UINavigationController>)
  {
    v2 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UINavigationController>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
}

uint64_t sub_1875E7AAC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BarItemModifier.Transform.value.getter(uint64_t *a1)
{
  return closure #1 in BarItemModifier.Transform.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_1875E7B2C()
{
  uint64_t v0;
  unint64_t v1;

  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    switch((_DWORD)v1)
    {
      case 2:
        goto LABEL_5;
      case 1:
LABEL_6:
        swift_release();
        return swift_deallocObject();
      case 0:
LABEL_5:
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        goto LABEL_6;
    }
  }
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIProgressView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIProgressView>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIProgressView);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIProgressView>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  }
}

uint64_t type metadata accessor for ArchivableFactory<ArchivableAccessibilityViewModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityViewModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityViewModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

uint64_t objectdestroy_8Tm_1()
{
  uint64_t v0;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of ResolvedProgressViewStyle(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ResolvedProgressViewStyle);
}

uint64_t outlined destroy of ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>(uint64_t a1)
{
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UICalendarView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UICalendarView>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UICalendarView);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UICalendarView>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  }
}

void type metadata accessor for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>)
  {
    type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>);
  }
}

uint64_t outlined destroy of ConditionalDraggingModifier(uint64_t a1)
{
  destroy for ConditionalDraggingModifier(a1);
  return a1;
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController>, (uint64_t (*)(uint64_t))type metadata accessor for CustomizableDocumentViewController, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
}

void type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIKitTabBarController>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitTabBarController>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitTabBarController, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t)&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<PagingCollectionView>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<PagingCollectionView>, (uint64_t (*)(uint64_t))type metadata accessor for PagingCollectionView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIStepper>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIStepper>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIStepper);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIStepper>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIKBVisualEffectView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKBVisualEffectView>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIKBVisualEffectView);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKBVisualEffectView>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  }
}

uint64_t outlined destroy of IndexViewBody(uint64_t a1)
{
  destroy for _IndexViewStyleConfiguration();
  return a1;
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UIKitSearchBar>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitSearchBar>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitSearchBar, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UITextField>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UITextField>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITextField);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UITextField>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<VerticalTextView>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<VerticalTextView>, (uint64_t (*)(uint64_t))type metadata accessor for VerticalTextView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  }
}

uint64_t sub_1875EA5E4()
{
  return swift_deallocObject();
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UISplitViewController>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISplitViewController>)
  {
    v2 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UISplitViewController);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISplitViewController>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
}

uint64_t sub_1875EAA04()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for ViewResponderFilter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for RemoteSheetContainerVCWriter(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformArchivedDisplayList.Factory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory);
  }
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISearchTextField>)
  {
    v2 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UISearchTextField);
    v5 = type metadata accessor for RepresentablePreferredFocusableViewInput(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISearchTextField>);
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for AccessibilityBridgedPlatformView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t)&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>);
    v6 = type metadata accessor for PlatformViewIdentifiedViews(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  }
}

uint64_t closure #1 in Section<>.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v26 = a1;
  v27 = a4;
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier(255, a2, a3, v7);
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v24 - v15;
  v32 = 2;
  protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge(&v32, &v31);
  v18 = type metadata accessor for AccessibilityTraitsModifier(0, a2, a3, v17);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTraitsModifier<A>, v18);
  v30[0] = a3;
  v30[1] = &protocol witness table for CaptureViewRespondersModifier;
  v20 = MEMORY[0x1E0CE2E70];
  v29[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v30);
  v29[1] = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  v28[0] = MEMORY[0x18D75FFDC](v20, v8, v29);
  v28[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v21 = MEMORY[0x18D75FFDC](v20, v9, v28);
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v31, a2, v18, a3, v19);
  static ViewBuilder.buildExpression<A>(_:)(v12, v9, v21);
  v22 = *(void (**)(char *, uint64_t))(v25 + 8);
  v22(v12, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v9, v27);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v9);
}

void protocol witness for View.body.getter in conformance <> Section<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int8x16_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 - 24);
  v3 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  v4 = v2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a1, &v3);
  specialized PrimitiveView.body.getter();
}

uint64_t Section<>.init(header:footer:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v21, a1, v22, v19);
  a3(v23);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
  return Section.init(header:content:footer:)((uint64_t)v21, (uint64_t)v14, a2, a4, a5, v26, a7);
}

uint64_t Section<>.init(footer:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(double);
  uint64_t v13;
  uint64_t v15;

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v12(v9);
  return Section.init(header:content:footer:)(v13, (uint64_t)v11, a1, MEMORY[0x1E0CE7C38], a3, a4, a5);
}

uint64_t Section<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = Text.init(_:tableName:bundle:comment:)();
  v16[1] = v10;
  v17 = v11 & 1;
  v18 = v12;
  a3();
  return Section.init(header:content:footer:)((uint64_t)v16, (uint64_t)v9, v13, MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE7C38], a5);
}

uint64_t Section<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  char v25;
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  v24[0] = Text.init<A>(_:)();
  v24[1] = v19;
  v25 = v20 & 1;
  v26 = v21;
  a2(v24[0], v19, v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return Section.init(header:content:footer:)((uint64_t)v24, (uint64_t)v11, v22, MEMORY[0x1E0CE6CF8], a3, MEMORY[0x1E0CE7C38], a5);
}

uint64_t Section<>.init(_:isExpanded:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, void (*a4)(void)@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  v11 = a5 + *(int *)(type metadata accessor for Section(0, MEMORY[0x1E0CE6CF8], a7, MEMORY[0x1E0CE7C38]) + 52);
  a4();
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a5);
  *(_QWORD *)v11 = a1;
  *(_QWORD *)(v11 + 8) = a2;
  *(_BYTE *)(v11 + 16) = a3;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Section<>.init(isExpanded:content:header:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v13 = a7 + *(int *)(type metadata accessor for Section(0, a6, a8, MEMORY[0x1E0CE7C38]) + 52);
  v14 = a4();
  result = a5(v14);
  *(_QWORD *)v13 = a1;
  *(_QWORD *)(v13 + 8) = a2;
  *(_BYTE *)(v13 + 16) = a3;
  return result;
}

uint64_t Section<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void (*a5)(void)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;

  v13 = a8 + *(int *)(type metadata accessor for Section(0, MEMORY[0x1E0CE6CF8], a6, MEMORY[0x1E0CE7C38]) + 52);
  a5();
  closure #1 in ModalLink<>.init<A>(_:presenting:)(a1, a8);
  *(_QWORD *)v13 = a2;
  *(_QWORD *)(v13 + 8) = a3;
  *(_BYTE *)(v13 + 16) = a4;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 8))(a1, a7);
}

uint64_t sub_1875EB664@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.canCollapseSections.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1875EB6A0()
{
  return EnvironmentValues.canCollapseSections.setter();
}

uint64_t static IsCollapsibleTraitKey.defaultValue.getter()
{
  return 1;
}

uint64_t base witness table accessor for View in <> Section<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a3 - 24);
  v5 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v6 = v3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a1, &v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for Section(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v28;
  uint64_t *v29;

  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(_QWORD *)(v10 + 64) + 7;
  v14 = v11 | *(_DWORD *)(v6 + 80) & 0xF8 | v8;
  if (v14 > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v13 + ((v12 + (v9 & ~v8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7));
    swift_retain();
  }
  else
  {
    v19 = ~v8;
    v20 = ~v11;
    v28 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v29 = a1;
    v21 = ((unint64_t)a1 + v9) & v19;
    v22 = ((unint64_t)a2 + v9) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v21, v22, v5);
    v23 = (v22 + v12) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v21 + v12) & v20, v23, v28);
    v24 = (v13 + ((v21 + v12) & v20)) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v25 + 8) < 0xFFFFFFFFuLL)
    {
      v26 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
      *(_OWORD *)v24 = v26;
    }
    else
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
      *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
      swift_retain();
      swift_retain();
    }
    return v29;
  }
  return (uint64_t *)v18;
}

uint64_t initializeWithTake for Section(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = v21;
  return a1;
}

uint64_t assignWithTake for Section(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v19 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v20 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    v21 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_OWORD *)v19 = v21;
    return a1;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_release();
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_release();
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Section(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v26;

  v5 = a3[2];
  v4 = a3[3];
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = *(_DWORD *)(v6 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = a3[4];
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  if (v13 > v10)
    v10 = *(_DWORD *)(v12 + 84);
  if (v10 <= 0x7FFFFFFE)
    v10 = 2147483646;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14;
  v16 = *(_QWORD *)(v8 + 64);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = *(_QWORD *)(v12 + 64) + 7;
  if (v10 < a2)
  {
    v19 = ((v18 + ((v16 + v17 + (v15 & ~(_DWORD)v14)) & ~(_DWORD)v17)) & 0xFFFFFFF8) + 17;
    v20 = (a2 - v10 + 255) >> (8 * v19);
    if (v19 < 4)
      v21 = v20 + 1;
    else
      v21 = 2;
    if (v21 >= 0x10000)
      v22 = 4;
    else
      v22 = 2;
    if (v21 < 0x100)
      v22 = 1;
    if (v21 >= 2)
      v23 = v22;
    else
      v23 = 0;
    __asm { BR              X21 }
  }
  if (v7 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v13 = *(unsigned int *)(v6 + 84);
    v11 = v5;
    return v25(a1, v13, v11);
  }
  a1 = (v15 + a1) & ~v14;
  if (v9 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v13 = *(unsigned int *)(v8 + 84);
    v11 = v4;
    return v25(a1, v13, v11);
  }
  a1 = (a1 + v16 + v17) & ~v17;
  if ((_DWORD)v13 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v25(a1, v13, v11);
  }
  v26 = *(_QWORD *)(((v18 + a1) & 0xFFFFFFFFFFFFF8) + 8);
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  if ((v26 + 1) >= 2)
    return v26;
  else
    return 0;
}

void storeEnumTagSinglePayload for Section(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = ((v12 + ((v10 + v11 + ((*(_QWORD *)(v5 + 64) + v9) & ~v9)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v7 >= a3)
  {
    v15 = 0u;
    if (v7 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v13 <= 3)
      v14 = ((a3 - v7 + 255) >> (8 * v13)) + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 < 2)
      v15 = 0;
    if (v7 >= a2)
LABEL_20:
      __asm { BR              X22 }
  }
  if (v13 >= 4)
    v16 = ~v7 + a2;
  else
    v16 = (~(_BYTE)v7 + a2);
  bzero(a1, ((v12 + ((v10 + v11 + ((*(_QWORD *)(v5 + 64) + v9) & ~v9)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 17);
  if ((_DWORD)v13 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_1875EBE04()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1875EBECCLL);
}

void sub_1875EBE0C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1875EBE14);
  JUMPOUT(0x1875EBECCLL);
}

void sub_1875EBE50()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875EBECCLL);
}

void sub_1875EBE58()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875EBECCLL);
}

void sub_1875EBE60(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (a2)
  {
    if (v3 != v4 && v2 != v4)
      JUMPOUT(0x1875EBE6CLL);
    JUMPOUT(0x1875EBE84);
  }
  JUMPOUT(0x1875EBECCLL);
}

ValueMetadata *type metadata accessor for IsCollapsibleTraitKey()
{
  return &type metadata for IsCollapsibleTraitKey;
}

uint64_t sub_1875EBEF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = type metadata accessor for Section(255, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v4 = type metadata accessor for ModifiedContent();
  v7 = *(_OWORD *)(a1 + 24);
  v8 = v2;
  v6[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v3, &v7);
  v6[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
}

void sub_1875EBFB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *a1;
  v2 = a1[3];
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier(255, v1, v2, v4);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  v10[0] = v2;
  v10[1] = &protocol witness table for CaptureViewRespondersModifier;
  v7 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v10);
  v9[1] = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  v8[0] = MEMORY[0x18D75FFDC](v7, v5, v9);
  v8[1] = &protocol witness table for IgnoreViewRespondersModifier;
  MEMORY[0x18D75FFDC](v7, v6, v8);
  type metadata accessor for StaticSourceWriter();
}

void sub_1875EC0B8()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  type metadata accessor for StaticSourceWriter();
}

void sub_1875EC0F0()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1875EC124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[24];

  v3 = type metadata accessor for ModifiedContent();
  v7[0] = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  v7[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v6[0] = MEMORY[0x18D75FFDC](v0, v1, v7);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v5[0] = MEMORY[0x18D75FFDC](v0, v2, v6);
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v0, v3, v5);
}

uint64_t partial apply for closure #1 in Section<>.internalBody.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Section<>.internalBody.getter);
}

void type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>);
  }
}

void *type metadata accessor for CollapsibleSectionsEnvironmentKey()
{
  return &unk_1E1B02790;
}

uint64_t static CustomHoverEffect<>.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.defaultHoverEffect : EnvironmentValues@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultHoverEffectKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultHoverEffectKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultHoverEffectKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultHoverEffectKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultHoverEffect : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

void static CustomHoverEffect<>.highlight.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AutomaticHoverEffect.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1875EC3D4()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t AutomaticHoverEffect.body(content:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t KeyPath;
  char v8;
  uint64_t v9;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*v1, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v9);
  v5 = outlined consume of Environment<Color?>.Content(v3, v4);
  if (v9
    && ((*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v9 + 96))(&v8, v5), swift_release(), v8 != 3)
    && !v8
    || (outlined copy of Environment<SceneBridge?>.Content(v3, v4),
        specialized Environment.wrappedValue.getter(v3, v4, &v9),
        outlined consume of Environment<Color?>.Content(v3, v4),
        (result = v9) == 0))
  {
    KeyPath = swift_getKeyPath();
    type metadata accessor for _AnyHoverEffectBox<HoverContainerEffect>(0);
    result = swift_allocObject();
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 16) = KeyPath;
    *(_QWORD *)(result + 37) = 0;
    *(_BYTE *)(result + 45) = 1;
  }
  *a1 = result;
  return result;
}

void AutomaticHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

SwiftUI::HighlightHoverEffect __swiftcall HighlightHoverEffect.init()()
{
  _BYTE *v0;
  SwiftUI::HighlightHoverEffect result;

  *v0 = 0;
  return result;
}

void static CustomHoverEffect<>.highlight(background:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t HighlightHoverEffect.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return HighlightHoverEffect.body(content:)(1, a1);
}

void HighlightHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 257;
}

uint64_t protocol witness for CustomHoverEffect.body(content:) in conformance HighlightHoverEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 257;
  return result;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance HighlightHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 257;
}

uint64_t LiftHoverEffect.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return HighlightHoverEffect.body(content:)(2, a1);
}

uint64_t HighlightHoverEffect.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = a1;
  *(_BYTE *)(a2 + 29) = 1;
  return result;
}

void LiftHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 258;
}

uint64_t protocol witness for CustomHoverEffect.body(content:) in conformance LiftHoverEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 258;
  return result;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance LiftHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 258;
}

void static CustomHoverEffect<>.spotlight.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

SwiftUI::SpotlightHoverEffect __swiftcall SpotlightHoverEffect.init()()
{
  SwiftUI::SpotlightHoverEffect result;

  result.background = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void SpotlightHoverEffect.body(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SpotlightHoverEffect.systemHoverEffect.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static CustomHoverEffect<>.glowEffect.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CustomHoverEffect.glowEffect()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void GlowHoverEffect.body(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void GlowHoverEffect.systemHoverEffect.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static CustomHoverEffect<>.outline.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall OutlineHoverEffect.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void OutlineHoverEffect.body(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void OutlineHoverEffect.systemHoverEffect.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t HoverContainerEffect.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  BOOL v10;
  uint64_t KeyPath;
  uint64_t result;
  _BYTE v13[24];
  unsigned __int16 v14;
  unsigned __int8 v15;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(unsigned __int16 *)(v1 + 24) | (*(unsigned __int8 *)(v1 + 26) << 16);
  v7 = *(unsigned __int8 *)(v1 + 27);
  v8 = *(_BYTE *)(v1 + 28);
  v9 = *(_BYTE *)(v1 + 29);
  outlined copy of Environment<EdgeInsets>.Content(v3, v4, v5, v6, v7);
  specialized Environment.wrappedValue.getter(v3, v4, v5, v6 | (v7 << 24), (uint64_t)v13);
  outlined consume of Environment<EdgeInsets>.Content(v3, v4, v5, v6, v7);
  if (v14 == 2)
    v10 = v9;
  else
    v10 = ((v14 | (v15 << 16)) & 0x10000) == 0;
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 33) = v8;
  *(_BYTE *)(a1 + 34) = v10;
  return result;
}

double sub_1875EC7F0@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int16 v5;
  char v6;

  EnvironmentValues.hoverEffectContext.getter();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1875EC848()
{
  return EnvironmentValues.hoverEffectContext.setter();
}

void type metadata accessor for _AnyHoverEffectBox<HoverContainerEffect>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyHoverEffectBox<HoverContainerEffect>)
  {
    v2 = lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect();
    v4 = type metadata accessor for _AnyHoverEffectBox(a1, (uint64_t)&type metadata for HoverContainerEffect, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyHoverEffectBox<HoverContainerEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect;
  if (!lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverContainerEffect, &type metadata for HoverContainerEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in AutomaticHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in HighlightHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in LiftHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in SpotlightHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type SpotlightHoverEffect and conformance SpotlightHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect;
  if (!lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpotlightHoverEffect, &type metadata for SpotlightHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in GlowHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type GlowHoverEffect and conformance GlowHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect;
  if (!lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GlowHoverEffect, &type metadata for GlowHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in OutlineHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type OutlineHoverEffect and conformance OutlineHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect;
  if (!lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineHoverEffect, &type metadata for OutlineHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AutomaticHoverEffect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t *assignWithCopy for AutomaticHoverEffect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v4);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AutomaticHoverEffect()
{
  return &type metadata for AutomaticHoverEffect;
}

ValueMetadata *type metadata accessor for HighlightHoverEffect()
{
  return &type metadata for HighlightHoverEffect;
}

ValueMetadata *type metadata accessor for LiftHoverEffect()
{
  return &type metadata for LiftHoverEffect;
}

uint64_t storeEnumTagSinglePayload for HighlightHoverEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1875ECC54 + 4 * byte_187C42815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1875ECC88 + 4 * byte_187C42810[v4]))();
}

uint64_t sub_1875ECC88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875ECC90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1875ECC98);
  return result;
}

uint64_t sub_1875ECCA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1875ECCACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1875ECCB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875ECCB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpotlightHoverEffect()
{
  return &type metadata for SpotlightHoverEffect;
}

uint64_t initializeWithCopy for GlowHoverEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 26);
  v7 = *(unsigned __int16 *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 27);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)a2, v4, v5, v7 | (v6 << 16), v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 27) = v8;
  return a1;
}

uint64_t assignWithCopy for GlowHoverEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 26);
  v7 = *(unsigned __int16 *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 27);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)a2, v4, v5, v7 | (v6 << 16), v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  v13 = *(_BYTE *)(a1 + 27);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 26) = v6;
  *(_BYTE *)(a1 + 27) = v8;
  outlined consume of Environment<EdgeInsets>.Content(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for GlowHoverEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 26);
  v5 = *(_WORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 27);
  v7 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  v11 = *(_BYTE *)(a1 + 27);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 26) = v4;
  *(_BYTE *)(a1 + 27) = v6;
  outlined consume of Environment<EdgeInsets>.Content(v7, v9, v8, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GlowHoverEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 27);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GlowHoverEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_BYTE *)(result + 27) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GlowHoverEffect()
{
  return &type metadata for GlowHoverEffect;
}

ValueMetadata *type metadata accessor for OutlineHoverEffect()
{
  return &type metadata for OutlineHoverEffect;
}

uint64_t sub_1875ECF04()
{
  return lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, HoverEffect>, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect);
}

uint64_t sub_1875ECF38()
{
  return lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, HoverContainerEffect> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, HoverContainerEffect>, (uint64_t)&type metadata for HoverContainerEffect, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, MEMORY[0x1E0CE3198], a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8 = v7;
    v9 = a4();
    v10[0] = MEMORY[0x1E0CE3188];
    v10[1] = v9;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E68], v8, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1875ECFEC()
{
  return MEMORY[0x1E0CE3188];
}

uint64_t sub_1875ECFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type GlowHoverEffect and conformance GlowHoverEffect();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E68], v2, v4);
}

uint64_t destroy for GlowHoverEffect(uint64_t a1)
{
  return outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16), *(_BYTE *)(a1 + 27));
}

uint64_t initializeWithCopy for HoverContainerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 26);
  v8 = *(unsigned __int16 *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 27);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)a2, v5, v6, v8 | (v7 << 16), v9);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 26) = v7;
  *(_WORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 27) = v9;
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for HoverContainerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 26);
  v8 = *(unsigned __int16 *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 27);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)a2, v5, v6, v8 | (v7 << 16), v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  v14 = *(_BYTE *)(a1 + 27);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 26) = v7;
  *(_BYTE *)(a1 + 27) = v9;
  outlined consume of Environment<EdgeInsets>.Content(v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return a1;
}

__n128 __swift_memcpy30_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HoverContainerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 26);
  v6 = *(_WORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 27);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  v12 = *(_BYTE *)(a1 + 27);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 26) = v5;
  *(_BYTE *)(a1 + 27) = v7;
  outlined consume of Environment<EdgeInsets>.Content(v8, v9, v10, v11, v12);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverContainerEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 30))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 27);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverContainerEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 30) = 0;
    if (a2)
      *(_BYTE *)(result + 27) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverContainerEffect()
{
  return &type metadata for HoverContainerEffect;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in HoverContainerEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized static SupportsHoverEffects.evaluate(inputs:)()
{
  char v0;

  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0
    || (_GraphInputs.interfaceIdiom.getter(), (AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0))
  {
    v0 = 1;
  }
  else
  {
    _GraphInputs.interfaceIdiom.getter();
    v0 = AnyInterfaceIdiom.accepts<A>(_:)();
  }
  return v0 & 1;
}

void *type metadata accessor for SupportsHoverEffects()
{
  return &unk_1E1AD4FF0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>();
    v4[0] = MEMORY[0x1E0CE3188];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E68], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>)
  {
    type metadata accessor for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>);
  }
}

void type metadata accessor for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>)
  {
    v2 = type metadata accessor for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>();
    v3 = lazy protocol witness table accessor for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v5 = type metadata accessor for _CustomViewModifierHoverEffect(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type SupportsHoverEffects and conformance SupportsHoverEffects();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SupportsHoverEffects and conformance SupportsHoverEffects()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SupportsHoverEffects and conformance SupportsHoverEffects;
  if (!lazy protocol witness table cache variable for type SupportsHoverEffects and conformance SupportsHoverEffects)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SupportsHoverEffects, &unk_1E1AD4FF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SupportsHoverEffects and conformance SupportsHoverEffects);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>;
  if (!lazy protocol witness table cache variable for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>)
  {
    type metadata accessor for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CustomViewModifierHoverEffect<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>);
  }
  return result;
}

void static CustomHoverEffect<>.spotlight(background:)()
{
  static CustomHoverEffect<>.highlight(background:)();
}

void NavigationLink.init<>(label:presentedValue:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  type metadata accessor for NavigationLink();
}

uint64_t sub_1875ED738(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = a1[14];
  *(_BYTE *)(v4 + a1[15]) = 1;
  v7 = a1[16];
  v8 = v4 + a1[18];
  *(_DWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = v4 + a1[19];
  *(_BYTE *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + a1[13], v3, v1);
  *(_BYTE *)(v4 + v6) = 1;
  *(_QWORD *)(v4 + v7) = v2;
  *(_BYTE *)(v4 + a1[17]) = v2 == 0;
  return result;
}

uint64_t NavigationLink.deprecated_isActive.getter()
{
  uint64_t v0;
  uint64_t v2;

  if ((*(_BYTE *)(v0 + 17) & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v2);
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
  }
  return v2;
}

uint64_t NavigationLink.$triggerUpdateSeed.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  return v1;
}

uint64_t NavigationLink.wasTriggeredBySelection.getter()
{
  unsigned __int8 v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  return v1;
}

void NavigationLink.init(destination:label:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  type metadata accessor for NavigationLink();
}

uint64_t sub_1875ED988(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = v3 + a1[14];
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v9(v7, 1, 1, v4);
  *(_BYTE *)(v3 + a1[15]) = 1;
  *(_QWORD *)(v3 + a1[16]) = 0;
  *(_BYTE *)(v3 + a1[17]) = 0;
  v10 = v3 + a1[18];
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = v3 + a1[19];
  *(_BYTE *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v7, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v5, v4);
  v9(v7, 0, 1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + a1[13], v2, v1);
}

void NavigationLink.init(destination:label:isActive:)()
{
  type metadata accessor for NavigationLink();
}

uint64_t sub_1875EDAC4(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v7 = v5 + a1[14];
  v8 = *(_QWORD *)(v1 - 8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v9(v7, 1, 1, v1);
  outlined consume of StateOrBinding<Bool>(0, 0, 0, 0);
  *(_BYTE *)(v5 + a1[15]) = 1;
  *(_QWORD *)(v5 + a1[16]) = 0;
  *(_BYTE *)(v5 + a1[17]) = 0;
  v10 = v5 + a1[18];
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = v5 + a1[19];
  *(_BYTE *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)v5 = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 16) = v14;
  *(_BYTE *)(v5 + 17) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + a1[13], v15, v2);
  v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v7, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v16, v1);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v9)(v7, 0, 1, v1);
}

void NavigationLink.init<A>(destination:label:tag:selection:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v23 = a1;
  v24 = a8;
  v29 = a4;
  v30 = a5;
  v22 = a2;
  v27 = a11;
  v28 = a3;
  v25 = *(_QWORD *)(a7 - 8);
  v26 = a10;
  v21 = *(_QWORD *)(v25 + 64);
  MEMORY[0x1E0C80A78](a1, a7);
  v31 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  v19 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v19, v16);
  v20 = (char *)&v18 - v17;
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_WORD *)(a9 + 16) = 0;
  v32 = a5;
  v33 = a6;
  v34 = a8;
  v35 = a10;
  type metadata accessor for NavigationLink();
}

uint64_t sub_1875EDCC4(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t);
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v10 = v1;
  v11 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v8 - 224) = v4 + a1[14];
  *(_QWORD *)(v8 - 216) = v11;
  v12 = *(void (**)(void))(v11 + 56);
  *(_QWORD *)(v8 - 208) = v12;
  v12();
  *(_QWORD *)(v8 - 232) = a1;
  *(_BYTE *)(v4 + a1[15]) = 1;
  *(_QWORD *)(v4 + a1[16]) = 0;
  *(_BYTE *)(v4 + a1[17]) = 0;
  v13 = v4 + a1[18];
  *(_DWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  v14 = v4 + a1[19];
  *(_BYTE *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16);
  *(_QWORD *)(v8 - 256) = v15;
  v15(v7, *(_QWORD *)(v8 - 144), v3);
  v16 = *(_QWORD *)(v8 - 176);
  v17 = *(void (**)(_QWORD, _QWORD, uint64_t))(v16 + 16);
  *(_QWORD *)(v8 - 264) = v17;
  v17(*(_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 152), v5);
  v18 = *(unsigned __int8 *)(v2 + 80);
  v19 = v2;
  *(_QWORD *)(v8 - 248) = v2;
  v20 = (v18 + 80) & ~v18;
  v21 = *(unsigned __int8 *)(v16 + 80);
  v22 = v16;
  v23 = v20;
  *(_QWORD *)(v8 - 272) = v20;
  v24 = (v6 + v21 + v20) & ~v21;
  *(_QWORD *)(v8 - 240) += v24;
  *(_QWORD *)(v8 - 280) = v18 | v21 | 7;
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = 0;
  *((_QWORD *)v25 + 4) = *(_QWORD *)(v8 - 136);
  *((_QWORD *)v25 + 5) = v10;
  v26 = v5;
  v27 = *(_QWORD *)(v8 - 184);
  *((_QWORD *)v25 + 6) = v5;
  *((_QWORD *)v25 + 7) = v27;
  v28 = *(_QWORD *)(v8 - 160);
  *((_QWORD *)v25 + 8) = *(_QWORD *)(v8 - 168);
  *((_QWORD *)v25 + 9) = v28;
  v29 = &v25[v23];
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 32);
  v31 = *(_QWORD *)(v8 - 288);
  v32 = *(_QWORD *)(v8 - 296);
  v30(v29, v31, v32);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v34 = *(_QWORD *)(v8 - 128);
  v33(&v25[v24], v34, v26);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 - 256))(v31, *(_QWORD *)(v8 - 144), v32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 - 264))(v34, *(_QWORD *)(v8 - 152), v26);
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  *((_QWORD *)v35 + 4) = *(_QWORD *)(v8 - 136);
  *((_QWORD *)v35 + 5) = v10;
  v36 = *(_QWORD *)(v8 - 184);
  *((_QWORD *)v35 + 6) = v26;
  *((_QWORD *)v35 + 7) = v36;
  v37 = &v35[*(_QWORD *)(v8 - 272)];
  v38 = *(_QWORD *)(v8 - 160);
  *((_QWORD *)v35 + 8) = *(_QWORD *)(v8 - 168);
  *((_QWORD *)v35 + 9) = v38;
  v30(v37, v31, v32);
  v33(&v35[v24], *(_QWORD *)(v8 - 128), v26);
  Binding.init(get:set:)();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 248) + 8))(*(_QWORD *)(v8 - 144), v32);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 176) + 8))(*(_QWORD *)(v8 - 152), v26);
  v39 = *(_QWORD *)(v8 - 120);
  v40 = *(_QWORD *)(v8 - 112);
  LOBYTE(v30) = *(_BYTE *)(v8 - 104);
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(_BYTE *)(v4 + 17));
  *(_QWORD *)v4 = v39;
  *(_QWORD *)(v4 + 8) = v40;
  *(_BYTE *)(v4 + 16) = (_BYTE)v30;
  *(_BYTE *)(v4 + 17) = 1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v8 - 136) - 8) + 32))(v4 + *(int *)(*(_QWORD *)(v8 - 232) + 52), *(_QWORD *)(v8 - 200));
  v41 = type metadata accessor for Optional();
  v42 = *(_QWORD *)(v8 - 224);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v42, v41);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 216) + 32))(v42, *(_QWORD *)(v8 - 192), v10);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 - 208))(v42, 0, 1, v10);
}

uint64_t closure #1 in NavigationLink.init<A>(destination:label:tag:selection:)@<X0>(uint64_t a1@<X6>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  char v17;
  uint64_t v18;

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - v7;
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a1) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v16 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, a1);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, a1);
    v16 = v17 & 1;
  }
  *a2 = v16;
  return result;
}

uint64_t closure #2 in NavigationLink.init<A>(destination:label:tag:selection:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  double v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(char *, uint64_t);
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a5;
  v11 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v18 = (char *)&v50 - v17;
  v19 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v50 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v50 - v28;
  v36 = MEMORY[0x1E0C80A78](v30, v31);
  if (*a1 == 1)
  {
    v37 = (char *)&v50 - v33;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v50 - v33, v59, a8, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v37, 0, 1, a8);
    type metadata accessor for Binding();
    specialized Binding.wrappedValue.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v37, v14);
  }
  v57 = v35;
  v58 = v34;
  v52 = v13;
  v55 = (char *)&v50 - v33;
  v39 = v32;
  v54 = type metadata accessor for Binding();
  v56 = a4;
  MEMORY[0x18D75B9C8]();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v25, v59, a8);
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v53(v25, 0, 1, a8);
  v59 = v39;
  v40 = &v18[*(int *)(v39 + 48)];
  v41 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v41(v18, v29, v14);
  v41(v40, v25, v14);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v42(v18, 1, a8) != 1)
  {
    v51 = v19;
    v44 = v57;
    v41(v57, v18, v14);
    if (v42(v40, 1, a8) != 1)
    {
      v46 = v52;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v52, v40, a8);
      v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48 = *(void (**)(char *, uint64_t))(v11 + 8);
      v48(v46, a8);
      v43 = *(void (**)(char *, uint64_t))(v51 + 8);
      v43(v25, v14);
      v43(v29, v14);
      v48(v44, a8);
      result = ((uint64_t (*)(char *, uint64_t))v43)(v18, v14);
      if ((v47 & 1) == 0)
        return result;
      goto LABEL_10;
    }
    v45 = *(void (**)(char *, uint64_t))(v51 + 8);
    v45(v25, v14);
    v45(v29, v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v44, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v18, v59);
  }
  v43 = *(void (**)(char *, uint64_t))(v19 + 8);
  v43(v25, v14);
  v43(v29, v14);
  if (v42(v40, 1, a8) != 1)
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v18, v59);
  v43(v18, v14);
LABEL_10:
  v49 = v55;
  v53(v55, 1, 1, a8);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v43)(v49, v14);
}

void NavigationLink.init(destination:label:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  a2(v14);
  NavigationLink.init(destination:label:)(a4);
}

uint64_t sub_1875EE5B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void NavigationLink.init(destination:isActive:label:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;

  v20 = a4;
  v19[0] = a2;
  v19[1] = a9;
  v19[2] = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = *(_QWORD *)(v11 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v15);
  a5(v18);
  NavigationLink.init(destination:label:isActive:)();
}

uint64_t sub_1875EE6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void NavigationLink.init<A>(destination:tag:selection:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a6;
  v44 = a5;
  v45 = a4;
  v43 = a3;
  v39 = a1;
  v48 = a9;
  v49 = a10;
  v46 = a12;
  v47 = a11;
  type metadata accessor for Optional();
  v42 = type metadata accessor for Binding();
  v16 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v17);
  v40 = (char *)&v36 - v18;
  v38 = *(_QWORD *)(a8 - 8);
  v19 = v38;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a7;
  v28 = *(_QWORD *)(a7 - 8);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (*(uint64_t (**)(char *, uint64_t, double))(v28 + 16))(v33, a1, v31);
  v45(v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, a2, a8);
  v35 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v40, v43, v42);
  NavigationLink.init<A>(destination:label:tag:selection:)((uint64_t)v33, (uint64_t)v27, (uint64_t)v23, v35, v41, v37, a8, v49, v48, v47, v46);
}

uint64_t sub_1875EE8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 176) + 8))(v6, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v7 - 168), v1);
}

uint64_t NavigationLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[12];
  unsigned int v74;
  uint64_t updated;
  uint64_t v76;
  _BYTE *v77;
  _BOOL4 v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  _QWORD v97[2];
  _QWORD v98[2];
  __int128 v99;
  char v100;
  char v101;
  uint64_t v102;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 24);
  v94 = a2;
  v95 = v5;
  v6 = type metadata accessor for Optional();
  v79 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v91 = &v73[-v9];
  v10 = *(_QWORD *)(a1 + 40);
  v102 = v10;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, &v102, v8);
  v89 = v6;
  v85 = v11;
  v13 = type metadata accessor for NavigationLinkModifier(0, v6, v11, v12);
  v90 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v87 = &v73[-v15];
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 32);
  v19 = type metadata accessor for Button(0, v16, v17, v18);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = &v73[-v22];
  type metadata accessor for ViewInputFlagModifier<NavigationButtonInput>(255);
  v24 = type metadata accessor for ModifiedContent();
  v81 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v24);
  v26 = &v73[-v25];
  v83 = v27;
  v93 = v13;
  v28 = type metadata accessor for ModifiedContent();
  v82 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v28);
  v80 = &v73[-v29];
  v84 = v30;
  v92 = type metadata accessor for ModifiedContent();
  v88 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v31);
  v86 = &v73[-v34];
  v78 = (*(_BYTE *)(v3 + 17) & 1) == 0 && *(_QWORD *)(v3 + *(int *)(a1 + 64)) == 0;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = v95;
  *(_QWORD *)&v73[-48] = v16;
  *(_QWORD *)&v73[-40] = v35;
  v70 = v17;
  v71 = v10;
  v72 = v3;
  Button.init(action:label:)((uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, (void (*)(uint64_t))partial apply for closure #2 in NavigationLink.body.getter, (uint64_t)&v73[-64], v16, v17, v23);
  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v19);
  v76 = v36;
  v37 = lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  v77 = v26;
  View.input<A>(_:)((uint64_t)&type metadata for NavigationButtonInput, v19, (uint64_t)&type metadata for NavigationButtonInput, v36, v37);
  (*(void (**)(_WORD *, uint64_t))(v20 + 8))(v23, v19);
  v38 = *(_QWORD *)(v3 + 8);
  v39 = *(_BYTE *)(v3 + 17);
  v40 = *(unsigned __int8 *)(v3 + 16);
  *(_QWORD *)&v99 = *(_QWORD *)v3;
  *((_QWORD *)&v99 + 1) = v38;
  v100 = v40;
  v101 = v39;
  outlined copy of StateOrBinding<Bool>(v99, v38, v40, v39);
  updated = NavigationLink.$triggerUpdateSeed.getter();
  v42 = v41;
  v74 = v43;
  v44 = *(_BYTE *)(v3 + *(int *)(a1 + 60));
  v45 = *(_BYTE *)(v3 + *(int *)(a1 + 68));
  v46 = (uint64_t)v91;
  v47 = v89;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v79 + 16))(v91, v3 + *(int *)(a1 + 56), v89);
  v79 = *(int *)(a1 + 64);
  v48 = *(_QWORD *)(v3 + v79);
  swift_retain();
  v49 = NavigationLink.wasTriggeredBySelection.getter();
  v50 = v87;
  NavigationLinkModifier.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:needsButtonStyle:)(&v99, updated, v42, v74, v44, v45, v46, v48, (uint64_t)v87, v78, v49 & 1, v47, v85);
  v98[0] = v76;
  v98[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v51 = MEMORY[0x1E0CE2E70];
  v52 = v83;
  v53 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v83, v98);
  v54 = v80;
  v55 = v93;
  v56 = v77;
  MEMORY[0x18D75B4AC](v50, v52, v93, v53);
  (*(void (**)(_BYTE *, uint64_t))(v90 + 8))(v50, v55);
  (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v56, v52);
  v97[0] = v53;
  v97[1] = &protocol witness table for NavigationLinkModifier<A>;
  v57 = v84;
  v58 = MEMORY[0x18D75FFDC](v51, v84, v97);
  v59 = v86;
  MEMORY[0x18D75B4AC](v58, v57, MEMORY[0x1E0CE1E98], v58);
  (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v54, v57);
  v60 = NavigationLink.deprecated_isActive.getter();
  v61 = v95;
  LOBYTE(v99) = NavigationSelectionModifier.init(isActive:presentedValue:)(v60 & 1) & 1;
  *((_QWORD *)&v99 + 1) = v62;
  v65 = type metadata accessor for NavigationSelectionModifier(0, v61, v63, v64);
  v96[0] = v58;
  v96[1] = MEMORY[0x1E0CE1E88];
  swift_retain();
  v66 = v51;
  v67 = v92;
  v68 = MEMORY[0x18D75FFDC](v66, v92, v96);
  MEMORY[0x18D75B4AC](&v99, v67, v65, v68);
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v88 + 8))(v59, v67);
}

void type metadata accessor for ViewInputFlagModifier<NavigationButtonInput>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<NavigationButtonInput>)
  {
    v2 = lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for NavigationButtonInput, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<NavigationButtonInput>);
  }
}

void closure #2 in NavigationLink.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NavigationLink();
}

uint64_t sub_1875EEFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void partial apply for closure #2 in NavigationLink.body.getter()
{
  uint64_t v0;

  closure #2 in NavigationLink.body.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

void NavigationLink<>.init(destination:titleKey:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v7);
  v13[1] = Text.init(_:tableName:bundle:comment:)();
  v13[2] = v10;
  v14 = v11 & 1;
  v15 = v12;
  NavigationLink.init(destination:label:)(a4);
}

uint64_t sub_1875EF114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void NavigationLink<>.init<A>(destination:title:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD v21[4];
  char v22;
  uint64_t v23;

  v21[1] = a4;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a3);
  v21[2] = Text.init<A>(_:)();
  v21[3] = v18;
  v22 = v19 & 1;
  v23 = v20;
  NavigationLink.init(destination:label:)(a5);
}

uint64_t sub_1875EF244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
}

void NavigationLink<>.init(destination:titleKey:isActive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v17 = a8;
  v16[0] = a6;
  v16[1] = a7;
  v10 = *(_QWORD *)(a9 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a9, v11);
  v18 = Text.init(_:tableName:bundle:comment:)();
  v19 = v13;
  v20 = v14 & 1;
  v21 = v15;
  NavigationLink.init(destination:label:isActive:)();
}

uint64_t sub_1875EF380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void NavigationLink<>.init<A>(destination:title:isActive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v24[0] = a8;
  v24[1] = a3;
  v25 = a5;
  v24[2] = a4;
  v11 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, a7);
  v26 = Text.init<A>(_:)();
  v27 = v21;
  v28 = v22 & 1;
  v29 = v23;
  NavigationLink.init(destination:label:isActive:)();
}

uint64_t sub_1875EF4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v0);
}

void NavigationLink<>.init<A>(destination:titleKey:tag:selection:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33[3];
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;

  v40 = a7;
  v41 = a9;
  v36 = a1;
  v37 = a6;
  v35 = a5;
  v34 = a4;
  v33[1] = a2;
  v33[2] = a3;
  v38 = a11;
  v39 = a12;
  type metadata accessor for Optional();
  v14 = type metadata accessor for Binding();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v33 - v17;
  v19 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[0] = a8;
  v24 = *(_QWORD *)(a8 - 8);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v29, a1, a8, v27);
  v42[0] = Text.init(_:tableName:bundle:comment:)();
  v42[1] = v30;
  v43 = v31 & 1;
  v44 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, v37, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v40, v14);
  NavigationLink.init<A>(destination:label:tag:selection:)((uint64_t)v29, (uint64_t)v42, (uint64_t)v23, (uint64_t)v18, MEMORY[0x1E0CE6CF8], v33[0], a10, MEMORY[0x1E0CE6C58], v41, v38, v39);
}

uint64_t sub_1875EF6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v4);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v8 - 168), v3);
}

void NavigationLink<>.init<A, B>(destination:title:tag:selection:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t v55;

  v51 = a8;
  v52 = a2;
  v47 = a3;
  v48 = a4;
  v50 = a9;
  v49 = a11;
  v43 = a10;
  v44 = a1;
  type metadata accessor for Optional();
  v15 = type metadata accessor for Binding();
  v45 = *(_QWORD *)(v15 - 8);
  v46 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v39 - v17;
  v39 = *(_QWORD *)(a7 - 8);
  v19 = v39;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(a6 - 8);
  v24 = v42;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a5;
  v29 = *(_QWORD *)(a5 - 8);
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v34 = (char *)&v39 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v29 + 16))(v34, a1, v32);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v41 = a6;
  v35(v28, v52, a6);
  v53[0] = Text.init<A>(_:)();
  v53[1] = v36;
  v54 = v37 & 1;
  v55 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, v47, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v18, v48, v46);
  NavigationLink.init<A>(destination:label:tag:selection:)((uint64_t)v34, (uint64_t)v53, (uint64_t)v23, (uint64_t)v18, MEMORY[0x1E0CE6CF8], v40, a7, MEMORY[0x1E0CE6C58], v50, v51, v49);
}

uint64_t sub_1875EF90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 8))(v6, v4);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 200) + 8))(*(_QWORD *)(v7 - 120), *(_QWORD *)(v7 - 208));
  return (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v7 - 184), v3);
}

void NavigationLink<>.init(_:destination:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v11, v12, v8);
  NavigationLink<>.init(destination:titleKey:)((uint64_t)v10, a1, a3, a4);
}

uint64_t sub_1875EFA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void NavigationLink<>.init<A>(_:destination:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[2];

  v20[1] = a5;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v19, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  NavigationLink<>.init<A>(destination:title:)((uint64_t)v19, (uint64_t)v12, a3, a4, a6);
}

uint64_t sub_1875EFB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v0);
}

void NavigationLink<>.init(_:destination:isActive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v21 = a8;
  v19 = a6;
  v20 = a7;
  v13 = *(_QWORD *)(a9 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v17, a9, v14);
  NavigationLink<>.init(destination:titleKey:isActive:)((uint64_t)v16, a1, a2, a3, a4, v19, v20, v21, a9);
}

uint64_t sub_1875EFC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void NavigationLink<>.init<A>(_:destination:isActive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = a8;
  v23 = a5;
  v21 = a3;
  v22 = a4;
  v11 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v20, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a7);
  NavigationLink<>.init<A>(destination:title:isActive:)((uint64_t)v20, (uint64_t)v13, v21, v22, v23, a6, a7, v24);
}

uint64_t sub_1875EFD20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

void NavigationLink<>.init<A>(_:destination:tag:selection:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v36 = a7;
  v37 = a9;
  v32 = a5;
  v33 = a6;
  v41 = a4;
  v40 = a3;
  v38 = a1;
  v39 = a2;
  v34 = a12;
  v35 = a11;
  type metadata accessor for Optional();
  v14 = type metadata accessor for Binding();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v30 - v17;
  v19 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a8;
  v24 = *(_QWORD *)(a8 - 8);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v30 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v29, a5, a8, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, v33, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v36, v14);
  NavigationLink<>.init<A>(destination:titleKey:tag:selection:)((uint64_t)v29, v38, v39, v40, v41, (uint64_t)v23, (uint64_t)v18, v31, v37, a10, v35, v34);
}

uint64_t sub_1875EFECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v4);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v8 - 160), v6);
}

void NavigationLink<>.init<A, B>(_:destination:tag:selection:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a8;
  v46 = a2;
  v40 = a3;
  v41 = a4;
  v47 = a1;
  v44 = a9;
  v42 = a11;
  v43 = a10;
  type metadata accessor for Optional();
  v39 = type metadata accessor for Binding();
  v14 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v15);
  v17 = (char *)&v34 - v16;
  v37 = *(_QWORD *)(a7 - 8);
  v18 = v37;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a6 - 8);
  v35 = a6;
  v38 = v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a5;
  v28 = *(_QWORD *)(a5 - 8);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = (char *)&v34 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v28 + 16))(v33, v46, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v27, v47, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, v40, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v41, v39);
  NavigationLink<>.init<A, B>(destination:title:tag:selection:)((uint64_t)v33, (uint64_t)v27, (uint64_t)v22, (uint64_t)v17, v36, v35, a7, v45, v44, v43, v42);
}

uint64_t sub_1875F00E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 168) + 8))(v5, v4);
  (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v8 - 96), v3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(*(_QWORD *)(v8 - 88), v1);
}

void NavigationLink<>.init(destinationName:label:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationLink<>.init(destinationName:isActive:label:)()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationLink<>.init<A>(destinationName:tag:selection:label:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t NavigationLink.isDetailLink(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 60)) = a1;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in NavigationLink<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for NavigationLink()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationLink(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  void *v17;
  const void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  if ((v9 | v6) > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((((v10 + ((v7 + v9 + ((v6 + 18) & ~v6)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v13 + (((v9 | v6) & 0xF8 ^ 0x1F8) & ((v9 | v6) + 16));
  }
  else
  {
    v14 = *((unsigned __int8 *)a2 + 17);
    if (v14 >= 2)
      v14 = *(_DWORD *)a2 + 2;
    v26 = *(_QWORD *)(a3 + 16);
    v27 = *(_QWORD *)(a3 + 24);
    v24 = ~v6;
    v25 = ~v9;
    if (v14 == 1)
    {
      v15 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v15;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_retain();
      v16 = 1;
    }
    else
    {
      v16 = 0;
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = a2[1];
    }
    swift_retain();
    *(_BYTE *)(v4 + 17) = v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v4 + v6 + 18) & v24, ((unint64_t)a2 + v6 + 18) & v24, v26);
    v17 = (void *)((((v4 + v6 + 18) & v24) + v7 + v9) & v25);
    v18 = (const void *)(((((unint64_t)a2 + v6 + 18) & v24) + v7 + v9) & v25);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v18, 1, v27))
    {
      memcpy(v17, v18, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v17, v18, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v27);
    }
    *((_BYTE *)v17 + v10) = *((_BYTE *)v18 + v10);
    v19 = ((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)v18 + v10) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_DWORD *)(v19 + 24) = *(_DWORD *)(v20 + 24);
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
    v21 = (v19 + 47) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v20 + 47) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v21 = *(_BYTE *)v22;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for NavigationLink(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
    swift_release();
  swift_release();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v6);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v10, v8);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2)
    v6 = *(_DWORD *)a2 + 2;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  swift_retain();
  *(_BYTE *)(a1 + 17) = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 18 + a1) & ~v10;
  v12 = (v10 + 18 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (char *)((v17 + v11) & ~v16);
  v19 = (char *)((v17 + v12) & ~v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    v20 = *(_DWORD *)(v15 + 84);
    v21 = *(_QWORD *)(v15 + 64);
    if (v20)
      v22 = *(_QWORD *)(v15 + 64);
    else
      v22 = v21 + 1;
    memcpy(v18, v19, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v19, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
    v20 = *(_DWORD *)(v15 + 84);
    v21 = *(_QWORD *)(v15 + 64);
  }
  if (v20)
    v23 = v21;
  else
    v23 = v21 + 1;
  v24 = (unint64_t)&v18[v23];
  v25 = (unint64_t)&v19[v23];
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v24 &= 0xFFFFFFFFFFFFFFF8;
  v25 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  *(_DWORD *)(v24 + 24) = *(_DWORD *)(v25 + 24);
  *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
  v26 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v25 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
      swift_release();
    swift_release();
    v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 18 + a1) & ~v9;
  v11 = (v9 + 18 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (char *)((v16 + v10) & ~v15);
  v18 = (char *)((v16 + v11) & ~v15);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v10) = v19(v17, 1, v13);
  v20 = v19(v18, 1, v13);
  if ((_DWORD)v10)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v18, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      goto LABEL_21;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v17, v18, v13);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  if (*(_DWORD *)(v14 + 84))
    v21 = *(_QWORD *)(v14 + 64);
  else
    v21 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v17, v18, v21);
LABEL_21:
  if (*(_DWORD *)(v14 + 84))
    v22 = *(_QWORD *)(v14 + 64);
  else
    v22 = *(_QWORD *)(v14 + 64) + 1;
  v23 = (unint64_t)&v17[v22];
  v24 = (unint64_t)&v18[v22];
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = v23 & 0xFFFFFFFFFFFFFFF8;
  v26 = v24 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  *(_DWORD *)(v25 + 24) = *(_DWORD *)(v26 + 24);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  swift_retain();
  swift_release();
  v27 = (v25 + 47) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v26 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v5 = *(unsigned __int8 *)(a2 + 17);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 17) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 18 + a1) & ~v8;
  v10 = (v8 + 18 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 + v14;
  v16 = (char *)((v15 + v9) & ~v14);
  v17 = (char *)((v15 + v10) & ~v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
  {
    v18 = *(_DWORD *)(v13 + 84);
    v19 = *(_QWORD *)(v13 + 64);
    if (v18)
      v20 = *(_QWORD *)(v13 + 64);
    else
      v20 = v19 + 1;
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
    v18 = *(_DWORD *)(v13 + 84);
    v19 = *(_QWORD *)(v13 + 64);
  }
  if (v18)
    v21 = v19;
  else
    v21 = v19 + 1;
  v22 = (unint64_t)&v16[v21];
  v23 = (unint64_t)&v17[v21];
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v22 &= 0xFFFFFFFFFFFFFFF8;
  v23 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
  *(_OWORD *)((v22 + 47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
      swift_release();
    swift_release();
    v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 17) = v8;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 18 + a1) & ~v10;
  v12 = (v10 + 18 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (char *)((v17 + v11) & ~v16);
  v19 = (char *)((v17 + v12) & ~v16);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v11) = v20(v18, 1, v14);
  v21 = v20(v19, 1, v14);
  if ((_DWORD)v11)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_21;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v18, v19, v14);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v22 = *(_QWORD *)(v15 + 64);
  else
    v22 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v22);
LABEL_21:
  if (*(_DWORD *)(v15 + 84))
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  v24 = (unint64_t)&v18[v23];
  v25 = (unint64_t)&v19[v23];
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v26 = v24 & 0xFFFFFFFFFFFFFFF8;
  v27 = v25 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  *(_DWORD *)(v26 + 24) = *(_DWORD *)(v27 + 24);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  swift_release();
  v28 = (v26 + 47) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v27 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = *(_DWORD *)(v5 + 84);
  if (v10 <= 0x7FFFFFFE)
    v10 = 2147483646;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v7 + 80);
  if (v10 < a2)
  {
    if (((((((((v13 + v14 + ((v12 + 18) & ~v12)) & ~v14) + v11) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v15 = 2;
    else
      v15 = a2 - v10 + 1;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    __asm { BR              X7 }
  }
  v18 = (a1 + v12 + 18) & ~v12;
  if (v6 == v10)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v18, *(unsigned int *)(v5 + 84), v4);
  v20 = (v18 + v13 + v14) & ~v14;
  if (v9 == v10)
  {
    if (v8 < 2)
      return 0;
    v22 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v20);
    if (v22 >= 2)
      return v22 - 1;
    else
      return 0;
  }
  else
  {
    v21 = *(_QWORD *)(((v20 + v11) & 0xFFFFFFFFFFFFF8) + 8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    if ((v21 + 1) >= 2)
      return v21;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for NavigationLink(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (*(_DWORD *)(v7 + 84) <= v10)
    v11 = v10;
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFE)
    v11 = 2147483646;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v12;
  if (v11 < a3)
  {
    v13 = a3 - v11;
    if (((((((*(_DWORD *)(v7 + 64)
             + *(unsigned __int8 *)(v8 + 80)
             + ((*(unsigned __int8 *)(v7 + 80) + 18) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v8 + 80))
           + (_DWORD)v12) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (a2 > v11)
  {
    if (((((((*(_DWORD *)(v7 + 64)
             + *(unsigned __int8 *)(v8 + 80)
             + ((*(unsigned __int8 *)(v7 + 80) + 18) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v8 + 80))
           + (_DWORD)v12) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v16 = ~v11 + a2;
      bzero(a1, ((((((*(_QWORD *)(v7 + 64)+ *(unsigned __int8 *)(v8 + 80)+ ((*(unsigned __int8 *)(v7 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ v12) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

uint64_t sub_1875F1108@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v18;

  *(_BYTE *)(v15 + v16) = 0;
  if ((_DWORD)a2)
  {
    result = (v15 + result + 18) & a5;
    if ((_DWORD)v6 == v10)
    {
      v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      a3 = v6;
      a4 = a6;
      return v17(result, a2, a3, a4);
    }
    result = (result + v13 + v12) & v7;
    if (v11 == v10)
    {
      a2 = (a2 + 1);
      v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      return v17(result, a2, a3, a4);
    }
    v18 = (result + v14) & 0xFFFFFFFFFFFFFFF8;
    if (a2 > 0x7FFFFFFE)
    {
      *(_QWORD *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 8) = a2 - 0x7FFFFFFF;
    }
    else
    {
      *(_QWORD *)(v18 + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for NavigationLink()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1875F11E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;

  v4 = a1[1];
  v5 = a1[3];
  v6 = type metadata accessor for Button(255, *a1, a1[2], a4);
  type metadata accessor for ViewInputFlagModifier<NavigationButtonInput>(255);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for Optional();
  v23 = v5;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v8, &v23);
  type metadata accessor for NavigationLinkModifier(255, v8, v9, v10);
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for NavigationSelectionModifier(255, v4, v13, v14);
  v16 = type metadata accessor for ModifiedContent();
  v22[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v6);
  v22[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v17 = MEMORY[0x1E0CE2E70];
  v21[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v22);
  v21[1] = &protocol witness table for NavigationLinkModifier<A>;
  v20[0] = MEMORY[0x18D75FFDC](v17, v11, v21);
  v20[1] = MEMORY[0x1E0CE1E88];
  v19[0] = MEMORY[0x18D75FFDC](v17, v12, v20);
  v19[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSelectionModifier<A>, v15);
  return MEMORY[0x18D75FFDC](v17, v16, v19);
}

void sub_1875F135C()
{
  type metadata accessor for NavigationLink();
}

uint64_t sub_1875F137C(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLink<A, B>, a1);
}

ValueMetadata *type metadata accessor for NavigationButtonInput()
{
  return &type metadata for NavigationButtonInput;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance NavigationButtonInput()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationButtonInput()
{
  lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in NavigationButtonInput()
{
  return &protocol witness table for NavigationButtonInput;
}

uint64_t partial apply for closure #1 in NavigationLink.init<A>(destination:label:tag:selection:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  return closure #1 in NavigationLink.init<A>(destination:label:tag:selection:)(v3, a1);
}

uint64_t partial apply for closure #2 in NavigationLink.init<A>(destination:label:tag:selection:)(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  type metadata accessor for Optional();
  v6 = *(_QWORD *)(type metadata accessor for Binding() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return closure #2 in NavigationLink.init<A>(destination:label:tag:selection:)(a1, v1[2], v1[3], (uint64_t)v1 + v7, (uint64_t)v1 + ((v7 + *(_QWORD *)(v6 + 64) + v8) & ~v8), v3, v4, v5);
}

uint64_t View.rotation3DEffect(_:axis:anchor:anchorZ:perspective:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  _QWORD v11[8];

  *(double *)v11 = a3;
  *(double *)&v11[1] = a4;
  *(double *)&v11[2] = a5;
  *(double *)&v11[3] = a6;
  *(double *)&v11[4] = a7;
  *(double *)&v11[5] = a8;
  *(double *)&v11[6] = a9;
  *(double *)&v11[7] = a10;
  return MEMORY[0x18D75B4AC](v11, a1, MEMORY[0x1E0CE40B8], a2);
}

unint64_t lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE40A8], MEMORY[0x1E0CE40B8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

uint64_t VisualEffect.rotation3DEffect(_:axis:anchor:anchorZ:perspective:)()
{
  lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

uint64_t sub_1875F1798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CE40A0];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1875F17EC()
{
  lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect();
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.liftPreviewMarker(kind:viewIdentity:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;

  v8 = a1;
  v9 = a2;
  v6 = type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>);
  return MEMORY[0x18D75B4AC](&v8, a3, v6, a4);
}

void *UIView.findView(forLiftPreviewWithID:kind:onlyExplicit:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v6 = specialized UIView.firstDescendantWhere(_:)(v3, a1, a2);
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, sel_subviews);
    type metadata accessor for UIView();
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
      goto LABEL_16;
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v10)
    {
      v11 = 4;
      while (1)
      {
        v12 = (v9 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18D75E3BC](v11 - 4, v9)
            : *(id *)(v9 + 8 * v11);
        v13 = v12;
        v14 = v11 - 3;
        if (__OFADD__(v11 - 4, 1))
          break;
        v15 = UIView.findLiftPreview(kind:)(a2);

        if (v15)
        {

          swift_bridgeObjectRelease();
          return v15;
        }
        ++v11;
        if (v14 == v10)
          goto LABEL_11;
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_11:
    swift_bridgeObjectRelease();
    if ((a3 & 1) != 0)
    {

      return 0;
    }
  }
  return v7;
}

uint64_t View.definesContextMenuPreview()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v6 = 1;
  v4 = type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>);
  return MEMORY[0x18D75B4AC](&v6, a1, v4, a2);
}

uint64_t View.liftPreviewTarget()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 3;
  return MEMORY[0x18D75B4AC](&v3, a1, &unk_1E1AE5210, a2);
}

void *UIView.findLiftPreview(kind:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;

  type metadata accessor for LiftPreviewMarkingView();
  v3 = swift_dynamicCastClass();
  if (!v3 || (a1 & ~*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI22LiftPreviewMarkingView_kind)) != 0)
  {
    type metadata accessor for LiftPreviewLabelMarkingView();
    v5 = swift_dynamicCastClass();
    if (!v5 || (a1 & ~*(_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_kind)) != 0)
    {
      v6 = objc_msgSend(v1, sel_subviews);
      type metadata accessor for UIView();
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v7 >> 62)
        goto LABEL_20;
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (v8)
      {
        v9 = 4;
        while (1)
        {
          v10 = (v7 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x18D75E3BC](v9 - 4, v7)
              : *(id *)(v7 + 8 * v9);
          v11 = v10;
          v12 = v9 - 3;
          if (__OFADD__(v9 - 4, 1))
            break;
          v1 = (void *)UIView.findLiftPreview(kind:)(a1);

          if (v1)
          {
            swift_bridgeObjectRelease();
            return v1;
          }
          ++v9;
          if (v12 == v8)
            goto LABEL_15;
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_15:
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  else
  {
    v4 = v1;
  }
  return v1;
}

unint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance LiftPreviewLabelMarkingEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t result;

  v5 = *v2;
  v6 = *((_DWORD *)v2 + 2);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 40) = a1;
  result = lazy protocol witness table accessor for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect();
  *(_QWORD *)(v7 + 48) = result;
  *(_QWORD *)(v7 + 16) = v5;
  *(_DWORD *)(v7 + 24) = v6;
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 3;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance LiftPreviewLabelMarkingEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id LiftPreviewLabelMarkingEffect.makePlatformGroup()(uint64_t a1, int a2)
{
  objc_class *v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  v4 = (objc_class *)type metadata accessor for LiftPreviewLabelMarkingView();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_kind] = a1;
  *(_DWORD *)&v5[OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_viewIdentity] = a2;
  v10.receiver = v5;
  v10.super_class = v4;
  v6 = objc_msgSendSuper2(&v10, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v7 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v7, sel_setAllowsGroupOpacity_, 0);

  v8 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v8, sel_setAllowsGroupBlending_, 0);

  return v6;
}

id protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance LiftPreviewLabelMarkingEffect()
{
  uint64_t v0;

  return LiftPreviewLabelMarkingEffect.makePlatformGroup()(*(_QWORD *)v0, *(_DWORD *)(v0 + 8));
}

uint64_t protocol witness for PlatformGroupFactory.updatePlatformGroup(_:) in conformance LiftPreviewLabelMarkingEffect()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 2);
  type metadata accessor for LiftPreviewLabelMarkingView();
  swift_unknownObjectRetain();
  v3 = swift_dynamicCastClass();
  if (v3)
  {
    *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_kind) = v1;
    *(_DWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_viewIdentity) = v2;
  }
  return swift_unknownObjectRelease();
}

unint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance LiftPreviewMarkingEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  _QWORD *v6;
  unint64_t result;

  v5 = *v2;
  v6 = (_QWORD *)swift_allocObject();
  v6[5] = a1;
  result = lazy protocol witness table accessor for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect();
  v6[6] = result;
  v6[2] = v5;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 3;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LiftPreviewMarkingEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LiftPreviewLabelMarkingEffect(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LiftPreviewLabelMarkingEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance LiftPreviewMarkingEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id LiftPreviewMarkingEffect.makePlatformGroup()(uint64_t a1)
{
  objc_class *v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  objc_super v8;

  v2 = (objc_class *)type metadata accessor for LiftPreviewMarkingView();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI22LiftPreviewMarkingView_kind] = a1;
  v8.receiver = v3;
  v8.super_class = v2;
  v4 = objc_msgSendSuper2(&v8, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v5 = objc_msgSend(v4, sel_layer);
  objc_msgSend(v5, sel_setAllowsGroupOpacity_, 0);

  v6 = objc_msgSend(v4, sel_layer);
  objc_msgSend(v6, sel_setAllowsGroupBlending_, 0);

  return v4;
}

id protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance LiftPreviewMarkingEffect()
{
  uint64_t *v0;

  return LiftPreviewMarkingEffect.makePlatformGroup()(*v0);
}

uint64_t protocol witness for PlatformGroupFactory.updatePlatformGroup(_:) in conformance LiftPreviewMarkingEffect()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  type metadata accessor for LiftPreviewMarkingView();
  swift_unknownObjectRetain();
  v2 = swift_dynamicCastClass();
  if (v2)
    *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI22LiftPreviewMarkingView_kind) = v1;
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for LiftPreviewLabelMarkingView()
{
  return objc_opt_self();
}

void @objc LiftPreviewLabelMarkingView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for LiftPreviewMarkingView()
{
  return objc_opt_self();
}

uint64_t sub_1875F21C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier>);
    v2[0] = &protocol witness table for LiftPreviewMarkingEffect;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, LiftPreviewMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t sub_1875F229C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for LiftPreviewMarkingEffect;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for LiftPreviewKinds()
{
  return &type metadata for LiftPreviewKinds;
}

void *type metadata accessor for LiftPreviewMarkingEffect()
{
  return &unk_1E1AE5210;
}

_UNKNOWN **base witness table accessor for ViewModifier in LiftPreviewMarkingEffect()
{
  return &protocol witness table for LiftPreviewMarkingEffect;
}

unint64_t lazy protocol witness table accessor for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewMarkingEffect, &unk_1E1AE5210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewMarkingEffect and conformance LiftPreviewMarkingEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LiftPreviewKinds and conformance LiftPreviewKinds()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds;
  if (!lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewKinds, &type metadata for LiftPreviewKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds;
  if (!lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewKinds, &type metadata for LiftPreviewKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds;
  if (!lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewKinds, &type metadata for LiftPreviewKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds;
  if (!lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewKinds, &type metadata for LiftPreviewKinds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewKinds and conformance LiftPreviewKinds);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect;
  if (!lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftPreviewLabelMarkingEffect, &type metadata for LiftPreviewLabelMarkingEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
  }
  return result;
}

uint64_t sub_1875F2630()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for ViewModifier in LiftPreviewLabelMarkingEffect()
{
  return &protocol witness table for LiftPreviewLabelMarkingEffect;
}

uint64_t EnvironmentValues.segmentedControlStyle.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SegmentedControlStyleKey()
{
  return &type metadata for SegmentedControlStyleKey;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance SegmentedControlStyleKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static SegmentedControlStyleKey.defaultValue;
  return swift_retain();
}

uint64_t closure #1 in InternalControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRetain();
  static AccessibilityVisibility.containerElement.getter();
  specialized View.accessibility<A>(_:_:isEnabled:)(v10 | ((unint64_t)v10 << 32), 1, a1, a2, (uint64_t)&v11);
  result = swift_bridgeObjectRelease();
  v7 = v12;
  v8 = v13;
  v9 = v14;
  *(_QWORD *)a3 = v11;
  *(_BYTE *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t closure #2 in InternalControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = swift_getKeyPath();
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = closure #1 in View.forcePlatformItem();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = KeyPath;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = result;
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

__n128 protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance InternalControlGroupStyle@<Q0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __n128 result;
  __int128 v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __n128 v30;
  char v31;
  uint64_t v32;
  char v33;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = v3;
  swift_retain();
  v5 = static Alignment.center.getter();
  v7 = v6;
  closure #2 in InternalControlGroupStyle.makeBody(configuration:)((uint64_t)&v21);
  swift_release();
  v8 = v22;
  v9 = v23;
  v10 = v24;
  v11 = v25;
  v12 = v26;
  v13 = v27;
  v14 = v28;
  v15 = v29;
  v16 = v32;
  v17 = v33;
  result = v30;
  v19 = v21;
  v20 = v31;
  *(_QWORD *)a1 = partial apply for closure #1 in InternalControlGroupStyle.makeBody(configuration:);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 104) = v15;
  *(__n128 *)(a1 + 112) = result;
  *(_BYTE *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v16;
  *(_BYTE *)(a1 + 144) = v17;
  return result;
}

uint64_t UIKitSegmentedControlAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  __int128 v74;
  char v75;
  char v76;
  __int16 v77;
  id v78;
  _BYTE v79[32];
  _BYTE v80[184];
  id v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  char v87;
  __int128 v88;
  __int128 v89;
  char v90;
  char v91;
  __int16 v92;
  uint64_t v93;

  v5 = type metadata accessor for PlatformItemList.Item();
  v57 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v61 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v54 - v10;
  type metadata accessor for (offset: Int, element: PlatformItemList.Item)();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v56 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: PlatformItemList.Item)?();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (unint64_t *)((char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (uint64_t *)((char *)&v54 - v24);
  objc_msgSend(a1, sel_removeAllSegments, v23);
  v26 = *(_QWORD *)(a3 + 16);
  v63 = v11 + 64;
  v58 = a3;
  result = swift_bridgeObjectRetain();
  v28 = v26;
  v29 = 0;
  v62 = MEMORY[0x1E0DEE9B8] + 8;
  v59 = v25;
  v60 = v20;
  v64 = v26;
  v55 = v11;
  while (1)
  {
    if (v29 == v28)
    {
      v30 = 1;
      v31 = v28;
      goto LABEL_8;
    }
    if (v29 >= v28)
      break;
    v31 = v29 + 1;
    v32 = (uint64_t)&v56[*(int *)(v13 + 48)];
    outlined init with copy of PlatformItemList.Item(v58+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(_QWORD *)(v57 + 72) * v29, v32);
    v33 = (uint64_t)v20 + *(int *)(v13 + 48);
    *v20 = v29;
    outlined init with take of TableCellFormula(v32, v33, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v30 = 0;
LABEL_8:
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v20, v30, 1, v13);
    outlined init with take of TableCellFormula((uint64_t)v20, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: PlatformItemList.Item)?);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v25, 1, v13) == 1)
      return swift_bridgeObjectRelease();
    v65 = v31;
    v34 = *v25;
    outlined init with take of TableCellFormula((uint64_t)v25 + *(int *)(v13 + 48), (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v35 = (void *)MEMORY[0x18D75CC88](0, 0xE000000000000000);
    objc_msgSend(a1, sel_insertSegmentWithTitle_atIndex_animated_, v35, v34, 0);

    if (*(_QWORD *)v11)
    {
      v36 = objc_msgSend(*(id *)v11, sel_string);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v38;

      v40 = v37;
      v25 = v59;
      v41 = (void *)MEMORY[0x18D75CC88](v40, v39);
      v20 = v60;
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setTitle_forSegmentAtIndex_, v41, v34);

    }
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v63, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v80, (uint64_t)&v81, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v81) != 1)
    {
      if (v93)
      {
        outlined retain of Image.Resolved?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        swift_unknownObjectRetain();
        objc_opt_self();
        v42 = (void *)swift_dynamicCastObjCClassUnconditional();
        outlined init with copy of PlatformItemList.Item((uint64_t)v11, v61);
        if (v42)
        {
          outlined retain of Image.Resolved?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          outlined destroy of PlatformItemList.Item(v61);
LABEL_17:
          objc_msgSend(a1, sel_setImage_forSegmentAtIndex_, v42, v34);

          goto LABEL_18;
        }
      }
      else
      {
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v80, (uint64_t)&v66, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
        outlined retain of Image.Resolved((uint64_t)&v66);
        outlined init with copy of PlatformItemList.Item((uint64_t)v11, v61);
      }
      v43 = v81;
      v44 = v82;
      v66 = v81;
      v67 = v82;
      v68 = v83;
      v69 = v84;
      v70 = v85;
      v71 = v86;
      v72 = v87;
      v73 = v88;
      v74 = v89;
      v75 = v90;
      v76 = v91;
      v77 = v92;
      v45 = v61;
      v46 = v14;
      v47 = v13;
      v48 = a1;
      v49 = *(_QWORD *)(v61 + 48);
      outlined copy of GraphicsImage.Contents?(v81, v82);
      v50 = v49;
      a1 = v48;
      v13 = v47;
      v14 = v46;
      v11 = v55;
      v42 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v50);
      outlined retain of Image.Resolved?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
      v51 = v43;
      v52 = v44;
      v25 = v59;
      v20 = v60;
      outlined consume of GraphicsImage.Contents?(v51, v52);
      outlined destroy of PlatformItemList.Item(v45);
      if (!v42)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_18:
    objc_msgSend(a1, sel_setEnabled_forSegmentAtIndex_, *((_QWORD *)v11 + 51) > 1uLL, v34);
    if (objc_msgSend(a1, sel__accessibilitySegmentItemAtIndex_, v34))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v79, 0, sizeof(v79));
    }
    v29 = v65;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v79, (uint64_t)&v66, (unint64_t *)&lazy cache variable for type metadata for Any?);
    if (*((_QWORD *)&v68 + 1))
    {
      type metadata accessor for UIView();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v53 = v78;
        specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v53, v11);

      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v66);
    }
    result = outlined destroy of PlatformItemList.Item((uint64_t)v11);
    v28 = v64;
  }
  __break(1u);
  return result;
}

unint64_t UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator.primaryActionTriggered(_:)(void *a1)
{
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t);

  result = (unint64_t)objc_msgSend(a1, sel_selectedSegmentIndex);
  if ((result & 0x8000000000000000) == 0)
  {
    v3 = result;
    v4 = *(_QWORD *)(v1
                   + OBJC_IVAR____TtCV7SwiftUIP33_62A8DBD3A37E684D521D6BC97A6F345A28UIKitSegmentedControlAdaptor32UIKitSegmentedControlCoordinator_representable);
    if (result < *(_QWORD *)(v4 + 16))
    {
      result = type metadata accessor for PlatformItemList.Item();
      v5 = v4
         + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v3;
      v6 = *(void (**)(unint64_t))(v5 + 408);
      if (v6 != (void (*)(unint64_t))1)
      {
        result = outlined copy of AppIntentExecutor?(*(_QWORD *)(v5 + 408));
        if (v6)
        {
          v6(result);
          return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
        }
      }
    }
  }
  return result;
}

uint64_t UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitSegmentedControlAdaptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UIKitSegmentedControlAdaptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for UIKitSegmentedControlAdaptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for UIKitSegmentedControlAdaptor()
{
  return &type metadata for UIKitSegmentedControlAdaptor;
}

uint64_t storeEnumTagSinglePayload for InternalControlGroupStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1875F34E0 + 4 * byte_187C43475[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1875F3514 + 4 * byte_187C43470[v4]))();
}

uint64_t sub_1875F3514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875F351C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1875F3524);
  return result;
}

uint64_t sub_1875F3530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1875F3538);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1875F353C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875F3544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalControlGroupStyle()
{
  return &type metadata for InternalControlGroupStyle;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitSegmentedControlAdaptor(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C58]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, sel_setAutoresizingMask_, 2);
  objc_msgSend(v2, sel_setMomentary_, 1);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_primaryActionTriggered_, 4096);
  return v2;
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance UIKitSegmentedControlAdaptor(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return UIKitSegmentedControlAdaptor.updateUIView(_:context:)(a1, a2, *v2);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitSegmentedControlAdaptor@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  objc_class *v5;
  char *v6;
  char *v7;
  id result;
  objc_super v9;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v5 = (objc_class *)type metadata accessor for UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____TtCV7SwiftUIP33_62A8DBD3A37E684D521D6BC97A6F345A28UIKitSegmentedControlAdaptor32UIKitSegmentedControlCoordinator_representable];
  *(_QWORD *)v7 = v3;
  v7[8] = v4;
  v9.receiver = v6;
  v9.super_class = v5;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v9, sel_init);
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in InternalControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1875F3688()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InternalControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in InternalControlGroupStyle.makeBody(configuration:)(a1, *(_BYTE *)(v2 + 16), a2);
}

void type metadata accessor for (offset: Int, element: PlatformItemList.Item)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?)
  {
    type metadata accessor for (offset: Int, element: PlatformItemList.Item)();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?);
  }
}

_UNKNOWN **sub_1875F371C()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t ViewThatFits.init(in:content:)()
{
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t _ViewInputs.requestedViewThatFitsRepresentation.setter()
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t SizeFittingState.applyChildren(selectLast:to:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  id v24;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  ++*(_DWORD *)(v1 + 144);
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 1;
  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v30);
  __swift_project_boxed_opaque_existential_1(v30, v31);
  ViewList.count.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  v5 = AGGraphGetValue();
  outlined init with copy of TableColumnList(v5, (uint64_t)v30);
  __swift_project_boxed_opaque_existential_1(v30, v31);
  v35 = 0;
  ViewList.applySublists(from:list:to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  swift_beginAccess();
  swift_retain();
  v6 = swift_bridgeObjectRetain();
  v7 = specialized _NativeDictionary.filter(_:)(v6, v1);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v1 + 136) = v7;
  result = swift_bridgeObjectRelease();
  if ((v37 & 1) != 0 || (a1 & 1) == 0)
    return result;
  v9 = v36;
  v10 = *(_QWORD *)(v1 + 136);
  v28 = v10 + 64;
  v11 = 1 << *(_BYTE *)(v10 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v10 + 64);
  v29 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v14 = 0;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_7;
    }
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v29)
      goto LABEL_28;
    v26 = *(_QWORD *)(v28 + 8 * v14);
    if (!v26)
      break;
LABEL_23:
    v13 = (v26 - 1) & v26;
    v16 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_7:
    v17 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v16);
    v18 = v17[1];
    v19 = *(_QWORD *)(v10 + 56) + 48 * v16;
    v21 = *(void **)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_BYTE *)(v19 + 40);
    v30[0] = *v17;
    v30[1] = v18;
    v30[2] = v21;
    v31 = v20;
    v32 = v22;
    v33 = *(_OWORD *)(v19 + 24);
    v34 = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = v21;
    closure #3 in SizeFittingState.applyChildren(selectLast:to:)((uint64_t)v30, v9, v2);
    swift_bridgeObjectRelease();
    swift_release();

    result = swift_release();
  }
  v27 = v14 + 1;
  if (v14 + 1 >= v29)
    goto LABEL_28;
  v26 = *(_QWORD *)(v28 + 8 * v27);
  if (v26)
    goto LABEL_22;
  v27 = v14 + 2;
  if (v14 + 2 >= v29)
    goto LABEL_28;
  v26 = *(_QWORD *)(v28 + 8 * v27);
  if (v26)
    goto LABEL_22;
  v27 = v14 + 3;
  if (v14 + 3 >= v29)
    goto LABEL_28;
  v26 = *(_QWORD *)(v28 + 8 * v27);
  if (v26)
    goto LABEL_22;
  v27 = v14 + 4;
  if (v14 + 4 >= v29)
    goto LABEL_28;
  v26 = *(_QWORD *)(v28 + 8 * v27);
  if (v26)
    goto LABEL_22;
  v27 = v14 + 5;
  if (v14 + 5 >= v29)
  {
LABEL_28:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v26 = *(_QWORD *)(v28 + 8 * v27);
  if (v26)
  {
LABEL_22:
    v14 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v14 >= v29)
      goto LABEL_28;
    v26 = *(_QWORD *)(v28 + 8 * v14);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ViewThatFits._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ViewThatFits._tree.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ViewThatFits._tree.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t partial apply for closure #1 in ViewThatFits.init(in:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in LabeledContent<>.init(_:content:)(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t static ViewThatFits._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v12 = type metadata accessor for _VariadicView.Tree();
  LODWORD(v21) = v7;
  type metadata accessor for ViewThatFits(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  v14 = a2[3];
  v15 = a2[4];
  v18 = *(_OWORD *)(a2 + 7);
  v19 = *(_OWORD *)(a2 + 5);
  v16 = a2[9];
  _GraphValue.subscript.getter();
  v20[1] = a4;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v14;
  v25 = v15;
  v26 = v19;
  v27 = v18;
  v28 = v16;
  v29 = v11;
  v20[0] = &protocol witness table for _SizeFittingRoot;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static ViewThatFits._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for ViewThatFits(0, a2, a3, a4);
  v9 = type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ViewThatFits<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static ViewThatFits._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t _SizeFittingRoot.axes.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_SizeFittingRoot.axes.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double static _SizeFittingRoot._makeView(root:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double result;
  __int128 v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v33 = *a1;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v39 = *(_QWORD *)(a2 + 48);
  v48 = *(_DWORD *)(a2 + 64);
  v49 = *(_DWORD *)(a2 + 60);
  v46 = *(_DWORD *)(a2 + 72);
  v47 = *(_DWORD *)(a2 + 68);
  v45 = *(_DWORD *)(a2 + 76);
  v43 = *(_DWORD *)(a2 + 56);
  v44 = *(_DWORD *)(a2 + 80);
  v52 = *(_QWORD *)a2;
  v4 = v52;
  LODWORD(v53) = v5;
  v54 = v6;
  *(_QWORD *)&v55 = __PAIR64__(v7, v8);
  v40 = v10;
  v41 = v7;
  *((_QWORD *)&v55 + 1) = __PAIR64__(v10, v9);
  v35 = v9;
  v56 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = _ViewListInputs.init(_:)();
  v13 = v61;
  v27 = v62;
  v36 = v65;
  v37 = v63;
  v31 = v67;
  v32 = v66;
  v30 = DWORD2(v67);
  v38 = v68;
  v29 = v69;
  v26 = v64;
  v61 = v52;
  v62 = v5;
  v63 = v6;
  *(_QWORD *)&v64 = __PAIR64__(v7, v8);
  *((_QWORD *)&v64 + 1) = __PAIR64__(v10, v9);
  v65 = v11;
  v66 = v39;
  *(_QWORD *)&v67 = __PAIR64__(v49, v43);
  *((_QWORD *)&v67 + 1) = __PAIR64__(v47, v48);
  v68 = __PAIR64__(v45, v46);
  v69 = v44;
  a3(&v52, v12, &v61);
  v61 = v13;
  v62 = v27;
  v63 = v37;
  v64 = v26;
  v65 = v36;
  v66 = v32;
  *(_QWORD *)&v67 = v31;
  DWORD2(v67) = v30;
  v68 = v38;
  LOBYTE(v69) = v29;
  v28 = _ViewListOutputs.makeAttribute(inputs:)();
  outlined destroy of _ViewListOutputs((uint64_t)&v52);
  v61 = v4;
  v14 = v5;
  v62 = v5;
  v63 = v6;
  *(_QWORD *)&v64 = __PAIR64__(v41, v8);
  v65 = v11;
  v66 = v39;
  *(_QWORD *)&v67 = __PAIR64__(v49, v43);
  *((_QWORD *)&v67 + 1) = __PAIR64__(v47, v48);
  v68 = __PAIR64__(v45, v46);
  v69 = v44;
  DWORD2(v64) = v9;
  HIDWORD(v64) = v10 & 0xFFFFFFFD;
  swift_retain();
  v15 = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  v52 = v61;
  LODWORD(v53) = v62;
  v54 = v63;
  v55 = v64;
  v56 = v65;
  v57 = v66;
  v58 = v67;
  v59 = v68;
  v60 = v69;
  _ViewInputs.makeIndirectOutputs()();
  LODWORD(v52) = v33;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_SizeFittingRoot>, (uint64_t)&type metadata for _SizeFittingRoot, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v16 = _GraphValue.value.getter();
  v17 = v50;
  v18 = LODWORD(v51);
  v34 = HIDWORD(v51);
  type metadata accessor for SizeFittingState();
  v19 = swift_allocObject();
  v20 = (id)AGSubgraphGetCurrent();
  if (!v20)
    __break(1u);
  v21 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v19 + 128) = v20;
  *(_QWORD *)(v19 + 136) = v21;
  *(_DWORD *)(v19 + 144) = 0;
  *(_DWORD *)(v19 + 16) = v16;
  *(_DWORD *)(v19 + 20) = v28;
  *(_QWORD *)(v19 + 24) = v4;
  *(_DWORD *)(v19 + 32) = v14;
  *(_QWORD *)(v19 + 40) = v15;
  *(_DWORD *)(v19 + 48) = v8;
  *(_DWORD *)(v19 + 52) = v41;
  *(_DWORD *)(v19 + 56) = v9;
  *(_DWORD *)(v19 + 60) = v40;
  *(_QWORD *)(v19 + 64) = v11;
  *(_QWORD *)(v19 + 72) = v39;
  *(_DWORD *)(v19 + 80) = v43;
  *(_DWORD *)(v19 + 84) = v49;
  *(_DWORD *)(v19 + 88) = v48;
  *(_DWORD *)(v19 + 92) = v47;
  *(_DWORD *)(v19 + 96) = v46;
  *(_DWORD *)(v19 + 100) = v45;
  *(_DWORD *)(v19 + 104) = v44;
  *(_QWORD *)(v19 + 112) = v17;
  *(_DWORD *)(v19 + 120) = v18;
  *(_DWORD *)(v19 + 124) = v34;
  v52 = v19;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SizeFittingMux and conformance SizeFittingMux();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v52 = v17;
  v53 = __PAIR64__(v34, v18);
  _ViewOutputs.setIndirectDependency(_:)();
  if ((v40 & 2) != 0)
  {
    v52 = v19;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer();
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v52) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v22 = v52;
  if (!v52)
    goto LABEL_7;
  v23 = v53;
  v52 = v4;
  LODWORD(v53) = v14;
  v54 = v15;
  *(_QWORD *)&v55 = __PAIR64__(v41, v8);
  *((_QWORD *)&v55 + 1) = __PAIR64__(v40, v35);
  v56 = v11;
  v57 = v39;
  *(_QWORD *)&v58 = __PAIR64__(v49, v43);
  *((_QWORD *)&v58 + 1) = __PAIR64__(v47, v48);
  v59 = __PAIR64__(v45, v46);
  v60 = v44;
  if (((*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(v23 + 8))(&v52, v22, v23) & 1) != 0)
  {
    v52 = v4;
    LODWORD(v53) = v14;
    v54 = v15;
    *(_QWORD *)&v55 = __PAIR64__(v41, v8);
    *((_QWORD *)&v55 + 1) = __PAIR64__(v40, v35);
    v56 = v11;
    v57 = v39;
    *(_QWORD *)&v58 = __PAIR64__(v49, v43);
    *((_QWORD *)&v58 + 1) = __PAIR64__(v47, v48);
    v59 = __PAIR64__(v45, v46);
    v60 = v44;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t))(v23 + 16))(&v52, v19, &v50, v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a4 = v50;
  result = v51;
  a4[1] = v51;
  return result;
}

uint64_t _ViewInputs.requestedViewThatFitsRepresentation.getter()
{
  uint64_t v1;

  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

BOOL _SizeFittingRoot.size(_:fits:)(double a1, double a2, uint64_t a3, char a4)
{
  double v7;
  char v8;
  double v10;
  char v11;

  if ((a4 & 1) != 0)
  {
    v7 = COERCE_DOUBLE(_ProposedSize.width.getter());
    if ((v8 & 1) != 0)
      v7 = INFINITY;
    if (v7 < a1)
      return 0;
  }
  if ((a4 & 2) == 0)
    return 1;
  v10 = COERCE_DOUBLE(_ProposedSize.height.getter());
  if ((v11 & 1) != 0)
    v10 = INFINITY;
  return v10 >= a2;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _SizeFittingRoot()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _SizeFittingRoot(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1);
}

uint64_t closure #1 in SizeFittingState.applyChildren(selectLast:to:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(__int128 *, BOOL))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  id v35;
  void *v36;
  id v37;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  id v48;
  Swift::String v49;
  char v51;
  unsigned int v52;
  unsigned int v55;
  id v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[2];
  __int128 v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  _OWORD v72[2];

  v8 = a1[1];
  if (v8 < 0)
    goto LABEL_40;
  if (!v8)
    return 1;
  v9 = a4;
  v10 = a2;
  v11 = a1;
  v12 = 0;
  v62 = a3 - 1;
  v13 = (uint64_t *)(a4 + 136);
  v58 = a1[1];
  v59 = (uint64_t *)(a4 + 136);
  while (v8 != v12)
  {
    v14 = v11[3];
    *(_QWORD *)&v66[0] = v11[2];
    *((_QWORD *)&v66[0] + 1) = v14;
    _ViewList_ID.elementID(at:)();
    v69 = v67;
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    v65 = LODWORD(v66[0]);
    v64 = DWORD1(v66[0]);
    v6 = *((_QWORD *)&v66[0] + 1);
    v15 = *v10;
    swift_beginAccess();
    v7 = *v13;
    if (!*(_QWORD *)(*v13 + 16))
      goto LABEL_15;
    v16 = v65 | (v64 << 32);
    swift_retain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v6);
    if ((v18 & 1) == 0)
    {
      swift_release();
      v11 = a1;
LABEL_15:
      swift_endAccess();
      if ((*(_BYTE *)(a5 + 8) & 1) != 0)
      {
        v35 = (id)AGSubgraphGetGraph();
        v36 = (void *)AGSubgraphCreate();

        AGGraphClearUpdate();
        v37 = (id)AGSubgraphGetCurrent();
        AGSubgraphSetCurrent();
        closure #1 in closure #1 in SizeFittingState.applyChildren(selectLast:to:)(v9, v11, v12, v36, v15, (uint64_t)&v67);
        AGSubgraphSetCurrent();

        AGGraphSetUpdate();
        v70 = v67;
        v71[0] = v68[0];
        *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)((char *)v68 + 9);
        swift_beginAccess();
        swift_retain();
        outlined retain of SizeFittingState.Child((void **)&v70);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v69 = *(_QWORD *)(v9 + 136);
        *(_QWORD *)(v9 + 136) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v70, v65 | (v64 << 32), v6, isUniquelyReferenced_nonNull_native);
        v7 = *(_QWORD *)(v9 + 136);
        *(_QWORD *)(v9 + 136) = v69;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        if (*(_BYTE *)(a5 + 8) == 1)
        {
          v72[0] = v71[0];
          v66[0] = v71[0];
          outlined retain of [Text.Modifier]((uint64_t)v72);
          v7 = a6(v66, v15 == v62);

          outlined release of SizeFittingState.Child((void **)&v70);
          swift_release();
          outlined release of _IncrementalLayout_Placements((uint64_t)v72);
          v10 = a2;
          if ((v7 & 1) != 0)
          {
            *(_QWORD *)a5 = *a2;
            *(_BYTE *)(a5 + 8) = 0;
          }
        }
        else
        {

          swift_release();
          outlined release of SizeFittingState.Child((void **)&v70);
          v10 = a2;
        }
        v8 = v58;
        v13 = v59;
      }
      else
      {
        swift_release();
      }
      goto LABEL_33;
    }
    v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v52 = *(_DWORD *)(v19 + 24);
    v23 = *(_DWORD *)(v19 + 32);
    v55 = *(_DWORD *)(v19 + 28);
    v24 = *(_BYTE *)(v19 + 40);
    swift_endAccess();
    v60 = v21;
    swift_retain();
    v61 = v22;
    swift_bridgeObjectRetain();
    v7 = v20;
    swift_release();
    v51 = v24;
    if ((v24 & 1) != 0 || *(_BYTE *)(a5 + 8) == 1)
    {
      v25 = *(_DWORD *)(a4 + 144);
      if (v23 == v25)
        goto LABEL_41;
      v13 = v59;
      swift_beginAccess();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v57 = (id)v7;
      swift_retain();
      v26 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v66[0] = *v59;
      v7 = *(_QWORD *)&v66[0];
      *v59 = 0x8000000000000000;
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v6);
      v29 = *(_QWORD *)(v7 + 16);
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        goto LABEL_38;
      v32 = v27;
      if (*(_QWORD *)(v7 + 24) >= v31)
      {
        if ((v26 & 1) == 0)
        {
          v7 = (uint64_t)v66;
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, v26);
        v7 = *(_QWORD *)&v66[0];
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v6);
        if ((v32 & 1) != (v34 & 1))
          goto LABEL_42;
        v28 = v33;
      }
      v39 = *(_QWORD **)&v66[0];
      if ((v32 & 1) != 0)
      {
        v40 = *(_QWORD *)(*(_QWORD *)&v66[0] + 56) + 48 * v28;
        v41 = *(void **)v40;
        swift_bridgeObjectRelease();

        swift_release();
        *(_QWORD *)v40 = v57;
        *(_QWORD *)(v40 + 8) = v60;
        *(_QWORD *)(v40 + 16) = v61;
        *(_DWORD *)(v40 + 24) = v52;
        *(_DWORD *)(v40 + 28) = v55;
        *(_DWORD *)(v40 + 32) = v25;
        *(_DWORD *)(v40 + 36) = v15;
        *(_BYTE *)(v40 + 40) = v51;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v66[0] + 8 * (v28 >> 6) + 64) |= 1 << v28;
        v42 = v39[6] + 16 * v28;
        *(_DWORD *)v42 = v65;
        *(_DWORD *)(v42 + 4) = v64;
        *(_QWORD *)(v42 + 8) = v6;
        v43 = v39[7] + 48 * v28;
        *(_QWORD *)v43 = v57;
        *(_QWORD *)(v43 + 8) = v60;
        *(_QWORD *)(v43 + 16) = v61;
        *(_DWORD *)(v43 + 24) = v52;
        *(_DWORD *)(v43 + 28) = v55;
        *(_DWORD *)(v43 + 32) = v25;
        *(_DWORD *)(v43 + 36) = v15;
        *(_BYTE *)(v43 + 40) = v51;
        v44 = v39[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (v45)
          goto LABEL_39;
        v39[2] = v46;
        swift_retain();
      }
      v7 = *v59;
      *v59 = (uint64_t)v39;
      swift_release();
      swift_bridgeObjectRelease();
      swift_endAccess();
      v9 = a4;
      v10 = a2;
      v8 = v58;
      if ((*(_BYTE *)(a5 + 8) & 1) != 0)
      {
        *(_QWORD *)&v67 = v61;
        *((_QWORD *)&v67 + 1) = __PAIR64__(v55, v52);
        v7 = a6(&v67, v15 == v62);
        swift_release();

        swift_bridgeObjectRelease_n();
        swift_release();
        v11 = a1;
        if ((v7 & 1) != 0)
        {
          *(_QWORD *)a5 = *a2;
          *(_BYTE *)(a5 + 8) = 0;
        }
      }
      else
      {
        swift_release();

        swift_release();
        swift_bridgeObjectRelease_n();
        v11 = a1;
      }
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v11 = a1;
      v8 = v58;
      v13 = v59;
      v9 = a4;
    }
LABEL_33:
    if (v15 != v62)
    {
      ++v12;
      ++*v10;
      if (v8 != v12)
        continue;
    }
    return v15 != v62;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  *(_QWORD *)&v67 = 0;
  *((_QWORD *)&v67 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain_n();
  v48 = (id)v7;
  swift_retain();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v67 = 0xD00000000000001FLL;
  *((_QWORD *)&v67 + 1) = 0x8000000187BE45B0;
  *(_QWORD *)&v66[0] = __PAIR64__(v64, v65);
  *((_QWORD *)&v66[0] + 1) = v6;
  v49._countAndFlagsBits = _ViewList_ID.Canonical.description.getter();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in SizeFittingState.applyChildren(selectLast:to:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t *, uint64_t *, _QWORD, uint64_t (*)(_QWORD *, uint64_t *, void (*)(_QWORD *__return_ptr, uint64_t *)), _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  id v31;
  uint64_t v32;
  int v33;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  __int128 v41;
  int v42;
  int v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  _QWORD v59[2];
  uint64_t v60;

  v40 = *(_QWORD *)(a1 + 24);
  v42 = *(_DWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 72);
  v45 = *(_DWORD *)(a1 + 104);
  v46 = a2 + 4;
  v47 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v41 = *(_OWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 96);
  swift_beginAccess();
  v12 = *(_DWORD *)(v7 + 16);
  v13 = *(_QWORD *)(v7 + 24);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = *(_OWORD *)(v7 + 32);
  v14 = *(_QWORD *)(v7 + 64);
  v15 = *(_QWORD *)(v7 + 72);
  v16 = *(_BYTE *)(v7 + 80);
  v17 = *(_BYTE *)(v7 + 81);
  v18 = *(_QWORD *)(v7 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v12;
  *(_QWORD *)(v19 + 24) = v13;
  *(_OWORD *)(v19 + 32) = v38;
  *(_OWORD *)(v19 + 48) = v37;
  *(_QWORD *)(v19 + 64) = v14;
  *(_QWORD *)(v19 + 72) = v15;
  *(_BYTE *)(v19 + 80) = v16;
  *(_BYTE *)(v19 + 81) = v17;
  *(_QWORD *)(v19 + 88) = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = a2[7];
  v21 = a2[8];
  __swift_project_boxed_opaque_existential_1(v46, v20);
  v60 = a3;
  v48 = v40;
  v49 = v42;
  v51 = v19;
  v52 = v9;
  v53 = v10;
  v54 = v47;
  v55 = v8;
  v56 = v41;
  v57 = v11;
  v58 = v45;
  v22 = *(void (**)(_QWORD *, uint64_t *, uint64_t *, _QWORD, uint64_t (*)(_QWORD *, uint64_t *, void (*)(_QWORD *__return_ptr, uint64_t *)), _QWORD, uint64_t, uint64_t))(v21 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v59, &v60, &v48, 0, specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), 0, v20, v21);
  v23 = v59[0];
  v24 = v59[1];
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if ((v12 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v23)
    {
      v26 = v24;
      v27 = HIDWORD(v24);
    }
    else
    {
      _ViewOutputs.init()();
      v23 = v48;
      v26 = v49;
      LODWORD(v27) = v50;
    }
    v44 = v27;
    v28 = a2[7];
    v29 = a2[8];
    __swift_project_boxed_opaque_existential_1(v46, v28);
    v30 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 32);
    v31 = a4;
    v32 = v30(v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v33 = *(_DWORD *)(a1 + 144);
    *(_QWORD *)a6 = v31;
    *(_QWORD *)(a6 + 8) = v32;
    *(_QWORD *)(a6 + 16) = v23;
    *(_DWORD *)(a6 + 24) = v26;
    *(_DWORD *)(a6 + 28) = v44;
    *(_DWORD *)(a6 + 32) = v33;
    *(_DWORD *)(a6 + 36) = a5;
    *(_BYTE *)(a6 + 40) = 0;
  }
  return result;
}

uint64_t closure #3 in SizeFittingState.applyChildren(selectLast:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  id v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;

  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 44);
  v9 = *(unsigned int *)(a1 + 52);
  v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 == (v9 == a2))
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v12 = v7;
  }
  else if (v9 == a2)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v11 = v7;
    AGSubgraphAddChild();
    AGSubgraphRef.didReinsert()();
    v18 = *(_OWORD *)(a3 + 112);
    _ViewOutputs.attachIndirectOutputs(to:)();
    LOBYTE(v10) = 1;
  }
  else
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v13 = v7;
    AGSubgraphRef.willRemove()();
    AGSubgraphRemoveChild();
    LOBYTE(v10) = 0;
  }
  *(_QWORD *)&v18 = v7;
  *((_QWORD *)&v18 + 1) = v6;
  v19 = v8;
  v20 = v17;
  v21 = v16;
  v22 = v9;
  v23 = v10;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24 = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 136) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v18, v5, v4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a3 + 136) = v24;
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

Swift::Void __swiftcall SizeFittingState.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 136);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v6)
      goto LABEL_23;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    ++v7;
    if (!v15)
    {
      v7 = v14 + 1;
      if (v14 + 1 >= v6)
        goto LABEL_23;
      v15 = *(_QWORD *)(v2 + 8 * v7);
      if (!v15)
      {
        v7 = v14 + 2;
        if (v14 + 2 >= v6)
          goto LABEL_23;
        v15 = *(_QWORD *)(v2 + 8 * v7);
        if (!v15)
        {
          v7 = v14 + 3;
          if (v14 + 3 >= v6)
            goto LABEL_23;
          v15 = *(_QWORD *)(v2 + 8 * v7);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_5:
    v10 = *(_QWORD *)(v1 + 56) + 48 * v9;
    v11 = *(void **)v10;
    v12 = *(_BYTE *)(v10 + 40);
    swift_retain();
    swift_bridgeObjectRetain();
    v13 = v11;
    AGSubgraphRef.willInvalidate(isInserted:)(v12);
    AGSubgraphInvalidate();
    swift_bridgeObjectRelease();
    swift_release();

  }
  v16 = v14 + 4;
  if (v16 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v2 + 8 * v16);
  if (v15)
  {
    v7 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v15 = *(_QWORD *)(v2 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t SizeFittingState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SizeFittingState.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SizeFittingMux.updateValue()()
{
  _ViewInputs.size.getter();
  AGGraphGetValue();
  ViewSize.proposal.getter();
  swift_retain();
  SizeFittingState.applyChildren(selectLast:to:)(1);
  return swift_release();
}

BOOL closure #1 in SizeFittingMux.updateValue()(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  double v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v19 = *a1;
  v20 = a1[1];
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  AGGraphGetValue();
  v19 = a4;
  LOBYTE(v20) = a5 & 1;
  v21 = a6;
  v22 = a7 & 1;
  if ((Axis.Set.contains(_:)() & 1) != 0)
    _ProposedSize.width.setter();
  if ((Axis.Set.contains(_:)() & 1) != 0)
    _ProposedSize.height.setter();
  LayoutComputer.sizeThatFits(_:)();
  if ((a2 & 1) != 0)
  {
    swift_release();
    return 1;
  }
  else
  {
    v15 = v12;
    v16 = v13;
    v17 = *(_BYTE *)AGGraphGetValue();
    v19 = a4;
    LOBYTE(v20) = a5 & 1;
    v21 = a6;
    v22 = a7 & 1;
    v14 = _SizeFittingRoot.size(_:fits:)(v15, v16, (uint64_t)&v19, v17);
    swift_release();
  }
  return v14;
}

void protocol witness for ObservedAttribute.destroy() in conformance SizeFittingMux()
{
  SizeFittingState.invalidate()();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance SizeFittingMux()
{
  SizeFittingState.invalidate()();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeFittingMux()
{
  lazy protocol witness table accessor for type SizeFittingMux and conformance SizeFittingMux();
  return static AsyncAttribute.flags.getter();
}

uint64_t SizeFittingLayoutComputer.updateValue()()
{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer();
    lazy protocol witness table accessor for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

BOOL closure #1 in closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, char a5, uint64_t a6, char a7, _QWORD *a8)
{
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v25 = *a1;
  v26 = a1[1];
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  v25 = a4;
  LOBYTE(v26) = a5 & 1;
  v27 = a6;
  v28 = a7 & 1;
  if ((Axis.Set.contains(_:)() & 1) != 0)
    _ProposedSize.width.setter();
  if ((Axis.Set.contains(_:)() & 1) != 0)
    _ProposedSize.height.setter();
  LayoutComputer.sizeThatFits(_:)();
  v15 = v14;
  v17 = v16;
  v25 = a4;
  v18 = a5 & 1;
  LOBYTE(v26) = v18;
  v27 = a6;
  v19 = a7 & 1;
  v28 = v19;
  LayoutComputer.sizeThatFits(_:)();
  *a8 = v20;
  a8[1] = v21;
  v22 = *a3;
  v25 = a4;
  LOBYTE(v26) = v18;
  v27 = a6;
  v28 = v19;
  v23 = _SizeFittingRoot.size(_:fits:)(v15, v17, (uint64_t)&v25, v22);
  swift_release();
  return v23;
}

uint64_t closure #1 in SizeFittingLayoutComputer.Engine.spacing()()
{
  swift_retain();
  SizeFittingState.applyChildren(selectLast:to:)(0);
  return swift_release();
}

uint64_t closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.spacing()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  LayoutComputer.spacing()();
  swift_release();
  *a3 = v5;
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  swift_retain();
  SizeFittingState.applyChildren(selectLast:to:)(0);
  return swift_release();
}

uint64_t closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)(double *a1, char a2, char *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  double *Value;
  double v15;
  double v16;
  double v17;
  char v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  char v34;

  v27 = *a1;
  v28 = a1[1];
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
    v15 = v27;
    v16 = v28;
  }
  else
  {
    Value = (double *)AGGraphGetValue();
    v15 = *Value;
    v16 = Value[1];
    swift_retain();
  }
  v28 = a6;
  v30 = a8;
  ViewSize.proposal.getter();
  v17 = v31;
  v18 = LOBYTE(v32);
  v27 = v31;
  LOBYTE(v28) = LOBYTE(v32);
  v29 = v33;
  LOBYTE(v30) = v34;
  if ((Axis.Set.contains(_:)() & 1) != 0)
    _ProposedSize.width.setter();
  if ((Axis.Set.contains(_:)() & 1) != 0)
    _ProposedSize.height.setter();
  v31 = v15;
  v32 = v16;
  LayoutComputer.sizeThatFits(_:)();
  if ((a2 & 1) != 0
    || (v21 = *a3,
        v27 = v17,
        LOBYTE(v28) = v18,
        v29 = v33,
        LOBYTE(v30) = v34,
        _SizeFittingRoot.size(_:fits:)(v19, v20, (uint64_t)&v27, v21)))
  {
    v31 = v15;
    v32 = v16;
    v27 = a5;
    v28 = a6;
    v29 = a7;
    v30 = a8;
    v22 = LayoutComputer.explicitAlignment(_:at:)();
    v24 = v23;
    swift_release();
    *(_QWORD *)a4 = v22;
    *(_BYTE *)(a4 + 8) = v24 & 1;
    return 1;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t protocol witness for LayoutEngine.spacing() in conformance SizeFittingLayoutComputer.Engine@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  static Spacing.zero.getter();
  result = AGGraphWithUpdate();
  *a1 = v3;
  return result;
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance SizeFittingLayoutComputer.Engine()
{
  double v0;
  double v1;

  swift_retain();
  ViewSizeCache.get(_:makeValue:)();
  v1 = v0;
  swift_release();
  return v1;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance SizeFittingLayoutComputer.Engine()
{
  AGGraphWithUpdate();
  return 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeFittingLayoutComputer()
{
  lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer();
  return static AsyncAttribute.flags.getter();
}

double key path getter for _ViewInputs.requestedViewThatFitsRepresentation : _ViewInputs@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t _GraphInputs.requestedViewThatFitsRepresentation.getter()
{
  uint64_t v1;

  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t _GraphInputs.requestedViewThatFitsRepresentation.setter()
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t partial apply for closure #1 in static ViewThatFits._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ViewThatFits._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for SizeFittingState()
{
  return objc_opt_self();
}

void (*_ViewInputs.requestedViewThatFitsRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedViewThatFitsRepresentation.modify;
}

void _ViewInputs.requestedViewThatFitsRepresentation.modify(_OWORD **a1)
{
  _OWORD *v1;

  v1 = *a1;
  (*a1)[1] = **a1;
  PropertyList.subscript.setter();
  free(v1);
}

double key path getter for _GraphInputs.requestedViewThatFitsRepresentation : _GraphInputs@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void (*_GraphInputs.requestedViewThatFitsRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedViewThatFitsRepresentation.modify;
}

unint64_t lazy protocol witness table accessor for type SizeFittingMux and conformance SizeFittingMux()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux;
  if (!lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizeFittingMux, &unk_1E1AB9598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux;
  if (!lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizeFittingMux, &unk_1E1AB9598);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizeFittingLayoutComputer, &unk_1E1AEBCA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizeFittingLayoutComputer, &unk_1E1AEBCA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizeFittingLayoutComputer, &unk_1E1AEBCA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in ViewThatFits<A>()
{
  return &protocol witness table for ViewThatFits<A>;
}

uint64_t sub_1875F6478()
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t sub_1875F64C4()
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t getEnumTagSinglePayload for ViewThatFits(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 1) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 1) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1875F65CC + 4 * byte_187C43600[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for ViewThatFits(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 1) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 1) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t method lookup function for SizeFittingState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static PlatformViewThatFitsRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t destroy for SizeFittingState.Child(id *a1)
{

  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SizeFittingState.Child(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingState.Child(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SizeFittingState.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SizeFittingState.Child()
{
  return &type metadata for SizeFittingState.Child;
}

void *type metadata accessor for SizeFittingLayoutComputer()
{
  return &unk_1E1AEBCA8;
}

void *type metadata accessor for SizeFittingMux()
{
  return &unk_1E1AB9598;
}

ValueMetadata *type metadata accessor for _GraphInputs.ViewThatFitsRepresentationKey()
{
  return &type metadata for _GraphInputs.ViewThatFitsRepresentationKey;
}

unint64_t lazy protocol witness table accessor for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizeFittingLayoutComputer.Engine, &unk_1E1B19F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine);
  }
  return result;
}

BOOL partial apply for closure #1 in SizeFittingMux.updateValue()(uint64_t *a1, char a2)
{
  uint64_t v2;

  return closure #1 in SizeFittingMux.updateValue()(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48));
}

uint64_t partial apply for closure #1 in SizeFittingState.applyChildren(selectLast:to:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in SizeFittingState.applyChildren(selectLast:to:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(uint64_t (**)(__int128 *, BOOL))(v1 + 48));
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(_QWORD *a1, uint64_t *a2, void (*a3)(_QWORD *__return_ptr, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 20);
  v10 = *a2;
  v11 = v4;
  v12 = v5;
  v7 = *(_OWORD *)(a2 + 5);
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v7;
  v15 = *(_OWORD *)(a2 + 7);
  v16 = a2[9];
  v17 = v6;
  a3(v18, &v10);
  v8 = v18[1];
  *a1 = v18[0];
  a1[1] = v8;
  return 0;
}

void **outlined retain of SizeFittingState.Child(void **a1)
{
  void *v2;
  id v3;

  v2 = *a1;
  swift_retain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

void **outlined release of SizeFittingState.Child(void **a1)
{
  void *v2;

  v2 = *a1;
  swift_bridgeObjectRelease();

  swift_release();
  return a1;
}

uint64_t initializeWithCopy for SizeFittingLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v3;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  return a1;
}

uint64_t assignWithTake for SizeFittingLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingLayoutComputer.Engine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 177))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SizeFittingLayoutComputer.Engine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SizeFittingLayoutComputer.Engine()
{
  return &unk_1E1B19F38;
}

uint64_t partial apply for closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  return closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)();
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)(double *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)(a1, a2, *(char **)(v2 + 48), *(_QWORD *)(v2 + 56), *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40));
}

double partial apply for closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)()
{
  AGGraphWithUpdate();
  return 0.0;
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)()
{
  return SizeFittingState.applyChildren(selectLast:to:)(0);
}

BOOL partial apply for closure #1 in closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(_QWORD **)(v2 + 56));
}

uint64_t partial apply for closure #1 in SizeFittingLayoutComputer.Engine.spacing()()
{
  return closure #1 in SizeFittingLayoutComputer.Engine.spacing()();
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.spacing()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.spacing()(a1, a2, *(_QWORD **)(v2 + 16));
}

ValueMetadata *type metadata accessor for HorizontalStackControlGroupStyle()
{
  return &type metadata for HorizontalStackControlGroupStyle;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in HorizontalStackControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance HorizontalStackControlGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = static VerticalAlignment.center.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0x4020000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>)
  {
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Content>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<ControlGroupStyleConfiguration.Content>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Content>)
  {
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Content>);
  }
}

uint64_t _ScrollableContentProvider.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)()
{
  return 0;
}

uint64_t _ScrollViewGestureProvider.scrollableDirections(proxy:)@<X0>(_BYTE *a1@<X8>)
{
  return _ScrollViewGestureProvider.scrollableDirections(proxy:)(a1);
}

{
  return ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, a1);
}

uint64_t _ScrollViewGestureProvider.defaultScrollableDirections(proxy:)@<X0>(_BYTE *a1@<X8>)
{
  return ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, a1);
}

uint64_t _ScrollViewGestureProvider.gesture(proxy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t result;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v5 = *((_DWORD *)a1 + 2);
  v12 = *a1;
  v4 = v12;
  v13 = v5;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(a2 + 8))(&v14, &v12);
  v6 = v14;
  result = swift_beginAccess();
  v8 = 10.0;
  if (((*(unsigned __int8 *)(v4 + 146) << 16) & 0xC00000) == 0x400000)
  {
    v9 = *(_QWORD *)(v4 + 136);
    if (*(_QWORD *)(v9 + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    v10 = fabs(*(double *)(v9 + 48));
    v11 = fabs(*(double *)(v9 + 136));
    if (v10 <= v11)
      v10 = v11;
    if (v10 > 7.5)
      v8 = 0.0;
  }
  if (one-time initialization token for all != -1)
    result = swift_once();
  *(double *)a3 = v8;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t protocol witness for _ScrollViewGestureProvider.scrollableDirections(proxy:) in conformance EmptyGestureProvider@<X0>(_BYTE *a1@<X8>)
{
  return ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, a1);
}

uint64_t protocol witness for _ScrollViewGestureProvider.gestureMask(proxy:) in conformance EmptyGestureProvider(uint64_t *a1)
{
  return specialized _ScrollViewGestureProvider.gestureMask(proxy:)(*a1);
}

double static _ScrollViewConfig.decelerationRateNormal.getter()
{
  return 0.998;
}

double static _ScrollViewConfig.decelerationRateFast.getter()
{
  return 0.99;
}

uint64_t _ScrollViewConfig.contentOffset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return outlined copy of _ScrollViewConfig.ContentOffset(v2, v3, v4, v5, v6);
}

__n128 _ScrollViewConfig.contentOffset.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  result = v6;
  *(__n128 *)v1 = v6;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*_ScrollViewConfig.contentOffset.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.contentInsets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void _ScrollViewConfig.contentInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
}

uint64_t (*_ScrollViewConfig.contentInsets.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.decelerationRate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void _ScrollViewConfig.decelerationRate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*_ScrollViewConfig.decelerationRate.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.alwaysBounceVertical.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t _ScrollViewConfig.alwaysBounceVertical.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.alwaysBounceVertical.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.alwaysBounceHorizontal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t _ScrollViewConfig.alwaysBounceHorizontal.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.alwaysBounceHorizontal.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.gestureProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TableColumnList(v1 + 88, a1);
}

uint64_t _ScrollViewConfig.gestureProvider.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 88;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of OptionalBinaryInteger(a1, v3);
}

uint64_t (*_ScrollViewConfig.gestureProvider.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.stopDraggingImmediately.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t _ScrollViewConfig.stopDraggingImmediately.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 128) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.stopDraggingImmediately.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.isScrollEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t _ScrollViewConfig.isScrollEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 129) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.isScrollEnabled.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.showsHorizontalIndicator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t _ScrollViewConfig.showsHorizontalIndicator.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 130) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.showsHorizontalIndicator.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.showsVerticalIndicator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 131);
}

uint64_t _ScrollViewConfig.showsVerticalIndicator.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 131) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.showsVerticalIndicator.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.indicatorInsets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

void _ScrollViewConfig.indicatorInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[17] = a1;
  v4[18] = a2;
  v4[19] = a3;
  v4[20] = a4;
}

uint64_t (*_ScrollViewConfig.indicatorInsets.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = &type metadata for EmptyGestureProvider;
  *(_QWORD *)(a1 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_DWORD *)(a1 + 128) = 16843008;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t _ScrollView.contentProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*_ScrollView.contentProvider.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollView.config.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of _ScrollViewConfig(v2 + *(int *)(a1 + 36), a2);
}

uint64_t _ScrollView.config.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of _ScrollViewConfig(a1, v2 + *(int *)(a2 + 36));
}

uint64_t (*_ScrollView.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double default argument 1 of _ScrollView.init(contentProvider:config:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = &type metadata for EmptyGestureProvider;
  *(_QWORD *)(a1 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_DWORD *)(a1 + 128) = 16843008;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

__n128 _ScrollView.init(contentProvider:config:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for _ScrollView(0, a3, a4, v9) + 36);
  v11 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v10 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v10 + 144) = v11;
  *(_QWORD *)(v10 + 160) = *(_QWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v12;
  v13 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v10 + 112) = v13;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v14;
  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 + 32);
  *(__n128 *)(v10 + 48) = result;
  return result;
}

uint64_t _ScrollView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, v3);
  (*(void (**)(char *, double))(v6 + 16))((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 24) = v11;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for _ClipEffect<Rectangle>();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
  v20[0] = AssociatedConformanceWitness;
  v20[1] = v15;
  v16 = MEMORY[0x1E0CE2E70];
  v19[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v20);
  v19[1] = MEMORY[0x1E0CE2BC0];
  MEMORY[0x18D75FFDC](v16, v13, v19);
  result = GeometryReader.init(content:)();
  *a2 = result;
  a2[1] = v18;
  return result;
}

uint64_t content #1 <A>(geom:) in _ScrollView.body.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  char *v45;
  uint64_t AssociatedConformanceWitness;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;

  v54 = a2;
  v63 = a5;
  v60 = type metadata accessor for _ScrollView.Main(0, a3, a4, a4);
  v57 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v8);
  v10 = (char *)&v51 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v55 = (char *)&v51 - v13;
  type metadata accessor for _ClipEffect<Rectangle>();
  v14 = type metadata accessor for ModifiedContent();
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v59 = (char *)&v51 - v16;
  v18 = type metadata accessor for _ScrollView(0, a3, a4, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v51 - v24;
  v26 = *((_DWORD *)a1 + 12);
  v56 = v27;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v53 = *a1;
  v52 = a1[1];
  v51 = a1[2];
  v28((char *)&v51 - v24, v54, v18);
  v65 = v53;
  v66 = v52;
  v67 = v51;
  v68 = v26;
  GeometryProxy.safeAreaInsets.getter();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  if ((EdgeInsets.isEmpty.getter() & 1) == 0)
  {
    v37 = (double *)&v25[*(int *)(v18 + 36)];
    v38 = v32 + v37[6];
    v39 = v34 + v37[7];
    v40 = v36 + v37[8];
    v37[5] = v30 + v37[5];
    v37[6] = v38;
    v37[7] = v39;
    v37[8] = v40;
    v41 = v32 + v37[18];
    v42 = v34 + v37[19];
    v43 = v36 + v37[20];
    v37[17] = v30 + v37[17];
    v37[18] = v41;
    v37[19] = v42;
    v37[20] = v43;
  }
  v28(v21, (uint64_t)v25, v18);
  v44 = v56;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v10, v21, v18);
  v45 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v10, a3, a4);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v60);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v47 = v59;
  View.clipped(antialiased:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v45, AssociatedTypeWitness);
  v48 = lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
  v64[0] = AssociatedConformanceWitness;
  v64[1] = v48;
  v49 = v62;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v62, v64);
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v25, v18);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ScrollView<A>.Main(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ScrollView<A>.Main()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _ScrollView<A>.Main(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main, a1);
  specialized PrimitiveView.body.getter();
}

double View._scrollable(stretchChildrenToMaxHeight:horizontal:vertical:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, int *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  double result;
  __int128 v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[36];
  _BYTE v41[30];
  __int128 v42;
  __int128 v43;
  _OWORD v44[3];

  v6 = v5;
  v37 = a3;
  v38 = a1;
  v8 = a2;
  v39 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for _AligningContentProvider(0, v12, v13, v12);
  v15 = *((_QWORD *)v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v36 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v6, a4, v21);
  v24 = v14[9];
  v25 = v14[10];
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v23, v11, a4);
  v23[v24] = v8;
  v26 = v38;
  v23[v25] = v37;
  v23[v14[11]] = v26;
  (*(void (**)(char *, char *, int *))(v15 + 16))(v18, v23, v14);
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AligningContentProvider<A>, v14);
  v42 = 0u;
  v43 = 0u;
  LOBYTE(v44[0]) = 0;
  memset((char *)v44 + 8, 0, 32);
  memset(&v40[4], 0, 32);
  (*(void (**)(char *, int *))(v15 + 8))(v23, v14);
  v28 = *(void (**)(uint64_t, char *, int *))(v15 + 32);
  v29 = v39;
  v28(v39, v18, v14);
  v31 = v29 + *(int *)(type metadata accessor for _ScrollView(0, (uint64_t)v14, v27, v30) + 36);
  v32 = v44[1];
  *(_OWORD *)(v31 + 32) = v44[0];
  *(_OWORD *)(v31 + 48) = v32;
  v33 = v43;
  *(_OWORD *)v31 = v42;
  *(_OWORD *)(v31 + 16) = v33;
  *(_OWORD *)(v31 + 82) = *(_OWORD *)v41;
  *(_OWORD *)(v31 + 96) = *(_OWORD *)&v41[14];
  *(_DWORD *)(v31 + 128) = 16843008;
  result = *(double *)v40;
  v35 = *(_OWORD *)&v40[16];
  *(_OWORD *)(v31 + 132) = *(_OWORD *)v40;
  *(_QWORD *)(v31 + 64) = *(_QWORD *)&v44[2];
  *(_QWORD *)(v31 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(v31 + 80) = 0;
  *(_QWORD *)(v31 + 112) = &type metadata for EmptyGestureProvider;
  *(_QWORD *)(v31 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_OWORD *)(v31 + 148) = v35;
  *(_DWORD *)(v31 + 164) = *(_DWORD *)&v40[32];
  return result;
}

uint64_t (*_AligningContentProvider.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AligningContentProvider.horizontal.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _AligningContentProvider.horizontal.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_AligningContentProvider.horizontal.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AligningContentProvider.vertical.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t _AligningContentProvider.vertical.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*_AligningContentProvider.vertical.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AligningContentProvider.init(content:horizontal:vertical:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v11 = (int *)type metadata accessor for _AligningContentProvider(0, a4, a5, a4);
  v12 = v11[9];
  v13 = v11[10];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  *(_BYTE *)(a6 + v12) = a2;
  *(_BYTE *)(a6 + v13) = a3;
  *(_BYTE *)(a6 + v11[11]) = 0;
  return result;
}

uint64_t _AligningContentProvider.scrollableContent.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[3];

  v5 = *(_BYTE *)(v4 + *(int *)(a1 + 40));
  v6 = *(_BYTE *)(v4 + *(int *)(a1 + 44));
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v11[0] = *(_BYTE *)(v4 + *(int *)(a1 + 36));
  v11[1] = v5;
  v11[2] = v6;
  v9 = type metadata accessor for _AligningContentProvider.AligningContentProviderLayout(0, v7, v8, a4);
  return MEMORY[0x18D75B4AC](v11, v7, v9, v8);
}

uint64_t _AligningContentProvider.AligningContentProviderLayout.placement(of:in:)()
{
  return _AlignmentLayout.placement(of:in:)();
}

uint64_t _AligningContentProvider.AligningContentProviderLayout.sizeThatFits(in:context:child:)(unint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  v13 = *(unsigned __int8 *)(v3 + 2);
  v27 = *a1;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  static _ProposedSize.unspecified.getter();
  v19 = v23;
  LOBYTE(v20) = v24;
  v21 = v25;
  v22 = v26;
  if ((MEMORY[0x18D757594](&v27, &v19) & 1) == 0)
  {
    v19 = __PAIR64__(v11, v10);
    v20 = v12;
    _ProposedSize.init(width:height:)();
    v23 = v27;
    LOBYTE(v24) = v28;
    v25 = v29;
    v26 = v30;
    LayoutProxy.size(in:)();
  }
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  _ProposedSize.width.getter();
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  _ProposedSize.height.getter();
  _ProposedSize.init(width:height:)();
  v14 = v27;
  v15 = v28;
  v16 = v29;
  v17 = v30;
  if (v13)
  {
    _ProposedSize.width.getter();
    _ProposedSize.init(width:height:)();
    v14 = v27;
    v15 = v28;
    v16 = v29;
    v17 = v30;
  }
  v27 = v14;
  v28 = v15;
  v29 = v16;
  v30 = v17;
  v23 = v8;
  v24 = v9;
  v19 = __PAIR64__(v11, v10);
  v20 = v12;
  return _AlignmentLayout.sizeThatFits(in:context:child:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AligningContentProvider<A>.AligningContentProviderLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AligningContentProvider<A>.AligningContentProviderLayout, a5);
  return static UnaryLayout._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AligningContentProvider<A>.AligningContentProviderLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AligningContentProvider<A>.AligningContentProviderLayout, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t specialized _ScrollViewGestureProvider.defaultGestureMask(proxy:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int16 v3;
  uint64_t v4;
  double v5;
  double v6;

  v1 = *a1;
  result = swift_beginAccess();
  v3 = *(unsigned __int8 *)(v1 + 146);
  if (v3 >> 6 == 1)
  {
    v4 = *(_QWORD *)(v1 + 136);
    if (*(_QWORD *)(v4 + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    v5 = fabs(*(double *)(v4 + 48));
    v6 = fabs(*(double *)(v4 + 136));
    if (v5 <= v6)
      v5 = v6;
    if (v5 > 7.5)
      return 1;
  }
  else if (!(v3 >> 6) && ((*(unsigned __int8 *)(v1 + 146) << 16) & 0x10000) == 0)
  {
    return 1;
  }
  return 3;
}

uint64_t outlined assign with take of _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  assignWithTake for _ScrollViewConfig(a2, a1);
  return a2;
}

uint64_t type metadata accessor for _ScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollView);
}

uint64_t sub_1875F8888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for _ScrollView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  v9 = v8 + *(int *)(v6 + 36);
  outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_BYTE *)(v9 + 32));
  __swift_destroy_boxed_opaque_existential_1(v9 + 88);
  return swift_deallocObject();
}

uint64_t partial apply for content #1 <A>(geom:) in _ScrollView.body.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _ScrollView(0, v6, v7, a2) - 8) + 80);
  return content #1 <A>(geom:) in _ScrollView.body.getter(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

void type metadata accessor for _ClipEffect<Rectangle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ClipEffect<Rectangle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v0 = type metadata accessor for _ClipEffect();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<Rectangle>);
  }
}

uint64_t type metadata accessor for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AligningContentProvider);
}

uint64_t type metadata accessor for _AligningContentProvider.AligningContentProviderLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AligningContentProvider.AligningContentProviderLayout);
}

_UNKNOWN **base witness table accessor for View in _ScrollView<A>.Main()
{
  return &protocol witness table for _ScrollView<A>.Main;
}

{
  return &protocol witness table for _ScrollView<A>.Main;
}

uint64_t associated type witness table accessor for View.Body : View in _ScrollView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for Animatable in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for MultiViewModifier in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PrimitiveViewModifier in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for ViewModifier in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return &protocol witness table for _AligningContentProvider<A>.AligningContentProviderLayout;
}

uint64_t associated type witness table accessor for _ScrollableContentProvider.ScrollableContent : View in _AligningContentProvider<A>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a2 + 24);
  v3[1] = &protocol witness table for _AligningContentProvider<A>.AligningContentProviderLayout;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], a1, v3);
}

uint64_t dispatch thunk of _ScrollableContentProvider.scrollableContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _ScrollableContentProvider.root(scrollView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of _ScrollableContentProvider.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _ScrollViewGestureProvider.scrollableDirections(proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of _ScrollViewGestureProvider.gestureMask(proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for _ScrollViewConfig(uint64_t a1)
{
  outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return __swift_destroy_boxed_opaque_existential_1(a1 + 88);
}

uint64_t initializeWithCopy for _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 88, a2 + 88);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of _ScrollViewConfig.ContentOffset(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of _ScrollViewConfig.ContentOffset(v5, v6, v7, v8, v9);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollViewConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ScrollViewConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScrollViewConfig()
{
  return &type metadata for _ScrollViewConfig;
}

uint64_t destroy for _ScrollViewConfig.ContentOffset(uint64_t a1)
{
  return outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of _ScrollViewConfig.ContentOffset(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of _ScrollViewConfig.ContentOffset(v4, v6, v5, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for _ScrollViewConfig.ContentOffset()
{
  return &type metadata for _ScrollViewConfig.ContentOffset;
}

uint64_t type metadata completion function for _ScrollView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ScrollView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x70);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 168) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1875F90B8 + 4 * byte_187C43AA0[v10]))();
  }
}

void storeEnumTagSinglePayload for _ScrollView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF58)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFF58)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 168);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1875F9230()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1875F92D4);
}

void sub_1875F9238(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1875F9240);
  JUMPOUT(0x1875F92D4);
}

void sub_1875F9284()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875F92D4);
}

void sub_1875F928C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875F92D4);
}

uint64_t sub_1875F9294(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1875F92A0);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 112) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1875F92D4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t getEnumTagSinglePayload for _ScrollView.Main(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x70);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 168) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1875F9368 + 4 * byte_187C43AAF[v10]))();
  }
}

void storeEnumTagSinglePayload for _ScrollView.Main(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF58)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFF58)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 168);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1875F94E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1875F9584);
}

void sub_1875F94E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1875F94F0);
  JUMPOUT(0x1875F9584);
}

void sub_1875F9534()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875F9584);
}

void sub_1875F953C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1875F9584);
}

uint64_t sub_1875F9544(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1875F9550);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 112) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1875F9584);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for _ScrollView.Main(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollView.Main);
}

uint64_t type metadata completion function for _AligningContentProvider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _AligningContentProvider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _BYTE *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 3) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v11 = (char *)v4 + v6;
    *v11 = *((_BYTE *)a2 + v6);
    v11[1] = *((_BYTE *)a2 + v6 + 1);
    v11[2] = *((_BYTE *)a2 + v6 + 2);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  return a1;
}

uint64_t assignWithCopy for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  return a1;
}

uint64_t initializeWithTake for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  return a1;
}

uint64_t assignWithTake for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for _AligningContentProvider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 3;
  v10 = 8 * (v7 + 3);
  if ((_DWORD)v7 != 0 && v7 < 0xFFFFFFFD)
    goto LABEL_8;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_15;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_22;
LABEL_8:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_22;
LABEL_15:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -3)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1875F990C + 4 * byte_187C43ABE[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_15;
  }
LABEL_22:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(a1 + v7 + 2);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _AligningContentProvider(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 3;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -3)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 3);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1875F9B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  swift_getAssociatedTypeWitness();
  type metadata accessor for _ClipEffect<Rectangle>();
  v0 = type metadata accessor for ModifiedContent();
  v1 = type metadata accessor for ModifiedContent();
  v6[0] = swift_getAssociatedConformanceWitness();
  v6[1] = lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
  v2 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v6);
  v5[1] = MEMORY[0x1E0CE2BC0];
  MEMORY[0x18D75FFDC](v2, v1, v5);
  v3 = type metadata accessor for GeometryReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2768], v3);
}

ValueMetadata *type metadata accessor for EmptyGestureProvider()
{
  return &type metadata for EmptyGestureProvider;
}

uint64_t specialized _ScrollViewGestureProvider.gestureMask(proxy:)(uint64_t a1)
{
  uint64_t result;
  unsigned __int16 v3;
  uint64_t v4;
  double v5;
  double v6;

  result = swift_beginAccess();
  v3 = *(unsigned __int8 *)(a1 + 146);
  if (v3 >> 6 == 1)
  {
    v4 = *(_QWORD *)(a1 + 136);
    if (*(_QWORD *)(v4 + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    v5 = fabs(*(double *)(v4 + 48));
    v6 = fabs(*(double *)(v4 + 136));
    if (v5 <= v6)
      v5 = v6;
    if (v5 > 7.5)
      return 1;
  }
  else if (!(v3 >> 6) && ((*(unsigned __int8 *)(a1 + 146) << 16) & 0x10000) == 0)
  {
    return 1;
  }
  return 3;
}

ValueMetadata *type metadata accessor for TopScrollIndicatorFollowsContentOffsetKey()
{
  return &type metadata for TopScrollIndicatorFollowsContentOffsetKey;
}

uint64_t type metadata completion function for HostingScrollViewResponder()
{
  return swift_initClassMetadata2();
}

double HostingScrollViewResponder.containsGlobalPoints(_:cacheKey:options:)(uint64_t *a1, double *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v12[4];

  v7 = *a4;
  if ((static UnifiedHitTestingFeature.isEnabled.getter() & 1) != 0)
  {
    v12[0] = v7;
    UIViewResponder.containsGlobalPoints(_:cacheKey:options:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), v12);
    return v8;
  }
  else
  {
    v12[3] = v7;
    swift_beginAccess();
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)();
    v9 = v10;
    swift_endAccess();
  }
  return v9;
}

uint64_t HostingScrollViewResponder.addContentPath(to:kind:in:observer:)()
{
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.addContentPath(to:kind:in:observer:)();
  return swift_endAccess();
}

uint64_t HostingScrollViewResponder.__deallocating_deinit()
{
  PlatformUnaryViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HostingScrollViewResponder()
{
  return type metadata accessor for HostingScrollViewResponder();
}

uint64_t Link.init(configuration:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v10 = type metadata accessor for LinkDestination.Configuration();
  v11 = MEMORY[0x1E0CE2DE8];
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LinkDestination();
  v16 = MEMORY[0x1E0CE2E18];
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v21 + 16))(a5, a2, a3, v18);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))v11);
  LinkDestination.init(configuration:)();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a2, a3);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))v11);
  v23 = type metadata accessor for Link(0, a3, a4, v22);
  return outlined init with take of TableCellFormula((uint64_t)v20, a5 + *(int *)(v23 + 36), (uint64_t (*)(_QWORD))v16);
}

uint64_t Link.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link.init(destination:label:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a5;
  v23 = a4;
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LinkDestination.Configuration();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a1, v10, v17);
  v20 = LinkDestination.Configuration.init(url:isSensitive:)();
  a2(v20);
  Link.init(configuration:label:)((uint64_t)v19, (uint64_t)v9, a3, v23, v22);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
}

uint64_t Link.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  uint64_t v55;
  _BYTE v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[3];

  v53 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  v47 = *(_QWORD *)(a1 + 16);
  v46 = v4;
  v5 = type metadata accessor for Button(255, v47, v4, a2);
  v48 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v5);
  v49 = type metadata accessor for AccessibilityLinkModifier(0, v5, v48, v6);
  v52 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v7);
  v55 = (uint64_t)&v42 - v8;
  v9 = type metadata accessor for LinkDestination();
  v10 = MEMORY[0x1E0CE2E18];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v9, v13);
  v14 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v54 = (_WORD *)((char *)&v42 - v17);
  v43 = type metadata accessor for ModifiedContent();
  v42 = type metadata accessor for ModifiedContent();
  v45 = type metadata accessor for ModifiedContent();
  v18 = type metadata accessor for _ConditionalContent();
  v50 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v42 - v24;
  v26 = v44;
  v27 = v44 + *(int *)(a1 + 36);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v14, (uint64_t (*)(_QWORD))v10);
  v28 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v29 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v14, v29 + v28, (uint64_t (*)(_QWORD))v10);
  v57 = v47;
  v58 = v46;
  v59 = v26;
  Button.init(action:label:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in LinkButtonModifierBody.body(content:), v29, (void (*)(uint64_t))partial apply for closure #1 in Link.body.getter, (uint64_t)v56, v47, v46, v54);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v14, (uint64_t (*)(_QWORD))v10);
  v30 = v48;
  AccessibilityLinkModifier.init(_:isArchive:)((uint64_t)v14, 0, v5, v48, v55);
  v31 = v49;
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLinkModifier<A>, v49);
  v63[0] = v30;
  v63[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v33 = MEMORY[0x1E0CE2E70];
  v62[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v43, v63);
  v62[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v34 = MEMORY[0x18D75FFDC](v33, v42, v62);
  v61[0] = v30;
  v61[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v35 = MEMORY[0x18D75FFDC](v33, v45, v61);
  v60[0] = v34;
  v60[1] = v35;
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v18, v60);
  v37 = v55;
  v38 = v30;
  v39 = v54;
  View.accessibilityConfiguration<A>(_:)(v55, v5, v31, v38, v32);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v37, v31);
  (*(void (**)(_WORD *, uint64_t))(v51 + 8))(v39, v5);
  static ViewBuilder.buildExpression<A>(_:)(v21, v18, v36);
  v40 = *(void (**)(char *, uint64_t))(v50 + 8);
  v40(v21, v18);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v25, v18, v53);
  return ((uint64_t (*)(char *, uint64_t))v40)(v25, v18);
}

uint64_t sub_1875FA408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for LinkDestination();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
  v4 = v3 + *(int *)(v1 + 24);
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Link<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Link<A>, a3);
  return static ConditionallyArchivableView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Link<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Link<A>, a3);
  return static ConditionallyArchivableView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Link<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Link<A>);
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t Link<>.init(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link<>.init(_:destination:)(a1, a2, a3, a4, 0, a5);
}

uint64_t Link<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Link<>.init<A>(_:destination:)(a1, a2, a3, a4, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:onEditingChanged:onCommit:), a5);
}

void Link.archivedBody.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = a2;
  v3 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v3, v4);
  v14 = a1;
  v15 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  type metadata accessor for Button(255, v6, v11, v7);
  type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for ArchivableLinkModifier(255);
  type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v17 = MEMORY[0x1E0CE4C68];
  v18 = v8;
  v13 = v8;
  v19 = v9;
  v20 = MEMORY[0x1E0CE4C58];
  v12 = v9;
  type metadata accessor for StaticIf();
}

void sub_1875FA6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v10);
  v19 = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v16 - 136) = v18;
  *(_QWORD *)(v16 - 128) = v19;
  v20 = MEMORY[0x1E0CE2E70];
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v16 - 136);
  v9[5] = v21;
  v22 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier();
  *(_QWORD *)(v16 - 152) = v12;
  *(_QWORD *)(v16 - 144) = v22;
  v23 = MEMORY[0x18D75FFDC](v20, v11, v16 - 152);
  v24 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  *(_QWORD *)(v16 - 168) = v23;
  *(_QWORD *)(v16 - 160) = v24;
  v25 = MEMORY[0x18D75FFDC](v20, v15, v16 - 168);
  *(_QWORD *)(v16 - 184) = v21;
  *(_QWORD *)(v16 - 176) = v25;
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v16 - 184);
  v28 = type metadata accessor for AccessibilityLinkModifier(0, a1, v26, v27);
  v9[8] = v28;
  v9[13] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v9[4] = (char *)&a9 - v30;
  v9[12] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v9[1] = (char *)&a9 - v33;
  v9[3] = type metadata accessor for ModifiedContent();
  v9[2] = type metadata accessor for ModifiedContent();
  v9[6] = type metadata accessor for ModifiedContent();
  v34 = type metadata accessor for _ConditionalContent();
  v9[10] = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  MEMORY[0x1E0C80A78](v36, v37);
  v38 = v9[7];
  v9[26] = v14;
  v9[27] = v38;
  v39 = v9[14];
  v9[28] = v39;
  v9[20] = v14;
  v9[21] = v38;
  v9[22] = v39;
  StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE4C68], (void (*)(void))partial apply for closure #1 in Link.archivedBody.getter);
}

uint64_t sub_1875FA8F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v8 = v0[16];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v0[15] + 36), v8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
  v9 = v0[4];
  AccessibilityLinkModifier.init(_:isArchive:)(v8, 1, v2, v3, v9);
  v10 = v0[8];
  v0[16] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLinkModifier<A>, v10);
  *(_QWORD *)(v7 - 200) = v3;
  *(_QWORD *)(v7 - 192) = &protocol witness table for IgnoreViewRespondersModifier;
  v11 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v7 - 216) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[3], v7 - 200);
  *(_QWORD *)(v7 - 208) = &protocol witness table for AccessibilityAttachmentModifier;
  v12 = MEMORY[0x18D75FFDC](v11, v0[2], v7 - 216);
  *(_QWORD *)(v7 - 232) = v3;
  *(_QWORD *)(v7 - 224) = &protocol witness table for AccessibilityAttachmentModifier;
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[6], v7 - 232);
  v0[29] = v12;
  v0[30] = v13;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v4, v0 + 29);
  v15 = v9;
  v16 = v9;
  v17 = v0[1];
  View.accessibilityConfiguration<A>(_:)(v16, v2, v10, v3, v0[16]);
  (*(void (**)(uint64_t, uint64_t))(v0[13] + 8))(v15, v10);
  (*(void (**)(uint64_t, uint64_t))(v0[12] + 8))(v17, v2);
  static ViewBuilder.buildExpression<A>(_:)(v6, v4, v14);
  v18 = *(void (**)(uint64_t, uint64_t))(v0[10] + 8);
  v18(v6, v4);
  static ViewBuilder.buildBlock<A>(_:)(v5, v4, v0[17]);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v5, v4);
}

uint64_t type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>(255);
    lazy protocol witness table accessor for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetLinkButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle, (uint64_t)&type metadata for WidgetLinkButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>();
    v6 = type metadata accessor for ButtonStyleModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle;
  if (!lazy protocol witness table cache variable for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetLinkButtonStyle, &type metadata for WidgetLinkButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>;
  if (!lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetLinkButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle, (uint64_t)&type metadata for WidgetLinkButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
    v2[0] = &protocol witness table for ButtonStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier)
  {
    v1 = type metadata accessor for ArchivableLinkModifier(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinkModifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier);
  }
  return result;
}

uint64_t closure #1 in Link.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v35 = a4;
  v7 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Button(0, a2, a3, v11);
  v33 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v32 - v14;
  v16 = type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
  v17 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v32 - v23;
  v26 = type metadata accessor for Link(0, a2, a3, v25);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v26 + 36), (uint64_t)v10, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
  v36 = a2;
  v37 = a3;
  v38 = a1;
  Button.init(destination:label:)((uint64_t)v10, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Link.archivedBody.getter, a2, v15);
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v12);
  MEMORY[0x18D75B4AC](v27, v12, v16, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v12);
  v28 = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v39[0] = v27;
  v39[1] = v28;
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v39);
  static ViewBuilder.buildExpression<A>(_:)(v20, v17, v29);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v20, v17);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v17, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v24, v17);
}

uint64_t partial apply for closure #1 in Link.archivedBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Link.archivedBody.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t closure #2 in Link.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];

  v35 = a4;
  v32 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1E0C80A78](v32, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModifiedContent();
  v33 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  v23 = a1 + *(int *)(type metadata accessor for Link(0, a2, a3, v22) + 36);
  v24 = type metadata accessor for LinkDestination();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23 + *(int *)(v24 + 24), (uint64_t)v9, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
  MEMORY[0x18D75B4AC](v9, a2, v32, a3);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for ArchivableLinkModifier);
  v25 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier();
  v37[0] = a3;
  v37[1] = v25;
  v26 = MEMORY[0x1E0CE2E70];
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v37);
  MEMORY[0x18D75B4AC](v27, v10, &type metadata for HandGestureShortcutInteractiveControl, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v10);
  v28 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  v36[0] = v27;
  v36[1] = v28;
  v29 = MEMORY[0x18D75FFDC](v26, v14, v36);
  static ViewBuilder.buildExpression<A>(_:)(v17, v14, v29);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v17, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v14, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v21, v14);
}

uint64_t partial apply for closure #2 in Link.archivedBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in Link.archivedBody.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t specialized Link.init(destination:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v40 = a5;
  v43 = a4;
  v41 = a3;
  v42 = a2;
  v39 = a1;
  v44 = a6;
  v7 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Link<Text>(0, v11, v12, v13);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URL();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)&v38 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, a1, v19, v30);
  LinkDestination.Configuration.init(url:isSensitive:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)v18 = Text.init(_:tableName:bundle:comment:)();
  *((_QWORD *)v18 + 1) = v33;
  v18[16] = v34 & 1;
  *((_QWORD *)v18 + 3) = v35;
  v36 = MEMORY[0x1E0CE2DE8];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v32, (uint64_t)v27, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
  LinkDestination.init(configuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))v36);
  outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)&v18[*(int *)(v15 + 36)], (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
  outlined init with take of TableCellFormula((uint64_t)v18, v44, (uint64_t (*)(_QWORD))type metadata accessor for Link<Text>);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v39, v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Link.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  _QWORD v36[2];
  void (*v37)(__int128 *__return_ptr, uint64_t);
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v36[1] = a3;
  v37 = a2;
  v38 = a4;
  v5 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Link<Text>(0, v9, v10, v11);
  v13 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)v36 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a1, v17, v28);
  v31 = LinkDestination.Configuration.init(url:isSensitive:)();
  v37(&v39, v31);
  v32 = v40;
  v33 = v41;
  *(_OWORD *)v16 = v39;
  v16[16] = v32;
  *((_QWORD *)v16 + 3) = v33;
  v34 = MEMORY[0x1E0CE2DE8];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, (uint64_t)v25, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
  LinkDestination.init(configuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))v34);
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v16[*(int *)(v13 + 36)], (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
  outlined init with take of TableCellFormula((uint64_t)v16, v38, (uint64_t (*)(_QWORD))type metadata accessor for Link<Text>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
}

uint64_t Link.init(sensitiveUrl:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link.init(destination:label:)(a1, a2, a3, a4, a5);
}

uint64_t Link<>.init(_:sensitiveUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link<>.init(_:destination:)(a1, a2, a3, a4, 1, a5);
}

uint64_t Link<>.init(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, a4, v12, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Link.init(destination:label:)((uint64_t)v17, a1, a2, a3, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Link<>.init<A>(_:sensitiveUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Link<>.init<A>(_:destination:)(a1, a2, a3, a4, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:), a5);
}

uint64_t Link<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(__int128 *__return_ptr, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = &v19[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v13 + 16))(v17, a2, v12, v15);
  v20 = a3;
  v21 = a4;
  v22 = a1;
  specialized Link.init(destination:label:)((uint64_t)v17, a5, (uint64_t)v19, a6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t associated type witness table accessor for View.Body : View in Link<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in Link<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for Link<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Link<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Link(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = v10 | 7 | *(_DWORD *)(v6 + 80);
  if (v12 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || *(_QWORD *)(v9 + 64) + ((v10 + 75) & ~v10) + (v11 & ~(v10 | 7uLL)) + 1 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v32 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = ~(v10 | 7);
    v35 = *(_QWORD *)(v9 + 64);
    v36 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v17 = ((unint64_t)a1 + v11) & v16;
    v37 = a1;
    v18 = ((unint64_t)a2 + v11) & v16;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    LOBYTE(v16) = *(_BYTE *)(v18 + 34);
    v23 = *(_WORD *)(v18 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v18, v20, v21, v22, v23, v16);
    *(_QWORD *)v17 = v19;
    *(_QWORD *)(v17 + 8) = v20;
    *(_QWORD *)(v17 + 16) = v21;
    *(_QWORD *)(v17 + 24) = v22;
    *(_WORD *)(v17 + 32) = v23;
    *(_BYTE *)(v17 + 34) = v16;
    v24 = (v17 + 42) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v18 + 42) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    LOBYTE(v16) = *(_BYTE *)(v25 + 34);
    v30 = *(_WORD *)(v25 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v25, v27, v28, v29, v30, v16);
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
    *(_QWORD *)(v24 + 16) = v28;
    *(_QWORD *)(v24 + 24) = v29;
    *(_WORD *)(v24 + 32) = v30;
    *(_BYTE *)(v24 + 34) = v16;
    v31 = v10 + 35 + v25;
    v32 = v37;
    v33 = v31 & ~v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v10 + 35 + v24) & ~v10, v33, v36);
    *(_BYTE *)(((v10 + 35 + v24) & ~v10) + v35) = *(_BYTE *)(v33 + v35);
  }
  return v32;
}

uint64_t destroy for Link(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + a1 + (v7 | 7)) & ~(v7 | 7);
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 0x10), *(_QWORD *)(v8 + 0x18), *(_WORD *)(v8 + 0x20), *(_BYTE *)(v8 + 0x22));
  v9 = (v8 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_WORD *)(v9 + 32), *(_BYTE *)(v9 + 34));
  return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))((v7 + v9 + 35) & ~v7, v5);
}

uint64_t initializeWithCopy for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  uint64_t v27;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v4 + 16))();
  v6 = *(_QWORD *)(v4 + 64);
  v27 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v27 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + v6;
  v10 = (v9 + a1) & ~(v8 | 7);
  v11 = (v9 + a2) & ~(v8 | 7);
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 0x10);
  v15 = *(_QWORD *)(v11 + 0x18);
  v16 = *(_BYTE *)(v11 + 0x22);
  v17 = *(_WORD *)(v11 + 0x20);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v11, v13, v14, v15, v17, v16);
  *(_QWORD *)v10 = v12;
  *(_QWORD *)(v10 + 8) = v13;
  *(_QWORD *)(v10 + 16) = v14;
  *(_QWORD *)(v10 + 24) = v15;
  *(_WORD *)(v10 + 32) = v17;
  *(_BYTE *)(v10 + 34) = v16;
  v18 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = *(_QWORD *)(v19 + 24);
  v24 = *(_BYTE *)(v19 + 34);
  v25 = *(_WORD *)(v19 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v19, v21, v22, v23, v25, v24);
  *(_QWORD *)v18 = v20;
  *(_QWORD *)(v18 + 8) = v21;
  *(_QWORD *)(v18 + 16) = v22;
  *(_QWORD *)(v18 + 24) = v23;
  *(_WORD *)(v18 + 32) = v25;
  *(_BYTE *)(v18 + 34) = v24;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((v8 + 35 + v18) & ~v8, (v8 + 35 + v19) & ~v8, v27);
  *(_BYTE *)(*(_QWORD *)(v7 + 64) + ((v8 + 35 + v18) & ~v8)) = *(_BYTE *)(*(_QWORD *)(v7 + 64) + ((v8 + 35 + v19) & ~v8));
  return a1;
}

uint64_t assignWithCopy for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  uint64_t v39;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v4 + 24))();
  v6 = *(_QWORD *)(v4 + 64);
  v39 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v39 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + v6;
  v10 = (v9 + a1) & ~(v8 | 7);
  v11 = (v9 + a2) & ~(v8 | 7);
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 0x10);
  v15 = *(_QWORD *)(v11 + 0x18);
  v16 = *(_BYTE *)(v11 + 0x22);
  v17 = *(_WORD *)(v11 + 0x20);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v11, v13, v14, v15, v17, v16);
  v18 = *(_QWORD *)v10;
  v19 = *(_QWORD *)(v10 + 8);
  v20 = *(_QWORD *)(v10 + 16);
  v21 = *(_QWORD *)(v10 + 24);
  v22 = *(_BYTE *)(v10 + 34);
  *(_QWORD *)v10 = v12;
  *(_QWORD *)(v10 + 8) = v13;
  *(_QWORD *)(v10 + 16) = v14;
  *(_QWORD *)(v10 + 24) = v15;
  v23 = *(_WORD *)(v10 + 32);
  *(_WORD *)(v10 + 32) = v17;
  *(_BYTE *)(v10 + 34) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  v24 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  v27 = *(_QWORD *)(v25 + 8);
  v28 = *(_QWORD *)(v25 + 16);
  v29 = *(_QWORD *)(v25 + 24);
  v30 = *(_BYTE *)(v25 + 34);
  v31 = *(_WORD *)(v25 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v25, v27, v28, v29, v31, v30);
  v32 = *(_QWORD *)v24;
  v33 = *(_QWORD *)(v24 + 8);
  v34 = *(_QWORD *)(v24 + 16);
  v35 = *(_QWORD *)(v24 + 24);
  v36 = *(_BYTE *)(v24 + 34);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(v24 + 8) = v27;
  *(_QWORD *)(v24 + 16) = v28;
  *(_QWORD *)(v24 + 24) = v29;
  v37 = *(_WORD *)(v24 + 32);
  *(_WORD *)(v24 + 32) = v31;
  *(_BYTE *)(v24 + 34) = v30;
  outlined consume of Environment<OpenURLAction>.Content(v32, v33, v34, v35, v37, v36);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))((v8 + 35 + v24) & ~v8, (v8 + 35 + v25) & ~v8, v39);
  *(_BYTE *)(*(_QWORD *)(v7 + 64) + ((v8 + 35 + v24) & ~v8)) = *(_BYTE *)(*(_QWORD *)(v7 + 64) + ((v8 + 35 + v25) & ~v8));
  return a1;
}

uint64_t initializeWithTake for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (v10 + a1) & ~(v9 | 7);
  v12 = (v10 + a2) & ~(v9 | 7);
  LODWORD(v10) = *(_DWORD *)(v12 + 0x1F);
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_DWORD *)(v11 + 31) = v10;
  v14 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v12 + 42) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v11) = *(_DWORD *)(v15 + 31);
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 31) = v11;
  v17 = (v9 + 35 + v14) & ~v9;
  v18 = (v9 + 35 + v15) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v17, v18, v7);
  *(_BYTE *)(v17 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v18 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithTake for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (v10 + a2) & ~(v9 | 7);
  v12 = *(_WORD *)(v11 + 32);
  v13 = (v10 + a1) & ~(v9 | 7);
  v14 = *(_BYTE *)(v11 + 34);
  v15 = *(_QWORD *)v13;
  v16 = *(_QWORD *)(v13 + 8);
  v17 = *(_QWORD *)(v13 + 0x10);
  v18 = *(_QWORD *)(v13 + 0x18);
  v19 = *(_BYTE *)(v13 + 0x22);
  v20 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v11;
  *(_OWORD *)(v13 + 16) = v20;
  v21 = *(_WORD *)(v13 + 0x20);
  *(_WORD *)(v13 + 32) = v12;
  *(_BYTE *)(v13 + 34) = v14;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v21, v19);
  v22 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_WORD *)(v22 + 32);
  v24 = *(_BYTE *)(v22 + 34);
  v25 = (v13 + 42) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  v27 = *(_QWORD *)(v25 + 8);
  v28 = *(_QWORD *)(v25 + 16);
  v29 = *(_QWORD *)(v25 + 24);
  v30 = *(_BYTE *)(v25 + 34);
  v31 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v22;
  *(_OWORD *)(v25 + 16) = v31;
  v32 = *(_WORD *)(v25 + 32);
  *(_WORD *)(v25 + 32) = v23;
  *(_BYTE *)(v25 + 34) = v24;
  outlined consume of Environment<OpenURLAction>.Content(v26, v27, v28, v29, v32, v30);
  v33 = (v9 + 35 + v25) & ~v9;
  v34 = (v9 + 35 + v22) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v33, v34, v7);
  *(_BYTE *)(*(_QWORD *)(v8 + 64) + v33) = *(_BYTE *)(*(_QWORD *)(v8 + 64) + v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for Link(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= 0xFE)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = v13 | 7;
  v15 = (v13 | 7) + *(_QWORD *)(v6 + 64);
  if (a2 <= v12)
    goto LABEL_27;
  v16 = *(_QWORD *)(v9 + 64) + ((v13 + 75) & ~v13) + (v15 & ~v14) + 1;
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((a2 - v12 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_27:
      if (v7 >= v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      if (v10 > 0xFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + ((((v15 + a1) & ~v14) + 42) & 0xFFFFFFFFFFFFFFF8) + 35) & ~v13, v10, v8);
      v23 = *(unsigned __int8 *)(((v15 + a1) & ~v14) + 0x22);
      if (v23 > 1)
        return (v23 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_27;
LABEL_18:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v22 = v16;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v12 + v21 + 1;
}

void storeEnumTagSinglePayload for Link(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  if (*(_DWORD *)(v9 + 84) <= 0xFEu)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = v8;
  else
    v11 = v10;
  v12 = (((*(unsigned __int8 *)(v9 + 80) | 7) + *(_QWORD *)(v7 + 64)) & ~(*(unsigned __int8 *)(v9 + 80) | 7))
      + *(_QWORD *)(v9 + 64)
      + ((*(unsigned __int8 *)(v9 + 80) + 75) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + 1;
  if (a3 <= v11)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_1875FC574()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1875FC524);
}

void sub_1875FC584()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1875FC524);
}

void sub_1875FC58C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1875FC524);
}

uint64_t sub_1875FC598(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v4 = type metadata accessor for Button(255, *a1, a1[1], a4);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for _ConditionalContent();
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v4);
  v15[0] = v9;
  v15[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v15);
  v14[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v13[0] = v9;
  v13[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v12[0] = MEMORY[0x18D75FFDC](v10, v6, v14);
  v12[1] = MEMORY[0x18D75FFDC](v10, v7, v13);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v8, v12);
}

void sub_1875FC6C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Button(255, *a1, a1[1], a4);
  type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ArchivableLinkModifier(255);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf();
}

uint64_t sub_1875FC76C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[19];

  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for _ConditionalContent();
  v22[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v5);
  v22[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v11 = MEMORY[0x1E0CE2E70];
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v22);
  v21[0] = v1;
  v21[1] = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier();
  v20[0] = MEMORY[0x18D75FFDC](v11, v3, v21);
  v20[1] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  v19[0] = v12;
  v19[1] = MEMORY[0x18D75FFDC](v11, v2, v20);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v19);
  v18[0] = v13;
  v18[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v17[0] = MEMORY[0x18D75FFDC](v11, v7, v18);
  v17[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v16[0] = v13;
  v16[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v15[0] = MEMORY[0x18D75FFDC](v11, v8, v17);
  v15[1] = MEMORY[0x18D75FFDC](v11, v9, v16);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v10, v15);
}

void type metadata accessor for Link<Text>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Link<Text>)
  {
    v4 = type metadata accessor for Link(0, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Link<Text>);
  }
}

uint64_t partial apply for closure #1 in closure #1 in Link.archivedBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in __App.ShoeboxAdaptor.body.getter(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t View.inspector<A>(isPresented:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(double)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void (*v33)(double);
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  char v42;

  v37 = a7;
  v32 = a5;
  v33 = a4;
  v36 = a3;
  v35 = a2;
  v10 = a1;
  v39 = a8;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for InspectorModifier(0, v14, a9, v13);
  v34 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v32 - v17;
  v19 = type metadata accessor for ModifiedContent();
  v38 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v32 - v22;
  v33(v21);
  v24 = v10;
  v25 = v10;
  v26 = v35;
  LOBYTE(v10) = v36;
  InspectorModifier.init(inspectorContent:isPresented:)((uint64_t)v12, v25, v35, v36, a6, a9, (uint64_t)v18);
  swift_retain();
  swift_retain();
  v27 = v37;
  MEMORY[0x18D75B4AC](v18, v32, v15, v37);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v15);
  KeyPath = (_QWORD *)swift_getKeyPath();
  v41[0] = v24;
  v41[1] = v26;
  v42 = v10;
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorModifier<A>, v15);
  v40[0] = v27;
  v40[1] = v29;
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v40);
  View.focusedSceneValue<A>(_:_:)(KeyPath, (uint64_t)v41, v19, v30, v39);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v23, v19);
}

uint64_t FocusedValues.inspectorPresented.getter()
{
  uint64_t v0;

  swift_retain();
  v0 = specialized FocusedValues.subscript.getter();
  swift_release();
  return v0;
}

uint64_t key path getter for FocusedValues.inspectorPresented : FocusedValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;

  swift_retain();
  v2 = specialized FocusedValues.subscript.getter();
  v4 = v3;
  v6 = v5;
  result = swift_release();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

uint64_t key path setter for FocusedValues.inspectorPresented : FocusedValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  return FocusedValues.inspectorPresented.setter(v1, v2);
}

uint64_t sub_1875FCC78(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  return FocusedValues.inspectorPresented.setter(v1, v2);
}

uint64_t FocusedValues.inspectorPresented.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = result;
    v5 = *(_BYTE *)(v2 + 8);
    outlined copy of Binding<NavigationSplitViewColumn>?(result, a2);
    if ((v5 & 2) != 0)
    {
      v7 = one-time initialization token for scene;
      swift_retain();
      swift_retain();
      if (v7 == -1)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
        lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>();
        swift_retain();
        swift_retain();
        PropertyList.subscript.setter();
        outlined consume of Binding<NavigationSplitViewColumn>?(v4, a2);
        swift_release();
        swift_release();
        return outlined consume of Binding<NavigationSplitViewColumn>?(v4, a2);
      }
    }
    else
    {
      v6 = one-time initialization token for view;
      swift_retain();
      swift_retain();
      if (v6 == -1)
        goto LABEL_6;
    }
    swift_once();
    goto LABEL_6;
  }
  return result;
}

uint64_t View.inspectorColumnWidth(min:ideal:max:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.inspectorColumnWidth(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.inspector<A>(behavior:isPresented:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t (**v34)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  _QWORD v45[2];

  v38 = a8;
  v39 = a2;
  v42 = a5;
  v43 = a6;
  v41 = a4;
  v40 = a3;
  v44 = a9;
  v12 = *(_QWORD *)(a7 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v16;
  v36 = v16[1];
  v37 = v17;
  HIDWORD(v35) = *((unsigned __int8 *)v16 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v19, v18, v14);
  v20 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v21 = (v20 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v20 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v20 + v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = (char *)swift_allocObject();
  v25 = v38;
  *((_QWORD *)v24 + 2) = a7;
  *((_QWORD *)v24 + 3) = v25;
  *((_QWORD *)v24 + 4) = a10;
  *((_QWORD *)v24 + 5) = a11;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v24[v20], v15, a7);
  v26 = &v24[v21];
  v27 = v40;
  *(_QWORD *)v26 = v39;
  *((_QWORD *)v26 + 1) = v27;
  v26[16] = v41;
  v28 = &v24[v22];
  v29 = v36;
  *(_QWORD *)v28 = v37;
  *((_QWORD *)v28 + 1) = v29;
  v28[16] = BYTE4(v35);
  v30 = &v24[v23];
  v31 = v43;
  *(_QWORD *)v30 = v42;
  *((_QWORD *)v30 + 1) = v31;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v32 = type metadata accessor for ModifiedContent();
  v45[0] = a10;
  v45[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  swift_retain();
  swift_retain();
  swift_retain();
  result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v32, v45);
  v34 = v44;
  *v44 = partial apply for closure #1 in View.inspector<A>(behavior:isPresented:content:);
  v34[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v24;
  return result;
}

uint64_t closure #1 in View.inspector<A>(behavior:isPresented:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  v44 = a8;
  v42 = a6;
  v43 = a7;
  v41 = a5;
  v46 = a2;
  v47 = a9;
  v39 = a10;
  v40 = a4;
  v36 = a14;
  v37 = a13;
  v38 = a15;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v17 = type metadata accessor for ModifiedContent();
  v45 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v36 - v23;
  v26 = *a1;
  v25 = a1[1];
  v27 = swift_allocObject();
  v28 = v37;
  *(_QWORD *)(v27 + 16) = a12;
  *(_QWORD *)(v27 + 24) = v28;
  v29 = v38;
  *(_QWORD *)(v27 + 32) = a14;
  *(_QWORD *)(v27 + 40) = v29;
  v30 = v40;
  *(_QWORD *)(v27 + 48) = a3;
  *(_QWORD *)(v27 + 56) = v30;
  *(_BYTE *)(v27 + 64) = v41;
  v31 = v43;
  *(_QWORD *)(v27 + 72) = v42;
  *(_QWORD *)(v27 + 80) = v31;
  *(_BYTE *)(v27 + 88) = v44;
  *(_QWORD *)(v27 + 96) = v39;
  *(_QWORD *)(v27 + 104) = a11;
  *(_QWORD *)(v27 + 112) = v26;
  *(_QWORD *)(v27 + 120) = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v32 = v36;
  View.transformIdentifiedPreference<A>(_:transform:)((uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:), v27, a12, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, v36, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey);
  swift_release();
  v48[0] = v32;
  v48[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v48);
  static ViewBuilder.buildExpression<A>(_:)(v20, v17, v33);
  v34 = *(void (**)(char *, uint64_t))(v45 + 8);
  v34(v20, v17);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v17, v47);
  return ((uint64_t (*)(char *, uint64_t))v34)(v24, v17);
}

uint64_t sub_1875FD2EC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.inspector<A>(behavior:isPresented:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(v2[2] - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in View.inspector<A>(behavior:isPresented:content:)(a1, (uint64_t)v2 + v4, *(uint64_t *)((char *)v2 + v6), *(uint64_t *)((char *)v2 + v6 + 8), *((unsigned __int8 *)v2 + v6 + 16), *(uint64_t *)((char *)v2 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 8), *((unsigned __int8 *)v2 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 16), a2, *(uint64_t *)((char *)v2 + ((v5 + 55) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v5 + 55) & 0xFFFFFFFFFFFFFFF8) + 8), v2[2], v2[3], v2[4], v2[5]);
}

uint64_t closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v29 = a3;
  v30 = a4;
  v31 = a5;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v28);
  v19 = v28;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a9);
  v21 = type metadata accessor for LazyView(0, a14, a16, v20);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyView<A>, v21);
  v22 = AnyView.init<A>(_:)();
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = v19;
  v33 = a6;
  v34 = a7;
  v35 = a8;
  v39 = v22;
  v40 = 0;
  v41 = a11;
  v42 = a12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return specialized Dictionary.subscript.setter((uint64_t)&v29, a2);
}

uint64_t View.inspector<A, B>(behavior:presenting:content:)@<X0>(__int128 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10)
{
  char v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;

  v15 = *((_BYTE *)a1 + 16);
  v27 = *a1;
  v28 = v15;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a10;
  v24 = a3;
  v25 = a4;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:), (uint64_t)v18, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v16, (uint64_t)&v26);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v27, 0, 0, 0, a2, 0, v26, a5, a9, a6, a8);
  return swift_release();
}

uint64_t closure #1 in View.inspector<A, B>(behavior:presenting:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v4;
  void (*v5)(double);
  uint64_t result;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v5(v4);
  result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

{
  double v4;
  void (*v5)(double);
  uint64_t result;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v5(v4);
  result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, *(_QWORD *)(v2 + 56), a2);
}

{
  return partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, a2);
}

{
  uint64_t v2;

  return closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, *(_QWORD *)(v2 + 64), a2);
}

uint64_t View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t (**v42)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];

  v12 = v11;
  v54 = a9;
  v55 = a8;
  v52 = a7;
  v53 = a6;
  v43 = a5;
  v51 = a4;
  v49 = a2;
  v50 = a3;
  v56 = a11;
  v48 = a10;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  v44 = v15;
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v43 - v19;
  v21 = *(_QWORD *)(a8 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a1;
  v46 = a1[1];
  v47 = v27;
  v45 = *((unsigned __int8 *)a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v26, v12, a8, v25);
  (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v20, v43, v15);
  v28 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v29 = (v22 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (*(unsigned __int8 *)(v16 + 80) + v29 + 17) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v43 = (v30 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  v32 = (char *)swift_allocObject();
  v33 = v48;
  *((_QWORD *)v32 + 2) = v55;
  *((_QWORD *)v32 + 3) = v33;
  *((_QWORD *)v32 + 4) = v56;
  (*(void (**)(char *, char *))(v21 + 32))(&v32[v28], v26);
  v34 = &v32[v29];
  v35 = v49;
  v36 = v50;
  *(_QWORD *)v34 = v49;
  *((_QWORD *)v34 + 1) = v36;
  v34[16] = v51;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v32[v30], v20, v44);
  v37 = &v32[v43];
  v38 = v46;
  *(_QWORD *)v37 = v47;
  *((_QWORD *)v37 + 1) = v38;
  v37[16] = v45;
  v39 = v53;
  *(_QWORD *)&v32[v31] = v52;
  *(_QWORD *)&v32[(v31 + 15) & 0xFFFFFFFFFFFFFFF8] = v39;
  outlined copy of Binding<NavigationSplitViewColumn>?(v35, v36);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v40 = type metadata accessor for ModifiedContent();
  v57[0] = v56;
  v57[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  swift_retain();
  swift_retain();
  result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v40, v57);
  v42 = v54;
  *v54 = partial apply for closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:);
  v42[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v32;
  return result;
}

uint64_t View.inspector<A, B>(behavior:presenting:content:)@<X0>(__int128 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11)
{
  char v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;

  v16 = *((_BYTE *)a1 + 16);
  v29 = *a1;
  v30 = v16;
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v24 = a10;
  v25 = a11;
  v26 = a3;
  v27 = a4;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:), (uint64_t)v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v17, (uint64_t)&v28);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v29, 0, 0, 0, a2, 0, v28, a5, a9, a6, a8);
  return swift_release();
}

uint64_t View.inspector<A, B>(behavior:isPresented:presenting:content:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v20;
  uint64_t v21;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;

  v20 = *((_BYTE *)a1 + 16);
  v33 = *a1;
  v34 = v20;
  v24 = a8;
  v25 = a10;
  v26 = a11;
  v27 = a12;
  v28 = a13;
  v29 = a14;
  v30 = a6;
  v31 = a7;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:), (uint64_t)v23, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v21, (uint64_t)&v32);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v33, a2, a3, a4 & 1, a5, 0, v32, a8, a9, a10, a12);
  return swift_release();
}

uint64_t View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(__int128 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];
  uint64_t v44;
  __int128 v45;
  char v46;

  v16 = *((_BYTE *)a1 + 16);
  v45 = *a1;
  v46 = v16;
  v43[0] = a3;
  v43[1] = a4;
  v36 = a7;
  v37 = a8;
  v38 = a10;
  v39 = a11;
  v40 = a12;
  v41 = a13;
  v42 = a14;
  swift_getFunctionTypeMetadata0();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:), (uint64_t)v35, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v17, (uint64_t)&v44);
  v18 = v44;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = a11;
  v30 = a12;
  v31 = a13;
  v32 = a14;
  v33 = a5;
  v34 = a6;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:), (uint64_t)v25, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v19, (uint64_t)v43);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v45, 0, 0, 0, a2, v18, v43[0], a7, a9, a8, a12);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v4;
  void (**v5)(double);
  uint64_t result;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*v5)(v4);
  result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)(a1, a2);
}

{
  uint64_t v2;

  return closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, *(_QWORD *)(v2 + 72), a2);
}

uint64_t View.inspector<A, B, C>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t (**a7)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  char v16;
  void (*v17)(void);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t (**v24)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;

  v22 = a6;
  v23 = a5;
  v25 = a4;
  v26 = a2;
  v27 = a3;
  v24 = a7;
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = *((_BYTE *)v15 + 16);
  v39 = *v15;
  v40 = v16;
  v17();
  v18 = AnyView.init<A>(_:)();
  v29 = a9;
  v30 = a10;
  v31 = a11;
  v32 = a12;
  v33 = a13;
  v34 = a14;
  v35 = a15;
  v36 = v22;
  v37 = a8;
  type metadata accessor for Optional();
  v19 = v23;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:), (uint64_t)v28, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v20, (uint64_t)&v38);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v39, v26, v27, v25 & 1, v19, v18, v38, a9, v24, a10, a13);
  swift_release();
  return swift_release();
}

uint64_t View.inspectorAnchor<A>(matching:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a7;
  v12 = *(_QWORD *)(a4 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for CGRect(0);
  swift_retain();
  v14 = Anchor.Source.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a4);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = a4;
  *((_QWORD *)v16 + 4) = a5;
  *((_QWORD *)v16 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  View.transformAnchorPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for InspectorAnchorPreferenceKey, v14, (uint64_t)partial apply for closure #1 in View.inspectorAnchor<A>(matching:anchor:), (uint64_t)v16, a3, v17, (uint64_t)&type metadata for InspectorAnchorPreferenceKey, a5, (uint64_t)&protocol witness table for InspectorAnchorPreferenceKey);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.inspectorAnchor<A>(matching:anchor:)(uint64_t *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[40];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  swift_getAssociatedConformanceWitness();
  AnyHashable.init<A>(_:)();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *a1 = v8;
  swift_bridgeObjectRelease();
  return outlined destroy of AnyHashable((uint64_t)v9);
}

uint64_t sub_1875FE2DC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.inspectorAnchor<A>(matching:anchor:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in View.inspectorAnchor<A>(matching:anchor:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for InspectorBehavior(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InspectorBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t getEnumTag for InspectorBehavior(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t destructiveProjectEnumData for InspectorBehavior(uint64_t result)
{
  *(_BYTE *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for InspectorBehavior(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for InspectorBehavior()
{
  return &type metadata for InspectorBehavior;
}

uint64_t sub_1875FE438(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v4 = a1[2];
  v5 = type metadata accessor for InspectorModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>(255);
  v7 = type metadata accessor for ModifiedContent();
  v11[0] = v4;
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorModifier<A>, v5);
  v8 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v11);
  v10[1] = &protocol witness table for ResponderViewModifier<A>;
  return MEMORY[0x18D75FFDC](v8, v7, v10);
}

void type metadata accessor for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for FocusedValueModifier<Binding<Bool>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<Bool>?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FocusedValueModifier);
    v4 = type metadata accessor for ResponderViewModifier(a1, v2, (uint64_t)&protocol witness table for FocusedValueModifier<A>, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>);
  }
}

uint64_t sub_1875FE560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<InspectorColumnWidth.TraitKey>, (uint64_t)&type metadata for InspectorColumnWidth.TraitKey, (uint64_t)&protocol witness table for InspectorColumnWidth.TraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<InspectorColumnWidth.TraitKey>, (uint64_t)&type metadata for InspectorColumnWidth.TraitKey, (uint64_t)&protocol witness table for InspectorColumnWidth.TraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1875FE644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  v3 = type metadata accessor for EnvironmentReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v3);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd_0_r_0_lAA17EnvironmentReaderVyAA15ModifiedContentVyxAA37IdentifiedPreferenceTransformModifierVyAA16InspectorStorageV0I3KeyVGGGAaBHPyHCTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  v3 = type metadata accessor for EnvironmentReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v3);
}

uint64_t sub_1875FE794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 32);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  v3 = type metadata accessor for EnvironmentReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v3);
}

uint64_t sub_1875FE838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = type metadata accessor for _AnchorTransformModifier(a1, v2, (uint64_t)&type metadata for InspectorAnchorPreferenceKey, (uint64_t)&protocol witness table for InspectorAnchorPreferenceKey);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>);
  }
}

uint64_t destroy for InspectorStorage(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for InspectorStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *v5 = *v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v12 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InspectorStorage(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1);
      v5 = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  v7 = *(__int128 *)((char *)a2 + 24);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = (_OWORD *)(a1 + 48);
  v9 = a2 + 3;
  v10 = *((_QWORD *)a2 + 9);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v10)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)a2 + 6);
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 48);
      v11 = *((_QWORD *)a2 + 10);
      v12 = a2[4];
      *v8 = *v9;
      *(_OWORD *)(a1 + 64) = v12;
      *(_QWORD *)(a1 + 80) = v11;
    }
  }
  else if (v10)
  {
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, (uint64_t)(a2 + 3));
  }
  else
  {
    v13 = *v9;
    v14 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *v8 = v13;
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InspectorStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_release();
      *(_QWORD *)(a1 + 8) = v4;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of Binding<Bool>(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_QWORD *)(a2 + 72))
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    else
      outlined destroy of AnyHashable(a1 + 48);
  }
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorStorage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InspectorStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorAnchorPreferenceKey()
{
  return &type metadata for InspectorAnchorPreferenceKey;
}

ValueMetadata *type metadata accessor for InspectorStorage.PreferenceKey()
{
  return &type metadata for InspectorStorage.PreferenceKey;
}

uint64_t closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];

  v71 = a7;
  v72 = a8;
  v59 = a6;
  v60 = a2;
  v65 = a5;
  v73 = a9;
  v74 = a3;
  v68 = a11;
  v69 = a12;
  v67 = a10;
  v75 = a15;
  v62 = a14;
  v63 = a4;
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v53 - v21;
  v56 = (char *)&v53 - v21;
  v23 = *(_QWORD *)(a13 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  MEMORY[0x1E0C80A78](v25, v26);
  v55 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  v66 = type metadata accessor for ModifiedContent();
  v70 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v27);
  v61 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v64 = (char *)&v53 - v32;
  v33 = *a1;
  v57 = a1[1];
  v58 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a13, v31);
  v54 = v19;
  (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v22, v59, v17);
  v34 = (*(unsigned __int8 *)(v23 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v35 = (v24 + *(unsigned __int8 *)(v19 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v59 = (v35 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v35 + v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject();
  v39 = v62;
  v40 = v63;
  *(_QWORD *)(v38 + 16) = a13;
  *(_QWORD *)(v38 + 24) = v39;
  v41 = v74;
  *(_QWORD *)(v38 + 32) = v75;
  *(_QWORD *)(v38 + 40) = v41;
  *(_QWORD *)(v38 + 48) = v40;
  *(_BYTE *)(v38 + 56) = v65;
  (*(void (**)(unint64_t, char *))(v23 + 32))(v38 + v34, v55);
  (*(void (**)(unint64_t, char *, uint64_t))(v54 + 32))(v38 + v35, v56, v17);
  v42 = v38 + v59;
  v43 = v72;
  *(_QWORD *)v42 = v71;
  *(_QWORD *)(v42 + 8) = v43;
  *(_BYTE *)(v42 + 16) = v67;
  *(_QWORD *)(v38 + v36) = v68;
  *(_QWORD *)(v38 + v37) = v69;
  v44 = (_QWORD *)(v38 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8));
  v45 = v57;
  *v44 = v58;
  v44[1] = v45;
  outlined copy of Binding<NavigationSplitViewColumn>?(v74, v40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v46 = v61;
  v47 = v75;
  View.transformIdentifiedPreference<A>(_:transform:)((uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:), v38, a13, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, v75, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey);
  swift_release();
  v76[0] = v47;
  v76[1] = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  v48 = v66;
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v66, v76);
  v50 = (uint64_t)v64;
  static ViewBuilder.buildExpression<A>(_:)(v46, v48, v49);
  v51 = *(void (**)(char *, uint64_t))(v70 + 8);
  v51(v46, v48);
  static ViewBuilder.buildBlock<A>(_:)(v50, v48, v73);
  return ((uint64_t (*)(uint64_t, uint64_t))v51)(v50, v48);
}

uint64_t closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD v23[2];
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  outlined copy of Binding<NavigationSplitViewColumn>?(a3, a4);
  v29 = 0u;
  v30 = 0u;
  v23[0] = a3;
  v23[1] = a4;
  v24 = a5;
  v25 = specialized View.isPresentedValue<A>(data:isPresented:hasPlaceholder:)(a7, a3, a4, a5, 1, a15, a16) & 1;
  v26 = a8;
  v27 = a9;
  v28 = a10;
  v31 = 0;
  v32 = a11;
  v33 = a12;
  v34 = a13;
  v35 = a14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return specialized Dictionary.subscript.setter((uint64_t)v23, a2);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance InspectorStorage.PreferenceKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  return specialized static InspectorStorage.PreferenceKey.reduce(value:nextValue:)(a1, a2, a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance InspectorAnchorPreferenceKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  return specialized static InspectorStorage.PreferenceKey.reduce(value:nextValue:)(a1, a2, a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

uint64_t specialized static InspectorStorage.PreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  a2(&v11);
  v8 = v11;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *a1;
  *a1 = 0x8000000000000000;
  a5(v8, a4, 0, isUniquelyReferenced_nonNull_native, &v11);
  *a1 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1875FFAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  if (*(_QWORD *)(v0 + v5 + 8))
  {
    swift_release();
    swift_release();
  }
  v8 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v7, 1, v1))
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v7, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v6 = v2[2];
  v5 = v2[3];
  v7 = v2[4];
  v8 = *(_QWORD *)(v6 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = v12 + *(_QWORD *)(v11 + 64);
  return closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(a1, (uint64_t)v2 + v9, *(_QWORD *)((char *)v2 + v10), *(_QWORD *)((char *)v2 + v10 + 8), *((unsigned __int8 *)v2 + v10 + 16), (unint64_t)v2 + v12, *(_QWORD *)((char *)v2 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)((char *)v2 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), a2, *((_BYTE *)v2 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)((char *)v2 + ((v13 + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)((char *)v2 + ((((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v6, v5, v7);
}

uint64_t sub_1875FFCA8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (*((_QWORD *)v0 + 6))
  {
    swift_release();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v4], v2);
  v8 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v0[v7], 1, v1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(&v0[v7], v1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v11 + *(_QWORD *)(v10 + 64);
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(a1, a2, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), v2 + v8, v2 + v11, *(_QWORD *)(v2 + v13), *(_QWORD *)(v2 + v13 + 8), *(_BYTE *)(v2 + v13 + 16), *(_QWORD *)(v2 + v14), *(_QWORD *)(v2 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v6, v5);
}

uint64_t specialized View.isPresentedValue<A>(data:isPresented:hasPlaceholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  char v8;
  uint64_t v10;

  if (a3)
  {
    type metadata accessor for Binding<Bool>();
    MEMORY[0x18D75B9C8](&v10);
    v8 = v10 & a5;
  }
  else
  {
    v8 = ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 48))(a1, 1, a7) != 1) | a5;
  }
  return v8 & 1;
}

uint64_t sub_1875FFF38()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:)(a1, a2, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_BYTE *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>;
  if (!lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuePropertyKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusedValues.__Key_inspectorPresented()
{
  return &type metadata for FocusedValues.__Key_inspectorPresented;
}

id ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(unint64_t a1, char a2, unint64_t a3, char a4, unint64_t a5, char a6, unint64_t a7, char a8, char a9)
{
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char *v60;
  char *v61;
  char *v63;
  char *v65;
  objc_class *ObjectType;
  objc_super v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;

  ObjectType = (objc_class *)swift_getObjectType();
  v60 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState];
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState] = 0;
  v61 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState];
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState] = 0;
  v63 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__prefetchState];
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__prefetchState] = 0;
  v65 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__containerSize];
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__containerSize] = 0;
  v10 = v9;
  EnvironmentValues.init()();
  v11 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  *(_DWORD *)v11 = 257;
  *((_DWORD *)v11 + 21) = 0;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 67) = 0u;
  *((_WORD *)v11 + 44) = 1;
  v11[96] = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_WORD *)v11 + 56) = 0;
  v11[120] = 0;
  *((_QWORD *)v11 + 16) = 0;
  *((_WORD *)v11 + 68) = 0;
  static EdgeInsets.zero.getter();
  *((_QWORD *)v11 + 18) = v12;
  *((_QWORD *)v11 + 19) = v13;
  *((_QWORD *)v11 + 20) = v14;
  *((_QWORD *)v11 + 21) = v15;
  static EdgeInsets.zero.getter();
  *((_QWORD *)v11 + 22) = v16;
  *((_QWORD *)v11 + 23) = v17;
  *((_QWORD *)v11 + 24) = v18;
  *((_QWORD *)v11 + 25) = v19;
  v20 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  OptionalEdgeInsets.init()();
  v59 = v99;
  v58 = v100;
  v57 = v101;
  v56 = v102;
  v55 = v103;
  v54 = v104;
  v53 = v105;
  OptionalEdgeInsets.init()();
  v52 = v90;
  v51 = v91;
  v50 = v92;
  v49 = v93;
  v48 = v94;
  v47 = v95;
  v46 = v96;
  v45 = v97;
  OptionalEdgeInsets.init()();
  v21 = v82;
  v22 = v83;
  v23 = v84;
  v24 = v85;
  v25 = v86;
  v26 = v87;
  v27 = v88;
  v28 = v89;
  OptionalEdgeInsets.init()();
  *(_QWORD *)v20 = v98;
  v20[8] = v59;
  *((_QWORD *)v20 + 2) = v58;
  v20[24] = v57;
  *((_QWORD *)v20 + 4) = v56;
  v20[40] = v55;
  *((_QWORD *)v20 + 6) = v54;
  v20[56] = v53;
  *((_QWORD *)v20 + 8) = v52;
  v20[72] = v51;
  *((_QWORD *)v20 + 10) = v50;
  v20[88] = v49;
  *((_QWORD *)v20 + 12) = v48;
  v20[104] = v47;
  *((_QWORD *)v20 + 14) = v46;
  v20[120] = v45;
  *((_QWORD *)v20 + 16) = v21;
  v20[136] = v22;
  *((_QWORD *)v20 + 18) = v23;
  v20[152] = v24;
  *((_QWORD *)v20 + 20) = v25;
  v20[168] = v26;
  *((_QWORD *)v20 + 22) = v27;
  v20[184] = v28;
  *((_QWORD *)v20 + 24) = v74;
  v20[200] = v75;
  *((_QWORD *)v20 + 26) = v76;
  v20[216] = v77;
  *((_QWORD *)v20 + 28) = v78;
  v20[232] = v79;
  *((_QWORD *)v20 + 30) = v80;
  v20[248] = v81;
  v29 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollContentBackground];
  *(_QWORD *)v29 = 0;
  *((_WORD *)v29 + 4) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 6;
  *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_hasScrollPosition] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v30 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 1;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending] = 0;
  v32 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState];
  *(_OWORD *)v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  v32[32] = 2;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase] = 0;
  v33 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastVelocity];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v34 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  v35 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastBoundsSize];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v35[16] = 1;
  *(_DWORD *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate] = 2;
  v36 = HIDWORD(a1);
  if ((a2 & 1) != 0)
    v37 = 0;
  else
    v37 = a1;
  if ((a2 & 1) != 0)
    LODWORD(v36) = 0;
  *(_DWORD *)v60 = v37;
  *((_DWORD *)v60 + 1) = v36;
  v38 = HIDWORD(a3);
  if ((a4 & 1) != 0)
    v39 = 0;
  else
    v39 = a3;
  if ((a4 & 1) != 0)
    LODWORD(v38) = 0;
  *(_DWORD *)v61 = v39;
  *((_DWORD *)v61 + 1) = v38;
  v40 = HIDWORD(a5);
  if ((a6 & 1) != 0)
    v41 = 0;
  else
    v41 = a5;
  if ((a6 & 1) != 0)
    LODWORD(v40) = 0;
  *(_DWORD *)v63 = v41;
  *((_DWORD *)v63 + 1) = v40;
  v42 = HIDWORD(a7);
  if ((a8 & 1) != 0)
    v43 = 0;
  else
    v43 = a7;
  if ((a8 & 1) != 0)
    LODWORD(v42) = 0;
  *(_DWORD *)v65 = v43;
  *((_DWORD *)v65 + 1) = v42;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes] = a9;

  v73.receiver = v10;
  v73.super_class = ObjectType;
  return objc_msgSendSuper2(&v73, sel_init);
}

void ScrollViewHelper.adoptEnvironment(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v5 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView;
  v6 = MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment);
    *v8 = v3;
    v8[1] = v4;
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    if (v4)
    {
      swift_retain_n();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      swift_retain();
      swift_retain();
      PropertyList.subscript.getter();
      swift_release();
    }
    swift_release_n();
    v9 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollContentBackground;
    *(_QWORD *)v9 = v11;
    *(_BYTE *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 9) = v13;
    swift_retain();
    v10 = (void *)MEMORY[0x18D760234](v5);
    swift_release();
    swift_release();
    if (v10)

    EnvironmentValues.allScrollableAxes.getter();
  }
}

void ScrollViewHelper.retargetContentOffsetIfNeeded(state:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  double v13;
  double x;
  CGFloat y;
  CGFloat v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  id v27;
  CGFloat v28;
  CGPoint _;

  v2 = v1;
  type metadata accessor for Logger?();
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (id)MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView, v6);
  if (!v27)
    return;
  v9 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  v10 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    goto LABEL_24;
  }
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v12;
  v13 = *(double *)(a1 + 24);
  _.x = *(CGFloat *)(a1 + 16);
  x = _.x;
  _.y = v13;
  ScrollViewHelper.updateTargetContentOffset(_:velocity:)(&_, (CGPoint)0);
  v16 = _.x;
  y = _.y;
  if (vabdd_f64(_.x, x) < 0.01 && vabdd_f64(_.y, v13) < 0.01)
  {
    v17 = *(_DWORD *)(v1 + v9);
    v11 = __OFSUB__(v17, 1);
    v18 = v17 - 1;
    if (!v11)
    {
      *(_DWORD *)(v1 + v9) = v18;
      if (!v18 && *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
        ScrollViewHelper.updateGraphState(isPreferred:)(0);

      return;
    }
LABEL_25:
    __break(1u);
    return;
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
  static Log.scroll.getter();
  v19 = type metadata accessor for Logger();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, v19) == 1)
  {
    outlined destroy of Logger?((uint64_t)v8);
  }
  else
  {
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      *(_DWORD *)v23 = 134218240;
      v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      v28 = y;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v21, v22, "Updating deceleration target to (%f, %f)", (uint8_t *)v23, 0x16u);
      MEMORY[0x18D760108](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v19);
  }
  v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags);
  if ((v24 & 1) == 0)
    *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags) = v24 | 1;
  swift_beginAccess();
  objc_msgSend(v27, sel_setContentOffset_animated_, *(unsigned __int8 *)(a1 + 32), _.x, _.y);
  objc_msgSend(v27, sel_contentOffset);
  v25 = *(_DWORD *)(v2 + v9);
  v11 = __OFSUB__(v25, 1);
  v26 = v25 - 1;
  if (v11)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(_DWORD *)(v2 + v9) = v26;
  if (!v26 && *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);

}

Swift::Void __swiftcall ScrollViewHelper.willStartPanning()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v1 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  v2 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v4;
  v5 = (void *)MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, sel_contentOffset);
    v8 = v7;
    v10 = v9;

    v11 = v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset;
    *(_QWORD *)v11 = v8;
    *(_QWORD *)(v11 + 8) = v10;
    *(_BYTE *)(v11 + 16) = 0;
  }
  *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 2;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
  v12 = *(_DWORD *)(v0 + v1);
  v3 = __OFSUB__(v12, 1);
  v13 = v12 - 1;
  if (v3)
    goto LABEL_10;
  *(_DWORD *)(v0 + v1) = v13;
  if (!v13 && *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
}

Swift::Void __swiftcall ScrollViewHelper.mayEndPanning(velocity:targetOffset:)(CGPoint velocity, CGPoint *targetOffset)
{
  uint64_t v2;
  CGFloat y;
  CGFloat x;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  CGPoint *v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  double *v14;
  CGFloat *v15;
  uint64_t v16;

  y = velocity.y;
  x = velocity.x;
  v6 = targetOffset->x;
  v7 = targetOffset->y;
  ScrollViewHelper.updateTargetContentOffset(_:velocity:)(targetOffset, velocity);
  v8 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset + 16))
    v9 = targetOffset;
  else
    v9 = (CGPoint *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset);
  v10 = targetOffset->x;
  v11 = targetOffset->y;
  v12 = targetOffset->x - v9->x;
  v13 = v11 - v9->y;
  v14 = (double *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange);
  *v14 = v12;
  v14[1] = v13;
  v15 = (CGFloat *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastVelocity);
  *v15 = x;
  v15[1] = y;
  LOBYTE(v15) = *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) == 3;
  v16 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState;
  *(CGFloat *)v16 = v6;
  *(CGFloat *)(v16 + 8) = v7;
  *(CGFloat *)(v16 + 16) = v10;
  *(double *)(v16 + 24) = v11;
  *(_BYTE *)(v16 + 32) = (_BYTE)v15;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 1;
}

Swift::Void __swiftcall ScrollViewHelper.updateTargetContentOffset(_:velocity:)(CGPoint *_, CGPoint velocity)
{
  uint64_t v2;
  uint64_t v3;
  CGFloat y;
  CGFloat x;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  void *v51;
  double *p_x;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  void *v60;
  CGPoint *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  CGFloat v68;
  double v69;
  double v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  _OWORD v75[3];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  double v86;
  double v87;
  _OWORD v88[4];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v3 = v2;
  y = velocity.y;
  x = velocity.x;
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options) & 1) == 0
    || (v13 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes,
        !*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes)))
  {
    *(_QWORD *)&v94 = 0;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    goto LABEL_38;
  }
  v14 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ResolvedScrollBehavior?(v14 + 8, (uint64_t)&v90);
  if (!*((_QWORD *)&v91 + 1))
  {
LABEL_38:
    outlined destroy of ResolvedScrollBehavior?((uint64_t)&v90);
    return;
  }
  v88[2] = v92;
  v88[3] = v93;
  v89 = v94;
  v88[0] = v90;
  v88[1] = v91;
  v15 = (void *)MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v15)
  {
    v67 = v14;
    v68 = y;
    v16 = v15;
    objc_msgSend(v15, sel_contentSize);
    v18 = v17;
    v20 = v19;
    objc_msgSend(v16, sel_adjustedContentInset);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v90 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment);
    EnvironmentValues.pixelLength.getter();
    v30 = v29;
    v60 = v16;
    objc_msgSend(v16, sel_frame);
    v86 = v32 - (v22 + v26);
    v87 = v31 - (v24 + v28);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0DED4F0], v7);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v30);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v30);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v61 = _;
    v69 = v24;
    v33 = v67;
    v34 = v87;
    v66 = *(unsigned __int8 *)(v67 + 81);
    v70 = v22;
    v35 = v86;
    ScrollTarget.init(rect:anchor:)();
    v36 = v90;
    v64 = v91;
    v65 = *((_QWORD *)&v90 + 1);
    v63 = *((_QWORD *)&v91 + 1);
    v62 = *((_QWORD *)&v92 + 1);
    v37 = v92;
    v38 = 4;
    v39 = v93;
    v40 = *(unsigned __int8 *)(v3 + v13);
    if ((*(_BYTE *)(v3 + v12) & 1) != 0 && v40)
      v38 = *(_BYTE *)(v33 + 80);
    EnvironmentValues.init()();
    EnvironmentValues.init()();
    v41 = v90;
    swift_release();
    swift_release();
    *(_QWORD *)&v77 = v36;
    *((_QWORD *)&v77 + 1) = v65;
    *(_QWORD *)&v78 = v64;
    *((_QWORD *)&v78 + 1) = v63;
    *(_QWORD *)&v79 = v37;
    *((_QWORD *)&v79 + 1) = v62;
    LOBYTE(v80) = v39;
    *((CGFloat *)&v80 + 1) = x;
    *(CGFloat *)&v81 = v68;
    *((double *)&v81 + 1) = v18;
    *(double *)&v82 = v20;
    *((double *)&v82 + 1) = v34;
    *(double *)&v83 = v35;
    BYTE8(v83) = v40;
    BYTE9(v83) = v38;
    *(_QWORD *)&v84 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v84 + 1) = MEMORY[0x1E0DEE9D8];
    v85 = v41;
    v90 = v77;
    v91 = v78;
    v97 = v84;
    v98 = v41;
    v95 = v82;
    v96 = v83;
    v93 = v80;
    v94 = v81;
    v92 = v79;
    v42 = ScrollTarget.init(rect:anchor:)();
    MEMORY[0x1E0C80A78](v42, v43);
    *(&v59 - 4) = (uint64_t)v88;
    *(&v59 - 3) = (uint64_t)v75;
    *(&v59 - 2) = (uint64_t)&v90;
    static Update.ensure<A>(_:)();
    v71 = v75[0];
    v72 = v75[1];
    v73 = v75[2];
    v74 = v76;
    ScrollTarget.rect.getter();
    v46 = v45;
    if (v66)
      v47 = v18 - (v34 + v44);
    else
      v47 = v44;
    v48 = static Axis.allCases.getter();
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
    {
      v50 = (_BYTE *)(v48 + 32);
      v51 = v60;
      p_x = &v61->x;
      while (1)
      {
        v54 = *v50 ? v35 : v34;
        v55 = *v50 ? v20 : v18;
        v53 = *v50 ? v46 : v47;
        v56 = v55 - v54;
        if (v56 <= 0.0)
          break;
        if (v53 < 0.0)
        {
          v53 = v56;
          if (v56 < 0.0)
            goto LABEL_27;
LABEL_31:
          v53 = 0.0;
          if ((*v50 & 1) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
        if (v56 < v53)
          v53 = v56;
        if ((*v50 & 1) == 0)
          goto LABEL_14;
LABEL_13:
        v46 = v53;
        v53 = v47;
LABEL_14:
        ++v50;
        v47 = v53;
        if (!--v49)
          goto LABEL_41;
      }
      if (v53 >= 0.0 && v53 <= 0.0)
      {
LABEL_27:
        if ((*v50 & 1) == 0)
          goto LABEL_14;
        goto LABEL_13;
      }
      goto LABEL_31;
    }
    v53 = v47;
    v51 = v60;
    p_x = &v61->x;
LABEL_41:

    swift_bridgeObjectRelease();
    outlined release of ScrollTargetBehaviorContext((uint64_t)&v77);
    v57 = v53 - v69;
    v58 = v46 - v70;
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v88);
    *p_x = v57;
    p_x[1] = v58;
  }
  else
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v88);
  }
}

Swift::Void __swiftcall ScrollViewHelper.didEndPanning(willDecelerate:)(Swift::Bool willDecelerate)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (willDecelerate)
    v3 = 3;
  else
    v3 = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = v3;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
  if (willDecelerate)
  {
    v4 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange;
    v5 = 0.0;
    v6 = 0.0;
    if (*(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange) != 0.0)
      v6 = *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange)
         / fabs(*(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange));
    v7 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias;
    *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias) = v6;
    v8 = *(double *)(v4 + 8);
    if (v8 != 0.0)
      v5 = v8 / fabs(v8);
    *(double *)(v7 + 8) = v5;
  }
  else
  {
    v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias);
    *v9 = 0;
    v9[1] = 0;
  }
  v10 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastVelocity);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange);
  *v11 = 0;
  v11[1] = 0;
  v12 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 1;
}

Swift::Void __swiftcall ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)(__C::CGRect oldBounds, __C::CGRect newBounds)
{
  uint64_t v2;
  uint64_t v3;
  CGFloat height;
  CGFloat width;
  double y;
  double x;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  double v23;
  double v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  double v27;
  double v28;
  void (*v29)(_BYTE *, uint64_t);
  double v30;
  double v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  _BYTE v47[24];
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v3 = v2;
  height = newBounds.size.height;
  width = newBounds.size.width;
  y = newBounds.origin.y;
  x = newBounds.origin.x;
  v8 = oldBounds.size.height;
  v9 = oldBounds.size.width;
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v16 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  LODWORD(v14) = *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v17 = __OFADD__((_DWORD)v14, 1);
  v18 = v14 + 1;
  if (v17)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v18;
  v19 = (void *)MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView, v13);
  if (!v19)
  {
LABEL_5:
    v21 = *(_DWORD *)(v2 + v16);
    v17 = __OFSUB__(v21, 1);
    v22 = v21 - 1;
    if (!v17)
    {
      *(_DWORD *)(v2 + v16) = v22;
      if (!v22 && *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
      return;
    }
    goto LABEL_43;
  }
  v20 = v19;
  if ((objc_msgSend(v19, sel_isTracking) & 1) != 0)
  {

    goto LABEL_5;
  }
  v48[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastEnvironment);
  EnvironmentValues.pixelLength.getter();
  v24 = v23;
  v25 = *MEMORY[0x1E0DED4F0];
  v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 104);
  v26(v15, v25, v10);
  *(CGFloat *)v48 = v9;
  *(CGFloat *)&v46 = v8;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v15, v24);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v15, v24);
  v27 = *(double *)v48;
  v28 = *(double *)&v46;
  v29 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v29(v15, v10);
  v26(v15, v25, v10);
  *(CGFloat *)v48 = width;
  *(CGFloat *)&v46 = height;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v15, v24);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v15, v24);
  v30 = *(double *)v48;
  v31 = *(double *)&v46;
  v29(v15, v10);
  v32 = v28 == v31 && v27 == v30;
  if (!v32)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options) & 1) == 0
    || !*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes))
  {
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
    memset(v48, 0, sizeof(v48));
    goto LABEL_24;
  }
  v33 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase);
  v34 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
  swift_beginAccess();
  outlined init with copy of ResolvedScrollBehavior?(v34 + 8, (uint64_t)v48);
  if (!*((_QWORD *)&v48[1] + 1))
  {
LABEL_24:
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v48);
    goto LABEL_25;
  }
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v48);
  if (v33 == 3 || *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_hasScrollPosition) != 1)
  {
    if (v27 == 0.0)
    {
      if (!v32 && v28 != 0.0)
        goto LABEL_31;
    }
    else if (!v32)
    {
LABEL_31:
      v37 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags);
      if ((v37 & 1) == 0)
        *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags) = v37 | 1;
      *(_OWORD *)v47 = 0u;
      v46 = 0u;
      v47[16] = 2;
      if (v33 == 3
        && (v38 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState,
            v39 = (_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState),
            v40 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState + 32),
            v40 != 2))
      {
        v42 = *((_QWORD *)v39 + 3);
        v41 = *(_OWORD *)((char *)v39 + 8);
        v43 = v40 & 1;
      }
      else
      {
        v39 = v48;
        specialized getter of defaultTargetOffsetState #1 in ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)((uint64_t)&v46, v33 == 3, (uint64_t)v48, x, y);
        v41 = *(_OWORD *)((char *)v48 + 8);
        v42 = *((_QWORD *)&v48[1] + 1);
        v43 = v49;
        v38 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState;
      }
      v44 = v3 + v38;
      *(_QWORD *)v44 = *(_QWORD *)v39;
      *(_OWORD *)(v44 + 8) = v41;
      *(_QWORD *)(v44 + 24) = v42;
      *(_BYTE *)(v44 + 32) = v43;
      LODWORD(v44) = *(_DWORD *)(v3 + v16);
      v17 = __OFSUB__((_DWORD)v44, 1);
      v45 = v44 - 1;
      if (v17)
        goto LABEL_45;
      *(_DWORD *)(v3 + v16) = v45;
      if (!v45 && *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
      objc_msgSend(v20, sel_setNeedsLayout, v46, *(_QWORD *)v47, *(_OWORD *)&v47[8]);

      return;
    }
  }
LABEL_25:

  v35 = *(_DWORD *)(v3 + v16);
  v17 = __OFSUB__(v35, 1);
  v36 = v35 - 1;
  if (v17)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  *(_DWORD *)(v3 + v16) = v36;
  if (!v36 && *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
}

Swift::Void __swiftcall ScrollViewHelper._updateCycleIdle(until:)(Swift::UInt64 until)
{
  uint64_t v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  double v8;
  char v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  char v17;
  unsigned __int8 v18;

  ScrollPrefetchState.init(deadline:)();
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    v2 = (void *)MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, sel__horizontalVelocity);
      if (v4 == 0.0)
      {
        v5 = *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias);

        v6 = v5 < 0.0;
        if (v5 == 0.0)
          goto LABEL_12;
      }
      else
      {
        v7 = v4;

        v8 = v7 / fabs(v7);
        v6 = v8 < 0.0;
        if (v8 == 0.0)
          goto LABEL_12;
      }
      if (v6)
        v9 = 2;
      else
        v9 = 8;
      if ((v18 & v9) == 0)
        v18 |= v9;
    }
  }
LABEL_12:
  if ((Axis.Set.contains(_:)() & 1) == 0)
    goto LABEL_23;
  v10 = (void *)MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (!v10)
    goto LABEL_23;
  v11 = v10;
  objc_msgSend(v10, sel__verticalVelocity);
  if (v12 == 0.0)
  {
    v13 = *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias + 8);

    v14 = v13 < 0.0;
    if (v13 == 0.0)
      goto LABEL_23;
  }
  else
  {
    v15 = v12;

    v16 = v15 / fabs(v15);
    v14 = v16 < 0.0;
    if (v16 == 0.0)
      goto LABEL_23;
  }
  if (v14)
    v17 = 1;
  else
    v17 = 4;
  if ((v18 & v17) == 0)
    v18 |= v17;
LABEL_23:
  if (v18)
    ScrollPrefetchState.commit(to:)();
}

uint64_t storeEnumTagSinglePayload for ScrollViewHelper.PendingUpdate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187601AD4 + 4 * byte_187C4404A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187601B08 + 4 * byte_187C44045[v4]))();
}

uint64_t sub_187601B08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187601B10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187601B18);
  return result;
}

uint64_t sub_187601B24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187601B2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187601B30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187601B38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ScrollViewHelper.PendingUpdate()
{
  return &unk_1E1AC0BD0;
}

void *type metadata accessor for ScrollViewHelper.TargetOffsetState()
{
  return &unk_1E1AC0C60;
}

ValueMetadata *type metadata accessor for ScrollViewHelper.UpdateFlags()
{
  return &type metadata for ScrollViewHelper.UpdateFlags;
}

ValueMetadata *type metadata accessor for ScrollViewHelper.Options()
{
  return &type metadata for ScrollViewHelper.Options;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.Options, &type metadata for ScrollViewHelper.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.Options, &type metadata for ScrollViewHelper.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.Options, &type metadata for ScrollViewHelper.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.Options, &type metadata for ScrollViewHelper.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.UpdateFlags, &type metadata for ScrollViewHelper.UpdateFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.UpdateFlags, &type metadata for ScrollViewHelper.UpdateFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.UpdateFlags, &type metadata for ScrollViewHelper.UpdateFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.UpdateFlags, &type metadata for ScrollViewHelper.UpdateFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewHelper.PendingUpdate, &unk_1E1AC0BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate);
  }
  return result;
}

double protocol witness for ScrollViewHelperDelegate.makeLayoutState() in conformance TextEditorTextView@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0xF000000000000004;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

id specialized UIScrollView.updateContentInsets(margins:axes:properties:safeArea:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  id v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id result;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;

  v4 = v3;
  outlined init with take of EdgeInsets?(a3, (uint64_t)&v83);
  v40 = *a1;
  v48 = a1[2];
  v46 = *((_BYTE *)a1 + 8);
  v47 = *((_BYTE *)a1 + 24);
  v45 = a1[4];
  v42 = a1[6];
  v43 = *((_BYTE *)a1 + 40);
  v44 = *((_BYTE *)a1 + 56);
  v6 = a1[8];
  v7 = *((_BYTE *)a1 + 72);
  v8 = a1[10];
  v9 = *((_BYTE *)a1 + 88);
  v10 = a1[12];
  v11 = *((_BYTE *)a1 + 104);
  v12 = a1[14];
  v13 = *((_BYTE *)a1 + 120);
  v14 = objc_msgSend(v4, sel_traitCollection);
  objc_msgSend(v14, sel_displayScale);

  static Edge.Set.all.getter();
  OptionalEdgeInsets.init()();
  v67 = v6;
  v68 = v7;
  v69 = v8;
  v70 = v9;
  v71 = v10;
  v72 = v11;
  v73 = v12;
  v74 = v13;
  static OptionalEdgeInsets.none.getter();
  v51 = v59;
  v52 = v60;
  v53 = v61;
  v54 = v62;
  v55 = v63;
  v56 = v64;
  v57 = v65;
  v58 = v66;
  v15 = MEMORY[0x18D7593E8](&v67, &v51);
  v16 = v40;
  if ((v15 & 1) == 0)
    v16 = v6;
  v75 = v16;
  v17 = v46;
  v18 = v47;
  if ((v15 & 1) == 0)
    v17 = v7;
  v76 = v17 & 1;
  v19 = v48;
  if ((v15 & 1) == 0)
  {
    v19 = v8;
    v18 = v9;
  }
  v20 = v45;
  if ((v15 & 1) == 0)
    v20 = v10;
  v21 = v43;
  if ((v15 & 1) == 0)
    v21 = v11;
  v22 = v42;
  if ((v15 & 1) == 0)
    v22 = v12;
  v77 = v19;
  v78 = v18 & 1;
  v23 = v44;
  if ((v15 & 1) == 0)
    v23 = v13;
  v79 = v20;
  v80 = v21 & 1;
  v81 = v22;
  v82 = v23 & 1;
  OptionalEdgeInsets.in(edges:)();
  EdgeInsets.rounded(toMultipleOf:)();
  static EdgeInsets.zero.getter();
  EdgeInsets.rounded(toMultipleOf:)();
  outlined init with take of EdgeInsets?(a3, (uint64_t)&v75);
  EdgeInsets.adding(_:)();
  v27 = v26;
  v29 = v28;
  if (*(_BYTE *)(a2 + 81))
    v30 = v24;
  else
    v30 = v25;
  if (*(_BYTE *)(a2 + 81))
    v31 = v25;
  else
    v31 = v24;
  result = objc_msgSend(v41, sel_contentInset);
  if (v36 != v27 || v33 != v31 || v34 != v29 || v35 != v30)
    return objc_msgSend(v41, sel_setContentInset_, v27, v31, v29, v30);
  return result;
}

uint64_t partial apply for closure #1 in ScrollViewHelper.updateTargetContentOffset(_:velocity:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8[9];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(__int128 **)(v0 + 32);
  v3 = v2[7];
  v8[6] = v2[6];
  v8[7] = v3;
  v8[8] = v2[8];
  v4 = v2[3];
  v8[2] = v2[2];
  v8[3] = v4;
  v5 = v2[5];
  v8[4] = v2[4];
  v8[5] = v5;
  v6 = v2[1];
  v8[0] = *v2;
  v8[1] = v6;
  return ResolvedScrollBehavior.updateTarget(_:context:)(v1, v8);
}

uint64_t specialized getter of defaultTargetOffsetState #1 in ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  int v7;
  char v10;
  double v11;
  double v12;

  v5 = result;
  v7 = *(unsigned __int8 *)(result + 32);
  if (v7 == 2)
  {
    v10 = a2 & 1;
    result = swift_beginAccess();
    *(double *)v5 = a4;
    *(double *)(v5 + 8) = a5;
    *(double *)(v5 + 16) = a4;
    *(double *)(v5 + 24) = a5;
    v11 = a4;
    v12 = a5;
    *(_BYTE *)(v5 + 32) = v10;
  }
  else
  {
    v11 = *(double *)(result + 16);
    v12 = *(double *)(result + 24);
    v10 = v7 & 1;
    a4 = *(double *)result;
    a5 = *(double *)(result + 8);
  }
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = v11;
  *(double *)(a3 + 24) = v12;
  *(_BYTE *)(a3 + 32) = v10;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void **a1)
{
  char *v1;
  void *v2;
  id v3;
  char *v4;
  Class isa;
  uint64_t result;
  _BYTE v7[88];
  uint64_t v8;
  _BYTE v9[96];

  v1 = (char *)*a1;
  if (!*a1)
    goto LABEL_7;
  outlined init with copy of Toolbar.UpdateContext?((uint64_t)(a1 + 1), (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
LABEL_7:
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with take of Toolbar.UpdateContext((uint64_t)v7, (uint64_t)v9);
  v2 = *(void **)&v1[direct field offset for ToolbarBridge.platformVended + 32];
  if (v2)
  {
    type metadata accessor for UIBarButtonItem();
    v3 = v2;
    v4 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_setItems_, isa);

  }
  outlined destroy of Toolbar.UpdateContext((uint64_t)v9);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ToolbarBridge.resetPlatform()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A48]), sel_init);
  v2 = v0 + direct field offset for ToolbarBridge.platformVended;
  v3 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended);
  v4 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended + 8);
  v5 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended + 32);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = v1;
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 24) = v6;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
}

void ToolbarBridge<>.platformDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v1 = direct field offset for ToolbarBridge.platformVended;
  v2 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended);
  if (v2)
    goto LABEL_5;
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ToolbarPlatformDelegate()), sel_init);
  v4 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = v3;

  v5 = *(_QWORD *)(v0 + v1);
  if (v5)
  {
    *(_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI23ToolbarPlatformDelegate_provider + 8) = &protocol witness table for <> ToolbarBridge<A>;
    swift_unknownObjectWeakAssign();
    v6 = *(void **)(v0 + v1);
    if (v6)
    {
      v7 = v6;
LABEL_5:
      v8 = v2;
      return;
    }
  }
  __break(1u);
}

BOOL ToolbarBridge.allowsUpdates.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[48];

  v1 = *(_QWORD *)(v0 + direct field offset for ToolbarBridge.navigationAdaptor);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = v1 + 32;
  swift_bridgeObjectRetain();
  v4 = 0;
  do
  {
    outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v3, (uint64_t)v12);
    outlined init with copy of TableColumnList((uint64_t)v12, (uint64_t)v9);
    outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v12);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 8))(&v8, v5, v6);
    v4 |= v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    v3 += 48;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return (v4 & 2) == 0;
}

uint64_t closure #1 in ToolbarBridge.update(environment:context:)(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[97];
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v9 = *a2;
  v10 = *MEMORY[0x1E0DEEDD8];
  v14 = a4 & 0x101;
  v15 = BYTE2(a4) & 1;
  v11 = v10 & v9;
  v16 = BYTE3(a4) & 1;
  v17 = BYTE4(a4);
  v18 = BYTE5(a4);
  v19 = BYTE6(a4) & 1;
  outlined init with copy of Toolbar.UpdateContext(a5, (uint64_t)v13);
  ToolbarBridge.updateStorage(newStorage:barContext:updateContext:strategy:)(a3, (unsigned __int8 *)&v14, (uint64_t)v13, a1);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
  *a6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v11 + 88) + 96))(*(_QWORD *)(v11 + 80));
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _QWORD v11[3];
  __int128 v12;
  _BYTE v13[40];

  v6 = *MEMORY[0x1E0DEEDD8] & *a2;
  v7 = (uint64_t)a2 + direct field offset for ToolbarBridge.searchItem;
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?(a1, v7, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  swift_endAccess();
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v6 + 88) + 104))(*(_QWORD *)(v6 + 80));
  if ((result & 1) != 0)
  {
    memset(v11, 0, sizeof(v11));
    v12 = xmmword_187C44460;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *a4;
    *a4 = 0x8000000000000000;
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v11, isUniquelyReferenced_nonNull_native, (uint64_t)v13);
    *a4 = v10;
    swift_bridgeObjectRelease();
    return outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
  }
  return result;
}

uint64_t closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v43[12];
  unsigned __int8 v44;
  char v45;
  char v46;
  char v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  __int128 v51[5];

  v7 = *(_OWORD *)(a1 + 16);
  v51[0] = *(_OWORD *)a1;
  v51[1] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v51[2] = *(_OWORD *)(a1 + 32);
  v51[3] = v8;
  v9 = *MEMORY[0x1E0DEEDD8] & *a2;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(unsigned __int8 *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = (char *)a2 + direct field offset for ToolbarBridge.toolbarStorage;
  v15 = *(_QWORD *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage);
  v16 = *(_QWORD *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 8);
  v17 = *(_QWORD *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 16);
  v18 = *(_QWORD *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 24);
  v20 = *(_QWORD *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 32);
  v19 = *(_QWORD *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 40);
  *(_OWORD *)v14 = v51[0];
  *((_OWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 4) = v10;
  *((_QWORD *)v14 + 5) = v11;
  *((_QWORD *)v14 + 6) = v12;
  *((_QWORD *)v14 + 7) = v13;
  outlined retain of ToolbarStorage((uint64_t)v51);
  outlined consume of ToolbarStorage?(v15, v16, v17, v18, v20, v19);
  v43[0] = a4;
  v22 = *(_QWORD *)(v9 + 80);
  v21 = *(_QWORD *)(v9 + 88);
  ToolbarStrategy.makeBarContext(storage:preferences:)((uint64_t)v51, v43, v22, v21, (uint64_t)&v44);
  v23 = v44;
  v24 = v45;
  v25 = v46;
  v26 = v47;
  v27 = v48;
  v28 = v49;
  v29 = v50;
  v30 = 256;
  if (!v45)
    v30 = 0;
  v31 = v30 | v44;
  v32 = 0x10000;
  if (!v46)
    v32 = 0;
  v33 = 0x1000000;
  if (!v47)
    v33 = 0;
  v34 = v31 | v32 | v33;
  v35 = v34 | ((unint64_t)v48 << 32) | ((unint64_t)v49 << 40);
  v36 = (char *)a2 + direct field offset for ToolbarBridge.lastBarContext;
  *(_DWORD *)v36 = v34;
  *((_WORD *)v36 + 2) = WORD2(v35);
  v37 = 0x1000000000000;
  if (!v29)
    v37 = 0;
  v36[6] = (v35 | v37) >> 48;
  v44 = v23;
  v45 = v24;
  v46 = v25;
  v47 = v26;
  v48 = v27;
  v49 = v28;
  v50 = v29;
  outlined init with copy of Toolbar.UpdateContext(a5, (uint64_t)v43);
  ToolbarBridge.updateStorage(newStorage:barContext:updateContext:strategy:)(v51, &v44, (uint64_t)v43, a3);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v43);
  *(_QWORD *)a6 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 96))(v22, v21);
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(a6 + 8) = 1;
  return result;
}

uint64_t closure #4 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *MEMORY[0x1E0DEEDD8] & *a2;
  v6 = (uint64_t)a2 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?(a1, v6, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
  swift_endAccess();
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v5 + 88) + 112))(*(_QWORD *)(v5 + 80));
  *(_BYTE *)(a3 + 10) = result;
  return result;
}

BOOL closure #1 in ToolbarBridge.findAndSortMatchingItems(in:newStorage:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(v9 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)&v8[v10] = v11;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
  v12 = *(int *)(v5 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)&v8[v12] = v13;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
  return v11 < v13;
}

uint64_t specialized thunk for @callee_guaranteed (@in_guaranteed ToolbarStorage.Entry, @unowned Int) -> (@out ToolbarStorage.Entry)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for ToolbarStorage.Entry);
}

void specialized implicit closure #2 in ToolbarBridge.makeStorage(in:from:strategy:)()
{
  ToolbarStorage.Entry.id.getter();
}

id ToolbarPlatformDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ToolbarPlatformDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ToolbarPlatformDelegate()
{
  return objc_opt_self();
}

id protocol witness for ToolbarBridgeProvider.toolbarBridge.getter in conformance <> ToolbarBridge<A>()
{
  void *v0;

  return v0;
}

unint64_t type metadata accessor for UIBarButtonItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIBarButtonItem;
  if (!lazy cache variable for type metadata for UIBarButtonItem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  }
  return result;
}

uint64_t ToolbarItemPlacement.Role.couldBeInPrimaryBar.getter()
{
  uint64_t v0;
  BOOL v1;
  int8x16_t v2;
  int8x8_t v3;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;

  outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v12);
  if (v15 == 2)
  {
    v1 = v12 == 11 || v12 == 4;
    v2 = vorrq_s8(v13, v14);
    v3 = vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
    if (v1 && *(_QWORD *)&v3 == 0)
    {
      outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v12);
LABEL_14:
      v6 = 0;
      goto LABEL_15;
    }
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v12);
  outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v12);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v12, (uint64_t)&v8);
  if (v11 == 2 && v8 == 8)
  {
    v5 = vorrq_s8(v9, v10);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))
      goto LABEL_14;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v8);
  v6 = 1;
LABEL_15:
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v12);
  return v6;
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned __int8 v68;

  v60 = a5;
  v61 = a6;
  v59 = a4;
  v62 = a3;
  type metadata accessor for ToolbarStorage.Entry?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarStorage.Entry(0);
  v63 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v64 = (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v67);
  v15 = (uint64_t *)(a2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v16 = *v15;
  if (*(_QWORD *)(*v15 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v67), (v18 & 1) != 0))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 24 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = (_QWORD *)v19[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
    v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v22 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(v20);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v67);
  v23 = *(_QWORD *)(v20 + 16);
  if (!v23)
  {
LABEL_37:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v67);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = *v15;
    *v15 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, v21, (uint64_t)v22, (uint64_t)&v67, isUniquelyReferenced_nonNull_native);
    *v15 = v65;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)&v67);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v55 = a1;
  v56 = v15;
  swift_bridgeObjectRetain();
  v54 = v20;
  v24 = (uint64_t *)(v20 + 40);
  v25 = v63;
  v57 = v12;
  v58 = v21;
  while (!*(_QWORD *)(v21 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v11, 1, 1, v12);
LABEL_8:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.Entry?);
LABEL_9:
    v24 += 2;
    if (!--v23)
    {
      v20 = v54;
      swift_bridgeObjectRelease();
      a1 = v55;
      v15 = v56;
      goto LABEL_37;
    }
  }
  v26 = *(v24 - 1);
  v27 = *v24;
  swift_bridgeObjectRetain_n();
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
  if ((v29 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v21 + 56) + *(_QWORD *)(v25 + 72) * v28, (uint64_t)v11, type metadata accessor for ToolbarStorage.Entry);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v11, v30, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v12) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with take of TableCellFormula((uint64_t)v11, v64, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  v31 = swift_isUniquelyReferenced_nonNull_native();
  v66 = v22;
  swift_bridgeObjectRetain();
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
  v34 = v22[2];
  v35 = (v32 & 1) == 0;
  v36 = v34 + v35;
  if (!__OFADD__(v34, v35))
  {
    v37 = v32;
    if (v22[3] >= v36)
    {
      if ((v31 & 1) != 0)
      {
        v25 = v63;
        if ((v32 & 1) == 0)
          goto LABEL_25;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v25 = v63;
        if ((v37 & 1) == 0)
          goto LABEL_25;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, v31);
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
      if ((v37 & 1) != (v39 & 1))
        goto LABEL_40;
      v33 = v38;
      v25 = v63;
      if ((v37 & 1) == 0)
      {
LABEL_25:
        v41 = 0;
        v42 = -1;
LABEL_26:
        v67 = v41;
        v68 = v42;
        closure #1 in closure #1 in UIKitToolbarStrategy.makeBarItems()(v64, (uint64_t)&v67, v62, v59, v60, v61);
        v43 = v68;
        if (v68 == 255)
        {
          if ((v37 & 1) != 0)
          {
            v22 = v66;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v33, (uint64_t)v22);
LABEL_31:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v22 = v66;
          }
        }
        else
        {
          v44 = v67;
          v22 = v66;
          if ((v37 & 1) != 0)
          {
            v45 = v66[7] + 16 * v33;
            *(_QWORD *)v45 = v67;
            *(_BYTE *)(v45 + 8) = v43;
            goto LABEL_31;
          }
          v66[(v33 >> 6) + 8] |= 1 << v33;
          v46 = (uint64_t *)(v22[6] + 16 * v33);
          *v46 = v26;
          v46[1] = v27;
          v47 = v22[7] + 16 * v33;
          *(_QWORD *)v47 = v44;
          *(_BYTE *)(v47 + 8) = v43;
          v48 = v22[2];
          v49 = __OFADD__(v48, 1);
          v50 = v48 + 1;
          if (v49)
            goto LABEL_39;
          v22[2] = v50;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, type metadata accessor for ToolbarStorage.Entry);
        v12 = v57;
        v21 = v58;
        goto LABEL_9;
      }
    }
    v40 = v66[7] + 16 * v33;
    v41 = *(_QWORD *)v40;
    v42 = *(_BYTE *)(v40 + 8);
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void type metadata accessor for ToolbarStorage.Entry?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, void *a3, int a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  id v50;
  int v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char v57;
  void *v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[6];

  v75 = a5;
  v71 = a4;
  v74 = a3;
  v76 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v76, v7);
  v78 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v73 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v72 = (uint64_t)&v68 - v14;
  type metadata accessor for ToolbarStorage.Entry?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v81 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ToolbarStorage.Entry(0);
  v79 = *(_QWORD *)(v18 - 8);
  v80 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v82 = (uint64_t)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v85);
  v21 = (uint64_t *)(a2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v22 = *v21;
  if (*(_QWORD *)(*v21 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v85), (v24 & 1) != 0))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 24 * v23);
    v26 = *v25;
    v27 = v25[1];
    v28 = (_QWORD *)v25[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = MEMORY[0x1E0DEE9D8];
    v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v28 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(v26);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)v85);
  v29 = *(_QWORD *)(v26 + 16);
  v30 = v75;
  if (!v29)
  {
LABEL_48:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v85);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84 = *v21;
    *v21 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v27, (uint64_t)v28, (uint64_t)v85, isUniquelyReferenced_nonNull_native);
    *v21 = v84;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)v85);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v69 = v21;
  v70 = a1;
  swift_bridgeObjectRetain();
  v68 = v26;
  v31 = (uint64_t *)(v26 + 40);
  v33 = v80;
  v32 = (uint64_t)v81;
  v34 = v79;
  v77 = v27;
  while (!*(_QWORD *)(v27 + 16))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v32, 1, 1, v33);
LABEL_8:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v32, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.Entry?);
LABEL_9:
    v31 += 2;
    if (!--v29)
    {
      v26 = v68;
      swift_bridgeObjectRelease();
      a1 = v70;
      v21 = v69;
      goto LABEL_48;
    }
  }
  v35 = *(v31 - 1);
  v36 = *v31;
  swift_bridgeObjectRetain_n();
  v83 = v35;
  v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
  if ((v38 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v27 + 56) + *(_QWORD *)(v34 + 72) * v37, v32, type metadata accessor for ToolbarStorage.Entry);
    v39 = 0;
  }
  else
  {
    v39 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v32, v39, 1, v33);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with take of TableCellFormula(v32, v82, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  v40 = swift_isUniquelyReferenced_nonNull_native();
  v85[0] = v28;
  swift_bridgeObjectRetain();
  v42 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v36);
  v43 = v28[2];
  v44 = (v41 & 1) == 0;
  v45 = v43 + v44;
  if (!__OFADD__(v43, v44))
  {
    v46 = v41;
    if (v28[3] >= v45)
    {
      v49 = (uint64_t)v78;
      if ((v40 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        goto LABEL_20;
      }
      if ((v41 & 1) != 0)
        goto LABEL_24;
LABEL_21:
      v50 = 0;
      v51 = 255;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, v40);
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v36);
      v49 = (uint64_t)v78;
      if ((v46 & 1) != (v48 & 1))
        goto LABEL_51;
      v42 = v47;
LABEL_20:
      if ((v46 & 1) == 0)
        goto LABEL_21;
LABEL_24:
      v52 = *(_QWORD *)(v85[0] + 56) + 16 * v42;
      v50 = *(id *)v52;
      v51 = *(unsigned __int8 *)(v52 + 8);
      if (v51 == 1)
      {
        v53 = v50;
        goto LABEL_33;
      }
    }
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v82, v49, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v49, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (v51 == 255)
        goto LABEL_28;
LABEL_36:
      v28 = (_QWORD *)v85[0];
      if ((v46 & 1) != 0)
      {
        v60 = *(_QWORD *)(v85[0] + 56) + 16 * v42;
        *(_QWORD *)v60 = v50;
        *(_BYTE *)(v60 + 8) = v51;
LABEL_38:
        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)(v85[0] + 8 * (v42 >> 6) + 64) |= 1 << v42;
        v61 = (_QWORD *)(v28[6] + 16 * v42);
        *v61 = v83;
        v61[1] = v36;
        v62 = v28[7] + 16 * v42;
        *(_QWORD *)v62 = v50;
        *(_BYTE *)(v62 + 8) = v51;
        v63 = v28[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_50;
        v28[2] = v65;
      }
    }
    else
    {
      v54 = v73;
      outlined init with take of TableCellFormula(v49, v73, type metadata accessor for ToolbarStorage.Item);
      v55 = v72;
      outlined init with take of TableCellFormula(v54, v72, type metadata accessor for ToolbarStorage.Item);
      if (v74)
      {
        v56 = v74;
        outlined consume of Toolbar.VendedItem?(v50, v51);
        v50 = specialized static UIKitBarButtonItem.makeVended(item:context:)(v55, v56, v71);
        LOBYTE(v51) = v57;
        v53 = v58;

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, type metadata accessor for ToolbarStorage.Item);
        if (v53)
        {
          v30 = v75;
LABEL_33:
          v59 = v53;
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

        }
        else
        {
          v30 = v75;
        }
        goto LABEL_36;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, type metadata accessor for ToolbarStorage.Item);
      v30 = v75;
      if (v51 != 255)
        goto LABEL_36;
LABEL_28:
      if ((v46 & 1) != 0)
      {
        v28 = (_QWORD *)v85[0];
        swift_arrayDestroy();
        specialized _NativeDictionary._delete(at:)(v42, (uint64_t)v28);
        goto LABEL_38;
      }
      swift_bridgeObjectRelease();
      v28 = (_QWORD *)v85[0];
    }
    v27 = v77;
    v33 = v80;
    v32 = (uint64_t)v81;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v82, type metadata accessor for ToolbarStorage.Entry);
    v34 = v79;
    goto LABEL_9;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ToolbarBridge.update(environment:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0x1000000000000;
  if (!*(_BYTE *)(v1 + 38))
    v2 = 0;
  v3 = 0x1000000;
  if (!*(_BYTE *)(v1 + 35))
    v3 = 0;
  v4 = 0x10000;
  if (!*(_BYTE *)(v1 + 34))
    v4 = 0;
  v5 = v3 | v4;
  v6 = 256;
  if (!*(_BYTE *)(v1 + 33))
    v6 = 0;
  return closure #1 in ToolbarBridge.update(environment:context:)(a1, *(uint64_t **)(v1 + 16), *(__int128 **)(v1 + 24), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 36) << 32) | v5 | v6 | *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48));
}

uint64_t specialized ToolbarBridge.findAndSortMatchingItems(in:newStorage:context:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  _QWORD v106[6];
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  char v114;
  _BYTE v115[48];
  _BYTE v116[56];
  uint64_t v117;

  v96 = a1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v81 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v80 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v79 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v84 = (uint64_t)&v75 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v75 - v15;
  v99 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v99, v17);
  v97 = (uint64_t)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v75 - v21;
  v23 = type metadata accessor for ToolbarStorage.Item(0);
  v77 = *(_QWORD *)(v23 - 8);
  v78 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v88 = (uint64_t)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v75 - v28;
  v30 = (char *)type metadata accessor for ToolbarStorage.Entry(0);
  v31 = *((_QWORD *)v30 - 1);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *a3;
  v93 = a3[1];
  v94 = v35;
  v36 = a3[2];
  v91 = a3[3];
  v92 = v36;
  v95 = a3[4];
  v37 = a3[5];
  v89 = a3[6];
  v90 = v37;
  v117 = MEMORY[0x1E0DEE9D8];
  v38 = swift_bridgeObjectRetain();
  v39 = specialized _ArrayProtocol.filter(_:)(v38);
  swift_bridgeObjectRelease();
  v40 = v39;
  v103 = *(_QWORD *)(v39 + 16);
  if (!v103)
  {
    swift_bridgeObjectRelease();
    v67 = MEMORY[0x1E0DEE9D8];
    goto LABEL_186;
  }
  v75 = 0;
  v76 = v30;
  v41 = 0;
  v102 = v40 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  v83 = v16 + 16;
  v86 = v29 + 48;
  v87 = v29;
  v42 = MEMORY[0x1E0DEE9E8];
  v43 = (uint64_t)v79;
  v82 = v16;
  v100 = v40;
  v101 = v31;
  v98 = &v111;
  while (1)
  {
    if (v41 >= *(_QWORD *)(v40 + 16))
    {
      __break(1u);
      JUMPOUT(0x187604FDCLL);
    }
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v102 + *(_QWORD *)(v31 + 72) * v41, (uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, (uint64_t)v22, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload())
      break;
    v48 = v88;
    outlined init with take of TableCellFormula((uint64_t)v22, v88, type metadata accessor for ToolbarStorage.Item);
    v49 = v48;
    v50 = (uint64_t)v87;
    outlined init with take of TableCellFormula(v49, (uint64_t)v87, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v86, (uint64_t)&v107);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v50, type metadata accessor for ToolbarStorage.Item);
    v46 = (uint64_t)v98;
LABEL_15:
    if (v110 == 255)
      goto LABEL_4;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v107, (uint64_t)v116);
    LOBYTE(v107) = v94;
    BYTE1(v107) = v93;
    BYTE2(v107) = v92;
    BYTE3(v107) = v91;
    BYTE4(v107) = v95;
    BYTE5(v107) = v90;
    BYTE6(v107) = v89;
    v51 = Toolbar.BarLocation.priority(for:context:)((uint64_t)v116, (unsigned __int8 *)&v107);
    if ((v52 & 1) == 0)
    {
      v85 = v51;
      if (*(_QWORD *)(v42 + 16))
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        ToolbarItemPlacement.Role.hash(into:)();
        v53 = Hasher._finalize()();
        v54 = -1 << *(_BYTE *)(v42 + 32);
        v55 = v53 & ~v54;
        if (((*(_QWORD *)(v42 + 56 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
        {
          v56 = ~v54;
          do
          {
            outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v42 + 48) + 48 * v55, (uint64_t)v115);
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v115, (uint64_t)&v107);
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v116, v46);
            if (v110)
            {
              if (v110 == 1)
              {
                outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v107, (uint64_t)v106);
                if (v114 == 1)
                {
                  v57 = *(_OWORD *)(v46 + 16);
                  v104[0] = *(_OWORD *)v46;
                  v104[1] = v57;
                  v105 = *(_QWORD *)(v46 + 32);
                  v58 = MEMORY[0x18D75E284](v106, v104);
                  outlined destroy of AnyHashable((uint64_t)v104);
                  outlined destroy of AnyHashable((uint64_t)v106);
                  if ((v58 & 1) != 0)
                    goto LABEL_153;
LABEL_30:
                  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v107);
                  goto LABEL_22;
                }
                outlined destroy of AnyHashable((uint64_t)v106);
              }
              else
              {
                if (!(*((_QWORD *)&v108 + 1) | v109 | (unint64_t)v107 | (unint64_t)v108 | *((_QWORD *)&v107 + 1)))
                {
                  if (v114 == 2)
                  {
                    v60 = vorrq_s8(v112, v113);
                    if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)) | v111))
                    {
LABEL_153:
                      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v107);
                      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v115);
                      swift_bridgeObjectRelease();
                      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v116);
                      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
                      v43 = (uint64_t)v79;
                      goto LABEL_165;
                    }
                  }
                  goto LABEL_21;
                }
                v59 = *((_QWORD *)&v108 + 1) | v109 | v108 | *((_QWORD *)&v107 + 1);
                if ((_QWORD)v107 != 1 || v59)
                {
                  if ((_QWORD)v107 != 2 || v59)
                  {
                    if ((_QWORD)v107 != 3 || v59)
                    {
                      if ((_QWORD)v107 != 4 || v59)
                      {
                        if ((_QWORD)v107 != 5 || v59)
                        {
                          if ((_QWORD)v107 != 6 || v59)
                          {
                            if ((_QWORD)v107 != 7 || v59)
                            {
                              if ((_QWORD)v107 != 8 || v59)
                              {
                                if ((_QWORD)v107 != 9 || v59)
                                {
                                  if ((_QWORD)v107 != 10 || v59)
                                  {
                                    if ((_QWORD)v107 != 11 || v59)
                                    {
                                      if ((_QWORD)v107 != 12 || v59)
                                      {
                                        if ((_QWORD)v107 != 13 || v59)
                                        {
                                          if ((_QWORD)v107 != 14 || v59)
                                          {
                                            if ((_QWORD)v107 != 15 || v59)
                                            {
                                              if ((_QWORD)v107 != 16 || v59)
                                              {
                                                if ((_QWORD)v107 != 17 || v59)
                                                {
                                                  if ((_QWORD)v107 != 18 || v59)
                                                  {
                                                    if ((_QWORD)v107 != 19 || v59)
                                                    {
                                                      if ((_QWORD)v107 != 20 || v59)
                                                      {
                                                        if ((_QWORD)v107 != 21 || v59)
                                                        {
                                                          if ((_QWORD)v107 != 22 || v59)
                                                          {
                                                            if ((_QWORD)v107 != 23 || v59)
                                                            {
                                                              v46 = (uint64_t)v98;
                                                              if (v114 == 2 && v111 == 24)
                                                              {
LABEL_152:
                                                                v61 = vorrq_s8(v112, v113);
                                                                if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)))goto LABEL_153;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v46 = (uint64_t)v98;
                                                              if (v114 == 2 && v111 == 23)
                                                                goto LABEL_152;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v46 = (uint64_t)v98;
                                                            if (v114 == 2 && v111 == 22)
                                                              goto LABEL_152;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v46 = (uint64_t)v98;
                                                          if (v114 == 2 && v111 == 21)
                                                            goto LABEL_152;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v46 = (uint64_t)v98;
                                                        if (v114 == 2 && v111 == 20)
                                                          goto LABEL_152;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v46 = (uint64_t)v98;
                                                      if (v114 == 2 && v111 == 19)
                                                        goto LABEL_152;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v46 = (uint64_t)v98;
                                                    if (v114 == 2 && v111 == 18)
                                                      goto LABEL_152;
                                                  }
                                                }
                                                else if (v114 == 2 && v111 == 17)
                                                {
                                                  goto LABEL_152;
                                                }
                                              }
                                              else if (v114 == 2 && v111 == 16)
                                              {
                                                goto LABEL_152;
                                              }
                                            }
                                            else if (v114 == 2 && v111 == 15)
                                            {
                                              goto LABEL_152;
                                            }
                                          }
                                          else if (v114 == 2 && v111 == 14)
                                          {
                                            goto LABEL_152;
                                          }
                                        }
                                        else if (v114 == 2 && v111 == 13)
                                        {
                                          goto LABEL_152;
                                        }
                                      }
                                      else if (v114 == 2 && v111 == 12)
                                      {
                                        goto LABEL_152;
                                      }
                                    }
                                    else if (v114 == 2 && v111 == 11)
                                    {
                                      goto LABEL_152;
                                    }
                                  }
                                  else if (v114 == 2 && v111 == 10)
                                  {
                                    goto LABEL_152;
                                  }
                                }
                                else if (v114 == 2 && v111 == 9)
                                {
                                  goto LABEL_152;
                                }
                              }
                              else if (v114 == 2 && v111 == 8)
                              {
                                goto LABEL_152;
                              }
                            }
                            else if (v114 == 2 && v111 == 7)
                            {
                              goto LABEL_152;
                            }
                          }
                          else if (v114 == 2 && v111 == 6)
                          {
                            goto LABEL_152;
                          }
                        }
                        else if (v114 == 2 && v111 == 5)
                        {
                          goto LABEL_152;
                        }
                      }
                      else if (v114 == 2 && v111 == 4)
                      {
                        goto LABEL_152;
                      }
                    }
                    else if (v114 == 2 && v111 == 3)
                    {
                      goto LABEL_152;
                    }
                  }
                  else if (v114 == 2 && v111 == 2)
                  {
                    goto LABEL_152;
                  }
                }
                else if (v114 == 2 && v111 == 1)
                {
                  goto LABEL_152;
                }
              }
            }
            else
            {
              outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v107, (uint64_t)v106);
              if (!v114)
              {
                if (LOBYTE(v106[0]) == v111)
                  goto LABEL_153;
                goto LABEL_30;
              }
            }
LABEL_21:
            outlined destroy of UIBackgroundConfiguration?((uint64_t)&v107, (uint64_t)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role), (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD))type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_22:
            outlined destroy of ToolbarItemPlacement.Role((uint64_t)v115);
            v55 = (v55 + 1) & v56;
          }
          while (((*(_QWORD *)(v42 + 56 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) != 0);
        }
        swift_bridgeObjectRelease();
        v43 = (uint64_t)v79;
      }
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v116, (uint64_t)&v107);
      if (!v110)
        goto LABEL_191;
      if (v110 == 1)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v107);
        goto LABEL_164;
      }
      if (!(*((_QWORD *)&v108 + 1) | v109 | (unint64_t)v107 | (unint64_t)v108 | *((_QWORD *)&v107 + 1))
        || (v62 = *((_QWORD *)&v108 + 1) | v109 | v108 | *((_QWORD *)&v107 + 1), (unint64_t)(v107 - 1) <= 7)
        && !v62
        || ((unint64_t)(v107 - 9) > 9 || v62)
        && ((_QWORD)v107 == 19 && !v62
         || ((v107 & 0xFFFFFFFFFFFFFFFELL) != 0x14 ? (v66 = (_QWORD)v107 == 22) : (v66 = 1), !v66 || v62)))
      {
LABEL_191:
        outlined init with copy of Toolbar.BarLocation(v96, (uint64_t)&v107);
        switch(*((_QWORD *)&v108 + 1))
        {
          case 0:
          case 4:
          case 5:
          case 6:
          case 7:
            goto LABEL_163;
          case 1:
          case 8:
          case 9:
          case 0xALL:
          case 0xBLL:
          case 0xCLL:
          case 0xDLL:
          case 0xELL:
            break;
          case 2:
          case 3:
            if ((static SemanticFeature.isEnabled.getter() & 1) == 0 && v95 != 2 && (v95 & 1) == 0)
            {
LABEL_163:
              outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v116, (uint64_t)v115);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v106[0] = v42;
              specialized _NativeSet.update(with:isUnique:)((uint64_t)v115, isUniquelyReferenced_nonNull_native, (uint64_t)&v107);
              v42 = v106[0];
              swift_bridgeObjectRelease();
              outlined destroy of UIBackgroundConfiguration?((uint64_t)&v107, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
            }
            break;
          default:
            outlined destroy of Toolbar.BarLocation((uint64_t)&v107);
            break;
        }
      }
LABEL_164:
      v64 = v80;
      v65 = *(int *)(v81 + 48);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, v80, type metadata accessor for ToolbarStorage.Entry);
      *(_QWORD *)(v64 + v65) = v85;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [(ToolbarStorage.Entry, Int)], (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      Array.append(_:)();
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v116);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
LABEL_165:
      v16 = v82;
      goto LABEL_5;
    }
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v116);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
LABEL_5:
    ++v41;
    v40 = v100;
    v31 = v101;
    if (v41 == v103)
      goto LABEL_184;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for ToolbarStorage.Entry.Kind);
  v44 = v97;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, v97, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, type metadata accessor for ToolbarStorage.Entry.Kind);
    v107 = 0u;
    v108 = 0u;
    v109 = 0;
    v110 = -1;
LABEL_4:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
    outlined destroy of UIBackgroundConfiguration?((uint64_t)&v107, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage?);
    goto LABEL_5;
  }
  outlined init with take of TableCellFormula(v44, v43, type metadata accessor for ToolbarStorage.GroupItem);
  v45 = *(_QWORD **)(v43 + 72);
  v46 = (uint64_t)v98;
  if (v45[2] != 1)
  {
LABEL_13:
    v47 = v84;
    outlined init with take of TableCellFormula(v43, v84, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with take of TableCellFormula(v47, (uint64_t)v16, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v83, (uint64_t)&v107);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for ToolbarStorage.GroupItem);
    goto LABEL_15;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (!v45[2])
      goto LABEL_183;
    goto LABEL_12;
  }
  v45 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v45);
  if (v45[2])
  {
LABEL_12:
    *((_BYTE *)v45
    + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
    + *(int *)(v78 + 60)) = 1;
    *(_QWORD *)(v43 + 72) = v45;
    goto LABEL_13;
  }
LABEL_183:
  __break(1u);
LABEL_184:
  swift_bridgeObjectRelease();
  v67 = v117;
  v30 = v76;
LABEL_186:
  *(_QWORD *)&v107 = v67;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [(ToolbarStorage.Entry, Int)], (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v69 = v68;
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v69);
  v70 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v107 = v70;
  v71 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v69);
  v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))specialized thunk for @callee_guaranteed (@in_guaranteed ToolbarStorage.Entry, @unowned Int) -> (@out ToolbarStorage.Entry), 0, v69, v30, MEMORY[0x1E0DEDCE8], v71, MEMORY[0x1E0DEDD18], v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v73;
}

uint64_t outlined assign with take of ToolbarStorage.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarStorage.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ToolbarStorage.GroupItem?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ToolbarStorage.Item?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v2 + direct field offset for ToolbarBridge.navigationAdaptor) = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 9) = 1;
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

Swift::Void __swiftcall IncrementalFocusableFillerBoundsProvider.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  double v11;
  uint64_t (*v12)(void);
  uint64_t *v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  CGFloat *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat MidX;
  CGFloat MidY;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  char v55;
  uint64_t v56;
  char v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  double v62;
  double v63;
  _OWORD v64[3];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  CGRect v69;
  CGRect v70;

  v1 = v0;
  v68 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != v3)
  {
    *(_DWORD *)(v1 + 32) = v3;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 56) = 1;
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 64) = v4;
  }
  Value = AGGraphGetValue();
  v65 = *(_QWORD *)Value;
  v66 = *(_OWORD *)(Value + 8);
  v67 = *(_OWORD *)(Value + 24);
  v64[0] = *(_OWORD *)AGGraphGetValue();
  v6 = swift_retain();
  *(double *)&v7 = MEMORY[0x18D755E9C](v6);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v8, v7));
  v9 = (_OWORD *)AGGraphGetValue();
  v10 = v9[1];
  v64[0] = *v9;
  v64[1] = v10;
  v62 = MEMORY[0x18D75BE3C]();
  v63 = v11;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v64);
  v12 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v13 = (uint64_t *)AGGraphGetValue();
  v15 = v14;
  v16 = *v13;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))v12);
  if (AGGraphGetOutputValue()
    && (*(_BYTE *)(v1 + 56) & 1) == 0
    && *(double *)(v1 + 40) == v62
    && *(double *)(v1 + 48) == v63
    && (v15 & 1) == 0)
  {
    *(double *)(v1 + 40) = v62;
    *(double *)(v1 + 48) = v63;
    *(_BYTE *)(v1 + 56) = 0;
    goto LABEL_51;
  }
  v17 = *MEMORY[0x1E0CFED28];
  v18 = MEMORY[0x1E0DEE9D8];
  v19 = MEMORY[0x1E0DEE9D8];
  if (*(_DWORD *)(v1 + 24) != *MEMORY[0x1E0CFED28])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v19 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    *(_QWORD *)&v64[0] = v18;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v18 = *(_QWORD *)&v64[0];
    v21 = (CGFloat *)(v19 + 56);
    do
    {
      v22 = *(v21 - 3);
      v23 = *(v21 - 2);
      v24 = *(v21 - 1);
      v25 = *v21;
      v69.origin.x = v22;
      v69.origin.y = v23;
      v69.size.width = v24;
      v69.size.height = *v21;
      MidX = CGRectGetMidX(v69);
      v70.origin.x = v22;
      v70.origin.y = v23;
      v70.size.width = v24;
      v70.size.height = v25;
      MidY = CGRectGetMidY(v70);
      *(_QWORD *)&v64[0] = v18;
      v29 = *(_QWORD *)(v18 + 16);
      v28 = *(_QWORD *)(v18 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
        v18 = *(_QWORD *)&v64[0];
      }
      *(_QWORD *)(v18 + 16) = v29 + 1;
      v30 = v18 + 16 * v29;
      *(CGFloat *)(v30 + 32) = MidX;
      *(CGFloat *)(v30 + 40) = MidY;
      v21 += 5;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v1 + 28) == v17)
  {
    v31 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v31 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_SaySo6CGRectVGs5NeverOTg503_s7d4UI40f52FocusableFillerBoundsProviderV11updateValueyyFSaySo6j10VGAA01_C18g1_hI7VXEfU0_AF0fnopQ0VAF13ViewTransformVSaySo7CGPointVGSayAF0noP0VGTf1cn_nTf4nnngg_n(v16, v1, (uint64_t)&v65, (double *)v18, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain();
    v34 = 0;
    v35 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v36 = *(_QWORD *)(v32 + 8 * v34 + 32);
      v37 = *(_QWORD *)(v36 + 16);
      v38 = *((_QWORD *)v35 + 2);
      v39 = v38 + v37;
      if (__OFADD__(v38, v37))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v39 <= *((_QWORD *)v35 + 3) >> 1)
      {
        if (*(_QWORD *)(v36 + 16))
          goto LABEL_34;
      }
      else
      {
        if (v38 <= v39)
          v41 = v38 + v37;
        else
          v41 = v38;
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v41, 1, v35);
        if (*(_QWORD *)(v36 + 16))
        {
LABEL_34:
          v42 = *((_QWORD *)v35 + 2);
          if ((*((_QWORD *)v35 + 3) >> 1) - v42 < v37)
            goto LABEL_54;
          memcpy(&v35[32 * v42 + 32], (const void *)(v36 + 32), 32 * v37);
          if (v37)
          {
            v43 = *((_QWORD *)v35 + 2);
            v44 = __OFADD__(v43, v37);
            v45 = v43 + v37;
            if (v44)
              goto LABEL_55;
            *((_QWORD *)v35 + 2) = v45;
          }
          goto LABEL_24;
        }
      }
      if (v37)
        goto LABEL_53;
LABEL_24:
      swift_bridgeObjectRelease();
      if (v33 == ++v34)
      {
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
  }
  v35 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_40:
  swift_bridgeObjectRelease();
  IncrementalFocusableFillerBoundsProvider.updateMetrics(in:placedBounds:axis:)((uint64_t)v35, 0, 0.0, 0.0, v62, v63);
  v46 = 1;
  IncrementalFocusableFillerBoundsProvider.updateMetrics(in:placedBounds:axis:)((uint64_t)v35, 1, 0.0, 0.0, v62, v63);
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableFillerBounds>, (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_187BF9830;
  v48 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v48 + 16))
  {
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    if ((v50 & 1) != 0)
    {
      v54 = (__int128 *)(*(_QWORD *)(v48 + 56) + 32 * v49);
      v52 = *v54;
      v53 = v54[1];
    }
    v46 = v50 ^ 1;
    if (*(_QWORD *)(v48 + 16))
    {
      v60 = v53;
      v61 = v52;
      v55 = 1;
      v56 = specialized __RawDictionaryStorage.find<A>(_:)(1);
      if ((v57 & 1) != 0)
      {
        v55 = 0;
        v58 = (__int128 *)(*(_QWORD *)(v48 + 56) + 32 * v56);
        v51 = *v58;
        v59 = v58[1];
        v52 = v61;
      }
      else
      {
        v59 = 0uLL;
        v52 = v61;
        v51 = 0uLL;
      }
      v53 = v60;
    }
    else
    {
      v55 = 1;
      v59 = 0uLL;
    }
  }
  else
  {
    v52 = 0uLL;
    v55 = 1;
    v53 = 0uLL;
    v51 = 0uLL;
    v59 = 0uLL;
  }
  *(_QWORD *)(v47 + 32) = 0;
  *(_QWORD *)(v47 + 40) = 0;
  *(double *)(v47 + 48) = v62;
  *(double *)(v47 + 56) = v63;
  *(_OWORD *)(v47 + 64) = v52;
  *(_OWORD *)(v47 + 80) = v53;
  *(_BYTE *)(v47 + 96) = v46 & 1;
  *(_OWORD *)(v47 + 104) = v51;
  *(_OWORD *)(v47 + 120) = v59;
  *(_BYTE *)(v47 + 136) = v55;
  *(_QWORD *)&v64[0] = v47;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  *(double *)(v1 + 40) = v62;
  *(double *)(v1 + 48) = v63;
  *(_BYTE *)(v1 + 56) = 0;
LABEL_51:
  swift_release();
}

void closure #2 in IncrementalFocusableFillerBoundsProvider.updateValue()(uint64_t a1@<X0>, double *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  char v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  CGPoint v9;
  double v10;
  double v11;
  CGFloat v12;
  uint64_t v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat x;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  _OWORD *v45;
  CGPoint v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  double v58;
  double v59;
  double *v60;
  uint64_t v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  double *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  int64_t v74;
  char *v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  CGSize v97;
  CGPoint v98;
  CGSize v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[3];
  uint64_t v104;
  CGPoint v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v95 = *(_OWORD *)(a1 + 48);
  v96 = *(_QWORD *)(a1 + 64);
  swift_retain();
  v7 = _IncrementalLayout_PlacedChild.size.getter();
  v9 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v8, *(unint64_t *)&v7));
  LOBYTE(v100) = v5;
  *((_QWORD *)&v100 + 1) = v6;
  v101 = v95;
  *(_QWORD *)&v102 = v96;
  v10 = _IncrementalLayout_PlacedChild.size.getter();
  v12 = v11;
  swift_release();
  AGGraphGetValue();
  v98 = v9;
  v99.width = v10;
  v99.height = v12;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
  v97 = v99;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v98);
  v13 = *((_QWORD *)a2 + 2);
  if (!v13)
  {
LABEL_19:
    v42 = MEMORY[0x1E0DEE9D8];
    goto LABEL_61;
  }
  v14 = a2[4];
  v15 = a2[5];
  swift_bridgeObjectRetain();
  v106.origin = v9;
  v106.size = v97;
  v105.x = v14;
  v105.y = v15;
  if (!CGRectContainsPoint(v106, v105))
  {
    if (v13 != 1)
    {
      v39 = a2 + 7;
      v40 = 1;
      do
      {
        v41 = v40 + 1;
        if (__OFADD__(v40, 1))
          goto LABEL_65;
        v109.origin = v9;
        v109.size = v97;
        if (CGRectContainsPoint(v109, *(CGPoint *)(v39 - 1)))
          goto LABEL_3;
        v39 += 2;
        ++v40;
      }
      while (v41 != v13);
    }
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  v16 = a3;
  v17 = *(_QWORD *)(a3 + 16);
  v18 = MEMORY[0x1E0DEE9D8];
  if (v17)
  {
    swift_bridgeObjectRetain();
    v19 = 0;
    x = MEMORY[0x1E0DEE9D8];
    do
    {
      v21 = x;
      v22 = *(double *)(v16 + v19 + 32);
      v23 = *(double *)(v16 + v19 + 40);
      v24 = *(double *)(v16 + v19 + 48);
      v25 = *(double *)(v16 + v19 + 56);
      v26 = *(_QWORD *)(v16 + v19 + 64);
      v92 = *(_QWORD *)(v16 + v19 + 80);
      v87 = *(_QWORD *)(v16 + v19 + 88);
      v89 = *(_QWORD *)(v16 + v19 + 72);
      v90 = *(_BYTE *)(v16 + v19 + 96);
      v27 = *(_QWORD *)(v16 + v19 + 112);
      v104 = *(_QWORD *)(v16 + v19 + 104);
      v28 = *(_QWORD *)(v16 + v19 + 120);
      v29 = *(_QWORD *)(v16 + v19 + 128);
      v30 = *(_BYTE *)(v16 + v19 + 136);
      v107.origin = v9;
      v107.size = v97;
      v110.origin.x = v22;
      v110.origin.y = v23;
      v110.size.width = v24;
      v110.size.height = v25;
      v108 = CGRectIntersection(v107, v110);
      if (CGRectIsEmpty(v108))
      {
        x = v21;
      }
      else
      {
        v83 = v30;
        v85 = v27;
        x = v21;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v98.x = v21;
        v32 = v26;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v21 + 16) + 1, 1);
          x = v98.x;
        }
        v33 = v104;
        v35 = v28;
        v34 = v85;
        v37 = *(_QWORD *)(*(_QWORD *)&x + 16);
        v36 = *(_QWORD *)(*(_QWORD *)&x + 24);
        if (v37 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1);
          v35 = v28;
          v34 = v85;
          v33 = v104;
          x = v98.x;
        }
        *(_QWORD *)(*(_QWORD *)&x + 16) = v37 + 1;
        v38 = *(_QWORD *)&x + 112 * v37;
        *(CGFloat *)(v38 + 32) = v22;
        *(CGFloat *)(v38 + 40) = v23;
        *(CGFloat *)(v38 + 48) = v24;
        *(CGFloat *)(v38 + 56) = v25;
        *(_QWORD *)(v38 + 64) = v32;
        *(_QWORD *)(v38 + 72) = v89;
        *(_QWORD *)(v38 + 80) = v92;
        *(_QWORD *)(v38 + 88) = v87;
        *(_BYTE *)(v38 + 96) = v90;
        *(_QWORD *)(v38 + 104) = v33;
        *(_QWORD *)(v38 + 112) = v34;
        *(_QWORD *)(v38 + 120) = v35;
        *(_QWORD *)(v38 + 128) = v29;
        *(_BYTE *)(v38 + 136) = v83;
        v16 = a3;
      }
      v19 += 112;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
    v43 = *(_QWORD *)(*(_QWORD *)&x + 16);
    if (v43)
      goto LABEL_21;
LABEL_57:
    swift_release();
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, type metadata accessor for CGRect);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_187BF9830;
    *(CGPoint *)(v42 + 32) = v9;
    *(CGSize *)(v42 + 48) = v97;
    goto LABEL_61;
  }
  x = MEMORY[0x1E0DEE9D8];
  v43 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v43)
    goto LABEL_57;
LABEL_21:
  v94 = v18;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
  v44 = 0;
  v86 = *(_QWORD *)&x + 32;
  v84 = v43;
  while (1)
  {
    v45 = (_OWORD *)(v86 + 112 * v44);
    v46 = (CGPoint)*v45;
    v47 = v45[2];
    v99 = (CGSize)v45[1];
    v100 = v47;
    v98 = v46;
    v48 = v45[3];
    v49 = v45[4];
    v50 = v45[5];
    *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)((char *)v45 + 89);
    v102 = v49;
    v103[0] = v50;
    v101 = v48;
    ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(0, &v98.x, v9.x, v9.y, v97.width, v97.height);
    v52 = v51;
    ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(1, &v98.x, v9.x, v9.y, v97.width, v97.height);
    v104 = *(_QWORD *)(v52 + 16);
    if (v104)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_36:
    v68 = *(_QWORD *)(v94 + 16);
    v67 = *(_QWORD *)(v94 + 24);
    if (v68 >= v67 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1);
    ++v44;
    *(_QWORD *)(v94 + 16) = v68 + 1;
    *(_QWORD *)(v94 + 8 * v68 + 32) = v56;
    if (v44 == v43)
    {
      swift_release();
      v69 = *(_QWORD *)(v94 + 16);
      if (v69)
      {
        swift_retain();
        v70 = 0;
        v42 = MEMORY[0x1E0DEE9D8];
        while (1)
        {
          v71 = *(_QWORD *)(v94 + 8 * v70 + 32);
          v72 = *(_QWORD *)(v71 + 16);
          v73 = *(_QWORD *)(v42 + 16);
          v74 = v73 + v72;
          if (__OFADD__(v73, v72))
            goto LABEL_63;
          swift_bridgeObjectRetain();
          v75 = (char *)swift_isUniquelyReferenced_nonNull_native();
          if ((_DWORD)v75 && v74 <= *(_QWORD *)(v42 + 24) >> 1)
          {
            if (*(_QWORD *)(v71 + 16))
              goto LABEL_52;
          }
          else
          {
            if (v73 <= v74)
              v76 = v73 + v72;
            else
              v76 = v73;
            v42 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v75, v76, 1, (char *)v42);
            if (*(_QWORD *)(v71 + 16))
            {
LABEL_52:
              v77 = *(_QWORD *)(v42 + 16);
              if ((*(_QWORD *)(v42 + 24) >> 1) - v77 < v72)
                goto LABEL_66;
              memcpy((void *)(v42 + 32 * v77 + 32), (const void *)(v71 + 32), 32 * v72);
              if (v72)
              {
                v78 = *(_QWORD *)(v42 + 16);
                v79 = __OFADD__(v78, v72);
                v80 = v78 + v72;
                if (v79)
                  goto LABEL_67;
                *(_QWORD *)(v42 + 16) = v80;
              }
              goto LABEL_42;
            }
          }
          if (v72)
            goto LABEL_64;
LABEL_42:
          swift_bridgeObjectRelease();
          if (v69 == ++v70)
          {
            swift_release();
            goto LABEL_60;
          }
        }
      }
      v42 = MEMORY[0x1E0DEE9D8];
LABEL_60:
      swift_release();
LABEL_61:
      *a4 = v42;
      return;
    }
  }
  v88 = v44;
  v54 = 0;
  v55 = *(_QWORD *)(v53 + 16);
  v91 = (double *)(v53 + 40);
  v93 = v52 + 32;
  v56 = (char *)MEMORY[0x1E0DEE9D8];
  v57 = v52;
  while (v54 < *(_QWORD *)(v57 + 16))
  {
    if (v55)
    {
      v58 = *(double *)(v93 + 16 * v54);
      v59 = *(double *)(v93 + 16 * v54 + 8) - v58;
      swift_bridgeObjectRetain();
      v60 = v91;
      v61 = v55;
      do
      {
        v62 = *(v60 - 1);
        v63 = *v60;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
        v65 = *((_QWORD *)v56 + 2);
        v64 = *((_QWORD *)v56 + 3);
        if (v65 >= v64 >> 1)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v56);
        *((_QWORD *)v56 + 2) = v65 + 1;
        v66 = (double *)&v56[32 * v65];
        v66[4] = v58;
        v66[5] = v62;
        v66[6] = v59;
        v66[7] = v63 - v62;
        v60 += 2;
        --v61;
      }
      while (v61);
      swift_bridgeObjectRelease();
    }
    if (++v54 == v104)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = v84;
      v44 = v88;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

uint64_t IncrementalFocusableFillerBoundsProvider.updateMetrics(in:placedBounds:axis:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int64_t v14;
  char *v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  double Width;
  double v29;
  uint64_t v30;
  char *v31;
  char *v32;
  double v33;
  double v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  double v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unint64_t v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  double *v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  char v89;
  uint64_t result;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  CGRect v96;

  v7 = v6;
  v9 = a2 & 1;
  CGRect.range(in:)(v9, a2, a3, a4, a5, a6);
  v11 = v10;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = (char *)MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    v95 = (char *)MEMORY[0x1E0DEE9D8];
    isUniquelyReferenced_nonNull_native = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v18 = (double *)(a1 + 56);
    do
    {
      v19 = *(v18 - 3);
      v20 = *(v18 - 2);
      v21 = *(v18 - 1);
      v22 = *v18;
      v23 = (~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0 || (~*((_QWORD *)v18 - 2) & 0x7FF0000000000000) == 0;
      if (!v23
        && (Width = CGRectGetWidth(*(CGRect *)(v18 - 3)),
            (~*(_QWORD *)&Width & 0x7FF0000000000000) != 0
         && (v96.origin.x = v19,
             v96.origin.y = v20,
             v96.size.width = v21,
             v96.size.height = v22,
             (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v96) & 0x7FF0000000000000) != 0)))
      {
        if ((_DWORD)v9)
          v29 = v22;
        else
          v29 = v21;
        if ((_DWORD)v9)
          v19 = v20;
        if (v29 <= 0.0)
          v29 = 0.0;
        v24 = v19 + v29;
        if (v19 > v19 + v29)
          goto LABEL_93;
      }
      else
      {
        MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v17);
        static Log.internalError(_:)();
        v19 = 0.0;
        v24 = 0.0;
      }
      v15 = v95;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v95 + 2) + 1, 1);
        v15 = v95;
      }
      v26 = *((_QWORD *)v15 + 2);
      v25 = *((_QWORD *)v15 + 3);
      if (v26 >= v25 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1);
        v15 = v95;
      }
      *((_QWORD *)v15 + 2) = v26 + 1;
      v27 = &v15[16 * v26];
      *((double *)v27 + 4) = v19;
      *((double *)v27 + 5) = v24;
      v18 += 4;
      --v14;
    }
    while (v14);
  }
  v95 = v15;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v95);
  swift_bridgeObjectRelease();
  v30 = *((_QWORD *)v95 + 2);
  if (!v30)
  {
    v32 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_66:
    swift_release();
    v62 = *((_QWORD *)v32 + 2);
    if (v62 > 1)
    {
      v63 = *((double *)v32 + 5);
      v65 = *((double *)v32 + 6);
      v64 = *((double *)v32 + 7);
      if (v64 - v65 >= v63 - *((double *)v32 + 4))
        v66 = v63 - *((double *)v32 + 4);
      else
        v66 = v64 - v65;
      v67 = v65 - v63;
      v68 = v62 - 2;
      if (v68)
      {
        v69 = (double *)(v32 + 72);
        do
        {
          v70 = v64 - v65;
          v71 = v65 + v64;
          v72 = *(v69 - 1);
          v73 = *v69;
          v74 = v72 - v64;
          if (*v69 - v72 < v70)
            v70 = *v69 - v72;
          if (v66 + v67 >= (v72 + v73) * 0.5 - v71 * 0.5)
          {
            v66 = v70;
            v67 = v74;
          }
          v69 += 2;
          v64 = v73;
          v65 = v72;
          --v68;
        }
        while (v68);
      }
      v75 = *(_QWORD *)(v7 + 64);
      if (*(_QWORD *)(v75 + 16))
      {
        v76 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if ((v77 & 1) != 0)
        {
          v78 = (double *)(*(_QWORD *)(v75 + 56) + 32 * v76);
          v66 = (v66 + *v78) * 0.5;
          v67 = (v67 + v78[1]) * 0.5;
        }
      }
      v79 = *((_QWORD *)v32 + 2);
      v80 = 0.0;
      v81 = 0.0;
      if (v79)
      {
        v80 = *((double *)v32 + 4);
        v81 = *(double *)&v32[16 * v79 + 24];
      }
      swift_bridgeObjectRelease();
      v82 = v80 - (v67 + v66) * floor((v80 - v11) / (v67 + v66)) - v11;
      v83 = v13 - (v67 + v66) * floor((v13 - v81) / (v67 + v66)) - v81;
      v84 = v67 + v66 * 0.25;
      if (v84 >= v82)
        v85 = 0.0;
      else
        v85 = v67 + v66 * 0.25;
      v86 = v82 - v85;
      if (v84 >= v83)
        v87 = 0.0;
      else
        v87 = v67 + v66 * 0.25;
      v88 = v83 - v87;
      v89 = swift_isUniquelyReferenced_nonNull_native();
      v95 = *(char **)(v7 + 64);
      *(_QWORD *)(v7 + 64) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v89, v66, v67, v86, v88);
      *(_QWORD *)(v7 + 64) = v95;
    }
    return swift_bridgeObjectRelease();
  }
  v31 = v95 + 32;
  v32 = (char *)MEMORY[0x1E0DEE9D8];
  v33 = 0.0;
  while (1)
  {
    v35 = *(_OWORD *)v31;
    v36 = *((_QWORD *)v32 + 2);
    if (!v36)
    {
      v92 = *(_OWORD *)v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v32);
      v45 = *((_QWORD *)v32 + 2);
      v44 = *((_QWORD *)v32 + 3);
      v46 = v92;
      if (v45 >= v44 >> 1)
      {
        v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v32);
        v46 = v92;
        v32 = v57;
      }
      *((_QWORD *)v32 + 2) = v45 + 1;
      *(_OWORD *)&v32[16 * v45 + 32] = v46;
      goto LABEL_31;
    }
    v37 = &v32[16 * v36];
    v39 = *((double *)v37 + 2);
    v38 = *((double *)v37 + 3);
    if (*(double *)&v35 == v39)
      break;
    v47 = v33 + v38;
    if (v33 + v38 >= *(double *)&v35)
    {
      v53 = *((double *)v31 + 1);
      if (v38 <= *(double *)&v35)
      {
        v94 = *(_OWORD *)v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36 + 1, 1, v32);
        v55 = *((_QWORD *)v32 + 2);
        v54 = *((_QWORD *)v32 + 3);
        v56 = v94;
        if (v55 >= v54 >> 1)
        {
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v32);
          v56 = v94;
          v32 = v61;
        }
        *((_QWORD *)v32 + 2) = v55 + 1;
        *(_OWORD *)&v32[16 * v55 + 32] = v56;
        if (v47 - v53 > 0.0)
          v33 = v47 - v53;
        else
          v33 = 0.0;
        goto LABEL_31;
      }
      v34 = *((double *)&v35 + 1) - v38;
      goto LABEL_29;
    }
    v93 = *(_OWORD *)v31;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
    v48 = *((_QWORD *)v32 + 2);
    v49 = v93;
    if (!v48)
      goto LABEL_91;
    *((_QWORD *)v32 + 2) = v48 - 1;
    if (v39 > v47)
      goto LABEL_92;
    v50 = *((_QWORD *)v32 + 3);
    if (v48 > v50 >> 1)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v48, 1, v32);
      v49 = v93;
      v32 = v59;
    }
    *((_QWORD *)v32 + 2) = v48;
    v51 = &v32[16 * v48 - 16];
    *((double *)v51 + 4) = v39;
    *((double *)v51 + 5) = v47;
    v52 = *((_QWORD *)v32 + 3);
    if (v48 >= v52 >> 1)
    {
      v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v48 + 1, 1, v32);
      v49 = v93;
      v32 = v60;
    }
    *((_QWORD *)v32 + 2) = v48 + 1;
    *(_OWORD *)&v32[16 * v48 + 32] = v49;
    v33 = 0.0;
LABEL_31:
    v31 += 16;
    if (!--v30)
      goto LABEL_66;
  }
  v40 = *((double *)v31 + 1);
  if (v38 < *((double *)&v35 + 1))
  {
    v34 = *((double *)&v35 + 1) - v38;
LABEL_29:
    if (v34 > v33)
      v33 = v34;
    goto LABEL_31;
  }
  v91 = *(_OWORD *)v31;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
  v41 = *((_QWORD *)v32 + 2);
  v42 = v91;
  if (v41)
  {
    *((_QWORD *)v32 + 2) = v41 - 1;
    v43 = *((_QWORD *)v32 + 3);
    if (v41 > v43 >> 1)
    {
      v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v41, 1, v32);
      v42 = v91;
      v32 = v58;
    }
    *((_QWORD *)v32 + 2) = v41;
    *(_OWORD *)&v32[16 * v41 + 16] = v42;
    v33 = v33 + v38 - v40;
    goto LABEL_31;
  }
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
}

{
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -72)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 72;
    if (result != v3 || result >= &v3[72 * v6])
      return (char *)memmove(result, v3, 72 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 31;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
      return (char *)memmove(result, v3, 32 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 56 * (v4 / 56);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
      return (char *)memmove(result, v3, 56 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -64)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0x3FuLL : 0)) & 0xFFFFFFFFFFFFFFC0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -136)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 136;
    if (result != v3 || result >= &v3[136 * v6])
      return (char *)memmove(result, v3, 136 * v6);
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1658]);
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

void specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a4, a5);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72);
  if (!v9)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = v7 - v6;
  if (v7 - v6 == 0x8000000000000000 && v9 == -1)
    goto LABEL_14;
  if (v10 / v9 < 0)
  {
LABEL_15:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v5 < v6 || v5 >= v6 + v10 / v9 * v9)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v5 != v6)
  {
    swift_arrayInitWithTakeBackToFront();
  }
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x18D75E884);
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)@<X0>(int a1@<W1>, int a2@<W2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t result;
  int v6;
  int v8;
  int v9;
  int v10;

  v10 = _ViewInputs.viewPhase.getter();
  v9 = _ViewInputs.transform.getter();
  v8 = _ViewInputs.position.getter();
  v6 = _ViewInputs.size.getter();
  swift_getKeyPath();
  v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_release();
  *(_DWORD *)a4 = v10;
  *(_DWORD *)(a4 + 4) = v9;
  *(_DWORD *)(a4 + 8) = v8;
  *(_DWORD *)(a4 + 12) = v6;
  *(_DWORD *)(a4 + 16) = a1;
  *(_DWORD *)(a4 + 20) = v4;
  *(_DWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 28) = a3;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 56) = 1;
  *(_QWORD *)(a4 + 64) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_SaySo6CGRectVGs5NeverOTg503_s7d4UI40f52FocusableFillerBoundsProviderV11updateValueyyFSaySo6j10VGAA01_C18g1_hI7VXEfU0_AF0fnopQ0VAF13ViewTransformVSaySo7CGPointVGSayAF0noP0VGTf1cn_nTf4nnngg_n(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  char *i;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = v28;
    for (i = (char *)(a1 + 48); ; i += 72)
    {
      v11 = *((_QWORD *)i - 1);
      v12 = *i;
      v13 = *((_QWORD *)i + 1);
      v14 = i[16];
      v21[0] = *((_QWORD *)i - 2);
      v21[1] = v11;
      v22 = v12;
      v23 = v13;
      v24 = v14;
      v25 = *(_OWORD *)(i + 24);
      v26 = *(_OWORD *)(i + 40);
      swift_retain();
      closure #2 in IncrementalFocusableFillerBoundsProvider.updateValue()((uint64_t)v21, a4, a5, &v27);
      if (v6)
        break;
      v6 = 0;
      swift_release();
      v15 = v27;
      v28 = v8;
      v17 = *(_QWORD *)(v8 + 16);
      v16 = *(_QWORD *)(v8 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1);
        v8 = v28;
      }
      *(_QWORD *)(v8 + 16) = v17 + 1;
      *(_QWORD *)(v8 + 8 * v17 + 32) = v15;
      if (!--v7)
        return v8;
    }
    swift_release();
    swift_release();
  }
  return v8;
}

void type metadata accessor for _ContiguousArrayStorage<Range<Int>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for IncrementalFocusableFillerBoundsProvider()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for IncrementalFocusableFillerBoundsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IncrementalFocusableFillerBoundsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalFocusableFillerBoundsProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalFocusableFillerBoundsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IncrementalFocusableFillerBoundsProvider()
{
  return &type metadata for IncrementalFocusableFillerBoundsProvider;
}

_BYTE *_PagingViewConfig.init(direction:size:margin:spacing:constrainedDeceleration:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  *(_BYTE *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(double *)(a5 + 24) = a6;
  *(double *)(a5 + 32) = a7;
  *(_BYTE *)(a5 + 40) = a4;
  return result;
}

void _PagingView.init(config:page:views:)()
{
  type metadata accessor for _PagingView();
}

double sub_187608020(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  char v18;
  uint64_t v19;
  char v20;
  _BYTE v21[7];
  _BYTE v22[30];

  v9 = v1 + a1[13];
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (_QWORD *)(v1 + a1[16]);
  *v11 = 0;
  v11[1] = 0;
  v12 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v1, v4, v3);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(v9, v2, v13);
  v15 = v1 + a1[14];
  *(_BYTE *)v15 = v20;
  *(_QWORD *)(v15 + 8) = v19;
  *(_BYTE *)(v15 + 16) = v5;
  *(_QWORD *)(v15 + 24) = v6;
  *(_QWORD *)(v15 + 32) = v7;
  *(_BYTE *)(v15 + 40) = v18;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v13);
  v16 = v1 + a1[15];
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_BYTE *)(v16 + 32) = 0;
  *(_DWORD *)(v16 + 33) = *(_DWORD *)v21;
  *(_DWORD *)(v16 + 36) = *(_DWORD *)&v21[3];
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_QWORD *)(v16 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(v16 + 80) = 0;
  *(_OWORD *)(v16 + 82) = *(_OWORD *)v22;
  *(_OWORD *)(v16 + 96) = *(_OWORD *)&v22[14];
  *(_QWORD *)(v16 + 112) = &type metadata for EmptyGestureProvider;
  *(_QWORD *)(v16 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(v16 + 128) = 257;
  return result;
}

void type metadata accessor for _PagingView()
{
  JUMPOUT(0x18D75FF28);
}

BOOL static _PagingViewConfig.Direction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _PagingViewConfig.Direction.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int _PagingViewConfig.Direction.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void _PagingViewConfig.direction.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_PagingViewConfig.direction.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_PagingViewConfig.direction.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingViewConfig.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _PagingViewConfig.size.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*_PagingViewConfig.size.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _PagingViewConfig.margin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void _PagingViewConfig.margin.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*_PagingViewConfig.margin.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _PagingViewConfig.spacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void _PagingViewConfig.spacing.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*_PagingViewConfig.spacing.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingViewConfig.constrainedDeceleration.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t _PagingViewConfig.constrainedDeceleration.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*_PagingViewConfig.constrainedDeceleration.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.views.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _PagingView.views.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_PagingView.views.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.page.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Binding();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t _PagingView.page.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 52);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Binding();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*_PagingView.page.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 _PagingView.config.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  __n128 result;

  v3 = v2 + *(int *)(a1 + 56);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_BYTE *)(v3 + 16);
  v6 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)a2 = *(_BYTE *)v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  result = *(__n128 *)(v3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v6;
  return result;
}

__n128 _PagingView.config.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = v2 + *(int *)(a2 + 56);
  *(_BYTE *)v6 = *(_BYTE *)a1;
  *(_QWORD *)(v6 + 8) = v3;
  *(_BYTE *)(v6 + 16) = v4;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v6 + 24) = result;
  *(_BYTE *)(v6 + 40) = v5;
  return result;
}

uint64_t (*_PagingView.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.scrollViewConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of _ScrollViewConfig(v2 + *(int *)(a1 + 60), a2);
}

uint64_t _PagingView.scrollViewConfig.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of _ScrollViewConfig(a1, v2 + *(int *)(a2 + 60));
}

uint64_t (*_PagingView.scrollViewConfig.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _PagingView.init(direction:page:views:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v19[2] = a5;
  v19[3] = a6;
  v19[1] = a7;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Binding();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v20 = *a1;
  v21 = 0;
  v22 = 1;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v19 - v18, a2, v14, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a4);
  _PagingView.init(config:page:views:)();
}

uint64_t sub_187608624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v0, v5);
}

double _PagingView.$offset.getter()
{
  double v1;

  type metadata accessor for State<CGFloat>();
  State.projectedValue.getter();
  return v1;
}

void _PagingView.body.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[8];

  v2 = v1;
  v4 = *(a1 - 1);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](a1, v2);
  (*(void (**)(char *, double))(v4 + 16))((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = (char *)swift_allocObject();
  v9 = a1[2];
  v10 = a1[3];
  *((_QWORD *)v8 + 2) = v9;
  *((_QWORD *)v8 + 3) = v10;
  v11 = a1[4];
  v12 = a1[5];
  *((_QWORD *)v8 + 4) = v11;
  *((_QWORD *)v8 + 5) = v12;
  (*(void (**)(char *, char *, _QWORD *))(v4 + 32))(&v8[v7], (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v13 = lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  v14[2] = v9;
  v14[3] = &unk_1E1AB2BA0;
  v14[4] = v10;
  v14[5] = v13;
  v14[6] = v11;
  v14[7] = v12;
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_18760878C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  v6 = type metadata accessor for _ScrollView(0, a1, v4, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>, v6);
  *(_QWORD *)(v2 - 144) = GeometryReader.init(content:)();
  *(_QWORD *)(v2 - 136) = v7;
  v8 = type metadata accessor for GeometryReader();
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2768], v8);
  static ViewBuilder.buildExpression<A>(_:)(v2 - 144, v8, v9);
  swift_release();
  v10 = *(_QWORD *)(v2 - 120);
  *(_QWORD *)(v2 - 144) = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 136) = v10;
  static ViewBuilder.buildBlock<A>(_:)(v2 - 144, v8, v1);
  return swift_release();
}

void closure #1 in _PagingView.body.getter()
{
  lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  type metadata accessor for _ScrollableLayoutView();
}

void sub_1876088D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  v10 = type metadata accessor for _ScrollView(0, a1, v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = *(_DWORD *)(v1 + 48);
  v15 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 - 160) = *(_OWORD *)v1;
  *(_OWORD *)(v6 - 144) = v15;
  *(_OWORD *)(v6 - 128) = *(_OWORD *)(v1 + 32);
  *(_DWORD *)(v6 - 112) = v14;
  GeometryProxy.size.getter();
  *(_QWORD *)(v6 - 160) = v5;
  *(_QWORD *)(v6 - 152) = v4;
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v2;
  type metadata accessor for _PagingView();
}

void sub_187608980()
{
  _PagingView.body(size:)();
}

uint64_t sub_187608994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  v6(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v4 - 168));
  return v6(v2, v1);
}

void _PagingView.body(size:)()
{
  lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  type metadata accessor for _ScrollableLayoutView();
}

void sub_187608A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  v17 = type metadata accessor for _ScrollView(0, a1, v15, v16);
  *(_QWORD *)(v13 - 416) = v17;
  *(_QWORD *)(v13 - 424) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v13 - 432) = (char *)&a9 - v19;
  *(_QWORD *)(v13 - 488) = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v13 - 480) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v13 - 288) = v9;
  *(_QWORD *)(v13 - 280) = v10;
  *(_QWORD *)(v13 - 400) = v11;
  *(_QWORD *)(v13 - 272) = v11;
  *(_QWORD *)(v13 - 408) = v12;
  *(_QWORD *)(v13 - 264) = v12;
  type metadata accessor for _PagingView.ToPageOffset();
}

void sub_187608B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  char v38;
  char *v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;

  *(_QWORD *)(v13 - 456) = a1;
  *(_QWORD *)(v13 - 464) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v13 - 472) = (char *)&a9 - v14;
  *(_QWORD *)(v13 - 384) = v11;
  *(_QWORD *)(v13 - 376) = v10;
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v15 = type metadata accessor for Binding();
  *(_QWORD *)(v13 - 496) = v15;
  *(_QWORD *)(v13 - 504) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v13 - 440) = (char *)&a9 - v17;
  v18 = type metadata accessor for Binding();
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&a9 - v22;
  *(_QWORD *)(v13 - 352) = v18;
  *(_QWORD *)(v13 - 360) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  *(_QWORD *)(v13 - 448) = (char *)&a9 - v26;
  v27 = *((_QWORD *)v9 - 1);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _ScrollViewConfig(v12 + v9[15], v13 - 288);
  CGSize.inset(by:)();
  v33 = v32;
  v35 = v34;
  v36 = v12 + v9[14];
  v37 = *(double *)(v36 + 8);
  v38 = *(_BYTE *)(v36 + 16);
  (*(void (**)(char *, uint64_t, int *))(v27 + 16))(v31, v12, v9);
  if ((v38 & 1) != 0)
  {
    v39 = &v31[v9[14]];
    if (*v39)
      v40 = v33;
    else
      v40 = v35;
    v41 = *((double *)v39 + 3);
    (*(void (**)(char *, int *))(v27 + 8))(v31, v9);
    v37 = v40 - (v41 + v41);
  }
  else
  {
    (*(void (**)(char *, int *))(v27 + 8))(v31, v9);
  }
  v42 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v12 + v9[13], v19);
  v43 = *(_QWORD *)(v13 - 360);
  v44 = *(_QWORD *)(v13 - 352);
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v23, 1, v44);
  v46 = *(_QWORD *)(v13 - 376);
  if (v45 == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    v54 = *(_BYTE *)v36;
    v55 = *(_BYTE *)(v36 + 40);
    *(double *)(v13 - 336) = v37;
    *(_BYTE *)(v13 - 328) = v54;
    *(_OWORD *)(v13 - 320) = *(_OWORD *)(v36 + 24);
    *(_BYTE *)(v13 - 304) = v55;
    _ScrollableLayout.subscript.getter(v42, (uint64_t)&unk_1E1AB2BA0);
  }
  (*(void (**)(_QWORD, char *, uint64_t))(v43 + 32))(*(_QWORD *)(v13 - 448), v23, v44);
  v47 = _PagingView.$offset.getter();
  *(_QWORD *)(v13 - 336) = v48;
  *(_QWORD *)(v13 - 328) = v49;
  *(double *)(v13 - 320) = v47;
  Binding.zip<A>(with:)();
  swift_release();
  swift_release();
  v50 = *(_QWORD *)(v13 - 480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 488) + 16))(v50, v42, v46);
  v51 = *(_QWORD *)(v36 + 8);
  v52 = *(_BYTE *)(v36 + 16);
  v53 = *(_BYTE *)(v36 + 40);
  *(_BYTE *)(v13 - 336) = *(_BYTE *)v36;
  *(_QWORD *)(v13 - 328) = v51;
  *(_BYTE *)(v13 - 320) = v52;
  *(_OWORD *)(v13 - 312) = *(_OWORD *)(v36 + 24);
  *(_BYTE *)(v13 - 296) = v53;
  _PagingView.ToPageOffset.init(views:config:itemSize:)(v50, v46, *(_QWORD *)(v13 - 472));
}

uint64_t sub_1876090B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 416);
  outlined assign with copy of _ScrollViewConfig(v1 - 288, v0 + *(int *)(v2 + 36));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 424) + 32))(*(_QWORD *)(v1 - 368), v0, v2);
  return outlined destroy of _ScrollViewConfig(v1 - 288);
}

void _PagingView.ToPageOffset.init(views:config:itemSize:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for _PagingView.ToPageOffset();
}

int *sub_1876091A0(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  BOOL v13;
  Swift::Int v14;
  char v15;

  v11 = v3 + result[13];
  *(_BYTE *)v11 = v5;
  *(_QWORD *)(v11 + 8) = v6;
  *(_BYTE *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = v10;
  *(_BYTE *)(v11 + 40) = v15;
  *(_QWORD *)(v3 + result[14]) = v8;
  v12 = toPageOffsetGenerationCounter;
  *(_QWORD *)(v3 + result[15]) = toPageOffsetGenerationCounter;
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    toPageOffsetGenerationCounter = v14;
    return (int *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  }
  return result;
}

uint64_t _PagingView.ToPageOffset.get(base:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  _DWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(a2 + 24);
  v20 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)v18 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v16 = (char *)v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v18 - v15, a1, AssociatedTypeWitness, v14);
  *(double *)&v16[*(int *)(TupleTypeMetadata2 + 48)] = a3;
  if ((dispatch thunk of Collection.isEmpty.getter() & 1) == 0)
  {
    v18[3] = *(unsigned __int8 *)(v3 + *(int *)(v20 + 52));
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of RandomAccessCollection.distance(from:to:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, TupleTypeMetadata2);
}

uint64_t _PagingView.ToPageOffset.set(base:newValue:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  char v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  char v38;

  v33 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v32 - v15;
  result = dispatch thunk of Collection.isEmpty.getter();
  if ((result & 1) == 0)
  {
    v18 = *(int *)(a2 + 56);
    v19 = (char *)(v4 + *(int *)(a2 + 52));
    v20 = *((_QWORD *)v19 + 1);
    v21 = v19[16];
    v22 = v19[40];
    v34 = *v19;
    v35 = v20;
    v36 = v21;
    v37 = *(_OWORD *)(v19 + 24);
    v38 = v22;
    v23 = *(double *)(v4 + v18);
    v24 = dispatch thunk of Collection.count.getter();
    v25 = _PagingViewConfig.pageForContentOffset(_:itemSize:count:)(v24, a3, a4, v23);
    if ((v27 & 1) != 0)
      v28 = 0.0;
    else
      v28 = v26;
    if ((v27 & 1) != 0)
      v29 = 0;
    else
      v29 = v25;
    v32 = v29;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v31 = v33;
    *(double *)(v33 + *(int *)(TupleTypeMetadata2 + 48)) = v28;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(v31, v16, AssociatedTypeWitness);
  }
  return result;
}

uint64_t _PagingViewConfig.pageForContentOffset(_:itemSize:count:)(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4;
  double v5;

  if (a4 <= 0.0)
    return 0;
  if (!*(_BYTE *)v4)
    a2 = a3;
  v5 = floor(a2 / (*(double *)(v4 + 32) + a4) + 0.5);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFSUB__(result, 1))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (((uint64_t)v5 & ~((uint64_t)v5 >> 63)) < result - 1)
    return (uint64_t)v5 & ~((uint64_t)v5 >> 63);
  return --result;
}

void static _PagingView.ToPageOffset.== infix(_:_:)()
{
  type metadata accessor for _PagingView.ToPageOffset();
}

BOOL sub_1876096B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)(v2 + *(int *)(a1 + 60)) == *(_QWORD *)(v1 + *(int *)(a1 + 60));
}

void _PagingView.ToPageOffset.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 60)));
}

Swift::Int _PagingView.ToPageOffset.hashValue.getter(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v1 + *(int *)(a1 + 60)));
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance _PagingView<A>.ToPageOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = _PagingView.ToPageOffset.get(base:)(a1, a2, *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48)));
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance _PagingView<A>.ToPageOffset(uint64_t a1, double *a2, uint64_t a3)
{
  return _PagingView.ToPageOffset.set(base:newValue:)(a1, a3, *a2, a2[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _PagingView<A>.ToPageOffset(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  _PagingView.ToPageOffset.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance _PagingView<A>.ToPageOffset()
{
  static _PagingView.ToPageOffset.== infix(_:_:)();
}

void PagingLayout.update(state:proxy:)(uint64_t a1, int *a2)
{
  uint64_t v2;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  __int128 v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  double MaxX;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  double v26;
  double v27;
  void (*v28)(_QWORD *__return_ptr, _QWORD);
  double v29;
  uint64_t v30;
  char *v31;
  double v32;
  void (*v33)(int *, _QWORD);
  double *v34;
  void (*v35)(int *, _QWORD);
  uint64_t v36;
  void (*v37)(int *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  double MinX;
  int v62;
  CGFloat v63;
  CGFloat x;
  int v65;
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  _BYTE v69[40];
  int v70;
  uint64_t v71;
  double v72;
  double v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v78;
  void (*v79)(_QWORD *__return_ptr, _QWORD);
  __int128 v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;

  v4 = *(double *)v2;
  v65 = *(unsigned __int8 *)(v2 + 8);
  v6 = *(double *)(v2 + 16);
  v5 = *(double *)(v2 + 24);
  v7 = *((_QWORD *)a2 + 8);
  if (!v7)
    goto LABEL_4;
  v8 = v4 + v5;
  if (v4 + v5 == 0.0)
    goto LABEL_4;
  v92.origin.x = *((CGFloat *)a2 + 4);
  v9 = *((double *)a2 + 6);
  v10 = *((double *)a2 + 7);
  v63 = *((double *)a2 + 5);
  v92.origin.y = v63;
  x = v92.origin.x;
  v92.size.width = v9;
  v92.size.height = v10;
  if (CGRectIsEmpty(v92))
  {
LABEL_4:
    v11 = *(_OWORD *)(MEMORY[0x1E0C9D5E0] + 16);
    *((_OWORD *)a2 + 8) = *MEMORY[0x1E0C9D5E0];
    *((_OWORD *)a2 + 9) = v11;
    if (!__OFSUB__(v7, 1))
    {
      v12 = v6 + v6 + v4 * (double)v7 + v5 * (double)(v7 - 1);
      if (v65)
        *((double *)a2 + 14) = v12;
      else
        *((double *)a2 + 15) = v12;
      return;
    }
    __break(1u);
    goto LABEL_52;
  }
  v13 = x;
  v14 = v63;
  v15 = v9;
  v16 = v10;
  if (v65)
  {
    MinX = CGRectGetMinX(*(CGRect *)&v13);
    v93.origin.x = x;
    v93.origin.y = v63;
    v93.size.width = v9;
    v93.size.height = v10;
    MaxX = CGRectGetMaxX(v93);
  }
  else
  {
    MinX = CGRectGetMinY(*(CGRect *)&v13);
    v94.origin.x = x;
    v94.origin.y = v63;
    v94.size.width = v9;
    v94.size.height = v10;
    MaxX = CGRectGetMaxY(v94);
  }
  if (v6 + v5 * -0.5 < 0.0)
    v18 = 0.0;
  else
    v18 = v6 + v5 * -0.5;
  v19 = floor((MinX - v18) / v8);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (((uint64_t)v19 & ~((uint64_t)v19 >> 63)) >= v7)
    v20 = v7;
  else
    v20 = (uint64_t)v19 & ~((uint64_t)v19 >> 63);
  v21 = ceil((MaxX - v18) / v8);
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
    goto LABEL_55;
  if (v21 <= -9.22337204e18)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v22 = (uint64_t)v21;
  if ((uint64_t)v21 < 0)
  {
    if (v7 < 0)
    {
      v24 = v7;
      if (v20 == v7)
        goto LABEL_45;
      goto LABEL_33;
    }
    v22 = 0;
    if (v20 <= 0)
      goto LABEL_27;
  }
  else
  {
    if (v7 < v22)
      v22 = v7;
    if (v22 >= v20)
    {
LABEL_27:
      v23 = v20;
      v20 = v22;
      goto LABEL_31;
    }
  }
  v23 = v22;
LABEL_31:
  v24 = v20;
  v25 = v20 < v23;
  v20 = v23;
  if (v25)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v23 != v24)
  {
LABEL_33:
    v52 = v18;
    v53 = v5;
    v54 = v4;
    if (v20 >= v24)
    {
LABEL_60:
      __break(1u);
      return;
    }
    v26 = *((double *)a2 + 2);
    v27 = *((double *)a2 + 3);
    v62 = *a2;
    v60 = *((_QWORD *)a2 + 1);
    v28 = (void (*)(_QWORD *__return_ptr, _QWORD))*((_QWORD *)a2 + 9);
    v57 = *((_OWORD *)a2 + 8);
    v58 = *((_OWORD *)a2 + 7);
    v56 = *((_OWORD *)a2 + 9);
    v29 = v4 * 0.5;
    v59 = *((_OWORD *)a2 + 5);
    v50 = v24;
    v51 = v20;
    v55 = v24 - 1;
    v30 = *((_QWORD *)a2 + 12);
    v31 = (char *)*((_QWORD *)a2 + 13);
    while (1)
    {
      static UnitPoint.center.getter();
      _Placement.init(proposedSize:anchoring:at:)();
      v32 = v29 + v6 + v8 * (double)v20;
      v33 = (void (*)(int *, _QWORD))_Placement.anchorPosition.modify();
      if (v65)
      {
        *v34 = v32;
        v33(&v70, 0);
        v35 = (void (*)(int *, _QWORD))_Placement.anchorPosition.modify();
        *(double *)(v36 + 8) = v27 * 0.5;
        v35(&v70, 0);
        _ProposedSize.width.setter();
      }
      else
      {
        *v34 = v26 * 0.5;
        v33(&v70, 0);
        v37 = (void (*)(int *, _QWORD))_Placement.anchorPosition.modify();
        *(double *)(v38 + 8) = v32;
        v37(&v70, 0);
        _ProposedSize.height.setter();
      }
      v70 = v62;
      v71 = v60;
      v72 = v26;
      v73 = v27;
      v74 = x;
      v75 = v63;
      v76 = v9;
      v77 = v10;
      v78 = v7;
      v79 = v28;
      v80 = v59;
      v81 = v30;
      v82 = v31;
      v83 = v58;
      v84 = v57;
      v85 = v56;
      outlined retain of _ScrollableLayoutProxy((uint64_t)&v70);
      v28(v66, v20);
      outlined release of _ScrollableLayoutProxy((uint64_t)&v70);
      *((_QWORD *)&v67 + 1) = v86;
      LOBYTE(v68) = v87;
      *((_QWORD *)&v68 + 1) = v88;
      v69[0] = v89;
      *(_OWORD *)&v69[8] = v90;
      *(_OWORD *)&v69[24] = v91;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
      v40 = *((_QWORD *)v31 + 2);
      v39 = *((_QWORD *)v31 + 3);
      if (v40 >= v39 >> 1)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v31);
      *((_QWORD *)v31 + 2) = v40 + 1;
      v41 = &v31[104 * v40];
      v42 = v66[0];
      v43 = v67;
      *((_OWORD *)v41 + 3) = v66[1];
      *((_OWORD *)v41 + 4) = v43;
      *((_OWORD *)v41 + 2) = v42;
      v44 = v68;
      v45 = *(_OWORD *)v69;
      v46 = *(_OWORD *)&v69[16];
      *((_QWORD *)v41 + 16) = *(_QWORD *)&v69[32];
      *((_OWORD *)v41 + 6) = v45;
      *((_OWORD *)v41 + 7) = v46;
      *((_OWORD *)v41 + 5) = v44;
      if (v55 == v20)
        break;
      ++v20;
    }
    *((_QWORD *)a2 + 13) = v31;
    v5 = v53;
    v4 = v54;
    v18 = v52;
    v24 = v50;
    v20 = v51;
  }
LABEL_45:
  if (__OFSUB__(v7, 1))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v47 = v18 + v8 * (double)v20;
  v48 = v18 + v8 * (double)v24 - v47;
  *((_OWORD *)a2 + 7) = *((_OWORD *)a2 + 1);
  *((CGFloat *)a2 + 16) = x;
  *((CGFloat *)a2 + 17) = v63;
  v49 = v6 + v6 + v4 * (double)v7 + v5 * (double)(v7 - 1);
  *((CGFloat *)a2 + 18) = v9;
  *((CGFloat *)a2 + 19) = v10;
  if (v65)
  {
    *((double *)a2 + 14) = v49;
    *((double *)a2 + 16) = v47;
    *((double *)a2 + 18) = v48;
  }
  else
  {
    *((double *)a2 + 15) = v49;
    *((double *)a2 + 17) = v47;
    *((double *)a2 + 19) = v48;
  }
}

double PagingLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(double result, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v8 = *(double *)(v7 + 24);
  v9 = *(double *)(v7 + 16) + v8 * -0.5;
  if (v9 < 0.0)
    v9 = 0.0;
  v10 = result + a5 * -0.25;
  v11 = a3 - a7;
  if (a3 - a7 <= v10)
    v11 = v10;
  v12 = a3 + a7;
  if (v12 >= v11)
    v12 = v11;
  if (!*(_BYTE *)(v7 + 32))
    v12 = v10;
  v13 = (*(double *)v7 + v8) * round((v12 - v9) / (*(double *)v7 + v8));
  if (*(_BYTE *)(v7 + 8) == 1)
    return v13;
  return result;
}

double protocol witness for _ScrollableLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:) in conformance PagingLayout(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return PagingLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized static _PagingViewConfig.== infix(_:_:)(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  BOOL v7;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v3 = a1[3];
  v2 = a1[4];
  v5 = a2[3];
  v4 = a2[4];
  if (((_BYTE)a1[2] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 16))
      return 0;
    if (v3 != v5 || v2 != v4)
      return 0;
  }
  else
  {
    if (((_BYTE)a2[2] & 1) != 0)
      return 0;
    v7 = a1[1] == a2[1] && v3 == v5;
    if (!v7 || v2 != v4)
      return 0;
  }
  return *((unsigned __int8 *)a1 + 40) ^ *((unsigned __int8 *)a2 + 40) ^ 1u;
}

void sub_187609F28()
{
  type metadata accessor for _PagingView();
}

uint64_t sub_187609F70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v1 + ((v4 + 48) & ~v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v5, v2);
  v6 = v5 + *(int *)(a1 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6 + *(int *)(v8 + 32), AssociatedTypeWitness);
  }
  v9 = v5 + *(int *)(a1 + 60);
  outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_BYTE *)(v9 + 32));
  __swift_destroy_boxed_opaque_existential_1(v9 + 88);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in _PagingView.body.getter()
{
  type metadata accessor for _PagingView();
}

void sub_18760A0D4()
{
  closure #1 in _PagingView.body.getter();
}

unint64_t lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout;
  if (!lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingLayout, &unk_1E1AB2BA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout;
  if (!lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingLayout, &unk_1E1AB2BA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction;
  if (!lazy protocol witness table cache variable for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PagingViewConfig.Direction, &type metadata for _PagingViewConfig.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in _PagingView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _PagingViewConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[41])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _PagingViewConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _PagingViewConfig()
{
  return &type metadata for _PagingViewConfig;
}

uint64_t storeEnumTagSinglePayload for _PagingViewConfig.Direction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18760A2CC + 4 * byte_187C446A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18760A300 + 4 * byte_187C446A0[v4]))();
}

uint64_t sub_18760A300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18760A308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18760A310);
  return result;
}

uint64_t sub_18760A31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18760A324);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18760A328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18760A330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _PagingViewConfig.Direction()
{
  return &type metadata for _PagingViewConfig.Direction;
}

uint64_t type metadata completion function for _PagingView()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Binding();
    v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PagingView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t, unint64_t, uint64_t);
  _OWORD *v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t *v50;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64);
  v12 = (v10 | 7) + v7;
  v13 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v13 <= 7
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0
    && ((((v11 + (v12 & ~(v10 | 7)) + 55) & 0xFFFFFFFFFFFFFFF8) + 175) & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18)
  {
    v18 = ~(v10 | 7);
    v19 = *(unsigned int *)(v9 + 84);
    v49 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v50 = a1;
    v20 = (_QWORD *)(((unint64_t)a1 + v12) & v18);
    v21 = (_QWORD *)(((unint64_t)a2 + v12) & v18);
    v22 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 0x80000000) != 0)
    {
      v25 = v49;
      v26 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)v22 + v10 + 8) & ~v10, v19, v49);
      v24 = ~v10;
      if (v26)
      {
LABEL_14:
        memcpy(v20, v21, v11);
LABEL_17:
        v32 = (_OWORD *)(((unint64_t)v20 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
        v33 = (__int128 *)(((unint64_t)v21 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
        v34 = *v33;
        v35 = v33[1];
        *(_OWORD *)((char *)v32 + 25) = *(__int128 *)((char *)v33 + 25);
        *v32 = v34;
        v32[1] = v35;
        v36 = ((unint64_t)v20 + v11 + 55) & 0xFFFFFFFFFFFFFFF8;
        v37 = ((unint64_t)v21 + v11 + 55) & 0xFFFFFFFFFFFFFFF8;
        v38 = *(_QWORD *)v37;
        v39 = *(_QWORD *)(v37 + 8);
        v40 = *(_QWORD *)(v37 + 16);
        v41 = *(_QWORD *)(v37 + 24);
        v42 = *(_BYTE *)(v37 + 32);
        outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)v37, v39, v40, v41, v42);
        *(_QWORD *)v36 = v38;
        *(_QWORD *)(v36 + 8) = v39;
        *(_QWORD *)(v36 + 16) = v40;
        *(_QWORD *)(v36 + 24) = v41;
        *(_BYTE *)(v36 + 32) = v42;
        v43 = *(_OWORD *)(v37 + 40);
        *(_OWORD *)(v36 + 56) = *(_OWORD *)(v37 + 56);
        *(_OWORD *)(v36 + 40) = v43;
        *(_QWORD *)(v36 + 72) = *(_QWORD *)(v37 + 72);
        *(_BYTE *)(v36 + 80) = *(_BYTE *)(v37 + 80);
        *(_BYTE *)(v36 + 81) = *(_BYTE *)(v37 + 81);
        v44 = *(_QWORD *)(v37 + 112);
        *(_QWORD *)(v36 + 112) = v44;
        *(_QWORD *)(v36 + 120) = *(_QWORD *)(v37 + 120);
        (**(void (***)(uint64_t, uint64_t))(v44 - 8))(v36 + 88, v37 + 88);
        *(_BYTE *)(v36 + 128) = *(_BYTE *)(v37 + 128);
        *(_BYTE *)(v36 + 129) = *(_BYTE *)(v37 + 129);
        *(_BYTE *)(v36 + 130) = *(_BYTE *)(v37 + 130);
        *(_BYTE *)(v36 + 131) = *(_BYTE *)(v37 + 131);
        v45 = *(_OWORD *)(v37 + 136);
        *(_OWORD *)(v36 + 152) = *(_OWORD *)(v37 + 152);
        *(_OWORD *)(v36 + 136) = v45;
        v46 = (_QWORD *)((v36 + 175) & 0xFFFFFFFFFFFFFFF8);
        v47 = (_QWORD *)((v37 + 175) & 0xFFFFFFFFFFFFFFF8);
        *v46 = *v47;
        v46[1] = v47[1];
        v17 = v50;
        goto LABEL_18;
      }
    }
    else
    {
      v23 = *v22;
      if ((unint64_t)*v22 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      v24 = ~v10;
      v25 = v49;
      if ((_DWORD)v23 != -1)
        goto LABEL_14;
    }
    *v20 = *v21;
    v27 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v22;
    v28 = v10 + 8;
    v29 = ((unint64_t)v27 + v10 + 8) & v24;
    v30 = ((unint64_t)v22 + v28) & v24;
    v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v31(v29, v30, v25);
    goto LABEL_17;
  }
  v16 = *a2;
  *a1 = *a2;
  v17 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
LABEL_18:
  swift_retain();
  return v17;
}

uint64_t destroy for _PagingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7)) & ~(v7 | 7);
  v9 = ~v7;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v7 + 8) & v9))
      goto LABEL_6;
    goto LABEL_5;
  }
  v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  if ((_DWORD)v12 == -1)
  {
LABEL_5:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v7 + 8) & v9, AssociatedTypeWitness);
  }
LABEL_6:
  v13 = (v10 + ((v7 + 16) & v9) + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of _ScrollViewConfig.ContentOffset(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_BYTE *)(v13 + 32));
  __swift_destroy_boxed_opaque_existential_1(v13 + 88);
  return swift_release();
}

uint64_t initializeWithCopy for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = ~v9;
  v14 = (v9 + 16) & ~v9;
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v17 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    v18 = v14 + v15;
    if ((_DWORD)v17 != -1)
      goto LABEL_5;
LABEL_7:
    *v11 = *v12;
    v19 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v16;
    v20 = v9 + 8;
    v21 = ((unint64_t)v19 + v9 + 8) & v13;
    v22 = ((unint64_t)v16 + v20) & v13;
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v23(v21, v22, AssociatedTypeWitness);
    goto LABEL_8;
  }
  v18 = v14 + v15;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v16 + v9 + 8) & v13))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v12, v18);
LABEL_8:
  v24 = (_OWORD *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v25 = (__int128 *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = v25[1];
  *(_OWORD *)((char *)v24 + 25) = *(__int128 *)((char *)v25 + 25);
  *v24 = v26;
  v24[1] = v27;
  v28 = ((unint64_t)v11 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v12 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  v31 = *(_QWORD *)(v29 + 8);
  v32 = *(_QWORD *)(v29 + 16);
  v33 = *(_QWORD *)(v29 + 24);
  v34 = *(_BYTE *)(v29 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)v29, v31, v32, v33, v34);
  *(_QWORD *)v28 = v30;
  *(_QWORD *)(v28 + 8) = v31;
  *(_QWORD *)(v28 + 16) = v32;
  *(_QWORD *)(v28 + 24) = v33;
  *(_BYTE *)(v28 + 32) = v34;
  v35 = *(_OWORD *)(v29 + 40);
  *(_OWORD *)(v28 + 56) = *(_OWORD *)(v29 + 56);
  *(_OWORD *)(v28 + 40) = v35;
  *(_QWORD *)(v28 + 72) = *(_QWORD *)(v29 + 72);
  *(_BYTE *)(v28 + 80) = *(_BYTE *)(v29 + 80);
  *(_BYTE *)(v28 + 81) = *(_BYTE *)(v29 + 81);
  v36 = *(_QWORD *)(v29 + 112);
  *(_QWORD *)(v28 + 112) = v36;
  *(_QWORD *)(v28 + 120) = *(_QWORD *)(v29 + 120);
  (**(void (***)(uint64_t, uint64_t))(v36 - 8))(v28 + 88, v29 + 88);
  *(_BYTE *)(v28 + 128) = *(_BYTE *)(v29 + 128);
  *(_BYTE *)(v28 + 129) = *(_BYTE *)(v29 + 129);
  *(_BYTE *)(v28 + 130) = *(_BYTE *)(v29 + 130);
  *(_BYTE *)(v28 + 131) = *(_BYTE *)(v29 + 131);
  v37 = *(_OWORD *)(v29 + 136);
  *(_OWORD *)(v28 + 152) = *(_OWORD *)(v29 + 152);
  *(_OWORD *)(v28 + 136) = v37;
  v38 = (_QWORD *)((v28 + 175) & 0xFFFFFFFFFFFFFFF8);
  v39 = (_QWORD *)((v29 + 175) & 0xFFFFFFFFFFFFFFF8);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  _QWORD *v43;
  int v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + v4) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = ((v9 + 16) & ~v9) + v14;
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v48 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    v46 = ((v9 + 16) & ~v9) + v14;
    v47 = v4;
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v45 = v20(((unint64_t)v16 + v9 + 8) & ~v9, v13, AssociatedTypeWitness);
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = v46;
    v19 = v20(((unint64_t)v17 + v9 + 8) & ~v9, v13, AssociatedTypeWitness);
    v4 = v47;
    if (!v45)
    {
LABEL_5:
      if (!v19)
      {
        *v11 = *v12;
        swift_retain();
        swift_release();
        *v16 = *v17;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v16 + v9 + 8) & v48, ((unint64_t)v17 + v9 + 8) & v48, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v48, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL)
      LODWORD(v18) = -1;
    v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v19)
  {
    *v11 = *v12;
    *v16 = *v17;
    v21 = ((unint64_t)v16 + v9 + 8) & v48;
    v22 = ((unint64_t)v17 + v9 + 8) & v48;
    v23 = v15;
    v24 = AssociatedTypeWitness;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v26 = v24;
    v15 = v23;
    v25(v21, v22, v26);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  v27 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  v29 = *(_QWORD *)(v28 + 8);
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  *(_QWORD *)(v27 + 8) = v29;
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  *(_BYTE *)(v27 + 40) = *(_BYTE *)(v28 + 40);
  v30 = ((unint64_t)v11 + v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v12 + v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_QWORD *)v31;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_QWORD *)(v31 + 16);
  v35 = *(_QWORD *)(v31 + 24);
  v36 = *(_BYTE *)(v31 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(_QWORD *)v31, v33, v34, v35, v36);
  v37 = *(_QWORD *)v30;
  v38 = *(_QWORD *)(v30 + 8);
  v39 = *(_QWORD *)(v30 + 16);
  v40 = *(_QWORD *)(v30 + 24);
  v41 = *(_BYTE *)(v30 + 32);
  *(_QWORD *)v30 = v32;
  *(_QWORD *)(v30 + 8) = v33;
  *(_QWORD *)(v30 + 16) = v34;
  *(_QWORD *)(v30 + 24) = v35;
  *(_BYTE *)(v30 + 32) = v36;
  outlined consume of _ScrollViewConfig.ContentOffset(v37, v38, v39, v40, v41);
  *(_QWORD *)(v30 + 40) = *(_QWORD *)(v31 + 40);
  *(_QWORD *)(v30 + 48) = *(_QWORD *)(v31 + 48);
  *(_QWORD *)(v30 + 56) = *(_QWORD *)(v31 + 56);
  *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
  *(_QWORD *)(v30 + 72) = *(_QWORD *)(v31 + 72);
  *(_BYTE *)(v30 + 80) = *(_BYTE *)(v31 + 80);
  *(_BYTE *)(v30 + 81) = *(_BYTE *)(v31 + 81);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v30 + 88), (uint64_t *)(v31 + 88));
  *(_BYTE *)(v30 + 128) = *(_BYTE *)(v31 + 128);
  *(_BYTE *)(v30 + 129) = *(_BYTE *)(v31 + 129);
  *(_BYTE *)(v30 + 130) = *(_BYTE *)(v31 + 130);
  *(_BYTE *)(v30 + 131) = *(_BYTE *)(v31 + 131);
  *(_QWORD *)(v30 + 136) = *(_QWORD *)(v31 + 136);
  *(_QWORD *)(v30 + 144) = *(_QWORD *)(v31 + 144);
  *(_QWORD *)(v30 + 152) = *(_QWORD *)(v31 + 152);
  *(_QWORD *)(v30 + 160) = *(_QWORD *)(v31 + 160);
  v42 = (_QWORD *)((v30 + 175) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v31 + 175) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_retain();
  swift_release();
  return v4;
}

uint64_t initializeWithTake for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  size_t v18;
  _QWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = ~v9;
  v14 = (v9 + 16) & ~v9;
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v17 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    v18 = v14 + v15;
    if ((_DWORD)v17 != -1)
      goto LABEL_5;
LABEL_7:
    *v11 = *v12;
    v19 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v19 + v9 + 8) & v13, ((unint64_t)v16 + v9 + 8) & v13, AssociatedTypeWitness);
    goto LABEL_8;
  }
  v18 = v14 + v15;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v16 + v9 + 8) & v13))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v12, v18);
LABEL_8:
  v20 = (_OWORD *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v21 = (__int128 *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  v23 = v21[1];
  *(_OWORD *)((char *)v20 + 25) = *(__int128 *)((char *)v21 + 25);
  *v20 = v22;
  v20[1] = v23;
  v24 = ((unint64_t)v11 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v12 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_OWORD *)(v25 + 96);
  v28 = *(_OWORD *)(v25 + 48);
  v27 = *(_OWORD *)(v25 + 64);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(v25 + 80);
  *(_OWORD *)(v24 + 96) = v26;
  *(_OWORD *)(v24 + 48) = v28;
  *(_OWORD *)(v24 + 64) = v27;
  v30 = *(_OWORD *)(v25 + 128);
  v29 = *(_OWORD *)(v25 + 144);
  v31 = *(_OWORD *)(v25 + 112);
  *(_QWORD *)(v24 + 160) = *(_QWORD *)(v25 + 160);
  *(_OWORD *)(v24 + 128) = v30;
  *(_OWORD *)(v24 + 144) = v29;
  *(_OWORD *)(v24 + 112) = v31;
  v32 = *(_OWORD *)v25;
  v33 = *(_OWORD *)(v25 + 32);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 16);
  *(_OWORD *)(v24 + 32) = v33;
  *(_OWORD *)v24 = v32;
  *(_OWORD *)((v24 + 175) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v25 + 175) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  int v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_QWORD *)((v10 + v4) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = ((v9 + 16) & ~v9) + v14;
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v41 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    v39 = ((v9 + 16) & ~v9) + v14;
    v40 = v4;
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v38 = v20(((unint64_t)v16 + v9 + 8) & ~v9, v13, AssociatedTypeWitness);
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = v39;
    v19 = v20(((unint64_t)v17 + v9 + 8) & ~v9, v13, AssociatedTypeWitness);
    v4 = v40;
    if (!v38)
    {
LABEL_5:
      if (!v19)
      {
        *v11 = *v12;
        swift_release();
        *v16 = *v17;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v41, ((unint64_t)v17 + v9 + 8) & v41, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v41, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL)
      LODWORD(v18) = -1;
    v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v19)
  {
    *v11 = *v12;
    *v16 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v41, ((unint64_t)v17 + v9 + 8) & v41, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  v21 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_QWORD *)(v21 + 8) = v23;
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  *(_BYTE *)(v21 + 40) = *(_BYTE *)(v22 + 40);
  v24 = ((unint64_t)v11 + v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v12 + v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_BYTE *)(v25 + 32);
  v27 = *(_QWORD *)v24;
  v28 = *(_QWORD *)(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = *(_QWORD *)(v24 + 24);
  v31 = *(_BYTE *)(v24 + 32);
  v32 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v32;
  *(_BYTE *)(v24 + 32) = v26;
  outlined consume of _ScrollViewConfig.ContentOffset(v27, v28, v29, v30, v31);
  *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v24 + 48) = *(_QWORD *)(v25 + 48);
  *(_QWORD *)(v24 + 56) = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v24 + 64) = *(_QWORD *)(v25 + 64);
  *(_QWORD *)(v24 + 72) = *(_QWORD *)(v25 + 72);
  *(_BYTE *)(v24 + 80) = *(_BYTE *)(v25 + 80);
  *(_BYTE *)(v24 + 81) = *(_BYTE *)(v25 + 81);
  __swift_destroy_boxed_opaque_existential_1(v24 + 88);
  v33 = *(_OWORD *)(v25 + 88);
  v34 = *(_OWORD *)(v25 + 104);
  *(_QWORD *)(v24 + 120) = *(_QWORD *)(v25 + 120);
  *(_OWORD *)(v24 + 104) = v34;
  *(_OWORD *)(v24 + 88) = v33;
  *(_BYTE *)(v24 + 128) = *(_BYTE *)(v25 + 128);
  *(_BYTE *)(v24 + 129) = *(_BYTE *)(v25 + 129);
  *(_BYTE *)(v24 + 130) = *(_BYTE *)(v25 + 130);
  *(_BYTE *)(v24 + 131) = *(_BYTE *)(v25 + 131);
  *(_QWORD *)(v24 + 136) = *(_QWORD *)(v25 + 136);
  *(_QWORD *)(v24 + 144) = *(_QWORD *)(v25 + 144);
  *(_QWORD *)(v24 + 152) = *(_QWORD *)(v25 + 152);
  *(_QWORD *)(v24 + 160) = *(_QWORD *)(v25 + 160);
  v35 = (_QWORD *)((v24 + 175) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)((v25 + 175) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_release();
  return v4;
}

uint64_t getEnumTagSinglePayload for _PagingView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = v10 - 1;
  if (v10 - 1 <= v7)
    v12 = v7;
  else
    v12 = v10 - 1;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = v14 | 7;
  v16 = ((v14 + 16) & ~v14) + *(_QWORD *)(v8 + 64);
  v17 = (v14 | 7) + *(_QWORD *)(v6 + 64);
  if (v13 < a2)
  {
    if (((((((v16 + (v17 & ~v15) + 55) & 0xFFFFFFFFFFFFFFF8) + 175) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v13 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X3 }
  }
  if ((_DWORD)v7 == v13)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
  v22 = (v17 + a1) & ~v15;
  if (v11 == v13)
  {
    v23 = (uint64_t *)((v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) != 0)
    {
      v25 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v23 + v14 + 8) & ~v14);
    }
    else
    {
      v24 = *v23;
      if ((unint64_t)*v23 >= 0xFFFFFFFF)
        LODWORD(v24) = -1;
      v25 = v24 + 1;
    }
    if (v25 >= 2)
      return v25 - 1;
    else
      return 0;
  }
  else
  {
    v26 = *(_QWORD *)(((v22 + v16 + 55) & 0xFFFFFFFFFFFFF8) + 0x70);
    if (v26 >= 0xFFFFFFFF)
      LODWORD(v26) = -1;
    return (v26 + 1);
  }
}

void storeEnumTagSinglePayload for _PagingView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 - 1 <= v8)
    v11 = v8;
  else
    v11 = v10 - 1;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(v9 + 80);
  if (v12 >= a3)
  {
    v16 = 0u;
    if (a2 <= v12)
      goto LABEL_23;
  }
  else
  {
    if ((((((((_DWORD)v13 + 16) & ~(_DWORD)v13)
           + *(_DWORD *)(v9 + 64)
           + (((v13 | 7) + *(_DWORD *)(v7 + 64)) & ~(v13 | 7))
           + 55) & 0xFFFFFFF8)
         + 175) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v14 = a3 - v12 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (a2 <= v12)
LABEL_23:
      __asm { BR              X0 }
  }
  if ((((((((_DWORD)v13 + 16) & ~(_DWORD)v13)
         + *(_DWORD *)(v9 + 64)
         + (((v13 | 7) + *(_DWORD *)(v7 + 64)) & ~(v13 | 7))
         + 55) & 0xFFFFFFF8)
       + 175) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v17 = ~v12 + a2;
    bzero(a1, ((((((v13 + 16) & ~v13) + *(_QWORD *)(v9 + 64) + (((v13 | 7) + *(_QWORD *)(v7 + 64)) & ~(v13 | 7)) + 55) & 0xFFFFFFFFFFFFFFF8)+ 175) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v17;
  }
  __asm { BR              X10 }
}

void sub_18760B75C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18760B8E4);
}

void sub_18760B764()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x18760B76CLL);
  JUMPOUT(0x18760B8E4);
}

void sub_18760B80C()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x18760B8E4);
}

void sub_18760B814()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18760B8E4);
}

void sub_18760B81C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18760B8E4);
}

uint64_t sub_18760B824@<X0>(size_t a1@<X1>, int a2@<W8>)
{
  void *v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(v10 + v13) = 0;
  if (!(_DWORD)v9)
    goto LABEL_11;
  if ((_DWORD)v12 != a2)
  {
    v3 = (void *)((v7 + v10) & v8);
    if (v6 != a2)
      JUMPOUT(0x18760B830);
    if ((int)v9 + 1 <= v5)
      JUMPOUT(0x18760B84CLL);
    if ((_DWORD)a1)
    {
      if (a1 <= 3)
        v4 = a1;
      else
        v4 = 4;
      bzero(v3, a1);
      __asm { BR              X10 }
    }
LABEL_11:
    JUMPOUT(0x18760B8E4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v10, v9, v12, v11);
}

void sub_18760B8B8()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x18760B8E4);
}

void sub_18760B8C8()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x18760B8E4);
}

void sub_18760B8D0()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x18760B8E4);
}

void sub_18760B900()
{
  lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_18760B944(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  v4 = type metadata accessor for _ScrollView(255, a1, v2, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>, v4);
  v5 = type metadata accessor for GeometryReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2768], v5);
}

uint64_t getEnumTagSinglePayload for PagingLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PagingLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for PagingLayout()
{
  return &unk_1E1AB2BA0;
}

unint64_t instantiation function for generic protocol witness table for PagingLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _PagingView.ToPageOffset()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined assign with copy of _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  assignWithCopy for _ScrollViewConfig(a2, a1);
  return a2;
}

void type metadata accessor for State<CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for State<CGFloat>)
  {
    v0 = type metadata accessor for State();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<CGFloat>);
  }
}

uint64_t type metadata completion function for _PagingView.ToPageOffset()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PagingView.ToPageOffset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (__int128 *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v11;
    v12 = v11[1];
    *(_OWORD *)((char *)v10 + 25) = *(__int128 *)((char *)v11 + 25);
    *v10 = v13;
    v10[1] = v12;
    v14 = (_QWORD *)(((unint64_t)v4 + v6 + 55) & 0xFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)a2 + v6 + 55) & 0xFFFFFFFFFFFFF8);
    *v14 = *v15;
    *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = v10[1];
  *(_OWORD *)((char *)v9 + 25) = *(__int128 *)((char *)v10 + 25);
  *v9 = v11;
  v9[1] = v12;
  v13 = (_QWORD *)((v7 + 55) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v8 + 55) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v11 = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 40) = *(_BYTE *)(v10 + 40);
  v12 = (_QWORD *)((v7 + 55) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 55) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = v10[1];
  *(_OWORD *)((char *)v9 + 25) = *(__int128 *)((char *)v10 + 25);
  *v9 = v11;
  v9[1] = v12;
  v13 = (_QWORD *)((v7 + 55) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v8 + 55) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v11 = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 40) = *(_BYTE *)(v10 + 40);
  v12 = (_QWORD *)((v7 + 55) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 55) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PagingView.ToPageOffset(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v12 = *(unsigned __int8 *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 2)
        return v12 - 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18760BFC0 + 4 * byte_187C446BD[v10]))();
  }
}

void storeEnumTagSinglePayload for _PagingView.ToPageOffset(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18760C138()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18760C1C0);
}

void sub_18760C140(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18760C148);
  JUMPOUT(0x18760C1C0);
}

void sub_18760C18C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18760C1C0);
}

void sub_18760C194()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18760C1C0);
}

uint64_t sub_18760C19C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x18760C1A8);
    *(_BYTE *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2 + 1;
LABEL_6:
    JUMPOUT(0x18760C1C0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void base witness table accessor for Equatable in _PagingView<A>.ToPageOffset()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in _PagingView<A>.ToPageOffset()
{
  JUMPOUT(0x18D75FFDCLL);
}

void AsyncBody.wrappedValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static AsyncBody._propertyBehaviors.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for AsyncBody()
{
  return &type metadata for AsyncBody;
}

SwiftUI::PlainListStyle __swiftcall PlainListStyle.init()()
{
  _BYTE *v0;
  SwiftUI::PlainListStyle result;

  *v0 = 2;
  return result;
}

SwiftUI::PlainListStyle __swiftcall PlainListStyle.init(isOutline:)(Swift::Bool isOutline)
{
  SwiftUI::PlainListStyle result;

  result.isOutline.value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static PlainListStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>();
  v7 = type metadata accessor for SelectionManagerBox(255, a3, a4, v6);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  type metadata accessor for PlainListBody();
}

void sub_18760C328()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 124) = v0;
  type metadata accessor for _ListValue();
}

uint64_t sub_18760C354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for PlainListStyle.Body(0, v1, v0, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>, v2);
  return static View._makeView(view:inputs:)();
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<PlainListStyleContext>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>);
  }
}

void type metadata accessor for StyleContextWriter<PlainListStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>)
  {
    lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>);
  }
}

uint64_t type metadata accessor for PlainListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlainListStyle.Body);
}

void static PlainListStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>();
  v7 = type metadata accessor for SelectionManagerBox(255, a3, a4, v6);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  type metadata accessor for PlainListBody();
}

void sub_18760C5B4()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 108) = v0;
  type metadata accessor for _ListValue();
}

uint64_t sub_18760C5E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for PlainListStyle.Body(0, v1, v0, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>, v2);
  return static View._makeViewList(view:inputs:)();
}

void PlainListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18760C700(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void PlainListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _ListValue();
}

void sub_18760C7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  PlainListStyle.Body.base.getter();
}

void sub_18760C844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v4 + *(int *)(v3 + 52), v2);
  PlainListStyle.Body.base.getter();
}

void sub_18760C870()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v6, v5);
  *(_QWORD *)(v7 - 144) = v3;
  *(_QWORD *)(v7 - 136) = v1;
  *(_DWORD *)(v7 - 128) = v2;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, *(_QWORD *)(v7 - 176));
  PlainListBody.init(selection:isOutline:content:)(v4, *(_QWORD *)(v7 - 168));
}

void closure #1 in PlainListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_18760C948(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  PlainListStyle.Body.base.getter();
}

uint64_t sub_18760C988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void protocol witness for static Rule.initialValue.getter in conformance PlainListStyle.Body<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>();
  v3 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for PlainListBody();
}

uint64_t sub_18760CA14(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance PlainListStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  PlainListStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t storeEnumTagSinglePayload for PlainListStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18760CAA8 + 4 * byte_187C44975[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18760CADC + 4 * asc_187C44970[v4]))();
}

uint64_t sub_18760CADC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18760CAE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18760CAECLL);
  return result;
}

uint64_t sub_18760CAF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18760CB00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18760CB04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18760CB0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlainListStyle()
{
  return &type metadata for PlainListStyle;
}

ValueMetadata *type metadata accessor for PlainListStyleContext()
{
  return &type metadata for PlainListStyleContext;
}

unint64_t instantiation function for generic protocol witness table for PlainListStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in PlainListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance PlainListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

void partial apply for closure #1 in PlainListStyle.Body.value.getter()
{
  closure #1 in PlainListStyle.Body.value.getter();
}

uint64_t specialized ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized ModifiedContent<>.accessibilityValue(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent, a2);
}

{
  return specialized ModifiedContent<>.accessibilityValue(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo, a2);
}

uint64_t specialized ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  _OWORD v10[3];
  _OWORD v11[3];
  _BYTE v12[48];

  v5 = v3;
  outlined init with copy of AccessibilityValueStorage(a1, (uint64_t)v12);
  v7 = (uint64_t *)(*(_QWORD *)(v3 + *(int *)(a2(0) + 36)) + 16);
  swift_beginAccess();
  v8 = *v7;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v8, v11);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v12, (uint64_t)v10);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v10);
  specialized AccessibilityProperties.subscript.getter(*v7, v10);
  specialized Optional<A>.merge(with:)((uint64_t)v11);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v10);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v11);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, a3, a2);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v12);
}

void protocol witness for View.body.getter in conformance ProgressViewStyleConfiguration.CurrentValueLabel()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t ProgressViewStyleConfiguration.fractionCompleted.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 20));
}

uint64_t type metadata accessor for ProgressViewStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ProgressViewStyleConfiguration);
}

uint64_t ProgressViewStyleConfiguration.label.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t ProgressViewStyleConfiguration.label.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*ProgressViewStyleConfiguration.label.modify())(_QWORD)
{
  type metadata accessor for ProgressViewStyleConfiguration(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ProgressViewStyleConfiguration.currentValueLabel.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ProgressViewStyleConfiguration.currentValueLabel.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*ProgressViewStyleConfiguration.currentValueLabel.modify())(_QWORD)
{
  type metadata accessor for ProgressViewStyleConfiguration(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ResolvedProgressViewStyle.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[6];
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  v65 = a1;
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v58 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(0);
  v61 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v60 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v62 = (uint64_t)&v58 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v63 = (uint64_t)&v58 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v64 = (uint64_t)&v58 - v17;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v58 - v21;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  v59 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v58 - v25;
  v27 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v58 - v33;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, (unint64_t *)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v58 - v37;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v34, type metadata accessor for ProgressViewStyleConfiguration);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, (uint64_t)v30, type metadata accessor for ProgressViewStyleConfiguration);
  v39 = *(int *)(v19 + 52);
  v40 = *(int *)(v19 + 56);
  v22[v40] = 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, (uint64_t)v22, type metadata accessor for ProgressViewValue);
  v22[v39] = v30[v27[7]];
  LOBYTE(v39) = v30[v27[8]];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, type metadata accessor for ProgressViewStyleConfiguration);
  v22[v40] = v39;
  _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_0((uint64_t)v22, (uint64_t)v26, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ProgressViewStyleConfiguration);
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_0((uint64_t)v26, (uint64_t)v38, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v34, type metadata accessor for ProgressViewStyleConfiguration);
  v41 = &v34[v27[5]];
  v59 = *(_QWORD *)v41;
  LOBYTE(v26) = v41[8];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ProgressViewStyleConfiguration);
  v42 = v58;
  outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v38, v58);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v43 = swift_allocObject();
  *(_BYTE *)(v43 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v67 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v44 = v66[0];
  v45 = v66[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v44;
  *(_QWORD *)(v46 + 24) = v45;
  v47 = v60;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42, v60, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>);
  swift_release();
  v48 = v61;
  v49 = (uint64_t *)(v47 + *(int *)(v61 + 36));
  *v49 = v46;
  v49[1] = v43;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v46 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  v50 = v47;
  v51 = v62;
  outlined init with take of ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(v50, v62);
  v52 = (uint64_t *)(v51 + *(int *)(v48 + 36));
  v53 = *v52;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v53 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>);
  v66[0] = 1024;
  AccessibilityNullableOptionSet<>.init(adding:)();
  v54 = *v52 + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v54);
  swift_endAccess();
  swift_release();
  swift_release();
  v55 = v63;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v51, v63, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v51, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>);
  v67 = v59;
  LOWORD(v68) = v26;
  lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  v56 = v64;
  specialized ModifiedContent<>.accessibilityValue(_:)((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, v64);
  outlined destroy of AccessibilityValueStorage((uint64_t)v66);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>);
  outlined init with take of ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(v56, v65);
  return outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v38);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedProgressViewStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for ProgressViewStyleConfiguration);
}

uint64_t View.progressViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ProgressViewStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ProgressViewStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ProgressViewStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for ProgressViewStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ProgressViewStyleConfiguration.Label()
{
  return &protocol witness table for ProgressViewStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ProgressViewStyleConfiguration.CurrentValueLabel()
{
  return &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
}

uint64_t dispatch thunk of ProgressViewStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

_QWORD *initializeBufferWithCopyOfBuffer for ProgressViewStyleConfiguration(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Date();
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((_QWORD *)((char *)a1 + *(int *)(v10 + 36)), (_QWORD *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v13 = a3[5];
    v14 = a3[6];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v17 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  }
  return a1;
}

_BYTE *initializeWithCopy for ProgressViewStyleConfiguration(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[5];
  v12 = a3[6];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  return a1;
}

_BYTE *assignWithCopy for ProgressViewStyleConfiguration(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *(_QWORD *)v13;
  v12[8] = v13[8];
  *(_QWORD *)v12 = v14;
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

_BYTE *initializeWithTake for ProgressViewStyleConfiguration(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[5];
  v12 = a3[6];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  return a1;
}

_BYTE *assignWithTake for ProgressViewStyleConfiguration(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = a3[5];
  v12 = a3[6];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressViewStyleConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18760DCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for ProgressViewValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProgressViewStyleConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18760DD44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ProgressViewValue(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for ProgressViewStyleConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ProgressViewValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProgressViewStyleConfiguration.Label()
{
  return &type metadata for ProgressViewStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for ProgressViewStyleConfiguration.CurrentValueLabel()
{
  return &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
}

uint64_t sub_18760DE68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ProgressViewStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ProgressViewStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for ProgressViewStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18760DF78 + 4 * byte_187C44AD0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ProgressViewStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ProgressViewStyleModifier<A>()
{
  return &protocol witness table for ProgressViewStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ProgressViewStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ProgressViewStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for ProgressViewStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_18760E334()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedProgressViewStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Date();
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((_QWORD *)((char *)a1 + *(int *)(v10 + 36)), (_QWORD *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v13 = v6[5];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    *((_BYTE *)a1 + v6[6]) = *((_BYTE *)a2 + v6[6]);
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  }
  return a1;
}

_BYTE *initializeWithCopy for ResolvedProgressViewStyle(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v4 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for Date();
    v6 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    type metadata accessor for ClosedRange<Date>();
    v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

_BYTE *assignWithCopy for ResolvedProgressViewStyle(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v4 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for Date();
      v6 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
      v6(a1, a2, v5);
      type metadata accessor for ClosedRange<Date>();
      v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

_BYTE *initializeWithTake for ResolvedProgressViewStyle(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v4 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for Date();
    v6 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    type metadata accessor for ClosedRange<Date>();
    v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

_BYTE *assignWithTake for ResolvedProgressViewStyle(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v4 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for Date();
      v6 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
      v6(a1, a2, v5);
      type metadata accessor for ClosedRange<Date>();
      v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedProgressViewStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18760E978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedProgressViewStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18760E9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedProgressViewStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedProgressViewStyle);
}

uint64_t type metadata completion function for ResolvedProgressViewStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ProgressViewStyleModifier<DefaultProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultProgressViewStyle and conformance DefaultProgressViewStyle, (uint64_t)&type metadata for DefaultProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProgressViewStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleModifier<DefaultProgressViewStyle> and conformance ProgressViewStyleModifier<A>);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ResolvedProgressViewStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!*a2)
  {
    v6[0] = &type metadata for ProgressViewStyleConfiguration.Label;
    v6[1] = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
    v6[2] = &protocol witness table for ProgressViewStyleConfiguration.Label;
    v6[3] = &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, _QWORD *))
{
  uint64_t v6;

  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, (unint64_t *)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5FA0], MEMORY[0x1E0CE5F90]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5F98], MEMORY[0x1E0CE5F90]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5F88], MEMORY[0x1E0CE5F90]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

uint64_t outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, (unint64_t *)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18760EDA4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

unint64_t lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>;
  if (!lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>)
  {
    type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(255, (unint64_t *)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressView<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>);
  }
  return result;
}

void View.windowLayoutValue<A>(key:value:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18760EE40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverOytTg5207_s7SwiftUI0A27UIAccessibilityTextResolverV36resolveAccessibilitySpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFySdXEfU2_SDySo0tU3KeyaypGTf1cn_n(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v4;
  double v5;
  _QWORD v7[4];

  v2 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    v4 = (void *)static NSAttributedStringKey.coreAXSpeechPitch.getter();
    v5 = 2.0;
    if (*(double *)&a1 <= 1.0)
      v5 = *(double *)&a1 + 1.0;
    if (*(double *)&a1 < -1.0)
      v5 = 0.0;
    v7[3] = MEMORY[0x1E0DEB070];
    *(double *)v7 = v5;
    specialized Dictionary.subscript.setter((uint64_t)v7, v4);
  }
  return v2;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI33AccessibilityAnnouncementPriorityO_s5NeverOytTB503_s7c43UI0A27UIAccessibilityTextResolverV36resolvee141SpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFyAA0G20fG6OXEfU_SDySo0wX3KeyaypGTf1cn_n(unsigned __int8 a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  unsigned __int8 v4;

  v2 = a1;
  if (a1 == 3)
    return v2 == 3;
  v4 = a1;
  result = closure #1 in SwiftUIAccessibilityTextResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(&v4);
  if (!v1)
    return v2 == 3;
  return result;
}

uint64_t specialized ModifiedContent<>.accessibilityLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v6 = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_BYTE *)(v12 + 48) = a3 & 1;
  *(_QWORD *)(v12 + 56) = a4;
  v21 = *(_OWORD *)(v6 + 24);
  swift_beginAccess();
  v13 = MEMORY[0x1E0CE5DB8];
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8]);
  v19 = v14;
  v20 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v13);
  v17 = v12;
  v18 = 2;
  swift_bridgeObjectRetain_n();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  outlined retain of AccessibilityAttachmentModifier((uint64_t)&v21);
  specialized Dictionary.subscript.setter((uint64_t)&v17, MEMORY[0x1E0CE5888]);
  swift_endAccess();
  outlined release of AccessibilityAttachmentModifier((uint64_t)&v21);
  v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v6;
  *(_OWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 32) = *(_QWORD *)(v6 + 32);
  outlined retain of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(v6);
  return swift_bridgeObjectRelease_n();
}

uint64_t ViewRendererHost.accessibilityNodes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), _QWORD, uint64_t, uint64_t, uint64_t))(v3 + 32);
  type metadata accessor for [AccessibilityNode]();
  v4(&v7, closure #1 in ViewRendererHost.accessibilityNodes.getter, 0, v5, a1, v3);
  return v7;
}

double specialized AccessibilityImageModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[11];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];

  v3 = *v1;
  v16 = *((_BYTE *)v1 + 8);
  v4 = v1[4];
  v14 = v1[3];
  v15 = v1[2];
  v13 = v1[5];
  v48 = 32;
  v49[0] = v3;
  specialized View.accessibility<A>(_:_:isEnabled:)(0x100000001uLL, 1, (uint64_t)v30);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Image>, MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)&v34 = v5;
  specialized Array._endMutation()();
  v42 = v30[8];
  v43 = v30[9];
  v44 = v30[10];
  v6 = v32;
  v45 = v31;
  v38 = v30[4];
  v39 = v30[5];
  v40 = v30[6];
  v41 = v30[7];
  v34 = v30[0];
  v35 = v30[1];
  v36 = v30[2];
  v37 = v30[3];
  v7 = v33;
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 16);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v49);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v8);
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v9);
  v17 = specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v6 + 16));
  v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  specialized AccessibilityProperties.subscript.setter(v17);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_beginAccess();
  if ((v16 & 1) != 0)
    v11 = 0x400000004;
  else
    v11 = 0;
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v6 + 16, v11);
  swift_endAccess();
  swift_release();
  swift_release();
  v46 = v6;
  v47 = v7;
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    outlined copy of AccessibilityImageLabel(v15, v14, v4);
    specialized closure #1 in AccessibilityImageModifier.body(content:)(v15, v14, v4, v13, &v34, &v48);
    outlined consume of AccessibilityImageLabel?(v15, v14, v4);
    v6 = v46;
    v7 = v47;
  }
  v27 = v43;
  v28 = v44;
  v23 = v39;
  v24 = v40;
  v29 = v45;
  v25 = v41;
  v26 = v42;
  v18 = v34;
  v19 = v35;
  v20 = v36;
  v21 = v37;
  v22 = v38;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v6 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 128) = v26;
  *(_OWORD *)(a1 + 144) = v27;
  *(_OWORD *)(a1 + 160) = v28;
  *(_OWORD *)(a1 + 64) = v22;
  *(_OWORD *)(a1 + 80) = v23;
  *(_OWORD *)(a1 + 96) = v24;
  *(_OWORD *)(a1 + 112) = v25;
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  result = *(double *)&v20;
  *(_OWORD *)(a1 + 32) = v20;
  *(_OWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 176) = v29;
  *(_QWORD *)(a1 + 184) = v6;
  *(_QWORD *)(a1 + 192) = v7;
  return result;
}

uint64_t specialized closure #1 in AccessibilityImageModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, _QWORD *a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  Swift::String v51;
  _OWORD v54[12];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v11 = a5[11];
  v66 = a5[10];
  v67 = v11;
  v68 = *((_QWORD *)a5 + 24);
  v12 = a5[7];
  v62 = a5[6];
  v63 = v12;
  v13 = a5[9];
  v64 = a5[8];
  v65 = v13;
  v14 = a5[3];
  v58 = a5[2];
  v59 = v14;
  v15 = a5[5];
  v60 = a5[4];
  v61 = v15;
  v16 = a5[1];
  v56 = *a5;
  v57 = v16;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_187BF9830;
  *(_QWORD *)&v69 = a1;
  *((_QWORD *)&v69 + 1) = a2;
  *(_QWORD *)&v70 = a3;
  *((_QWORD *)&v70 + 1) = a4;
  outlined retain of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)&v56);
  *(_QWORD *)(v17 + 32) = AccessibilityImageLabel.text.getter();
  *(_QWORD *)(v17 + 40) = v18;
  *(_BYTE *)(v17 + 48) = v19 & 1;
  *(_QWORD *)(v17 + 56) = v20;
  v21 = *((_QWORD *)&v67 + 1) + 16;
  swift_beginAccess();
  v22 = MEMORY[0x1E0CE5DB8];
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8]);
  *((_QWORD *)&v70 + 1) = v23;
  *(_QWORD *)&v71 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v22);
  *(_QWORD *)&v69 = v17;
  BYTE8(v69) = 3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v69, MEMORY[0x1E0CE5888]);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v24 = a5[11];
  v79 = a5[10];
  v80 = v24;
  v81 = *((_QWORD *)a5 + 24);
  v25 = a5[7];
  v75 = a5[6];
  v76 = v25;
  v26 = a5[9];
  v77 = a5[8];
  v78 = v26;
  v27 = a5[3];
  v71 = a5[2];
  v72 = v27;
  v28 = a5[5];
  v73 = a5[4];
  v74 = v28;
  v29 = a5[1];
  v69 = *a5;
  v70 = v29;
  result = outlined release of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)&v69);
  v31 = v67;
  a5[10] = v66;
  a5[11] = v31;
  *((_QWORD *)a5 + 24) = v68;
  v32 = v63;
  a5[6] = v62;
  a5[7] = v32;
  v33 = v65;
  a5[8] = v64;
  a5[9] = v33;
  v34 = v59;
  a5[2] = v58;
  a5[3] = v34;
  v35 = v61;
  a5[4] = v60;
  a5[5] = v35;
  v36 = v57;
  *a5 = v56;
  a5[1] = v36;
  if (a3 < 0)
  {
    swift_beginAccess();
    outlined retain of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)&v56);
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v21, a1, a2, 1);
    swift_endAccess();
    swift_release();
    swift_release();
    v37 = a5[10];
    v38 = a5[11];
    v39 = a5[8];
    v54[9] = a5[9];
    v54[10] = v37;
    v54[11] = v38;
    v41 = a5[6];
    v40 = a5[7];
    v55 = *((_QWORD *)a5 + 24);
    v54[7] = v40;
    v54[8] = v39;
    v42 = a5[3];
    v54[2] = a5[2];
    v54[3] = v42;
    v43 = a5[4];
    v54[5] = a5[5];
    v54[6] = v41;
    v54[4] = v43;
    v44 = a5[1];
    v54[0] = *a5;
    v54[1] = v44;
    outlined release of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)v54);
    v45 = v67;
    a5[10] = v66;
    a5[11] = v45;
    *((_QWORD *)a5 + 24) = v68;
    v46 = v63;
    a5[6] = v62;
    a5[7] = v46;
    v47 = v65;
    a5[8] = v64;
    a5[9] = v47;
    v48 = v59;
    a5[2] = v58;
    a5[3] = v48;
    v49 = v61;
    a5[4] = v60;
    a5[5] = v49;
    v50 = v57;
    *a5 = v56;
    a5[1] = v50;
    v51._countAndFlagsBits = 0x72616D6B63656863;
    v51._object = (void *)0xE90000000000006BLL;
    result = String.hasPrefix(_:)(v51);
    if ((result & 1) != 0)
      *a6 |= 4uLL;
  }
  return result;
}

uint64_t AccessibilityViewGraph.modifyViewInputs(inputs:graph:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v6;

  *(_DWORD *)(a1 + 36) |= 0x1000u;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider();
  _ViewInputs.textAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider();
  _ViewInputs.imageAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider();
  _ViewInputs.privacyReductionAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider();
  _ViewInputs.layoutAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider();
  _ViewInputs.gestureAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider();
  _ViewInputs.opacityAccessibilityProvider.setter();
  swift_beginAccess();
  if ((*(_BYTE *)(a2 + 361) & 0x10) != 0)
    *(_DWORD *)(a1 + 36) |= 0xC0u;
  _ViewInputs.makeRootAccessibilityRelationshipScope()();
  type metadata accessor for AccessibilityRelationshipScope();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityRelationshipScope, (uint64_t)&protocol conformance descriptor for AccessibilityRelationshipScope);
  PropertyList.subscript.getter();
  result = swift_release();
  *v2 = v6;
  return result;
}

BOOL AccessibilityViewGraph.needsUpdate(graph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t WeakValue;
  _BOOL8 result;

  swift_beginAccess();
  result = 0;
  if (*(_BYTE *)(a1 + 360) == 1 && *(_BYTE *)(v1 + 24) == 1)
  {
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      if (*(_QWORD *)(v1 + 16) != *(_QWORD *)(WeakValue + 8))
        return 1;
    }
  }
  return result;
}

uint64_t AccessibilityViewGraph.update(graph:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  unint64_t v7;
  void (*v8)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD v13[2];

  v2 = v1;
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v3 = result;
    result = AGGraphGetWeakValue();
    if (result)
    {
      v4 = *(_QWORD *)(result + 8);
      if (*(_QWORD *)(v2 + 16) != v4)
      {
        *(_QWORD *)(v2 + 16) = v4;
        *(_BYTE *)(v2 + 24) = 0;
        swift_beginAccess();
        result = MEMORY[0x18D760234](v3 + 200);
        if (result)
        {
          v5 = *(_QWORD *)(v3 + 208);
          ObjectType = swift_getObjectType();
          v7 = type metadata accessor for AccessibilityHost();
          v8 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v5 + 16);
          swift_bridgeObjectRetain();
          v8(v13, v7, v7, ObjectType, v5);
          swift_unknownObjectRelease();
          if (v13[0])
          {
            v9 = v13[1];
            v10 = swift_getObjectType();
            v12 = MEMORY[0x1E0C80A78](v10, v11);
            (*(void (**)(uint64_t (*)(), double))(v9 + 8))(partial apply for closure #1 in AccessibilityViewGraph.postUpdate(graph:list:), v12);
            swift_bridgeObjectRelease();
            return swift_unknownObjectRelease();
          }
          else
          {
            return swift_bridgeObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

uint64_t AccessibilityViewGraph.readAndUpdate(graph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *WeakValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  unint64_t v9;
  void (*v10)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  _QWORD v16[2];

  v2 = v1;
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
    return MEMORY[0x1E0DEE9D8];
  v5 = *WeakValue;
  v6 = WeakValue[1];
  *(_BYTE *)(v2 + 24) = 1;
  if (*(_QWORD *)(v2 + 16) == v6
    || (*(_QWORD *)(v2 + 16) = v6, *(_BYTE *)(v2 + 24) = 0, swift_beginAccess(), !MEMORY[0x18D760234](a1 + 200)))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
    ObjectType = swift_getObjectType();
    v9 = type metadata accessor for AccessibilityHost();
    v10 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v10(v16, v9, v9, ObjectType, v7);
    swift_unknownObjectRelease();
    if (v16[0])
    {
      v11 = v16[1];
      v12 = swift_getObjectType();
      v14 = MEMORY[0x1E0C80A78](v12, v13);
      (*(void (**)(uint64_t (*)(), double))(v11 + 8))(partial apply for closure #1 in AccessibilityViewGraph.postUpdate(graph:list:), v14);
      swift_unknownObjectRelease();
    }
  }
  return v5;
}

uint64_t protocol witness for ViewGraphFeature.uninstantiate(graph:) in conformance AccessibilityViewGraph()
{
  _QWORD *v0;
  uint64_t result;

  v0[1] = 0;
  result = swift_release();
  *v0 = 0;
  return result;
}

uint64_t closure #1 in ViewRendererHost.accessibilityNodes.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  GraphHost.instantiateIfNeeded()();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  if (ViewGraph.subscript.getter())
    result = AccessibilityViewGraph.readAndUpdate(graph:)(a1);
  else
    result = MEMORY[0x1E0DEE9D8];
  *a2 = result;
  return result;
}

unint64_t type metadata accessor for AccessibilityHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AccessibilityHost;
  if (!lazy cache variable for type metadata for AccessibilityHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityHost);
  }
  return result;
}

void type metadata accessor for [AccessibilityNode]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [AccessibilityNode])
  {
    type metadata accessor for AccessibilityNode();
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode]);
  }
}

ValueMetadata *type metadata accessor for SwiftUIAccessibilityTextResolver()
{
  return &type metadata for SwiftUIAccessibilityTextResolver;
}

uint64_t initializeWithCopy for AccessibilityViewGraph(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityViewGraph(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for AccessibilityViewGraph(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityViewGraph(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityViewGraph(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityViewGraph()
{
  return &type metadata for AccessibilityViewGraph;
}

uint64_t closure #1 in SwiftUIAccessibilityTextResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(unsigned __int8 *a1)
{
  int v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[4];

  v1 = *a1;
  v2 = (void *)static NSAttributedStringKey.coreAXSpeechAnnouncementPriority.getter();
  v3 = 0x8000000187BE4A90;
  v4 = 0xD00000000000001ELL;
  v5 = 0x8000000187BE4A70;
  if (v1 != 1)
  {
    v4 = 0xD00000000000001BLL;
    v5 = 0x8000000187BE4A50;
  }
  if (v1)
    v3 = v5;
  else
    v4 = 0xD00000000000001ALL;
  v7[3] = MEMORY[0x1E0DEA968];
  v7[0] = v4;
  v7[1] = v3;
  return specialized Dictionary.subscript.setter((uint64_t)v7, v2);
}

uint64_t partial apply for closure #1 in AccessibilityViewGraph.postUpdate(graph:list:)()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 24) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t static SwiftUITextAccessibilityProvider.makeView(content:text:resolved:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X8>)
{
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[27];

  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)a1;
  v13 = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  v14 = a6[6];
  v48 = a6[5];
  v49 = v14;
  v50[0] = a6[7];
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)((char *)a6 + 121);
  v15 = a6[2];
  v44 = a6[1];
  v45 = v15;
  v16 = a6[4];
  v46 = a6[3];
  v47 = v16;
  v17 = a4 & 1;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of TextLayoutProperties((uint64_t)&v44);
  v18 = ResolvedStyledText.isDynamic.getter();
  v19 = ResolvedStyledText.isEmpty.getter();
  swift_release();
  *(_QWORD *)&v51 = a2;
  *((_QWORD *)&v51 + 1) = a3;
  LOBYTE(v52) = v17;
  *((_QWORD *)&v52 + 1) = a5;
  v57 = v48;
  v58 = v49;
  *(_OWORD *)v59 = v50[0];
  *(_OWORD *)&v59[9] = *(_OWORD *)((char *)v50 + 9);
  v53 = v44;
  v54 = v45;
  v55 = v46;
  v56 = v47;
  v59[25] = v18 & 1;
  v59[26] = v19 & 1;
  v41 = v48;
  v42 = v49;
  v43[0] = *(_OWORD *)v59;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  v35 = v51;
  v36 = v52;
  *(_OWORD *)((char *)v43 + 11) = *(_OWORD *)&v59[11];
  specialized AccessibilityStaticTextModifier.body(content:)(v30, v29, v13, (uint64_t)v31);
  outlined release of AccessibilityStaticTextModifier<StyledTextContentView>.Configuration((uint64_t)&v51);
  v20 = v31[0];
  v21 = v31[1];
  v22 = v32;
  v23 = v33;
  v24 = v34;
  result = ResolvedStyledText.accessibilityText.getter();
  *(_QWORD *)a7 = v20;
  *(_QWORD *)(a7 + 8) = v21;
  *(_BYTE *)(a7 + 16) = v22;
  *(_QWORD *)(a7 + 24) = v23;
  *(_QWORD *)(a7 + 32) = v24;
  *(_BYTE *)(a7 + 40) = 1;
  *(_QWORD *)(a7 + 48) = result;
  *(_QWORD *)(a7 + 56) = v26;
  *(_BYTE *)(a7 + 64) = v27 & 1;
  *(_QWORD *)(a7 + 72) = v28;
  return result;
}

uint64_t protocol witness for static TextAccessibilityProvider.makeView(content:text:resolved:) in conformance SwiftUITextAccessibilityProvider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X8>)
{
  return static SwiftUITextAccessibilityProvider.makeView(content:text:resolved:)(a1, a2, a3, a4 & 1, a5, a6, a7);
}

uint64_t protocol witness for static ImageAccessibilityProvider.makeView(image:resolved:) in conformance SwiftUIImageAccessibilityProvider@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_OWORD *)(a1 + 112);
  swift_retain();
  outlined copy of AccessibilityImageLabel?(v3, v4, *((uint64_t *)&v4 + 1));
  specialized AccessibilityImageModifier.body(content:)(a2);
  swift_release();
  return outlined consume of AccessibilityImageLabel?(v3, v4, *((uint64_t *)&v4 + 1));
}

uint64_t SwiftUIPrivacyReductionAccessibilityProvider.Modifier.body(content:)@<X0>(char a1@<W1>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6[2];

  if ((a1 & 1) != 0)
    v3 = 0x400000004;
  else
    v3 = 0x400000000;
  result = specialized View.accessibility<A>(_:_:isEnabled:)(v3, 1, v6);
  v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier@<X0>(_QWORD *a1@<X8>)
{
  char *v1;

  return SwiftUIPrivacyReductionAccessibilityProvider.Modifier.body(content:)(*v1, a1);
}

unint64_t protocol witness for static LayoutAccessibilityProvider.makeAccessibility(inputs:outputs:) in conformance SwiftUILayoutAccessibilityProvider()
{
  unint64_t result;

  result = makeAccessibilityLayoutScrollableTransform(isIncremental:role:placedChildren:inputs:outputs:)();
  if ((result & 0x100000000) == 0)
    return _ViewOutputs.subscript.setter();
  return result;
}

uint64_t specialized AccessibilityViewGraph.modifyViewOutputs(outputs:inputs:graph:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  v19 = *((_DWORD *)a2 + 8);
  v20 = *((_DWORD *)a2 + 2);
  v6 = a2[5];
  v7 = a2[6];
  v8 = a2[8];
  v21 = a2[7];
  v9 = a2[9];
  v18 = *((_DWORD *)a2 + 20);
  v10 = *((_DWORD *)a2 + 9) & 0xFFFFFF7F;
  v11 = one-time initialization token for host;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<AccessibilityContainerModifier> and conformance External<A>();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  *(_QWORD *)&v24 = v3;
  DWORD2(v24) = v20;
  v25 = v4;
  v26 = v5;
  v27 = v19;
  v28 = v10;
  v29 = v6;
  v30 = v7;
  v31 = v21;
  v32 = v8;
  v33 = v9;
  v34 = v18;
  v12 = *(_QWORD *)a1;
  v13 = *(unsigned int *)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 12);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v15 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v23, &v24, v12, v13 | (v14 << 32), 0);
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v15, 0x100000000, (uint64_t)&v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  _ViewOutputs.subscript.setter();
  _ViewOutputs.subscript.getter();
  v16 = AGCreateWeakAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)(v22 + 8) = v16;
  return result;
}

unint64_t lazy protocol witness table accessor for type External<AccessibilityContainerModifier> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<AccessibilityContainerModifier> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<AccessibilityContainerModifier> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityContainerModifier> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUITextAccessibilityProvider, &type metadata for SwiftUITextAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIImageAccessibilityProvider, &type metadata for SwiftUIImageAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIPrivacyReductionAccessibilityProvider, &type metadata for SwiftUIPrivacyReductionAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUILayoutAccessibilityProvider, &type metadata for SwiftUILayoutAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIGestureAccessibilityProvider, &type metadata for SwiftUIGestureAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIOpacityAccessibilityProvider, &type metadata for SwiftUIOpacityAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider);
  }
  return result;
}

uint64_t specialized SwiftUIAccessibilityTextResolver.resolveDefaultAttributes(_:)(uint64_t *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  char v51;
  void *v52;
  void *v54;
  __int128 v55;
  __int128 v56;

  v2 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    v55 = 0u;
    v56 = 0u;
    goto LABEL_8;
  }
  v3 = (id)*MEMORY[0x1E0DC1138];
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    v55 = 0u;
    v56 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v55);

  if (!*((_QWORD *)&v56 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v6 = (void *)static NSAttributedStringKey.coreAXFontName.getter();
    v7 = objc_msgSend(v54, sel_fontName);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    v11 = MEMORY[0x1E0DEA968];
    *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v55 = v8;
    *((_QWORD *)&v55 + 1) = v10;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v6);
    v12 = (void *)static NSAttributedStringKey.coreAXFontSize.getter();
    objc_msgSend(v54, sel_pointSize);
    *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DEF040];
    *(_QWORD *)&v55 = v13;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v12);
    v14 = (void *)static NSAttributedStringKey.coreAXFontFamily.getter();
    v15 = objc_msgSend(v54, sel_familyName);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    *((_QWORD *)&v56 + 1) = v11;
    *(_QWORD *)&v55 = v16;
    *((_QWORD *)&v55 + 1) = v18;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v14);

  }
LABEL_9:
  v19 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    v55 = 0u;
    v56 = 0u;
LABEL_17:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_18;
  }
  v20 = (id)*MEMORY[0x1E0DC1140];
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  if ((v22 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v19 + 56) + 32 * v21, (uint64_t)&v55);
  }
  else
  {
    v55 = 0u;
    v56 = 0u;
  }

  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_17;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v23 = (void *)static NSAttributedStringKey.coreAXForegroundColor.getter();
    v24 = objc_msgSend(v54, sel_CGColor);
    type metadata accessor for CGColorRef(0);
    *((_QWORD *)&v56 + 1) = v25;
    *(_QWORD *)&v55 = v24;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v23);

  }
LABEL_18:
  v26 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v27 = (id)*MEMORY[0x1E0DC11A8];
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
    if ((v29 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v28, (uint64_t)&v55);
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
    }

    if (*((_QWORD *)&v56 + 1))
    {
      outlined destroy of Any?((uint64_t)&v55);
      v30 = (void *)static NSAttributedStringKey.coreAXStrikethrough.getter();
      *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DEAFA0];
      LOBYTE(v55) = 1;
      specialized Dictionary.subscript.setter((uint64_t)&v55, v30);
      goto LABEL_26;
    }
  }
  else
  {
    v55 = 0u;
    v56 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v55);
LABEL_26:
  v31 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v32 = (id)*MEMORY[0x1E0DC1248];
    v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
    if ((v34 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v33, (uint64_t)&v55);
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
    }

    if (*((_QWORD *)&v56 + 1))
    {
      outlined destroy of Any?((uint64_t)&v55);
      v35 = (void *)static NSAttributedStringKey.coreAXUnderline.getter();
      *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DEAFA0];
      LOBYTE(v55) = 1;
      specialized Dictionary.subscript.setter((uint64_t)&v55, v35);
      goto LABEL_34;
    }
  }
  else
  {
    v55 = 0u;
    v56 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v55);
LABEL_34:
  v36 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    v55 = 0u;
    v56 = 0u;
LABEL_42:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_43;
  }
  v37 = (id)*MEMORY[0x1E0DC1178];
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
  if ((v39 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v38, (uint64_t)&v55);
  }
  else
  {
    v55 = 0u;
    v56 = 0u;
  }

  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_42;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v40 = (void *)static NSAttributedStringKey.coreAXAlignment.getter();
    v41 = objc_msgSend(v54, sel_horizontalAlignment);
    *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v55 = v41;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v40);

  }
LABEL_43:
  v42 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    v55 = 0u;
    v56 = 0u;
LABEL_51:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_52;
  }
  v43 = (id)*MEMORY[0x1E0DC10F8];
  v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
  if ((v45 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v42 + 56) + 32 * v44, (uint64_t)&v55);
  }
  else
  {
    v55 = 0u;
    v56 = 0u;
  }

  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_51;
  v46 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v47 = (void *)static NSAttributedStringKey.coreAXAttachment.getter();
    *((_QWORD *)&v56 + 1) = v46;
    *(_QWORD *)&v55 = v54;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v47);
  }
LABEL_52:
  v48 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v49 = (id)*MEMORY[0x1E0DC1160];
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
    if ((v51 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v48 + 56) + 32 * v50, (uint64_t)&v55);
    }
    else
    {
      v55 = 0u;
      v56 = 0u;
    }

    if (*((_QWORD *)&v56 + 1))
    {
      outlined destroy of Any?((uint64_t)&v55);
      v52 = (void *)static NSAttributedStringKey.coreAXLink.getter();
      *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DEAFA0];
      LOBYTE(v55) = 1;
      return specialized Dictionary.subscript.setter((uint64_t)&v55, v52);
    }
  }
  else
  {
    v55 = 0u;
    v56 = 0u;
  }
  return outlined destroy of Any?((uint64_t)&v55);
}

uint64_t specialized SwiftUIAccessibilityTextResolver.resolveTextStyleAttributes(_:textStyle:environment:)(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;

  v3 = a2[36];
  if (v3 != 1)
  {
    v4 = *a3;
    v5 = a3[1];
    v6 = a2[32];
    v7 = a2[33];
    v8 = a2[34];
    v9 = a2[35];
    outlined copy of Text?(v7, v8, v9, v3);
    if (v6 != 8)
    {
      v10 = (void *)static NSAttributedStringKey.coreAXTextualContext.getter();
      LOBYTE(v19) = v6;
      AccessibilityTextContentType.platformValue.getter();
      if (v11)
      {
        v12 = v11;
        type metadata accessor for UIAccessibilityTextualContext(0);
        *((_QWORD *)&v20 + 1) = v13;
        *(_QWORD *)&v19 = v12;
      }
      else
      {
        v19 = 0u;
        v20 = 0u;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v19, v10);
    }
    if ((v6 & 0xFF00) != 0x700)
    {
      v14 = (void *)static NSAttributedStringKey.coreAXTextHeadingLevel.getter();
      *((_QWORD *)&v20 + 1) = MEMORY[0x1E0DEBB98];
      *(_QWORD *)&v19 = BYTE1(v6);
      specialized Dictionary.subscript.setter((uint64_t)&v19, v14);
    }
    if (v3)
    {
      outlined copy of Text?(v7, v8, v9, v3);
      v15 = (void *)static NSAttributedStringKey.coreAXLabel.getter();
      *(_QWORD *)&v19 = v4;
      *((_QWORD *)&v19 + 1) = v5;
      v16 = Text.resolveString(in:with:idiom:)();
      *((_QWORD *)&v20 + 1) = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v19 = v16;
      *((_QWORD *)&v19 + 1) = v17;
      specialized Dictionary.subscript.setter((uint64_t)&v19, v15);
      outlined consume of Text.Storage(v7, v8, v9 & 1);
      swift_bridgeObjectRelease();
    }
    if ((v6 & 0xFF0000) != 0x20000)
    {
      v18 = (void *)static NSAttributedStringKey.coreAXDurationTimeMMSS.getter();
      *((_QWORD *)&v20 + 1) = MEMORY[0x1E0DEAFA0];
      LOBYTE(v19) = BYTE2(v6) & 1;
      specialized Dictionary.subscript.setter((uint64_t)&v19, v18);
    }
    return outlined consume of AccessibilityTextAttributes?(v6, v7, v8, v9, v3);
  }
  return result;
}

uint64_t specialized SwiftUIAccessibilityTextResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v50 = a4;
  v49 = type metadata accessor for Locale();
  v46 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v7);
  v45 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v45 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v45 - v15;
  v17 = *a2;
  v18 = a2[1];
  v19 = *((_QWORD *)a2 + 1);
  v20 = a2[16];
  v21 = *a3;
  v47 = a3[1];
  v48 = v21;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI33AccessibilityAnnouncementPriorityO_s5NeverOytTB503_s7c43UI0A27UIAccessibilityTextResolverV36resolvee141SpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFyAA0G20fG6OXEfU_SDySo0wX3KeyaypGTf1cn_n(a2[17]);
  v22 = MEMORY[0x1E0DEAFA0];
  if (v17 != 2)
  {
    v23 = (void *)static NSAttributedStringKey.coreAXSpeechPunctuation.getter();
    *((_QWORD *)&v54 + 1) = v22;
    LOBYTE(v53) = v17 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v53, v23);
  }
  if (v18 != 2)
  {
    v24 = (void *)static NSAttributedStringKey.coreAXSpeechSpellOut.getter();
    *((_QWORD *)&v54 + 1) = v22;
    LOBYTE(v53) = v18 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v53, v24);
  }
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverOytTg5207_s7SwiftUI0A27UIAccessibilityTextResolverV36resolveAccessibilitySpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFySdXEfU2_SDySo0tU3KeyaypGTf1cn_n(v19, v20);
  v25 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v26 = (id)*MEMORY[0x1E0CB2CE0];
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    if ((v28 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v25 + 56) + 32 * v27, (uint64_t)&v51);
    }
    else
    {
      v51 = 0u;
      v52 = 0u;
    }

    if (*((_QWORD *)&v52 + 1))
    {
      outlined init with take of Any(&v51, &v53);
      v29 = (void *)static NSAttributedStringKey.coreAXSpeechLanguage.getter();
      outlined init with copy of Any((uint64_t)&v53, (uint64_t)&v51);
      specialized Dictionary.subscript.setter((uint64_t)&v51, v29);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    }
  }
  else
  {
    v51 = 0u;
    v52 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v51);
  v31 = static NSAttributedStringKey.coreAXSpeechLanguage.getter();
  v32 = (void *)v31;
  v33 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v35 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v33 + 56) + 32 * v34, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }

  v36 = *((_QWORD *)&v54 + 1);
  result = outlined destroy of Any?((uint64_t)&v53);
  if (!v36 && (v50 & 1) != 0)
  {
    *(_QWORD *)&v53 = v48;
    *((_QWORD *)&v53 + 1) = v47;
    EnvironmentValues.locale.getter();
    static Locale.current.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
    v37 = v49;
    v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v39 = *(void (**)(char *, uint64_t))(v46 + 8);
    v39(v12, v37);
    result = ((uint64_t (*)(char *, uint64_t))v39)(v16, v37);
    if ((v38 & 1) == 0)
    {
      *(_QWORD *)&v53 = v48;
      *((_QWORD *)&v53 + 1) = v47;
      v40 = v45;
      EnvironmentValues.locale.getter();
      v41 = Locale.bcp47LanguageCode.getter();
      v43 = v42;
      result = ((uint64_t (*)(char *, uint64_t))v39)(v40, v49);
      if (v43)
      {
        v44 = (void *)static NSAttributedStringKey.coreAXSpeechLanguage.getter();
        *((_QWORD *)&v54 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v53 = v41;
        *((_QWORD *)&v53 + 1) = v43;
        return specialized Dictionary.subscript.setter((uint64_t)&v53, v44);
      }
    }
  }
  return result;
}

uint64_t outlined consume of AccessibilityTextAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return outlined consume of Text?(a2, a3, a4, a5);
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIOpacityAccessibilityProvider()
{
  return &type metadata for SwiftUIOpacityAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUIGestureAccessibilityProvider()
{
  return &type metadata for SwiftUIGestureAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUILayoutAccessibilityProvider()
{
  return &type metadata for SwiftUILayoutAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUIPrivacyReductionAccessibilityProvider()
{
  return &type metadata for SwiftUIPrivacyReductionAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUIImageAccessibilityProvider()
{
  return &type metadata for SwiftUIImageAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUITextAccessibilityProvider()
{
  return &type metadata for SwiftUITextAccessibilityProvider;
}

unint64_t lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier;
  if (!lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIPrivacyReductionAccessibilityProvider.Modifier, &type metadata for SwiftUIPrivacyReductionAccessibilityProvider.Modifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SwiftUIPrivacyReductionAccessibilityProvider.Modifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ImageAccessibilityProvider.Body : View in SwiftUIImageAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TextAccessibilityProvider.Body : View in SwiftUITextAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined release of AccessibilityStaticTextModifier<StyledTextContentView>.Configuration(uint64_t a1)
{
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187611774()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 128) != 1)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of AccessibilityTextLayoutProperties?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of AccessibilityAttachmentModifier(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of AccessibilityAttachmentModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined retain of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined retain of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  v6 = v5;
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t specialized static SwiftUIGestureAccessibilityProvider.makeGesture(mask:inputs:outputs:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12[5];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a3 + 64);
  v13 = *(_DWORD *)(a3 + 80);
  v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    a1();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v9 = *a4;
    v10 = a4[1];
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, v12, v9, v10, 0);
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  return result;
}

uint64_t specialized static SwiftUIOpacityAccessibilityProvider.makeOpacity(effect:inputs:outputs:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12[5];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a3 + 64);
  v13 = *(_DWORD *)(a3 + 80);
  v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    a1();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v9 = *a4;
    v10 = a4[1];
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, v12, v9, v10, 0);
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SwiftUIPrivacyReductionAccessibilityProvider.Modifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187611DC0 + 4 * byte_187C44D71[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187611DF4 + 4 * asc_187C44D6C[v4]))();
}

uint64_t sub_187611DF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187611DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187611E04);
  return result;
}

uint64_t sub_187611E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187611E18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187611E1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187611E24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIPrivacyReductionAccessibilityProvider.Modifier()
{
  return &type metadata for SwiftUIPrivacyReductionAccessibilityProvider.Modifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, MEMORY[0x1E0CE5210], MEMORY[0x1E0CE5200]);
    v3[1] = &protocol witness table for AccessibilityLargeContentViewModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187611ECC()
{
  return lazy protocol witness table accessor for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>, MEMORY[0x1E0CE7280], MEMORY[0x1E0CE7270]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8[0] = a4;
    v8[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, MEMORY[0x1E0CE5318]);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>);
  }
}

void type metadata accessor for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>)
  {
    lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>);
  }
}

void SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[8];
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v47 = a8;
  v45 = a6;
  v46 = a7;
  v53 = a5;
  v50 = a4;
  v34 = a3;
  v49 = a1;
  v44 = a9;
  v43 = a21;
  v41 = a22;
  v42 = a18;
  v51 = a2;
  v52 = a16;
  v39 = a20;
  v40 = a15;
  swift_getTupleTypeMetadata2();
  v22 = type metadata accessor for Binding();
  v33[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1E0C80A78](v24, v25);
  v48 = (char *)v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v36 = *a10;
  if (a14)
  {
    v35 = a13 & 1;
    v38 = a11;
    v37 = a14;
  }
  else
  {
    v38 = static Text.System.search.getter();
    v37 = v29;
    v35 = v30 & 1;
  }
  v33[2] = a13;
  v33[5] = a14;
  v33[6] = a12;
  v54 = v49;
  v55 = v51;
  v56 = v34;
  v57 = v50;
  v33[7] = a11;
  outlined copy of Text?(a11, a12, a13, a14);
  v34 = type metadata accessor for Binding();
  Binding.zip<A>(with:)();
  v31 = v39;
  v32 = v41;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a17);
  v54 = a17;
  v55 = a19;
  v56 = v31;
  v57 = v32;
  type metadata accessor for StringTokensToAttributedStringProjection();
}

void sub_1876122D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StringTokensToAttributedStringProjection<A>, a1);
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 320) + 8))(v13, v10);
  v15 = outlined init with copy of Binding<AttributedString>(v9, *(_QWORD *)(v14 - 184));
  *(_QWORD *)(v14 - 320) = &a9;
  v16 = *(_DWORD *)(v14 - 280);
  *(_QWORD *)(v14 - 344) = v16;
  MEMORY[0x1E0C80A78](v15, v17);
  v18 = *(_QWORD *)(v14 - 232);
  *(_QWORD *)(v14 - 328) = v9;
  v19 = *(_QWORD *)(v14 - 224);
  outlined copy of Text.Storage(*(_QWORD *)(v14 - 264), v12, v16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v14 - 136) = MEMORY[0x1E0CE7C38];
  *(_QWORD *)(v14 - 128) = AssociatedTypeWitness;
  v21 = MEMORY[0x1E0CE7C28];
  *(_QWORD *)(v14 - 120) = v18;
  *(_QWORD *)(v14 - 112) = v21;
  *(_QWORD *)(v14 - 104) = v11;
  *(_QWORD *)(v14 - 96) = v19;
  type metadata accessor for TokenField();
}

uint64_t sub_187612414(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  SearchModifier.init(text:isPresented:prompt:placement:control:)(*(_QWORD *)(v6 - 184), *(_QWORD *)(v6 - 208), *(_QWORD *)(v6 - 200), *(_DWORD *)(v6 - 188), v5, v3, *(_QWORD *)(v6 - 344), v2, *(_QWORD *)(v6 - 216), *(_DWORD *)(v6 - 276), (uint64_t (*)(uint64_t))partial apply for closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:), v4, a1, v8);
  outlined consume of Text.Storage(v5, v3, v1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(*(_QWORD *)(v6 - 296), *(_QWORD *)(v6 - 304), *(_QWORD *)(v6 - 336), *(_QWORD *)(v6 - 312));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v6 - 288) - 8) + 8))(*(_QWORD *)(v6 - 144));
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v6 - 328), (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
}

void closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1E0C80A78](v0, v1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_1876125F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 - 184) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  outlined init with copy of Binding<AttributedString>(*(_QWORD *)(v6 - 192), v5);
  swift_retain();
  outlined copy of Text.Storage(v3, *(_QWORD *)(v6 - 168), v4 & 1);
  swift_bridgeObjectRetain();
  TokenField.init(valueType:text:prompt:token:label:)(v2, v5);
}

uint64_t sub_1876126F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 184) + 8);
  v5(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v3 - 144));
  return v5(v2, v1);
}

uint64_t SuggestedTokensView.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, _QWORD *);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, _QWORD, uint64_t, uint64_t);
  void (*v55)(char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[7];

  v72 = a3;
  v69 = *(a1 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  v64 = v5;
  v68 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 16);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 56);
  v65 = *(char **)(v11 + 40);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = a1[6];
  v60 = a1[3];
  v61 = v14;
  v16 = type metadata accessor for SearchCompletion(255, v60, v14, v15);
  v17 = a1[4];
  v67 = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v76[1] = v7;
  v76[2] = AssociatedTypeWitness;
  v66 = AssociatedTypeWitness;
  v71 = v16;
  v76[3] = v16;
  v76[4] = v17;
  v19 = v17;
  v76[5] = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach();
  v70 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v62 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v63 = (char *)&v57 - v25;
  v26 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v57 - v33;
  if ((SuggestedTokensView.shouldRenderTokens.getter((uint64_t)a1) & 1) != 0)
  {
    v35 = type metadata accessor for Binding();
    MEMORY[0x18D75B9C8](v35);
    v57 = v10;
    v36 = v69;
    v37 = *(void (**)(char *, uint64_t, _QWORD *))(v69 + 16);
    v58 = v34;
    v38 = v68;
    v37(v68, v3, a1);
    v39 = *(unsigned __int8 *)(v36 + 80);
    v59 = v27;
    v40 = (v39 + 64) & ~v39;
    v41 = (char *)swift_allocObject();
    v42 = v60;
    *((_QWORD *)v41 + 2) = v7;
    *((_QWORD *)v41 + 3) = v42;
    v43 = (uint64_t)v65;
    *((_QWORD *)v41 + 4) = v19;
    *((_QWORD *)v41 + 5) = v43;
    v65 = v30;
    v44 = v67;
    *((_QWORD *)v41 + 6) = v61;
    *((_QWORD *)v41 + 7) = v44;
    v45 = v38;
    v34 = v58;
    (*(void (**)(char *, char *, _QWORD *))(v36 + 32))(&v41[v40], v45, a1);
    v46 = v71;
    v47 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCompletion<A>, v71);
    v48 = v62;
    v49 = v46;
    ForEach<>.init(_:content:)();
    v73 = v47;
    v50 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v20, &v73);
    v51 = (uint64_t)v63;
    static ViewBuilder.buildExpression<A>(_:)(v48, v20, v50);
    v52 = v70;
    v53 = *(void (**)(char *, uint64_t))(v70 + 8);
    v53(v48, v20);
    v27 = v59;
    static ViewBuilder.buildBlock<A>(_:)(v51, v20, (uint64_t)v65);
    v53((char *)v51, v20);
    v54 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56);
    v30 = v65;
    v54(v65, 0, 1, v20);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v30, 1, 1, v20);
    v49 = v71;
    v76[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCompletion<A>, v71);
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v20, v76);
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v34, v30, v26);
  v55 = *(void (**)(char *, uint64_t))(v27 + 8);
  v55(v30, v26);
  v75 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCompletion<A>, v49);
  v74 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v20, &v75);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v26, &v74);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v34, v26, v72);
  return ((uint64_t (*)(char *, uint64_t))v55)(v34, v26);
}

uint64_t SuggestedTokensView.shouldRenderTokens.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;

  v3 = type metadata accessor for AttributedString();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v25 = v3;
    v17 = v1 + *(int *)(a1 + 76);
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v17, v19);
    v20 = specialized Environment.wrappedValue.getter(v18, v19);
    outlined consume of Environment<Bool>.Content(v18, v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v1, a1);
    if ((v20 & 1) != 0)
    {
      specialized Environment.wrappedValue.getter((uint64_t)v11);
      type metadata accessor for Binding<AttributedString>();
      v22 = v21;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v11, 1, v21) != 1)
      {
        MEMORY[0x18D75B9C8](v22);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
        v23 = AttributedString.isEmpty.getter();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v25);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a1);
        return v23 & 1;
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a1);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a1);
    }
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  return v23 & 1;
}

uint64_t closure #1 in SuggestedTokensView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[88];

  v37 = a8;
  v36 = a6;
  v38 = a5;
  v39 = a2;
  v35 = a1;
  v40 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)&v35 - v15;
  v18 = type metadata accessor for SearchCompletion(0, a4, a7, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v35 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v29 = v35;
  v28(v16, v35, AssociatedTypeWitness, v25);
  v30 = (uint64_t)v16;
  v31 = v37;
  AnyToken.init<A>(_:)(v30, AssociatedTypeWitness, (uint64_t)v49);
  v49[72] = 1;
  v41 = a3;
  v42 = a4;
  v43 = v38;
  v44 = v36;
  v45 = a7;
  v46 = v31;
  v47 = v39;
  v48 = v29;
  SearchCompletion.init(kind:label:)((uint64_t)v49, (void (*)(void))partial apply for closure #1 in closure #1 in SuggestedTokensView.body.getter, a4, a7, (uint64_t)v22);
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCompletion<A>, v18);
  static ViewBuilder.buildExpression<A>(_:)(v22, v18, v32);
  v33 = *(void (**)(char *, uint64_t))(v19 + 8);
  v33(v22, v18);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v27, v18, v40);
  return ((uint64_t (*)(char *, uint64_t))v33)(v27, v18);
}

void closure #1 in closure #1 in SuggestedTokensView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_1876130B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 68)))(v7);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v2);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v6, v1, v4);
  return v9(v6, v1);
}

void SuggestedTokensView.init(suggestedTokens:token:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_1876131B4(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v5 = (_QWORD *)(v1 + a1[17]);
  *v5 = v3;
  v5[1] = v2;
  v6 = (uint64_t *)(v1 + a1[18]);
  *v6 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v7 = v1 + a1[19];
  result = swift_getKeyPath();
  *(_QWORD *)v7 = result;
  *(_BYTE *)(v7 + 8) = 0;
  return result;
}

void View.searchable<A, B>(text:tokens:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  _QWORD v25[32];

  v25[16] = a7;
  v25[17] = a8;
  v25[6] = a6;
  v25[7] = a5;
  v25[12] = a2;
  v25[13] = a4;
  v25[18] = a3;
  v25[19] = a9;
  v25[23] = a1;
  v25[14] = a11;
  v25[15] = a10;
  v25[10] = a12;
  v25[11] = a13;
  v25[3] = a20;
  v25[24] = a17;
  v25[21] = a14;
  v25[22] = a18;
  v21 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v21, v22);
  v25[5] = (char *)v25 - v23;
  v25[2] = a15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25[25] = MEMORY[0x1E0CE7C38];
  v25[26] = AssociatedTypeWitness;
  v25[27] = a16;
  v25[28] = MEMORY[0x1E0CE7C28];
  v25[1] = a16;
  v25[29] = a21;
  v25[30] = a20;
  v25[0] = a21;
  type metadata accessor for TokenField();
}

void sub_187613370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v20 = type metadata accessor for SearchModifier(0, a1, v18, v19);
  *(_QWORD *)(v16 - 272) = v20;
  *(_QWORD *)(v16 - 264) = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v16 - 304) = (char *)&a9 - v23;
  v24 = **(_BYTE **)(v16 - 288);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v11, *(_QWORD *)(v16 - 280), v15, v22);
  *(_BYTE *)(v16 - 136) = v24;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = *(_QWORD *)(v16 - 168);
  v25[3] = v10;
  v26 = *(_QWORD *)(v16 - 144);
  v25[4] = v14;
  v25[5] = v26;
  v25[6] = *(_QWORD *)(v16 - 160);
  v25[7] = v12;
  v27 = v12;
  v28 = *(_QWORD *)(v16 - 312);
  v25[8] = v28;
  v25[9] = v9;
  v29 = *(_QWORD *)(v16 - 248);
  v25[10] = *(_QWORD *)(v16 - 256);
  v25[11] = v29;
  swift_retain();
  v30 = *(_QWORD *)(v16 - 240);
  swift_retain();
  v31 = *(_QWORD *)(v16 - 232);
  swift_bridgeObjectRetain();
  v32 = *(_QWORD *)(v16 - 208);
  v33 = *(_QWORD *)(v16 - 200);
  v34 = *(_QWORD *)(v16 - 224);
  v35 = *(_QWORD *)(v16 - 216);
  outlined copy of Text?(v32, v33, v35, v34);
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v16 - 152), v30, *(_QWORD *)(v16 - 192), v31, *(_QWORD *)(v16 - 296), 0, 0, 0, *(_QWORD *)(v16 - 304), (unsigned __int8 *)(v16 - 136), v32, v33, v35, v34, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v25, *(_QWORD *)(v16 - 320), *(_QWORD *)(v16 - 328), *(_QWORD *)(v16 - 160),
    v27,
    v28,
    *(_QWORD *)(v16 - 336));
}

uint64_t sub_187613508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 272);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v1 - 168), v2, *(_QWORD *)(v1 - 144));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 264) + 8))(v0, v2);
}

uint64_t sub_187613564()
{
  swift_release();
  return swift_deallocObject();
}

void View.searchable<A, B>(text:editableTokens:placement:prompt:token:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_1876136A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v18 = type metadata accessor for SearchModifier(0, a1, v16, v17);
  *(_QWORD *)(v14 - 280) = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&a9 - v21;
  v23 = **(_BYTE **)(v14 - 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v12 + 16))(v13, *(_QWORD *)(v14 - 248), v11, v20);
  *(_BYTE *)(v14 - 136) = v23;
  v24 = v9;
  swift_retain();
  v25 = *(_QWORD *)(v14 - 240);
  swift_retain();
  v26 = *(_QWORD *)(v14 - 224);
  swift_bridgeObjectRetain();
  v28 = *(_QWORD *)(v14 - 200);
  v27 = *(_QWORD *)(v14 - 192);
  v29 = *(_QWORD *)(v14 - 232);
  outlined copy of Text?(v28, v27, v29, v10);
  v30 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v24, v25, *(_QWORD *)(v14 - 168), v26, v13, 0, 0, 0, (uint64_t)v22, (unsigned __int8 *)(v14 - 136), v28, v27, v29, v10, *(_QWORD *)(v14 - 184), v30, *(_QWORD *)(v14 - 272), *(_QWORD *)(v14 - 288), *(_QWORD *)(v14 - 208),
    *(_QWORD *)(v14 - 264),
    *(_QWORD *)(v14 - 296),
    *(_QWORD *)(v14 - 304));
}

uint64_t sub_1876137E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v2 - 176), v0, *(_QWORD *)(v2 - 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 280) + 8))(v1, v0);
}

void View.searchable<A, B>(text:tokens:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  _QWORD v25[10];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v25[9] = a8;
  v28 = a7;
  v25[2] = a6;
  v25[4] = a5;
  v36 = a4;
  v34 = a3;
  v25[0] = a2;
  v25[1] = a1;
  v35 = a9;
  v30 = a17;
  v31 = a18;
  v29 = a14;
  v26 = a10;
  v32 = a12;
  v33 = a13;
  v25[7] = a11;
  v25[6] = a21;
  v25[5] = a20;
  v27 = a19;
  v25[8] = a15;
  v21 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v21, v22);
  v25[3] = (char *)v25 - v23;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = MEMORY[0x1E0CE7C38];
  v38 = AssociatedTypeWitness;
  v39 = a16;
  v40 = MEMORY[0x1E0CE7C28];
  v41 = a21;
  v42 = a20;
  type metadata accessor for TokenField();
}

void sub_18761398C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v17 = type metadata accessor for SearchModifier(0, a1, v15, v16);
  *(_QWORD *)(v13 - 248) = v17;
  *(_QWORD *)(v13 - 232) = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&a9 - v20;
  v22 = **(_BYTE **)(v13 - 320);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v12, *(_QWORD *)(v13 - 304), v11, v19);
  *(_BYTE *)(v13 - 136) = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v13 - 224) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v13 - 256) = v23;
  *(_QWORD *)(v13 - 264) = v24;
  *(_QWORD *)(v13 - 280) = v25 & 1;
  v26 = (_QWORD *)swift_allocObject();
  v27 = *(_QWORD *)(v13 - 208);
  v28 = *(_QWORD *)(v13 - 272);
  v26[2] = *(_QWORD *)(v13 - 216);
  v26[3] = v28;
  v29 = v10;
  v26[4] = v10;
  v26[5] = v27;
  v30 = *(_QWORD *)(v13 - 200);
  v31 = *(_QWORD *)(v13 - 240);
  v26[6] = v30;
  v26[7] = v31;
  v32 = *(_QWORD *)(v13 - 296);
  v33 = *(_QWORD *)(v13 - 288);
  v26[8] = v32;
  v26[9] = v33;
  v26[10] = *(_QWORD *)(v13 - 192);
  v26[11] = *(_QWORD *)(v13 - 184);
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v13 - 328), *(_QWORD *)(v13 - 336), *(_QWORD *)(v13 - 176), *(_QWORD *)(v13 - 152), *(_QWORD *)(v13 - 312), 0, 0, 0, (uint64_t)v21, (unsigned __int8 *)(v13 - 136), *(_QWORD *)(v13 - 224), *(_QWORD *)(v13 - 256), *(_QWORD *)(v13 - 280), *(_QWORD *)(v13 - 264), (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v26, v28, v29, v30,
    v31,
    v32,
    v33);
}

uint64_t sub_187613B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 - 248);
  MEMORY[0x18D75B4AC](v1, v2, v4, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 232) + 8))(v1, v4);
}

uint64_t partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:)(*(void (**)(char *))(v1 + 80), *(_QWORD *)(v1 + 32), a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

void sub_187613D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v17 = type metadata accessor for SearchModifier(0, a1, v15, v16);
  *(_QWORD *)(v13 - 264) = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&a9 - v20;
  v22 = **(_BYTE **)(v13 - 288);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v9, *(_QWORD *)(v13 - 280), v11, v19);
  *(_BYTE *)(v13 - 136) = v22;
  swift_retain();
  v23 = *(_QWORD *)(v13 - 256);
  swift_retain();
  v24 = *(_QWORD *)(v13 - 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = Text.init(_:tableName:bundle:comment:)();
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v13 - 312), v23, *(_QWORD *)(v13 - 184), v24, v9, 0, 0, 0, (uint64_t)v21, (unsigned __int8 *)(v13 - 136), v25, v27, v31, v29, *(_QWORD *)(v13 - 192), v32, v12, *(_QWORD *)(v13 - 272), *(_QWORD *)(v13 - 200),
    *(_QWORD *)(v13 - 240),
    *(_QWORD *)(v13 - 296),
    *(_QWORD *)(v13 - 304));
}

uint64_t sub_187613EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v2 - 176), v0, *(_QWORD *)(v2 - 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 8))(v1, v0);
}

void View.searchable<A, B, C>(text:tokens:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  _QWORD v24[32];

  v24[18] = a8;
  v24[12] = a7;
  v24[7] = a6;
  v24[8] = a5;
  v24[23] = a1;
  v24[24] = a4;
  v24[19] = a3;
  v24[20] = a9;
  v24[22] = a2;
  v24[17] = a10;
  v24[15] = a11;
  v24[13] = a19;
  v24[3] = a18;
  v24[5] = a20;
  v24[16] = a16;
  v24[10] = a17;
  v24[2] = a13;
  v24[14] = a15;
  v24[4] = *(_QWORD *)(a14 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v24[6] = a12;
  v20 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v20, v21);
  v24[1] = (char *)v24 - v22;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24[25] = MEMORY[0x1E0CE7C38];
  v24[26] = AssociatedTypeWitness;
  v24[27] = a13;
  v24[28] = MEMORY[0x1E0CE7C28];
  v24[29] = a20;
  v24[30] = a18;
  type metadata accessor for TokenField();
}

void sub_187614068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v18 = type metadata accessor for SearchModifier(0, a1, v16, v17);
  *(_QWORD *)(v14 - 264) = v18;
  *(_QWORD *)(v14 - 248) = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&a9 - v21;
  v23 = **(_BYTE **)(v14 - 280);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v13, *(_QWORD *)(v14 - 272), v9, v20);
  *(_BYTE *)(v14 - 136) = v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 304) + 16))(v10, *(_QWORD *)(v14 - 240), v12);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = *(_QWORD *)(v14 - 232);
  *(_QWORD *)(v14 - 240) = Text.init<A>(_:)();
  *(_QWORD *)(v14 - 272) = v25;
  *(_QWORD *)(v14 - 280) = v26;
  *(_QWORD *)(v14 - 304) = v27 & 1;
  v28 = (_QWORD *)swift_allocObject();
  v29 = *(_QWORD *)(v14 - 208);
  v30 = *(_QWORD *)(v14 - 288);
  v28[2] = *(_QWORD *)(v14 - 216);
  v28[3] = v30;
  v31 = *(_QWORD *)(v14 - 320);
  v28[4] = v31;
  v28[5] = v12;
  v28[6] = *(_QWORD *)(v14 - 224);
  v28[7] = v29;
  v32 = *(_QWORD *)(v14 - 256);
  v33 = *(_QWORD *)(v14 - 312);
  v28[8] = v32;
  v28[9] = v33;
  v28[10] = v24;
  v34 = *(_QWORD *)(v14 - 296);
  v35 = *(_QWORD *)(v14 - 192);
  v28[11] = v34;
  v28[12] = v35;
  v28[13] = *(_QWORD *)(v14 - 200);
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v14 - 152), *(_QWORD *)(v14 - 160), *(_QWORD *)(v14 - 184), *(_QWORD *)(v14 - 144), *(_QWORD *)(v14 - 328), 0, 0, 0, (uint64_t)v22, (unsigned __int8 *)(v14 - 136), *(_QWORD *)(v14 - 240), *(_QWORD *)(v14 - 272), *(_QWORD *)(v14 - 304), *(_QWORD *)(v14 - 280), (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:), (uint64_t)v28, v30, v31, v29,
    v32,
    v33,
    v34);
}

uint64_t sub_187614230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 - 264);
  MEMORY[0x18D75B4AC](v1, v0, v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v1, v4);
}

void View.searchable<A, B, C>(text:editableTokens:placement:prompt:token:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  v2 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v2, v3);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_1876143D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v18 = type metadata accessor for SearchModifier(0, a1, v16, v17);
  *(_QWORD *)(v14 - 288) = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&a9 - v21;
  v23 = **(_BYTE **)(v14 - 264);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v9, *(_QWORD *)(v14 - 248), v11, v20);
  *(_BYTE *)(v14 - 136) = v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 280) + 16))(v10, *(_QWORD *)(v14 - 232), v12);
  v24 = *(_QWORD *)(v14 - 240);
  swift_retain();
  v25 = *(_QWORD *)(v14 - 224);
  swift_retain();
  v26 = *(_QWORD *)(v14 - 208);
  swift_bridgeObjectRetain();
  v27 = Text.init<A>(_:)();
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v24, v25, *(_QWORD *)(v14 - 176), v26, v9, 0, 0, 0, (uint64_t)v22, (unsigned __int8 *)(v14 - 136), v27, v29, v33, v31, *(_QWORD *)(v14 - 184), v34, *(_QWORD *)(v14 - 272), *(_QWORD *)(v14 - 296), *(_QWORD *)(v14 - 192),
    *(_QWORD *)(v14 - 256),
    *(_QWORD *)(v14 - 304),
    *(_QWORD *)(v14 - 312));
}

uint64_t sub_18761453C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v2 - 152), v1, *(_QWORD *)(v2 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v0, v1);
}

void View.searchable<A, B>(text:tokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  _QWORD v28[22];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v29 = a8;
  v28[19] = a6;
  v28[20] = a7;
  v28[8] = a5;
  v28[21] = a3;
  v34 = a1;
  v30 = a9;
  v28[17] = a12;
  v28[18] = a4;
  v28[16] = a13;
  v28[14] = a2;
  v28[15] = a14;
  v28[12] = a15;
  v32 = a20;
  v33 = a21;
  v28[11] = a16;
  v31 = a17;
  v28[13] = a11;
  v28[5] = a10;
  v24 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v24, v25);
  v28[6] = (char *)v28 - v26;
  v28[2] = a22;
  v28[4] = a18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = MEMORY[0x1E0CE7C38];
  v36 = AssociatedTypeWitness;
  v37 = a19;
  v38 = MEMORY[0x1E0CE7C28];
  v28[3] = a19;
  v39 = a24;
  v40 = a23;
  v28[0] = a24;
  v28[1] = a23;
  type metadata accessor for TokenField();
}

void sub_1876146F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v21 = type metadata accessor for SearchModifier(0, a1, v19, v20);
  *(_QWORD *)(v17 - 296) = v21;
  *(_QWORD *)(v17 - 288) = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v17 - 312) = (char *)&a9 - v24;
  v25 = **(_BYTE **)(v17 - 328);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v14 + 16))(v13, *(_QWORD *)(v17 - 304), v10, v23);
  *(_BYTE *)(v17 - 136) = v25;
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = *(_QWORD *)(v17 - 168);
  v26[3] = v12;
  v27 = *(_QWORD *)(v17 - 160);
  v26[4] = v16;
  v26[5] = v27;
  v26[6] = *(_QWORD *)(v17 - 152);
  v26[7] = v9;
  v26[8] = v15;
  v26[9] = v11;
  v28 = *(_QWORD *)(v17 - 280);
  v26[10] = *(_QWORD *)(v17 - 272);
  v26[11] = v28;
  swift_retain();
  v29 = *(_QWORD *)(v17 - 256);
  swift_retain();
  v30 = *(_QWORD *)(v17 - 224);
  swift_bridgeObjectRetain();
  v31 = *(_QWORD *)(v17 - 264);
  v33 = *(_QWORD *)(v17 - 240);
  v32 = *(_QWORD *)(v17 - 232);
  v34 = *(_QWORD *)(v17 - 248);
  outlined copy of Text?(v31, v32, v33, v34);
  v35 = *(_QWORD *)(v17 - 216);
  swift_retain();
  v36 = *(_QWORD *)(v17 - 208);
  swift_retain();
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v17 - 144), v29, *(_QWORD *)(v17 - 200), v30, *(_QWORD *)(v17 - 320), v35, v36, *(_DWORD *)(v17 - 188) & 1, *(_QWORD *)(v17 - 312), (unsigned __int8 *)(v17 - 136), v31, v32, v33, v34, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v26, *(_QWORD *)(v17 - 336), *(_QWORD *)(v17 - 344), *(_QWORD *)(v17 - 152),
    *(_QWORD *)(v17 - 352),
    *(_QWORD *)(v17 - 360),
    *(_QWORD *)(v17 - 368));
}

uint64_t sub_1876148C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 296);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v1 - 168), v2, *(_QWORD *)(v1 - 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 288) + 8))(v0, v2);
}

void View.searchable<A, B>(text:editableTokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  _QWORD v28[22];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v29 = a8;
  v28[17] = a6;
  v28[18] = a7;
  v28[9] = a5;
  v28[14] = a2;
  v28[15] = a4;
  v28[21] = a3;
  v28[1] = a1;
  v31 = a9;
  v32 = a20;
  v30 = a17;
  v28[16] = a16;
  v28[12] = a13;
  v28[13] = a12;
  v28[19] = a21;
  v28[20] = a15;
  v28[11] = a14;
  v28[5] = a10;
  v28[3] = a24;
  v28[4] = a23;
  v28[10] = a22;
  v28[6] = a19;
  v28[8] = a18;
  v24 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v24, v25);
  v28[2] = (char *)v28 - v26;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = MEMORY[0x1E0CE7C38];
  v34 = AssociatedTypeWitness;
  v35 = a19;
  v36 = MEMORY[0x1E0CE7C28];
  v37 = a24;
  v38 = a23;
  type metadata accessor for TokenField();
}

void sub_187614A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v17 = type metadata accessor for SearchModifier(0, a1, v15, v16);
  *(_QWORD *)(v13 - 296) = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&a9 - v20;
  v22 = **(_BYTE **)(v13 - 312);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v9, *(_QWORD *)(v13 - 280), v11, v19);
  *(_BYTE *)(v13 - 136) = v22;
  swift_retain();
  v23 = *(_QWORD *)(v13 - 240);
  swift_retain();
  v24 = *(_QWORD *)(v13 - 232);
  swift_bridgeObjectRetain();
  v25 = *(_QWORD *)(v13 - 256);
  v26 = *(_QWORD *)(v13 - 248);
  v27 = *(_QWORD *)(v13 - 264);
  outlined copy of Text?(v12, v26, v25, v27);
  v28 = *(_QWORD *)(v13 - 216);
  swift_retain();
  v29 = *(_QWORD *)(v13 - 208);
  swift_retain();
  v30 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v13 - 344), v23, *(_QWORD *)(v13 - 184), v24, *(_QWORD *)(v13 - 336), v28, v29, *(_DWORD *)(v13 - 172) & 1, (uint64_t)v21, (unsigned __int8 *)(v13 - 136), v12, v26, v25, v27, *(_QWORD *)(v13 - 192), v30, *(_QWORD *)(v13 - 288), *(_QWORD *)(v13 - 304), *(_QWORD *)(v13 - 200),
    *(_QWORD *)(v13 - 272),
    *(_QWORD *)(v13 - 320),
    *(_QWORD *)(v13 - 328));
}

uint64_t sub_187614BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v2 - 168), v0, *(_QWORD *)(v2 - 152));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 296) + 8))(v1, v0);
}

void View.searchable<A, B>(text:tokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  _QWORD v28[12];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v37 = a8;
  v34 = a6;
  v35 = a7;
  v28[4] = a5;
  v39 = a4;
  v36 = a3;
  v28[2] = a2;
  v28[3] = a1;
  v38 = a9;
  v32 = a21;
  v33 = a16;
  v40 = a17;
  v41 = a20;
  v29 = a13;
  v31 = a15;
  v28[10] = a14;
  v28[6] = a12;
  v28[11] = a11;
  v28[1] = a10;
  v28[7] = a24;
  v30 = a22;
  v28[5] = a19;
  v24 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v24, v25);
  v28[8] = (char *)v28 - v26;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = MEMORY[0x1E0CE7C38];
  v43 = AssociatedTypeWitness;
  v44 = a19;
  v45 = MEMORY[0x1E0CE7C28];
  v46 = a24;
  v47 = a23;
  type metadata accessor for TokenField();
}

void sub_187614DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v18 = type metadata accessor for SearchModifier(0, a1, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v14 - 256) = v18;
  *(_QWORD *)(v14 - 248) = v19;
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  *(_QWORD *)(v14 - 296) = (char *)&a9 - v22;
  v23 = **(_BYTE **)(v14 - 360);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v12, *(_QWORD *)(v14 - 336), v11, v21);
  *(_BYTE *)(v14 - 136) = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v14 - 272) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v14 - 280) = v24;
  *(_QWORD *)(v14 - 288) = v25;
  *(_QWORD *)(v14 - 320) = v26 & 1;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = *(_QWORD *)(v14 - 160);
  v27[3] = v13;
  v28 = v13;
  v29 = *(_QWORD *)(v14 - 328);
  v30 = *(_QWORD *)(v14 - 152);
  v27[4] = v29;
  v27[5] = v30;
  v32 = *(_QWORD *)(v14 - 232);
  v31 = *(_QWORD *)(v14 - 224);
  v33 = *(_QWORD *)(v14 - 264);
  v27[6] = v32;
  v27[7] = v33;
  v34 = v9;
  v27[8] = v9;
  v35 = *(_QWORD *)(v14 - 312);
  v36 = *(_QWORD *)(v14 - 240);
  v27[9] = v35;
  v27[10] = v36;
  v27[11] = v31;
  v37 = *(_QWORD *)(v14 - 216);
  swift_retain();
  v38 = *(_QWORD *)(v14 - 208);
  swift_retain();
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v14 - 344), *(_QWORD *)(v14 - 352), *(_QWORD *)(v14 - 200), *(_QWORD *)(v14 - 168), *(_QWORD *)(v14 - 304), v37, v38, *(_DWORD *)(v14 - 188) & 1, *(_QWORD *)(v14 - 296), (unsigned __int8 *)(v14 - 136), *(_QWORD *)(v14 - 272), *(_QWORD *)(v14 - 280), *(_QWORD *)(v14 - 320), *(_QWORD *)(v14 - 288), (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v27, v28, v29, v32,
    v33,
    v34,
    v35);
}

uint64_t sub_187614FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 256);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v1 - 160), v2, *(_QWORD *)(v1 - 152));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 248) + 8))(v0, v2);
}

void View.searchable<A, B>(text:editableTokens:isPresented:placement:prompt:token:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_18761519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v16 = type metadata accessor for SearchModifier(0, a1, v14, v15);
  *(_QWORD *)(v12 - 272) = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&a9 - v19;
  v21 = **(_BYTE **)(v12 - 336);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v10, *(_QWORD *)(v12 - 312), v11, v18);
  *(_BYTE *)(v12 - 136) = v21;
  swift_retain();
  v22 = *(_QWORD *)(v12 - 288);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = Text.init(_:tableName:bundle:comment:)();
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = *(_QWORD *)(v12 - 224);
  swift_retain();
  v31 = *(_QWORD *)(v12 - 216);
  swift_retain();
  v32 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v12 - 344), v22, *(_QWORD *)(v12 - 192), *(_QWORD *)(v12 - 352), v10, v30, v31, *(_DWORD *)(v12 - 180) & 1, (uint64_t)v20, (unsigned __int8 *)(v12 - 136), v23, v25, v29, v27, *(_QWORD *)(v12 - 200), v32, *(_QWORD *)(v12 - 256), *(_QWORD *)(v12 - 296), *(_QWORD *)(v12 - 208),
    *(_QWORD *)(v12 - 240),
    *(_QWORD *)(v12 - 320),
    *(_QWORD *)(v12 - 328));
}

uint64_t sub_187615350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v2 - 176), v0, *(_QWORD *)(v2 - 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v1, v0);
}

void View.searchable<A, B, C>(text:tokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v43 = a8;
  v40 = a6;
  v41 = a7;
  v34 = a5;
  v45 = a4;
  v42 = a3;
  v47 = a1;
  v48 = a2;
  v44 = a9;
  v38 = a12;
  v39 = a13;
  v37 = a19;
  v49 = a18;
  v33 = a11;
  v30 = a10;
  v36 = a22;
  v31 = a23;
  v28 = a21;
  v35 = a20;
  v46 = a14;
  v29 = a16;
  MEMORY[0x1E0C80A78](a1, a2);
  v23 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v23, v24);
  v32 = (char *)&v27 - v25;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = MEMORY[0x1E0CE7C38];
  v51 = AssociatedTypeWitness;
  v52 = a16;
  v53 = MEMORY[0x1E0CE7C28];
  v54 = a23;
  v55 = v28;
  type metadata accessor for TokenField();
}

void sub_187615524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v21 = type metadata accessor for SearchModifier(0, a1, v19, v20);
  *(_QWORD *)(v17 - 272) = v21;
  *(_QWORD *)(v17 - 256) = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v17 - 304) = (char *)&a9 - v24;
  v25 = **(_BYTE **)(v17 - 328);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v13, *(_QWORD *)(v17 - 288), v15, v23);
  *(_BYTE *)(v17 - 136) = v25;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v16, *(_QWORD *)(v17 - 296), v11);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v26 = *(_QWORD *)(v17 - 264);
  *(_QWORD *)(v17 - 288) = Text.init<A>(_:)();
  *(_QWORD *)(v17 - 296) = v27;
  *(_QWORD *)(v17 - 328) = v28;
  *(_QWORD *)(v17 - 352) = v29 & 1;
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = *(_QWORD *)(v17 - 168);
  v30[3] = v12;
  v31 = *(_QWORD *)(v17 - 336);
  v30[4] = v31;
  v30[5] = v11;
  v32 = *(_QWORD *)(v17 - 248);
  v30[6] = *(_QWORD *)(v17 - 144);
  v30[7] = v32;
  v33 = *(_QWORD *)(v17 - 280);
  v30[8] = v33;
  v30[9] = v14;
  v34 = v14;
  v30[10] = v26;
  v35 = *(_QWORD *)(v17 - 320);
  v36 = *(_QWORD *)(v17 - 240);
  v37 = *(_QWORD *)(v17 - 232);
  v30[11] = v35;
  v30[12] = v36;
  v30[13] = v37;
  v38 = *(_QWORD *)(v17 - 224);
  swift_retain();
  v39 = *(_QWORD *)(v17 - 216);
  swift_retain();
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v17 - 160), *(_QWORD *)(v17 - 152), *(_QWORD *)(v17 - 208), *(_QWORD *)(v17 - 176), *(_QWORD *)(v17 - 312), v38, v39, *(_DWORD *)(v17 - 196) & 1, *(_QWORD *)(v17 - 304), (unsigned __int8 *)(v17 - 136), *(_QWORD *)(v17 - 288), *(_QWORD *)(v17 - 296), *(_QWORD *)(v17 - 352), *(_QWORD *)(v17 - 328), (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:), (uint64_t)v30, v12, v31, v32,
    v33,
    v34,
    v35);
}

uint64_t sub_187615720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 272);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v1 - 168), v2, *(_QWORD *)(v1 - 144));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 256) + 8))(v0, v2);
}

uint64_t closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v24)(char *);
  uint64_t v25;

  v24 = a1;
  v25 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - v19;
  v21 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v21);
  v24(v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v16, a2, a6);
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v16, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, a2, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, a2);
}

uint64_t sub_1876158E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:)(*(void (**)(char *))(v1 + 96), *(_QWORD *)(v1 + 32), a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

void View.searchable<A, B, C>(text:editableTokens:isPresented:placement:prompt:token:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  v2 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v2, v3);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_187615ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v18 = type metadata accessor for SearchModifier(0, a1, v16, v17);
  *(_QWORD *)(v14 - 296) = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&a9 - v21;
  v23 = **(_BYTE **)(v14 - 320);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v12, *(_QWORD *)(v14 - 272), v13, v20);
  *(_BYTE *)(v14 - 136) = v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 312) + 16))(v9, *(_QWORD *)(v14 - 288), v11);
  swift_retain();
  swift_retain();
  v24 = *(_QWORD *)(v14 - 248);
  swift_bridgeObjectRetain();
  v25 = Text.init<A>(_:)();
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = *(_QWORD *)(v14 - 232);
  swift_retain();
  v33 = *(_QWORD *)(v14 - 224);
  swift_retain();
  v34 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v14 - 152), *(_QWORD *)(v14 - 144), *(_QWORD *)(v14 - 192), v24, v12, v32, v33, *(_DWORD *)(v14 - 180) & 1, (uint64_t)v22, (unsigned __int8 *)(v14 - 136), v25, v27, v31, v29, *(_QWORD *)(v14 - 208), v34, *(_QWORD *)(v14 - 280), *(_QWORD *)(v14 - 304), *(_QWORD *)(v14 - 216),
    *(_QWORD *)(v14 - 264),
    *(_QWORD *)(v14 - 328),
    *(_QWORD *)(v14 - 336));
}

uint64_t sub_187615C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v2 - 200), v0, *(_QWORD *)(v2 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 296) + 8))(v1, v0);
}

void View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  _QWORD v27[55];

  v27[18] = a8;
  v27[10] = a7;
  v27[22] = a6;
  v27[11] = a5;
  v27[28] = a4;
  v27[20] = a3;
  v27[29] = a2;
  v27[30] = a1;
  v27[23] = a9;
  v27[17] = a10;
  v27[16] = a11;
  v27[15] = a12;
  v27[31] = a13;
  v27[26] = a21;
  v27[13] = a20;
  v27[27] = a14;
  v27[25] = a15;
  v27[24] = a22;
  v27[4] = a18;
  v23 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v23, v24);
  v27[5] = (char *)v27 - v25;
  v27[6] = a19;
  v27[2] = a16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27[49] = MEMORY[0x1E0CE7C38];
  v27[50] = AssociatedTypeWitness;
  v27[51] = a17;
  v27[52] = MEMORY[0x1E0CE7C28];
  v27[1] = a17;
  v27[53] = a23;
  v27[54] = a22;
  type metadata accessor for TokenField();
}

void sub_187615E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v21 = type metadata accessor for SearchModifier(0, a1, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v17 - 456) = v21;
  *(_QWORD *)(v17 - 432) = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  *(_QWORD *)(v17 - 464) = (char *)&a9 - v24;
  v25 = *(_QWORD *)(v17 - 328);
  v26 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v17 - 416) = v26;
  *(_QWORD *)(v17 - 376) = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  *(_QWORD *)(v17 - 472) = (char *)&a9 - v29;
  v30 = **(_BYTE **)(v17 - 448);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v14, *(_QWORD *)(v17 - 440), v16, v28);
  *(_BYTE *)(v17 - 136) = v30;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = v25;
  v31[3] = v13;
  v31[4] = v11;
  v31[5] = v12;
  v32 = *(_QWORD *)(v17 - 424);
  v31[6] = v15;
  v31[7] = v32;
  v33 = *(_QWORD *)(v17 - 320);
  v34 = *(_QWORD *)(v17 - 336);
  v31[8] = v33;
  v31[9] = v34;
  v35 = v10;
  *(_QWORD *)(v17 - 504) = v10;
  v36 = *(_QWORD *)(v17 - 280);
  v31[10] = v10;
  v31[11] = v36;
  v31[12] = *(_QWORD *)(v17 - 312);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v37 = *(_QWORD *)(v17 - 384);
  v38 = *(_QWORD *)(v17 - 392);
  v39 = *(_QWORD *)(v17 - 400);
  v40 = *(_QWORD *)(v17 - 408);
  outlined copy of Text?(v37, v38, v39, v40);
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v17 - 288), *(_QWORD *)(v17 - 296), *(_QWORD *)(v17 - 368), *(_QWORD *)(v17 - 304), *(_QWORD *)(v17 - 488), 0, 0, 0, *(_QWORD *)(v17 - 464), (unsigned __int8 *)(v17 - 136), v37, v38, v39, v40, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v31, *(_QWORD *)(v17 - 512), *(_QWORD *)(v17 - 520), v32,
    v33,
    v34,
    v35);
}

void sub_187616054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 - 328);
  v6 = *(_QWORD *)(v4 - 456);
  v7 = *(_QWORD *)(v4 - 496);
  MEMORY[0x18D75B4AC](v2, v5, v6, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 432) + 8))(v2, v6);
  *(_QWORD *)(v4 - 256) = v5;
  *(_QWORD *)(v4 - 248) = v0;
  *(_QWORD *)(v4 - 240) = v1;
  *(_QWORD *)(v4 - 232) = v7;
  *(_QWORD *)(v4 - 224) = *(_QWORD *)(v4 - 480);
  *(_QWORD *)(v4 - 216) = v3;
  v8 = *(_QWORD *)(v4 - 320);
  v9 = *(_QWORD *)(v4 - 336);
  *(_QWORD *)(v4 - 208) = v8;
  *(_QWORD *)(v4 - 200) = v9;
  v10 = *(_QWORD *)(v4 - 504);
  v11 = *(_QWORD *)(v4 - 352);
  *(_QWORD *)(v4 - 192) = v10;
  *(_QWORD *)(v4 - 184) = v11;
  v12 = *(_QWORD *)(v4 - 312);
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v4 - 280);
  *(_QWORD *)(v4 - 168) = v12;
  *(_QWORD *)(v4 - 136) = v0;
  *(_QWORD *)(v4 - 128) = v1;
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v8;
  *(_QWORD *)(v4 - 104) = v9;
  *(_QWORD *)(v4 - 96) = v10;
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187616118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v1);
  *(_QWORD *)(v4 - 152) = v3;
  *(_QWORD *)(v4 - 144) = v6;
  v7 = *(_QWORD *)(v4 - 416);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v4 - 152);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), v4 - 272, v7, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 376) + 8))(v2, v7);
}

uint64_t sub_1876161C4()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for SuggestedTokensView()
{
  JUMPOUT(0x18D75FF28);
}

void View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  _QWORD v27[14];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v30 = a8;
  v27[7] = a7;
  v34 = a6;
  v27[8] = a5;
  v38 = a4;
  v33 = a3;
  v37 = a2;
  v27[3] = a1;
  v35 = a9;
  v40 = a21;
  v32 = a20;
  v28 = a11;
  v41 = a13;
  v27[12] = a12;
  v27[10] = a10;
  v39 = a14;
  v36 = a23;
  v31 = a18;
  v29 = a19;
  v27[9] = a17;
  v27[13] = a16;
  v23 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v23, v24);
  v27[4] = (char *)v27 - v25;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = MEMORY[0x1E0CE7C38];
  v43 = AssociatedTypeWitness;
  v44 = a17;
  v45 = MEMORY[0x1E0CE7C28];
  v46 = a23;
  v47 = a22;
  type metadata accessor for TokenField();
}

void sub_187616394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v18 = type metadata accessor for SearchModifier(0, a1, v16, v17);
  *(_QWORD *)(v14 - 400) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v14 - 440) = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v14 - 480) = (char *)&a9 - v20;
  *(_QWORD *)(v14 - 520) = v12;
  v21 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 368) = v21;
  *(_QWORD *)(v14 - 360) = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v14 - 488) = (char *)&a9 - v24;
  v25 = **(_BYTE **)(v14 - 472);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v13, *(_QWORD *)(v14 - 464), v10, v23);
  *(_BYTE *)(v14 - 136) = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v14 - 392) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v14 - 416) = v26;
  v28 = v27;
  *(_QWORD *)(v14 - 432) = v29 & 1;
  v30 = (_QWORD *)swift_allocObject();
  v31 = *(_QWORD *)(v14 - 424);
  v30[2] = v12;
  v30[3] = v31;
  v32 = *(_QWORD *)(v14 - 456);
  v33 = *(_QWORD *)(v14 - 384);
  v30[4] = v32;
  v30[5] = v33;
  v34 = *(_QWORD *)(v14 - 376);
  v30[6] = *(_QWORD *)(v14 - 408);
  v30[7] = v34;
  v35 = *(_QWORD *)(v14 - 288);
  v30[8] = v35;
  v30[9] = v11;
  *(_QWORD *)(v14 - 512) = v11;
  v36 = *(_QWORD *)(v14 - 320);
  v37 = *(_QWORD *)(v14 - 280);
  v30[10] = v36;
  v30[11] = v37;
  v30[12] = *(_QWORD *)(v14 - 296);
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v14 - 504), *(_QWORD *)(v14 - 312), *(_QWORD *)(v14 - 352), *(_QWORD *)(v14 - 304), *(_QWORD *)(v14 - 496), 0, 0, 0, *(_QWORD *)(v14 - 480), (unsigned __int8 *)(v14 - 136), *(_QWORD *)(v14 - 392), *(_QWORD *)(v14 - 416), *(_QWORD *)(v14 - 432), v28, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v30, v31, v32, v34,
    v35,
    v11,
    v36);
}

void sub_187616630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(v6 - 520);
  v8 = *(_QWORD *)(v6 - 440);
  MEMORY[0x18D75B4AC](v3, v7, v8, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 400) + 8))(v3, v8);
  *(_QWORD *)(v6 - 256) = v7;
  *(_QWORD *)(v6 - 248) = v4;
  *(_QWORD *)(v6 - 240) = v5;
  *(_QWORD *)(v6 - 232) = v2;
  *(_QWORD *)(v6 - 224) = v1;
  *(_QWORD *)(v6 - 216) = v0;
  v9 = *(_QWORD *)(v6 - 288);
  v10 = *(_QWORD *)(v6 - 512);
  *(_QWORD *)(v6 - 208) = v9;
  *(_QWORD *)(v6 - 200) = v10;
  v11 = *(_QWORD *)(v6 - 320);
  v12 = *(_QWORD *)(v6 - 336);
  *(_QWORD *)(v6 - 192) = v11;
  *(_QWORD *)(v6 - 184) = v12;
  v13 = *(_QWORD *)(v6 - 296);
  *(_QWORD *)(v6 - 176) = *(_QWORD *)(v6 - 280);
  *(_QWORD *)(v6 - 168) = v13;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v0;
  *(_QWORD *)(v6 - 112) = v9;
  *(_QWORD *)(v6 - 104) = v10;
  *(_QWORD *)(v6 - 96) = v11;
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_1876166E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  *(_QWORD *)(v4 - 160) = v1;
  *(_QWORD *)(v4 - 152) = v6;
  v7 = *(_QWORD *)(v4 - 368);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v4 - 160);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), v4 - 272, v7, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 360) + 8))(v3, v7);
}

uint64_t closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v24)(char *);
  uint64_t v25;

  v24 = a1;
  v25 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - v19;
  v21 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v21);
  v24(v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v16, a2, a6);
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v16, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, a2, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, a2);
}

uint64_t partial apply for closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)(*(void (**)(char *))(v1 + 88), *(_QWORD *)(v1 + 32), a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

void closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for SuggestedTokensView();
}

void sub_1876169C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v11, *(_QWORD *)(v12 - 160), v9, v17);
  SuggestedTokensView.init(suggestedTokens:token:)(v11, (uint64_t)v14);
}

uint64_t sub_187616A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  swift_retain();
  v6(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, *(_QWORD *)(v4 - 136));
  return v6(v0, v1);
}

void partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)()
{
  closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)();
}

void View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  _QWORD v26[55];

  v26[12] = a8;
  v26[8] = a7;
  v26[19] = a6;
  v26[9] = a5;
  v26[26] = a4;
  v26[17] = a3;
  v26[25] = a2;
  v26[24] = a1;
  v26[20] = a9;
  v26[29] = a11;
  v26[15] = a10;
  v26[28] = a19;
  v26[27] = a18;
  v26[23] = a21;
  v26[21] = a22;
  v26[13] = a16;
  v26[10] = a17;
  v26[5] = a14;
  v26[22] = a15;
  v26[6] = *(_QWORD *)(a15 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v22 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v22, v23);
  v26[2] = (char *)v26 - v24;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26[49] = MEMORY[0x1E0CE7C38];
  v26[50] = AssociatedTypeWitness;
  v26[51] = a14;
  v26[52] = MEMORY[0x1E0CE7C28];
  v26[53] = a22;
  v26[54] = a20;
  type metadata accessor for TokenField();
}

void sub_187616CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v20 = type metadata accessor for SearchModifier(0, a1, v18, v19);
  *(_QWORD *)(v16 - 440) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v16 - 472) = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v16 - 496) = (char *)&a9 - v22;
  v23 = v9;
  *(_QWORD *)(v16 - 520) = v9;
  v24 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v16 - 416) = v24;
  *(_QWORD *)(v16 - 400) = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  *(_QWORD *)(v16 - 504) = (char *)&a9 - v27;
  v28 = **(_BYTE **)(v16 - 464);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v15 + 16))(v11, *(_QWORD *)(v16 - 456), v10, v26);
  *(_BYTE *)(v16 - 136) = v28;
  v29 = *(_QWORD *)(v16 - 352);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 480) + 16))(v13, *(_QWORD *)(v16 - 432), v29);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = *(_QWORD *)(v16 - 344);
  *(_QWORD *)(v16 - 432) = Text.init<A>(_:)();
  *(_QWORD *)(v16 - 456) = v31;
  *(_QWORD *)(v16 - 464) = v32;
  *(_QWORD *)(v16 - 480) = v33 & 1;
  v34 = (_QWORD *)swift_allocObject();
  v34[2] = v23;
  v34[3] = v12;
  v35 = *(_QWORD *)(v16 - 488);
  v34[4] = v35;
  v34[5] = v29;
  v36 = *(_QWORD *)(v16 - 448);
  v34[6] = *(_QWORD *)(v16 - 424);
  v34[7] = v36;
  v37 = *(_QWORD *)(v16 - 312);
  v38 = *(_QWORD *)(v16 - 304);
  v34[8] = v37;
  v34[9] = v38;
  v39 = v14;
  *(_QWORD *)(v16 - 528) = v14;
  v34[10] = v14;
  v34[11] = v30;
  v40 = *(_QWORD *)(v16 - 360);
  v41 = *(_QWORD *)(v16 - 408);
  v34[12] = v40;
  v34[13] = v41;
  v34[14] = *(_QWORD *)(v16 - 296);
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v16 - 336), *(_QWORD *)(v16 - 328), *(_QWORD *)(v16 - 392), *(_QWORD *)(v16 - 320), *(_QWORD *)(v16 - 512), 0, 0, 0, *(_QWORD *)(v16 - 496), (unsigned __int8 *)(v16 - 136), *(_QWORD *)(v16 - 432), *(_QWORD *)(v16 - 456), *(_QWORD *)(v16 - 480), *(_QWORD *)(v16 - 464), (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v34, v12, v35, v37,
    v38,
    v39,
    v40);
}

void sub_187616F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_QWORD *)(v6 - 520);
  v8 = *(_QWORD *)(v6 - 472);
  MEMORY[0x18D75B4AC](v3, v7, v8, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 440) + 8))(v3, v8);
  *(_QWORD *)(v6 - 272) = v7;
  *(_QWORD *)(v6 - 264) = v2;
  v9 = *(_QWORD *)(v6 - 352);
  *(_QWORD *)(v6 - 256) = v5;
  *(_QWORD *)(v6 - 248) = v9;
  *(_QWORD *)(v6 - 240) = v1;
  *(_QWORD *)(v6 - 232) = v0;
  v10 = *(_QWORD *)(v6 - 312);
  v11 = *(_QWORD *)(v6 - 304);
  *(_QWORD *)(v6 - 224) = v10;
  *(_QWORD *)(v6 - 216) = v11;
  v12 = *(_QWORD *)(v6 - 528);
  v13 = *(_QWORD *)(v6 - 344);
  *(_QWORD *)(v6 - 208) = v12;
  *(_QWORD *)(v6 - 200) = v13;
  v14 = *(_QWORD *)(v6 - 360);
  v15 = *(_QWORD *)(v6 - 376);
  *(_QWORD *)(v6 - 192) = v14;
  *(_QWORD *)(v6 - 184) = v15;
  v16 = *(_QWORD *)(v6 - 296);
  *(_QWORD *)(v6 - 176) = v4;
  *(_QWORD *)(v6 - 168) = v16;
  *(_QWORD *)(v6 - 136) = v2;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v10;
  *(_QWORD *)(v6 - 112) = v11;
  *(_QWORD *)(v6 - 104) = v12;
  *(_QWORD *)(v6 - 96) = v14;
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187617028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v1);
  *(_QWORD *)(v4 - 152) = v2;
  *(_QWORD *)(v4 - 144) = v6;
  v7 = *(_QWORD *)(v4 - 416);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v4 - 152);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), v4 - 288, v7, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 400) + 8))(v3, v7);
}

uint64_t sub_1876170D4()
{
  swift_release();
  return swift_deallocObject();
}

void View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  _QWORD v29[21];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v29[19] = a8;
  v29[18] = a7;
  v32 = a6;
  v29[12] = a5;
  v38 = a4;
  v31 = a3;
  v39 = a2;
  v40 = a1;
  v33 = a9;
  v30 = a10;
  v37 = a13;
  v29[16] = a14;
  v29[15] = a15;
  v41 = a16;
  v29[13] = a22;
  v29[5] = a21;
  v36 = a12;
  v29[9] = a11;
  v35 = a17;
  v34 = a18;
  v29[8] = a23;
  v25 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v25, v26);
  v29[6] = (char *)v29 - v27;
  v29[3] = a19;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = MEMORY[0x1E0CE7C38];
  v43 = AssociatedTypeWitness;
  v44 = a20;
  v45 = MEMORY[0x1E0CE7C28];
  v29[1] = a20;
  v46 = a25;
  v47 = a24;
  type metadata accessor for TokenField();
}

void sub_1876172A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v21 = type metadata accessor for SearchModifier(0, a1, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v17 - 440) = v21;
  *(_QWORD *)(v17 - 416) = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  *(_QWORD *)(v17 - 448) = (char *)&a9 - v24;
  v25 = *(_QWORD *)(v17 - 320);
  v26 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v17 - 392) = v26;
  *(_QWORD *)(v17 - 368) = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  *(_QWORD *)(v17 - 472) = (char *)&a9 - v29;
  v30 = **(_BYTE **)(v17 - 456);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v16, *(_QWORD *)(v17 - 432), v10, v28);
  *(_BYTE *)(v17 - 136) = v30;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = v25;
  v31[3] = v14;
  v31[4] = v13;
  v31[5] = v12;
  v32 = *(_QWORD *)(v17 - 424);
  v33 = *(_QWORD *)(v17 - 464);
  v31[6] = v32;
  v31[7] = v33;
  v34 = v11;
  *(_QWORD *)(v17 - 512) = v11;
  v31[8] = v11;
  v31[9] = v15;
  *(_QWORD *)(v17 - 496) = v15;
  v35 = *(_QWORD *)(v17 - 312);
  v31[10] = *(_QWORD *)(v17 - 264);
  v31[11] = v35;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = *(_QWORD *)(v17 - 400);
  v37 = *(_QWORD *)(v17 - 408);
  outlined copy of Text?(*(_QWORD *)(v17 - 304), *(_QWORD *)(v17 - 296), v36, v37);
  v38 = *(_QWORD *)(v17 - 384);
  swift_retain();
  v39 = *(_QWORD *)(v17 - 376);
  swift_retain();
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v17 - 272), *(_QWORD *)(v17 - 280), *(_QWORD *)(v17 - 352), *(_QWORD *)(v17 - 288), *(_QWORD *)(v17 - 480), v38, v39, *(_DWORD *)(v17 - 356) & 1, *(_QWORD *)(v17 - 448), (unsigned __int8 *)(v17 - 136), *(_QWORD *)(v17 - 304), *(_QWORD *)(v17 - 296), v36, v37, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v31, *(_QWORD *)(v17 - 504), *(_QWORD *)(v17 - 520), v32,
    v33,
    v34,
    v15);
}

void sub_187617504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v5 - 320);
  v7 = *(_QWORD *)(v5 - 440);
  v8 = *(_QWORD *)(v5 - 488);
  MEMORY[0x18D75B4AC](v4, v6, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 416) + 8))(v4, v7);
  *(_QWORD *)(v5 - 240) = v6;
  *(_QWORD *)(v5 - 232) = v1;
  *(_QWORD *)(v5 - 224) = v0;
  *(_QWORD *)(v5 - 216) = v8;
  *(_QWORD *)(v5 - 208) = v2;
  *(_QWORD *)(v5 - 200) = v3;
  v9 = *(_QWORD *)(v5 - 512);
  v10 = *(_QWORD *)(v5 - 496);
  *(_QWORD *)(v5 - 192) = v9;
  *(_QWORD *)(v5 - 184) = v10;
  v11 = *(_QWORD *)(v5 - 264);
  *(_QWORD *)(v5 - 176) = *(_QWORD *)(v5 - 336);
  *(_QWORD *)(v5 - 168) = v11;
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(v5 - 312);
  *(_QWORD *)(v5 - 136) = v1;
  *(_QWORD *)(v5 - 128) = v0;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v9;
  *(_QWORD *)(v5 - 96) = v10;
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_1876175B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v3);
  *(_QWORD *)(v4 - 152) = v1;
  *(_QWORD *)(v4 - 144) = v6;
  v7 = *(_QWORD *)(v4 - 392);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v4 - 152);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:), v4 - 256, v7, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 368) + 8))(v2, v7);
}

void View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  _QWORD v29[16];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v34 = a8;
  v33 = a7;
  v37 = a6;
  v29[9] = a5;
  v40 = a4;
  v36 = a3;
  v39 = a2;
  v29[4] = a1;
  v38 = a9;
  v35 = a10;
  v32 = a22;
  v43 = a21;
  v30 = a14;
  v42 = a16;
  v29[12] = a15;
  v29[10] = a13;
  v29[15] = a12;
  v29[5] = a11;
  v41 = a17;
  v31 = a23;
  v29[8] = a20;
  v29[13] = a19;
  v25 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v25, v26);
  v29[6] = (char *)v29 - v27;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = MEMORY[0x1E0CE7C38];
  v45 = AssociatedTypeWitness;
  v46 = a20;
  v47 = MEMORY[0x1E0CE7C28];
  v48 = a25;
  v49 = a24;
  type metadata accessor for TokenField();
}

void sub_187617810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v19 = type metadata accessor for SearchModifier(0, a1, v17, v18);
  *(_QWORD *)(v15 - 400) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v15 - 432) = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v15 - 456) = (char *)&a9 - v21;
  *(_QWORD *)(v15 - 520) = v13;
  v22 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 384) = v22;
  *(_QWORD *)(v15 - 360) = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v15 - 488) = (char *)&a9 - v25;
  v26 = **(_BYTE **)(v15 - 504);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v15 - 472), v10, v24);
  *(_BYTE *)(v15 - 136) = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v15 - 416) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v15 - 424) = v27;
  *(_QWORD *)(v15 - 448) = v28;
  *(_QWORD *)(v15 - 464) = v29 & 1;
  v30 = (_QWORD *)swift_allocObject();
  v31 = *(_QWORD *)(v15 - 440);
  v30[2] = v13;
  v30[3] = v31;
  v32 = *(_QWORD *)(v15 - 480);
  v33 = *(_QWORD *)(v15 - 280);
  v30[4] = v32;
  v30[5] = v33;
  v34 = *(_QWORD *)(v15 - 392);
  v35 = *(_QWORD *)(v15 - 408);
  v30[6] = v34;
  v30[7] = v35;
  v36 = v14;
  *(_QWORD *)(v15 - 536) = v14;
  v30[8] = v14;
  v30[9] = v12;
  v37 = v12;
  *(_QWORD *)(v15 - 528) = v12;
  v38 = *(_QWORD *)(v15 - 296);
  v30[10] = *(_QWORD *)(v15 - 288);
  v30[11] = v38;
  v39 = *(_QWORD *)(v15 - 376);
  swift_retain();
  v40 = *(_QWORD *)(v15 - 368);
  swift_retain();
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v15 - 512), *(_QWORD *)(v15 - 312), *(_QWORD *)(v15 - 344), *(_QWORD *)(v15 - 304), *(_QWORD *)(v15 - 496), v39, v40, *(_DWORD *)(v15 - 348) & 1, *(_QWORD *)(v15 - 456), (unsigned __int8 *)(v15 - 136), *(_QWORD *)(v15 - 416), *(_QWORD *)(v15 - 424), *(_QWORD *)(v15 - 464), *(_QWORD *)(v15 - 448), (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v30, v31, v32, v34,
    v35,
    v36,
    v37);
}

void sub_187617AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v5 - 520);
  v7 = *(_QWORD *)(v5 - 432);
  v8 = *(_QWORD *)(v5 - 280);
  MEMORY[0x18D75B4AC](v3, v6, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 400) + 8))(v3, v7);
  *(_QWORD *)(v5 - 256) = v6;
  *(_QWORD *)(v5 - 248) = v1;
  *(_QWORD *)(v5 - 240) = v4;
  *(_QWORD *)(v5 - 232) = v8;
  *(_QWORD *)(v5 - 224) = v0;
  *(_QWORD *)(v5 - 216) = v2;
  v9 = *(_QWORD *)(v5 - 536);
  v10 = *(_QWORD *)(v5 - 528);
  *(_QWORD *)(v5 - 208) = v9;
  *(_QWORD *)(v5 - 200) = v10;
  v11 = *(_QWORD *)(v5 - 288);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 328);
  *(_QWORD *)(v5 - 184) = v11;
  *(_QWORD *)(v5 - 176) = *(_QWORD *)(v5 - 296);
  *(_QWORD *)(v5 - 136) = v1;
  *(_QWORD *)(v5 - 128) = v4;
  *(_QWORD *)(v5 - 120) = v0;
  *(_QWORD *)(v5 - 112) = v2;
  *(_QWORD *)(v5 - 104) = v9;
  *(_QWORD *)(v5 - 96) = v10;
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187617B9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  *(_QWORD *)(v4 - 160) = v1;
  *(_QWORD *)(v4 - 152) = v6;
  v7 = *(_QWORD *)(v4 - 384);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v4 - 160);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:), v4 - 272, v7, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 360) + 8))(v3, v7);
}

uint64_t closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  void (*v23)(char *);
  uint64_t v24;

  v23 = a1;
  v24 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v23 - v18;
  v20 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v20);
  v23(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v15, a2, a5);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v15, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v19, a2, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, a2);
}

void closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for SuggestedTokensView();
}

void sub_187617E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v11, *(_QWORD *)(v12 - 160), v9, v17);
  SuggestedTokensView.init(suggestedTokens:token:)(v11, (uint64_t)v14);
}

uint64_t sub_187617ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  swift_retain();
  v6(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, *(_QWORD *)(v4 - 136));
  return v6(v0, v1);
}

void partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)()
{
  closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)();
}

void View.searchable<A, B, C>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  _QWORD v29[19];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v29[18] = a8;
  v29[16] = a7;
  v32 = a6;
  v29[11] = a5;
  v43 = a4;
  v31 = a3;
  v39 = a2;
  v38 = a1;
  v33 = a9;
  v30 = a10;
  v41 = a14;
  v42 = a13;
  v29[15] = a22;
  v29[13] = a21;
  v29[10] = a12;
  v29[7] = a11;
  v37 = a24;
  v35 = a25;
  v40 = a19;
  v34 = a15;
  v29[4] = a17;
  v36 = a18;
  v29[6] = *(_QWORD *)(a18 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v25 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v25, v26);
  v29[3] = (char *)v29 - v27;
  v29[2] = a20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = MEMORY[0x1E0CE7C38];
  v45 = AssociatedTypeWitness;
  v46 = a17;
  v47 = MEMORY[0x1E0CE7C28];
  v48 = a25;
  v49 = a23;
  type metadata accessor for TokenField();
}

void sub_187618170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v20 = type metadata accessor for SearchModifier(0, a1, v18, v19);
  *(_QWORD *)(v16 - 464) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v16 - 488) = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v16 - 496) = (char *)&a9 - v22;
  v23 = *(_QWORD *)(v16 - 368);
  v24 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v16 - 448) = v24;
  *(_QWORD *)(v16 - 424) = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  *(_QWORD *)(v16 - 520) = (char *)&a9 - v27;
  v28 = **(_BYTE **)(v16 - 504);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v14, *(_QWORD *)(v16 - 472), v10, v26);
  *(_BYTE *)(v16 - 136) = v28;
  v29 = *(_QWORD *)(v16 - 352);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 512) + 16))(v12, *(_QWORD *)(v16 - 480), v29);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = *(_QWORD *)(v16 - 344);
  *(_QWORD *)(v16 - 472) = Text.init<A>(_:)();
  *(_QWORD *)(v16 - 480) = v31;
  *(_QWORD *)(v16 - 504) = v32;
  *(_QWORD *)(v16 - 512) = v33 & 1;
  v34 = (_QWORD *)swift_allocObject();
  v34[2] = v23;
  v34[3] = v11;
  v35 = *(_QWORD *)(v16 - 528);
  v34[4] = v35;
  v34[5] = v29;
  v34[6] = *(_QWORD *)(v16 - 320);
  v34[7] = v13;
  v36 = *(_QWORD *)(v16 - 456);
  v37 = *(_QWORD *)(v16 - 440);
  v34[8] = v36;
  v34[9] = v37;
  v38 = v15;
  *(_QWORD *)(v16 - 552) = v15;
  v34[10] = v15;
  v34[11] = v30;
  v39 = *(_QWORD *)(v16 - 360);
  v40 = *(_QWORD *)(v16 - 304);
  v34[12] = v39;
  v34[13] = v40;
  v34[14] = *(_QWORD *)(v16 - 312);
  v41 = *(_QWORD *)(v16 - 432);
  swift_retain();
  v42 = *(_QWORD *)(v16 - 416);
  swift_retain();
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(_QWORD *)(v16 - 336), *(_QWORD *)(v16 - 328), *(_QWORD *)(v16 - 400), *(_QWORD *)(v16 - 296), *(_QWORD *)(v16 - 536), v41, v42, *(_DWORD *)(v16 - 404) & 1, *(_QWORD *)(v16 - 496), (unsigned __int8 *)(v16 - 136), *(_QWORD *)(v16 - 472), *(_QWORD *)(v16 - 480), *(_QWORD *)(v16 - 512), *(_QWORD *)(v16 - 504), (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v34, v11, v35, v36,
    v37,
    v38,
    v39);
}

void sub_187618424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(v5 - 368);
  v7 = *(_QWORD *)(v5 - 488);
  v8 = *(_QWORD *)(v5 - 320);
  MEMORY[0x18D75B4AC](v0, v6, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 464) + 8))(v0, v7);
  *(_QWORD *)(v5 - 272) = v6;
  *(_QWORD *)(v5 - 264) = v3;
  v9 = *(_QWORD *)(v5 - 352);
  *(_QWORD *)(v5 - 256) = v2;
  *(_QWORD *)(v5 - 248) = v9;
  v10 = *(_QWORD *)(v5 - 544);
  *(_QWORD *)(v5 - 240) = v8;
  *(_QWORD *)(v5 - 232) = v10;
  *(_QWORD *)(v5 - 224) = v4;
  *(_QWORD *)(v5 - 216) = v1;
  v11 = *(_QWORD *)(v5 - 552);
  v12 = *(_QWORD *)(v5 - 344);
  *(_QWORD *)(v5 - 208) = v11;
  *(_QWORD *)(v5 - 200) = v12;
  v13 = *(_QWORD *)(v5 - 360);
  v14 = *(_QWORD *)(v5 - 384);
  *(_QWORD *)(v5 - 192) = v13;
  *(_QWORD *)(v5 - 184) = v14;
  v15 = *(_QWORD *)(v5 - 312);
  *(_QWORD *)(v5 - 176) = *(_QWORD *)(v5 - 304);
  *(_QWORD *)(v5 - 168) = v15;
  *(_QWORD *)(v5 - 136) = v3;
  *(_QWORD *)(v5 - 128) = v2;
  *(_QWORD *)(v5 - 120) = v4;
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v11;
  *(_QWORD *)(v5 - 96) = v13;
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187618504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  *(_QWORD *)(v4 - 152) = v1;
  *(_QWORD *)(v4 - 144) = v6;
  v7 = *(_QWORD *)(v4 - 448);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v4 - 152);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), v4 - 288, v7, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 424) + 8))(v3, v7);
}

uint64_t closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void (*v25)(char *);
  uint64_t v26;

  v25 = a1;
  v26 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v25 - v20;
  v22 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v22);
  v25(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v17, a2, a7);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v17, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, a2, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, a2);
}

uint64_t partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)(*(void (**)(char *))(v1 + 104), *(_QWORD *)(v1 + 32), a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

void closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for SuggestedTokensView();
}

void sub_1876187F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v11, *(_QWORD *)(v12 - 160), v9, v17);
  SuggestedTokensView.init(suggestedTokens:token:)(v11, (uint64_t)v14);
}

uint64_t sub_18761887C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  swift_retain();
  v6(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, *(_QWORD *)(v4 - 136));
  return v6(v0, v1);
}

void partial apply for closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)()
{
  closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)();
}

void View.searchable<A, B, C>(text:tokens:placement:prompt:token:suggestions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D>(text:tokens:placement:prompt:token:suggestions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D>(text:tokens:scope:placement:prompt:token:scopes:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D, E>(text:tokens:scope:placement:prompt:token:scopes:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D, E>(text:tokens:scope:placement:prompt:token:scopes:suggestions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D, E, F>(text:tokens:scope:placement:prompt:token:scopes:suggestions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1876189D4()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

uint64_t sub_187618A48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v5 = type metadata accessor for SearchModifier(255, a1, v3, v4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v1;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

void sub_187618AC0()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

uint64_t sub_187618B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[16];

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v5 = type metadata accessor for SearchModifier(255, a1, v3, v4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v1;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

void sub_187618BB0()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

uint64_t sub_187618C24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v5 = type metadata accessor for SearchModifier(255, a1, v3, v4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v1;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

void sub_187618C9C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_187618D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187618D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[18];

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  v7 = type metadata accessor for SearchSuggestionsModifier(255, a1, v5, v6);
  v8 = type metadata accessor for ModifiedContent();
  v12[0] = v3;
  v12[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  v9 = MEMORY[0x1E0CE2E70];
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v12);
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v7);
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

void sub_187618E1C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_187618E9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187618EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[18];

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  v7 = type metadata accessor for SearchSuggestionsModifier(255, a1, v5, v6);
  v8 = type metadata accessor for ModifiedContent();
  v12[0] = v3;
  v12[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  v9 = MEMORY[0x1E0CE2E70];
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v12);
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v7);
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

void sub_187618FA0()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_18761901C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_187619070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[20];

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SuggestedTokensView<A, B>, a1);
  v7 = type metadata accessor for SearchSuggestionsModifier(255, a1, v5, v6);
  v8 = type metadata accessor for ModifiedContent();
  v12[0] = v3;
  v12[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  v9 = MEMORY[0x1E0CE2E70];
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v12);
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v7);
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

void sub_187619120()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

uint64_t sub_187619198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[18];

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v7 = type metadata accessor for SearchModifier(255, a1, v5, v6);
  v8 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for SearchSuggestionsModifier(255, v1, v2, v9);
  v11 = type metadata accessor for ModifiedContent();
  v15[0] = v3;
  v15[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v7);
  v12 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v15);
  v14[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v10);
  return MEMORY[0x18D75FFDC](v12, v11, v14);
}

void sub_18761926C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

uint64_t sub_1876192E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[18];

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  v7 = type metadata accessor for SearchModifier(255, a1, v5, v6);
  v8 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for SearchSuggestionsModifier(255, v1, v2, v9);
  v11 = type metadata accessor for ModifiedContent();
  v15[0] = v3;
  v15[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v7);
  v12 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v15);
  v14[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v10);
  return MEMORY[0x18D75FFDC](v12, v11, v14);
}

void sub_1876193BC()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_187619434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_187619488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[16];

  v5 = type metadata accessor for ModifiedContent();
  v9[0] = v3;
  v9[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  v6 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v9);
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v6, v5, v8);
}

void sub_18761950C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_187619584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_1876195D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[16];

  v5 = type metadata accessor for ModifiedContent();
  v9[0] = v3;
  v9[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v2);
  v6 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v9);
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v6, v5, v8);
}

void sub_18761965C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_1876196D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_18761972C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[18];

  v7 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for SearchSuggestionsModifier(255, v1, v2, v8);
  v10 = type metadata accessor for ModifiedContent();
  v15[0] = v5;
  v15[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v4);
  v11 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v15);
  v14[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>, a1);
  v13[0] = MEMORY[0x18D75FFDC](v11, v7, v14);
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v9);
  return MEMORY[0x18D75FFDC](v11, v10, v13);
}

void sub_187619804()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_187619888(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, a1);
  type metadata accessor for SearchModifier(255, a1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for SearchScopesModifier();
}

uint64_t sub_1876198DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[18];

  v7 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for SearchSuggestionsModifier(255, v1, v2, v8);
  v10 = type metadata accessor for ModifiedContent();
  v15[0] = v5;
  v15[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v4);
  v11 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v15);
  v14[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchScopesModifier<A, B>, a1);
  v13[0] = MEMORY[0x18D75FFDC](v11, v7, v14);
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v9);
  return MEMORY[0x18D75FFDC](v11, v10, v13);
}

void type metadata completion function for SuggestedTokensView()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Binding();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SuggestedTokensView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  size_t __n;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~(unint64_t)v7) + *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = v12 | 7;
  v14 = ((v12 + 16) & ~v12) + *(_QWORD *)(v10 + 64);
  if (v14 <= 8)
    v15 = 8;
  else
    v15 = ((v12 + 16) & ~v12) + *(_QWORD *)(v10 + 64);
  v16 = (*(_DWORD *)(v10 + 80) | v7) & 0x100000;
  v17 = *a2;
  *a1 = *a2;
  if ((v12 | (unint64_t)v7) <= 7
    && v16 == 0
    && ((v15 + ((v12 + 16 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(v12 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8) + 9 <= 0x18)
  {
    v47 = v9;
    v48 = v12;
    v49 = v11;
    __n = v14;
    v46 = v10;
    v20 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = ((unint64_t)v20 + v7 + 8) & ~(unint64_t)v7;
    v23 = ((unint64_t)v21 + v7 + 8) & ~(unint64_t)v7;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v5);
    v25 = (_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = ((unint64_t)v25 + v13 + 16) & ~v13;
    v29 = ((unint64_t)v26 + v13 + 16) & ~v13;
    v30 = *(unsigned __int8 *)(v29 + v15);
    swift_retain();
    if (v30 >= 2)
    {
      if (v15 <= 3)
        v31 = v15;
      else
        v31 = 4;
      __asm { BR              X11 }
    }
    v32 = v15 + 1;
    if (v30 != 1)
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *(_BYTE *)(v28 + v15) = 0;
      swift_retain();
LABEL_28:
      v40 = ((v28 | 7) + v32) & 0xFFFFFFFFFFFFFFF8;
      v41 = ((v29 | 7) + v32) & 0xFFFFFFFFFFFFFFF8;
      v42 = *(_QWORD *)v41;
      v43 = *(_BYTE *)(v41 + 8);
      outlined copy of Environment<Bool>.Content(*(_QWORD *)v41, v43);
      *(_QWORD *)v40 = v42;
      *(_BYTE *)(v40 + 8) = v43;
      return a1;
    }
    v33 = ~v48;
    v34 = (uint64_t *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v49 < 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v46 + 48))(((unint64_t)v34 + v48 + 8) & v33))
      {
LABEL_23:
        memcpy((void *)v28, (const void *)v29, __n);
LABEL_27:
        *(_BYTE *)(v28 + v15) = 1;
        goto LABEL_28;
      }
    }
    else
    {
      v35 = *v34;
      if ((unint64_t)*v34 >= 0xFFFFFFFF)
        LODWORD(v35) = -1;
      if ((_DWORD)v35 != -1)
        goto LABEL_23;
    }
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v36 = (_QWORD *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v36 = *v34;
    v37 = ((unint64_t)v36 + v48 + 8) & v33;
    v38 = ((unint64_t)v34 + v48 + 8) & v33;
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
    swift_retain();
    swift_retain();
    v39(v37, v38, v47);
    goto LABEL_27;
  }
  a1 = (uint64_t *)(v17
                 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
  swift_retain();
  return a1;
}

uint64_t destroy for SuggestedTokensView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  v7 = (a1 + *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + (v10 | 7) + 16) & ~(v10 | 7);
  if (((v10 + 16) & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) <= 8)
    v12 = 8;
  else
    v12 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = *(unsigned __int8 *)(v11 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v13 == 1)
  {
    v15 = ~v10;
    v16 = (uint64_t *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v9 + 84) & 0x80000000) != 0)
    {
      if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v16 + v10 + 8) & v15))
      {
LABEL_17:
        swift_release();
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v16 + v10 + 8) & v15, v8);
      }
    }
    else
    {
      v17 = *v16;
      if ((unint64_t)*v16 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      if ((_DWORD)v17 == -1)
        goto LABEL_17;
    }
  }
  else
  {
    swift_release();
  }
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)((v11 + v12 + 8) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v11 + v12 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
}

_QWORD *initializeWithCopy for SuggestedTokensView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v40;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  v16 = (_QWORD *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v14;
  v16[1] = v15;
  v40 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v40 - 8);
  v18 = *(unsigned int *)(v17 + 84);
  v19 = *(_DWORD *)(v17 + 80);
  v20 = *(_DWORD *)(v17 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v16 + v19 + 16) & v20;
  v22 = ((unint64_t)v14 + v19 + 16) & v20;
  v23 = *(_QWORD *)(v17 + 64);
  v24 = ((v19 + 16) & ~v19) + v23;
  if (v24 <= 8)
    v25 = 8;
  else
    v25 = ((v19 + 16) & ~v19) + v23;
  v26 = *(unsigned __int8 *)(v22 + v25);
  swift_retain();
  if (v26 >= 2)
  {
    if (v25 <= 3)
      v27 = v25;
    else
      v27 = 4;
    __asm { BR              X11 }
  }
  if (v26 == 1)
  {
    v28 = ~v19;
    v29 = (uint64_t *)((v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(((unint64_t)v29 + v19 + 8) & v28, v18, v40))
      {
LABEL_14:
        memcpy((void *)v21, (const void *)v22, v24);
LABEL_18:
        *(_BYTE *)(v21 + v25) = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v30 = *v29;
      if ((unint64_t)*v29 >= 0xFFFFFFFF)
        LODWORD(v30) = -1;
      if ((_DWORD)v30 != -1)
        goto LABEL_14;
    }
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v31 = (_QWORD *)((v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v29;
    v32 = ((unint64_t)v31 + v19 + 8) & v28;
    v33 = ((unint64_t)v29 + v19 + 8) & v28;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
    swift_retain();
    swift_retain();
    v34(v32, v33, v40);
    goto LABEL_18;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + v25) = 0;
  swift_retain();
LABEL_19:
  v35 = ((v21 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((v22 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  v38 = *(_BYTE *)(v36 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v36, v38);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = v38;
  return a1;
}

_QWORD *assignWithCopy for SuggestedTokensView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v44;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = type metadata accessor for AttributedString();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v11 + v16 + 16) & v17;
  v19 = ((unint64_t)v12 + v16 + 16) & v17;
  v20 = (v16 + 16) & ~v16;
  if (v18 == v19)
  {
    v27 = *(_QWORD *)(v15 + 64) + v20;
    if (v27 <= 8)
      v24 = 8;
    else
      v24 = v27;
    goto LABEL_37;
  }
  v21 = v14;
  v22 = *(unsigned int *)(v15 + 84);
  v23 = *(_QWORD *)(v15 + 64) + v20;
  if (v23 <= 8)
    v24 = 8;
  else
    v24 = *(_QWORD *)(v15 + 64) + v20;
  v25 = *(unsigned __int8 *)(v18 + v24);
  if (v25 >= 2)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  v44 = ~v16;
  if (v25 == 1)
  {
    v28 = (uint64_t *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 0x80000000) == 0)
    {
      v29 = *v28;
      if ((unint64_t)*v28 >= 0xFFFFFFFF)
        LODWORD(v29) = -1;
      if ((_DWORD)v29 != -1)
        goto LABEL_22;
      goto LABEL_21;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(((unint64_t)v28 + v16 + 8) & v44, v22, v14))
    {
LABEL_21:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v15 + 8))(((unint64_t)v28 + v16 + 8) & v44, v21);
    }
  }
  else
  {
    swift_release();
  }
LABEL_22:
  v30 = *(unsigned __int8 *)(v19 + v24);
  if (v30 >= 2)
  {
    if (v24 <= 3)
      v31 = v24;
    else
      v31 = 4;
    __asm { BR              X12 }
  }
  if (v30 == 1)
  {
    v32 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(((unint64_t)v32 + v16 + 8) & v44, v22, v21))
      {
LABEL_32:
        memcpy((void *)v18, (const void *)v19, v23);
LABEL_36:
        *(_BYTE *)(v18 + v24) = 1;
        goto LABEL_37;
      }
    }
    else
    {
      v33 = *v32;
      if ((unint64_t)*v32 >= 0xFFFFFFFF)
        LODWORD(v33) = -1;
      if ((_DWORD)v33 != -1)
        goto LABEL_32;
    }
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v34 = (_QWORD *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v34 = *v32;
    v35 = ((unint64_t)v34 + v16 + 8) & v44;
    v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16);
    swift_retain();
    swift_retain();
    v36(v35, ((unint64_t)v32 + v16 + 8) & v44, v21);
    goto LABEL_36;
  }
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + v24) = 0;
  swift_retain();
LABEL_37:
  v37 = ((v18 | 7) + v24 + 1) & 0xFFFFFFFFFFFFFFF8;
  v38 = ((v19 | 7) + v24 + 1) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)v38;
  v40 = *(_BYTE *)(v38 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v38, v40);
  v41 = *(_QWORD *)v37;
  v42 = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v37 = v39;
  *(_BYTE *)(v37 + 8) = v40;
  outlined consume of Environment<Bool>.Content(v41, v42);
  return a1;
}

_QWORD *initializeWithTake for SuggestedTokensView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = (_OWORD *)(((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = type metadata accessor for AttributedString();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v10 + v14 + 16) & v15;
  v17 = ((unint64_t)v11 + v14 + 16) & v15;
  v18 = *(_QWORD *)(v13 + 64);
  v19 = ((v14 + 16) & ~v14) + v18;
  if (v19 <= 8)
    v20 = 8;
  else
    v20 = ((v14 + 16) & ~v14) + v18;
  v21 = *(unsigned __int8 *)(v17 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  if (v21 == 1)
  {
    v23 = ~v14;
    v24 = (uint64_t *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v13 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v13 + 48))(((unint64_t)v24 + v14 + 8) & v23))
      {
LABEL_14:
        memcpy((void *)v16, (const void *)v17, v19);
LABEL_18:
        v26 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v25 = *v24;
      if ((unint64_t)*v24 >= 0xFFFFFFFF)
        LODWORD(v25) = -1;
      if ((_DWORD)v25 != -1)
        goto LABEL_14;
    }
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v27 = (_QWORD *)((v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v27 + v14 + 8) & v23, ((unint64_t)v24 + v14 + 8) & v23, v12);
    goto LABEL_18;
  }
  v26 = 0;
  *(_QWORD *)v16 = *(_QWORD *)v17;
LABEL_19:
  *(_BYTE *)(v16 + v20) = v26;
  v28 = ((v17 | 7) + v20 + 1) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  v30 = ((v16 | 7) + v20 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v30 = v29;
  return a1;
}

_QWORD *assignWithTake for SuggestedTokensView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v40;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = (_OWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  v13 = type metadata accessor for AttributedString();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v11 + v15 + 16) & v16;
  v18 = ((unint64_t)v12 + v15 + 16) & v16;
  v19 = (v15 + 16) & ~v15;
  if (v17 == v18)
  {
    v26 = *(_QWORD *)(v14 + 64) + v19;
    if (v26 <= 8)
      v23 = 8;
    else
      v23 = v26;
    goto LABEL_37;
  }
  v20 = v13;
  v21 = *(unsigned int *)(v14 + 84);
  v22 = *(_QWORD *)(v14 + 64) + v19;
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = *(_QWORD *)(v14 + 64) + v19;
  v24 = *(unsigned __int8 *)(v17 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  v40 = ~v15;
  if (v24 == 1)
  {
    v27 = (uint64_t *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 0x80000000) == 0)
    {
      v28 = *v27;
      if ((unint64_t)*v27 >= 0xFFFFFFFF)
        LODWORD(v28) = -1;
      if ((_DWORD)v28 != -1)
        goto LABEL_22;
      goto LABEL_21;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(((unint64_t)v27 + v15 + 8) & v40, v21, v13))
    {
LABEL_21:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(((unint64_t)v27 + v15 + 8) & v40, v20);
    }
  }
  else
  {
    swift_release();
  }
LABEL_22:
  v29 = *(unsigned __int8 *)(v18 + v23);
  if (v29 >= 2)
  {
    if (v23 <= 3)
      v30 = v23;
    else
      v30 = 4;
    __asm { BR              X12 }
  }
  if (v29 == 1)
  {
    v31 = (uint64_t *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(((unint64_t)v31 + v15 + 8) & v40, v21, v20))
      {
LABEL_32:
        memcpy((void *)v17, (const void *)v18, v22);
LABEL_36:
        *(_BYTE *)(v17 + v23) = 1;
        goto LABEL_37;
      }
    }
    else
    {
      v32 = *v31;
      if ((unint64_t)*v31 >= 0xFFFFFFFF)
        LODWORD(v32) = -1;
      if ((_DWORD)v32 != -1)
        goto LABEL_32;
    }
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v33 = (_QWORD *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v33 + v15 + 8) & v40, ((unint64_t)v31 + v15 + 8) & v40, v20);
    goto LABEL_36;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + v23) = 0;
LABEL_37:
  v34 = ((v17 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8;
  v35 = ((v18 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)v35;
  LOBYTE(v35) = *(_BYTE *)(v35 + 8);
  v37 = *(_QWORD *)v34;
  v38 = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v34 = v36;
  *(_BYTE *)(v34 + 8) = v35;
  outlined consume of Environment<Bool>.Content(v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestedTokensView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((v10 + 16) & ~(unint64_t)v10) + *(_QWORD *)(v9 + 64);
  v12 = 8;
  if (v11 > 8)
    v12 = v11;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v6 + 80);
  if (v8 < a2)
  {
    v14 = ((v12
          + ((v10 + 16 + ((*(_QWORD *)(v6 + 64) + ((v13 + 16) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8)) & (v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
          + 8) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v14 < 4)
      v15 = ((a2 - v8 + 255) >> (8 * v14)) + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    __asm { BR              X13 }
  }
  v19 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v13 + 8) & ~v13, v7, v5);
  v20 = *v19;
  if ((unint64_t)*v19 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  return (v20 + 1);
}

void storeEnumTagSinglePayload for SuggestedTokensView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 16;
  v12 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v12 <= 8)
    v12 = 8;
  v13 = ((v12
        + ((v11
          + ((*(_QWORD *)(v7 + 64)
            + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + 7) & 0xFFFFFFFFFFFFFFF8)) & (*(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
        + 8) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v8 >= a3)
  {
    v16 = 0u;
    if (v8 >= a2)
      goto LABEL_19;
  }
  else
  {
    if ((((_DWORD)v12
         + (((_DWORD)v11
           + ((*(_DWORD *)(v7 + 64) + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)) & (*(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFF8))
         + 8) & 0xFFFFFFF8)
       + 9 <= 3)
      v14 = ((a3 - v8 + 255) >> (8 * v13)) + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (v8 >= a2)
LABEL_19:
      __asm { BR              X12 }
  }
  if (v13 >= 4)
    v17 = ~v8 + a2;
  else
    v17 = (~(_BYTE)v8 + a2);
  bzero(a1, v13);
  if ((_DWORD)v13 == 1)
    *a1 = v17;
  else
    *(_DWORD *)a1 = v17;
  __asm { BR              X10 }
}

void sub_18761AF54()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18761AFD4);
}

void sub_18761AF5C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18761AF64);
  JUMPOUT(0x18761AFD4);
}

void sub_18761AF7C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18761AFD4);
}

void sub_18761AF84()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18761AFD4);
}

void sub_18761AF8C()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;

  *(_WORD *)(v0 + v3) = 0;
  if (v1)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((v1 & 0x80000000) == 0)
        JUMPOUT(0x18761AFD0);
      JUMPOUT(0x18761AFCCLL);
    }
    JUMPOUT(0x18761AF98);
  }
  JUMPOUT(0x18761AFD4);
}

uint64_t associated type witness table accessor for View.Body : View in SuggestedTokensView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_18761B02C()
{
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_18761B064(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 64) & ~v3);
  swift_release();
  swift_release();
  v5 = type metadata accessor for Binding();
  (*(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v4 + *(int *)(v5 + 32));
  swift_release();
  v6 = v4 + *(int *)(a1 + 72);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    v8 = v7;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    {
      swift_release();
      swift_release();
      v9 = v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v4 + *(int *)(a1 + 76)), *(_BYTE *)(v4 + *(int *)(a1 + 76) + 8));
  return swift_deallocObject();
}

void partial apply for closure #1 in SuggestedTokensView.body.getter()
{
  type metadata accessor for SuggestedTokensView();
}

uint64_t sub_18761B204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return closure #1 in SuggestedTokensView.body.getter(v1, v2 + ((v10 + 64) & ~v10), v4, v5, v6, v7, v8, v9, v3);
}

void partial apply for closure #1 in closure #1 in SuggestedTokensView.body.getter()
{
  uint64_t v0;

  closure #1 in closure #1 in SuggestedTokensView.body.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

void partial apply for closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)()
{
  closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)();
}

uint64_t sub_18761B2C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  swift_getAssociatedTypeWitness();
  v10[1] = v1;
  v10[2] = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for SearchCompletion(255, v2, v4, v5);
  v12 = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for ForEach();
  v7 = type metadata accessor for Optional();
  v10[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCompletion<A>, v11);
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v6, v10);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v7, &v9);
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18761B460(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_18761B4E0 + 4 * byte_187C451D4[a2]))(0xD000000000000012);
}

uint64_t sub_18761B4E0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000012 && v1 == 0x8000000187BD3440)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x736D657469;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0x8000000187BD3410;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x736D657469;
  if ((a2 & 1) != 0)
    v6 = 0x8000000187BD3410;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_18761B698()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_18761B760()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void static PreviewProvider.platform.getter(_BYTE *a1@<X8>)
{
  static PreviewProvider.platform.getter(a1);
}

{
  *a1 = 4;
}

uint64_t static PreviewProvider._previews.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t (*v6)(uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
  a3[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(a3);
  return v6(a1, a2);
}

uint64_t static PreviewProvider._platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

BOOL static PreviewPlatform.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PreviewPlatform.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PreviewPlatform.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PreviewDevice.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SwiftUI::PreviewDevice __swiftcall PreviewDevice.init(stringLiteral:)(SwiftUI::PreviewDevice stringLiteral)
{
  SwiftUI::PreviewDevice *v1;

  *v1 = stringLiteral;
  return stringLiteral;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PreviewDevice@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance InterfaceOrientation.Orientation(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance InterfaceOrientation.Orientation()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance InterfaceOrientation.Orientation()
{
  __asm { BR              X10 }
}

uint64_t sub_18761B980()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance InterfaceOrientation.Orientation(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InterfaceOrientation.Orientation@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized InterfaceOrientation.Orientation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InterfaceOrientation.Orientation()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_18761BA4C + 4 * byte_187C451E4[*v0]))();
}

void sub_18761BA4C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x8000000187BD3440;
}

void sub_18761BA6C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "landscapeLeft");
  *(_WORD *)(a1 + 14) = -4864;
}

void protocol witness for static CaseIterable.allCases.getter in conformance InterfaceOrientation.Orientation(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance InterfaceOrientation.Orientation;
}

uint64_t protocol witness for Identifiable.id.getter in conformance InterfaceOrientation.Orientation()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_18761BAE8 + 4 * byte_187C451E8[*v0]))();
}

void sub_18761BAE8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x8000000187BD3440;
}

void sub_18761BB08(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "landscapeLeft");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t InterfaceOrientation.id.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18761BB78 + 4 * byte_187C451EC[*v0]))(0x7469617274726F70, 0xE800000000000000);
}

unint64_t sub_18761BB78()
{
  return 0xD000000000000012;
}

uint64_t sub_18761BB94()
{
  return 0x70616373646E616CLL;
}

void static InterfaceOrientation.portrait.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static InterfaceOrientation.portraitUpsideDown.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static InterfaceOrientation.landscapeLeft.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static InterfaceOrientation.landscapeRight.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static InterfaceOrientation.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_18761BC4C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_18761BCC8 + 4 * byte_187C451F4[a1]))(0xD000000000000012);
}

uint64_t sub_18761BCC8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000012 && v1 == 0x8000000187BD3440)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance InterfaceOrientation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized static InterfaceOrientation.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t View.previewDevice(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.previewLayout(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.previewDisplayName(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.previewContext<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9[5];

  v9[3] = a3;
  v9[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  View._trait<A>(_:_:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PreviewContext?);
}

uint64_t View.previewInterfaceOrientation(_:)()
{
  return View._trait<A>(_:_:)();
}

void static PreviewDeviceTraitKey.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t static PreviewLayoutTraitKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0CA9C88];
  v3 = type metadata accessor for PreviewLayout();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance PreviewLayoutTraitKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0CA9C88];
  v3 = type metadata accessor for PreviewLayout();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t static PreviewDisplayNameTraitKey.defaultValue.getter()
{
  return 0;
}

double static PreviewContextTraitKey.defaultValue.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t static _PreviewProvider._allPreviews.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  _QWORD v4[4];
  uint64_t v5;
  _QWORD v6[4];
  uint64_t v7;

  (*(void (**)(_QWORD *__return_ptr))(a2 + 8))(v6);
  v7 = MEMORY[0x1E0DEE9D8];
  outlined init with copy of Any((uint64_t)v6, (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  static ProtocolDescriptor.conformance(of:)();
  result = v5;
  if (v5)
  {
    MakePreviews.visit<A>(type:)(v5, v5);
    v3 = v7;
    swift_bridgeObjectRetain();
    outlined destroy of MakePreviews((uint64_t)v6);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MakePreviews.visit<A>(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[32];

  v3 = v2;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v2, (uint64_t)v10);
  swift_dynamicCast();
  v8 = View._allPreviews.getter();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 32) = v8;
  return result;
}

uint64_t View._allPreviews.getter()
{
  uint64_t v1;

  type metadata accessor for [FrameResizePosition](0, &lazy cache variable for type metadata for [_Preview]);
  EnvironmentValues.init()();
  View.withChildrenForTest<A>(environment:options:body:)();
  swift_release();
  swift_release();
  return v1;
}

uint64_t closure #1 in View._allPreviews.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[96];
  _BYTE v30[112];
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[6];
  _BYTE v34[56];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[64];

  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v38);
  v37 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  outlined init with copy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v38, (uint64_t)v34);
  v35 = 0;
  v36 = 0;
  v20 = a2;
  if (_VariadicView_Children.endIndex.getter())
  {
    v3 = 0;
    v4 = MEMORY[0x1E0CE55D8];
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      result = _VariadicView_Children.endIndex.getter();
      if (v3 < 0 || v3 >= result)
        break;
      v35 = v3 + 1;
      *(_OWORD *)&v30[40] = v23;
      *(_OWORD *)&v30[56] = v24;
      *(_OWORD *)&v30[72] = v25;
      *(_OWORD *)&v30[88] = v26;
      *(_OWORD *)&v30[8] = v21;
      *(_OWORD *)&v30[24] = v22;
      v6 = v36;
      if (__OFADD__(v36, 1))
        goto LABEL_15;
      ++v36;
      v33[2] = *(_OWORD *)&v30[40];
      v33[3] = *(_OWORD *)&v30[56];
      v33[4] = *(_OWORD *)&v30[72];
      v33[5] = *(_OWORD *)&v30[88];
      v33[0] = *(_OWORD *)&v30[8];
      v33[1] = *(_OWORD *)&v30[24];
      v32 = v6;
      v28 = v6;
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v33, (uint64_t)v29);
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v29, (uint64_t)&v21);
      *(_QWORD *)&v27 = v6;
      *(_QWORD *)v30 = v4;
      type metadata accessor for _VariadicView_Children.Element.Type();
      v7 = String.init<A>(describing:)();
      v9 = v8;
      outlined destroy of _VariadicView_Children.Element((uint64_t)v29);
      *((_QWORD *)&v27 + 1) = v7;
      v31 = v9;
      *(_OWORD *)&v30[64] = v25;
      *(_OWORD *)&v30[80] = v26;
      *(_OWORD *)v30 = v21;
      *(_OWORD *)&v30[16] = v22;
      *(_OWORD *)&v30[32] = v23;
      *(_OWORD *)&v30[48] = v24;
      *(_OWORD *)&v30[96] = v27;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v32, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element));
      v10 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v37;
      }
      v12 = *(_QWORD *)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        v10 = v37;
      }
      *(_QWORD *)(v10 + 16) = v12 + 1;
      v13 = v10 + 120 * v12;
      v14 = *(_OWORD *)v30;
      v15 = *(_OWORD *)&v30[16];
      v16 = *(_OWORD *)&v30[48];
      *(_OWORD *)(v13 + 64) = *(_OWORD *)&v30[32];
      *(_OWORD *)(v13 + 80) = v16;
      *(_OWORD *)(v13 + 32) = v14;
      *(_OWORD *)(v13 + 48) = v15;
      v17 = *(_OWORD *)&v30[64];
      v18 = *(_OWORD *)&v30[80];
      v19 = *(_OWORD *)&v30[96];
      *(_QWORD *)(v13 + 144) = v31;
      *(_OWORD *)(v13 + 112) = v18;
      *(_OWORD *)(v13 + 128) = v19;
      *(_OWORD *)(v13 + 96) = v17;
      v3 = v35;
      if (v3 == _VariadicView_Children.endIndex.getter())
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    v10 = v37;
LABEL_13:
    _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v34, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DECC48]);
    result = _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DECC58]);
    *v20 = v10;
  }
  return result;
}

uint64_t _Preview.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t _Preview.contentType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Preview.content.getter()
{
  uint64_t v0;
  _BYTE v2[88];

  outlined init with copy of _ViewList_View(v0, (uint64_t)v2);
  return AnyView.init<A>(_:)();
}

uint64_t _Preview.context.getter()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 88);
  v3 = 0;
  memset(v2, 0, sizeof(v2));
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for PreviewContext?);
}

uint64_t _Preview.displayName.getter()
{
  uint64_t v1;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t _Preview.device.getter()
{
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

uint64_t _Preview.layout.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v1 = type metadata accessor for PreviewLayout();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = *(_QWORD *)(v0 + 88);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v2 + 104))(v6, *MEMORY[0x1E0CA9C88], v1, v4);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v6, v1);
}

uint64_t _Preview.interfaceOrientation.getter()
{
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

uint64_t _Preview.colorScheme.getter()
{
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

unint64_t specialized InterfaceOrientation.Orientation.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InterfaceOrientation.Orientation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t specialized static InterfaceOrientation.allCases.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
  v0 = v9;
  v2 = *(_QWORD *)(v9 + 16);
  v1 = *(_QWORD *)(v9 + 24);
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v2 + 1, 1);
    v0 = v9;
    v1 = *(_QWORD *)(v9 + 24);
    v3 = v1 >> 1;
  }
  *(_QWORD *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + v2 + 32) = 0;
  v5 = v2 + 2;
  if (v3 < (uint64_t)(v2 + 2))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v2 + 2, 1);
    v0 = v9;
    v1 = *(_QWORD *)(v9 + 24);
    v3 = v1 >> 1;
  }
  *(_QWORD *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + v4 + 32) = 1;
  v6 = v2 + 3;
  if (v3 < (uint64_t)(v2 + 3))
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v2 + 3, 1);
  result = v9;
  *(_QWORD *)(v9 + 16) = v6;
  *(_BYTE *)(v9 + v5 + 32) = 2;
  v8 = *(_QWORD *)(v9 + 24);
  if ((uint64_t)(v2 + 4) > (uint64_t)(v8 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v2 + 4, 1);
    result = v9;
  }
  *(_QWORD *)(result + 16) = v2 + 4;
  *(_BYTE *)(result + v6 + 32) = 3;
  return result;
}

void type metadata accessor for PreviewContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PreviewContext?)
  {
    type metadata accessor for PreviewContext();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PreviewContext?);
  }
}

unint64_t type metadata accessor for PreviewContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PreviewContext;
  if (!lazy cache variable for type metadata for PreviewContext)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PreviewContext);
  }
  return result;
}

uint64_t outlined destroy of MakePreviews(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PreviewPlatform and conformance PreviewPlatform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewPlatform and conformance PreviewPlatform;
  if (!lazy protocol witness table cache variable for type PreviewPlatform and conformance PreviewPlatform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewPlatform, &type metadata for PreviewPlatform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewPlatform and conformance PreviewPlatform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreviewDevice and conformance PreviewDevice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice;
  if (!lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewDevice, &type metadata for PreviewDevice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice;
  if (!lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreviewDevice, &type metadata for PreviewDevice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in PreviewDevice()
{
  return MEMORY[0x1E0DEA9F0];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in PreviewDevice()
{
  return MEMORY[0x1E0DEAA00];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in PreviewDevice()
{
  return MEMORY[0x1E0DEA9F8];
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InterfaceOrientation()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [InterfaceOrientation] and conformance [A], &lazy cache variable for type metadata for [InterfaceOrientation]);
}

uint64_t dispatch thunk of static _PreviewProviderLocator.previewProviders.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static _PreviewProvider._previews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static _PreviewProvider._platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PreviewProvider.previews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static PreviewProvider.platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for PreviewPlatform()
{
  return &type metadata for PreviewPlatform;
}

ValueMetadata *type metadata accessor for PreviewDevice()
{
  return &type metadata for PreviewDevice;
}

uint64_t dispatch thunk of static PreviewContextKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreviewContext.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for InterfaceOrientation()
{
  return &type metadata for InterfaceOrientation;
}

ValueMetadata *type metadata accessor for PreviewDeviceTraitKey()
{
  return &type metadata for PreviewDeviceTraitKey;
}

ValueMetadata *type metadata accessor for PreviewLayoutTraitKey()
{
  return &type metadata for PreviewLayoutTraitKey;
}

ValueMetadata *type metadata accessor for PreviewDisplayNameTraitKey()
{
  return &type metadata for PreviewDisplayNameTraitKey;
}

ValueMetadata *type metadata accessor for PreviewInterfaceOrientationTraitKey()
{
  return &type metadata for PreviewInterfaceOrientationTraitKey;
}

ValueMetadata *type metadata accessor for PreviewContextTraitKey()
{
  return &type metadata for PreviewContextTraitKey;
}

uint64_t destroy for _Preview(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _Preview(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _Preview(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _Preview(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _Preview()
{
  return &type metadata for _Preview;
}

uint64_t sub_18761CE24(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewDeviceTraitKey>, (uint64_t)&type metadata for PreviewDeviceTraitKey, (uint64_t)&protocol witness table for PreviewDeviceTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewDeviceTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_18761CE48(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>, (uint64_t)&type metadata for PreviewLayoutTraitKey, (uint64_t)&protocol witness table for PreviewLayoutTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewLayoutTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_18761CE6C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewDisplayNameTraitKey>, (uint64_t)&type metadata for PreviewDisplayNameTraitKey, (uint64_t)&protocol witness table for PreviewDisplayNameTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewDisplayNameTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_18761CE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewContextTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewContextTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewContextTraitKey>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_18761CF38(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewInterfaceOrientationTraitKey>, (uint64_t)&type metadata for PreviewInterfaceOrientationTraitKey, (uint64_t)&protocol witness table for PreviewInterfaceOrientationTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewInterfaceOrientationTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v7 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, a2);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v7;
  v10[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(a5, a2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

uint64_t storeEnumTagSinglePayload for PreviewPlatform(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18761D034 + 4 * byte_187C451FD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18761D068 + 4 * byte_187C451F8[v4]))();
}

uint64_t sub_18761D068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18761D070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18761D078);
  return result;
}

uint64_t sub_18761D084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18761D08CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18761D090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18761D098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InterfaceOrientation.Orientation()
{
  return &unk_1E1AD3500;
}

ValueMetadata *type metadata accessor for PreviewDescriptor()
{
  return &type metadata for PreviewDescriptor;
}

uint64_t destroy for MakePreviews(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakePreviews(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for MakePreviews(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MakePreviews(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for MakePreviews()
{
  return &unk_1E1AB2840;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InterfaceOrientation.Orientation()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [InterfaceOrientation.Orientation] and conformance [A], &lazy cache variable for type metadata for [InterfaceOrientation.Orientation]);
}

unint64_t lazy protocol witness table accessor for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation;
  if (!lazy protocol witness table cache variable for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InterfaceOrientation.Orientation, &unk_1E1AD3500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation);
  }
  return result;
}

unint64_t type metadata accessor for _VariadicView_Children.Element.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _VariadicView_Children.Element.Type;
  if (!lazy cache variable for type metadata for _VariadicView_Children.Element.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_Children.Element.Type);
  }
  return result;
}

uint64_t _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t))
{
  uint64_t v4;

  type metadata accessor for EnumeratedSequence<_VariadicView_Children>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for EnumeratedSequence<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v7 = a3(a1, MEMORY[0x1E0CE5600], v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void static ScrollAnchorRole.initialOffset.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollAnchorRole.sizeChanges.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollAnchorRole.alignment.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ScrollAnchorRole.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static ScrollAnchorRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int ScrollAnchorRole.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t View.defaultScrollAnchor(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;

  swift_getKeyPath();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = a3 & 1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

double key path getter for EnvironmentValues.scrollAnchors : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  __int128 v4;
  char v5;

  EnvironmentValues.scrollAnchors.getter();
  *(_QWORD *)a1 = v3;
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

double sub_18761D4B4@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  __int128 v4;
  char v5;

  EnvironmentValues.scrollAnchors.getter();
  *(_QWORD *)a1 = v3;
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.scrollAnchors : EnvironmentValues()
{
  swift_bridgeObjectRetain();
  return EnvironmentValues.scrollAnchors.setter();
}

uint64_t sub_18761D550()
{
  swift_bridgeObjectRetain();
  return EnvironmentValues.scrollAnchors.setter();
}

uint64_t sub_18761D59C()
{
  return swift_deallocObject();
}

__n128 partial apply for closure #1 in View.defaultScrollAnchor(_:)(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  if ((v1[2].n128_u8[0] & 1) == 0)
  {
    result = v1[1];
    *(__n128 *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t View.defaultScrollAnchor(_:for:)(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  char v7;
  uint64_t v8;

  v7 = *a4;
  swift_getKeyPath();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_BYTE *)(v8 + 32) = a3 & 1;
  *(_BYTE *)(v8 + 33) = v7;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_18761D67C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.defaultScrollAnchor(_:for:)()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
    return ScrollAnchorStorage.updateRole(_:anchor:)();
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollAnchorRole and conformance ScrollAnchorRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollAnchorRole and conformance ScrollAnchorRole;
  if (!lazy protocol witness table cache variable for type ScrollAnchorRole and conformance ScrollAnchorRole)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollAnchorRole, &type metadata for ScrollAnchorRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollAnchorRole and conformance ScrollAnchorRole);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollAnchorRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18761D764 + 4 * byte_187C45775[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18761D798 + 4 * byte_187C45770[v4]))();
}

uint64_t sub_18761D798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18761D7A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18761D7A8);
  return result;
}

uint64_t sub_18761D7B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18761D7BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18761D7C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18761D7C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollAnchorRole()
{
  return &type metadata for ScrollAnchorRole;
}

uint64_t sub_18761D7E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>)
  {
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollAnchorStorage>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollAnchorStorage> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PopoverPresentation.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

void type metadata accessor for ItemPopoverPresentationModifier()
{
  JUMPOUT(0x18D75FF28);
}

void ItemPopoverPresentationModifier.init(item:popoverContent:attachmentAnchor:arrowEdge:keyType:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Optional();
  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for ItemPopoverPresentationModifier();
}

int *sub_18761D9B8(int *result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v6 = (_QWORD *)(v4 + result[13]);
  *v6 = v3;
  v6[1] = v8;
  v7 = v4 + result[14];
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v1;
  *(_BYTE *)(v7 + 16) = v2;
  *(_BYTE *)(v4 + result[15]) = v10;
  *(_BYTE *)(v4 + result[16]) = v9;
  return result;
}

void View.popover<A, B>(item:attachmentAnchor:content:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for ItemPopoverPresentationModifier();
}

void sub_18761DAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v18 = *v12;
  v17 = v12[1];
  v19 = *((_BYTE *)v12 + 16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v10, *(_QWORD *)(v13 - 168), v9, v14);
  *(_QWORD *)(v13 - 112) = v18;
  *(_QWORD *)(v13 - 104) = v17;
  *(_BYTE *)(v13 - 96) = v19;
  ItemPopoverPresentationModifier.init(item:popoverContent:attachmentAnchor:arrowEdge:keyType:)(v10, (uint64_t)v16);
}

uint64_t sub_18761DB38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v3, v0, v5);
  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v6 - 136), v4, *(_QWORD *)(v6 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
}

uint64_t View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  __int16 v34;

  v17 = *(_QWORD *)a4;
  v18 = *(_QWORD *)(a4 + 8);
  v19 = *(_BYTE *)(a4 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v17, v18, v19);
  static Semantics.v6.getter();
  v20 = isLinkedOnOrAfter(_:)();
  v26[0] = a1;
  v26[1] = a2;
  if (a5)
    v22 = a5;
  else
    v22 = 4;
  v27 = a3;
  if ((v20 & 1) != 0)
    v22 = a5;
  v28 = a6;
  v29 = a7;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  v33 = v22;
  v34 = 256;
  v23 = type metadata accessor for PopoverPresentationModifier(0, a9, a11, v21);
  MEMORY[0x18D75B4AC](v26, a8, v23, a10);
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of Environment<CGFloat?>.Content(v17, v18, v19);
}

__n128 PopoverPresentationModifier.init(isPresented:popoverContent:attachmentAnchor:arrowEdge:isDetachable:keyType:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __n128 *a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10)
{
  unsigned __int8 v10;
  __n128 result;

  v10 = a6[1].n128_u8[0];
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  result = *a6;
  *(__n128 *)(a9 + 40) = *a6;
  *(_BYTE *)(a9 + 56) = v10;
  *(_BYTE *)(a9 + 57) = a7;
  *(_BYTE *)(a9 + 58) = a8;
  *(_BYTE *)(a9 + 59) = a10 & 1;
  return result;
}

uint64_t type metadata accessor for PopoverPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PopoverPresentationModifier);
}

uint64_t View.popover<A>(isPresented:attachmentAnchor:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  char v26;

  v11 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(_BYTE *)(a4 + 16);
  v18[0] = a1;
  v18[1] = a2;
  v19 = a3;
  v20 = a5;
  v21 = a6;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  v25 = 4;
  v26 = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  v15 = type metadata accessor for PopoverPresentationModifier(0, a8, a10, v14);
  MEMORY[0x18D75B4AC](v18, a7, v15, a9);
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of Environment<CGFloat?>.Content(v11, v12, v13);
}

void View.popover<A>(isPresented:isDetachable:attachmentAnchor:arrowEdge:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for PopoverAttachmentAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PopoverAttachmentAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PopoverAttachmentAnchor(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
  return a1;
}

void sub_18761DEF8()
{
  type metadata accessor for ItemPopoverPresentationModifier();
}

uint64_t sub_18761DF28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[10];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for ItemPopoverPresentationModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

uint64_t sub_18761DF68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for PopoverPresentationModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for PopoverPresentationModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t destroy for PopoverPresentation(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PopoverPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v5 = (_OWORD *)(a1 + 48);
  v6 = a2 + 48;
  v7 = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 48, v6, v7);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v6 + 32);
  }
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PopoverPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v5 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v7)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 48);
      v8 = *(_QWORD *)(a2 + 80);
      v9 = *(_OWORD *)(a2 + 64);
      *v5 = *v6;
      *(_OWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 80) = v8;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
  }
  else
  {
    v10 = *v6;
    v11 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *v5 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PopoverPresentation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_QWORD *)(a2 + 72))
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    else
      outlined destroy of AnyHashable(a1 + 48);
  }
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for PopoverPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for PopoverPresentationModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for PopoverPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  return a1;
}

uint64_t assignWithCopy for PopoverPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v9, v10);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  return a1;
}

uint64_t assignWithTake for PopoverPresentationModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v4;
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  return a1;
}

uint64_t type metadata completion function for ItemPopoverPresentationModifier()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemPopoverPresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  const void *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = (v7 + 16) & ~v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  v10 = v8 + v9;
  v11 = v6 & 0x100000;
  v12 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v11 != 0
    || ((((v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 19 > 0x18)
  {
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v16 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = (void *)(((unint64_t)v16 + v7 + 8) & ~v7);
    v19 = (const void *)(((unint64_t)v17 + v7 + 8) & ~v7);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v20(v19, 1, v4))
    {
      memcpy(v18, v19, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v18, v19, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    }
    v21 = (_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    v25 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_BYTE *)(v25 + 16);
    swift_retain();
    outlined copy of Environment<CGFloat?>.Content(v26, v27, v28);
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
    *(_BYTE *)(v24 + 16) = v28;
    *(_BYTE *)(v24 + 17) = *(_BYTE *)(v25 + 17);
    *(_BYTE *)(v24 + 18) = *(_BYTE *)(v25 + 18);
  }
  return a1;
}

uint64_t destroy for ItemPopoverPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  v9 = a1 + *(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7);
  if (!*(_DWORD *)(v6 + 84))
    ++v9;
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)((v10 + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 16));
}

_QWORD *initializeWithCopy for ItemPopoverPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  v16 = v14 + ((v9 + 16) & ~v9);
  if (!v13)
    ++v16;
  v17 = (_QWORD *)(((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_BYTE *)(v21 + 16);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v22, v23, v24);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_BYTE *)(v20 + 16) = v24;
  *(_BYTE *)(v20 + 17) = *(_BYTE *)(v21 + 17);
  *(_BYTE *)(v20 + 18) = *(_BYTE *)(v21 + 18);
  return a1;
}

_QWORD *assignWithCopy for ItemPopoverPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  v12 = (void *)((v10 + 8 + v6) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v7) = v13(v11, 1, v8);
  v14 = v13(v12, 1, v8);
  if ((_DWORD)v7)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v9 + 84))
      v15 = *(_QWORD *)(v9 + 64);
    else
      v15 = *(_QWORD *)(v9 + 64) + 1;
    memcpy(v11, v12, v15);
    goto LABEL_10;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
LABEL_10:
  v16 = *(_QWORD *)(v9 + 64) + ((v10 + 16) & ~v10);
  if (!*(_DWORD *)(v9 + 84))
    ++v16;
  v17 = (_QWORD *)(((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  v20 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  LOBYTE(v18) = *(_BYTE *)(v21 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v21, v23, (char)v18);
  v24 = *(_QWORD *)v20;
  v25 = *(_QWORD *)(v20 + 8);
  v26 = *(_BYTE *)(v20 + 16);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_BYTE *)(v20 + 16) = (_BYTE)v18;
  outlined consume of Environment<CGFloat?>.Content(v24, v25, v26);
  *(_BYTE *)(v20 + 17) = *(_BYTE *)(v21 + 17);
  *(_BYTE *)(v20 + 18) = *(_BYTE *)(v21 + 18);
  return a1;
}

_QWORD *initializeWithTake for ItemPopoverPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  v15 = v13 + ((v9 + 16) & ~v9);
  if (!v12)
    ++v15;
  v16 = (_OWORD *)(((unint64_t)a1 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v17 = (_OWORD *)(((unint64_t)a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)v19;
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  *(_OWORD *)v18 = v20;
  *(_BYTE *)(v18 + 17) = *(_BYTE *)(v19 + 17);
  *(_BYTE *)(v18 + 18) = *(_BYTE *)(v19 + 18);
  return a1;
}

_QWORD *assignWithTake for ItemPopoverPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  v13 = (void *)((v11 + 8 + v8) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v10 + 84))
      v16 = *(_QWORD *)(v10 + 64);
    else
      v16 = *(_QWORD *)(v10 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
LABEL_10:
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84))
    ++v17;
  v18 = (_OWORD *)(((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t)a2 + v17 + 7;
  v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v18 = *(_OWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 &= 0xFFFFFFFFFFFFFFF8;
  v22 = *(_BYTE *)(v20 + 16);
  v23 = *(_QWORD *)v21;
  v24 = *(_QWORD *)(v21 + 8);
  v25 = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v20;
  *(_BYTE *)(v21 + 16) = v22;
  outlined consume of Environment<CGFloat?>.Content(v23, v24, v25);
  *(_BYTE *)(v21 + 17) = *(_BYTE *)(v20 + 17);
  *(_BYTE *)(v21 + 18) = *(_BYTE *)(v20 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemPopoverPresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    v10 = ((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 19;
    v11 = (a2 - v7 + 0xFFFFFF) >> (8 * v10);
    if ((_DWORD)v10 == 3)
      v12 = v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X15 }
  }
  v16 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0x80000000) != 0)
  {
    v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v9 + 8) & ~v9);
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  else
  {
    v17 = *v16;
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    return (v17 + 1);
  }
}

void storeEnumTagSinglePayload for ItemPopoverPresentationModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((((v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 19;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 0xFFFFFF) >> (8 * v12);
    if ((((((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    v16 = ~v10 + a2;
    bzero(a1, v12);
    if ((_DWORD)v12 == 3)
    {
      *a1 = v16;
      *((_BYTE *)a1 + 2) = BYTE2(v16);
    }
    else
    {
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X11 }
  }
  __asm { BR              X15 }
}

void sub_18761F1BC(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F1C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18761F1CCLL);
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F1E4(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F1EC(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F1F4(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x18761F278);
      JUMPOUT(0x18761F274);
    }
    JUMPOUT(0x18761F200);
  }
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F26C()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F2B0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F2B8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18761F27CLL);
}

void sub_18761F2C8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x18761F27CLL);
}

uint64_t associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in ItemPopoverPresentationModifier<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void PopoverContent.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  uint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD v96[2];

  v3 = v2;
  v87 = a2;
  v5 = type metadata accessor for ModifiedContent();
  v63 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v60 - v7;
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  v9 = type metadata accessor for ModifiedContent();
  v75 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v60 = (char *)&v60 - v11;
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  v67 = v12;
  v77 = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v61 = (char *)&v60 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E0CE4550], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  v71 = v16;
  v76 = v17;
  MEMORY[0x1E0C80A78](v16, v16);
  v64 = (char *)&v60 - v18;
  v19 = type metadata accessor for ModifiedContent();
  v20 = *(_QWORD *)(v19 - 8);
  v69 = v19;
  v78 = v20;
  MEMORY[0x1E0C80A78](v19, v21);
  v68 = (char *)&v60 - v22;
  v23 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v24 = type metadata accessor for ModifiedContent();
  v25 = *(_QWORD *)(v24 - 8);
  v73 = v24;
  v80 = v25;
  MEMORY[0x1E0C80A78](v24, v24);
  v65 = (char *)&v60 - v26;
  v27 = type metadata accessor for ModifiedContent();
  v84 = *(_QWORD *)(v27 - 8);
  v74 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v70 = (char *)&v60 - v29;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v23);
  v30 = type metadata accessor for ModifiedContent();
  v31 = *(_QWORD *)(v30 - 8);
  v79 = v30;
  v85 = v31;
  MEMORY[0x1E0C80A78](v30, v30);
  v72 = (char *)&v60 - v32;
  v81 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))v23);
  v82 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))v23);
  v62 = type metadata accessor for ModifiedContent();
  v86 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v33);
  v66 = (char *)&v60 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v83 = (char *)&v60 - v37;
  v38 = a1;
  static Alignment.center.getter();
  v59 = *(_QWORD *)(a1 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v96[0] = v59;
  v96[1] = MEMORY[0x1E0CE35E0];
  v39 = MEMORY[0x1E0CE2E70];
  v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v96);
  v41 = v60;
  View.renderContainerBackgroundInHostingView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v5);
  swift_getKeyPath();
  v42 = (uint64_t *)(v3 + *(int *)(v38 + 40));
  v43 = *v42;
  v44 = v42[1];
  LOBYTE(v23) = *((_BYTE *)v42 + 16);
  swift_retain();
  swift_retain();
  v93 = v43;
  v94 = v44;
  v95 = (char)v23;
  v45 = lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>();
  v92[0] = v40;
  v92[1] = v45;
  v46 = MEMORY[0x18D75FFDC](v39, v9, v92);
  v47 = v61;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v9);
  swift_getKeyPath();
  LOBYTE(v93) = 2;
  v48 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>();
  v91[0] = v46;
  v91[1] = v48;
  v49 = v67;
  v50 = MEMORY[0x18D75FFDC](v39, v67, v91);
  v51 = v64;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v47, v49);
  v52 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>();
  v90[0] = v50;
  v90[1] = v52;
  v53 = v71;
  v54 = MEMORY[0x18D75FFDC](v39, v71, v90);
  v55 = v68;
  View.resetScrollEnvironment()(v53, v54);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v53);
  v89[0] = v54;
  v89[1] = &protocol witness table for ResetScrollEnvironmentModifier;
  v56 = v69;
  v57 = MEMORY[0x18D75FFDC](v39, v69, v89);
  View.resetListStackBehavior()();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v55, v56);
  v58 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  v88[0] = v57;
  v88[1] = v58;
  MEMORY[0x18D75FFDC](v39, v73, v88);
  View.resetFormEnvironment()();
}

uint64_t sub_18761FA2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 352) + 8))(v3, v2);
  swift_getKeyPath();
  *(_BYTE *)(v5 - 128) = 0;
  *(_QWORD *)(v5 - 224) = v1;
  *(_QWORD *)(v5 - 216) = &protocol witness table for ResetFormEnvironmentModifier;
  v6 = *(_QWORD *)(v5 - 400);
  v7 = MEMORY[0x18D75FFDC](v0, v6, v5 - 224);
  v8 = *(_QWORD *)(v5 - 416);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 320) + 8))(v4, v6);
  v9 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
  *(_QWORD *)(v5 - 240) = v7;
  *(_QWORD *)(v5 - 232) = v9;
  v10 = *(_QWORD *)(v5 - 360);
  v11 = MEMORY[0x18D75FFDC](v0, v10, v5 - 240);
  v12 = *(_QWORD *)(v5 - 464);
  View.clearNavigationContext()(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 312) + 8))(v8, v10);
  *(_QWORD *)(v5 - 256) = v11;
  *(_QWORD *)(v5 - 248) = &protocol witness table for ClearNavigationContextModifier;
  v13 = MEMORY[0x18D75FFDC](v0, *(_QWORD *)(v5 - 344), v5 - 256);
  v14 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  *(_QWORD *)(v5 - 272) = v13;
  *(_QWORD *)(v5 - 264) = v14;
  v15 = MEMORY[0x18D75FFDC](v0, *(_QWORD *)(v5 - 336), v5 - 272);
  v16 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  *(_QWORD *)(v5 - 288) = v15;
  *(_QWORD *)(v5 - 280) = v16;
  v17 = *(_QWORD *)(v5 - 496);
  v18 = MEMORY[0x18D75FFDC](v0, v17, v5 - 288);
  v19 = *(_QWORD *)(v5 - 328);
  static ViewBuilder.buildExpression<A>(_:)(v12, v17, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 304) + 8);
  v20(v12, v17);
  static ViewBuilder.buildBlock<A>(_:)(v19, v17, *(_QWORD *)(v5 - 296));
  return ((uint64_t (*)(uint64_t, uint64_t))v20)(v19, v17);
}

uint64_t ItemPopoverPresentationModifier.$item.getter()
{
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  return Binding.projectedValue.getter();
}

void ItemPopoverPresentationModifier.resolve(in:)(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Optional();
  v1 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v1, v2);
  ItemPopoverPresentationModifier.$item.getter();
  ItemPopoverPresentationModifier.PopoverModifier.init(viewID:item:popoverContent:attachmentAnchor:arrowEdge:environment:keyType:)(0, a1);
}

uint64_t sub_18761FD7C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v1, v2, v0);
  swift_retain();
  return swift_retain();
}

void ItemPopoverPresentationModifier.PopoverModifier.init(viewID:item:popoverContent:attachmentAnchor:arrowEdge:environment:keyType:)(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_18761FE3C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v9 = v1 + a1[13];
  type metadata accessor for Optional();
  v10 = type metadata accessor for Binding();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v5, v10);
  v12 = (_QWORD *)(v1 + a1[14]);
  *v12 = v4;
  v12[1] = v16;
  v13 = v1 + a1[15];
  *(_QWORD *)v13 = v7;
  *(_QWORD *)(v13 + 8) = v2;
  *(_BYTE *)(v13 + 16) = v6;
  *(_BYTE *)(v1 + a1[16]) = v18;
  v14 = (_QWORD *)(v1 + a1[17]);
  *v14 = v3;
  v14[1] = v15;
  *(_BYTE *)(v1 + a1[18]) = v17;
  return result;
}

uint64_t ItemPopoverPresentationModifier.PopoverModifier.viewID.getter()
{
  unsigned int *v0;
  uint64_t result;

  result = *v0;
  if (!(_DWORD)result)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t ItemPopoverPresentationModifier.PopoverModifier.item.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  type metadata accessor for Optional();
  v3 = type metadata accessor for Binding();
  return a2(v3);
}

uint64_t ItemPopoverPresentationModifier.PopoverModifier.anchor.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v12[-v7];
  ItemPopoverPresentationModifier.PopoverModifier.item.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
  v13 = v3;
  v14 = *(_OWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = v1;
  type metadata accessor for CGRect?(0, &lazy cache variable for type metadata for Anchor<CGRect>.Source, MEMORY[0x1E0CE7340]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ItemPopoverPresentationModifier.PopoverModifier.anchor.getter, (uint64_t)v12, MEMORY[0x1E0DEDCE8], v9, v10, (uint64_t)&v17);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  return v17;
}

void closure #1 in ItemPopoverPresentationModifier.PopoverModifier.anchor.getter()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_1876200C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  if ((*(_BYTE *)(v2 + *(int *)(a1 + 60) + 16) & 1) != 0)
  {
    UnitRect.init(point:)();
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
    result = Anchor.Source.init<A>(anchor:)();
  }
  else
  {
    result = swift_retain();
  }
  *v1 = result;
  return result;
}

uint64_t ItemPopoverPresentationModifier.PopoverModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[2];
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  if (*(_BYTE *)(v3 + *(int *)(v8 + 72)) == 1)
  {
    ItemPopoverPresentationModifier.PopoverModifier.anchor.getter(v8);
    type metadata accessor for CGRect(0);
    v9 = Anchor.Source.init<A>(_:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
    v10 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v11 = swift_allocObject();
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v11 + 32) = v12;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>.PopoverModifier, a2);
    v13 = type metadata accessor for _ViewModifier_Content();
    type metadata accessor for CGRect?(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v15 = v14;
    v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v13);
    View.transformAnchorPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for PopoverPresentation.Key, v9, (uint64_t)partial apply for closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:), v11, v13, v15, (uint64_t)&type metadata for PopoverPresentation.Key, v16, (uint64_t)&protocol witness table for PopoverPresentation.Key);
    swift_release();
    swift_release();
    v43 = v52;
    v55 = v52;
    v56 = v53;
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
    v17 = type metadata accessor for ModifiedContent();
    v45[0] = v16;
    v45[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
    v18 = MEMORY[0x1E0CE2E70];
    v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v45);
    static ViewBuilder.buildExpression<A>(_:)(&v55, v17, v19);
    swift_release();
    swift_release();
    v43 = v57;
    v52 = v57;
    v53 = v58;
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v52, v17, (uint64_t)&v55);
    v42 = v55;
    v50 = v55;
    v51 = v56;
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
    v20 = type metadata accessor for ModifiedContent();
    v44[0] = v16;
    v44[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
    MEMORY[0x18D75FFDC](v18, v20, v44);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v50, v17);
  }
  else
  {
    ItemPopoverPresentationModifier.PopoverModifier.anchor.getter(v8);
    type metadata accessor for CGRect(0);
    v21 = Anchor.Source.init<A>(_:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
    v22 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v23 = swift_allocObject();
    v24 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v23 + 32) = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v22, (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
    *(_QWORD *)&v57 = v21;
    *((_QWORD *)&v57 + 1) = partial apply for closure #2 in ItemPopoverPresentationModifier.PopoverModifier.body(content:);
    v58 = v23;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>.PopoverModifier, a2);
    v25 = type metadata accessor for _ViewModifier_Content();
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(0, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
    v27 = v26;
    v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v25);
    MEMORY[0x18D75B4AC](&v52, &v57, v25, v27, v28);
    swift_release();
    swift_release();
    v43 = v52;
    v55 = v52;
    v56 = v53;
    v29 = type metadata accessor for ModifiedContent();
    v54[0] = v28;
    v54[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
    v30 = MEMORY[0x1E0CE2E70];
    v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v54);
    static ViewBuilder.buildExpression<A>(_:)(&v55, v29, v31);
    swift_release();
    swift_release();
    v43 = v57;
    v52 = v57;
    v53 = v58;
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v52, v29, (uint64_t)&v55);
    v42 = v55;
    v50 = v55;
    v51 = v56;
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
    v32 = type metadata accessor for ModifiedContent();
    v49[0] = v28;
    v49[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
    MEMORY[0x18D75FFDC](v30, v32, v49);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v50, v32, v29);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>.PopoverModifier, a2);
  v33 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
  v34 = type metadata accessor for ModifiedContent();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
  v35 = type metadata accessor for ModifiedContent();
  v36 = type metadata accessor for _ConditionalContent();
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v33);
  v48[0] = v37;
  v48[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
  v38 = MEMORY[0x1E0CE2E70];
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v34, v48);
  v47[0] = v37;
  v47[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
  v40 = MEMORY[0x18D75FFDC](v38, v35, v47);
  v46[0] = v39;
  v46[1] = v40;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v36, v46);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v52, v36, a3);
  return outlined consume of _ConditionalContent<ModifiedContent<_ViewModifier_Content<PopoverPresentationModifier<A>.PopoverModifier>, _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>>, ModifiedContent<_ViewModifier_Content<PopoverPresentationModifier<A>.PopoverModifier>, EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>>>.Storage<A>();
}

uint64_t ItemPopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[4];
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  _OWORD v78[2];
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v55 = a1;
  v4 = a2[2];
  type metadata accessor for Optional();
  v5 = type metadata accessor for Binding();
  v6 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  v59 = v6;
  MEMORY[0x1E0C80A78](v5, v7);
  v57 = (char *)&v51 - v8;
  v9 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v11, v12);
  v54 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(a2 - 1);
  v14 = *(_QWORD *)(v13 + 64);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, _QWORD *, double))(v13 + 16))(v18, v2, a2, v17);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v53 = v9;
  v19((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v55, v4);
  v20 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = (v14 + v20 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v22 = (char *)swift_allocObject();
  v23 = (uint64_t)a2;
  v25 = a2[3];
  v24 = a2[4];
  v26 = v52;
  *((_QWORD *)v22 + 2) = v52;
  *((_QWORD *)v22 + 3) = v25;
  v27 = a2[5];
  v56 = v23;
  *((_QWORD *)v22 + 4) = v24;
  *((_QWORD *)v22 + 5) = v27;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v22[v20], v18, v23);
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v22[v21], v54, v26);
  *(_QWORD *)&v78[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(partial apply for closure #1 in ItemPopoverPresentationModifier.PopoverModifier.wrappedContent(_:));
  *((_QWORD *)&v78[0] + 1) = v28;
  v30 = type metadata accessor for LazyView(0, v25, v27, v29);
  v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyView<A>, v30);
  View.clearNavigationContext()(v31, (uint64_t)&v60);
  swift_release();
  v73 = v60;
  v74 = v61;
  v75 = BYTE8(v61);
  v76 = v62;
  v77 = v63;
  v32 = v57;
  ItemPopoverPresentationModifier.PopoverModifier.item.getter(v56, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7548]);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v26);
  v34 = type metadata accessor for PresentationMode.FromItem(0, v26, v24, v33);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationMode.FromItem<A>, v34);
  v35 = v58;
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v35);
  v58 = v71[3];
  v59 = v71[2];
  LODWORD(v57) = v72;
  v36 = type metadata accessor for ModifiedContent();
  v37 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v38 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))v37);
  v39 = type metadata accessor for ModifiedContent();
  v71[0] = v31;
  v71[1] = &protocol witness table for ClearNavigationContextModifier;
  v40 = MEMORY[0x1E0CE2E70];
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v36, v71);
  v42 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  v70[0] = v41;
  v70[1] = v42;
  v43 = MEMORY[0x18D75FFDC](v40, v38, v70);
  v44 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  v69[0] = v43;
  v69[1] = v44;
  v45 = MEMORY[0x18D75FFDC](v40, v39, v69);
  v78[0] = vdupq_n_s64(0x4051000000000000uLL);
  v47 = type metadata accessor for PopoverContent(0, v39, v45, v46);
  (*(void (**)(char *, __int128 *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))((char *)v78 + *(int *)(v47 + 36), &v73, v39);
  v48 = (char *)v78 + *(int *)(v47 + 40);
  v49 = v58;
  *(_QWORD *)v48 = v59;
  *((_QWORD *)v48 + 1) = v49;
  v48[16] = (char)v57;
  v60 = v78[0];
  v61 = v78[1];
  v62 = v79;
  LOBYTE(v63) = v80;
  v64 = v81;
  v65 = v82;
  v66 = v83;
  v67 = v84;
  v68 = v85;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverContent<A>, v47);
  return AnyView.init<A>(_:)();
}

void implicit closure #1 in closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

void (*sub_187620D1C(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  _BYTE v15[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v15[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16))(&v15[-v10], v6, a1, v9);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = v5;
  *((_QWORD *)v13 + 3) = v4;
  *((_QWORD *)v13 + 4) = v3;
  *((_QWORD *)v13 + 5) = v2;
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v13[v12], v11, a1);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:);
}

uint64_t ItemPopoverPresentationModifier.PopoverModifier.dismiss()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v1 - 8) + 56))((char *)&v9 - v6, 1, 1, v1, v5);
  specialized ItemNavigationLinkModifier.item.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
}

void closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[44];

  v20[5] = a8;
  v20[10] = a2;
  v20[11] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20[8] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v20[6] = (char *)v20 - v14;
  v15 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v20[9] = (char *)v20 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[30] = a4;
  v20[31] = a5;
  v20[3] = a5;
  v20[4] = a7;
  v20[32] = a6;
  v20[33] = a7;
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_187620F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char **v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  ItemPopoverPresentationModifier.PopoverModifier.item.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v2) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v3);
  *(_QWORD *)(v1 + 16) = v8;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13 = *(_QWORD *)(v1 + 72);
  v12(v13, v4, v2);
  *(_QWORD *)(v1 + 8) = ItemPopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(v13, (_QWORD *)a1);
  *(_DWORD *)(v1 + 4) = *(unsigned __int8 *)(v5 + *(int *)(a1 + 64));
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v1 + 40))(v5, v2, *(_QWORD *)(v1 + 24), v7, *(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = v15;
  *(_QWORD *)(v1 + 40) = v14;
  v16 = ItemPopoverPresentationModifier.PopoverModifier.viewID.getter();
  v17 = *(_QWORD *)(v1 + 80);
  swift_retain();
  v18 = *(_QWORD *)(v1 + 48);
  dispatch thunk of RawRepresentable.rawValue.getter();
  v19 = *(_QWORD *)(v1 + 64);
  swift_getAssociatedConformanceWitness();
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 56) + 8))(v18, v19);
  v20 = (uint64_t *)(v5 + *(int *)(a1 + 68));
  v21 = *v20;
  v22 = v20[1];
  *(_QWORD *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_QWORD *)(v1 + 96) = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(v1 + 104) = *(_DWORD *)(v1 + 4);
  v23 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 112) = v17;
  *(_QWORD *)(v1 + 120) = v23;
  *(_QWORD *)(v1 + 128) = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 140) = v16;
  swift_retain();
  swift_retain();
  outlined assign with take of AnyHashable?(v1 + 200, v1 + 144);
  *(_QWORD *)(v1 + 184) = v21;
  *(_QWORD *)(v9 - 96) = v22;
  v24 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v9 - 192) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v9 - 176) = v24;
  v25 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v9 - 160) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v9 - 144) = v25;
  v26 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v9 - 128) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v9 - 112) = v26;
  v27 = *(char ***)(v1 + 88);
  v28 = *v27;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v30 = *(_QWORD *)(v1 + 16);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
  v32 = *((_QWORD *)v28 + 2);
  v31 = *((_QWORD *)v28 + 3);
  if (v32 >= v31 >> 1)
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v28);
  *((_QWORD *)v28 + 2) = v32 + 1;
  v33 = &v28[104 * v32];
  v34 = *(_OWORD *)(v9 - 192);
  v35 = *(_OWORD *)(v9 - 160);
  *((_OWORD *)v33 + 3) = *(_OWORD *)(v9 - 176);
  *((_OWORD *)v33 + 4) = v35;
  *((_OWORD *)v33 + 2) = v34;
  v36 = *(_OWORD *)(v9 - 144);
  v37 = *(_OWORD *)(v9 - 128);
  v38 = *(_OWORD *)(v9 - 112);
  *((_QWORD *)v33 + 16) = *(_QWORD *)(v9 - 96);
  *((_OWORD *)v33 + 6) = v37;
  *((_OWORD *)v33 + 7) = v38;
  *((_OWORD *)v33 + 5) = v36;
  *v27 = v28;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v13, v2);
}

void implicit closure #1 in closure #2 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

void (*sub_187621238(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  _BYTE v15[96];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v15[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16))(&v15[-v10], v6, a1, v9);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = v5;
  *((_QWORD *)v13 + 3) = v4;
  *((_QWORD *)v13 + 4) = v3;
  *((_QWORD *)v13 + 5) = v2;
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v13[v12], v11, a1);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:);
}

void closure #1 in ItemPopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_187621378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 56)))(v7);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v2);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v6, v1, v4);
  return v9(v6, v1);
}

uint64_t associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in PopoverPresentationModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ItemPopoverPresentationModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>, a5);
  return static EnvironmentalModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ItemPopoverPresentationModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>, a5);
  return static EnvironmentalModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t PopoverPresentationModifier.resolve(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_BYTE *)(v2 + 56);
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_retain();
  v7 = type metadata accessor for PopoverPresentationModifier.PopoverModifier(0, v10, v9, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier, v7);
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  ViewModifier.requiring<A>(_:)((uint64_t)&type metadata for AllowPresentationPredicate, v7, a2);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
  swift_release();
  return swift_release();
}

uint64_t PopoverPresentationModifier.PopoverModifier.WrappedContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int8 *v36;
  uint64_t v37;
  void (*v38)(int64x2_t *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];

  v4 = v3;
  v43 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModifiedContent();
  v10 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))v10);
  v12 = type metadata accessor for ModifiedContent();
  v41 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v40 - v15;
  v17 = *(_QWORD *)(a1 + 24);
  v46[0] = v17;
  v46[1] = &protocol witness table for ClearNavigationContextModifier;
  v18 = MEMORY[0x1E0CE2E70];
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v46, v14);
  v20 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  v45[0] = v19;
  v45[1] = v20;
  v21 = MEMORY[0x18D75FFDC](v18, v11, v45);
  v22 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  v44[0] = v21;
  v44[1] = v22;
  v23 = MEMORY[0x18D75FFDC](v18, v12, v44);
  v25 = type metadata accessor for PopoverContent(0, v12, v23, v24);
  v40 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (int64x2_t *)((char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = (char *)&v40 - v32;
  ((void (*)(double))v4[3])(v31);
  View.clearNavigationContext()(v17, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
  v34 = *v4;
  LOBYTE(v6) = *((_BYTE *)v4 + 16);
  lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented();
  swift_retain();
  swift_retain();
  v35 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  *v28 = vdupq_n_s64(0x4051000000000000uLL);
  (*(void (**)(__int8 *, char *, uint64_t))(v41 + 32))(&v28->i8[*(int *)(v25 + 36)], v16, v12);
  v36 = &v28->i8[*(int *)(v25 + 40)];
  *(_QWORD *)v36 = v34;
  *((_QWORD *)v36 + 1) = v35;
  v36[16] = v6;
  v37 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverContent<A>, v25);
  static ViewBuilder.buildExpression<A>(_:)(v28, v25, v37);
  v38 = *(void (**)(int64x2_t *, uint64_t))(v40 + 8);
  v38(v28, v25);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v33, v25, v43);
  return ((uint64_t (*)(char *, uint64_t))v38)(v33, v25);
}

uint64_t PopoverPresentationModifier.PopoverModifier.isPresented.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance PopoverPresentationModifier<A>.PopoverModifier.WrappedContent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PopoverPresentationModifier.PopoverModifier.WrappedContent.body.getter(a1, a2, a3);
}

uint64_t PopoverPresentationModifier.PopoverModifier.anchor.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t result;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 64);
  *(_QWORD *)&v6 = *(_QWORD *)(v0 + 8);
  *((_QWORD *)&v6 + 1) = v1;
  LOBYTE(v7) = v2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v5);
  result = 0;
  if (LOBYTE(v5[0]) == 1)
  {
    if ((v3 & 1) != 0)
    {
      UnitRect.init(point:)();
      v5[0] = v6;
      v5[1] = v7;
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
      return Anchor.Source.init<A>(anchor:)();
    }
    else
    {
      return swift_retain();
    }
  }
  return result;
}

uint64_t PopoverPresentationModifier.PopoverModifier.wrappedContent.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_retain();
  v4 = type metadata accessor for PopoverPresentationModifier.PopoverModifier.WrappedContent(0, v1, v2, v3);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier.WrappedContent, v4);
  return AnyView.init<A>(_:)();
}

uint64_t PopoverPresentationModifier.PopoverModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;
  _QWORD v55[2];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v5 = v2[4];
  v69 = v2[3];
  v70 = v5;
  v6 = v2[2];
  v67 = v2[1];
  v68 = v6;
  v71 = *((_QWORD *)v2 + 10);
  v66 = *v2;
  v7 = v2[3];
  v60 = v2[2];
  v61 = v7;
  v62 = v2[4];
  v63 = *((_QWORD *)v2 + 10);
  v8 = v2[1];
  v58 = *v2;
  v59 = v8;
  PopoverPresentationModifier.PopoverModifier.anchor.getter();
  type metadata accessor for CGRect(0);
  v9 = Anchor.Source.init<A>(_:)();
  if (BYTE3(v70) == 1)
  {
    v10 = swift_allocObject();
    v11 = *(_OWORD *)(a1 + 16);
    v12 = v68;
    v13 = v70;
    *(_OWORD *)(v10 + 80) = v69;
    *(_OWORD *)(v10 + 96) = v13;
    v14 = v66;
    v15 = v67;
    *(_OWORD *)(v10 + 16) = v11;
    *(_OWORD *)(v10 + 32) = v14;
    *(_QWORD *)(v10 + 112) = v71;
    *(_OWORD *)(v10 + 48) = v15;
    *(_OWORD *)(v10 + 64) = v12;
    outlined retain of PopoverPresentationModifier<A>.PopoverModifier((uint64_t)&v66);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier, a1);
    v16 = type metadata accessor for _ViewModifier_Content();
    type metadata accessor for CGRect?(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v18 = v17;
    v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v16);
    View.transformAnchorPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for PopoverPresentation.Key, v9, (uint64_t)partial apply for closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:), v10, v16, v18, (uint64_t)&type metadata for PopoverPresentation.Key, v19, (uint64_t)&protocol witness table for PopoverPresentation.Key);
    swift_release();
    swift_release();
    v56 = v58;
    v57 = v59;
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
    v20 = type metadata accessor for ModifiedContent();
    v48[0] = v19;
    v48[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
    v21 = MEMORY[0x1E0CE2E70];
    v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v48);
    static ViewBuilder.buildExpression<A>(_:)(&v56, v20, v22);
    swift_release();
    swift_release();
    v58 = v64;
    *(_QWORD *)&v59 = v65;
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v58, v20, (uint64_t)&v56);
    v53 = v56;
    v54 = v57;
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
    v23 = type metadata accessor for ModifiedContent();
    v47[0] = v19;
    v47[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
    MEMORY[0x18D75FFDC](v21, v23, v47);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v53, v20);
  }
  else
  {
    v24 = swift_allocObject();
    v25 = *(_OWORD *)(a1 + 16);
    v26 = v68;
    v27 = v70;
    *(_OWORD *)(v24 + 80) = v69;
    *(_OWORD *)(v24 + 96) = v27;
    v28 = v66;
    v29 = v67;
    *(_OWORD *)(v24 + 16) = v25;
    *(_OWORD *)(v24 + 32) = v28;
    *(_QWORD *)(v24 + 112) = v71;
    *(_OWORD *)(v24 + 48) = v29;
    *(_OWORD *)(v24 + 64) = v26;
    *(_QWORD *)&v64 = v9;
    *((_QWORD *)&v64 + 1) = partial apply for closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:);
    v65 = v24;
    outlined retain of PopoverPresentationModifier<A>.PopoverModifier((uint64_t)&v66);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier, a1);
    v30 = type metadata accessor for _ViewModifier_Content();
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(0, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
    v32 = v31;
    v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v30);
    MEMORY[0x18D75B4AC](&v58, &v64, v30, v32, v33);
    swift_release();
    swift_release();
    v56 = v58;
    v57 = v59;
    v34 = type metadata accessor for ModifiedContent();
    v55[0] = v33;
    v55[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
    v35 = MEMORY[0x1E0CE2E70];
    v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v34, v55);
    static ViewBuilder.buildExpression<A>(_:)(&v56, v34, v36);
    swift_release();
    swift_release();
    v58 = v64;
    *(_QWORD *)&v59 = v65;
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v58, v34, (uint64_t)&v56);
    v53 = v56;
    v54 = v57;
    type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
    v37 = type metadata accessor for ModifiedContent();
    v52[0] = v33;
    v52[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
    MEMORY[0x18D75FFDC](v35, v37, v52);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v53, v37, v34);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier, a1);
  v38 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
  v39 = type metadata accessor for ModifiedContent();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
  v40 = type metadata accessor for ModifiedContent();
  v41 = type metadata accessor for _ConditionalContent();
  v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v38);
  v51[0] = v42;
  v51[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
  v43 = MEMORY[0x1E0CE2E70];
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v39, v51);
  v50[0] = v42;
  v50[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
  v45 = MEMORY[0x18D75FFDC](v43, v40, v50);
  v49[0] = v44;
  v49[1] = v45;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v41, v49);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v58, v41, a2);
  return outlined consume of _ConditionalContent<ModifiedContent<_ViewModifier_Content<PopoverPresentationModifier<A>.PopoverModifier>, _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>>, ModifiedContent<_ViewModifier_Content<PopoverPresentationModifier<A>.PopoverModifier>, EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>>>.Storage<A>();
}

__n128 closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  char **v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __n128 v24;
  __int128 v25;
  int v26;
  char **v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __n128 v40;
  __int128 v41;
  _BYTE v42[24];
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  _BYTE v53[17];

  v10 = *((_QWORD *)a3 + 1);
  v11 = *((_QWORD *)a3 + 2);
  v12 = *((_BYTE *)a3 + 24);
  v13 = type metadata accessor for PopoverPresentationModifier.PopoverModifier(0, a4, a5, a4);
  *(_QWORD *)&v45 = v10;
  *((_QWORD *)&v45 + 1) = v11;
  LOBYTE(v46) = v12 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v37);
  if (v37 == 1)
  {
    v15 = (__n128)a3[3];
    v47 = a3[2];
    v48 = v15;
    v49 = a3[4];
    *(_QWORD *)&v50 = *((_QWORD *)a3 + 10);
    v16 = a3[1];
    v45 = *a3;
    v46 = v16;
    v36 = PopoverPresentationModifier.PopoverModifier.wrappedContent.getter(v13);
    outlined init with take of Edge?((uint64_t)a3 + 65, (uint64_t)v53);
    v17 = (__n128)a3[3];
    v47 = a3[2];
    v48 = v17;
    v49 = a3[4];
    *(_QWORD *)&v50 = *((_QWORD *)a3 + 10);
    v18 = a3[1];
    v45 = *a3;
    v46 = v18;
    v19 = a1;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a4;
    *(_QWORD *)(v20 + 24) = a5;
    v21 = a3[3];
    *(_OWORD *)(v20 + 64) = a3[2];
    *(_OWORD *)(v20 + 80) = v21;
    *(_OWORD *)(v20 + 96) = a3[4];
    *(_QWORD *)(v20 + 112) = *((_QWORD *)a3 + 10);
    v22 = a3[1];
    *(_OWORD *)(v20 + 32) = *a3;
    *(_OWORD *)(v20 + 48) = v22;
    outlined retain of PopoverPresentationModifier<A>.PopoverModifier((uint64_t)&v45);
    v23 = *((_BYTE *)a3 + 66);
    v24 = (__n128)a3[3];
    v47 = a3[2];
    v48 = v24;
    v49 = a3[4];
    *(_QWORD *)&v50 = *((_QWORD *)a3 + 10);
    v25 = a3[1];
    v45 = *a3;
    v46 = v25;
    v26 = ItemPopoverPresentationModifier.PopoverModifier.viewID.getter();
    v44 = 0;
    memset(v43, 0, sizeof(v43));
    v52 = *(__int128 *)((char *)a3 + 72);
    *(_QWORD *)v42 = 0;
    v41 = 0u;
    v40 = 0u;
    *(_QWORD *)&v37 = v36;
    outlined init with take of Edge?((uint64_t)v53, (uint64_t)&v37 + 8);
    *(_QWORD *)&v38 = a2;
    *((_QWORD *)&v38 + 1) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:);
    *(_QWORD *)&v39 = v20;
    v27 = v19;
    BYTE8(v39) = v23;
    HIDWORD(v39) = v26;
    swift_retain();
    outlined retain of AccessibilityAttachmentModifier((uint64_t)&v52);
    outlined assign with take of AnyHashable?((uint64_t)v43, (uint64_t)&v40);
    *(_OWORD *)&v42[8] = v52;
    v45 = v37;
    v46 = v38;
    v47 = v39;
    v48 = v40;
    v49 = v41;
    v50 = *(_OWORD *)v42;
    v51 = *((_QWORD *)&v52 + 1);
    v28 = *v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v30 = *((_QWORD *)v28 + 2);
    v29 = *((_QWORD *)v28 + 3);
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v30 + 1;
    v31 = &v28[104 * v30];
    v32 = v45;
    v33 = v47;
    *((_OWORD *)v31 + 3) = v46;
    *((_OWORD *)v31 + 4) = v33;
    *((_OWORD *)v31 + 2) = v32;
    result = v48;
    v34 = v49;
    v35 = v50;
    *((_QWORD *)v31 + 16) = v51;
    *((_OWORD *)v31 + 6) = v34;
    *((_OWORD *)v31 + 7) = v35;
    *((__n128 *)v31 + 5) = result;
    *v27 = v28;
  }
  return result;
}

uint64_t PopoverPresentationModifier.PopoverModifier.dismiss()()
{
  return PopoverPresentationModifier.PopoverModifier.isPresented.setter();
}

__n128 closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  char **v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __n128 v24;
  __int128 v25;
  int v26;
  char **v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __n128 v40;
  __int128 v41;
  _BYTE v42[24];
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  _BYTE v53[17];

  v10 = *((_QWORD *)a3 + 1);
  v11 = *((_QWORD *)a3 + 2);
  v12 = *((_BYTE *)a3 + 24);
  v13 = type metadata accessor for PopoverPresentationModifier.PopoverModifier(0, a4, a5, a4);
  *(_QWORD *)&v45 = v10;
  *((_QWORD *)&v45 + 1) = v11;
  LOBYTE(v46) = v12 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v37);
  if (v37 == 1)
  {
    v15 = (__n128)a3[3];
    v47 = a3[2];
    v48 = v15;
    v49 = a3[4];
    *(_QWORD *)&v50 = *((_QWORD *)a3 + 10);
    v16 = a3[1];
    v45 = *a3;
    v46 = v16;
    v36 = PopoverPresentationModifier.PopoverModifier.wrappedContent.getter(v13);
    outlined init with take of Edge?((uint64_t)a3 + 65, (uint64_t)v53);
    v17 = (__n128)a3[3];
    v47 = a3[2];
    v48 = v17;
    v49 = a3[4];
    *(_QWORD *)&v50 = *((_QWORD *)a3 + 10);
    v18 = a3[1];
    v45 = *a3;
    v46 = v18;
    v19 = a1;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a4;
    *(_QWORD *)(v20 + 24) = a5;
    v21 = a3[3];
    *(_OWORD *)(v20 + 64) = a3[2];
    *(_OWORD *)(v20 + 80) = v21;
    *(_OWORD *)(v20 + 96) = a3[4];
    *(_QWORD *)(v20 + 112) = *((_QWORD *)a3 + 10);
    v22 = a3[1];
    *(_OWORD *)(v20 + 32) = *a3;
    *(_OWORD *)(v20 + 48) = v22;
    outlined retain of PopoverPresentationModifier<A>.PopoverModifier((uint64_t)&v45);
    v23 = *((_BYTE *)a3 + 66);
    v24 = (__n128)a3[3];
    v47 = a3[2];
    v48 = v24;
    v49 = a3[4];
    *(_QWORD *)&v50 = *((_QWORD *)a3 + 10);
    v25 = a3[1];
    v45 = *a3;
    v46 = v25;
    v26 = ItemPopoverPresentationModifier.PopoverModifier.viewID.getter();
    v44 = 0;
    memset(v43, 0, sizeof(v43));
    v52 = *(__int128 *)((char *)a3 + 72);
    *(_QWORD *)v42 = 0;
    v41 = 0u;
    v40 = 0u;
    *(_QWORD *)&v37 = v36;
    outlined init with take of Edge?((uint64_t)v53, (uint64_t)&v37 + 8);
    *(_QWORD *)&v38 = a2;
    *((_QWORD *)&v38 + 1) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:);
    *(_QWORD *)&v39 = v20;
    v27 = v19;
    BYTE8(v39) = v23;
    HIDWORD(v39) = v26;
    swift_retain();
    outlined retain of AccessibilityAttachmentModifier((uint64_t)&v52);
    outlined assign with take of AnyHashable?((uint64_t)v43, (uint64_t)&v40);
    *(_OWORD *)&v42[8] = v52;
    v45 = v37;
    v46 = v38;
    v47 = v39;
    v48 = v40;
    v49 = v41;
    v50 = *(_OWORD *)v42;
    v51 = *((_QWORD *)&v52 + 1);
    v28 = *v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v30 = *((_QWORD *)v28 + 2);
    v29 = *((_QWORD *)v28 + 3);
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v30 + 1;
    v31 = &v28[104 * v30];
    v32 = v45;
    v33 = v47;
    *((_OWORD *)v31 + 3) = v46;
    *((_OWORD *)v31 + 4) = v33;
    *((_OWORD *)v31 + 2) = v32;
    result = v48;
    v34 = v49;
    v35 = v50;
    *((_QWORD *)v31 + 16) = v51;
    *((_OWORD *)v31 + 6) = v34;
    *((_OWORD *)v31 + 7) = v35;
    *((__n128 *)v31 + 5) = result;
    *v27 = v28;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PopoverPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>, a5);
  return static EnvironmentalModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PopoverPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>, a5);
  return static EnvironmentalModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static EmptyAnchorTraitTransformModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v46;
  unsigned int v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v30 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 80);
  v28 = v16;
  v29 = *(_DWORD *)(a2 + 64);
  v69 = *(_QWORD *)a2;
  v70 = v8;
  v71 = v9;
  *(_QWORD *)&v72 = __PAIR64__(v11, v10);
  v27 = v12;
  *((_QWORD *)&v72 + 1) = __PAIR64__(v13, v12);
  v73 = v14;
  *(_QWORD *)&v74 = v32;
  *((_QWORD *)&v74 + 1) = v30;
  v75 = v29;
  v76 = v15;
  v77 = v16;
  v51 = v69;
  v52 = v8;
  v53 = v9;
  v54 = v10;
  v55 = v11;
  v56 = v12;
  v57 = v13;
  v58 = v14;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  _ViewInputs.init(withoutGeometry:)();
  v40 = v63;
  v38 = DWORD2(v63);
  v39 = DWORD1(v63);
  v23 = HIDWORD(v63);
  v25 = v64;
  v26 = HIDWORD(v62);
  v24 = v65;
  v37 = HIDWORD(v65);
  v42 = v66;
  v43 = DWORD2(v65);
  v41 = v67;
  v46 = v68;
  v47 = HIDWORD(v67);
  type metadata accessor for EmptyAnchorTraitTransformModifier(255, a5, a6, a7);
  type metadata accessor for _GraphValue();
  v34 = _GraphValue.value.getter();
  v59 = v69;
  v60 = v8;
  v62 = v9;
  *(_QWORD *)&v63 = __PAIR64__(v11, v10);
  *((_QWORD *)&v63 + 1) = __PAIR64__(v13, v27);
  v64 = v14;
  *(_QWORD *)&v65 = v32;
  *((_QWORD *)&v65 + 1) = v30;
  v66 = v29;
  v67 = v15;
  LOBYTE(v68) = v28;
  v17 = _ViewListInputs.traits.getter();
  v18 = *MEMORY[0x1E0CFED28];
  if ((v17 & 0x100000000) == 0)
    v18 = v17;
  v33 = v18;
  v31 = _ViewInputs.position.getter();
  _ViewInputs.size.getter();
  HIDWORD(v62) = v26;
  *(_QWORD *)&v63 = __PAIR64__(v39, v40);
  *((_QWORD *)&v63 + 1) = __PAIR64__(v23, v38);
  v64 = v25;
  *(_QWORD *)&v65 = v24;
  *((_QWORD *)&v65 + 1) = __PAIR64__(v37, v43);
  v66 = v42;
  v67 = __PAIR64__(v47, v41);
  v68 = v46;
  v59 = __PAIR64__(v33, v34);
  v60 = v31;
  v61 = Attribute<A>.origin()();
  LODWORD(v62) = _ViewInputs.transform.getter();
  v49 = type metadata accessor for EmptyAnchorTraitTransformModifier.TransformTrait(0, a5, a6, a7);
  v50 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyAnchorTraitTransformModifier<A, B>.TransformTrait, v49);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E0CE4B38], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v59, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21, (uint64_t)v48, v49, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  LOBYTE(v59) = 0;
  _ViewListInputs.traits.setter();
  _ViewListInputs.addTraitKey<A>(_:)();
  v59 = v69;
  v60 = v70;
  v62 = v71;
  v63 = v72;
  v64 = v73;
  v65 = v74;
  v66 = v75;
  v67 = v76;
  LOBYTE(v68) = v77;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v21 = swift_bridgeObjectRetain();
  a3(v21, &v59);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t EmptyAnchorTraitTransformModifier.TransformTrait.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  type metadata accessor for EmptyAnchorTraitTransformModifier(0, a4, a5, a6);
  v6 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v6;
}

uint64_t EmptyAnchorTraitTransformModifier.TransformTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t result;
  _QWORD v25[2];
  uint64_t v26;
  int v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)v25 - v16;
  AnchorGeometry.init(position:size:transform:)();
  v18 = v27;
  v19 = v26;
  EmptyAnchorTraitTransformModifier.TransformTrait.modifier.getter(a1, a2, a3, a4, a5, a6);
  swift_release();
  v26 = v19;
  v27 = v18;
  v20 = Anchor.Source.prepare(geometry:)();
  swift_release();
  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1) || (v21 = *(_QWORD *)AGGraphGetValue(), swift_bridgeObjectRetain(), !v21))
  {
    ViewTraitCollection.init()();
    v21 = v26;
  }
  else
  {
    v26 = v21;
  }
  EmptyAnchorTraitTransformModifier.TransformTrait.modifier.getter(a1, a2, a3, a4, a5, a6);
  v23 = v22;
  swift_release();
  v25[1] = v21;
  ViewTraitCollection.subscript.getter();
  v23(v17, v20);
  swift_release();
  ViewTraitCollection.subscript.setter();
  result = swift_release();
  *a7 = v26;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance EmptyAnchorTraitTransformModifier<A, B>.TransformTrait@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return EmptyAnchorTraitTransformModifier.TransformTrait.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(unsigned int *)(v2 + 16), a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EmptyAnchorTraitTransformModifier<A, B>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *), uint64_t a4, uint64_t *a5)
{
  return static EmptyAnchorTraitTransformModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4]);
}

uint64_t type metadata accessor for PopoverPresentationModifier.PopoverModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PopoverPresentationModifier.PopoverModifier);
}

void type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t destroy for PopoverPresentationModifier.PopoverModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PopoverPresentationModifier.PopoverModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v8;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PopoverPresentationModifier.PopoverModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v9, v10);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PopoverPresentationModifier.PopoverModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v4;
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverPresentationModifier.PopoverModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PopoverPresentationModifier.PopoverModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for ItemPopoverPresentationModifier.PopoverModifier()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemPopoverPresentationModifier.PopoverModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = ~(v6 | 7);
  v9 = (v7 + 16) & ~v7;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = v9 + v10;
  v12 = v6 & 0x100000;
  if (v7 > 7
    || v12 != 0
    || ((((((v9 + v10 + (((v7 | 7) + 4) & ~(v7 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8)
     + 17 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v15 + ((v7 + 16) & v8));
  }
  else
  {
    v16 = ~v7;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v17 = ((unint64_t)a1 + 11) & v8;
    v35 = ((unint64_t)a2 + 11) & v8;
    *(_QWORD *)v17 = *(_QWORD *)v35;
    v18 = (_QWORD *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = v7 + 8;
    v21 = (void *)(((unint64_t)v18 + v20) & v16);
    v22 = (const void *)(((unint64_t)v19 + v20) & v16);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v23(v22, 1, v4))
    {
      memcpy(v21, v22, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v21, v22, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
    }
    v24 = (_QWORD *)(((v17 | 7) + v11) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((v35 | 7) + v11) & 0xFFFFFFFFFFFFFFF8);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    v31 = *(_BYTE *)(v28 + 16);
    swift_retain();
    outlined copy of Environment<CGFloat?>.Content(v29, v30, v31);
    *(_QWORD *)v27 = v29;
    *(_QWORD *)(v27 + 8) = v30;
    *(_BYTE *)(v27 + 16) = v31;
    *(_BYTE *)(v27 + 17) = *(_BYTE *)(v28 + 17);
    v32 = (v27 + 25) & 0xFFFFFFFFFFFFFFF8;
    v33 = (v28 + 25) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
    *(_BYTE *)(v32 + 16) = *(_BYTE *)(v33 + 16);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ItemPopoverPresentationModifier.PopoverModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + (v4 | 7) + 4) & ~(v4 | 7);
  swift_release();
  swift_release();
  v6 = (v4 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v6, v2);
  v7 = ((v4 + 16) & ~v4) + *(_QWORD *)(v3 + 64) + v5;
  if (!*(_DWORD *)(v3 + 84))
    ++v7;
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 16));
  swift_release();
  return swift_release();
}

_DWORD *initializeWithCopy for ItemPopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 4;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  swift_retain();
  if (v14(v13, 1, v4))
  {
    v15 = *(_DWORD *)(v5 + 84);
    v16 = *(_QWORD *)(v5 + 64);
    if (v15)
      v17 = *(_QWORD *)(v5 + 64);
    else
      v17 = v16 + 1;
    memcpy(v12, v13, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    v15 = *(_DWORD *)(v5 + 84);
    v16 = *(_QWORD *)(v5 + 64);
  }
  v18 = v16 + ((v6 + 16) & ~v6);
  if (!v15)
    ++v18;
  v19 = (_QWORD *)(((v8 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((v9 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_BYTE *)(v23 + 16);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v24, v25, v26);
  *(_QWORD *)v22 = v24;
  *(_QWORD *)(v22 + 8) = v25;
  *(_BYTE *)(v22 + 16) = v26;
  *(_BYTE *)(v22 + 17) = *(_BYTE *)(v23 + 17);
  v27 = (v22 + 25) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v23 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for ItemPopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 4;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_retain();
  swift_release();
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v10) = v14(v12, 1, v4);
  v15 = v14(v13, 1, v4);
  if ((_DWORD)v10)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v12, v13, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v5 + 84))
      v16 = *(_QWORD *)(v5 + 64);
    else
      v16 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v12, v13, v4);
LABEL_10:
  v17 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6);
  if (!*(_DWORD *)(v5 + 84))
    ++v17;
  v18 = (_QWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((v9 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)v22;
  v24 = *(_QWORD *)(v22 + 8);
  LOBYTE(v19) = *(_BYTE *)(v22 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v22, v24, (char)v19);
  v25 = *(_QWORD *)v21;
  v26 = *(_QWORD *)(v21 + 8);
  v27 = *(_BYTE *)(v21 + 16);
  *(_QWORD *)v21 = v23;
  *(_QWORD *)(v21 + 8) = v24;
  *(_BYTE *)(v21 + 16) = (_BYTE)v19;
  outlined consume of Environment<CGFloat?>.Content(v25, v26, v27);
  *(_BYTE *)(v21 + 17) = *(_BYTE *)(v22 + 17);
  v28 = (v21 + 25) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v22 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  swift_retain();
  swift_release();
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v28 + 16) = *(_BYTE *)(v29 + 16);
  return a1;
}

_DWORD *initializeWithTake for ItemPopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  _OWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 4;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
  }
  v17 = v15 + ((v6 + 16) & ~v6);
  if (!v14)
    ++v17;
  v18 = (_OWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((v9 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v20 = v22;
  *(_BYTE *)(v20 + 17) = *(_BYTE *)(v21 + 17);
  v23 = (v20 + 25) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  return a1;
}

_DWORD *assignWithTake for ItemPopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 4;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_release();
  v10 = (_QWORD *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_release();
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v11) = v14(v12, 1, v4);
  v15 = v14(v13, 1, v4);
  if ((_DWORD)v11)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v12, v13, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v5 + 84))
      v16 = *(_QWORD *)(v5 + 64);
    else
      v16 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v12, v13, v4);
LABEL_10:
  v17 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6);
  if (!*(_DWORD *)(v5 + 84))
    ++v17;
  v18 = (_OWORD *)(((v8 | 7) + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = (v9 | 7) + v17;
  v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v18 = *(_OWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 &= 0xFFFFFFFFFFFFFFF8;
  v22 = *(_BYTE *)(v20 + 16);
  v23 = *(_QWORD *)v21;
  v24 = *(_QWORD *)(v21 + 8);
  v25 = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v20;
  *(_BYTE *)(v21 + 16) = v22;
  outlined consume of Environment<CGFloat?>.Content(v23, v24, v25);
  *(_BYTE *)(v21 + 17) = *(_BYTE *)(v20 + 17);
  v26 = (v21 + 25) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v20 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  swift_release();
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_release();
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemPopoverPresentationModifier.PopoverModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  if (v7 < a2)
  {
    v11 = ((((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9) + ((v10 + 4) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 17;
    v12 = (a2 - v7 + 255) >> (8 * v11);
    if (v11 < 4)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  v17 = (unint64_t *)((((a1 + v10 + 4) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0x80000000) != 0)
  {
    v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
    if (v19 >= 2)
      return v19 - 1;
    else
      return 0;
  }
  else
  {
    v18 = *v17;
    if (v18 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    return (v18 + 1);
  }
}

void storeEnumTagSinglePayload for ItemPopoverPresentationModifier.PopoverModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((((((v11
            + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + (((*(unsigned __int8 *)(v7 + 80) | 7) + 4) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
            + 7) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 255) >> (8 * v12);
    if (v12 <= 3)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v16 = ~v10 + a2;
    else
      v16 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v16;
    else
      *(_DWORD *)a1 = v16;
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_187624308()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876243D4);
}

void sub_187624310(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187624318);
  JUMPOUT(0x1876243D4);
}

void sub_18762433C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876243D4);
}

void sub_187624344()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876243D4);
}

void sub_18762434C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1876243D0);
      JUMPOUT(0x1876243CCLL);
    }
    JUMPOUT(0x187624358);
  }
  JUMPOUT(0x1876243D4);
}

void sub_1876243C4()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x1876243D4);
}

void sub_187624408()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1876243D4);
}

void sub_187624410()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1876243D4);
}

void sub_187624420()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1876243D4);
}

uint64_t storeEnumTagSinglePayload for PopoverPresentationKeyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187624478 + 4 * byte_187C4586B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1876244AC + 4 * byte_187C45866[v4]))();
}

uint64_t sub_1876244AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876244B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876244BCLL);
  return result;
}

uint64_t sub_1876244C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876244D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1876244D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876244DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PopoverPresentationKeyType()
{
  return &type metadata for PopoverPresentationKeyType;
}

void sub_1876244F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PopoverPresentationModifier.PopoverModifier(255, *a1, a1[1], a4);
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  type metadata accessor for StaticIf();
}

uint64_t sub_187624540(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[10];

  v4[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier, v1);
  v4[1] = MEMORY[0x1E0CE1E88];
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v4);
}

void sub_187624584()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_1876245A4(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>.PopoverModifier, a1);
}

unint64_t lazy protocol witness table accessor for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType;
  if (!lazy protocol witness table cache variable for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationKeyType, &type metadata for PopoverPresentationKeyType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemPopoverPresentationModifier<A, B>.PopoverModifier()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PopoverPresentationModifier<A>.PopoverModifier()
{
  return swift_getOpaqueTypeConformance2();
}

double partial apply for closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:)(a1, a2, (__int128 *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24)).n128_u64[0];
  return result;
}

uint64_t outlined retain of PopoverPresentationModifier<A>.PopoverModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v2, v3, v4);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for EmptyAnchorTraitTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyAnchorTraitTransformModifier);
}

void type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    type metadata accessor for CGRect?(255, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v11 = a5(a1, v10, a3, a4);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<_ViewModifier_Content<PopoverPresentationModifier<A>.PopoverModifier>, _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>>, ModifiedContent<_ViewModifier_Content<PopoverPresentationModifier<A>.PopoverModifier>, EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>>>.Storage<A>()
{
  swift_release();
  return swift_release();
}

double partial apply for closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(a1, a2, (__int128 *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24)).n128_u64[0];
  return result;
}

uint64_t outlined init with take of Edge?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Edge?, MEMORY[0x1E0CE6970], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PopoverPresentationModifier.PopoverModifier.WrappedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PopoverPresentationModifier.PopoverModifier.WrappedContent);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for PopoverPresentationModifier.PopoverModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return PopoverPresentationModifier.PopoverModifier.dismiss()();
}

void partial apply for closure #2 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)()
{
  partial apply for closure #2 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)();
}

{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

void partial apply for closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)()
{
  partial apply for closure #2 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)();
}

void sub_1876248C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)(v4, v3, v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8, v1);
}

void sub_187624920()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_187624958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v10 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v1 + v4 + *(int *)(a1 + 52);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v8 = v7 + *(int *)(type metadata accessor for Binding() + 32);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v8, 1))
    (*(void (**)(unint64_t))(v5 + 8))(v8);
  swift_release();
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v1 + v4 + *(int *)(a1 + 60)), *(_QWORD *)(v1 + v4 + *(int *)(a1 + 60) + 8), *(_BYTE *)(v1 + v4 + *(int *)(a1 + 60) + 16));
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(v5 + 8))(v1 + ((v4 + v11 + v6) & ~v6));
  return swift_deallocObject();
}

void partial apply for closure #1 in ItemPopoverPresentationModifier.PopoverModifier.wrappedContent(_:)()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

void sub_187624ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  closure #1 in ItemPopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(v1 + v4, v1 + ((v4 + *(_QWORD *)(v3 + 64) + v5) & ~v5));
}

uint64_t type metadata accessor for PopoverContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PopoverContent);
}

void objectdestroy_16Tm_0()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_187624B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 48) & ~v3);
  v5 = v4 + *(int *)(a1 + 52);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v6 = v5 + *(int *)(type metadata accessor for Binding() + 32);
  v7 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v7 + 48))(v6, 1))
    (*(void (**)(uint64_t))(v7 + 8))(v6);
  swift_release();
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v4 + *(int *)(a1 + 60)), *(_QWORD *)(v4 + *(int *)(a1 + 60) + 8), *(_BYTE *)(v4 + *(int *)(a1 + 60) + 16));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ItemPopoverPresentationModifier.PopoverModifier.body(content:)()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

void sub_187624C90()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_187624CB8(uint64_t a1)
{
  return ItemPopoverPresentationModifier.PopoverModifier.dismiss()(a1);
}

void partial apply for closure #1 in ItemPopoverPresentationModifier.PopoverModifier.anchor.getter()
{
  closure #1 in ItemPopoverPresentationModifier.PopoverModifier.anchor.getter();
}

uint64_t type metadata completion function for PopoverContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PopoverContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v10 = ((unint64_t)a1 + v5 + 16) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = (v6 + v10) & 0xFFFFFFFFFFFFFFF8;
    v13 = (v6 + v11) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for PopoverContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_release();
  return swift_release();
}

_OWORD *initializeWithCopy for PopoverContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PopoverContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  return a1;
}

_OWORD *initializeWithTake for PopoverContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  return a1;
}

_OWORD *assignWithTake for PopoverContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v15 = (a1 + v7 + 16) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(((v8 + v15) & 0xFFFFFFFFFFFFF8) + 8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    }
  }
  else
  {
    v9 = ((v8 + ((v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 17;
    v10 = (a2 - v6 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876251D0 + 4 * byte_187C45870[v13]))();
  }
}

void storeEnumTagSinglePayload for PopoverContent(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + 7
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X14 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1876253A0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187625420);
}

void sub_1876253A8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876253B0);
  JUMPOUT(0x187625420);
}

void sub_1876253F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187625420);
}

void sub_187625400()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187625420);
}

uint64_t sub_187625408@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 16) & a3;
  if (a2 < 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x187625414);
    *(_QWORD *)(((v6 + v3) & 0xFFFFFFFFFFFFFFF8) + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x187625420);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t initializeWithCopy for PopoverPresentationModifier.PopoverModifier.WrappedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PopoverPresentationModifier.PopoverModifier.WrappedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PopoverPresentationModifier.PopoverModifier.WrappedContent(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t sub_18762555C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = type metadata accessor for PopoverPresentationModifier.PopoverModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverPresentationModifier<A>.PopoverModifier, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for _ConditionalContent();
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v13[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
  v9 = MEMORY[0x1E0CE2E70];
  v12[0] = v13[0];
  v12[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v13);
  v11[1] = MEMORY[0x18D75FFDC](v9, v7, v12);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v8, v11);
}

void sub_1876256BC()
{
  type metadata accessor for ItemPopoverPresentationModifier.PopoverModifier();
}

uint64_t sub_1876256E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[14];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemPopoverPresentationModifier<A, B>.PopoverModifier, a1);
  v1 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, type metadata accessor for _AnchorTransformModifier);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, type metadata accessor for EmptyAnchorTraitTransformModifier);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for _ConditionalContent();
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v9[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
  v5 = MEMORY[0x1E0CE2E70];
  v8[0] = v9[0];
  v8[1] = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v7[1] = MEMORY[0x18D75FFDC](v5, v3, v8);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v4, v7);
}

_UNKNOWN **base witness table accessor for ViewModifier in EmptyAnchorTraitTransformModifier<A, B>()
{
  return &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
}

uint64_t associated type witness table accessor for View.Body : View in PopoverContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PopoverPresentationModifier<A>.PopoverModifier.WrappedContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for EmptyAnchorTraitTransformModifier.TransformTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyAnchorTraitTransformModifier.TransformTrait);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, a5);
    v6 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>;
  if (!lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>)
  {
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6488], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E0CE4550], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187625A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v3 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))v3);
  v5 = type metadata accessor for ModifiedContent();
  v13[0] = v1;
  v13[1] = &protocol witness table for ClearNavigationContextModifier;
  v6 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v13);
  v12[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  v11[0] = MEMORY[0x18D75FFDC](v6, v4, v12);
  v11[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  v7 = MEMORY[0x18D75FFDC](v6, v5, v11);
  v9 = type metadata accessor for PopoverContent(255, v5, v7, v8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopoverContent<A>, v9);
}

uint64_t sub_187625B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[3];

  v14 = *(_QWORD *)(a1 + 8);
  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E0CE4550], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v5);
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))v5);
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))v5);
  v15 = type metadata accessor for ModifiedContent();
  v26[0] = v14;
  v26[1] = MEMORY[0x1E0CE35E0];
  v11 = MEMORY[0x1E0CE2E70];
  v25[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v26);
  v25[1] = lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>();
  v24[0] = MEMORY[0x18D75FFDC](v11, v13, v25);
  v24[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>();
  v23[0] = MEMORY[0x18D75FFDC](v11, v2, v24);
  v23[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>();
  v22[0] = MEMORY[0x18D75FFDC](v11, v3, v23);
  v22[1] = &protocol witness table for ResetScrollEnvironmentModifier;
  v21[0] = MEMORY[0x18D75FFDC](v11, v4, v22);
  v21[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  v20[0] = MEMORY[0x18D75FFDC](v11, v6, v21);
  v20[1] = &protocol witness table for ResetFormEnvironmentModifier;
  v19[0] = MEMORY[0x18D75FFDC](v11, v7, v20);
  v19[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
  v18[0] = MEMORY[0x18D75FFDC](v11, v8, v19);
  v18[1] = &protocol witness table for ClearNavigationContextModifier;
  v17[0] = MEMORY[0x18D75FFDC](v11, v9, v18);
  v17[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  v16[0] = MEMORY[0x18D75FFDC](v11, v10, v17);
  v16[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  return MEMORY[0x18D75FFDC](v11, v15, v16);
}

void base witness table accessor for _AttributeBody in EmptyAnchorTraitTransformModifier<A, B>.TransformTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

double SliderStyleConfiguration.$value.getter()
{
  uint64_t v0;
  double v1;

  v1 = *(double *)(v0 + 16);
  swift_retain();
  swift_retain();
  return v1;
}

double SliderStyleConfiguration.value.getter()
{
  double v1;

  type metadata accessor for Binding<Double>();
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

void type metadata accessor for Binding<Double>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Double>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>);
  }
}

uint64_t SliderStyleConfiguration.value.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t View.sliderStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SliderStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for SliderStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SliderStyleModifier);
}

uint64_t SliderStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t AssociatedConformanceWitness;
  void (*v22)(char *, uint64_t);
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v25[-1] - v14;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 64);
  v25[0] = *(_QWORD *)a1;
  v25[1] = v16;
  v25[2] = v17;
  v26 = *(_OWORD *)(a1 + 24);
  v27 = v18;
  v28 = *(_OWORD *)(a1 + 48);
  v29 = v19;
  v20 = *(_OWORD *)(a1 + 88);
  v30 = *(_OWORD *)(a1 + 72);
  v31 = v20;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 24))(v25, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, AssociatedTypeWitness);
}

void protocol witness for View.body.getter in conformance SliderStyleConfiguration.MinimumValueLabel()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance SliderStyleConfiguration.MaximumValueLabel()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t (*SliderStyleConfiguration.label.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*SliderStyleConfiguration.minimumValueLabel.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*SliderStyleConfiguration.maximumValueLabel.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double key path getter for SliderStyleConfiguration.value : SliderStyleConfiguration@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Binding<Double>();
  MEMORY[0x18D75B9C8](&v3);
  result = v3;
  *a1 = v3;
  return result;
}

void key path setter for SliderStyleConfiguration.value : SliderStyleConfiguration(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a2[9];
  v3 = (void *)a2[10];
  v4 = (void *)a2[11];
  v5 = (void *)a2[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v2, v3, v4, v5);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  swift_release_n();
  outlined consume of AccessibilitySliderValue?(v2, v3, v4, v5);
}

void (*SliderStyleConfiguration.value.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = v1[1];
  v3[4] = *v1;
  v3[5] = v5;
  v6 = v1[2];
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  type metadata accessor for Binding<Double>();
  v8 = v7;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](v8);
  return SliderStyleConfiguration.value.modify;
}

void SliderStyleConfiguration.value.modify(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  **(_QWORD **)a1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t key path setter for SliderStyleConfiguration.onEditingChanged : SliderStyleConfiguration(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 24) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  *(_QWORD *)(a2 + 32) = v5;
  return result;
}

uint64_t SliderStyleConfiguration.onEditingChanged.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t SliderStyleConfiguration.onEditingChanged.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SliderStyleConfiguration.onEditingChanged.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SliderStyleConfiguration.skipDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t SliderStyleConfiguration.discreteValueCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t SliderStyleConfiguration.marks.getter()
{
  return swift_bridgeObjectRetain();
}

void SliderStyleConfiguration.ValueLabel.body.getter(BOOL *a1@<X8>)
{
  _BYTE *v1;

  *a1 = (*v1 & 1) == 0;
}

unint64_t instantiation function for generic protocol witness table for SliderStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SliderStyleConfiguration.Label()
{
  return &protocol witness table for SliderStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for SliderStyleConfiguration.MinimumValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SliderStyleConfiguration.MinimumValueLabel()
{
  return &protocol witness table for SliderStyleConfiguration.MinimumValueLabel;
}

unint64_t instantiation function for generic protocol witness table for SliderStyleConfiguration.MaximumValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SliderStyleConfiguration.MaximumValueLabel()
{
  return &protocol witness table for SliderStyleConfiguration.MaximumValueLabel;
}

uint64_t associated type witness table accessor for View.Body : View in SliderStyleConfiguration.ValueLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.ValueLabel(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  unsigned __int8 v8;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = specialized static ViewAlias._viewListCount(inputs:)(*(_QWORD *)a1, v2, v3, v4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 != specialized static ViewAlias._viewListCount(inputs:)(v1, v2, v3, v4);
    if (((v8 | v7) & 1) != 0)
      return 0;
  }
  return v5;
}

void protocol witness for View.body.getter in conformance SliderStyleConfiguration.ValueLabel(BOOL *a1@<X8>)
{
  _BYTE *v1;

  *a1 = (*v1 & 1) == 0;
}

uint64_t sub_1876268AC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return swift_retain();
}

uint64_t dispatch thunk of SliderStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration()
{
  return &type metadata for SliderStyleConfiguration;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.Label()
{
  return &type metadata for SliderStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.MinimumValueLabel()
{
  return &type metadata for SliderStyleConfiguration.MinimumValueLabel;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.MaximumValueLabel()
{
  return &type metadata for SliderStyleConfiguration.MaximumValueLabel;
}

uint64_t storeEnumTagSinglePayload for SliderStyleConfiguration.ValueLabel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1876269AC + 4 * byte_187C45DB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1876269E0 + 4 * byte_187C45DB0[v4]))();
}

uint64_t sub_1876269E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876269E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876269F0);
  return result;
}

uint64_t sub_1876269FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187626A04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187626A08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187626A10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.ValueLabel()
{
  return &type metadata for SliderStyleConfiguration.ValueLabel;
}

uint64_t sub_187626A2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for SliderStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for SliderStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>();
    v2[0] = &protocol witness table for SliderStyleConfiguration.MinimumValueLabel;
    v2[1] = &protocol witness table for SliderStyleConfiguration.MaximumValueLabel;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>)
  {
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>);
  }
}

uint64_t getEnumTagSinglePayload for SliderStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187626BFC + 4 * byte_187C45DBA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for SliderStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t initializeWithCopy for SliderStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = (_OWORD *)(a2 + 72);
  v7 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = *(void **)(a2 + 80);
    v10 = *(void **)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v9;
    v11 = *(void **)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
    v12 = v7;
    v13 = v9;
    v14 = v10;
    v15 = v11;
  }
  else
  {
    v16 = v8[1];
    *(_OWORD *)(a1 + 72) = *v8;
    *(_OWORD *)(a1 + 88) = v16;
  }
  return a1;
}

uint64_t assignWithCopy for SliderStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  void *v6;
  void *v7;
  _OWORD *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 72);
  v6 = *(void **)(a1 + 72);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = (_OWORD *)(a2 + 72);
  v7 = *(void **)(a2 + 72);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 72) = v7;
      v9 = v7;

      v10 = *(void **)(a1 + 80);
      v11 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v11;
      v12 = v11;

      v13 = *(void **)(a1 + 88);
      v14 = *(void **)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v14;
      v15 = v14;

      v16 = *(void **)(a1 + 96);
      v17 = *(void **)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v17;
      v18 = v17;

    }
    else
    {
      outlined destroy of AccessibilityBoundedNumber(a1 + 72);
      v26 = *(_OWORD *)(a2 + 88);
      *v5 = *v8;
      *(_OWORD *)(a1 + 88) = v26;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 72) = v7;
    v19 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v19;
    v20 = *(void **)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v20;
    v21 = *(void **)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v21;
    v22 = v7;
    v23 = v19;
    v24 = v20;
    v25 = v21;
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 88);
    *v5 = *v8;
    *(_OWORD *)(a1 + 88) = v27;
  }
  return a1;
}

uint64_t assignWithTake for SliderStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(void **)(a1 + 72);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  if (!v6)
    goto LABEL_5;
  if (!v5)
  {
    outlined destroy of AccessibilityBoundedNumber(a1 + 72);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    return a1;
  }
  *(_QWORD *)(a1 + 72) = v5;

  v7 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  v8 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  v9 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedSliderStyle()
{
  return &type metadata for ResolvedSliderStyle;
}

unint64_t lazy protocol witness table accessor for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>)
  {
    type metadata accessor for SliderStyleModifier<AutomaticSliderStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for SliderStyleModifier<AutomaticSliderStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SliderStyleModifier<AutomaticSliderStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticSliderStyle and conformance AutomaticSliderStyle();
    v4 = type metadata accessor for SliderStyleModifier(a1, (uint64_t)&type metadata for AutomaticSliderStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SliderStyleModifier<AutomaticSliderStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedSliderStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in SliderStyleModifier<A>()
{
  return &protocol witness table for SliderStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in SliderStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for SliderStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSliderStyle()
{
  lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187627294()
{
  swift_release();
  return swift_deallocObject();
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.commitUpdates()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  *((_BYTE *)v0 + *(_QWORD *)(v1 + 0xC0)) = 1;
  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 96);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v3 + 48) = v2;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
}

uint64_t UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8));
}

void UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.setter(char a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xE8);
  v3 = *((_BYTE *)v1 + v2);
  *((_BYTE *)v1 + v2) = a1;
  UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v3);
}

uint64_t UICollectionViewListCoordinatorBase.selectionStorage.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118));
}

uint64_t UICollectionViewListCoordinatorBase.sectionHeadersShouldHugContent.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128));
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.listCollectionViewSeparatorInsetsChanged(for:)(UICollectionViewCell *a1)
{
  _QWORD *v1;
  id v3;

  v3 = (id)MEMORY[0x18D760234]((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF8));
  objc_msgSend(v3, sel__cellPreferredSeparatorInsetsChanged_, a1);

}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(void *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  Class isa;
  unint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v27 - v8;
  v10 = IndexPath.section.getter();
  if (v10 == NSNotFound.getter())
    return 0;
  if (!objc_msgSend(a1, sel_isEditing))
    return 1;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(a2, v11, (uint64_t)v9);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (v12 != 1)
    return 0;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = (unint64_t)objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v14)
  {
    v15 = swift_getAssociatedTypeWitness();
    if (!swift_dynamicCastUnknownClass())
    {

      return 0;
    }
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    v18 = (id)v14;
    v17(&v29, v15, AssociatedConformanceWitness);

    v19 = v30;
    if (v30 == 1)
    {

      return 0;
    }
    v21 = v29;
    v22 = v31;
    v23 = v32;
    v24 = v33;
    v14 = v30 != 0;
    v27[1] = v35;
    v28 = v34;
    v27[0] = v36;
    if (v30)
    {
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = v19;
      *(_QWORD *)(v25 + 24) = v22;
      v26 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    }
    else
    {
      v26 = 0;
    }
    outlined copy of AppIntentExecutor?(v19);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v26);

    outlined consume of PlatformItemList.Item.SelectionBehavior?(v21, v19, v22, v23, v24, v28);
  }
  return v14;
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Class isa;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t AssociatedConformanceWitness;
  void *v69;
  uint64_t v70;
  void (*v71)(unint64_t *__return_ptr, uint64_t, uint64_t);
  id v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char *v90;
  void (**v91)(uint64_t, char *, uint64_t);
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t (*v110)();
  int v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  int v118;
  Class v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  Class v138;
  char *v139;
  uint64_t v140;
  char *v141;
  void (**v142)(uint64_t, char *, uint64_t);
  Swift::Bool v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  void (**v148)(uint64_t, char *, uint64_t);
  char *v149;
  uint64_t (*v150)(char *, uint64_t, uint64_t);
  int v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int v162;
  char *v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  id v166;
  Class v167;
  _DWORD v168[2];
  uint64_t v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void (**v197)(uint64_t, char *, uint64_t);
  uint64_t v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  _QWORD *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _QWORD *v214;
  unsigned __int8 v215;

  v3 = v2;
  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v183 = (char *)v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v188 = (uint64_t)v168 - v12;
  v190 = type metadata accessor for IndexPath();
  v191 = *(_QWORD *)(v190 - 8);
  MEMORY[0x1E0C80A78](v190, v13);
  v184 = (char *)v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v6[13];
  v174 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v16, v15);
  v176 = (char *)v168 - v17;
  v194 = v18;
  v19 = type metadata accessor for Binding();
  v198 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v173 = (char *)v168 - v21;
  v202 = v6[14];
  v22 = *(_QWORD *)(v202 + 8);
  v23 = v6[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v192 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = *(_QWORD *)(v192 + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v26);
  v181 = (char *)v168 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v175 = (char *)v168 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v180 = (char *)v168 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v179 = (char *)v168 - v35;
  v199 = v19;
  v195 = type metadata accessor for Optional();
  v197 = *(void (***)(uint64_t, char *, uint64_t))(v195 - 8);
  MEMORY[0x1E0C80A78](v195, v36);
  v196 = (uint64_t)v168 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v182 = (char *)v168 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)v168 - v43;
  v201 = AssociatedTypeWitness;
  v204 = type metadata accessor for Optional();
  v203 = *(_QWORD *)(v204 - 8);
  MEMORY[0x1E0C80A78](v204, v45);
  v178 = (uint64_t)v168 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v177 = (char *)v168 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v193 = (char *)v168 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v56 = (char *)v168 - v55;
  MEMORY[0x1E0C80A78](v57, v58);
  v205 = (char *)v168 - v59;
  v206 = v3;
  v60 = v23;
  v61 = v22;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(a2, v62, (uint64_t)v168 - v59);
  v187 = a2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v186 = a1;
  v64 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  v200 = v64;
  v189 = v6;
  v185 = v60;
  if (!v64)
    goto LABEL_5;
  v67 = swift_getAssociatedTypeWitness();
  v65 = swift_dynamicCastUnknownClass();
  if (!v65)
    goto LABEL_5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v69 = v64;
  v70 = AssociatedConformanceWitness;
  v71 = *(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v72 = v69;
  v71(&v207, v67, v70);
  if (v208 != 1)
  {
    v202 = v208;
    v100 = v207;
    v180 = (char *)v209;
    v169 = v210;
    v170 = v211;
    v172 = v212;
    v179 = v213;
    v168[1] = v215;
    v101 = objc_msgSend(v186, sel_isEditing);
    v102 = v203;
    v103 = v204;
    v171 = *(void (**)(char *, char *, uint64_t))(v203 + 16);
    v171(v56, v205, v204);
    if ((v100 & 0x10000) != 0)
    {
      v118 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v192 + 48))(v56, 1, v201);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v56, v103);
      if (v118 != 1)
      {
        v76 = v200;
        v86 = v195;
        if ((v100 & 1) != 0)
        {

          outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v202, (uint64_t)v180, v169, v170, v172);
          LODWORD(v193) = 0;
          v202 = 0;
          v108 = 0;
          v112 = v189;
          v87 = v196;
          goto LABEL_58;
        }
        LODWORD(v193) = 0;
        goto LABEL_45;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v56, v103);
    }
    v76 = v200;
    v86 = v195;
    if ((v100 & 1) != 0)
    {

      v112 = v189;
      v87 = v196;
LABEL_55:
      v144 = v202;
      v108 = v180;
      outlined copy of AppIntentExecutor?(v202);
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v144, (uint64_t)v108, v169, v170, v172);
      if (v144)
      {
        v111 = v100 & 1;
        v110 = (uint64_t (*)())v202;
        goto LABEL_57;
      }
      v202 = 0;
      LODWORD(v193) = 1;
      if ((v100 & 1) != 0)
        goto LABEL_58;
LABEL_11:
      v88 = v206;
      v89 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v90 = (char *)v206 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v206) + 0x100);
      swift_beginAccess();
      v91 = v197;
      v197[2](v87, v90, v86);
      v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
      if (v92(v87, 1, v199) == 1)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v202);

        ((void (*)(uint64_t, uint64_t))v91[1])(v87, v86);
        return (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v205, v204);
      }
      ((void (*)(uint64_t, uint64_t))v91[1])(v87, v86);
      v94 = (uint64_t)v88 + *(_QWORD *)((*v89 & *v88) + 0xD8);
      swift_beginAccess();
      v95 = v188;
      outlined init with copy of IndexPath?(v94, v188);
      v96 = v191;
      v97 = v190;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v95, 1, v190) == 1)
      {
        (*(void (**)(char *, uint64_t))(v203 + 8))(v205, v204);

        outlined destroy of Binding<AttributedString>(v95, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        goto LABEL_39;
      }
      v98 = (uint64_t)v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v184, v95, v97);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {

        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v98, v97);
      }
      else
      {
        v172 = v61;
        v113 = v178;
        UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v98, v99, v178);
        v114 = v192;
        v115 = v201;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v113, 1, v201) == 1)
        {

          v96 = v191;
          (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v98, v97);
          v116 = *(void (**)(char *, uint64_t))(v203 + 8);
          v117 = v204;
          v116(v205, v204);
          v116((char *)v113, v117);
          goto LABEL_39;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v181, v113, v115);
        v119 = IndexPath._bridgeToObjectiveC()().super.isa;
        v120 = objc_msgSend(v186, sel_cellForItemAtIndexPath_, v119);

        v121 = v200;
        if (v120)
        {
          v122 = swift_getAssociatedTypeWitness();
          if (!swift_dynamicCastUnknownClass())
            goto LABEL_33;
          v123 = swift_getAssociatedConformanceWitness();
          (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v123 + 16))(&v207, v122, v123);
          v124 = v208;
          if (v208 == 1)
            goto LABEL_33;
          v125 = v210;
          v126 = v211;
          LODWORD(v195) = v215;
          v206 = v214;
          v197 = (void (**)(uint64_t, char *, uint64_t))v213;
          v196 = v212;
          v188 = v209;
          v127 = v207;
          outlined copy of AppIntentExecutor?(v210);
          outlined consume of PlatformItemList.Item.SelectionBehavior?(v127, v124, v188, v125, v126, v196);
          if (v125)
          {
            v128 = swift_allocObject();
            *(_QWORD *)(v128 + 16) = v125;
            *(_QWORD *)(v128 + 24) = v126;
            v129 = swift_allocObject();
            *(_QWORD *)(v129 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
            *(_QWORD *)(v129 + 24) = v128;
            swift_retain();
            static Update.enqueueAction(_:)();
            swift_release();

            swift_release();
          }
          else
          {
LABEL_33:

          }
          v115 = v201;
        }
        v130 = v199;
        if (!v92((uint64_t)v90, 1, v199))
        {
          v131 = v198;
          v132 = v121;
          v133 = v173;
          (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v173, v90, v130);
          v134 = v176;
          MEMORY[0x18D75B9C8](v130);
          v135 = v194;
          (*(void (**)(char *, uint64_t))(v189[15] + 40))(v181, v194);
          specialized Binding.wrappedValue.setter();
          (*(void (**)(char *, uint64_t))(v174 + 8))(v134, v135);
          v136 = v133;
          v121 = v132;
          (*(void (**)(char *, uint64_t))(v131 + 8))(v136, v130);
        }
        v137 = v184;
        v138 = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v186, sel_deselectItemAtIndexPath_animated_, v138, 0);

        (*(void (**)(char *, uint64_t))(v192 + 8))(v181, v115);
        v96 = v191;
        v139 = v137;
        v97 = v190;
        (*(void (**)(char *, uint64_t))(v191 + 8))(v139, v190);
      }
      (*(void (**)(char *, uint64_t))(v203 + 8))(v205, v204);
LABEL_39:
      result = v202;
      if (!(_DWORD)v193)
        return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v202);
      if (v202)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v202);
        v140 = (uint64_t)v183;
        (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v183, v187, v97);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v140, 0, 1, v97);
        swift_beginAccess();
        outlined assign with take of IndexPath?(v140, v94);
        return swift_endAccess();
      }
      return result;
    }
    LODWORD(v193) = 1;
LABEL_45:
    v141 = (char *)v206 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v206) + 0x100);
    swift_beginAccess();
    v142 = v197;
    v197[2]((uint64_t)v44, v141, v86);
    LODWORD(v141) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48))(v44, 1, v199);
    ((void (*)(char *, uint64_t))v142[1])(v44, v86);
    if ((_DWORD)v141 == 1)
    {
      if ((v101 & 1) == 0)
      {

        outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v202, (uint64_t)v180, v169, v170, v172);
        v202 = 0;
        goto LABEL_10;
      }
    }
    else if ((v101 & 1) == 0)
    {

      v112 = v189;
      v87 = v196;
      goto LABEL_54;
    }
    if (one-time initialization token for allowNonMomentaryEditModeSelection != -1)
      swift_once();
    v143 = allowNonMomentaryEditModeSelection;

    v112 = v189;
    v87 = v196;
    if (!v143)
    {
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v202, (uint64_t)v180, v169, v170, v172);
      goto LABEL_68;
    }
LABEL_54:
    if ((v193 & 1) != 0)
      goto LABEL_55;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v202, (uint64_t)v180, v169, v170, v172);
    LODWORD(v193) = 0;
LABEL_68:
    v202 = 0;
    goto LABEL_11;
  }

  v6 = v189;
  v60 = v185;
LABEL_5:
  MEMORY[0x1E0C80A78](v65, v66);
  v73 = v6[15];
  v74 = v194;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  static Update.ensure<A>(_:)();
  v75 = v207;
  if (v207 <= 1)
  {
    v202 = 0;
    LODWORD(v193) = 1;
    v76 = v200;
LABEL_9:
    v86 = v195;
LABEL_10:
    v87 = v196;
    goto LABEL_11;
  }
  v172 = v22;
  v77 = v208;
  v78 = (_QWORD *)swift_allocObject();
  v78[2] = v60;
  v78[3] = v74;
  v79 = v202;
  v78[4] = v202;
  v78[5] = v73;
  v78[6] = v75;
  v78[7] = v77;
  v80 = v203;
  v81 = *(void (**)(char *, char *, uint64_t))(v203 + 16);
  v82 = v193;
  v83 = v204;
  v81(v193, v205, v204);
  v84 = v192;
  v85 = v201;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v82, 1, v201) == 1)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v83);
    v202 = 0;
    LODWORD(v193) = 1;
    v76 = v200;
    v61 = v172;
    goto LABEL_9;
  }
  v171 = v81;
  v104 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
  v105 = v179;
  v104(v179, v82, v85);
  v106 = (uint64_t)v180;
  v104(v180, v105, v85);
  v107 = (*(unsigned __int8 *)(v84 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  v108 = (char *)swift_allocObject();
  v109 = v194;
  *((_QWORD *)v108 + 2) = v185;
  *((_QWORD *)v108 + 3) = v109;
  *((_QWORD *)v108 + 4) = v79;
  *((_QWORD *)v108 + 5) = v73;
  *((_QWORD *)v108 + 6) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> (@out ());
  *((_QWORD *)v108 + 7) = v78;
  v104(&v108[v107], (char *)v106, v85);
  v110 = partial apply for closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:);
  v111 = 1;
  v76 = v200;
  v61 = v172;
  v86 = v195;
  v87 = v196;
  v112 = v189;
LABEL_57:
  swift_retain();
  v145 = swift_allocObject();
  v202 = (uint64_t)v110;
  *(_QWORD *)(v145 + 16) = v110;
  *(_QWORD *)(v145 + 24) = v108;
  v146 = swift_allocObject();
  *(_QWORD *)(v146 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  *(_QWORD *)(v146 + 24) = v145;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  LODWORD(v193) = 1;
  if (!v111)
    goto LABEL_11;
LABEL_58:
  v147 = (char *)v206 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v206) + 0x100);
  swift_beginAccess();
  v148 = v197;
  v149 = v182;
  v197[2]((uint64_t)v182, v147, v86);
  v150 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48);
  v151 = v150(v149, 1, v199);
  ((void (*)(char *, uint64_t))v148[1])(v149, v86);
  if (v151 != 1 && !(_DWORD)v193)
  {
    LODWORD(v193) = 0;
    v76 = v200;
    goto LABEL_11;
  }
  v180 = v108;
  v152 = v177;
  v153 = v204;
  v171(v177, v205, v204);
  v154 = v192;
  v155 = v201;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v152, 1, v201) == 1)
  {
    v156 = v203;
    (*(void (**)(char *, uint64_t))(v203 + 8))(v152, v153);
  }
  else
  {
    v157 = v152;
    v158 = v112;
    v159 = v176;
    v160 = v175;
    (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v175, v157, v155);
    swift_beginAccess();
    v161 = v199;
    v162 = v150(v147, 1, v199);
    v156 = v203;
    if (v162)
    {
      (*(void (**)(char *, uint64_t))(v154 + 8))(v160, v155);
      swift_endAccess();
    }
    else
    {
      v163 = v173;
      (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v173, v147, v161);
      swift_endAccess();
      MEMORY[0x18D75B9C8](v161);
      v164 = *(void (**)(char *, uint64_t))(v158[15] + 40);
      v165 = v194;
      v164(v160, v194);
      specialized Binding.wrappedValue.setter();
      (*(void (**)(char *, uint64_t))(v174 + 8))(v159, v165);
      (*(void (**)(char *, uint64_t))(v198 + 8))(v163, v161);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v160, v155);
    }
  }
  v166 = v200;
  v167 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v186, sel_deselectItemAtIndexPath_animated_, v167, 1);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v202);
  return (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v205, v153);
}

uint64_t UICollectionViewListCoordinatorBase.canSelect(rowAt:)(char *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  int v24;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  unsigned __int8 v30;

  v29 = a1;
  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v28 = (void (*)(char *, char *, uint64_t))v4[14];
  v27 = (void (*)(char *, char *, uint64_t))v4[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v26 - v14;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(a2, v16, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v17 = 0;
    v18 = 1;
    v19 = v29;
  }
  else
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v26(v15, v10, AssociatedTypeWitness);
    v20 = (void (*)(char *, char *, uint64_t))v4[15];
    v21 = (void (*)(char *, char *, uint64_t))v4[13];
    swift_getAssociatedConformanceWitness();
    v22 = WeakSelectionBasedStorage.$isSelectionEnabled.getter();
    if ((v22 & 0x100000000) != 0)
    {
      v17 = 1;
    }
    else
    {
      MEMORY[0x1E0C80A78](v22, v23);
      *(&v26 - 6) = v27;
      *(&v26 - 5) = v21;
      *(&v26 - 4) = v28;
      *(&v26 - 3) = v20;
      *((_DWORD *)&v26 - 4) = v24;
      *(&v26 - 1) = (void (*)(char *, char *, uint64_t))v15;
      static Update.ensure<A>(_:)();
      v17 = v30;
    }
    v19 = v29;
    v26(v29, v15, AssociatedTypeWitness);
    v18 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v19, v18, 1, AssociatedTypeWitness);
  return v17;
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:selectionFollowsFocusForItemAt:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Class isa;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t AssociatedConformanceWitness;
  void (*v19)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  _BOOL8 v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = type metadata accessor for Optional();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v6);
  v8 = (char *)&v25 - v7;
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (!v15)
  {
    v17 = 0;
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v29, v9);
    goto LABEL_8;
  }
  v16 = swift_getAssociatedTypeWitness();
  v17 = (void *)swift_dynamicCastUnknownClass();
  if (!v17)
  {

    goto LABEL_7;
  }
  v25 = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v20 = v15;
  v19(&v30, v16, AssociatedConformanceWitness);

  if (v31 == 1)
    goto LABEL_7;
  v24 = v30;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v30, v31, v32, v33, v34, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v29, v9);
  if ((v24 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);

    return 1;
  }
LABEL_8:
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)v13, v21, (uint64_t)v8);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v22 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v8, 1) != 1;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v28);
  return v22;
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.stopWaitingForAnimationCompletion()()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8);
  v2 = *((_BYTE *)v0 + v1);
  *((_BYTE *)v0 + v1) = 2;
  UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v2);
}

id UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[28];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[11];
  __int16 v99;
  char v100;
  int v101;
  __int16 v102;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *MEMORY[0x1E0DEEDD8] & *v1;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)(v5 + 248), v10);
  if (!v12)
    return 0;
  v13 = (void *)v12;
  v67 = a1;
  v68 = v6;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, sel_cellForItemAtIndexPath_, isa);

  if (!v15)
    return 0;
  type metadata accessor for AnyListCollectionViewCell();
  v16 = (_QWORD *)swift_dynamicCastClass();
  if (!v16)
  {

    return 0;
  }
  v66 = v15;
  (*(void (**)(_QWORD *__return_ptr))((*v4 & *v16) + 0x80))(v69);
  outlined init with take of SwipeActions.Value?((uint64_t)v69, (uint64_t)v83, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with take of SwipeActions.Value?((uint64_t)v83, (uint64_t)&v84, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v84) == 1)
    goto LABEL_7;
  v17 = v84;
  v18 = v87;
  v62 = v97;
  v63 = v96;
  v64 = v95;
  v65 = v94;
  v55 = v93;
  v60 = v92;
  v58 = v89;
  v59 = v85;
  v19 = v86;
  v61 = v88;
  v56 = v91;
  v57 = v90;
  outlined copy of SwipeActions.Configuration?(v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96);
  outlined release of SwipeActions.Value?(v83);
  v54 = v18;
  if (!v18)
  {
LABEL_7:

    return 0;
  }
  v49 = (v17 >> 8) & 1;
  v50 = v17 & 1;
  v53 = v19;
  v100 = BYTE1(v19) & 1;
  v51 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  LOWORD(v69[0]) = v17 & 0x101;
  v69[1] = v59;
  v70 = v19;
  v71 = v100;
  v20 = v54;
  v72 = v54;
  v73 = v61;
  v74 = v58;
  v75 = v57;
  v76 = v56;
  v77 = v60;
  v78 = v55;
  v79 = v65;
  v80 = v64;
  v81 = v63;
  v82 = v62;
  v21 = swift_allocObject();
  v48 = v21;
  swift_unknownObjectWeakInit();
  v22 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v67, v68);
  v23 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v52 = v17;
  v24 = (v8 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v5 + 96);
  *(_OWORD *)(v25 + 24) = *(_OWORD *)(v5 + 104);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(v5 + 120);
  *(_QWORD *)(v25 + 48) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v25 + v23, v11, v22);
  v26 = v25 + v24;
  *(_BYTE *)v26 = v50;
  *(_BYTE *)(v26 + 1) = v49;
  *(_DWORD *)(v26 + 2) = v101;
  *(_WORD *)(v26 + 6) = v102;
  v28 = v58;
  v27 = v59;
  *(_QWORD *)(v26 + 8) = v59;
  v29 = v53;
  *(_BYTE *)(v26 + 16) = v53;
  *(_BYTE *)(v26 + 17) = v100;
  *(_DWORD *)(v26 + 18) = *(_DWORD *)&v98[7];
  *(_WORD *)(v26 + 22) = v99;
  v30 = v60;
  v31 = v61;
  *(_QWORD *)(v26 + 24) = v20;
  *(_QWORD *)(v26 + 32) = v31;
  *(_QWORD *)(v26 + 40) = v28;
  v32 = v56;
  v33 = v57;
  *(_BYTE *)(v26 + 48) = v57;
  *(_DWORD *)(v26 + 49) = *(_DWORD *)v98;
  *(_DWORD *)(v26 + 52) = *(_DWORD *)&v98[3];
  *(_QWORD *)(v26 + 56) = v32;
  *(_QWORD *)(v26 + 64) = v30;
  v34 = v55;
  v36 = v64;
  v35 = v65;
  *(_QWORD *)(v26 + 72) = v55;
  *(_QWORD *)(v26 + 80) = v35;
  v38 = v62;
  v37 = v63;
  *(_QWORD *)(v26 + 88) = v36;
  *(_QWORD *)(v26 + 96) = v37;
  *(_QWORD *)(v26 + 104) = v38;
  v39 = v20;
  v40 = v52;
  v41 = v32;
  outlined copy of SwipeActions.Configuration?(v52, v27, v29, v39, v31, v28, v33, v32, v30, v34, v35, v36, v37);
  v47 = v30;
  v42 = v59;
  v43 = v29;
  v44 = v54;
  outlined copy of SwipeActions.Configuration?(v40, v59, v43, v54, v31, v28, v33, v41, v47, v34, v65, v64, v63);
  swift_retain();
  v45 = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)v69, (uint64_t)partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:), v25);

  outlined consume of SwipeActions.Configuration?(v52, v42, v53, v44, v61, v28, v33, v41, v60, v34, v65, v64, v63);
  swift_release();
  return v45;
}

uint64_t UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t a1, void **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  Class isa;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  Class v84;
  id v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135[2];
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, void *, void *, void *);
  void *v139;
  void (*v140)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t);
  char *v141;
  uint64_t v142[28];
  _BYTE v143[112];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v3 = v2;
  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v7 = type metadata accessor for IndexPath();
  v115 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v113 = v9;
  v114 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v6[14];
  v11 = *(_QWORD *)(v10 + 8);
  v118 = v6[12];
  v13 = type metadata accessor for ShadowListDataSource(0, v118, v11, v12);
  v117 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v93 - v16;
  v18 = *a2;
  v19 = a2[1];
  v116 = v18;
  v20 = (id)MEMORY[0x18D760234]((char *)v3 + v6[31], v15);
  if (v20)
  {
    v110 = v19;
    v111 = v7;
    v112 = a1;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v20, sel_cellForItemAtIndexPath_, isa);

    if (v22)
    {
      type metadata accessor for AnyListCollectionViewCell();
      v23 = (_QWORD *)swift_dynamicCastClass();
      if (!v23)
      {

        return 0;
      }
      v109 = v22;
      (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x80))(&v136);
      outlined init with take of SwipeActions.Value?((uint64_t)&v136, (uint64_t)v142, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined init with take of SwipeActions.Value?((uint64_t)v142, (uint64_t)v143, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v143) == 1)
        goto LABEL_11;
      v24 = v147;
      v25 = v155;
      v103 = v157;
      v92 = v157;
      v104 = v156;
      v106 = v154;
      v107 = v153;
      v108 = v152;
      v26 = v144;
      v27 = v145;
      v105 = v146;
      v101 = v149;
      v102 = v148;
      v99 = v151;
      v100 = v150;
      outlined copy of SwipeActions.Configuration?(v144, v145, v146, v147, v148, v149, v150, v151, (uint64_t)v152, v153, v154, v155, v156);
      outlined release of SwipeActions.Value?(v142);
      if (!v24)
      {
LABEL_11:
        v108 = 0;
        v48 = v10;
      }
      else
      {
        v93 = v10;
        v94 = v17;
        v97 = v25;
        v98 = v26;
        LOWORD(v119) = v26 & 0x101;
        v95 = v24;
        v96 = v27;
        *((_QWORD *)&v119 + 1) = v27;
        v28 = v25;
        v29 = v106;
        v120 = v105 & 0x1FF;
        v30 = v101;
        v31 = v102;
        v121 = v24;
        v122 = v102;
        v123 = v101;
        v32 = v99;
        v124 = v100;
        v125 = v99;
        v126 = (uint64_t)v108;
        v127 = v107;
        v128 = v106;
        v33 = v104;
        v129 = v28;
        v130 = v104;
        v131 = v103;
        swift_bridgeObjectRetain();
        outlined copy of Binding<NavigationSplitViewColumn>?(v31, v30);
        v34 = v32;
        v36 = v107;
        v35 = (uint64_t)v108;
        v37 = v29;
        v38 = v97;
        outlined copy of Binding<SwipeActionResultToken?>?(v34, (uint64_t)v108, v107, v37, v97, v33);
        v39 = v96;
        closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(&v119, v3, v112, v135);
        v90 = v38;
        v88 = v36;
        v87 = v35;
        v40 = v99;
        v41 = v95;
        v43 = v101;
        v42 = v102;
        v44 = v100;
        outlined consume of SwipeActions.Configuration?(v98, v39, v105, v95, v102, v101, v100, v99, v87, v88, v106, v90, v104);
        v92 = v103;
        outlined consume of SwipeActions.Configuration?(v98, v39, v105, v41, v42, v43, v44, v40, (uint64_t)v108, v107, v106, v97, v104);
        v20 = v135[0];
        v45 = objc_msgSend(v135[0], sel_actions);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextualAction);
        v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v46 >> 62)
        {
          swift_bridgeObjectRetain();
          v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        v17 = v94;
        if (v47)
          goto LABEL_16;
        v108 = v20;
        v48 = v93;
      }
      v49 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88);
      v105 = (uint64_t)v3;
      v50 = (char *)v3 + v49;
      swift_beginAccess();
      v51 = v117;
      v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 16))(v17, v50, v13);
      MEMORY[0x1E0C80A78](v52, v53);
      v54 = v6[13];
      v89 = v118;
      v90 = v54;
      v55 = v6[15];
      KeyPath = swift_getKeyPath();
      v58 = MEMORY[0x1E0C80A78](KeyPath, v57);
      v106 = v55;
      v107 = v54;
      v89 = v54;
      v90 = v48;
      v91 = v55;
      v92 = v59;
      v60 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v13, v58);
      ListCoreDataSource.visitContent<A>(atRow:visitor:)(v112, (uint64_t)partial apply for implicit closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:), (uint64_t)&v87, v13, MEMORY[0x1E0DEAFA0], v60, (uint64_t)&v136);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v13);
      swift_release();
      if (v136 == 2)
      {

        return (uint64_t)v108;
      }
      v61 = v48;
      v20 = v108;
      if ((v136 & 1) == 0)
      {
LABEL_16:

        return (uint64_t)v20;
      }
      v62 = static Text.System.uiDelete.getter();
      v64 = v63;
      v66 = v65;
      v67 = (uint64_t)v116;
      if (v116 == (void *)1)
      {
        EnvironmentValues.init()();
        v67 = (uint64_t)v116;
        v68 = (void *)v136;
        v69 = (void *)v137;
      }
      else
      {
        v136 = (uint64_t)v116;
        v137 = (uint64_t)v110;
        v69 = v110;
        v68 = v116;
      }
      v135[0] = v68;
      v135[1] = v69;
      v133 = 0;
      v134 = 0;
      v132 = 0;
      outlined copy of EnvironmentValues?(v67);
      v70 = Text.resolveString(in:with:idiom:)();
      v116 = v71;
      v117 = v70;
      outlined consume of Text.Storage(v62, v64, v66 & 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_187BFF9C0;
      v73 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v75 = v114;
      v74 = v115;
      v76 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v114, v112, v111);
      v77 = (*(unsigned __int8 *)(v74 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
      v78 = (char *)swift_allocObject();
      v79 = v107;
      *((_QWORD *)v78 + 2) = v118;
      *((_QWORD *)v78 + 3) = v79;
      v80 = v106;
      *((_QWORD *)v78 + 4) = v61;
      *((_QWORD *)v78 + 5) = v80;
      *((_QWORD *)v78 + 6) = v73;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v78[v77], v75, v76);
      swift_retain();
      v81 = (void *)MEMORY[0x18D75CC88](v117, v116);
      swift_bridgeObjectRelease();
      v140 = partial apply for closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:);
      v141 = v78;
      v136 = MEMORY[0x1E0C809B0];
      v137 = 1107296256;
      v138 = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
      v139 = &block_descriptor_86;
      v82 = _Block_copy(&v136);
      v83 = objc_msgSend((id)objc_opt_self(), sel_contextualActionWithStyle_title_handler_, 1, v81, v82);

      _Block_release(v82);
      swift_release();
      swift_release();
      *(_QWORD *)(v72 + 32) = v83;
      v136 = v72;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextualAction);
      v84 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v85 = objc_msgSend((id)objc_opt_self(), sel_configurationWithActions_, v84);

      return (uint64_t)v85;
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v20;
}

uint64_t (*UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(void *a1, uint64_t a2, char a3))()
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;

  v4 = v3;
  v8 = *MEMORY[0x1E0DEEDD8] & *v4;
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9, v12);
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v8 + 96);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v8 + 104);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v8 + 120);
  *(_QWORD *)(v15 + 48) = v13;
  *(_QWORD *)(v15 + 56) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(_BYTE *)(v15 + v14 + v11) = a3;
  v16 = a1;
  return partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:);
}

void UICollectionViewListCoordinatorBaseBase.__ivar_destroyer()
{
  uint64_t v0;

}

id UICollectionViewListCoordinatorBaseBase.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UICollectionViewListCoordinatorBaseBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase()
{
  unsigned __int8 *v0;

  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase(uint64_t a1)
{
  unsigned __int8 *v1;

  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase(char *a1, char *a2)
{
  return static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(char a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  if (a1 != 3 && *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xE8)) == 3)
  {
    v2 = (void *)MEMORY[0x18D760234]((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF8));
    if (v2)
    {
      v6 = v2;
      UICollectionViewListCoordinatorBase.updateListContents(_:)(v2, v3, v4, v5);

    }
  }
}

void closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v15;
  uint64_t v16;
  UIView *v17;
  uint64_t v18;
  void *v19;

  v15 = a4 + 16;
  swift_beginAccess();
  v16 = MEMORY[0x18D760234](v15);
  if (v16)
  {
    v17 = (UIView *)v16;
    if (a7 != a9)
    {
      UpdateCoalescingCollectionView.scheduleVisibleCellsUpdate(indexPath:kind:)(a1, a2, a3);
      swift_beginAccess();
      v18 = MEMORY[0x18D760234](a5 + 16);
      if (v18)
      {
        v19 = (void *)v18;
        UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(v17);

      }
    }

  }
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(UIView *a1)
{
  _QWORD *v1;
  char *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF0);
  if (v2[9] != 1 || *(_QWORD *)v2 | v2[8])
  {
    v3 = specialized UIView.firstAncestorWhere(_:)(a1);
    if (v3)
    {
      v6 = v3;
      ObjectType = swift_getObjectType();
      v5 = swift_conformsToProtocol2();
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

BOOL UICollectionViewListCoordinatorBase.hasPendingID<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v28 = a3;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v26 - v8;
  v10 = v5[12];
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v26 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v26 - v19;
  v21 = (char *)v3 + v5[25];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v21, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5[14] + 8) + 120))(a1, v27, v28, v10);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v10);
    v23 = type metadata accessor for IndexPath();
    v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
    v22 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v9, 1, v23) != 1;
    outlined destroy of Binding<AttributedString>((uint64_t)v9, &lazy cache variable for type metadata for IndexPath?, v24, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  }
  return v22;
}

uint64_t (*implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;

  v10 = type metadata accessor for ShadowListDataSource(0, a2, *(_QWORD *)(a4 + 8), a4);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v19 - v14, a1, v10, v13);
  v16 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = a2;
  *((_QWORD *)v17 + 3) = a3;
  *((_QWORD *)v17 + 4) = a4;
  *((_QWORD *)v17 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v16], v15, v10);
  return partial apply for implicit closure #2 in implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:);
}

void @objc UICollectionViewListCoordinatorBase.indexTitles(for:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a3;
  v5 = a1;
  specialized UICollectionViewListCoordinatorBase.indexTitles(for:)((uint64_t)v5, v6, v7, v8);
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:indexPathForIndexTitle:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v15;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[14];
  v8 = type metadata accessor for ShadowListDataSource(0, v6[12], *(_QWORD *)(v7 + 8), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v15 - v11;
  v13 = (char *)v4 + v6[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v13, v8);
  ShadowListDataSource<>.section(forSectionLabelIndex:)(a4, v8, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return IndexPath.init(index:)();
}

Class @objc UICollectionViewListCoordinatorBase.collectionView(_:indexPathForIndexTitle:at:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v19;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  UICollectionViewListCoordinatorBase.collectionView(_:indexPathForIndexTitle:at:)((uint64_t)v14, v15, v16, a5);

  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return isa;
}

unint64_t implicit closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)()
{
  return 0xD00000000000003BLL;
}

id @objc UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  v15 = (void *)UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(v13, v10, v12, (uint64_t)v9);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v15;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:));
}

_QWORD *closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD *result;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *);
  uint64_t v17;

  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v3 = (_QWORD *)((char *)a1 + v2[35]);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v2[14];
  v9 = v2[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = v2[15];
  v12 = v2[13];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = WeakSelectionBasedStorage.action.getter(v4, v5, v6, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  v16 = (uint64_t (*)(_QWORD *))result;
  if (result)
  {
    if (result == (_QWORD *)1)
    {
      result = 0;
    }
    else
    {
      v17 = v15;
      result = (_QWORD *)swift_allocObject();
      result[2] = v9;
      result[3] = v12;
      result[4] = v8;
      result[5] = v11;
      result[6] = v16;
      result[7] = v17;
      v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> ();
    }
  }
  *a2 = v16;
  a2[1] = result;
  return result;
}

uint64_t closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  getContiguousArrayStorageType<A>(for:)(AssociatedTypeWitness, AssociatedTypeWitness);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a3, AssociatedTypeWitness);
  _finalizeUninitializedArray<A>(_:)();
  if (MEMORY[0x18D75D078]())
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v10 = specialized Set.init(_nonEmptyArrayLiteral:)(v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9E8];
  }
  swift_bridgeObjectRelease();
  a1(v10);
  return swift_bridgeObjectRelease();
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:));
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.canSelect(rowAt:)@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))AGGraphGetValue();
  swift_retain();
  v4(&v6, a1);
  result = swift_release();
  *a2 = v6;
  return result;
}

BOOL UICollectionViewListCoordinatorBase.collectionView(_:shouldSelectItemAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  Class isa;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t AssociatedConformanceWitness;
  char v24;
  _BOOL8 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v47 = v5[14];
  v6 = v5[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v44 - v10;
  v45 = v2;
  v48 = UICollectionViewListCoordinatorBase.canSelect(rowAt:)((char *)&v44 - v10, a2);
  v12 = objc_msgSend(a1, sel_isEditing);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48);
  v49 = v11;
  v14 = v13(v11, 1, AssociatedTypeWitness);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (!v16)
  {
LABEL_22:
    if (v14 != 1)
    {
      if ((v48 & 1) == 0)
        goto LABEL_30;
      if ((UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v17, v18) & 1) != 0)
      {
LABEL_29:
        v25 = 1;
        goto LABEL_31;
      }
    }
    v36 = objc_msgSend(a1, sel_indexPathsForSelectedItems);
    if (v36)
    {
      v37 = v36;
      type metadata accessor for IndexPath();
      v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v39 = *(_QWORD *)(v38 + 16);
      swift_bridgeObjectRelease();
      v25 = v39 < 2;
      if (v14 != 1)
        goto LABEL_31;
      goto LABEL_30;
    }
    if (v14 != 1)
      goto LABEL_29;
LABEL_30:
    v25 = 0;
    goto LABEL_31;
  }
  v46 = v8;
  v19 = swift_getAssociatedTypeWitness();
  v20 = swift_dynamicCastUnknownClass();
  if (!v20)
    goto LABEL_21;
  v21 = v20;
  v22 = v14 == 1 ? v12 : 1;
  if (v22 == 1)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v52, v19, AssociatedConformanceWitness);
    v24 = v52;
    if (v53)
    {
      if (v53 != 1)
      {
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v52, v53, v54, v55, v56, v57);
        if ((v24 & 1) == 0)
        {

          v25 = 1;
          v8 = v46;
LABEL_31:
          v41 = v49;
          v40 = v50;
          goto LABEL_36;
        }
      }
    }
    else
    {
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v52, 0, v54, v55, v56, v57);
    }
  }
  if (!specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(v21, v6, v5[13], v19, v47, v5[15], AssociatedConformanceWitness))
  {
LABEL_21:

    v8 = v46;
    goto LABEL_22;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  v26 = MEMORY[0x1E0DEE9D8];
  if (v52)
    v27 = v52;
  else
    v27 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v27 + 16))
  {
    v51 = MEMORY[0x1E0DEE9D8];
    v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    LOBYTE(v52) = 0;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v29 = type metadata accessor for MenuVisitor.MenuStackGroup();
    v30 = *(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_187BF9830;
    v33 = v32 + v31;
    v8 = v46;
    if (one-time initialization token for empty != -1)
      swift_once();
    v34 = __swift_project_value_buffer(v29, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v33, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    v35 = v52;
    v52 = 0;
    LOBYTE(v53) = 0;
    v54 = MEMORY[0x1E0DEE9E0];
    v55 = v28;
    v56 = v26;
    v57 = MEMORY[0x1E0DEE9E0];
    LOBYTE(v58) = v35;
    v59 = v32;
    MenuVisitor.visit(_:uniqueNames:)(v27, &v51);
    swift_bridgeObjectRelease();
    v26 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = v46;
  }
  v41 = v49;
  v40 = v50;
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v42 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    swift_release();

  }
  v25 = v42 != 0;
LABEL_36:
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v8);
  return v25;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldSelectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:shouldSelectItemAt:));
}

void UICollectionViewListCoordinatorBase.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Class isa;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t AssociatedConformanceWitness;
  void (*v43)(uint64_t *__return_ptr, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  int v60;
  char *v61;
  int v62;
  void (*v63)(char *, uint64_t);
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  unsigned __int8 v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  uint64_t v95;
  void (*v96)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v97;
  int v98;
  uint64_t v99;
  char *v100;
  void (*v101)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(_QWORD);
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  void (*v126)(char *, uint64_t);
  id v127;
  uint64_t v128;
  char *v129;
  char *v130;
  id v131;
  uint64_t v132;
  void (*v133)(_QWORD);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(_QWORD *__return_ptr, _QWORD, _QWORD);
  char *v138;
  uint64_t v139;
  unsigned __int8 v140;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v6 = v5[13];
  v114 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, v6);
  v113 = (char *)&v89 - v7;
  v119 = v8;
  v9 = type metadata accessor for Binding();
  v122 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v112 = (char *)&v89 - v11;
  v117 = v5[14];
  v12 = *(_QWORD *)(v117 + 8);
  v125 = v5;
  v13 = v5[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v128 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v129 = (char *)&v89 - v16;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v115 = (char *)&v89 - v19;
  v123 = v9;
  v121 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v21);
  v124 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v89 - v25;
  v120 = AssociatedTypeWitness;
  v118 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118, v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v89 - v33;
  MEMORY[0x1E0C80A78](v35, v36);
  v130 = (char *)&v89 - v37;
  v126 = (void (*)(char *, uint64_t))a2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v127 = a1;
  v131 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v131)
  {
    v39 = swift_getAssociatedTypeWitness();
    v40 = swift_dynamicCastUnknownClass();
    if (!v40)
    {

      return;
    }
    v41 = (void *)v40;
    v97 = v30;
    v105 = v12;
    v110 = v13;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v43 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    v106 = AssociatedConformanceWitness;
    v96 = v43;
    ((void (*)(uint64_t *__return_ptr, uint64_t))v43)(&v132, v39);
    v104 = v134;
    v103 = v135;
    v102 = v136;
    v101 = v137;
    v100 = v138;
    v99 = v139;
    v98 = v140;
    v111 = v133;
    v109 = v132;
    v44 = (v133 != (void (*)(_QWORD))1) & v132;
    LODWORD(v95) = objc_msgSend(v127, sel_isEditing);
    v45 = (uint64_t)v130;
    v46 = v116;
    UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)v126, v47, (uint64_t)v130);
    objc_msgSend(v41, sel_setNeedsUpdateConfiguration);
    v107 = (uint64_t)v41;
    objc_msgSend(v41, sel_layoutIfNeeded);
    v48 = (char *)v46 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v46) + 0x100);
    swift_beginAccess();
    v49 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v94 = v48;
    v50 = v121;
    v93 = v49;
    v49(v26, v48, v121);
    v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48);
    LODWORD(v48) = v92(v26, 1, v123);
    v91 = *(void (**)(char *, uint64_t))(v20 + 8);
    v91(v26, v50);
    v51 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v52 = v118;
    v51(v34, v45, v118);
    v108 = v39;
    if ((_DWORD)v48 == 1)
    {
      v53 = v34;
      v54 = *(void (**)(char *, uint64_t))(v27 + 8);
      v54(v53, v52);
      v55 = v110;
      v56 = v129;
      v57 = v124;
      v58 = v125;
      v59 = v97;
      if ((v44 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48))(v34, 1, v120);
      v61 = v34;
      v54 = *(void (**)(char *, uint64_t))(v27 + 8);
      v54(v61, v52);
      v62 = v95;
      if (v60 != 1)
        v62 = 1;
      v55 = v110;
      v56 = v129;
      v57 = v124;
      v58 = v125;
      v59 = v97;
      if (((v62 | v44) & 1) != 0)
      {
LABEL_14:
        if (v111 == (void (*)(_QWORD))1)
        {
LABEL_20:
          v51(v59, (uint64_t)v130, v52);
          v74 = v128;
          v75 = v120;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v59, 1, v120) == 1)
          {
            v54(v59, v52);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v56, v59, v75);
            v76 = v121;
            v93(v57, v94, v121);
            v77 = v57;
            v78 = v57;
            v79 = v123;
            if (v92(v77, 1, v123) == 1)
            {
              (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v75);
              v91(v78, v76);
            }
            else
            {
              v126 = v54;
              v80 = v112;
              (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v112, v78, v79);
              v81 = objc_msgSend(v127, sel_isEditing);
              v82 = v114;
              v83 = v113;
              if ((v81 & 1) == 0)
              {
                MEMORY[0x18D75B9C8](v79);
                v84 = v119;
                (*(void (**)(uint64_t))(v58[15] + 48))(v119);
                specialized Binding.wrappedValue.setter();
                (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
              }
              MEMORY[0x18D75B9C8](v79);
              v85 = v129;
              v86 = v119;
              (*(void (**)(char *, uint64_t))(v58[15] + 32))(v129, v119);
              specialized Binding.wrappedValue.setter();
              (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v86);
              (*(void (**)(char *, uint64_t))(v122 + 8))(v80, v79);
              (*(void (**)(char *, uint64_t))(v128 + 8))(v85, v75);
              v55 = v110;
              v54 = v126;
            }
          }
LABEL_27:
          v87 = v58[15];
          v88 = v108;
          swift_getAssociatedConformanceWitness();
          specialized UICollectionViewListCoordinatorBase.presentEditMenu<A>(on:)(v107, v55, v119, v88, v117, v87, v106);

          outlined consume of PlatformItemList.Item.SelectionBehavior?(v109, (uint64_t)v111, v104, v103, v102, (uint64_t)v101);
          v54(v130, v52);
          return;
        }
LABEL_15:
        if ((v109 & 0x10000) != 0)
          v73 = 0;
        else
          v73 = v44;
        if (v73 == 1 && !objc_msgSend(v127, sel_isEditing))
          goto LABEL_27;
        goto LABEL_20;
      }
    }
    v63 = v54;
    v96(&v132, v108, v106);
    v64 = v133;
    if (v133 != (void (*)(_QWORD))1)
    {
      v97 = v138;
      v96 = v137;
      v95 = v136;
      v65 = v134;
      v90 = v135;
      v66 = v132;
      outlined copy of AppIntentExecutor?((uint64_t)v133);
      v67 = v66;
      v52 = v118;
      v68 = outlined consume of PlatformItemList.Item.SelectionBehavior?(v67, (uint64_t)v64, v65, v90, v95, (uint64_t)v96);
      if (v64)
      {
        v64(v68);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v64);
      }
    }
    v69 = type metadata accessor for IndexPath();
    v70 = *(_QWORD *)(v69 - 8);
    v71 = (uint64_t)v115;
    (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v70 + 16))(v115, v126, v69);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v69);
    v72 = (uint64_t)v46 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v46) + 0xD8);
    swift_beginAccess();
    outlined assign with take of IndexPath?(v71, v72);
    swift_endAccess();
    v55 = v110;
    v56 = v129;
    v54 = v63;
    v57 = v124;
    v58 = v125;
    goto LABEL_14;
  }
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:didSelectItemAt:));
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:didDeselectItemAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v61;
  uint64_t (*v62)(uint64_t);
  char v63;
  void (*v64)(char *, uint64_t);
  Class isa;
  id v66;
  uint64_t v67;
  uint64_t AssociatedConformanceWitness;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v94 = a2;
  v83 = a1;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = type metadata accessor for IndexPath();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  v92 = v4;
  v90 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v82 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (IndexPath?, IndexPath?)();
  v88 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v91 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v84 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v89 = (char *)&v76 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v93 = (uint64_t)&v76 - v19;
  v20 = v3[13];
  v79 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v85 = (char *)&v76 - v23;
  v24 = type metadata accessor for Binding();
  v86 = *(_QWORD *)(v24 - 8);
  v87 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v76 - v26;
  v28 = v3[12];
  v81 = *(_QWORD *)(v3[14] + 8);
  v80 = v28;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = type metadata accessor for Optional();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v76 - v33;
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v76 - v38;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v94, v40, (uint64_t)v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
    v42 = (uint64_t)v91;
    v41 = v92;
    v43 = v93;
    v44 = v94;
    v46 = (uint64_t)v89;
    v45 = v90;
    v47 = v88;
    v48 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  }
  else
  {
    v49 = v85;
    v77 = v20;
    v76 = v3;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v39, v34, AssociatedTypeWitness);
    v50 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x100);
    v78 = v2;
    v51 = (char *)v2 + v50;
    swift_beginAccess();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v51, 1, v87))
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v39, AssociatedTypeWitness);
      swift_endAccess();
    }
    else
    {
      v52 = v86;
      v53 = v87;
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v27, v51, v87);
      swift_endAccess();
      v54 = v49;
      MEMORY[0x18D75B9C8](v53);
      v55 = v77;
      (*(void (**)(char *, uint64_t))(v76[15] + 40))(v39, v77);
      specialized Binding.wrappedValue.setter();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v54, v55);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v53);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v39, AssociatedTypeWitness);
    }
    v42 = (uint64_t)v91;
    v41 = v92;
    v43 = v93;
    v44 = v94;
    v46 = (uint64_t)v89;
    v45 = v90;
    v47 = v88;
    v48 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v2 = v78;
  }
  v56 = (uint64_t)v2 + *(_QWORD *)((*v48 & *v2) + 0xD8);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v43, v44, v41);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
  v57(v43, 0, 1, v41);
  v58 = v42 + *(int *)(v47 + 48);
  outlined init with copy of IndexPath?(v56, v42);
  outlined init with copy of IndexPath?(v43, v58);
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v59(v42, 1, v41) != 1)
  {
    outlined init with copy of IndexPath?(v42, v46);
    if (v59(v58, 1, v41) != 1)
    {
      v61 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v82, v58, v41);
      v62 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
      v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      v64 = *(void (**)(char *, uint64_t))(v45 + 8);
      v64(v61, v41);
      outlined destroy of Binding<AttributedString>(v93, &lazy cache variable for type metadata for IndexPath?, v62, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v64((char *)v46, v41);
      result = outlined destroy of Binding<AttributedString>(v42, &lazy cache variable for type metadata for IndexPath?, v62, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if ((v63 & 1) == 0)
        return result;
      goto LABEL_14;
    }
    outlined destroy of Binding<AttributedString>(v43, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v41);
    return outlined destroy of (IndexPath?, IndexPath?)(v42);
  }
  outlined destroy of Binding<AttributedString>(v43, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v59(v58, 1, v41) != 1)
    return outlined destroy of (IndexPath?, IndexPath?)(v42);
  outlined destroy of Binding<AttributedString>(v42, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_14:
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v66 = objc_msgSend(v83, sel_cellForItemAtIndexPath_, isa);

  if (v66)
  {
    v67 = swift_getAssociatedTypeWitness();
    if (swift_dynamicCastUnknownClass()
      && (AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(),
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v95, v67, AssociatedConformanceWitness), v69 = v96, v96 != 1))
    {
      v71 = v98;
      v70 = v99;
      v72 = v100;
      v93 = v101;
      v94 = v102;
      v73 = v97;
      v74 = v95;
      outlined copy of AppIntentExecutor?(v98);
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v74, v69, v73, v71, v70, v72);
      if (v71)
      {
        static Update.enqueueAction(_:)();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v71);
      }

      v41 = v92;
    }
    else
    {

    }
  }
  v75 = (uint64_t)v84;
  v57((uint64_t)v84, 1, 1, v41);
  swift_beginAccess();
  outlined assign with take of IndexPath?(v75, v56);
  return swift_endAccess();
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didDeselectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:didDeselectItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:));
}

id UICollectionViewListCoordinatorBase.collectionView(_:didBeginMultipleSelectionInteractionAt:)(void *a1)
{
  _QWORD *v1;
  id result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(a1, sel_isEditing);
  if ((_DWORD)result)
  {
    v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110));
    v4 = v3[1];
    if (v4)
    {
      v5 = *v3;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (id)outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
    }
  }
  return result;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v13;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  UICollectionViewListCoordinatorBase.collectionView(_:didBeginMultipleSelectionInteractionAt:)(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

BOOL UICollectionViewListCoordinatorBase.collectionView(_:shouldHighlightItemAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55[3];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v60 = v5[14];
  v68 = v5[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v62 = *(_QWORD *)(v7 - 8);
  v63 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v61 = (uint64_t)v55 - v9;
  v10 = type metadata accessor for IndexPath();
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v64 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v2;
  v13 = v5[15];
  v14 = v5[13];
  swift_getAssociatedConformanceWitness();
  if ((WeakSelectionBasedStorage.$action.getter() & 0x100000000) == 0)
    return 1;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v17)
  {
    v20 = swift_getAssociatedTypeWitness();
    v21 = swift_dynamicCastUnknownClass();
    if (v21)
    {
      v22 = v21;
      v59 = a1;
      v58 = a2;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v70, v20, AssociatedConformanceWitness);
      v24 = v71;
      v25 = v74;
      if (v71)
      {
        if (v71 != 1)
        {
          v57 = v70;
          v26 = v72;
          v27 = v73;
          v28 = v75;
          v29 = swift_allocObject();
          *(_QWORD *)(v29 + 16) = v24;
          *(_QWORD *)(v29 + 24) = v26;
          outlined copy of AppIntentExecutor?(v24);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for thunk for @callee_guaranteed () -> ());
          outlined consume of PlatformItemList.Item.SelectionBehavior?(v57, v24, v26, v27, v25, v28);

          return 1;
        }
      }
      else
      {
        v57 = v70;
        v30 = v72;
        v55[0] = v73;
        v56 = AssociatedConformanceWitness;
        v31 = v75;
        v55[1] = v76;
        v55[2] = v77;
        outlined copy of AppIntentExecutor?(0);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
        v32 = v31;
        AssociatedConformanceWitness = v56;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v57, 0, v30, v55[0], v25, v32);
      }
      v33 = specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(v22, v68, v14, v20, v60, v13, AssociatedConformanceWitness);
      a2 = v58;
      a1 = v59;
      if (v33)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        static Update.ensure<A>(_:)();
        v34 = MEMORY[0x1E0DEE9D8];
        if (v70)
          v35 = v70;
        else
          v35 = MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v35 + 16))
        {
          v69 = MEMORY[0x1E0DEE9D8];
          v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          LOBYTE(v70) = 0;
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v37 = type metadata accessor for MenuVisitor.MenuStackGroup();
          v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80);
          v39 = (v38 + 32) & ~v38;
          v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_187BF9830;
          v41 = v40 + v39;
          if (one-time initialization token for empty != -1)
            swift_once();
          v42 = __swift_project_value_buffer(v37, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42, v41, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
          v43 = v70;
          v70 = 0;
          LOBYTE(v71) = 0;
          v72 = MEMORY[0x1E0DEE9E0];
          v73 = v36;
          v74 = v34;
          v75 = MEMORY[0x1E0DEE9E0];
          LOBYTE(v76) = v43;
          v77 = v40;
          MenuVisitor.visit(_:uniqueNames:)(v35, &v69);
          swift_bridgeObjectRelease();
          v34 = v74;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v34 >> 62)
        {
          swift_bridgeObjectRetain();
          v53 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();

          swift_bridgeObjectRelease_n();
        }
        else
        {
          v53 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
          swift_release();

        }
        return v53 != 0;
      }
    }

  }
  if ((UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v18, v19) & 1) != 0)
  {
    v45 = (uint64_t)v64;
    v44 = v65;
    v46 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, a2, v66);
  }
  else
  {
    v48 = objc_msgSend(a1, sel_indexPathsForSelectedItems);
    v46 = v66;
    v45 = (uint64_t)v64;
    if (v48)
    {
      v49 = v48;
      v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v50 = MEMORY[0x1E0DEE9D8];
    }
    v51 = *(_QWORD *)(v50 + 16);
    swift_bridgeObjectRelease();
    v44 = v65;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v45, a2, v46);
    if (v51 >= 2)
    {
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
      return 0;
    }
  }
  v52 = v61;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v45, v47, v61);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
  v15 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v52, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v52, v63);
  return v15;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldHighlightItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:shouldHighlightItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:selectionFollowsFocusForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:selectionFollowsFocusForItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canFocusItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:canFocusItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  LOBYTE(a5) = a5(v13, v12);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return a5 & 1;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v18 = a4;
  v6 = type metadata accessor for IndexPath();
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = v18;
  v15 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)((uint64_t)v14, v10, v12);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v9, v20);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canMoveItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UICollectionViewListCoordinatorBase.collectionView(_:canMoveItemAt:));
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v8 = type metadata accessor for ShadowListDataSource(0, v7[12], *(_QWORD *)(v7[14] + 8), a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v18 - v11;
  v13 = (char *)v3 + v7[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v13, v8);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v8);
  LOBYTE(v13) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(a1, a2, v8, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = type metadata accessor for IndexPath();
  if ((v13 & 1) != 0)
    v16 = a2;
  else
    v16 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a3, v16, v15);
}

Class @objc UICollectionViewListCoordinatorBase.collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  void (*v23)(char *, uint64_t);
  Class isa;
  uint64_t v26;
  id v27;

  v27 = a1;
  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v26 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v26 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v26 - v19;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = a3;
  v22 = v27;
  UICollectionViewListCoordinatorBase.collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:)((uint64_t)v16, (uint64_t)v8, (uint64_t)v20);

  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v12, v4);
  v23(v16, v4);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v23(v20, v4);
  return isa;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:moveItemAt:to:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v18 - v12;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = a3;
  v15 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:moveItemAt:to:)((uint64_t)v13, (uint64_t)v9);

  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, v5);
}

void closure #1 in UICollectionViewListCoordinatorBase.commitUpdates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = a1 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v7)
  {
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource(0, a2, *(_QWORD *)(a4 + 8), v9);
    ShadowListDataSource.commitUpdates()();
  }
  swift_beginAccess();
  v10 = (_QWORD *)MEMORY[0x18D760234](v6);
  if (v10)
  {
    *((_BYTE *)v10 + *(_QWORD *)((*v8 & *v10) + 0xC0)) = 0;

  }
}

uint64_t disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(_QWORD *a1, void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  Class isa;
  id v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t Strong;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, unint64_t, uint64_t);
  id v51;
  uint64_t v52;
  char v53[8];
  uint64_t v54;
  uint64_t v55;

  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v5 = type metadata accessor for IndexPath();
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v43 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v44 = (char *)&v42 - v11;
  v12 = type metadata accessor for IndexSet();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (uint64_t *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (char *)a1 + v4[22];
  swift_beginAccess();
  (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 16))(v16, v17, v12);
  v18 = a2;
  v19 = specialized Sequence.flatMap<A>(_:)(v16, v18);
  v51 = v18;

  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  v20 = v4[12];
  v21 = *(_QWORD *)(v4[14] + 8);
  type metadata accessor for ListCoreBatchUpdates(0, v20, *(_QWORD *)(v21 + 8), v22);
  v54 = v19;
  v23 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v23);
  v24 = *(_QWORD *)(v54 + 16);
  v42 = v54;
  if (v24)
  {
    v46 = v21;
    v47 = v20;
    v25 = v54 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
    v49 = *(_QWORD *)(v52 + 72);
    v50 = v26;
    v27 = v43;
    v28 = v44;
    v45 = v5;
    v26(v44, v25, v5);
    while (1)
    {
      v29 = v52;
      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
      v30(v28, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, v5) == 1)
        break;
      v48 = v30;
      v31 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v27, v28, v5);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v5);
      v33 = objc_msgSend(v51, sel_cellForItemAtIndexPath_, isa, v42);

      if (v33)
      {
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (swift_dynamicCastUnknownClass())
        {
          v35 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
          v36 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 56);
          v37 = v33;
          v38 = v36(AssociatedTypeWitness, v35);
          if (v38)
          {
            v39 = (void *)v38;
            GraphHost.environment.getter();
            v5 = v45;
            if (v55)
            {
              type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>, MEMORY[0x1E0CE53F0]);
              swift_retain_n();
              swift_retain_n();
              PropertyList.Tracker.value<A>(_:for:)();
              swift_release_n();
            }
            else
            {
              type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>, MEMORY[0x1E0CE53F0]);
              swift_retain_n();
              PropertyList.subscript.getter();
            }
            v27 = v43;
            swift_release_n();
            Strong = swift_weakLoadStrong();
            outlined destroy of Binding<AttributedString>((uint64_t)v53, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
            swift_release();
            swift_release();

            v28 = v44;
            if (Strong)
            {
              *(_BYTE *)(Strong + 177) = 1;
              swift_release();
            }
          }
          else
          {

            v27 = v43;
            v28 = v44;
            v5 = v45;
          }
        }
        else
        {

          v5 = v45;
        }
      }
      v25 += v49;
      if (!--v24)
      {
        v48(v28, 1, 1, v5);
        return swift_bridgeObjectRelease();
      }
      v50(v28, v25, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v44, 1, 1, v5);
  }
  return swift_bridgeObjectRelease();
}

void closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1, UIView *a2, _QWORD *a3, uint64_t a4, char a5)
{
  char v6;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  UIWindow *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a4;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (int *)type metadata accessor for ListCoreBatchUpdates(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a3) + 0x60), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a3) + 0x70) + 8) + 8), a4);
  v11 = *((_QWORD *)v10 - 1);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v24 - v14;
  v16 = -[UIView window](a2, sel_window, v13);
  if (v16)
  {

    v17 = (char *)a3 + *(_QWORD *)((*v9 & *a3) + 0xB0);
    swift_beginAccess();
    (*(void (**)(char *, char *, int *))(v11 + 16))(v15, v17, v10);
    LOBYTE(v17) = ListCoreBatchUpdates.isEmpty.getter(v10, v18);
    v19 = (*(uint64_t (**)(char *, int *))(v11 + 8))(v15, v10);
    if ((v17 & 1) != 0)
    {
      UICollectionViewListCoordinatorBase.updateEditingState(_:)(a2);
      UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(a2);
      UICollectionViewListCoordinatorBase.updateListContents(_:)(a2, v21, v22, v23);
    }
    else
    {
      MEMORY[0x1E0C80A78](v19, v20);
      *((_BYTE *)&v24 - 32) = v6 & 1;
      *(&v24 - 3) = (uint64_t)a3;
      *(&v24 - 2) = (uint64_t)a2;
      *((_BYTE *)&v24 - 8) = a5 & 1;
      static Update.ensure<A>(_:)();
    }
  }
  else
  {
    *((_BYTE *)a3 + *(_QWORD *)((*v9 & *a3) + 0xD0)) = 0;
  }
}

uint64_t closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, void *a2, void *a3, char a4)
{
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  _QWORD v15[6];

  if ((a1 & 1) != 0)
    return performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  v8 = (void *)objc_opt_self();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  *(_BYTE *)(v9 + 32) = a4 & 1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
  *(_QWORD *)(v10 + 24) = v9;
  v15[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v15[5] = v10;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed () -> ();
  v15[3] = &block_descriptor_47;
  v11 = _Block_copy(v15);
  v12 = a2;
  v13 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_performWithoutAnimation_, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

id UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  id result;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char v85[32];

  v2 = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = type metadata accessor for Optional();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v6);
  v74 = (uint64_t)&v69 - v7;
  v77 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v76 = (char *)&v69 - v10;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v75 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v69 - v17;
  v19 = type metadata accessor for IndexPath();
  v81 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v78 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v4 + 104);
  v80 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v79 = (char *)&v69 - v25;
  v82 = type metadata accessor for Binding();
  v84 = *(_QWORD *)(v82 - 8);
  v27 = MEMORY[0x1E0C80A78](v82, v26);
  v83 = (char *)&v69 - v28;
  v29 = objc_msgSend(a1, sel_indexPathsForSelectedItems, v27);
  if (v29)
  {
    v30 = v29;
    v31 = v19;
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v31 = v19;
    v32 = 0;
  }
  v33 = objc_msgSend(a1, sel_isEditing);
  UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v85);
  v34 = v85[0];
  result = objc_msgSend(a1, sel_setEditing_, v85[0] != 0);
  if (v33)
  {
    result = (id)swift_bridgeObjectRelease();
    if (!v34)
    {
      v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v37 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x100);
      swift_beginAccess();
      v38 = v82;
      v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
      if (!v71(v37, 1, v82))
      {
        (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v37, v38);
        v70 = v37;
        v39 = v79;
        MEMORY[0x18D75B9C8](v38);
        (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 120) + 48))(v22);
        specialized Binding.wrappedValue.setter();
        v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v40 = v39;
        v37 = v70;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v22);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v38);
      }
      v41 = (uint64_t)v2 + *(_QWORD *)((*v36 & *v2) + 0xD8);
      swift_beginAccess();
      outlined init with copy of IndexPath?(v41, (uint64_t)v18);
      v42 = v81;
      v43 = v31;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v18, 1, v31) == 1)
      {
        return (id)outlined destroy of Binding<AttributedString>((uint64_t)v18, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      }
      else
      {
        v51 = (uint64_t)v78;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v78, v18, v43);
        type metadata accessor for UpdateCoalescingCollectionView(0);
        v52 = swift_dynamicCastClass();
        if (v52)
        {
          v53 = v52;
          v70 = a1;
          v54 = v74;
          UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v51, v55, v74);
          v56 = v77;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v54, 1, AssociatedTypeWitness) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v54, v73);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v76, v54, AssociatedTypeWitness);
            swift_beginAccess();
            v58 = v82;
            if (v71(v37, 1, v82))
            {
              (*(void (**)(char *, uint64_t))(v56 + 8))(v76, AssociatedTypeWitness);
              swift_endAccess();
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v37, v58);
              swift_endAccess();
              v59 = v79;
              MEMORY[0x18D75B9C8](v58);
              v60 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v4 + 120) + 32);
              v61 = v76;
              v60(v76, v22);
              v62 = v83;
              specialized Binding.wrappedValue.setter();
              (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v22);
              (*(void (**)(char *, uint64_t))(v84 + 8))(v62, v58);
              (*(void (**)(char *, uint64_t))(v77 + 8))(v61, AssociatedTypeWitness);
            }
          }
          v63 = v81;
          v64 = (uint64_t)v75;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v75, v51, v43);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v43);
          v65 = v53 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
          swift_beginAccess();
          outlined assign with take of IndexPath?(v64, v65);
          swift_endAccess();
          v66 = swift_allocObject();
          *(_QWORD *)(v66 + 16) = v53;
          *(_QWORD *)(v66 + 24) = v2;
          v67 = v70;
          v68 = v2;
          onNextMainRunLoop(do:)();

          swift_release();
          v57 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8);
        }
        else
        {
          v57 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8);
        }
        return (id)v57(v51, v43);
      }
    }
  }
  else if (v34)
  {
    if (v32)
    {
      v44 = *(_QWORD *)(v32 + 16);
      result = (id)swift_bridgeObjectRelease();
      if (v44 == 1)
      {
        v45 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x100);
        swift_beginAccess();
        result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 48))(v45, 1, v82);
        if (!(_DWORD)result)
        {
          v47 = v83;
          v46 = v84;
          v48 = v45;
          v49 = v82;
          (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v48, v82);
          v50 = v79;
          MEMORY[0x18D75B9C8](v49);
          (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 120) + 48))(v22);
          specialized Binding.wrappedValue.setter();
          (*(void (**)(char *, uint64_t))(v80 + 8))(v50, v22);
          return (id)(*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v49);
        }
      }
    }
  }
  else
  {
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

void closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v43 = a3;
  v4 = *MEMORY[0x1E0DEEDD8] & *a1;
  v33 = type metadata accessor for IndexSet.Index();
  v32[1] = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v5);
  v34 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath();
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v32[0] = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v46 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v41 = type metadata accessor for IndexSet();
  v38 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v19);
  v35 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v39 = (char *)v32 - v23;
  v24 = *(_QWORD *)(v4 + 96);
  v40 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v37 = *(_QWORD *)(*(_QWORD *)(v4 + 112) + 8);
  v28 = type metadata accessor for ShadowListDataSource(0, v24, v37, v27);
  v42 = *(_QWORD *)(v28 - 8);
  v36 = v28;
  MEMORY[0x1E0C80A78](v28, v29);
  swift_beginAccess();
  ShadowListDataSource.updateBase(to:)(a2, v28, v30, v31);
}

void @objc UICollectionViewListCoordinatorBase.scrollViewWillBeginDragging(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewWillBeginDragging(_:)();

}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidEndDragging(_:willDecelerate:)(void *a1, uint64_t a2, void *a3, Swift::Bool a4)
{
  id v6;
  id v7;

  v6 = a3;
  v7 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDragging(_:willDecelerate:)(a4);

}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidEndDecelerating(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDecelerating(_:)();

}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidEndScrollingAnimation(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewDidEndScrollingAnimation(_:)();

}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  uint64_t v23;

  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56))((char *)&v23 - v17, 1, 1, v4, v16);
  v19 = (uint64_t)a1 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v18, v19);
  swift_endAccess();
  v20 = (uint64_t)a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0xD8);
  swift_beginAccess();
  outlined init with copy of IndexPath?(v20, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
    return outlined destroy of Binding<AttributedString>((uint64_t)v13, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_selectItemAtIndexPath_animated_scrollPosition_, isa, 0, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, BOOL *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  BOOL v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL *v34;

  v34 = a4;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v6 = v5[12];
  v32 = v5[14];
  v33 = a2;
  v7 = type metadata accessor for ShadowListDataSource(255, v6, *(_QWORD *)(v32 + 8), a3);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v10 = type metadata accessor for _RowVisitationContext(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v31 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v31 - v21;
  LOBYTE(v7) = _RowVisitationContext.canMove.getter();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v23(v22, a1, v10);
  if ((v7 & 1) != 0)
  {
    v24 = 1;
  }
  else
  {
    implicit closure #2 in implicit closure #1 in closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)((uint64_t)v22, v6, v5[13], v32, v5[15]);
    v25 = swift_release();
    v24 = UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v25, v26);
  }
  v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  v27(v22, v10);
  v23(v18, a1, v10);
  if ((v24 & 1) != 0)
  {
    v27(v18, v10);
    v23(v14, a1, v10);
    v28 = 1;
  }
  else
  {
    v29 = _RowVisitationContext.hasSwipeActions.getter();
    v27(v18, v10);
    v23(v14, a1, v10);
    v28 = (v29 & 1) != 0 || _RowVisitationContext.canDelete.getter(v10);
  }
  result = ((uint64_t (*)(char *, uint64_t))v27)(v14, v10);
  *v34 = v28;
  return result;
}

uint64_t (*implicit closure #2 in implicit closure #1 in closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v22;

  v10 = type metadata accessor for ShadowListDataSource(255, a2, *(_QWORD *)(a4 + 8), a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  v13 = type metadata accessor for _RowVisitationContext(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v22 - v17, a1, v13, v16);
  v19 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = a2;
  *((_QWORD *)v20 + 3) = a3;
  *((_QWORD *)v20 + 4) = a4;
  *((_QWORD *)v20 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v20[v19], v18, v13);
  return partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:);
}

uint64_t implicit closure #3 in implicit closure #2 in implicit closure #1 in closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for ShadowListDataSource(255, a2, *(_QWORD *)(a4 + 8), a3);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v10 = type metadata accessor for _RowVisitationContext(0, v7, v8, v9);
  return _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a1, v10, a5);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:));
}

id closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  id result;
  uint64_t v25;
  _QWORD *v26;
  _OWORD v27[7];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v26 = a4;
  v6 = *MEMORY[0x1E0DEEDD8] & *a2;
  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = a1[5];
  v32 = a1[4];
  v33 = v11;
  v34 = a1[6];
  v12 = a1[1];
  v28 = *a1;
  v29 = v12;
  v13 = a1[3];
  v30 = a1[2];
  v31 = v13;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  v14 = a1[5];
  v27[4] = a1[4];
  v27[5] = v14;
  v27[6] = a1[6];
  v15 = a1[1];
  v27[0] = *a1;
  v27[1] = v15;
  v16 = a1[2];
  v27[3] = a1[3];
  v27[2] = v16;
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v7);
  v18 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v6 + 96);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v6 + 104);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v6 + 120);
  *(_QWORD *)(v19 + 48) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v18, (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v20 = (_OWORD *)(v19 + ((v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  v21 = v33;
  v20[4] = v32;
  v20[5] = v21;
  v20[6] = v34;
  v22 = v29;
  *v20 = v28;
  v20[1] = v22;
  v23 = v31;
  v20[2] = v30;
  v20[3] = v23;
  outlined retain of SwipeActions.Configuration(&v28);
  outlined retain of SwipeActions.Configuration(&v28);
  result = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)v27, (uint64_t)partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:), v19);
  *v26 = result;
  return result;
}

_QWORD *closure #1 in UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *result;
  void *v12;
  _QWORD v13[7];
  _QWORD v14[7];

  v8 = a3 + 16;
  swift_beginAccess();
  v9 = (_QWORD *)MEMORY[0x18D760234](v8);
  if (!v9)
    return (_QWORD *)a1();
  v10 = v9;
  result = (_QWORD *)MEMORY[0x18D760234]((char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0xF8));
  if (result)
  {
    v12 = result;
    UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(result, a4, 0);

    outlined init with take of SwipeActions.Value?(a5 + 56, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>?, (uint64_t)type metadata accessor for Binding<SwipeActionResultToken?>, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    outlined init with take of SwipeActions.Value?((uint64_t)v13, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>?, (uint64_t)type metadata accessor for Binding<SwipeActionResultToken?>, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if (v14[1])
    {
      outlined retain of ActiveEditMenu?(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Binding<SwipeActionResultToken?>?);
      outlined retain of ActiveEditMenu?(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Binding<SwipeActionResultToken?>?);
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a1);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:));
      swift_release();

      outlined retain of ActiveEditMenu?(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Binding<SwipeActionResultToken?>?);
      return outlined retain of ActiveEditMenu?(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Binding<SwipeActionResultToken?>?);
    }
    else
    {
      partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)();
      ((void (*)(uint64_t))a1)(1);

      return (_QWORD *)swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL key path getter for _RowVisitationContext.canDelete : <A, B>_RowVisitationContext<ShadowListDataSource<A>>@<W0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a2 + a1 - 32), *(_QWORD *)(*(_QWORD *)(a2 + a1 - 16) + 8), a3);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  result = _RowVisitationContext.canDelete.getter(v8);
  *a4 = result;
  return result;
}

void closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;

  v8 = a5 + 16;
  swift_beginAccess();
  v9 = MEMORY[0x18D760234](v8);
  if (!v9)
    goto LABEL_5;
  v10 = (void *)v9;
  swift_beginAccess();
  v11 = (_QWORD *)MEMORY[0x18D760234](v8);
  if (v11)
  {
    v12 = v11;
    v13 = (void *)MEMORY[0x18D760234]((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0xF8));

    if (v13)
    {
      UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(v13, a6, 1);

      partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)();
      swift_release();
LABEL_5:
      a3(1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ()(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  void (*v6)(id, id, uint64_t (*)(char), uint64_t);
  void *v7;
  uint64_t v8;
  id v9;
  id v10;

  v6 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  v7 = _Block_copy(aBlock);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  swift_retain();
  v10 = a2;
  v9 = a3;
  v6(v10, v9, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> (), v8);
  swift_release();
  swift_release();

}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t aBlock;
  uint64_t v38;
  void *v39;
  void *v40;
  void (*v41)(uint64_t);
  _QWORD *v42;

  v34 = a2;
  v35 = a8;
  v36 = a4;
  v13 = type metadata accessor for IndexPath();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13, v16);
  v17 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v18 = (_QWORD *)MEMORY[0x18D760234](a1 + 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v18) + 0xE8);
    v21 = *((_BYTE *)v18 + v20);
    v19[v20] = 2;
    UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v21);

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v13);
  v22 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = a5;
  *((_QWORD *)v23 + 3) = a6;
  v24 = a5;
  v25 = v35;
  *((_QWORD *)v23 + 4) = a7;
  *((_QWORD *)v23 + 5) = v25;
  *((_QWORD *)v23 + 6) = a1;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v23[v22], v17, v13);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:);
  *(_QWORD *)(v26 + 24) = v23;
  v41 = (void (*)(uint64_t))thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v42 = (_QWORD *)v26;
  aBlock = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed () -> ();
  v40 = &block_descriptor_66;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = v24;
  v28[3] = a6;
  v28[4] = a7;
  v28[5] = v25;
  v29 = v34;
  v28[6] = a1;
  v28[7] = v29;
  v41 = partial apply for closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:);
  v42 = v28;
  aBlock = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v40 = &block_descriptor_72;
  v30 = _Block_copy(&aBlock);
  swift_retain();
  v31 = v29;
  swift_release();
  objc_msgSend(v31, sel_performBatchUpdates_completion_, v27, v30);
  _Block_release(v30);
  _Block_release(v27);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v24;
  *(_QWORD *)(v32 + 24) = a6;
  *(_QWORD *)(v32 + 32) = a7;
  *(_QWORD *)(v32 + 40) = v25;
  *(_BYTE *)(v32 + 48) = v36 & 1;
  *(_QWORD *)(v32 + 56) = a1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  Class isa;
  _BYTE v27[24];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v27[-v11];
  swift_beginAccess();
  v13 = MEMORY[0x18D760234](a1 + 16);
  if (v13)
  {
    v14 = (_QWORD *)v13;
    v15 = type metadata accessor for IndexPath();
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, 1, 1, v15);
    v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v18 = (uint64_t)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0xD8);
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v12, v18);
    swift_endAccess();
    swift_beginAccess();
    v20 = type metadata accessor for ShadowListDataSource(0, a3, *(_QWORD *)(a5 + 8), v19);
    v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v20);
    ListCoreDataSource.deleteCell(forRowAt:)(a2, v20, v21);
    swift_endAccess();
    v22 = MEMORY[0x18D760234]((char *)v14 + *(_QWORD *)((*v17 & *v14) + 0xF8));
    if (v22)
    {
      v23 = (void *)v22;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v24 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_187BF9830;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 16))(v25 + v24, a2, v15);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v23, sel_deleteItemsAtIndexPaths_, isa);

    }
    else
    {
      __break(1u);
    }
  }
}

void closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1, uint64_t a2, UIView *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x18D760234](v4);
  if (v5)
  {
    v6 = (void *)v5;
    UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(a3);

  }
}

void closure #3 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v10;

  v5 = a2 + 16;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    v6 = MEMORY[0x18D760234](v5);
    if (v6)
    {
      v7 = (void *)v6;
      UICollectionViewListCoordinatorBase.commitUpdates()();

    }
  }
  else
  {
    swift_beginAccess();
    if (MEMORY[0x18D760234](v5))
    {
      swift_beginAccess();
      type metadata accessor for ShadowListDataSource(0, a3, *(_QWORD *)(a5 + 8), v10);
      ShadowListDataSource.discardUpdatesForDeletion()();
    }
  }
}

void @objc UICollectionViewListCoordinatorBase.init()()
{
  specialized UICollectionViewListCoordinatorBase.init()();
}

void UICollectionViewListCoordinatorBase.__ivar_destroyer()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t *v17;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  swift_bridgeObjectRelease();
  v3 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x88);
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8);
  v7 = type metadata accessor for ShadowListDataSource(0, v4, v5, v6);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v3, v7);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x98)));
  outlined consume of Transaction?(*(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xA0)));
  v8 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xB0);
  v10 = type metadata accessor for ListCoreBatchUpdates(0, v4, *(_QWORD *)(v5 + 8), v9);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  v11 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xC8);
  v12 = type metadata accessor for Optional();
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  (*(void (**)(char *))(*(_QWORD *)(v12 - 8) + 8))(v11);
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  outlined destroy of Binding<AttributedString>((uint64_t)v0 + *(_QWORD *)((*v1 & *v0) + 0xD8), &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], v13);
  outlined destroy of Binding<AttributedString>((uint64_t)v0 + *(_QWORD *)((*v1 & *v0) + 0xE0), &lazy cache variable for type metadata for IndexPath?, v14, v13);
  swift_unknownObjectWeakDestroy();
  v15 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x100);
  type metadata accessor for Binding();
  v16 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x110));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v17, v17[1]);

}

void UICollectionViewListCoordinatorBase.__deallocating_deinit()
{
  type metadata accessor for UICollectionViewListCoordinatorBase();
}

id sub_187630208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_dealloc);
}

void @objc UICollectionViewListCoordinatorBase.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8] & *a1;
  swift_bridgeObjectRelease();
  v4 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x88);
  v5 = *(_QWORD *)(v3 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 112) + 8);
  v8 = type metadata accessor for ShadowListDataSource(0, v5, v6, v7);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x98)));
  outlined consume of Transaction?(*(_QWORD *)((char *)a1 + *(_QWORD *)((*v2 & *a1) + 0xA0)));
  v9 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0xB0);
  v11 = type metadata accessor for ListCoreBatchUpdates(0, v5, *(_QWORD *)(v6 + 8), v10);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  v12 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0xC8);
  v13 = type metadata accessor for Optional();
  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  (*(void (**)(char *))(*(_QWORD *)(v13 - 8) + 8))(v12);
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  outlined destroy of Binding<AttributedString>((uint64_t)a1 + *(_QWORD *)((*v2 & *a1) + 0xD8), &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], v14);
  outlined destroy of Binding<AttributedString>((uint64_t)a1 + *(_QWORD *)((*v2 & *a1) + 0xE0), &lazy cache variable for type metadata for IndexPath?, v15, v14);
  swift_unknownObjectWeakDestroy();
  v16 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x100);
  type metadata accessor for Binding();
  v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (_QWORD *)((char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x110));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v18, v18[1]);

}

uint64_t type metadata completion function for UICollectionViewListCoordinatorBase.Listener()
{
  return swift_initClassMetadata2();
}

void protocol witness for ListCollectionViewCellEditMenuDelegate.listCollectionViewEditMenuInteraction(_:menuFor:suggestedActions:) in conformance UICollectionViewListCoordinatorBase<A, B>(uint64_t a1, void *a2, UIMenuElementSize a3)
{
  specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:menuFor:suggestedActions:)(a2, a3);
}

void protocol witness for ListCollectionViewCellEditMenuDelegate.listCollectionViewEditMenuInteraction(_:targetRectFor:) in conformance UICollectionViewListCoordinatorBase<A, B>(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_frame);
    objc_msgSend(v2, sel_frame);
    static UnitPoint.top.getter();

  }
}

void UICollectionViewListCoordinatorBase.Listener.animationWasAdded()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  id v5;

  if ((((*(unsigned __int8 *)(v0 + 24) + 1) >> 8) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    ++*(_BYTE *)(v0 + 24);
    v1 = (_QWORD *)MEMORY[0x18D760234](v0 + 16);
    if (v1)
    {
      v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xE8);
      v3 = v1;
      v5 = v1;
      v4 = *((_BYTE *)v1 + v2);
      *((_BYTE *)v3 + v2) = 1;
      UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v4);

    }
  }
}

void UICollectionViewListCoordinatorBase.Listener.animationWasRemoved()()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24) - 1;
  if ((v1 & 0xFFFFFF00) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v0 + 24) = v1;
    if (!(_BYTE)v1)
      UICollectionViewListCoordinatorBase.Listener.fire()();
  }
}

void UICollectionViewListCoordinatorBase.Listener.fire()()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;

  v1 = (_QWORD *)MEMORY[0x18D760234](v0 + 16);
  if (v1)
  {
    if (*((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xE8)) == 1)
    {
      v3 = v1;
      *(_QWORD *)(swift_allocObject() + 16) = v1;
      v2 = v3;
      onMainThread(do:)();

      swift_release();
    }
    else
    {

    }
  }
}

uint64_t UICollectionViewListCoordinatorBase.Listener.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t UICollectionViewListCoordinatorBase.Listener.__deallocating_deinit()
{
  UICollectionViewListCoordinatorBase.Listener.fire()();
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

void type metadata accessor for UICollectionViewListCoordinatorBase.Listener()
{
  JUMPOUT(0x18D75FF28);
}

void UICollectionViewListCoordinatorBase.Listener.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for UICollectionViewListCoordinatorBase.InitialLayoutAnimationPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1876307AC + 4 * byte_187C46085[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1876307E0 + 4 * byte_187C46080[v4]))();
}

uint64_t sub_1876307E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876307E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876307F0);
  return result;
}

uint64_t sub_1876307FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187630804);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187630808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187630810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for UICollectionViewListCoordinatorBase.InitialLayoutAnimationPhase()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for Equatable in UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t one-time initialization function for allowNonMomentaryEditModeSelection()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of allowFakeMoves();
  allowNonMomentaryEditModeSelection = result & 1;
  return result;
}

void specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21[3];
  _QWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v33 = a4;
  v31 = a2;
  v27 = a1;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v5);
  v9 = v8[12];
  v21[2] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v24 = (char *)v21 - v10;
  v32 = v8[14];
  v21[0] = *(_QWORD *)(v32 + 8);
  v11 = v21[0];
  v26 = type metadata accessor for ShadowListDataSource(0, v9, v21[0], v12);
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v13);
  v23 = (char *)v21 - v14;
  v15 = *a3;
  v28 = a3[1];
  v29 = v15;
  v30 = *((unsigned __int8 *)a3 + 16);
  *(_QWORD *)((char *)v5 + v8[16]) = MEMORY[0x1E0DEE9E8];
  v16 = *(_QWORD *)((*v7 & *v5) + 0x90);
  v17 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  v18 = v5;
  v19 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  *(_QWORD *)&v19[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 4;
  v19[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(_QWORD *)((char *)v5 + v16) = v19;
  v20 = (_QWORD *)((char *)v18 + *(_QWORD *)((*v7 & *v18) + 0x98));
  *v20 = 0;
  v20[1] = 0;
  v22 = (_QWORD *)((char *)v18 + *(_QWORD *)((*v7 & *v18) + 0xA0));
  *v22 = 1;
  *((_BYTE *)v18 + *(_QWORD *)((*v7 & *v18) + 0xA8)) = 0;
  ListCoreBatchUpdates.init()(v9, *(_QWORD *)(v11 + 8), (uint64_t)v18 + *(_QWORD *)((*v7 & *v18) + 0xB0));
}

void sub_187630A5C()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;

  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0xB8)) = v1;
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0xC0)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0xC8), 1, 1, v0);
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0xD0)) = 0;
  v6 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0xD8);
  v7 = type metadata accessor for IndexPath();
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v8((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0xE0), 1, 1, v7);
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0xE8)) = 0;
  v9 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0xF0);
  *(_QWORD *)v9 = 0;
  *((_WORD *)v9 + 4) = 256;
  swift_unknownObjectWeakInit();
  v10 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x100);
  *(_QWORD *)(v5 - 312) = v10;
  v11 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x108);
  *(_BYTE *)(v5 - 160) = 0;
  OptionalEdgeInsets.init()();
  v13 = *(_QWORD *)(v5 - 152);
  v14 = *(_BYTE *)(v5 - 144);
  v15 = *(_QWORD *)(v5 - 136);
  v16 = *(_BYTE *)(v5 - 128);
  v17 = *(_QWORD *)(v5 - 120);
  v18 = *(_BYTE *)(v5 - 112);
  v19 = *(_QWORD *)(v5 - 104);
  v20 = *(_BYTE *)(v5 - 96);
  *v12 = *(_BYTE *)(v5 - 160);
  *((_QWORD *)v12 + 1) = v13;
  v12[16] = v14;
  *((_QWORD *)v12 + 3) = v15;
  v12[32] = v16;
  *((_QWORD *)v12 + 5) = v17;
  v12[48] = v18;
  *((_QWORD *)v12 + 7) = v19;
  v12[64] = v20;
  v21 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x110);
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v21[16] = 0;
  v22 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x118);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  *(_QWORD *)v22 = WeakSelectionBasedStorage.init()();
  *((_DWORD *)v22 + 2) = v23;
  *((_DWORD *)v22 + 3) = v24;
  *((_DWORD *)v22 + 4) = v25;
  *((_DWORD *)v22 + 5) = v26;
  *((_DWORD *)v22 + 6) = v27;
  *((_DWORD *)v22 + 7) = v28;
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x120)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x128)) = 0;
  v29 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x130);
  *(_QWORD *)v29 = 0;
  *((_WORD *)v29 + 4) = 256;
  v30 = (char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x138);
  *(_QWORD *)v30 = 0;
  v30[8] = 1;
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x140)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x148)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x150)) = 0;
  v31 = *(_QWORD *)(v5 - 280);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 304) + 16))(v31, *(_QWORD *)(v5 - 256), v0);
  ShadowListDataSource.init(_:)(v31, v0);
}

void sub_187630DB8()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v7 - 272) + 32))(&v1[*(_QWORD *)((*v6 & *(_QWORD *)v1) + 0x88)], v4, *(_QWORD *)(v7 - 264));
  v8 = *(_QWORD *)(v7 - 312);
  swift_beginAccess();
  v9 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v8, *(_QWORD *)(v7 - 224), v9);
  swift_endAccess();
  v10 = *(_QWORD *)v5;
  v11 = *(_QWORD *)(v5 + 8);
  v12 = *(_QWORD *)(v7 - 248);
  *(_QWORD *)v5 = *(_QWORD *)(v7 - 240);
  *(_QWORD *)(v5 + 8) = v12;
  *(_BYTE *)(v5 + 16) = *(_DWORD *)(v7 - 228);
  outlined consume of Binding<NavigationSplitViewColumn>?(v10, v11);
  v13 = *(uint64_t **)(v7 - 296);
  swift_beginAccess();
  v14 = *v13;
  v15 = *(_QWORD *)(v7 - 208);
  *v13 = v15;
  outlined copy of Transaction?(v15);
  outlined consume of Transaction?(v14);

  *(_QWORD *)(v7 - 160) = v0;
  *(_QWORD *)(v7 - 152) = v2;
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v7 - 216);
  *(_QWORD *)(v7 - 136) = v3;
  type metadata accessor for UICollectionViewListCoordinatorBase();
}

id sub_187630EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = v1;
  *(_QWORD *)(v2 - 192) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 200), sel_init);
}

uint64_t specialized UICollectionViewListCoordinatorBase.dataSource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = (char *)v1 + v3[17];
  swift_beginAccess();
  v6 = type metadata accessor for ShadowListDataSource(0, v3[12], *(_QWORD *)(v3[14] + 8), v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v4, a1, v6);
  return swift_endAccess();
}

void specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:menuFor:suggestedActions:)(void *a1, UIMenuElementSize a2)
{
  UIMenuElementSize preferredElementSize;
  uint64_t v4;
  id v5;
  uint64_t rawValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  UIMenu *v15;
  Swift::String v16;
  Swift::OpaquePointer v17;
  uint64_t v18;
  UIMenuElementSize v19;
  UIImage_optional v20;

  preferredElementSize = a2;
  v19 = a2;
  type metadata accessor for UIKitEditMenuConfiguration();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      swift_bridgeObjectRetain();
      v5 = a1;
      swift_retain();
      static Update.ensure<A>(_:)();
      if (v17._rawValue)
        rawValue = (uint64_t)v17._rawValue;
      else
        rawValue = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(rawValue + 16))
      {
        v18 = MEMORY[0x1E0DEE9D8];
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v7 = type metadata accessor for MenuVisitor.MenuStackGroup();
        v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
        v9 = (v8 + 32) & ~v8;
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
        v11 = v10 + v9;
        if (one-time initialization token for empty != -1)
          swift_once();
        v12 = __swift_project_value_buffer(v7, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v12, v11, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
        v17._rawValue = 0;
        MenuVisitor.visit(_:uniqueNames:)(rawValue, &v18);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v13 = a1;
    }
    v14 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v14);
    swift_bridgeObjectRelease();

    preferredElementSize = v19;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v15 = (UIMenu *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v20.value.super.isa = 0;
  v20.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v15, v16, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v17);
}

uint64_t specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v37 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v37 - v15;
  v17 = type metadata accessor for IndexPath();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a1, sel_view, v20);
  if (v23)
  {
    v24 = v23;
    objc_opt_self();
    v25 = swift_dynamicCastObjCClass();
    if (!v25)
    {

      goto LABEL_12;
    }
    v26 = v25;
    v37 = a2;
    v27 = (void *)MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF8));
    if (!v27)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
      a2 = v37;
LABEL_10:
      outlined destroy of Binding<AttributedString>((uint64_t)v16, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      goto LABEL_12;
    }
    v28 = v27;
    v29 = objc_msgSend(v27, sel_indexPathForCell_, v26);

    if (v29)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v30(v12, 0, 1, v17);
    }
    else
    {

      v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v30(v12, 1, 1, v17);
    }
    a2 = v37;
    outlined init with take of SwipeActions.Value?((uint64_t)v12, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
      goto LABEL_10;
    v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v31(v22, v16, v17);
    v31(v8, v22, v17);
    v30(v8, 0, 1, v17);
    v32 = (uint64_t)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xE0);
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v8, v32);
    swift_endAccess();
  }
LABEL_12:
  type metadata accessor for UIKitEditMenuConfiguration();
  result = swift_dynamicCastClass();
  if (result)
  {
    if (*(_QWORD *)(result + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
    {
      v34 = swift_allocObject();
      swift_weakInit();
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = v34;
      *(_BYTE *)(v35 + 24) = 1;
      v36 = a2;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();

      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Class isa;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - v15;
  v17 = type metadata accessor for IndexPath();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a1, sel_view, v20);
  if (v23)
  {
    v24 = v23;
    objc_opt_self();
    v25 = swift_dynamicCastObjCClass();
    if (v25)
    {
      v26 = v25;
      v40 = a2;
      v27 = (void *)MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF8));
      if (!v27)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
        a2 = v40;
LABEL_9:

        outlined destroy of Binding<AttributedString>((uint64_t)v16, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        goto LABEL_14;
      }
      v28 = v27;
      v29 = objc_msgSend(v27, sel_indexPathForCell_, v26);

      if (v29)
      {
        static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

        v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
        v30(v12, 0, 1, v17);
      }
      else
      {
        v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
        v30(v12, 1, 1, v17);
      }
      a2 = v40;
      outlined init with take of SwipeActions.Value?((uint64_t)v12, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
        goto LABEL_9;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v16, v17);
      v30(v8, 1, 1, v17);
      v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v32 = (uint64_t)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xE0);
      swift_beginAccess();
      outlined assign with take of IndexPath?((uint64_t)v8, v32);
      swift_endAccess();
      v33 = MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*v31 & *v2) + 0xF8));
      if (v33)
      {
        v34 = (void *)v33;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v34, sel_deselectItemAtIndexPath_animated_, isa, 1);

        (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    }

  }
LABEL_14:
  type metadata accessor for UIKitEditMenuConfiguration();
  result = swift_dynamicCastClass();
  if (result)
  {
    if (*(_QWORD *)(result + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
    {
      v37 = swift_allocObject();
      swift_weakInit();
      v38 = swift_allocObject();
      *(_QWORD *)(v38 + 16) = v37;
      *(_BYTE *)(v38 + 24) = 0;
      v39 = a2;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();

      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1876319AC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1876319D0()
{
  swift_release();
  return swift_deallocObject();
}

void specialized UICollectionViewListCoordinatorBase.numberOfSections(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v6 = v5[12];
  v7 = *(_QWORD *)(v5[14] + 8);
  v8 = type metadata accessor for ShadowSectionCollection(0, v6, *(_QWORD *)(v7 + 8), a4);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = type metadata accessor for ShadowListDataSource(0, v6, v7, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v20 - v14;
  v16 = (char *)v4 + v5[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  ShadowListDataSource.sectionIDs.getter(v11, v17, v18, v19);
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[12];
  v8 = *(_QWORD *)(v6[14] + 8);
  v9 = type metadata accessor for ShadowListDataSource(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v24 - v12;
  v15 = type metadata accessor for ShadowRowCollection(0, v7, *(_QWORD *)(v8 + 8), v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v24 - v18;
  v20 = (char *)v4 + v6[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v20, v9);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  ListDiffable.rowIDs(forSectionAtOffset:)(a1, v9, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v22 = ShadowRowCollection.count.getter(v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return v22;
}

uint64_t sub_187631CA0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)()
{
  uint64_t v0;

  return closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
  }
}

uint64_t sub_187631D30()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a1, *(UIView **)(v1 + 16), *(_QWORD **)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_BYTE *)(v1 + 33));
}

uint64_t sub_187631D6C()
{
  return swift_deallocObject();
}

uint64_t sub_187631D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_QWORD **)(v0 + 48), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_187631E38()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_187631E68()
{
  return swift_deallocObject();
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  void *v8;
  id v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a7 + 8) + 56))(a4);
  if (result)
  {
    v8 = (void *)result;
    v9 = (id)specialized _UIHostingView.editMenuBridge.getter();

    v10 = EditMenuBridge.outermostResponder()();
    return v10;
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.scrollViewWillBeginDragging(_:)()
{
  ScrollViewHelper.willStartPanning()();
}

void specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDragging(_:willDecelerate:)(Swift::Bool a1)
{
  ScrollViewHelper.didEndPanning(willDecelerate:)(a1);
}

double specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDecelerating(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  double result;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90));
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 0;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias);
  *v2 = 0;
  v2[1] = 0;
  v3 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState;
  result = 0.0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_BYTE *)(v3 + 32) = 2;
  return result;
}

void specialized UICollectionViewListCoordinatorBase.scrollViewDidEndScrollingAnimation(_:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90));
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 0;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
}

unint64_t specialized UICollectionViewListCoordinatorBase.presentEditMenu<A>(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t result;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;

  result = specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(a1, a2, a3, a4, a5, a6, a7);
  if (!result)
    return result;
  v8 = result;
  type metadata accessor for UIKitEditMenuConfiguration();
  lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
  AnyHashable.init<A>(_:)();
  v9 = (char *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
  objc_msgSend(v9, sel_setPreferredArrowDirection_, 2);
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder] = v8;
  swift_retain();
  swift_release();
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
LABEL_30:

    return swift_release();
  }
  v11 = (void *)v10;
  swift_unknownObjectRetain();
  v12 = (unint64_t)objc_msgSend(v11, sel_interactions);
  type metadata accessor for UIInteraction();
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = MEMORY[0x1E0DEE9D8];
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v12 = v13;
    else
      v12 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
      goto LABEL_5;
LABEL_21:
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x1E0DEE9D8];
    goto LABEL_22;
  }
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v14)
    goto LABEL_21;
LABEL_5:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_35;
  }
  for (i = 0; i != v14; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0)
      MEMORY[0x18D75E3BC](i, v13);
    else
      swift_unknownObjectRetain();
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  v12 = v19;
LABEL_22:
  swift_bridgeObjectRelease();
  if (!(v12 >> 62))
  {
    v16 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_24;
LABEL_32:

    swift_unknownObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16)
    goto LABEL_32;
LABEL_24:
  result = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_36:
    v17 = (id)MEMORY[0x18D75E3BC](result, v12);
    goto LABEL_29;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(v12 + 8 * result + 32);
LABEL_29:
    v18 = v17;
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_presentEditMenuWithConfiguration_, v9);
    swift_unknownObjectRelease();

    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void specialized UICollectionViewListCoordinatorBase.indexTitles(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v6 = v5[12];
  v24 = v5[14];
  v7 = *(_QWORD *)(v24 + 8);
  v8 = type metadata accessor for ShadowSectionCollection(255, v6, *(_QWORD *)(v7 + 8), a4);
  v22[2] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, v8);
  v23 = type metadata accessor for DefaultIndices();
  v25 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v9);
  v22[1] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = type metadata accessor for ShadowListDataSource(0, v6, v7, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v22 - v16;
  v18 = (char *)v4 + v5[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v18, v13);
  ShadowListDataSource.sectionIDs.getter(v13, v19, v20, v21);
}

uint64_t specialized UICollectionViewListCoordinatorBase.Listener.__allocating_init(_:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 24) = 0;
  swift_unknownObjectWeakAssign();
  return v0;
}

BOOL specialized UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v21;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v21 - v8;
  v10 = type metadata accessor for IndexPath();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v15, v16) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
    goto LABEL_5;
  }
  v17 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x110) + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
  if (!v17)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return 0;
  }
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)v14, v18, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v19;
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t (*)(double, double, double, double), uint64_t, uint64_t, uint64_t);
  id v20;
  _QWORD v21[2];
  uint64_t v22;
  id v23;

  v22 = a2;
  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v9 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = a1;
  result = swift_dynamicCastUnknownClass();
  if (result)
  {
    v12 = (_QWORD *)((char *)v2 + *(_QWORD *)(v4 + 152));
    v13 = *v12;
    if (*v12)
    {
      v14 = v12[1];
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v21[1] = result;
      v15((char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v5);
      v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v13;
      *(_QWORD *)(v17 + 24) = v14;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, v9, v5);
      v18 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
      v19 = *(void (**)(uint64_t, uint64_t (*)(double, double, double, double), uint64_t, uint64_t, uint64_t))(v18 + 120);
      outlined copy of AppIntentExecutor?(v13);
      outlined copy of AppIntentExecutor?(v13);
      v20 = v23;
      v19(1, partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:), v17, AssociatedTypeWitness, v18);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
      return swift_release();
    }
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplaying:forItemAt:)()
{
  swift_getAssociatedTypeWitness();
  if (swift_dynamicCastUnknownClass())
  {
    swift_getAssociatedConformanceWitness();
    PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
  }
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char v17;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, id, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t (*)(double, double, double, double), uint64_t, uint64_t, uint64_t);
  id v33;
  _QWORD v34[2];
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a4;
  v36 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v36 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v36, v10);
  v11 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v12 == a3;
  v37 = a3;
  v38 = a2;
  if (!v13)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_13;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() != v38 || v15 != v37)
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        return result;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = swift_dynamicCastUnknownClass();
  if (result)
  {
    v20 = (_QWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x98));
    v21 = *v20;
    if (*v20)
    {
      v22 = v20[1];
      v23 = *(void (**)(char *, id, uint64_t))(v8 + 16);
      v34[0] = AssociatedTypeWitness;
      v34[1] = result;
      v24 = v36;
      v23((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v36);
      v25 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v35 = a1;
      v26 = (v9 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v21;
      *(_QWORD *)(v27 + 24) = v22;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v27 + v25, v11, v24);
      v28 = (_QWORD *)(v27 + v26);
      v29 = v37;
      *v28 = v38;
      v28[1] = v29;
      v30 = v34[0];
      v31 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
      v32 = *(void (**)(uint64_t, uint64_t (*)(double, double, double, double), uint64_t, uint64_t, uint64_t))(v31 + 120);
      outlined copy of AppIntentExecutor?(v21);
      outlined copy of AppIntentExecutor?(v21);
      v33 = v35;
      swift_bridgeObjectRetain();
      v32(1, partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:), v27, v30, v31);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
      return swift_release();
    }
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v7;
  uint64_t v8;
  char v10;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() != a2 || v5 != a3)
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_13;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() != a2 || v8 != a3)
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
        return;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  swift_getAssociatedTypeWitness();
  if (swift_dynamicCastUnknownClass())
  {
    swift_getAssociatedConformanceWitness();
    PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
  }
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:canMoveItemAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[12], *(_QWORD *)(v6[14] + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - v10;
  v12 = (char *)v4 + v6[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  LOBYTE(a1) = ListCoreDataSource.canMoveCell(forRowAt:)(a1, v7, v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return a1 & 1;
}

void specialized UICollectionViewListCoordinatorBase.collectionView(_:moveItemAt:to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *MEMORY[0x1E0DEEDD8] & *v3;
  swift_beginAccess();
  v8 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)(v6 + 96), *(_QWORD *)(*(_QWORD *)(v6 + 112) + 8), v7);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v8);
  ListCoreDataSource.moveCell(fromRowAt:to:)(a1, a2, v8, v9);
  swift_endAccess();
  UICollectionViewListCoordinatorBase.commitUpdates()();
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  _BYTE v15[16];
  _QWORD *v16;
  char v17;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[12], *(_QWORD *)(v6[14] + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v15[-v10];
  v12 = (char *)v4 + v6[17];
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  v16 = v4;
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:), (uint64_t)v15, v7, MEMORY[0x1E0DEAFA0], v13, (uint64_t)&v17);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  return v17 & 1;
}

void specialized UICollectionViewListCoordinatorBase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1876330F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.Listener.fire()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xE8);
  v3 = *((_BYTE *)v1 + v2);
  *((_BYTE *)v1 + v2) = 3;
  UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v3);
}

uint64_t sub_187633158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(*(_QWORD *)(v0 + 48), *(void **)(v0 + 56), v0 + v6, *(unsigned __int8 *)(v0 + v6 + *(_QWORD *)(v5 + 64)), v1, v2, v3, v4);
}

void partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath() - 8) + 80);
  closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(v0[6], (uint64_t)v0 + ((v4 + 56) & ~v4), v1, v2, v3);
}

uint64_t sub_1876332A8()
{
  return swift_deallocObject();
}

uint64_t sub_1876332B8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(a1, *(_QWORD *)(v1 + 48), *(UIView **)(v1 + 56));
}

void partial apply for closure #3 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)()
{
  uint64_t v0;

  closure #3 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(*(_BYTE *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_187633308()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.commitUpdates()()
{
  uint64_t *v0;

  closure #1 in UICollectionViewListCoordinatorBase.commitUpdates()(v0[6], v0[2], v0[3], v0[4]);
}

uint64_t sub_187633340()
{
  return 32;
}

__n128 sub_18763334C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t partial apply for implicit closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)()
{
  return swift_getAtKeyPath();
}

uint64_t objectdestroy_58Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath() - 8) + 80);
  closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 48), v4 + ((v9 + 56) & ~v9));
}

uint64_t sub_187633478()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t objectdestroy_89Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v5 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v4 + 40))
  {
    swift_release();
    swift_release();
  }
  if (v5[8])
  {
    swift_release();
    swift_release();
    v6 = v5[10];
    if (v6)
    {
      if (v6 == 1)
        return swift_deallocObject();
      swift_release();
    }
    if (v5[12])
      swift_release();
  }
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(a1, a2, *(_QWORD *)(v2 + 48), v2 + v6, v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_187633628()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_187633654()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_187633680()
{
  return swift_deallocObject();
}

uint64_t sub_187633690()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.canSelect(rowAt:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UICollectionViewListCoordinatorBase.canSelect(rowAt:)(*(_QWORD *)(v1 + 56), a1);
}

_QWORD *partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_1876336F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 48);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_187633744()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(*(void (**)(uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), v0 + ((v1 + 64) & ~v1));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 48))(*a1);
}

uint64_t sub_187633870()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(a1, *(_QWORD **)(v3 + 16), a2, a3);
}

uint64_t sub_18763389C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(v4 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  v9 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v9, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata2 + 48), v11);
  v13 = v9 + *(int *)(v8 + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  v15 = v9 + *(int *)(v8 + 44);
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = type metadata accessor for ShadowListDataSource(255, v6, *(_QWORD *)(v8 + 8), a2);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  type metadata accessor for _RowVisitationContext(0, v9, v10, v11);
  return implicit closure #3 in implicit closure #2 in implicit closure #1 in closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(a1, v6, v7, v8, a3);
}

uint64_t sub_187633BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return (*(uint64_t (**)(unint64_t, _QWORD, _QWORD, double, double, double, double))(v4 + 16))(v4 + v10, *(_QWORD *)(v4 + v11), *(_QWORD *)(v4 + v11 + 8), a1, a2, a3, a4);
}

uint64_t sub_187633CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath() - 8) + 80);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, double, double, double, double))(v4 + 16))(v4 + ((v9 + 32) & ~v9), 0, 0, a1, a2, a3, a4);
}

unint64_t type metadata accessor for UIInteraction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIInteraction;
  if (!lazy cache variable for type metadata for UIInteraction)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIInteraction);
  }
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.ListDiffable.SectionIDs.Collection.Index) -> (@owned String?, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_187633E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShadowListDataSource(0, v5, v6, a4) - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v7 + 48) & ~v7), v5);
  type metadata accessor for ShadowListUpdateRecorder(0, v5, *(_QWORD *)(v6 + 8), v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UICollectionViewListCoordinatorBase.indexTitles(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v4 + 32);
  v7 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v6 + 8), a4);
  return ShadowListDataSource<>.sectionIndexLabel(forSectionAt:)(a1, v7, v6);
}

uint64_t sub_187633F74()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;

  closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)(a1, a2, a3, *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), a4, a5, a6, a7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t closure #1 in UpdateCoalescingCollectionView.updateContent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t WeakValue;
  uint64_t v4;

  v2 = type metadata accessor for BridgedListState(0);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(WeakValue, a1, type metadata accessor for BridgedListState);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, v4, 1, v2);
}

void UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _BYTE *v17;
  objc_super v18;
  uint64_t aBlock;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;

  v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate] = 2;
  v5 = *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v7;
    v11 = MEMORY[0x1E0C809B0];
    if (a1)
    {
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = a1;
      *(_QWORD *)(v13 + 24) = a2;
      v23 = partial apply for thunk for @callee_guaranteed () -> ();
      v24 = (_QWORD *)v13;
      aBlock = v11;
      v20 = 1107296256;
      v21 = thunk for @escaping @callee_guaranteed () -> ();
      v22 = &block_descriptor_12_2;
      v14 = _Block_copy(&aBlock);
      swift_release();
    }
    else
    {
      v14 = 0;
    }
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = a3;
    v15[3] = a4;
    v15[4] = v4;
    v23 = partial apply for closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
    v24 = v15;
    aBlock = v11;
    v20 = 1107296256;
    v21 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v22 = &block_descriptor_44;
    v16 = _Block_copy(&aBlock);
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a3, a4);
    v17 = v4;
    swift_release();
    v18.receiver = v17;
    v18.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
    objc_msgSendSuper2(&v18, sel_performBatchUpdates_completion_, v14, v16);
    _Block_release(v16);
    _Block_release(v14);
  }
}

void closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(char a1, void (*a2)(_QWORD, double), uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  int v17;
  BOOL v18;
  int v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *ObjCClassFromObject;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSArray v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t (*v44)();
  void *v45;
  char *v46;
  id v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t updated;
  id v53;
  _QWORD aBlock[7];

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(0);
  v12 = *(_QWORD *)(updated - 8);
  v14 = MEMORY[0x1E0C80A78](updated, v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    a2(a1 & 1, v14);
  v17 = *(_DWORD *)&a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  v18 = v17 != 0;
  v19 = v17 - 1;
  if (!v18)
  {
    __break(1u);
    return;
  }
  *(_DWORD *)&a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v19;
  if (!v19 && a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1)
    specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  v20 = &a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations];
  swift_beginAccess();
  v21 = a4;
  v22 = swift_bridgeObjectRetain();
  v23 = specialized _ArrayProtocol.filter(_:)(v22, v21);
  swift_bridgeObjectRelease();

  *v20 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v50 = v21;
    v25 = objc_msgSend(v21, sel_collectionViewLayout);
    ObjCClassFromObject = (void *)swift_getObjCClassFromObject();

    objc_msgSend(ObjCClassFromObject, sel_invalidationContextClass);
    swift_getObjCClassMetadata();
    type metadata accessor for UICollectionViewLayoutInvalidationContext();
    swift_dynamicCastMetatypeUnconditional();
    v53 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v27 = *(unsigned __int8 *)(v12 + 80);
    v49 = v23;
    v28 = v23 + ((v27 + 32) & ~v27);
    v29 = *(_QWORD *)(v12 + 72);
    v51 = xmmword_187BF9830;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)v16, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for (IndexPath, String)();
        v34 = &v16[*(int *)(v33 + 48)];
        v35 = *(_QWORD *)v34;
        v36 = *((_QWORD *)v34 + 1);
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v16, v7);
        v37 = (void *)MEMORY[0x18D75CC88](v35, v36);
        swift_bridgeObjectRelease();
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v38 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
        v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = v51;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 16))(v39 + v38, v11, v7);
        v32.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v53, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v37, v32.super.isa);

      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v16, v7);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v30 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
        v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = v51;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 16))(v31 + v30, v11, v7);
        v32.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v53, sel_invalidateItemsAtIndexPaths_, v32.super.isa, v49);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v28 += v29;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v40 = (void *)objc_opt_self();
    v41 = swift_allocObject();
    v21 = v50;
    v42 = v53;
    *(_QWORD *)(v41 + 16) = v50;
    *(_QWORD *)(v41 + 24) = v42;
    v43 = swift_allocObject();
    v44 = partial apply for closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
    *(_QWORD *)(v43 + 16) = partial apply for closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
    *(_QWORD *)(v43 + 24) = v41;
    aBlock[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    aBlock[5] = v43;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_22;
    v45 = _Block_copy(aBlock);
    v46 = v21;
    v47 = v42;
    swift_retain();
    swift_release();
    objc_msgSend(v40, sel_performWithoutAnimation_, v45);

    _Block_release(v45);
    LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v47 & 1) == 0)
      goto LABEL_17;
    __break(1u);
  }
  swift_bridgeObjectRelease();
  v44 = 0;
LABEL_17:
  v21[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate] = 0;
  v48 = &v21[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(_QWORD *)v48 = 0;
  *((_QWORD *)v48 + 1) = 0;
  v48[16] = 1;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v44);
}

uint64_t closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t result;
  objc_super v10;
  _QWORD aBlock[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_32_0;
  v6 = _Block_copy(aBlock);
  v7 = a1;
  v8 = a2;
  swift_retain();
  swift_release();
  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v10, sel_performBatchUpdates_completion_, v6, 0);
  _Block_release(v6);
  swift_release();
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(void *a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend(a1, sel_collectionViewLayout);
  objc_msgSend(v3, sel_invalidateLayoutWithContext_, a2);

}

id UpdateCoalescingCollectionView.scheduleVisibleCellsUpdate(indexPath:kind:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id result;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  updated = type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(0);
  v8 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v37 - v15;
  v17 = &v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  if (*(uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate + 8] > 1)
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v18 = *v17;
    if (v18 != 2 && (v18 & 1) == 0)
    {
      result = objc_msgSend(v3, sel_setNeedsLayout, v14);
      *v17 = 1;
    }
    else
    {
      if (a3)
      {
        type metadata accessor for (IndexPath, String)();
        v21 = &v16[*(int *)(v20 + 48)];
        v22 = type metadata accessor for IndexPath();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v16, a1, v22);
        *(_QWORD *)v21 = a2;
        *((_QWORD *)v21 + 1) = a3;
        swift_storeEnumTagMultiPayload();
        v23 = &v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations];
        swift_beginAccess();
        v24 = *(_QWORD **)v23;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v23 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v24 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
          *(_QWORD *)v23 = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v24);
          *(_QWORD *)v23 = v24;
        }
        v24[2] = v27 + 1;
        v28 = (uint64_t)v24
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v27;
        v29 = (uint64_t)v16;
      }
      else
      {
        v31 = type metadata accessor for IndexPath();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v11, a1, v31);
        swift_storeEnumTagMultiPayload();
        v32 = &v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations];
        swift_beginAccess();
        v33 = *(_QWORD **)v32;
        v34 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v32 = v33;
        if ((v34 & 1) == 0)
        {
          v33 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
          *(_QWORD *)v32 = v33;
        }
        v36 = v33[2];
        v35 = v33[3];
        if (v36 >= v35 >> 1)
        {
          v33 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v33);
          *(_QWORD *)v32 = v33;
        }
        v33[2] = v36 + 1;
        v28 = (uint64_t)v33
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v36;
        v29 = (uint64_t)v11;
      }
      outlined init with take of TableCellFormula(v29, v28, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      return (id)swift_endAccess();
    }
  }
  return result;
}

id closure #1 in UpdateCoalescingCollectionView.idealSize(in:)(char *a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  uint64_t v15;
  double v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v21;
  unint64_t v22;

  objc_msgSend(a1, sel_frame);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  objc_msgSend(a1, sel_setFrame_, 0.0, 0.0, a2, a3);
  objc_msgSend(a1, sel__setVisibleRectEdgeInsets_, -10000.0, 0.0, -10000.0, 0.0);
  objc_msgSend(a1, sel_setNeedsLayout);
  objc_msgSend(a1, sel_layoutIfNeeded);
  objc_msgSend(a1, sel_contentSize);
  v14 = (double *)&a1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(_QWORD *)v14 = v15;
  v14[1] = v16;
  *((_BYTE *)v14 + 16) = 0;
  if (v16 > 10000.0)
  {
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(148);
    v17._object = (void *)0x8000000187BE5050;
    v17._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v17);
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000005ELL;
    v19._object = (void *)0x8000000187BE5090;
    String.append(_:)(v19);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(a1, sel__setVisibleRectEdgeInsets_, *MEMORY[0x1E0DC49E8], *(double *)(MEMORY[0x1E0DC49E8] + 8), *(double *)(MEMORY[0x1E0DC49E8] + 16), *(double *)(MEMORY[0x1E0DC49E8] + 24), v21, v22);
  return objc_msgSend(a1, sel_setFrame_, v7, v9, v11, v13);
}

id UpdateCoalescingCollectionView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for UpdateCoalescingCollectionView()
{
  return type metadata accessor for UpdateCoalescingCollectionView(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for (IndexPath, String)();
      v9 = *(int *)(v8 + 48);
      v10 = (uint64_t *)((char *)a1 + v9);
      v11 = (uint64_t *)((char *)a2 + v9);
      v12 = v11[1];
      *v10 = *v11;
      v10[1] = v12;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata accessor for (IndexPath, String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (IndexPath, String))
  {
    type metadata accessor for IndexPath();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (IndexPath, String));
  }
}

uint64_t destroy for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = type metadata accessor for IndexPath();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for (IndexPath, String)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for (IndexPath, String)();
    v7 = *(int *)(v6 + 48);
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    v10 = v9[1];
    *v8 = *v9;
    v8[1] = v10;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for (IndexPath, String)();
      v7 = *(int *)(v6 + 48);
      v8 = (_QWORD *)(a1 + v7);
      v9 = (_QWORD *)(a2 + v7);
      *v8 = *v9;
      v8[1] = v9[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UpdateCoalescingCollectionView.UpdateInvalidation);
}

uint64_t initializeWithTake for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for (IndexPath, String)();
    *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for (IndexPath, String)();
      *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for UpdateCoalescingCollectionView.UpdateInvalidation()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = type metadata accessor for IndexPath();
  if (v1 <= 0x3F)
  {
    v2[4] = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UpdateCoalescingCollectionView.VisibleCellsUpdate(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[16])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

void *type metadata accessor for UpdateCoalescingCollectionView.VisibleCellsUpdate()
{
  return &unk_1E1AFDF60;
}

uint64_t partial apply for closure #1 in UpdateCoalescingCollectionView.updateContent()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in UpdateCoalescingCollectionView.updateContent()(a1);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t updated;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  Class isa;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  Class v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;

  v61 = a2;
  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  v60 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v54 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v53 = (char *)v51 - v10;
  updated = type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(0);
  MEMORY[0x1E0C80A78](updated, v12);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v51 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)v51 - v22;
  result = MEMORY[0x1E0DEE9D8];
  v62 = MEMORY[0x1E0DEE9D8];
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    v51[1] = v2;
    v52 = v14;
    v26 = *(_QWORD *)(v21 + 72);
    v55 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v56 = v26;
    v27 = a1 + v55;
    v57 = (char *)v51 - v22;
    v58 = v18;
    while (1)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v23, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v23, (uint64_t)v18, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for (IndexPath, String)();
        v30 = &v18[*(int *)(v29 + 48)];
        v31 = *(_QWORD *)v30;
        v32 = *((_QWORD *)v30 + 1);
        v33 = v18;
        v34 = v60;
        v35 = v54;
        v36 = updated;
        v37 = v59;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v54, v33, v59);
        v38 = (void *)MEMORY[0x18D75CC88](v31, v32);
        swift_bridgeObjectRelease();
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v40 = objc_msgSend(v61, sel_supplementaryViewForElementKind_atIndexPath_, v38, isa);

        v41 = v37;
        updated = v36;
        v14 = v52;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v41);
        if (v40)
          goto LABEL_9;
      }
      else
      {
        v42 = v60;
        v43 = v53;
        v44 = v18;
        v45 = v59;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v53, v44, v59);
        v46 = IndexPath._bridgeToObjectiveC()().super.isa;
        v40 = objc_msgSend(v61, sel_cellForItemAtIndexPath_, v46);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v45);
        if (v40)
        {
LABEL_9:

          v23 = v57;
          outlined init with take of TableCellFormula((uint64_t)v57, (uint64_t)v14, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
          v47 = v62;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1);
            v47 = v62;
          }
          v18 = v58;
          v49 = *(_QWORD *)(v47 + 16);
          v48 = *(_QWORD *)(v47 + 24);
          if (v49 >= v48 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
            v47 = v62;
          }
          *(_QWORD *)(v47 + 16) = v49 + 1;
          v50 = v47 + v55 + v49 * v56;
          v28 = v56;
          outlined init with take of TableCellFormula((uint64_t)v14, v50, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
          goto LABEL_4;
        }
      }
      v23 = v57;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v57, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      v18 = v58;
      v28 = v56;
LABEL_4:
      v27 += v28;
      if (!--v25)
        return v62;
    }
  }
  return result;
}

uint64_t specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[16];
  _BYTE *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v1 = v0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState?, type metadata accessor for BridgedListState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v26[-v4];
  v6 = (int *)type metadata accessor for BridgedListState(0);
  v7 = *((_QWORD *)v6 - 1);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (double *)&v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v26[-v13];
  v27 = v1;
  static Update.ensure<A>(_:)();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of TaskPriority?((uint64_t)v5, &lazy cache variable for type metadata for BridgedListState?, type metadata accessor for BridgedListState);
  outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v14, type metadata accessor for BridgedListState);
  if (*(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates])
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for BridgedListState);
    v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 1;
  }
  else
  {
    v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 0;
    v16 = static SemanticFeature.isEnabled.getter();
    v17 = 15.0;
    if ((v16 & 1) != 0)
      v17 = 16.0;
    *v10 = v17;
    v18 = (uint64_t)v10 + v6[5];
    v19 = type metadata accessor for BridgedListState.ScrollTarget(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    v20 = (char *)v10 + v6[6];
    *((_OWORD *)v20 + 5) = 0u;
    *((_OWORD *)v20 + 6) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *((_OWORD *)v20 + 4) = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_OWORD *)v20 + 2) = 0u;
    *(_OWORD *)v20 = 0u;
    v20[112] = 1;
    v21 = v6[7];
    *(_DWORD *)((char *)v10 + v21) = 0;
    outlined assign with copy of BridgedListState.ScrollTarget?((uint64_t)&v14[v6[5]], v18);
    if ((v14[v6[6] + 112] & 1) == 0)
    {
      if (*(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper])
        swift_beginAccess();
      objc_msgSend(v1, sel_adjustedContentInset);
      objc_msgSend(v1, sel_contentOffset);
      objc_msgSend(v1, sel_contentSize);
      objc_msgSend(v1, sel_bounds);
      ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
      v22 = v29;
      *(_OWORD *)v20 = v28;
      *((_OWORD *)v20 + 1) = v22;
      v23 = v31;
      *((_OWORD *)v20 + 2) = v30;
      *((_OWORD *)v20 + 3) = v23;
      v24 = v33;
      *((_OWORD *)v20 + 4) = v32;
      *((_OWORD *)v20 + 5) = v24;
      *((_OWORD *)v20 + 6) = v34;
      v20[112] = 0;
    }
    v25 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed];
    swift_beginAccess();
    *(_DWORD *)((char *)v10 + v21) = *(_DWORD *)(v25 + 16);
    BridgedListState.commit(to:)(*(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState]);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for BridgedListState);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for BridgedListState);
  }
  return result;
}

uint64_t sub_187635CBC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_187635CE8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(char a1)
{
  uint64_t v1;

  closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(a1, *(void (**)(_QWORD, double))(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE **)(v1 + 32));
}

uint64_t sub_187635D28()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for UICollectionViewLayoutInvalidationContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext);
  }
  return result;
}

uint64_t sub_187635D74()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_187635DA8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)()
{
  uint64_t v0;

  closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_187635DC0()
{
  return swift_deallocObject();
}

uint64_t sub_187635DD0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_performBatchUpdates_completion_, 0, 0);
}

uint64_t sub_187635E0C()
{
  return swift_deallocObject();
}

void specialized UpdateCoalescingCollectionView.init(coder:)()
{
  _BYTE *v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  v2 = swift_allocObject();
  *v1 = v2;
  v1[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper] = 0;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  v4 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  *v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations] = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] = 0;
  v5 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem];
  v6 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed;
  type metadata accessor for MutableBox<UInt32>();
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)&v0[v7] = v8;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_phaseState] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187635FCC + 4 * byte_187C46390[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187636084 + 4 * byte_187C4639A[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1876360B8 + 4 * byte_187C46395[v5]))();
}

uint64_t sub_1876360B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876360C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876360C8);
  return result;
}

uint64_t sub_1876360D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876360DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1876360E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876360E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType()
{
  return &unk_1E1AFDED0;
}

uint64_t partial apply for closure #1 in UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in UpdateCoalescingCollectionView.updateContent()(a1);
}

uint64_t Scene.environment<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *KeyPath;
  uint64_t v9;

  KeyPath = (_QWORD *)swift_getKeyPath();
  v9 = a1;
  Scene.environment<A>(_:_:)(KeyPath, (uint64_t)&v9, a2, a4);
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.subscript<A>(_:) : <A><A1>EnvironmentValuesA1()
{
  uint64_t v0;

  v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_unknownObjectRelease();
}

uint64_t sub_1876361F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187636240()
{
  return 32;
}

uint64_t sub_18763624C()
{
  return 1;
}

Swift::Int sub_187636254(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a2 + a1 - 24));
}

__n128 sub_187636260(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18763626C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for Optional();
  type metadata accessor for _EnvironmentKeyWritingModifier();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

Swift::Int specialized EnvironmentObjectKey.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t specialized EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t initializeWithCopy for PlatformItemListMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<Color?>.Content(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PlatformItemListMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<Color?>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  outlined consume of Environment<Color?>.Content(v10, v11);
  return a1;
}

uint64_t assignWithTake for PlatformItemListMenuStyle(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Environment<Color?>.Content(v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItemListMenuStyle()
{
  return &type metadata for PlatformItemListMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in PlatformItemListMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformItemListMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v5 = *a1;
  v4 = a1[1];
  v18 = 0;
  v19 = 0xE000000000000000;
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0xE000000000000000;
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(unsigned __int8 *)(v2 + 32);
  outlined copy of Environment<Color?>.Content(v7, v8);
  v9 = specialized Environment.wrappedValue.getter(v7, v8);
  outlined consume of Environment<Color?>.Content(v7, v8);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v18 = 7;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0xC000000000000000;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v11 = *(_QWORD *)(v2 + 8);
  v12 = *(_BYTE *)(v2 + 16);
  outlined copy of Environment<Bool>.Content(v11, v12);
  LOBYTE(v9) = specialized Environment.wrappedValue.getter(v11, v12);
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = swift_allocObject();
  outlined init with take of PlatformItemList.Item.SystemItem?((uint64_t)&v18, v13 + 16);
  *(_QWORD *)(v13 + 120) = v5;
  *(_QWORD *)(v13 + 128) = v4;
  *(_BYTE *)(v13 + 136) = v9;
  *(_BYTE *)(v13 + 137) = 2;
  KeyPath = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v5);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  v27 = 0;
  *(_QWORD *)a2 = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = partial apply for closure #1 in View.platformItemTint(_:);
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = partial apply for closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:);
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v4;
  *(_BYTE *)(a2 + 64) = 1;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = v15;
  *(_WORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = v16;
  *(_BYTE *)(a2 + 128) = v27;
  return result;
}

uint64_t sub_1876366EC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_187636710()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187636734()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  if (*(_QWORD *)(v0 + 120))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1876367B4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

void type metadata accessor for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroup<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    lazy protocol witness table accessor for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>();
    v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>;
  if (!lazy protocol witness table cache variable for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroup<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroup<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>);
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>;
  if (!lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
    type metadata accessor for PlatformItemListGeneratingViewModifier();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, (uint64_t)&type metadata for MenuStyleConfiguration.Content, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, (uint64_t)&type metadata for MenuStyleConfiguration.Content, (uint64_t)&type metadata for PlatformItemListContentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = &protocol witness table for MenuStyleConfiguration.Content;
    v3[1] = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>;
  if (!lazy protocol witness table cache variable for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>);
  }
  return result;
}

void AnyUIKitNavigationBridge.isBeingPresented.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall AnyUIKitNavigationBridge.popSelf(animated:)(Swift::Bool animated)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UIKitNavigationBridge.activePresentation.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[11];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;
  _BYTE v16[104];

  swift_beginAccess();
  outlined init with copy of BridgedPresentation?(v1 + 32, (uint64_t)v16);
  outlined init with copy of BridgedPresentation?(a1, (uint64_t)&v7);
  if ((_QWORD)v8)
  {
    v14[4] = v11;
    v14[5] = v12;
    v15 = v13;
    v14[0] = v7;
    v14[1] = v8;
    v14[2] = v9;
    v14[3] = v10;
    v3 = v7;
    outlined init with copy of BridgedPresentation?((uint64_t)v16, (uint64_t)&v7);
    if ((_QWORD)v8)
    {
      outlined init with copy of NavigationDestinationContent((uint64_t)&v7, (uint64_t)v6);
      outlined destroy of BridgedPresentation((uint64_t)&v7);
      v4 = v6[0];
      outlined destroy of NavigationDestinationContent((uint64_t)v6);
      if (v3 == v4)
        goto LABEL_8;
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v7, &lazy cache variable for type metadata for BridgedPresentation?);
    }
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
LABEL_8:
    outlined destroy of BridgedPresentation((uint64_t)v14);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for BridgedPresentation?);
  }
  outlined destroy of AccessibilityValueStorage?((uint64_t)&v7, &lazy cache variable for type metadata for BridgedPresentation?);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for BridgedPresentation?);
}

uint64_t UIKitNavigationBridge.activePresentation.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[104];

  swift_beginAccess();
  outlined init with copy of BridgedPresentation?(v1 + 32, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with copy of BridgedPresentation?(a1, v1 + 32);
  swift_endAccess();
  UIKitNavigationBridge.activePresentation.didset((uint64_t)v4);
  outlined destroy of AccessibilityValueStorage?(a1, &lazy cache variable for type metadata for BridgedPresentation?);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, &lazy cache variable for type metadata for BridgedPresentation?);
}

void UIKitNavigationBridge.isRepresentingSheetNavigationView.didset(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (*((_BYTE *)v1 + 153) != (a1 & 1))
  {
    v2 = *v1;
    v3 = UIKitNavigationBridge.host.getter();
    if (v3)
    {
      v5 = (void *)v3;
      v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), v4);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t UIKitNavigationBridge.containingNavController.getter()
{
  uint64_t result;

  result = UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter();
  if (!result)
    UIKitNavigationBridge.containingVC.getter();
  return result;
}

void UIKitNavigationBridge.inferredPreferenceBridge.getter()
{
  UIKitNavigationBridge.containingSplitViewController.getter();
}

uint64_t sub_1876371FC(void *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[8];

  if (a1)
  {
    v2 = objc_msgSend(a1, sel_traitCollection);
    UITraitCollection.baseEnvironment.getter(v8);

    v3 = EnvironmentValues.preferenceBridge.getter();
    swift_release();
  }
  else
  {
    v4 = (void *)UIKitNavigationBridge.containingNavController.getter();
    if (!v4)
      return 0;
    v5 = v4;
    v6 = objc_msgSend(v4, sel_traitCollection);

    UITraitCollection.baseEnvironment.getter(v8);
    v3 = EnvironmentValues.preferenceBridge.getter();
    swift_release();
  }
  swift_release();
  return v3;
}

void popCurrentView #1 <A>(transaction:) in UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  id v6;
  _OWORD v7[6];
  uint64_t v8;

  v3 = Transaction.disablesAnimations.getter();
  (*(void (**)(BOOL))(*(_QWORD *)a2 + 360))((v3 & 1) == 0);
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v4 = (void *)MEMORY[0x18D75CC88](0xD000000000000037, 0x8000000187BE5260);
  objc_msgSend(v6, sel_removeObserver_name_object_, a2, v4, 0);

  v5 = (void *)MEMORY[0x18D75CC88](0xD000000000000038, 0x8000000187BE52A0);
  objc_msgSend(v6, sel_removeObserver_name_object_, a2, v5, 0);

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  UIKitNavigationBridge.activePresentation.setter((uint64_t)v7);

}

uint64_t UIKitNavigationBridge.updatePresentedContent(_:animated:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t, _BYTE *, _QWORD);
  char v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  char v17;
  _BYTE v18[32];

  v3 = v2;
  (*(void (**)(uint64_t *__return_ptr, _QWORD))(*v2 + 336))(&v16, *(unsigned __int8 *)(a1 + 8));
  if (v17 == 2)
    return outlined destroy of AccessibilityValueStorage?((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
  outlined init with take of PushTarget((uint64_t)&v16, (uint64_t)v18);
  swift_beginAccess();
  if (!v2[6]
    || (v7 = v2[16], (~v7 & 0xF000000000000007) == 0)
    || (v8 = (void *)v2[15],
        v9 = *(uint64_t (**)(void *, uint64_t, uint64_t, _BYTE *, _QWORD))(*v2 + 344),
        outlined copy of BridgedPresentation.ContentHost(v8, v2[16]),
        v10 = v9(v8, v7, a1, v18, a2 & 1),
        outlined consume of BridgedPresentation.ContentHost?(v8, v7),
        (v10 & 1) == 0))
  {
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*v3 + 352))(a1, v18, a2 & 1);
    v11 = MEMORY[0x18D760234](v18);
    if (v11)
    {
      v12 = (void *)v11;
      if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && v18[8] == 1)
        UIKitNavigationBridge.containingSplitViewController.getter();
      v13 = v12;
      v14 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v15 = (void *)MEMORY[0x18D75CC88](0xD000000000000037, 0x8000000187BE5260);
      objc_msgSend(v14, sel_addObserver_selector_name_object_, v3, sel_navigationChanged_, v15, v13);

    }
  }
  return outlined destroy of PushTarget((uint64_t)v18);
}

void UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
  UIKitNavigationBridge.inferredPreferenceBridge.getter();
}

void sub_187637764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  va_list va;

  va_start(va, a8);
  if (a1)
  {
    v10 = (_QWORD *)specialized UIHostingController.host.getter();
    v11 = *(_QWORD *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x68));
    swift_beginAccess();
    if ((*(_BYTE *)(v11 + 128) & 1) != 0)
    {
      swift_release();
    }
    else
    {
      v12 = (id)specialized UIHostingController.host.getter();
      _UIHostingView.setPreferenceBridge(_:)(a1);
      swift_release();

    }
  }
  swift_beginAccess();
  outlined init with copy of PushTarget(v8, (uint64_t)va);
  swift_retain();
  swift_retain();
  UIKitNavigationBridge.containingSplitViewController.getter();
}

uint64_t sub_18763781C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  id v9;
  id v10;
  _BYTE v12[32];
  _BYTE v13[152];

  outlined init with copy of PushTarget((uint64_t)v13, (uint64_t)v12);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = *(_QWORD *)(v6 + 112);
  v8[3] = *(_QWORD *)(v6 + 120);
  v8[4] = v1;
  outlined init with take of PushTarget((uint64_t)v12, (uint64_t)(v8 + 5));
  v8[9] = a1;
  v8[10] = v3;
  v8[11] = v2;
  v8[12] = v4;
  v8[13] = v5;
  v9 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = v1;
  static Update.enqueueAction(_:)();

  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of PushTarget((uint64_t)v13);
}

void closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  __int128 v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  _QWORD v40[4];
  _OWORD v41[3];
  char v42;

  v14 = (void *)specialized UIHostingController.host.getter();
  v15 = MEMORY[0x18D760234](a2);
  if (v15)
  {
    v16 = (void *)v15;
    v39 = a4;
    outlined init with copy of PushTarget(a2, (uint64_t)v40);
    v17 = (void *)MEMORY[0x18D760234](a2);
    outlined init with take of PushTarget?((uint64_t)v40, (uint64_t)v41);
    swift_unknownObjectWeakInit();
    v18 = a3;
    v19 = v14;

    swift_unknownObjectWeakInit();
    v42 = 2;
    UIHostingController.overrides.setter((uint64_t)v41);
    v20 = objc_msgSend(v16, sel_view, a5);
    if (v20)
    {
      v21 = v20;
      objc_msgSend(v20, sel_bounds);
      v23 = v22;
      v25 = v24;
      v27 = v26;
      v29 = v28;

      objc_msgSend(v19, sel_setBounds_, v23, v25, v27, v29);
      v30 = objc_msgSend(v16, sel_traitCollection);
      v40[0] = a6;
      v40[1] = a7;
      swift_retain();
      swift_retain();
      UITraitCollection.resolvedEnvironment(base:)(v40, v41);
      swift_release();
      swift_release();

      v31 = v41[0];
      v32 = (void *)specialized UIHostingController.host.getter();
      v41[0] = v31;
      swift_retain_n();
      swift_retain_n();
      v33 = v32;
      _UIHostingView.environmentOverride.setter((uint64_t *)v41);

      v34 = specialized UIHostingController.navigationBridge.getter();
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 176);
        *(_OWORD *)(v34 + 176) = v31;
        outlined consume of EnvironmentValues?(v35);
      }
      else
      {
        swift_release();
        swift_release();
      }
      v36 = (id)specialized UIHostingController.host.getter();
      _UIHostingView.updateEnvironment()();

      MEMORY[0x1E0C80A78](v37, v38);
      static Update.locked<A>(_:)();
      swift_release();
      swift_release();
      $defer #1 <A><A1>() in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(a1, v39);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t $defer #1 <A><A1>() in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  _BYTE v9[56];

  v5 = xmmword_187BF9F90;
  v6 = 0;
  v7 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v8 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v5, (uint64_t)v9);
  v3 = UIHostingController.overrides.setter((uint64_t)v9);
  return a2(v3);
}

void closure #1 in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = *MEMORY[0x1E0DEEDD8] & *a1;
  v2 = (void *)specialized UIHostingController.host.getter();
  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v5 = v2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

}

void UIKitNavigationBridge.pushTarget(isDetail:)(uint64_t a1@<X8>)
{
  uint64_t Attempted;
  void *v3;
  uint64_t v4;
  id v5;

  Attempted = UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter();
  if (Attempted)
  {
    v3 = (void *)Attempted;
    swift_unknownObjectWeakInit();

    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v4 = UIKitNavigationBridge.containingNavController.getter();
    if (v4)
    {
      v5 = (id)v4;
      swift_unknownObjectWeakInit();
      *(_BYTE *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 1;

    }
    else
    {
      *(_OWORD *)a1 = xmmword_187BF9F90;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
}

void UIKitNavigationBridge.updateContentHost(_:destination:pushTarget:animated:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void UIKitNavigationBridge.push(_:onto:animated:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall UIKitNavigationBridge.popDestination(animated:)(Swift::Bool animated)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc UIKitNavigationBridge.navigationChanged(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UIKitNavigationBridge.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of AccessibilityValueStorage?(v0 + 32, &lazy cache variable for type metadata for BridgedPresentation?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(_QWORD *)(v0 + 176));
  return swift_unknownObjectWeakDestroy();
}

uint64_t UIKitNavigationBridge.__deallocating_deinit()
{
  UIKitNavigationBridge.deinit();
  return swift_deallocClassInstance();
}

void *type metadata accessor for UIKitNavigationBridgePresentationModeLocation()
{
  return &unk_1E1B09CD0;
}

uint64_t protocol witness for Location.get() in conformance UIKitNavigationBridgePresentationModeLocation@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
    result = swift_release();
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3 & 1;
  return result;
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance UIKitNavigationBridgePresentationModeLocation(uint64_t result)
{
  if ((*(_BYTE *)result & 1) == 0)
  {
    result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 96))(1);
      return swift_release();
    }
  }
  return result;
}

uint64_t protocol witness for Location.update() in conformance UIKitNavigationBridgePresentationModeLocation(_BYTE *a1)
{
  uint64_t Strong;
  char v3;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Strong + 88))(Strong);
    swift_release();
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3 & 1;
  return 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsRepresentingSheetNavigationView()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsRepresentingSheetNavigationView()
{
  lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView();
  return PropertyList.subscript.setter();
}

uint64_t specialized UIKitNavigationBridge.removePreferences(from:)()
{
  return GraphHost.removePreference<A>(_:)();
}

uint64_t specialized UIKitNavigationBridge.init()(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_WORD *)(a1 + 152) = 0;
  swift_retain();
  EnvironmentValues.init()();
  *(_OWORD *)(a1 + 176) = xmmword_187BFE310;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t outlined assign with copy of BridgedPresentation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for BridgedPresentation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BridgedPresentation(uint64_t a1)
{
  destroy for BridgedPresentation(a1);
  return a1;
}

uint64_t outlined init with copy of NavigationDestinationContent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationDestinationContent(a2, a1);
  return a2;
}

uint64_t outlined destroy of NavigationDestinationContent(uint64_t a1)
{
  destroy for NavigationDestinationContent(a1);
  return a1;
}

uint64_t specialized UIKitNavigationBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t outlined init with copy of PushTarget(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PushTarget(a2, a1);
  return a2;
}

uint64_t sub_187638338()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
  uint64_t v0;

  closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(*(_QWORD *)(v0 + 32), v0 + 40, *(void **)(v0 + 72), *(uint64_t (**)(uint64_t))(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

void partial apply for closure #1 in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
  uint64_t v0;

  closure #1 in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(*(_QWORD **)(v0 + 32));
}

id outlined copy of BridgedPresentation.ContentHost(void *a1, uint64_t a2)
{
  void *v3;
  id v4;

  if ((a2 & 0x8000000000000000) == 0)
    return a1;
  v3 = (void *)(a2 & 0x7FFFFFFFFFFFFFFFLL);
  v4 = a1;
  return v3;
}

void outlined consume of BridgedPresentation.ContentHost?(void *a1, uint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0)
    outlined consume of BridgedPresentation.ContentHost(a1, a2);
}

void outlined consume of BridgedPresentation.ContentHost(void *a1, uint64_t a2)
{
  void *v2;

  if (a2 < 0)
  {
    v2 = (void *)(a2 & 0x7FFFFFFFFFFFFFFFLL);

  }
  else
  {

  }
}

uint64_t outlined destroy of NavigationDestinationPresentation(uint64_t a1)
{
  destroy for NavigationDestinationPresentation(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSearchAllowedInput and conformance IsSearchAllowedInput;
  if (!lazy protocol witness table cache variable for type IsSearchAllowedInput and conformance IsSearchAllowedInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSearchAllowedInput, &type metadata for IsSearchAllowedInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSearchAllowedInput and conformance IsSearchAllowedInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsRepresentingSheetNavigationView, &type metadata for IsRepresentingSheetNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsRepresentingSheetNavigationView, &type metadata for IsRepresentingSheetNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsRepresentingSheetNavigationView, &type metadata for IsRepresentingSheetNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsRepresentingSheetNavigationView, &type metadata for IsRepresentingSheetNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsRepresentingSheetNavigationView, &type metadata for IsRepresentingSheetNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsRepresentingSheetNavigationView()
{
  return &type metadata for IsRepresentingSheetNavigationView;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsRepresentingSheetNavigationView()
{
  return &protocol witness table for IsRepresentingSheetNavigationView;
}

uint64_t View.editMenu<A>(menu:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v30 = a7;
  v26 = a6;
  v27 = a1;
  v28 = a5;
  v29 = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v10 = type metadata accessor for ModifiedContent();
  v37[0] = a6;
  v37[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v37);
  v11 = type metadata accessor for ZStack();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v26 - v15;
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v11, v14);
  v19 = type metadata accessor for EditMenuModifier(0, v11, v17, v18);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v26 - v22;
  v31 = a3;
  v32 = a4;
  v24 = v28;
  v33 = v28;
  v34 = v26;
  v35 = v27;
  v36 = v29;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  *((_DWORD *)v23 + 5) = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_WORD *)v23 + 8) = 0;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v23[*(int *)(v19 + 40)], v16, v11);
  MEMORY[0x18D75B4AC](v23, a3, v19, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t type metadata accessor for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditMenuModifier);
}

uint64_t View.editMenu<A>(isPresented:menu:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  _QWORD v54[3];

  v46 = a9;
  v42 = a4;
  v43 = a8;
  v40 = a1;
  v41 = a5;
  v45 = a3;
  v44 = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v38 = type metadata accessor for ModifiedContent();
  v54[0] = a10;
  v54[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v38, v54);
  v12 = type metadata accessor for ZStack();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v34 - v15;
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v12, v14);
  v19 = type metadata accessor for EditMenuModifier(0, v12, v17, v18);
  v36 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v34 - v21;
  v35 = a6;
  v23 = type metadata accessor for ModifiedContent();
  v39 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v34 - v25;
  v47 = a6;
  v48 = a7;
  v27 = v43;
  v49 = v43;
  v50 = a10;
  v28 = v40;
  v51 = v42;
  v52 = v41;
  swift_retain();
  v29 = v44;
  swift_retain();
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  EditMenuModifier.init(isPresented:menuContent:)(v28, v29, v45, (uint64_t)v16, v12, v17, (uint64_t)v22);
  MEMORY[0x18D75B4AC](v22, v35, v19, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v19);
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>, v19);
  v53[0] = v27;
  v53[1] = v30;
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v23, v53);
  v32 = lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger();
  View.input<A>(_:)((uint64_t)&unk_1E1AF60F0, v23, (uint64_t)&unk_1E1AF60F0, v31, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v26, v23);
}

uint64_t closure #1 in View.editMenu<A>(menu:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  a1(v18);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v21 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v27[0] = a4;
  v27[1] = v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v27);
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, v22);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v11, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v11);
}

uint64_t partial apply for closure #1 in View.editMenu<A>(menu:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.editMenu<A>(menu:)(*(void (**)(double))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

uint64_t EditMenuModifier.init(isPresented:menuContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;

  outlined consume of StateOrBinding<Bool>(0, 0, 0, 0);
  *(_DWORD *)(a7 + 20) = 0;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = a3;
  *(_BYTE *)(a7 + 17) = 1;
  v15 = a7 + *(int *)(type metadata accessor for EditMenuModifier(0, a5, a6, v14) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v15, a4, a5);
}

unint64_t lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClientHandlesEditMenuTrigger, &unk_1E1AF60F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClientHandlesEditMenuTrigger, &unk_1E1AF60F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClientHandlesEditMenuTrigger, &unk_1E1AF60F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClientHandlesEditMenuTrigger, &unk_1E1AF60F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClientHandlesEditMenuTrigger, &unk_1E1AF60F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

uint64_t View.editMenu<A>(menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v13 = type metadata accessor for ModifiedContent();
  v19[0] = a6;
  v19[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v19);
  v18[0] = partial apply for closure #1 in View.editMenu<A>(menu:);
  v18[1] = v12;
  v16 = type metadata accessor for SelectionEditMenuModifier(0, v13, v14, v15);
  swift_retain();
  MEMORY[0x18D75B4AC](v18, a3, v16, a5);
  return swift_release();
}

uint64_t closure #1 in View.editMenu<A>(menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void (*v10)(double);
  uint64_t v12;

  v6 = *(_QWORD *)(a5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10(v7);
  View.styleContext<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a5);
}

uint64_t sub_187638F24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.editMenu<A>(menu:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in View.editMenu<A>(menu:)(a1, v1[6], v1[7], v1[2], v1[3]);
}

uint64_t type metadata accessor for SelectionEditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectionEditMenuModifier);
}

uint64_t type metadata accessor for EditMenuResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for EditMenuResponder;
  if (!type metadata singleton initialization cache for EditMenuResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for EditMenuResponder()
{
  return swift_initClassMetadata2();
}

uint64_t static SelectionEditMenuModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  int v27;
  id v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v28 = *(id *)a2;
  v29 = v7;
  v30 = v8;
  v31 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)&v32 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  LODWORD(v28) = v6;
  type metadata accessor for SelectionEditMenuModifier(255, a3, a4, v10);
  type metadata accessor for _GraphValue();
  v11 = _GraphValue.value.getter();
  v26 = v41;
  v25 = v44;
  v12 = (id)AGSubgraphGetCurrent();
  if (!v12)
    __break(1u);
  v24[1] = v24;
  v28 = v12;
  v29 = v11;
  v30 = v38;
  LODWORD(v31) = v39;
  *((_QWORD *)&v31 + 1) = v40;
  v32 = v26;
  v33 = v42;
  v34 = v43;
  v35 = v25;
  v36 = v45;
  v37 = v46;
  MEMORY[0x1E0C80A78](v12, v13);
  v22 = type metadata accessor for SelectionEditMenuModifier.Child(0, a3, a4, v14);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionEditMenuModifier<A>.Child, v22);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  v16 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)&v21, v22, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  v18 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v19 = v27;
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<TextSelection> and conformance _GraphInputs.SelectionBasedStorageKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>, (uint64_t)&protocol conformance descriptor for _GraphInputs.SelectionBasedStorageKey<A>);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v28) = v19;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t (*SelectionEditMenuModifier.Child.value.getter(uint64_t a1))(uint64_t a1)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[6];
  int v15;

  v3 = v1[5];
  v14[4] = v1[4];
  v14[5] = v3;
  v15 = *((_DWORD *)v1 + 24);
  v4 = v1[1];
  v14[0] = *v1;
  v14[1] = v4;
  v5 = v1[3];
  v14[2] = v1[2];
  v14[3] = v5;
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(a1 + 16);
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[2];
  *(_OWORD *)(v6 + 80) = v1[3];
  *(_OWORD *)(v6 + 96) = v8;
  *(_OWORD *)(v6 + 112) = v9;
  v11 = *v1;
  v12 = v1[1];
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = v11;
  *(_DWORD *)(v6 + 128) = *((_DWORD *)v1 + 24);
  *(_OWORD *)(v6 + 48) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)v14);
  return partial apply for closure #1 in SelectionEditMenuModifier.Child.value.getter;
}

uint64_t closure #1 in SelectionEditMenuModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;

  if (!AGSubgraphIsValid())
    return MEMORY[0x1E0DEE9D8];
  AGGraphClearUpdate();
  v8 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in SelectionEditMenuModifier.Child.value.getter(a2, a1, a3, a4);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  AGGraphClearUpdate();
  if ((PreferencesOutputs.subscript.getter() & 0x100000000) != 0)
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v9 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t closure #1 in closure #1 in SelectionEditMenuModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v11[5];
  v34 = v11[4];
  v35 = v12;
  v36 = *((_DWORD *)v11 + 24);
  v13 = v11[1];
  v30 = *v11;
  v31 = v13;
  v14 = v11[3];
  v32 = v11[2];
  v33 = v14;
  v17 = type metadata accessor for SelectionEditMenuModifier.Child(0, v15, v16, v16);
  v21 = (void (*)(uint64_t))specialized SelectionEditMenuModifier.Child.modifier.getter(v17, v18, v19, v20);
  swift_retain();
  v21(a2);
  swift_release();
  v29 = a3;
  v22 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v28, a3, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  _GraphValue.init(_:)();
  v24 = *(_OWORD *)(a1 + 64);
  v32 = *(_OWORD *)(a1 + 48);
  v33 = v24;
  v34 = *(_OWORD *)(a1 + 80);
  LODWORD(v35) = *(_DWORD *)(a1 + 96);
  v25 = *(_OWORD *)(a1 + 32);
  v30 = *(_OWORD *)(a1 + 16);
  v31 = v25;
  return (*(uint64_t (**)(char *, __int128 *, uint64_t, uint64_t))(a4 + 24))((char *)&v27 + 4, &v30, a3, a4);
}

uint64_t protocol witness for Rule.value.getter in conformance SelectionEditMenuModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = SelectionEditMenuModifier.Child.value.getter(a1);
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionEditMenuModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static SelectionEditMenuModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionEditMenuModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionEditMenuModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionEditMenuModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t EditMenuModifier.id.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned int *)(v0 + 20);
  if (!(_DWORD)result)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void EditMenuModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EditMenuModifierCore(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type DeferTriggerPredicate and conformance DeferTriggerPredicate();
  type metadata accessor for StaticIf();
}

void sub_1876398D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v15 - 216) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 208) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 240) = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v15 - 232) = (char *)&a9 - v19;
  v20 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 272) = v13;
  *(_QWORD *)(v15 - 280) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&a9 - v27;
  *(_QWORD *)(v15 - 200) = v9;
  *(_QWORD *)(v15 - 256) = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v31 = EditMenuModifier.id.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, (uint64_t)v10 + *(int *)(v14 + 40), v11);
  v32 = *v10;
  v33 = v10[1];
  v34 = *((_BYTE *)v10 + 17);
  *(_QWORD *)(v15 - 288) = v10;
  if ((v34 & 1) != 0)
  {
    v35 = v10[2] & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_BYTE *)(v15 - 184) = v32 & 1;
    *(_QWORD *)(v15 - 176) = v33;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    v32 = *(_QWORD *)(v15 - 120);
    v33 = *(_QWORD *)(v15 - 112);
    v35 = *(_BYTE *)(v15 - 104);
  }
  *(_QWORD *)v28 = default argument 2 of View.textSelectionMenu(text:isPresented:anchor:)();
  *((_DWORD *)v28 + 2) = v31;
  v37 = type metadata accessor for EditMenuModifierCore(0, v11, v12, v36);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v28[*(int *)(v37 + 40)], v24, v11);
  v38 = &v28[*(int *)(v37 + 44)];
  *(_QWORD *)v38 = v32;
  *((_QWORD *)v38 + 1) = v33;
  v38[16] = v35;
  v39 = *(_QWORD *)(v15 - 264);
  v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v39);
  v41 = v39;
  v42 = *(_QWORD *)(v15 - 272);
  MEMORY[0x18D75B4AC](v28, v41, v42, v40);
  v43 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v15 - 280) + 8))(v28, v42);
  MEMORY[0x1E0C80A78](v43, v44);
  v47 = MEMORY[0x1E0C80A78](v45, v46);
  *(_QWORD *)(v15 - 136) = v40;
  *(_QWORD *)(v15 - 128) = &protocol witness table for EditMenuModifierCore<A>;
  v48 = MEMORY[0x1E0CE2E70];
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v15 - 200), v15 - 136, v47);
  v50 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>, MEMORY[0x1E0CE41B8]);
  *(_QWORD *)(v15 - 152) = v49;
  *(_QWORD *)(v15 - 144) = v50;
  MEMORY[0x18D75FFDC](v48, *(_QWORD *)(v15 - 224), v15 - 152);
  StaticIf<>.init(_:then:else:)((uint64_t)&unk_1E1AD6E50, (void (*)(void))partial apply for closure #1 in EditMenuModifier.body(content:));
}

uint64_t sub_187639C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 168) = v1;
  *(_QWORD *)(v5 - 160) = v0;
  v6 = *(_QWORD *)(v5 - 208);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v6, v5 - 168);
  v8 = *(_QWORD *)(v5 - 232);
  static ViewBuilder.buildExpression<A>(_:)(v3, v6, v7);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 216) + 8);
  v9(v3, v6);
  static ViewBuilder.buildBlock<A>(_:)(v8, v6, *(_QWORD *)(v5 - 192));
  v9(v8, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8))(v4, v2);
}

uint64_t closure #1 in EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v9 = type metadata accessor for EditMenuModifier(255, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>, v9);
  v10 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EditMenuModifierCore(255, a2, a3, v11);
  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v20 - v16;
  v20[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v10, v15);
  v20[1] = &protocol witness table for EditMenuModifierCore<A>;
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v20);
  static ViewBuilder.buildExpression<A>(_:)(a1, v12, v18);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v12, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v12);
}

uint64_t closure #2 in EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[4];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v27 = a1;
  v28 = a4;
  v6 = type metadata accessor for EditMenuModifier(255, a2, a3, a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EditMenuModifierCore(255, a2, a3, v8);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>();
  v10 = type metadata accessor for ModifiedContent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - v17;
  EditMenuModifier.editMenuGesture.getter(v6, v19);
  v30[2] = v33;
  v30[3] = v34;
  v26 = v35;
  v31 = v35;
  v32 = v36;
  type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>();
  v30[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v30[1] = &protocol witness table for EditMenuModifierCore<A>;
  v20 = MEMORY[0x1E0CE2E70];
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v30);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>, MEMORY[0x1E0CE2260]);
  View.gesture<A>(_:including:)();
  swift_release();
  swift_release();
  v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>, MEMORY[0x1E0CE41B8]);
  v29[0] = v21;
  v29[1] = v22;
  v23 = MEMORY[0x18D75FFDC](v20, v10, v29);
  static ViewBuilder.buildExpression<A>(_:)(v14, v10, v23);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v14, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v10, v28);
  return ((uint64_t (*)(char *, uint64_t))v24)(v18, v10);
}

uint64_t EditMenuModifier.editMenuGesture.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
  Gesture.eventFilter<A>(forType:_:)();
  v10 = v12;
  v11 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #2 in EditMenuModifier.editMenuGesture.getter;
  *(_QWORD *)(v8 + 24) = v7;
  type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<()>, TapGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>, MEMORY[0x1E0CE2E88]);
  Gesture.onEnded(_:)();
  swift_release();
  return swift_release();
}

BOOL closure #1 in EditMenuModifier.editMenuGesture.getter(uint64_t a1)
{
  return *(_BYTE *)(a1 + 104) == 0;
}

uint64_t closure #2 in EditMenuModifier.editMenuGesture.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 17) & 1) != 0)
  {
    outlined copy of StateOrBinding<Bool>(v2, v1, v3, 1);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    v4 = v2;
    v5 = v1;
    v6 = v3;
    v7 = 1;
  }
  else
  {
    if (v1)
    {
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      v4 = v2;
      v5 = v1;
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = 0;
    }
    v6 = v3;
    v7 = 0;
  }
  return outlined consume of StateOrBinding<Bool>(v4, v5, v6, v7);
}

uint64_t static EditMenuModifierCore._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  char v14;
  uint64_t v16;
  int OffsetAttribute2;
  id v18;
  uint64_t v19;
  _QWORD v20[3];
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  ValueMetadata *v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[56];
  uint64_t v34;
  int v35;
  char v36;
  int v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[56];
  uint64_t v41;
  int v42;
  char v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = a2[3];
  v47 = a2[2];
  v48 = v11;
  v49 = a2[4];
  v50 = *((_DWORD *)a2 + 20);
  v12 = a2[1];
  v45 = *a2;
  v46 = v12;
  v26 = DWORD2(v11);
  v25 = v11;
  v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(_QWORD *)&v38 = v25;
  DWORD2(v38) = v26;
  v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v13 & 1) != 0 || (v14 & 1) != 0)
  {
    v24 = a6;
    outlined retain of _ViewInputs((uint64_t)&v45);
    lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v45);
    v21 = v38;
    UniqueID.init()();
    v20[2] = v38;
    closure #1 in static EditMenuModifierCore._makeView(modifier:inputs:body:)((uint64_t)&v45, v13 & 1, v38, a3);
    LODWORD(v38) = v10;
    type metadata accessor for EditMenuModifierCore(255, a4, a5, v16);
    type metadata accessor for _GraphValue();
    v23 = v13;
    _GraphValue.value.getter();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_OWORD *)&v33[16] = v48;
    *(_OWORD *)&v33[32] = v49;
    *(_DWORD *)&v33[48] = v50;
    v31 = v45;
    v32 = v46;
    *(_OWORD *)v33 = v47;
    v18 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v31, 1, (uint64_t)&v38);
    v22 = v20;
    *(_QWORD *)&v31 = v38;
    DWORD2(v31) = DWORD2(v38);
    *(_QWORD *)&v32 = v39;
    DWORD2(v32) = DWORD2(v39);
    *(_QWORD *)v33 = *(_QWORD *)v40;
    *(_OWORD *)&v33[8] = *(_OWORD *)&v40[8];
    *(_OWORD *)&v33[24] = *(_OWORD *)&v40[24];
    *(_OWORD *)&v33[40] = *(_OWORD *)&v40[40];
    v34 = v41;
    v35 = v42;
    v36 = v43;
    v37 = v44;
    MEMORY[0x1E0C80A78](v18, v19);
    v27 = &type metadata for AllPlatformItemListFlags;
    v28 = a4;
    v29 = &protocol witness table for AllPlatformItemListFlags;
    v30 = a5;
    type metadata accessor for PlatformItemListGenerator();
  }
  *(_OWORD *)v40 = v47;
  *(_OWORD *)&v40[16] = v48;
  *(_OWORD *)&v40[32] = v49;
  *(_DWORD *)&v40[48] = v50;
  v38 = v45;
  v39 = v46;
  return ((uint64_t (*)(void))a3)();
}

uint64_t closure #1 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, __int128 *))
{
  __int128 v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[32];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)v21 = v6;
  *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + 64);
  v22 = *(_DWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 16);
  v19 = *(_OWORD *)a1;
  *(_OWORD *)v20 = v7;
  if ((a2 & 1) != 0)
  {
    v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v16[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v17 = v9;
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 64);
    v18 = *(_DWORD *)(a1 + 80);
    v10 = *(_OWORD *)(a1 + 16);
    v15 = *(_OWORD *)a1;
    *(_OWORD *)v16 = v10;
    outlined retain of _ViewInputs(a1);
    v11 = _ViewInputs.transform.getter();
    v12 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v16[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v17 = v12;
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 64);
    v18 = *(_DWORD *)(a1 + 80);
    *(_OWORD *)v16 = *(_OWORD *)(a1 + 16);
    LODWORD(v15) = v11;
    DWORD1(v15) = _ViewInputs.position.getter();
    *((_QWORD *)&v15 + 1) = a3;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
  }
  else
  {
    outlined retain of _ViewInputs(a1);
  }
  *(_QWORD *)&v15 = v19;
  DWORD2(v15) = DWORD2(v19);
  *(_QWORD *)v16 = *(_QWORD *)v20;
  *(_OWORD *)&v16[8] = *(_OWORD *)&v20[8];
  *(_QWORD *)&v16[24] = *(_QWORD *)&v20[24];
  *(_QWORD *)v17 = *(_QWORD *)v21;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v21[8];
  *(_QWORD *)&v17[24] = *(_QWORD *)&v21[24];
  v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  a4(v13, &v15);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for EditMenuModifierCore(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 44);
  v12[2] = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int OffsetAttribute2;

  closure #1 in EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(1, a2, a3, a1);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v11 = _ViewOutputs.viewResponders()();
  swift_bridgeObjectRelease();
  v9 = _ViewInputs.animatedPosition()();
  v8 = _ViewInputs.transform.getter();
  v7 = _ViewInputs.animatedSize()();
  v6 = _ViewInputs.containerPosition.getter();
  swift_getKeyPath();
  v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_release();
  *(_DWORD *)a4 = OffsetAttribute2;
  *(_DWORD *)(a4 + 4) = v11;
  *(_DWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 12) = v8;
  *(_DWORD *)(a4 + 16) = v7;
  *(_DWORD *)(a4 + 20) = v6;
  *(_DWORD *)(a4 + 24) = v4;
  *(_QWORD *)(a4 + 32) = a1;
  return result;
}

uint64_t implicit closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  _QWORD v8[2];
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8[0] = a1;
  v8[1] = a2;
  v10 = type metadata accessor for EditMenuTransform(0, a3, a4, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuTransform<A>, v10);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EditMenuModifierCore<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static EditMenuModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EditMenuModifierCore<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifierCore<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t (*EditMenuTransform.value.getter(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Value;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*result)(uint64_t *);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v27 = a3;
  v28 = a4;
  v6 = type metadata accessor for EditMenuModifierCore(0, a3, a4, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v24 - v9;
  v25 = HIDWORD(a2);
  v26 = HIDWORD(a1);
  AnchorGeometry.init(position:size:transform:)();
  v11 = v29;
  HIDWORD(v24) = v30;
  Value = AGGraphGetValue();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v10, Value, v6);
  v14 = &v10[*(int *)(v6 + 44)];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = v14[16];
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_retain();
  swift_retain();
  v18(v10, v6);
  v29 = v16;
  v30 = v15;
  v31 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v32);
  swift_release();
  swift_release();
  if (v32 == 1)
  {
    v19 = AGGraphGetValue();
    v13(v10, v19, v6);
    swift_retain();
    v18(v10, v6);
  }
  type metadata accessor for CGRect(0);
  Anchor.Source.init<A>(_:)();
  v29 = v11;
  LODWORD(v30) = HIDWORD(v24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v20 = Anchor.Source.prepare(geometry:)();
  swift_release();
  v21 = swift_allocObject();
  v22 = v28;
  *(_QWORD *)(v21 + 16) = v27;
  *(_QWORD *)(v21 + 24) = v22;
  LODWORD(v22) = v26;
  *(_DWORD *)(v21 + 32) = a1;
  *(_DWORD *)(v21 + 36) = v22;
  LODWORD(v22) = v25;
  *(_DWORD *)(v21 + 40) = a2;
  *(_DWORD *)(v21 + 44) = v22;
  result = partial apply for closure #1 in EditMenuTransform.value.getter;
  *(_QWORD *)(v21 + 48) = v20;
  return result;
}

uint64_t closure #1 in EditMenuTransform.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v8 = type metadata accessor for EditMenuModifierCore(0, a5, a6, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v27 - v15;
  outlined consume of EditMenuPresentation?(*a1, a1[1], a1[2], a1[3]);
  Value = AGGraphGetValue();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v16, Value, v8);
  v19 = *((unsigned int *)v16 + 2);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v16, v8);
  v21 = AGGraphGetValue();
  v18(v12, v21, v8);
  v22 = &v12[*(int *)(v8 + 44)];
  v23 = *(_QWORD *)v22;
  v24 = *((_QWORD *)v22 + 1);
  v25 = v22[16];
  swift_retain();
  swift_retain();
  v20(v12, v8);
  *a1 = v19;
  a1[1] = 0;
  a1[2] = v23;
  a1[3] = v24;
  a1[4] = v25;
  a1[5] = a4;
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance EditMenuTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  unint64_t *v2;
  uint64_t (*v4)(uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = EditMenuTransform.value.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t closure #1 in EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v4 = a1 + 8;
  v8[2] = type metadata accessor for EditMenuModifierCore(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t closure #1 in EditMenuResponder.setPresentationState(to:)()
{
  AGGraphClearUpdate();
  closure #1 in closure #1 in EditMenuResponder.setPresentationState(to:)();
  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #1 in EditMenuResponder.setPresentationState(to:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_release();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    result = AGGraphGetWeakValue();
    if (result)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

Swift::Void __swiftcall EditMenuResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x756E654D74696465;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
}

uint64_t EditMenuResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for EditMenuResponder()
{
  return type metadata accessor for EditMenuResponder();
}

uint64_t sub_18763B724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v3 = type metadata accessor for ModifiedContent();
  v12[0] = v2;
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v4 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v12);
  v5 = type metadata accessor for ZStack();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v5);
  v8 = type metadata accessor for EditMenuModifier(255, v5, v6, v7);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v1;
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>, v8);
  return MEMORY[0x18D75FFDC](v4, v9, v11);
}

uint64_t sub_18763B824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v3 = type metadata accessor for ModifiedContent();
  v14[0] = v2;
  v14[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v4 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v14);
  v5 = type metadata accessor for ZStack();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v5);
  v8 = type metadata accessor for EditMenuModifier(255, v5, v6, v7);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>(255);
  v10 = type metadata accessor for ModifiedContent();
  v13[0] = v1;
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>, v8);
  v12[0] = MEMORY[0x18D75FFDC](v4, v9, v13);
  v12[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v10, v12);
}

void type metadata accessor for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>)
  {
    v2 = lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&unk_1E1AF60F0, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>);
  }
}

uint64_t sub_18763B9B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v3 = type metadata accessor for ModifiedContent();
  v10[0] = v2;
  v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v4 = MEMORY[0x1E0CE2E70];
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v10);
  type metadata accessor for SelectionEditMenuModifier(255, v3, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = &protocol witness table for SelectionEditMenuModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v7, v9);
}

uint64_t destroy for ActiveEditMenu(uint64_t a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for ActiveEditMenu(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(void **)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ActiveEditMenu(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ActiveEditMenu(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveEditMenu(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveEditMenu(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActiveEditMenu()
{
  return &type metadata for ActiveEditMenu;
}

uint64_t destroy for EditMenuPresentation()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for EditMenuPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EditMenuPresentation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EditMenuPresentation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EditMenuPresentation()
{
  return &type metadata for EditMenuPresentation;
}

void *type metadata accessor for ClientHandlesEditMenuTrigger()
{
  return &unk_1E1AF60F0;
}

uint64_t type metadata completion function for EditMenuModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for EditMenuModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 24) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *((unsigned __int8 *)a2 + 17);
    if (v11 >= 2)
      v11 = *(_DWORD *)a2 + 2;
    if (v11 == 1)
    {
      v12 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v12;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_retain();
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = a2[1];
    }
    swift_retain();
    *(_BYTE *)(v4 + 17) = v13;
    v14 = (_DWORD *)((v4 + 21) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v14 + v7 + 4) & ~v7, ((unint64_t)v15 + v7 + 4) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for EditMenuModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;

  v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
    swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2)
    v6 = *(_DWORD *)a2 + 2;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  swift_retain();
  *(_BYTE *)(a1 + 17) = v8;
  v9 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))(((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithCopy for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
      swift_release();
    swift_release();
    v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  v8 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t initializeWithTake for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  char v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a2 + 17);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 17) = v5;
  v6 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  char v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
      swift_release();
    swift_release();
    v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 17) = v8;
  }
  v9 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for EditMenuModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 17);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18763C4B4 + 4 * byte_187C46910[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for EditMenuModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for ProvidesEditMenuInteraction()
{
  return &type metadata for ProvidesEditMenuInteraction;
}

__n128 protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance EditMenuPresentation.Key(uint64_t *a1, void (*a2)(__int128 *__return_ptr))
{
  uint64_t v4;
  unsigned __int8 v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[3];
  if (!v4
    || (v5 = *((_BYTE *)a1 + 32),
        *(_QWORD *)&v11 = a1[2],
        *((_QWORD *)&v11 + 1) = v4,
        v12.n128_u8[0] = v5,
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]), MEMORY[0x18D75B9C8](&v15), (v15 & 1) == 0))
  {
    a2(&v11);
    v9 = v12;
    v10 = v11;
    v7 = v13;
    v8 = v14;
    outlined consume of EditMenuPresentation?(*a1, a1[1], a1[2], a1[3]);
    result = v9;
    *(_OWORD *)a1 = v10;
    *((__n128 *)a1 + 1) = v9;
    a1[4] = v7;
    a1[5] = v8;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActiveEditMenu()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ActiveEditMenu()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActiveEditMenu()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance ActiveEditMenuKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 40) = xmmword_187BFE310;
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ActiveEditMenuKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = (void *)a1[5];
  v4 = *a2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = (void *)a2[5];
  if (v3 == (void *)1)
  {
    if (v8 == (void *)1)
      return 1;
    goto LABEL_5;
  }
  if (v8 == (void *)1)
  {
LABEL_5:
    v13 = a1[4];
    v14 = a1[2];
    v10 = a2[1];
    v11 = *a1;
    v12 = a1[1];
    outlined copy of ActiveEditMenu?(*a1, v12, v14, v2, v13, v3);
    outlined copy of ActiveEditMenu?(v4, v10, v5, v6, v7, v8);
    outlined consume of ActiveEditMenu?(v11, v12, v14, v2, v13, v3);
    outlined consume of ActiveEditMenu?(v4, v10, v5, v6, v7, v8);
    return 0;
  }
  return *a1 == (_DWORD)v4;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesEditMenuInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesEditMenuInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ClientHandlesEditMenuTrigger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ClientHandlesEditMenuTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionEditMenuModifier<A>()
{
  return &protocol witness table for SelectionEditMenuModifier<A>;
}

unint64_t lazy protocol witness table accessor for type ActiveEditMenu and conformance ActiveEditMenu()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActiveEditMenu and conformance ActiveEditMenu;
  if (!lazy protocol witness table cache variable for type ActiveEditMenu and conformance ActiveEditMenu)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActiveEditMenu, &type metadata for ActiveEditMenu);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActiveEditMenu and conformance ActiveEditMenu);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ClientHandlesEditMenuTrigger()
{
  return &protocol witness table for ClientHandlesEditMenuTrigger;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in EditMenuModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ProvidesEditMenuInteraction()
{
  return &protocol witness table for ProvidesEditMenuInteraction;
}

uint64_t type metadata accessor for EditMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditMenuModifierCore);
}

void type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>)
  {
    type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>, MEMORY[0x1E0CE2260]);
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>);
  }
}

void type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>)
  {
    type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<()>, TapGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for _EndedGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>);
  }
}

void type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<()>, TapGesture>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    lazy protocol witness table accessor for type EventFilter<()> and conformance EventFilter<A>();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<()>, TapGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type EventFilter<()> and conformance EventFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventFilter<()> and conformance EventFilter<A>;
  if (!lazy protocol witness table cache variable for type EventFilter<()> and conformance EventFilter<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1180], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventFilter<()> and conformance EventFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DeferTriggerPredicate and conformance DeferTriggerPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeferTriggerPredicate and conformance DeferTriggerPredicate;
  if (!lazy protocol witness table cache variable for type DeferTriggerPredicate and conformance DeferTriggerPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DeferTriggerPredicate, &unk_1E1AD6E50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeferTriggerPredicate and conformance DeferTriggerPredicate);
  }
  return result;
}

uint64_t partial apply for closure #1 in EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in EditMenuModifier.body(content:)(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t partial apply for closure #2 in EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in EditMenuModifier.body(content:)(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_18763CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for EditMenuModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(unsigned __int8 *)(v8 + 16), *(_BYTE *)(v8 + 17));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 40), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in EditMenuModifier.editMenuGesture.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EditMenuModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  return closure #2 in EditMenuModifier.editMenuGesture.getter(v4 + ((v5 + 32) & ~v5));
}

uint64_t specialized static DeferTriggerPredicate.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    return 1;
  }
  lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t type metadata accessor for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectionEditMenuModifier.Child);
}

ValueMetadata *type metadata accessor for ActiveEditMenuKey()
{
  return &type metadata for ActiveEditMenuKey;
}

uint64_t initializeWithCopy for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectionEditMenuModifier.Child(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 100))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelectionEditMenuModifier.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 100) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 100) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HasEditMenuKey()
{
  return &type metadata for HasEditMenuKey;
}

ValueMetadata *type metadata accessor for EditMenuPresentation.Key()
{
  return &type metadata for EditMenuPresentation.Key;
}

uint64_t type metadata completion function for EditMenuModifierCore()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EditMenuModifierCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7 || v7 != 0 || ((v6 + ((v5 + 12) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v11 = a1;
    v12 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v5 + 4) & ~v5;
    v15 = ((unint64_t)v13 + v5 + 4) & ~v5;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v16(v14, v15, v3);
    v17 = (v6 + v14) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v6 + v15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    swift_retain();
  }
  swift_retain();
  return v11;
}

uint64_t destroy for EditMenuModifierCore(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 11;
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for EditMenuModifierCore(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = (v9 + 4 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v10) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for EditMenuModifierCore(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 4 + (v6 & 0xFFFFFFFFFFFFFFFCLL)) & ~v8;
  v10 = (v8 + 4 + (v5 & 0xFFFFFFFFFFFFFFFCLL)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_retain();
  swift_release();
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

_QWORD *initializeWithTake for EditMenuModifierCore(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 4) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 4) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v13;
  return a1;
}

_QWORD *assignWithTake for EditMenuModifierCore(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  swift_release();
  v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v6 + v8 + 4) & ~v8;
  v10 = (v8 + 4 + (v5 & 0xFFFFFFFFFFFFFFFCLL)) & ~v8;
  (*(void (**)(uint64_t, unint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release();
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_release();
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EditMenuModifierCore(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL)
                                                                    + v7
                                                                    + 4) & ~v7);
    }
    else
    {
      v14 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 12) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18763D9E4 + 4 * byte_187C4691E[v12]))();
  }
}

void storeEnumTagSinglePayload for EditMenuModifierCore(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18763DBAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18763DC1CLL);
}

void sub_18763DBB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18763DBBCLL);
  JUMPOUT(0x18763DC1CLL);
}

void sub_18763DBCC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18763DC1CLL);
}

void sub_18763DBD4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18763DC1CLL);
}

void sub_18763DBDC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x18763DC18);
      JUMPOUT(0x18763DC14);
    }
    JUMPOUT(0x18763DBE8);
  }
  JUMPOUT(0x18763DC1CLL);
}

void *type metadata accessor for DeferTriggerPredicate()
{
  return &unk_1E1AD6E50;
}

uint64_t getEnumTagSinglePayload for EditMenuPresentation.Kind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EditMenuPresentation.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditMenuPresentation.Kind()
{
  return &type metadata for EditMenuPresentation.Kind;
}

void sub_18763DCF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for EditMenuModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuModifier<A>, v6);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EditMenuModifierCore(255, v4, v5, v7);
  type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type DeferTriggerPredicate and conformance DeferTriggerPredicate();
  type metadata accessor for StaticIf();
}

uint64_t sub_18763DDB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[14];

  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3);
  v10[1] = &protocol witness table for EditMenuModifierCore<A>;
  v6 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v10);
  v9[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>> and conformance AddGestureModifier<A>, v2, MEMORY[0x1E0CE41B8]);
  v8[0] = v9[0];
  v8[1] = MEMORY[0x18D75FFDC](v6, v4, v9);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8);
}

_UNKNOWN **base witness table accessor for ViewModifier in EditMenuModifierCore<A>()
{
  return &protocol witness table for EditMenuModifierCore<A>;
}

void base witness table accessor for _AttributeBody in SelectionEditMenuModifier<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type EditMenuResponderFilter and conformance EditMenuResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EditMenuResponderFilter and conformance EditMenuResponderFilter;
  if (!lazy protocol witness table cache variable for type EditMenuResponderFilter and conformance EditMenuResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMenuResponderFilter, &unk_1E1AE1210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditMenuResponderFilter and conformance EditMenuResponderFilter);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)()
{
  uint64_t *v0;

  return implicit closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t type metadata accessor for EditMenuTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditMenuTransform);
}

uint64_t sub_18763DF64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18763DF88()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelectionEditMenuModifier.Child.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SelectionEditMenuModifier.Child.value.getter(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void **outlined retain of SelectionEditMenuModifier<A>.Child(void **a1)
{
  void *v2;
  id v3;

  v2 = *a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t specialized SelectionEditMenuModifier.Child.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SelectionEditMenuModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  return *(_QWORD *)AGGraphGetValue();
}

void *type metadata accessor for EditMenuResponderFilter()
{
  return &unk_1E1AE1210;
}

void base witness table accessor for _AttributeBody in EditMenuTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18763E09C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditMenuTransform.value.getter(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in EditMenuTransform.value.getter(a1, v1[4], v1[5], v1[6], v1[2], v1[3]);
}

void Gesture.dragRevealsScrollableContent(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18763E0E8()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for ScrollViewDragAutoScrollWriter(255, AssociatedTypeWitness, v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewDragAutoScrollWriter<A>, v5);
  v3 = type metadata accessor for ModifierGesture();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v3);
}

uint64_t type metadata accessor for ScrollViewDragAutoScrollWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollViewDragAutoScrollWriter);
}

uint64_t storeEnumTagSinglePayload for ScrollViewDragAutoScrollWriter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18763E1D0 + 4 * byte_187C471C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18763E204 + 4 * byte_187C471C0[v4]))();
}

uint64_t sub_18763E204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18763E20C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18763E214);
  return result;
}

uint64_t sub_18763E220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18763E228);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18763E22C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18763E234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

double static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)@<D0>(__int128 *a1@<X1>, void (*a2)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;

  v4 = a1[3];
  v14 = a1[2];
  v15 = v4;
  v5 = a1[5];
  v16 = a1[4];
  v17 = v5;
  v6 = a1[1];
  v12 = *a1;
  v13 = v6;
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_DWORD *)a1 + 26);
  v20 = *(__int128 *)((char *)a1 + 108);
  v18 = v7;
  v19 = v8;
  a2(&v21, &v12);
  v12 = v21;
  LODWORD(v13) = v22;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.phase.getter();
  *(_QWORD *)&v12 = v7;
  DWORD2(v12) = v8;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&v21 + 1);
  v10 = v22;
  result = *(double *)&v21;
  *(_QWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v12[3];
  _BYTE v13[16];
  uint64_t IsActive;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  type metadata accessor for ScrollViewDragAutoScrollWriter(255, a3, a3, a4);
  type metadata accessor for _GraphValue();
  v6 = MEMORY[0x1E0CE1470];
  _GraphValue.subscript.getter();
  type metadata accessor for Bool?(0, &lazy cache variable for type metadata for _GraphValue<Bool>, (uint64_t (*)(_QWORD, _QWORD))v6);
  v12[0] = _GraphValue.value.getter();
  v12[1] = a2;
  IsActive = type metadata accessor for ScrollViewDragAutoScrollWriter.IsActive(0, a3, v7, v8);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewDragAutoScrollWriter<A>.IsActive, IsActive);
  type metadata accessor for Bool?(0, &lazy cache variable for type metadata for Attribute<Bool>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v13, IsActive, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[2];
}

uint64_t closure #1 in implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ScrollViewDragAutoScrollWriter(0, a2, a3, a4);
  v5 = MEMORY[0x1E0DEAFA0];
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t ScrollViewDragAutoScrollWriter.IsActive.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for GesturePhase();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - v3;
  v5 = 0;
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    SequenceEvents.phase.getter((uint64_t)v4);
    v5 = GesturePhase.isActive.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  return v5 & 1;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewDragAutoScrollWriter<A>.IsActive@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ScrollViewDragAutoScrollWriter.IsActive.value.getter();
  *a1 = result & 1;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance ScrollViewDragAutoScrollWriter<A>@<D0>(__int128 *a1@<X1>, void (*a2)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a3@<X8>)
{
  return static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(*(unsigned int *)(v4 + 24), *(_DWORD *)(v4 + 28), *(_QWORD *)(v4 + 16), a4);
}

uint64_t partial apply for closure #1 in implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), a3, a4);
}

uint64_t type metadata accessor for ScrollViewDragAutoScrollWriter.IsActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollViewDragAutoScrollWriter.IsActive);
}

void base witness table accessor for _AttributeBody in ScrollViewDragAutoScrollWriter<A>.IsActive()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3);
}

{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[32];
  int v20;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v18[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v19 = v4;
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 64);
  v20 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)a2;
  *(_OWORD *)v18 = v5;
  outlined retain of _ViewInputs(a2);
  AnyInterfaceIdiom.init<A>(_:)();
  v16 = v8;
  PropertyList.subscript.setter();
  *(_QWORD *)&v8 = v17;
  DWORD2(v8) = DWORD2(v17);
  v9 = *(_QWORD *)v18;
  v10 = *(_OWORD *)&v18[8];
  v11 = *(_QWORD *)&v18[24];
  v12 = *(_QWORD *)v19;
  v13 = *(_OWORD *)&v19[8];
  v14 = *(_QWORD *)&v19[24];
  v15 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  a3(v6, &v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  v21 = v4;
  *(_OWORD *)&v22[16] = v20;
  *(_OWORD *)v23 = v5;
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)a2;
  v18 = v4;
  v19 = v6;
  *(_OWORD *)v22 = v6;
  v24 = *(_DWORD *)(a2 + 80);
  v10 = v7;
  outlined retain of _ViewInputs(a2);
  _GraphInputs.environment.getter();
  _GraphInputs.interfaceIdiom.getter();
  v18 = v10;
  AnyInterfaceIdiom.accepts<A>(_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  *(_QWORD *)&v10 = v21;
  DWORD2(v10) = DWORD2(v21);
  v11 = *(_QWORD *)v22;
  v12 = *(_OWORD *)&v22[8];
  v13 = *((_QWORD *)&v20 + 1);
  v14 = *(_QWORD *)v23;
  v15 = *(_OWORD *)&v23[8];
  v16 = *(_QWORD *)&v23[24];
  v17 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v8[12];
  int v9;
  _BYTE v10[32];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 16);
  v19 = *(_OWORD *)a2;
  v20 = v4;
  v5 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v21;
  *(_OWORD *)v17 = v5;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v15 = v19;
  *(_OWORD *)v16 = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<RootEnvironmentModifier>, (uint64_t)&type metadata for RootEnvironmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v9 = 0;
  *(_OWORD *)v10 = 0uLL;
  *(_OWORD *)&v10[16] = 3uLL;
  v11 = 0;
  LOBYTE(v12) = 0;
  *(_DWORD *)v8 = _GraphValue.value.getter();
  *(_QWORD *)&v8[4] = _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of RootEnvironmentModifier.Child((uint64_t)v8);
  _GraphInputs.environment.setter();
  *(_QWORD *)v8 = v15;
  *(_DWORD *)&v8[8] = DWORD2(v15);
  *(_QWORD *)v10 = *(_QWORD *)v16;
  *(_OWORD *)&v10[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v10[24] = *(_QWORD *)&v16[24];
  v11 = *(_QWORD *)v17;
  v12 = *(_OWORD *)&v17[8];
  v13 = *(_QWORD *)&v17[24];
  v14 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  a3(v6, v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t))
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;

  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v24[16] = v8;
  v25 = *(_DWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)a2;
  *(_OWORD *)v23 = v9;
  *(_OWORD *)&v23[16] = v7;
  v10 = outlined retain of _ViewInputs(a2);
  a5(v10);
  static EnvironmentModifier._makeInputs(modifier:inputs:)();
  v13 = v22;
  v14 = DWORD2(v22);
  v15 = *(_QWORD *)v23;
  v16 = *(_OWORD *)&v23[8];
  v17 = *(_QWORD *)&v23[24];
  v18 = *(_QWORD *)v24;
  v19 = *(_OWORD *)&v24[8];
  v20 = *(_QWORD *)&v24[24];
  v21 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, __int128 *))
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;

  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = v8;
  v24 = *(_DWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  *(_OWORD *)v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewInputs(a2);
  a5(&v12, &v21);
  v12 = v21;
  v13 = DWORD2(v21);
  v14 = *(_QWORD *)v22;
  v15 = *(_OWORD *)&v22[8];
  v16 = *(_QWORD *)&v22[24];
  v17 = *(_QWORD *)v23;
  v18 = *(_OWORD *)&v23[8];
  v19 = *(_QWORD *)&v23[24];
  v20 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (**a5)(uint64_t *, __int128 *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(uint64_t *, __int128 *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v26[32];
  _BYTE v27[32];
  int v28;

  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v27[16] = v11;
  v28 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v25 = *(_OWORD *)a2;
  *(_OWORD *)v26 = v12;
  *(_OWORD *)&v26[16] = v10;
  LODWORD(v16) = a1;
  v13 = *a5;
  outlined retain of _ViewInputs(a2);
  v13(&v16, &v25, a6, a7);
  v16 = v25;
  v17 = DWORD2(v25);
  v18 = *(_QWORD *)v26;
  v19 = *(_OWORD *)&v26[8];
  v20 = *(_QWORD *)&v26[24];
  v21 = *(_QWORD *)v27;
  v22 = *(_OWORD *)&v27[8];
  v23 = *(_QWORD *)&v27[24];
  v24 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  a3(v14, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (**a5)(uint64_t *, __int128 *, uint64_t, uint64_t), uint64_t (*a6)(_QWORD), uint64_t a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(uint64_t *, __int128 *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  _BYTE v27[32];
  _BYTE v28[32];
  int v29;

  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v28 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v28[16] = v11;
  v29 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  *(_OWORD *)v27 = v12;
  *(_OWORD *)&v27[16] = v10;
  LODWORD(v17) = a1;
  v13 = *a5;
  outlined retain of _ViewInputs(a2);
  v14 = a6(0);
  v13(&v17, &v26, v14, a7);
  v17 = v26;
  v18 = DWORD2(v26);
  v19 = *(_QWORD *)v27;
  v20 = *(_OWORD *)&v27[8];
  v21 = *(_QWORD *)&v27[24];
  v22 = *(_QWORD *)v28;
  v23 = *(_OWORD *)&v28[8];
  v24 = *(_QWORD *)&v28[24];
  v25 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v3 = *(_QWORD *)(a2 + 72);
  v4 = *(_BYTE *)(a2 + 80);
  v5 = *(_DWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  v26 = *(_OWORD *)(a2 + 48);
  v27 = v8;
  v28 = v4;
  v9 = *(_OWORD *)(a2 + 16);
  v23 = *(_OWORD *)a2;
  v24 = v9;
  v25 = v7;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTargetModifier>, (uint64_t)&type metadata for ScrollTargetModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphInputs.scrollTargetRole.setter();
  _GraphInputs.scrollTargetRemovePreference.setter();
  v13 = v23;
  v14 = DWORD2(v23);
  v15 = v24;
  v16 = v25 | 0x80000000000;
  v17 = *((_QWORD *)&v25 + 1);
  v18 = v26;
  v19 = v6;
  v20 = v5;
  v21 = v3;
  v22 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StackDepthModifier>, (uint64_t)&type metadata for StackDepthModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
  _GraphInputs.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>, (uint64_t)&type metadata for NavigationPresentationAdaptorModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  result = PropertyList.subscript.getter();
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    PropertyList.subscript.setter();
    v9 = v18;
    v10 = DWORD2(v18);
    v11 = *(_QWORD *)v19;
    v12 = *(_OWORD *)&v19[8];
    v13 = *(_QWORD *)&v19[24];
    v14 = v20;
    v15 = v21;
    v16 = *((_QWORD *)&v21 + 1);
    v17 = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v8 = swift_bridgeObjectRetain();
    a3(v8, &v9);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>, (uint64_t)&type metadata for ObservableDocumentBoxModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>, (uint64_t)&type metadata for _ReclaimForEachElementsViewModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *))
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v8[12];
  int v9;
  _BYTE v10[32];
  __int128 v11;
  int v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _BYTE v16[32];
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 16);
  v20 = *(_OWORD *)a2;
  v21 = v4;
  v5 = *(_OWORD *)(a2 + 48);
  v22 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v22;
  v17 = v5;
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 80);
  v15 = v20;
  *(_OWORD *)v16 = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<RootEnvironmentModifier>, (uint64_t)&type metadata for RootEnvironmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v9 = 0;
  *(_OWORD *)v10 = 0uLL;
  *(_OWORD *)&v10[16] = 3uLL;
  *(_QWORD *)&v11 = 0;
  BYTE8(v11) = 0;
  *(_DWORD *)v8 = _GraphValue.value.getter();
  *(_QWORD *)&v8[4] = _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of RootEnvironmentModifier.Child((uint64_t)v8);
  _GraphInputs.environment.setter();
  *(_QWORD *)v8 = v15;
  *(_DWORD *)&v8[8] = DWORD2(v15);
  *(_QWORD *)v10 = *(_QWORD *)v16;
  *(_OWORD *)&v10[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v10[24] = *(_QWORD *)&v16[24];
  v11 = v17;
  v12 = v18;
  v13 = *((_QWORD *)&v18 + 1);
  v14 = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v6 = swift_bridgeObjectRetain();
  a3(v6, v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t))
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  char v26;

  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  v24 = *(_OWORD *)(a2 + 48);
  v25 = v8;
  v26 = *(_BYTE *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)a2;
  *(_OWORD *)v23 = v9;
  *(_OWORD *)&v23[16] = v7;
  v10 = outlined retain of _ViewListInputs(a2);
  a5(v10);
  static EnvironmentModifier._makeInputs(modifier:inputs:)();
  v13 = v22;
  v14 = DWORD2(v22);
  v15 = *(_QWORD *)v23;
  v16 = *(_OWORD *)&v23[8];
  v17 = *(_QWORD *)&v23[24];
  v18 = v24;
  v19 = v25;
  v20 = *((_QWORD *)&v25 + 1);
  v21 = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v11 = swift_bridgeObjectRetain();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  v21 = v4;
  *(_OWORD *)&v22[16] = v20;
  v23 = v5;
  v24 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)a2;
  v18 = v4;
  v19 = v6;
  *(_OWORD *)v22 = v6;
  v25 = *(_BYTE *)(a2 + 80);
  v10 = v7;
  outlined retain of _ViewListInputs(a2);
  _GraphInputs.environment.getter();
  _GraphInputs.interfaceIdiom.getter();
  v18 = v10;
  AnyInterfaceIdiom.accepts<A>(_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  *(_QWORD *)&v10 = v21;
  DWORD2(v10) = DWORD2(v21);
  v11 = *(_QWORD *)v22;
  v12 = *(_OWORD *)&v22[8];
  v13 = *((_QWORD *)&v20 + 1);
  v14 = v23;
  v15 = v24;
  v16 = *((_QWORD *)&v24 + 1);
  v17 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  __int128 v19;
  __int128 v20;
  char v21;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v18[16] = *(_OWORD *)(a2 + 32);
  v19 = v4;
  v20 = *(_OWORD *)(a2 + 64);
  v21 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)a2;
  *(_OWORD *)v18 = v5;
  outlined retain of _ViewListInputs(a2);
  AnyInterfaceIdiom.init<A>(_:)();
  v16 = v8;
  PropertyList.subscript.setter();
  *(_QWORD *)&v8 = v17;
  DWORD2(v8) = DWORD2(v17);
  v9 = *(_QWORD *)v18;
  v10 = *(_OWORD *)&v18[8];
  v11 = *(_QWORD *)&v18[24];
  v12 = v19;
  v13 = v20;
  v14 = *((_QWORD *)&v20 + 1);
  v15 = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v6 = swift_bridgeObjectRetain();
  a3(v6, &v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, __int128 *))
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;

  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = v8;
  v25 = *(_BYTE *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  *(_OWORD *)v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewListInputs(a2);
  a5(&v12, &v21);
  v12 = v21;
  v13 = DWORD2(v21);
  v14 = *(_QWORD *)v22;
  v15 = *(_OWORD *)&v22[8];
  v16 = *(_QWORD *)&v22[24];
  v17 = v23;
  v18 = v24;
  v19 = *((_QWORD *)&v24 + 1);
  v20 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (**a5)(uint64_t *, __int128 *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(uint64_t *, __int128 *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  char v29;

  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  v27 = *(_OWORD *)(a2 + 48);
  v28 = v11;
  v29 = *(_BYTE *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v25 = *(_OWORD *)a2;
  *(_OWORD *)v26 = v12;
  *(_OWORD *)&v26[16] = v10;
  LODWORD(v16) = a1;
  v13 = *a5;
  outlined retain of _ViewListInputs(a2);
  v13(&v16, &v25, a6, a7);
  v16 = v25;
  v17 = DWORD2(v25);
  v18 = *(_QWORD *)v26;
  v19 = *(_OWORD *)&v26[8];
  v20 = *(_QWORD *)&v26[24];
  v21 = v27;
  v22 = v28;
  v23 = *((_QWORD *)&v28 + 1);
  v24 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v14 = swift_bridgeObjectRetain();
  a3(v14, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (**a5)(uint64_t *, __int128 *, uint64_t, uint64_t), uint64_t (*a6)(_QWORD), uint64_t a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(uint64_t *, __int128 *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  char v30;

  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  v28 = *(_OWORD *)(a2 + 48);
  v29 = v11;
  v30 = *(_BYTE *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v26 = *(_OWORD *)a2;
  *(_OWORD *)v27 = v12;
  *(_OWORD *)&v27[16] = v10;
  LODWORD(v17) = a1;
  v13 = *a5;
  outlined retain of _ViewListInputs(a2);
  v14 = a6(0);
  v13(&v17, &v26, v14, a7);
  v17 = v26;
  v18 = DWORD2(v26);
  v19 = *(_QWORD *)v27;
  v20 = *(_OWORD *)&v27[8];
  v21 = *(_QWORD *)&v27[24];
  v22 = v28;
  v23 = v29;
  v24 = *((_QWORD *)&v29 + 1);
  v25 = v30;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t View.scrollBounceBehavior(_:axes:)(_BYTE *a1, char a2, uint64_t a3)
{
  _BYTE v4[2];

  v4[0] = *a1;
  v4[1] = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for TransformScrollBounceBehavior);
}

uint64_t EnvironmentValues.scrollProperties.setter(int *a1)
{
  uint64_t v1;
  uint64_t v4;

  outlined init with copy of ScrollEnvironmentProperties(a1, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)a1);
}

uint64_t View.resetScrollEnvironment()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 3;
  return MEMORY[0x18D75B4AC](&v3, a1, &type metadata for ResetScrollEnvironmentModifier, a2);
}

uint64_t View.scrollContentPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char v5;

  v5 = 1;
  return View.contentMargins(_:_:for:)(a1, *(_QWORD *)&a4, 0, &v5, a2, a3);
}

void static ScrollIndicatorOptions.revealsInitially.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollClipDisabledBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ScrollEnvironmentPropertiesKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of ScrollEnvironmentProperties(&static ScrollEnvironmentPropertiesKey.defaultValue, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance TransformScrollIndicators()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TransformScrollIndicators()
{
  lazy protocol witness table accessor for type TransformScrollIndicators and conformance TransformScrollIndicators();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

SwiftUI::ScrollIndicatorOptions __swiftcall ScrollIndicatorOptions.init(rawValue:)(SwiftUI::ScrollIndicatorOptions rawValue)
{
  SwiftUI::ScrollIndicatorOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t ScrollIndicatorOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t View.scrollIndicators(_:options:axes:)(_BYTE *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  char v9;

  v5 = *a2;
  v7[0] = *a1;
  v8 = v5;
  v9 = a3;
  return MEMORY[0x18D75B4AC](v7, a4, &type metadata for TransformScrollIndicators, a5);
}

BOOL static HandGestureShortcutPaginationDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void HandGestureShortcutPaginationDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void *static HandGestureShortcutPaginationDirection.allCases.getter()
{
  return &outlined read-only object #0 of static HandGestureShortcutPaginationDirection.allCases.getter;
}

Swift::Int HandGestureShortcutPaginationDirection.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance HandGestureShortcutPaginationDirection(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HandGestureShortcutPaginationDirection;
}

void static ScrollInputBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollInputBehavior.enabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollInputBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ScrollInputBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ScrollInputKind.handGestureShortcut.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static ScrollInputKind.== infix(_:_:)()
{
  return 1;
}

void View.crownScrollingAxis(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t key path setter for EnvironmentValues.scrollProperties : EnvironmentValues(int *a1)
{
  int v2[52];

  outlined init with copy of ScrollEnvironmentProperties(a1, (uint64_t)v2);
  return EnvironmentValues.scrollProperties.setter(v2);
}

void View.handGestureShortcutPagination(direction:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.scrollInputBehavior(_:for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v4, a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v10, v11, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
}

uint64_t EnvironmentValues.verticalScrollIndicatorVisibility.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  _BYTE v5[208];

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = v5[96];
  result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.verticalScrollIndicatorVisibility.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  int v6[24];
  char v7;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v7 = v2;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.verticalScrollIndicatorVisibility.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 96);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((_BYTE *)v3 + 216) = v4;
  return EnvironmentValues.verticalScrollIndicatorVisibility.modify;
}

void EnvironmentValues.verticalScrollIndicatorVisibility.modify(uint64_t a1, char a2)
{
  EnvironmentValues.verticalScrollIndicatorVisibility.modify(a1, a2, (void (*)(char *))EnvironmentValues.verticalScrollIndicatorVisibility.setter);
}

uint64_t EnvironmentValues.horizontalScrollIndicatorVisibility.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  _BYTE v5[208];

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = v5[120];
  result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.horizontalScrollIndicatorVisibility.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  int v6[30];
  char v7;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v7 = v2;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.horizontalScrollIndicatorVisibility.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 120);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((_BYTE *)v3 + 216) = v4;
  return EnvironmentValues.horizontalScrollIndicatorVisibility.modify;
}

void EnvironmentValues.horizontalScrollIndicatorVisibility.modify(uint64_t a1, char a2)
{
  EnvironmentValues.verticalScrollIndicatorVisibility.modify(a1, a2, (void (*)(char *))EnvironmentValues.horizontalScrollIndicatorVisibility.setter);
}

uint64_t ScrollIndicatorsFlashModifier.seed.getter()
{
  unsigned int v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  return v1;
}

uint64_t ScrollIndicatorsFlashModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(unint64_t, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;

  v4 = v3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v57 = a3;
  v58 = v7;
  MEMORY[0x1E0C80A78](a1, a2);
  v49 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = MEMORY[0x1E0C80A78](v12, v9);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorsFlashModifier<A>, v13);
  v48 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v51 = type metadata accessor for ModifiedContent();
  v14 = *(_QWORD *)(a2 + 24);
  v15 = v6;
  v44 = v6;
  v46 = v14;
  v53 = type metadata accessor for _ValueActionModifier2();
  v54 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  v55 = v16;
  v56 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v50 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v52 = (char *)&v43 - v22;
  swift_getKeyPath();
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v23 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47(v23, v4, a2);
  v24 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v15;
  *(_QWORD *)(v25 + 24) = v14;
  v26 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v26(v25 + v24, v23, a2);
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v48);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  v62 = v64;
  v63 = v65;
  v28 = v49;
  v29 = v45;
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v49, v45, v44);
  v47(v23, v29, a2);
  v31 = swift_allocObject();
  v32 = v46;
  *(_QWORD *)(v31 + 16) = v30;
  *(_QWORD *)(v31 + 24) = v32;
  v26(v31 + v24, v23, a2);
  v33 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
  v61[0] = v27;
  v61[1] = v33;
  v34 = MEMORY[0x1E0CE2E70];
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v51, v61);
  v36 = v50;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v28, v30);
  swift_release();
  swift_release();
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v53);
  v60[0] = v35;
  v60[1] = v37;
  v59[0] = MEMORY[0x18D75FFDC](v34, v54, v60);
  v59[1] = MEMORY[0x1E0CE5EF8];
  v38 = v55;
  v39 = MEMORY[0x18D75FFDC](v34, v55, v59);
  v40 = (uint64_t)v52;
  static ViewBuilder.buildExpression<A>(_:)(v36, v38, v39);
  v41 = *(void (**)(char *, uint64_t))(v56 + 8);
  v41(v36, v38);
  static ViewBuilder.buildBlock<A>(_:)(v40, v38, v57);
  return ((uint64_t (*)(uint64_t, uint64_t))v41)(v40, v38);
}

uint64_t closure #1 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  BOOL v7;
  int v8;

  type metadata accessor for ScrollIndicatorsFlashModifier(0, a3, a4, a4);
  result = ScrollIndicatorsFlashModifier.seed.getter();
  v6 = *(_DWORD *)(a1 + 84);
  v7 = __CFADD__(v6, (_DWORD)result);
  v8 = v6 + result;
  if (v7)
    __break(1u);
  else
    *(_DWORD *)(a1 + 84) = v8;
  return result;
}

uint64_t closure #2 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ScrollIndicatorsFlashModifier(0, a2, a3, a4) + 36) + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  swift_retain();
  result = State.wrappedValue.getter();
  if (v5)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:)(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 104);
  if ((a2 & 1) != 0)
  {
    if ((v2 & 1) == 0)
      *(_QWORD *)(result + 104) = v2 | 1;
    v3 = *(_QWORD *)(result + 128);
    if ((v3 & 1) == 0)
    {
      v4 = v3 | 1;
LABEL_10:
      *(_QWORD *)(result + 128) = v4;
    }
  }
  else
  {
    if ((v2 & 1) != 0)
      *(_QWORD *)(result + 104) = v2 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(_QWORD *)(result + 128);
    if ((v5 & 1) != 0)
    {
      v4 = v5 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollIndicatorFlashOnAppearModifier@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *v1;
  KeyPath = swift_getKeyPath();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v3;
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:);
  a1[2] = result;
  return result;
}

uint64_t View.scrollIndicatorsFlash<A>(trigger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ScrollIndicatorsFlashModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  v20 = &v19[*(int *)(v14 + 36)];
  *(_DWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollIndicatorsFlashModifier);
}

uint64_t View.scrollIndicatorsFlash(onAppear:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &unk_1E1B06740, a3);
}

uint64_t View.scrollIndicatorsAlwaysOverlayContent(_:)(char a1)
{
  return View.scrollIndicatorsAlwaysOverlayContent(_:)(a1);
}

{
  swift_getKeyPath();
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1876426EC(int *a1)
{
  int v2[52];

  outlined init with copy of ScrollEnvironmentProperties(a1, (uint64_t)v2);
  return EnvironmentValues.scrollProperties.setter(v2);
}

uint64_t sub_187642720()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollIndicatorsAlwaysOverlayContent(_:)(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 82);
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    if ((*(_BYTE *)(result + 82) & 1) != 0)
      return result;
    v3 = v2 | 1;
  }
  else
  {
    if ((*(_BYTE *)(result + 82) & 1) == 0)
      return result;
    v3 = v2 & 0xFE;
  }
  *(_BYTE *)(result + 82) = v3;
  return result;
}

uint64_t View.scrollDisabled(_:)(char a1)
{
  return View.scrollIndicatorsAlwaysOverlayContent(_:)(a1);
}

uint64_t sub_187642770()
{
  return swift_deallocObject();
}

uint64_t ScrollView.scrollDisabled(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 36) + 40) = a1 ^ 1;
  return result;
}

uint64_t EnvironmentValues.isScrollEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[208];

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v1 = v3[0];
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  return v1;
}

uint64_t EnvironmentValues.isScrollEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  int v6[52];

  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  LOBYTE(v6[0]) = a1 & 1;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.isScrollEnabled.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *(_BYTE *)v3;
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((_BYTE *)v3 + 216) = v4;
  return EnvironmentValues.isScrollEnabled.modify;
}

void EnvironmentValues.isScrollEnabled.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  EnvironmentValues.isScrollEnabled.setter(*(_BYTE *)(*(_QWORD *)a1 + 216));
  free(v1);
}

void static ScrollClipDisabledBehavior.expandsVisibleRegion.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static ScrollClipDisabledBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t View.scrollClipDisabled(_:)(char a1)
{
  return View.scrollIndicatorsAlwaysOverlayContent(_:)(a1);
}

uint64_t sub_187642CD4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollClipDisabled(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 1) &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t View.scrollClipDisabled(_:behavior:)(char a1, char *a2)
{
  char v3;
  uint64_t v4;

  v3 = *a2;
  swift_getKeyPath();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 17) = v3;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_187642D9C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollClipDisabled(_:behavior:)(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 17);
  *(_BYTE *)(result + 1) &= ~*(_BYTE *)(v1 + 16) & 1;
  *(_BYTE *)(result + 2) = v2;
  return result;
}

uint64_t View.scrollDismissesKeyboard(_:)(char *a1)
{
  char v1;

  v1 = *a1;
  swift_getKeyPath();
  *(_BYTE *)(swift_allocObject() + 16) = v1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_187642E64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollDismissesKeyboard(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 3) = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t EnvironmentValues.scrollDismissesKeyboardMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  _BYTE v5[208];

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = v5[3];
  result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.scrollDismissesKeyboardMode.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  int v6[52];

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  HIBYTE(v6[0]) = v2;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.scrollDismissesKeyboardMode.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 3);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((_BYTE *)v3 + 216) = v4;
  return EnvironmentValues.scrollDismissesKeyboardMode.modify;
}

void EnvironmentValues.scrollDismissesKeyboardMode.modify(uint64_t a1, char a2)
{
  EnvironmentValues.verticalScrollIndicatorVisibility.modify(a1, a2, (void (*)(char *))EnvironmentValues.scrollDismissesKeyboardMode.setter);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransformScrollBounceBehavior(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransformScrollBounceBehavior(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior);
}

void protocol witness for ViewModifier.body(content:) in conformance TransformScrollBounceBehavior()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TransformScrollBounceBehavior()
{
  lazy protocol witness table accessor for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t EnvironmentValues.verticalScrollBounceBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  _BYTE v5[208];

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = v5[113];
  result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.verticalScrollBounceBehavior.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  int v6[28];
  char v7;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v7 = v2;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.verticalScrollBounceBehavior.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 113);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((_BYTE *)v3 + 216) = v4;
  return EnvironmentValues.verticalScrollBounceBehavior.modify;
}

void EnvironmentValues.verticalScrollBounceBehavior.modify(uint64_t a1, char a2)
{
  EnvironmentValues.verticalScrollIndicatorVisibility.modify(a1, a2, (void (*)(char *))EnvironmentValues.verticalScrollBounceBehavior.setter);
}

uint64_t EnvironmentValues.horizontalScrollBounceBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  _BYTE v5[208];

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = v5[137];
  result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.horizontalScrollBounceBehavior.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  int v6[34];
  char v7;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v7 = v2;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.horizontalScrollBounceBehavior.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 137);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((_BYTE *)v3 + 216) = v4;
  return EnvironmentValues.horizontalScrollBounceBehavior.modify;
}

void EnvironmentValues.horizontalScrollBounceBehavior.modify(uint64_t a1, char a2)
{
  EnvironmentValues.verticalScrollIndicatorVisibility.modify(a1, a2, (void (*)(char *))EnvironmentValues.horizontalScrollBounceBehavior.setter);
}

void EnvironmentValues.verticalScrollIndicatorVisibility.modify(uint64_t a1, char a2, void (*a3)(char *))
{
  void *v3;
  char *v4;
  char v5;
  char v6;

  v3 = *(void **)a1;
  if ((a2 & 1) != 0)
  {
    v5 = *(_BYTE *)(*(_QWORD *)a1 + 216);
    v4 = &v5;
  }
  else
  {
    v6 = *(_BYTE *)(*(_QWORD *)a1 + 216);
    v4 = &v6;
  }
  a3(v4);
  free(v3);
}

uint64_t View.scrollContentPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 0;
  return View.contentMargins(_:_:for:)(a1, &v4, a2, a3);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DisableFocusFastScrolling@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *v1;
  KeyPath = swift_getKeyPath();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v3;
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in DisableFocusFastScrolling.body(content:);
  a1[2] = result;
  return result;
}

void View.fastScrollingDisabled(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.onScrollToTopGesture(perform:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)();

  swift_getKeyPath();
  if (a1)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    v5 = swift_allocObject();
    v6 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
    *(_QWORD *)(v5 + 16) = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
    *(_QWORD *)(v5 + 24) = v4;
    swift_retain();
    v7 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
}

uint64_t sub_187643E1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.onScrollToTopGesture.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.onScrollToTopGesture : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t sub_187643EA0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorOptions, &type metadata for ScrollIndicatorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorOptions, &type metadata for ScrollIndicatorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorOptions, &type metadata for ScrollIndicatorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorOptions, &type metadata for ScrollIndicatorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HandGestureShortcutPaginationDirection, &type metadata for HandGestureShortcutPaginationDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [HandGestureShortcutPaginationDirection] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [HandGestureShortcutPaginationDirection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HandGestureShortcutPaginationDirection] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [HandGestureShortcutPaginationDirection], (uint64_t)&type metadata for HandGestureShortcutPaginationDirection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [HandGestureShortcutPaginationDirection] and conformance [A]);
  }
  return result;
}

_QWORD *sub_187644090@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_23Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.verticalScrollIndicatorVisibility.getter, a1);
}

uint64_t sub_18764409C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.verticalScrollIndicatorVisibility.setter(&v2);
}

_QWORD *sub_1876440D0@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_23Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.horizontalScrollIndicatorVisibility.getter, a1);
}

uint64_t sub_1876440DC(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.horizontalScrollIndicatorVisibility.setter(&v2);
}

uint64_t sub_187644110@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isScrollEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18764414C(char *a1)
{
  return EnvironmentValues.isScrollEnabled.setter(*a1);
}

_QWORD *sub_187644170@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_23Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.scrollDismissesKeyboardMode.getter, a1);
}

uint64_t sub_18764417C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.scrollDismissesKeyboardMode.setter(&v2);
}

_QWORD *sub_1876441B0@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_23Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.verticalScrollBounceBehavior.getter, a1);
}

uint64_t sub_1876441BC(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.verticalScrollBounceBehavior.setter(&v2);
}

_QWORD *sub_1876441F0@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_23Tm((_QWORD *(*)(uint64_t *__return_ptr))EnvironmentValues.horizontalScrollBounceBehavior.getter, a1);
}

_QWORD *keypath_get_23Tm@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X3>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_18764423C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.horizontalScrollBounceBehavior.setter(&v2);
}

ValueMetadata *type metadata accessor for HandGestureShortcutPaginationDirection()
{
  return &type metadata for HandGestureShortcutPaginationDirection;
}

ValueMetadata *type metadata accessor for ScrollInputBehavior()
{
  return &type metadata for ScrollInputBehavior;
}

ValueMetadata *type metadata accessor for ScrollInputKind()
{
  return &type metadata for ScrollInputKind;
}

ValueMetadata *type metadata accessor for ScrollClipDisabledBehavior()
{
  return &type metadata for ScrollClipDisabledBehavior;
}

ValueMetadata *type metadata accessor for ScrollDismissesKeyboardMode()
{
  return &type metadata for ScrollDismissesKeyboardMode;
}

ValueMetadata *type metadata accessor for ScrollBounceBehavior()
{
  return &type metadata for ScrollBounceBehavior;
}

uint64_t sub_1876442DC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for TransformScrollIndicators, (uint64_t)&protocol witness table for TransformScrollIndicators);
}

uint64_t sub_1876442F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1876443C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1876443CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for ScrollIndicatorsFlashModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorsFlashModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t sub_187644444(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(a1, (uint64_t)&unk_1E1B06740, (uint64_t (*)(void))lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorFlashOnAppearModifier, &unk_1E1B06740);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
  }
  return result;
}

uint64_t sub_18764449C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for TransformScrollBounceBehavior, (uint64_t)&protocol witness table for TransformScrollBounceBehavior);
}

uint64_t sub_1876444B0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for ContentMarginModifier, (uint64_t)&protocol witness table for ContentMarginModifier);
}

uint64_t sub_1876444C4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(a1, (uint64_t)&unk_1E1AE91B0, (uint64_t (*)(void))lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
}

unint64_t lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling;
  if (!lazy protocol witness table cache variable for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableFocusFastScrolling, &unk_1E1AE91B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
  }
  return result;
}

uint64_t sub_18764451C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ScrollToTopGestureAction?, (uint64_t)&type metadata for ScrollToTopGestureAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for DisableFocusFastScrolling()
{
  return &unk_1E1AE91B0;
}

ValueMetadata *type metadata accessor for ScrollBounceBehavior.Role()
{
  return &type metadata for ScrollBounceBehavior.Role;
}

ValueMetadata *type metadata accessor for ScrollDismissesKeyboardMode.Role()
{
  return &type metadata for ScrollDismissesKeyboardMode.Role;
}

uint64_t storeEnumTagSinglePayload for ScrollClipDisabledBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1876446AC + 4 * byte_187C47305[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1876446E0 + 4 * byte_187C47300[v4]))();
}

uint64_t sub_1876446E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876446E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876446F0);
  return result;
}

uint64_t sub_1876446FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187644704);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187644708(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187644710(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollClipDisabledBehavior.Role()
{
  return &type metadata for ScrollClipDisabledBehavior.Role;
}

uint64_t storeEnumTagSinglePayload for ScrollInputKind.Storage(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18764476C + 4 * byte_187C4730A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18764478C + 4 * byte_187C4730F[v4]))();
}

_BYTE *sub_18764476C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18764478C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187644794(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18764479C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1876447A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1876447AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScrollInputKind.Storage()
{
  return &type metadata for ScrollInputKind.Storage;
}

ValueMetadata *type metadata accessor for ScrollInputBehavior.Storage()
{
  return &type metadata for ScrollInputBehavior.Storage;
}

uint64_t storeEnumTagSinglePayload for ScrollIndicatorVisibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187644824 + 4 * byte_187C47319[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187644858 + 4 * byte_187C47314[v4]))();
}

uint64_t sub_187644858(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187644860(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187644868);
  return result;
}

uint64_t sub_187644874(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18764487CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187644880(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187644888(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for DisableFocusFastScrolling(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1876448E0 + 4 * byte_187C47323[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187644914 + 4 * byte_187C4731E[v4]))();
}

uint64_t sub_187644914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18764491C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187644924);
  return result;
}

uint64_t sub_187644930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187644938);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18764493C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187644944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ScrollIndicatorFlashOnAppearModifier()
{
  return &unk_1E1B06740;
}

uint64_t type metadata completion function for ScrollIndicatorsFlashModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScrollIndicatorsFlashModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollIndicatorsFlashModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      v13 = v12 - 1;
      if (v13 < 0)
        v13 = -1;
      return (v13 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187644C50 + 4 * byte_187C47328[v10]))();
  }
}

void storeEnumTagSinglePayload for ScrollIndicatorsFlashModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187644DD4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187644E54);
}

void sub_187644DDC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187644DE4);
  JUMPOUT(0x187644E54);
}

void sub_187644E2C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187644E54);
}

void sub_187644E34()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187644E54);
}

uint64_t sub_187644E3C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x187644E48);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2;
LABEL_6:
    JUMPOUT(0x187644E54);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v4 = a1 + 8;
  v5 = a2 + 8;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 32))
  {
    outlined destroy of AccessibilityRelationshipScope.Key(a1 + 8);
LABEL_5:
    v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v7;
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(v5 + 64);
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
LABEL_6:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  return a1;
}

ValueMetadata *type metadata accessor for ScrollEnvironmentPropertiesKey()
{
  return &type metadata for ScrollEnvironmentPropertiesKey;
}

uint64_t getEnumTagSinglePayload for TransformScrollIndicators(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[17])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformScrollIndicators(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TransformScrollBounceBehavior(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1876450B4 + 4 * byte_187C4733C[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_1876450E8 + 4 * byte_187C47337[v4]))();
}

uint64_t sub_1876450E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1876450F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1876450F8);
  return result;
}

uint64_t sub_187645104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x18764510CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187645110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187645118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransformScrollBounceBehavior()
{
  return &type metadata for TransformScrollBounceBehavior;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TransformScrollBounceBehavior()
{
  return &protocol witness table for TransformScrollBounceBehavior;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransformScrollBounceBehavior()
{
  return &protocol witness table for TransformScrollBounceBehavior;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TransformScrollIndicators()
{
  return &protocol witness table for TransformScrollIndicators;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransformScrollIndicators()
{
  return &protocol witness table for TransformScrollIndicators;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetScrollEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetScrollEnvironmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetScrollEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetScrollEnvironmentModifier()
{
  return &protocol witness table for ResetScrollEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetScrollEnvironmentModifier()
{
  return &protocol witness table for ResetScrollEnvironmentModifier;
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorVisibility.Role, &type metadata for ScrollIndicatorVisibility.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage;
  if (!lazy protocol witness table cache variable for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollInputBehavior.Storage, &type metadata for ScrollInputBehavior.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage;
  if (!lazy protocol witness table cache variable for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollInputKind.Storage, &type metadata for ScrollInputKind.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role;
  if (!lazy protocol witness table cache variable for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollClipDisabledBehavior.Role, &type metadata for ScrollClipDisabledBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role;
  if (!lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollDismissesKeyboardMode.Role, &type metadata for ScrollDismissesKeyboardMode.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role;
  if (!lazy protocol witness table cache variable for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollBounceBehavior.Role, &type metadata for ScrollBounceBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DisableFocusFastScrolling()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollIndicatorFlashOnAppearModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollIndicatorsFlashModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL specialized static ScrollEnvironmentProperties.AxisStorage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && a1[16] == a2[16] && a1[17] == a2[17];
}

uint64_t specialized static ScrollEnvironmentProperties.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v4;
  int v5;
  int v6;
  char v7;
  _OWORD v9[4];
  uint64_t v10;
  _BYTE v11[72];
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[72];
  _BYTE v20[72];

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2] || a1[3] != a2[3])
    goto LABEL_20;
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)(a1 + 8), (uint64_t)v20);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)(a2 + 8), (uint64_t)v19);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v20, (uint64_t)v12);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v19, (uint64_t)&v14);
  if (!v13)
  {
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v19);
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v20);
    if (!*((_QWORD *)&v15 + 1))
    {
      outlined destroy of ResolvedScrollBehavior?((uint64_t)v12);
      goto LABEL_11;
    }
LABEL_19:
    outlined destroy of (ResolvedScrollBehavior?, ResolvedScrollBehavior?)((uint64_t)v12);
    goto LABEL_20;
  }
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v12, (uint64_t)v11);
  if (!*((_QWORD *)&v15 + 1))
  {
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v19);
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v20);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
    goto LABEL_19;
  }
  v9[2] = v16;
  v9[3] = v17;
  v10 = v18;
  v9[0] = v14;
  v9[1] = v15;
  v4 = specialized static ResolvedScrollBehavior.== infix(_:_:)((uint64_t)v11, (uint64_t)v9);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v9);
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v19);
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v20);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v12);
  if (!v4)
    goto LABEL_20;
LABEL_11:
  if (a1[80] != a2[80] || a1[81] != a2[81] || a1[82] != a2[82] || *((_DWORD *)a1 + 21) != *((_DWORD *)a2 + 21))
    goto LABEL_20;
  v5 = a1[88];
  v6 = a2[88];
  if (v5 == 2)
  {
    if (v6 == 2)
      goto LABEL_24;
LABEL_20:
    v7 = 0;
    return v7 & 1;
  }
  if (v6 == 2 || ((v6 ^ v5) & 1) != 0)
    goto LABEL_20;
LABEL_24:
  if (a1[89] != a2[89])
    goto LABEL_20;
  v7 = 0;
  if (a1[96] == a2[96] && *((_QWORD *)a1 + 13) == *((_QWORD *)a2 + 13) && a1[112] == a2[112] && a1[113] == a2[113])
  {
    v7 = 0;
    if (a1[120] == a2[120] && *((_QWORD *)a1 + 16) == *((_QWORD *)a2 + 16) && a1[136] == a2[136] && a1[137] == a2[137])
    {
      if ((static EdgeInsets.== infix(_:_:)() & 1) != 0)
      {
        v7 = static EdgeInsets.== infix(_:_:)();
        return v7 & 1;
      }
      goto LABEL_20;
    }
  }
  return v7 & 1;
}

BOOL specialized static ScrollIndicatorConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && a1[16] == a2[16];
}

void specialized UIScrollViewKeyboardDismissMode.init(_:defaultValue:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1876457D4(uint64_t a1, unsigned __int8 *a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_1876457F4 + 4 * byte_187C47345[*a2]))(0);
}

uint64_t sub_1876457F4()
{
  return 3;
}

void sub_18764580C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollIndicatorsFlashModifier(0, v6, v7, a4) - 8)
                          + 80);
  return closure #1 in ScrollIndicatorsFlashModifier.body(content:)(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t objectdestroy_45Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollIndicatorsFlashModifier(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollIndicatorsFlashModifier(0, v5, v6, a4) - 8)
                          + 80);
  return closure #2 in ScrollIndicatorsFlashModifier.body(content:)(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t sub_187645994()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_1876459AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DisableFocusFastScrolling.body(content:)(uint64_t result)
{
  uint64_t v1;
  char v2;

  if (*(_BYTE *)(v1 + 16))
    v2 = 4;
  else
    v2 = 0;
  *(_BYTE *)(result + 82) |= v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child;
  if (!lazy protocol witness table cache variable for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableShowsFirstColumnOnlyModifier.Child, &type metadata for TableShowsFirstColumnOnlyModifier.Child);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child);
  }
  return result;
}

uint64_t specialized static TransformScrollIndicators.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t Value;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[208];
  int v12[24];
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  Value = AGGraphGetValue();
  v4 = *(_BYTE *)Value;
  v5 = *(_QWORD *)(Value + 8);
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v13 = v4;
    outlined init with copy of ScrollEnvironmentProperties(v12, (uint64_t)v11);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v6)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
    v7 = *(_QWORD *)(a2 + 8);
    swift_retain_n();
    if (v7)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v14 = v5;
    outlined init with copy of ScrollEnvironmentProperties(v12, (uint64_t)v11);
    swift_retain();
    PropertyList.subscript.setter();
    if (v7)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
  }
  result = Axis.Set.contains(_:)();
  if ((result & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v9)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v15 = v4;
    outlined init with copy of ScrollEnvironmentProperties(v12, (uint64_t)v11);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v9)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
    v10 = *(_QWORD *)(a2 + 8);
    swift_retain_n();
    if (v10)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v16 = v5;
    outlined init with copy of ScrollEnvironmentProperties(v12, (uint64_t)v11);
    swift_retain();
    PropertyList.subscript.setter();
    if (v10)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
  }
  return result;
}

uint64_t specialized static TransformScrollBounceBehavior.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[208];
  int v8[28];
  char v9;
  char v10;

  v3 = *(_BYTE *)AGGraphGetValue();
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v4)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v9 = v3;
    outlined init with copy of ScrollEnvironmentProperties(v8, (uint64_t)v7);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v4)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v8);
  }
  result = Axis.Set.contains(_:)();
  if ((result & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v10 = v3;
    outlined init with copy of ScrollEnvironmentProperties(v8, (uint64_t)v7);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v6)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)v8);
  }
  return result;
}

uint64_t specialized static ResetScrollEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[27];
  int v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  AGGraphCreateOffsetAttribute2();
  AGGraphGetValue();
  v31 = 257;
  v36 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v37 = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  static EdgeInsets.zero.getter();
  v44 = v3;
  v45 = v4;
  v46 = v5;
  v47 = v6;
  static EdgeInsets.zero.getter();
  v48 = v7;
  v49 = v8;
  v50 = v9;
  v51 = v10;
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v11 = v25;
    v12 = v26;
    v13 = v27;
    outlined destroy of ScrollEnvironmentProperties((uint64_t)&v22);
    v38 = v11;
    v39 = v12;
    v40 = v13;
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v14 = v28;
    v15 = v29;
    v16 = v30;
    outlined destroy of ScrollEnvironmentProperties((uint64_t)&v22);
    v41 = v14;
    v42 = v15;
    v43 = v16;
  }
  outlined init with copy of ScrollEnvironmentProperties(&v31, (uint64_t)&v22);
  outlined init with copy of ScrollEnvironmentProperties((int *)&v22, (uint64_t)&v19);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v22);
  ScrollAnchorStorage.init()();
  v19 = v22;
  v20 = v23;
  v21 = v24;
  EnvironmentValues.scrollAnchors.setter();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
  v22 = 0;
  *(_QWORD *)&v23 = 0;
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  v17 = *(_QWORD *)(a2 + 8);
  if (v17)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v22 = 0;
  LOWORD(v23) = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v17)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)&v31);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResetScrollEnvironmentModifier, &type metadata for ResetScrollEnvironmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformScrollIndicators and conformance TransformScrollIndicators()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformScrollIndicators and conformance TransformScrollIndicators;
  if (!lazy protocol witness table cache variable for type TransformScrollIndicators and conformance TransformScrollIndicators)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformScrollIndicators, &type metadata for TransformScrollIndicators);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformScrollIndicators and conformance TransformScrollIndicators);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior;
  if (!lazy protocol witness table cache variable for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformScrollBounceBehavior, &type metadata for TransformScrollBounceBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformScrollBounceBehavior and conformance TransformScrollBounceBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ScrollToTopGestureActionKey()
{
  return &type metadata for EnvironmentValues.ScrollToTopGestureActionKey;
}

ValueMetadata *type metadata accessor for ScrollEnvironmentProperties.AxisStorage()
{
  return &type metadata for ScrollEnvironmentProperties.AxisStorage;
}

ValueMetadata *type metadata accessor for ScrollEnvironmentProperties.Options()
{
  return &type metadata for ScrollEnvironmentProperties.Options;
}

uint64_t sub_187646980(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = type metadata accessor for ScrollIndicatorsFlashModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorsFlashModifier<A>, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for _ValueActionModifier2();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v14[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
  v10 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v14);
  v13[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v7);
  v12[0] = MEMORY[0x18D75FFDC](v10, v8, v13);
  v12[1] = MEMORY[0x1E0CE5EF8];
  return MEMORY[0x18D75FFDC](v10, v9, v12);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>, &lazy cache variable for type metadata for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, (void (*)(void))lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, (void (*)(void))lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>, &lazy cache variable for type metadata for _ViewModifier_Content<DisableFocusFastScrolling>, (void (*)(void))lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, a3, a4);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DisableFocusFastScrolling>, (void (*)(void))lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEnvironmentProperties.Options, &type metadata for ScrollEnvironmentProperties.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEnvironmentProperties.Options, &type metadata for ScrollEnvironmentProperties.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEnvironmentProperties.Options, &type metadata for ScrollEnvironmentProperties.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEnvironmentProperties.Options, &type metadata for ScrollEnvironmentProperties.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey;
  if (!lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.DocumentKey, &type metadata for DocumentGroupConfiguration.DocumentKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey;
  if (!lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.DocumentKey, &type metadata for DocumentGroupConfiguration.DocumentKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollIndicatorConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollIndicatorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollIndicatorConfiguration()
{
  return &type metadata for ScrollIndicatorConfiguration;
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListDisclosureGroupDepthInput, &type metadata for ListDisclosureGroupDepthInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListDisclosureGroupDepthInput, &type metadata for ListDisclosureGroupDepthInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollIndicatorStyle()
{
  return &type metadata for ScrollIndicatorStyle;
}

uint64_t storeEnumTagSinglePayload for HandGestureShortcutPaginationDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187646FD4 + 4 * byte_187C4734E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187647008 + 4 * byte_187C47349[v4]))();
}

uint64_t sub_187647008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187647010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187647018);
  return result;
}

uint64_t sub_187647024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18764702CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187647030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187647038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollIndicatorStyle.Value()
{
  return &type metadata for ScrollIndicatorStyle.Value;
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollIndicatorStyle.Value, &type metadata for ScrollIndicatorStyle.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value);
  }
  return result;
}

void View.crownScrollingDisabled(_:)()
{
  View.fastScrollingDisabled(_:)();
}

Swift::String __swiftcall currentAppName()()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_mainBundle);
  v2 = specialized NSBundle.localizedValue(for:)(0xD000000000000013, 0x8000000187BE54D0);
  v4 = v3;

  if (!v4)
  {
    v5 = objc_msgSend(v0, sel_mainBundle);
    v2 = specialized NSBundle.localizedValue(for:)(0x656C646E75424643, 0xEC000000656D614ELL);
    v4 = v6;

    if (!v4)
    {
      v7 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
      v8 = objc_msgSend(v7, sel_processName);

      v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v4 = v9;

    }
  }
  v10 = v2;
  v11 = v4;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t specialized NSBundle.localizedValue(for:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_mainBundle);
  v6 = objc_msgSend(v5, sel_localizedInfoDictionary);

  if (!v6)
  {
    v16 = 0u;
    v17 = 0u;
    goto LABEL_11;
  }
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v7 + 16))
  {
    v16 = 0u;
    v17 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    v16 = 0u;
    v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v16);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return v18;
LABEL_12:
  v11 = objc_msgSend(v4, sel_mainBundle, v16, (_QWORD)v17);
  v12 = objc_msgSend(v11, sel_infoDictionary);

  if (!v12)
  {
    v16 = 0u;
    v17 = 0u;
LABEL_24:
    outlined destroy of Any?((uint64_t)&v16);
    return 0;
  }
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v15 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v16);
    }
    else
    {
      v16 = 0u;
      v17 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_24;
  if (swift_dynamicCast())
    return v18;
  else
    return 0;
}

uint64_t partial apply for closure #1 in AppGraph.extendedLaunchTestName()()
{
  return closure #1 in AppGraph.extendedLaunchTestName()();
}

uint64_t partial apply for closure #1 in AppGraph.supports(_:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AppGraph.supports(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void partial apply for closure #1 in runApp<A>(_:)()
{
  uint64_t *v0;

  closure #1 in runApp<A>(_:)(v0[4], v0[2], v0[3]);
}

uint64_t closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  uint64_t v1;

  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v1);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance RotatingDisclosureIndicator()
{
  type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>();
  type metadata accessor for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance RotatingDisclosureIndicator@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  if (v1[1])
    v4 = 1.57079633;
  else
    v4 = 0.0;
  if (v1[1])
    v5 = 0x6465646E61707865;
  else
    v5 = 0x657370616C6C6F63;
  if (v1[1])
    v6 = 0xE800000000000000;
  else
    v6 = 0xE900000000000064;
  specialized View.accessibility<A>(_:_:isEnabled:)(v5, v6, 0, 1, v3, (uint64_t)v13);
  swift_bridgeObjectRelease();
  v7 = v13[0];
  v8 = v14;
  v9 = v15;
  result = static UnitPoint.center.getter();
  *(_BYTE *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(double *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  return result;
}

uint64_t specialized static RotatingDisclosureIndicator.toggle(_:)()
{
  swift_retain();
  Transaction.subscript.setter();
  swift_retain();
  Transaction.current.getter();
  swift_release();
  withTransaction<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  return closure #1 in static RotatingDisclosureIndicator.toggle(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  return closure #1 in closure #1 in static RotatingDisclosureIndicator.toggle(_:)();
}

ValueMetadata *type metadata accessor for Transaction.DisclosureToggleKey()
{
  return &type metadata for Transaction.DisclosureToggleKey;
}

uint64_t storeEnumTagSinglePayload for RotatingDisclosureIndicator(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187647908 + 4 * byte_187C48095[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_18764793C + 4 * asc_187C48090[v4]))();
}

uint64_t sub_18764793C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187647944(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18764794CLL);
  return result;
}

uint64_t sub_187647958(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187647960);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187647964(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18764796C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RotatingDisclosureIndicator()
{
  return &type metadata for RotatingDisclosureIndicator;
}

uint64_t associated type witness table accessor for View.Body : View in RotatingDisclosureIndicator()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>)
  {
    type metadata accessor for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>);
  }
}

void type metadata accessor for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>);
  }
}

void type metadata accessor for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>)
  {
    v2 = lazy protocol witness table accessor for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for DisclosureIndicatorDifferentiatesWithoutColor, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>);
  }
}

unint64_t lazy protocol witness table accessor for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureIndicatorDifferentiatesWithoutColor, &type metadata for DisclosureIndicatorDifferentiatesWithoutColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureIndicatorDifferentiatesWithoutColor, &type metadata for DisclosureIndicatorDifferentiatesWithoutColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureIndicatorDifferentiatesWithoutColor, &type metadata for DisclosureIndicatorDifferentiatesWithoutColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureIndicatorDifferentiatesWithoutColor, &type metadata for DisclosureIndicatorDifferentiatesWithoutColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor;
  if (!lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureIndicatorDifferentiatesWithoutColor, &type metadata for DisclosureIndicatorDifferentiatesWithoutColor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, lazy protocol witness table accessor for type ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE3010]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DisclosureIndicator and conformance _DisclosureIndicator, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

unint64_t lazy protocol witness table accessor for type _DisclosureIndicator and conformance _DisclosureIndicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisclosureIndicator and conformance _DisclosureIndicator;
  if (!lazy protocol witness table cache variable for type _DisclosureIndicator and conformance _DisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DisclosureIndicator, &type metadata for _DisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisclosureIndicator and conformance _DisclosureIndicator);
  }
  return result;
}

uint64_t sub_187647B78()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ViewInputFlagModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>();
    type metadata accessor for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>);
  }
}

ValueMetadata *type metadata accessor for PlainDividerStyle()
{
  return &type metadata for PlainDividerStyle;
}

uint64_t associated type witness table accessor for DividerStyle.Body : View in PlainDividerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double PlainDividerStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v5;
  double result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_WORD *)a3 = 256;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 32) = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 40) = v11;
  return result;
}

double protocol witness for DividerStyle.makeBody(configuration:) in conformance PlainDividerStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return PlainDividerStyle.makeBody(configuration:)(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

ValueMetadata *type metadata accessor for PlainDividerShapeStyle()
{
  return &type metadata for PlainDividerShapeStyle;
}

uint64_t getEnumTagSinglePayload for DividerShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187647DD8 + 4 * byte_187C48110[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for DividerShape(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for DividerShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DividerShape);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, MEMORY[0x1E0CE0E50]);
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>)
  {
    type metadata accessor for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>, _FrameLayout>);
  }
}

void type metadata accessor for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>)
  {
    type metadata accessor for DividerShape<Rectangle>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DividerShape<Rectangle> and conformance DividerShape<A>, (uint64_t (*)(uint64_t))type metadata accessor for DividerShape<Rectangle>, (uint64_t)&protocol conformance descriptor for DividerShape<A>);
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<DividerShape<Rectangle>, PlainDividerShapeStyle>);
  }
}

void type metadata accessor for DividerShape<Rectangle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for DividerShape<Rectangle>)
  {
    v2 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v4 = type metadata accessor for DividerShape(a1, MEMORY[0x1E0CE7E28], v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for DividerShape<Rectangle>);
  }
}

double DividerShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 24) + 24))(v5, *(_QWORD *)(a1 + 16));
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t DividerShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

double protocol witness for Shape.path(in:) in conformance DividerShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  DividerShape.path(in:)(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

void protocol witness for static Shape.role.getter in conformance DividerShape<A>(_BYTE *a1@<X8>)
{
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance DialogColorSchemeKey(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DividerShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerShape<A>, a3);
  return static Shape._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DividerShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerShape<A>, a3);
  return static Shape._makeViewList(view:inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance DividerShape<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerShape<A>, a1);
  return Shape.body.getter();
}

uint64_t instantiation function for generic protocol witness table for DividerShape<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerShape<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerShape<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t one-time initialization function for sharedColor()
{
  uint64_t result;

  lazy protocol witness table accessor for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle();
  result = Color.init<A>(provider:)();
  static PlainDividerShapeStyle.sharedColor = result;
  return result;
}

void protocol witness for ShapeStyle.resolve(in:) in conformance PlainDividerShapeStyle(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  float v5;
  int v6;
  int v7;
  int v8;
  char v9;

  v2 = EnvironmentValues.colorScheme.getter();
  if (v9 == 1)
  {
    v3.n128_u32[0] = 1051240617;
    v4.n128_u32[0] = 1051766961;
    v5 = 0.6;
  }
  else
  {
    v3.n128_u32[0] = 1047589105;
    v4.n128_u32[0] = 1049003655;
    v5 = 0.29;
  }
  *(float *)a1 = MEMORY[0x18D75B614](v2, v3, v3.n128_f32[0], v4, v5);
  *(_DWORD *)(a1 + 4) = v6;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance PlainDividerShapeStyle()
{
  uint64_t v0;
  __n128 v1;
  __n128 v2;
  float v3;
  char v5;

  v0 = EnvironmentValues.colorScheme.getter();
  if (v5 == 1)
  {
    v1.n128_u32[0] = 1051240617;
    v2.n128_u32[0] = 1051766961;
    v3 = 0.6;
  }
  else
  {
    v1.n128_u32[0] = 1047589105;
    v2.n128_u32[0] = 1049003655;
    v3 = 0.29;
  }
  return MEMORY[0x18D75B614](v0, v1, v1.n128_f32[0], v2, v3);
}

unint64_t lazy protocol witness table accessor for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainDividerShapeStyle, &type metadata for PlainDividerShapeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainDividerShapeStyle, &type metadata for PlainDividerShapeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainDividerShapeStyle, &type metadata for PlainDividerShapeStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerShapeStyle and conformance PlainDividerShapeStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in PlainDividerShapeStyle()
{
  return MEMORY[0x1E0CE70E8];
}

uint64_t specialized PlainDividerShapeStyle._apply(to:)()
{
  unint64_t v1;

  if ((EnvironmentValues.isVisionEnabled.getter() & 1) != 0)
    return SeparatorShapeStyle._apply(to:)();
  EnvironmentValues.backgroundMaterial.getter();
  outlined consume of Material?(v1);
  if (v1 == 8)
  {
    if (one-time initialization token for sharedColor != -1)
      swift_once();
    swift_retain();
  }
  else
  {
    static Color.quaternary.getter();
  }
  Color._apply(to:)();
  return swift_release();
}

uint64_t TableColumnForEach.IDGenerator.makeID(data:index:offset:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(_QWORD *, _QWORD);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v17 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v12 = (char *)&v16 - v11;
  if (a2)
  {
    swift_retain();
    v13 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v8 + 16))(v12);
    v13(v18, 0);
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, AssociatedTypeWitness);
  }
  else
  {
    result = v17;
    v18[0] = a1;
    v15 = *(_QWORD *)(a3 - 8);
    if (*(_QWORD *)(v15 + 64) == 8)
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, double))(v15 + 16))(v17, v18, a3, v10);
    else
      __break(1u);
  }
  return result;
}

uint64_t TableColumnForEach.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TableColumnForEach.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TableColumnForEach.data.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TableColumnForEach.content.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 84));
  swift_retain();
  return v2;
}

uint64_t TableColumnForEach.content.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 84));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*TableColumnForEach.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void TableColumnForEach.init<>(_:content:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_1876489D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + *(int *)(result + 88)) = v1;
  v3 = (_QWORD *)(v2 + *(int *)(result + 84));
  *v3 = v4;
  v3[1] = v5;
  return result;
}

uint64_t key path getter for Identifiable.id : <A, B, C, D, E>A.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_187648A78()
{
  return 64;
}

__n128 sub_187648A84(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void TableColumnForEach.init(_:id:content:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_187648B38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + *(int *)(result + 88)) = v3;
  v5 = (_QWORD *)(v4 + *(int *)(result + 84));
  *v5 = v2;
  v5[1] = v1;
  return result;
}

void TableColumnForEach.init<>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  _BYTE v19[48];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v18[0] = a1;
  v18[1] = a2;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v14[5] = a8;
  v14[6] = a3;
  v14[7] = a4;
  type metadata accessor for Range<Int>();
  v16 = v15;
  v17 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v19, v18, v16);
  v20 = v16;
  v21 = MEMORY[0x1E0DEB418];
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = v17;
  v26 = MEMORY[0x1E0DEB428];
  v27 = a8;
  type metadata accessor for TableColumnForEach();
}

__n128 sub_187648C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 result;
  __int128 v6;
  __n128 v7;
  uint64_t v8;

  *(_QWORD *)(v3 + *(int *)(a1 + 88)) = 0;
  v4 = (_QWORD *)(v3 + *(int *)(a1 + 84));
  *v4 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out D);
  v4[1] = v2;
  result = v7;
  *(_OWORD *)v1 = v6;
  *(__n128 *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 32) = v8;
  return result;
}

uint64_t sub_187648C78()
{
  swift_release();
  return swift_deallocObject();
}

void static TableColumnForEach._makeContent(content:inputs:)()
{
  type metadata accessor for TableColumnForEachState();
}

void sub_187648D30()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)(v8 - 192) = v1;
  *(_DWORD *)(v8 - 184) = v2;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v8 - 176) = v4;
  *(_QWORD *)(v8 - 152) = v5;
  *(_QWORD *)(v8 - 144) = v3;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v8 - 120) = *(_QWORD *)(v0 + 72);
  *(_DWORD *)(v8 - 112) = v7;
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  TableColumnForEachState.init(inputs:)();
}

void sub_187648D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  swift_retain();
  *(_QWORD *)(v22 - 192) = v21;
  *(_QWORD *)(v22 - 184) = a9;
  *(_QWORD *)(v22 - 176) = a12;
  *(_QWORD *)(v22 - 168) = a21;
  *(_QWORD *)(v22 - 160) = a10;
  *(_QWORD *)(v22 - 152) = a11;
  *(_QWORD *)(v22 - 144) = a19;
  *(_QWORD *)(v22 - 136) = a20;
  type metadata accessor for TableColumnForEach();
}

void sub_187648DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  *(_QWORD *)(v6 - 192) = v3;
  *(_QWORD *)(v6 - 184) = v0;
  *(_QWORD *)(v6 - 176) = v5;
  *(_QWORD *)(v6 - 168) = v2;
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v1;
  type metadata accessor for TableColumnForEachState.Info();
}

void sub_187648E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 192) = v3;
  *(_QWORD *)(v6 - 184) = v0;
  *(_QWORD *)(v6 - 176) = v5;
  *(_QWORD *)(v6 - 168) = v2;
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v1;
  type metadata accessor for TableColumnForEachState.Info.Init();
}

void sub_187648E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;

  a37 = a1;
  a38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnForEachState<A, B, C>.Info.Init, a1);
  v46 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&a24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)&a34, a1, MEMORY[0x1E0DEDCE8], v46, MEMORY[0x1E0DEDD18], v47);
  swift_release();
  *(_DWORD *)(v42 + 112) = *(_DWORD *)(v44 - 192);
  *(_BYTE *)(v42 + 116) = 0;
  *(_DWORD *)(v44 - 192) = a14;
  swift_retain();
  v48 = _GraphValue.value.getter();
  a24 = v42;
  a25 = v48;
  *(_QWORD *)(v44 - 192) = v40;
  *(_QWORD *)(v44 - 184) = v38;
  *(_QWORD *)(v44 - 176) = v41;
  *(_QWORD *)(v44 - 168) = a22;
  *(_QWORD *)(v44 - 160) = v43;
  *(_QWORD *)(v44 - 152) = v39;
  *(_QWORD *)(v44 - 144) = a20;
  *(_QWORD *)(v44 - 136) = a21;
  type metadata accessor for TableColumnForEach.MakeList();
}

uint64_t sub_187648EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD v15[36];

  v4 = a1;
  v15[2] = a1;
  v15[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnForEach<A, B, C, D, E>.MakeList, a1);
  type metadata accessor for Attribute<TableColumnList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v12, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v15, v4, MEMORY[0x1E0DEDCE8], v5, v1, v6);
  swift_release();
  LODWORD(v4) = *(_DWORD *)(v3 - 192);
  *(_DWORD *)(v2 + 120) = v4;
  *(_BYTE *)(v2 + 124) = 0;
  PreferencesOutputs.init()();
  v12 = v9;
  v13 = v10;
  v14 = v4;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_release();
  result = swift_bridgeObjectRelease();
  v8 = *(_DWORD *)(v3 - 184);
  *(_QWORD *)v11 = *(_QWORD *)(v3 - 192);
  *(_DWORD *)(v11 + 8) = v8;
  return result;
}

void type metadata accessor for TableColumnForEachState()
{
  JUMPOUT(0x18D75FF28);
}

void TableColumnForEachState.__allocating_init(inputs:)()
{
  swift_allocObject();
  TableColumnForEachState.init(inputs:)();
}

void type metadata accessor for TableColumnForEach()
{
  JUMPOUT(0x18D75FF28);
}

void TableColumnForEach.MakeList.forEach.getter()
{
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_187649084(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void TableColumnForEach.MakeList.value.getter()
{
  type metadata accessor for TableColumnForEach();
}

void sub_18764912C(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  TableColumnForEach.MakeList.forEach.getter();
}

void sub_187649194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  TableColumnForEachState.update(forEach:)(v2, a2);
}

uint64_t sub_1876491E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = &protocol witness table for TableColumnForEach<A, B, C, D, E>.DynamicTableColumnList;
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return swift_retain();
}

void TableColumnForEachState.update(forEach:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[30];
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  v22 = a1;
  v23 = v5;
  MEMORY[0x1E0C80A78](a1, a2);
  v20[14] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v20[12] = (char *)v20 - v9;
  v10 = v3[13];
  v11 = v3[10];
  v20[10] = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[15] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v20[28] = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v20[16] = (char *)v20 - v16;
  v17 = v3[12];
  v19 = v3[14];
  v18 = v3[15];
  v24 = v11;
  v25 = v4;
  v26 = v17;
  v27 = v10;
  v28 = v19;
  v29 = v18;
  type metadata accessor for TableColumnForEachState.Item();
}

void protocol witness for Rule.value.getter in conformance TableColumnForEach<A, B, C, D, E>.MakeList()
{
  TableColumnForEach.MakeList.value.getter();
}

uint64_t TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD v15[7];
  int v16;
  uint64_t v17;

  v15[2] = a7;
  v15[3] = a8;
  v15[4] = a10;
  v15[5] = a14;
  v15[6] = a3;
  v16 = a4;
  v17 = a1;
  return TableColumnForEachState.forEachItem(from:do:)(a2, (uint64_t)partial apply for closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:), (uint64_t)v15) & 1;
}

uint64_t closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t InputValue;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(a3 + 124) == 1)
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    type metadata accessor for TableColumnList();
    InputValue = AGGraphGetInputValue();
    outlined init with copy of TableColumnList(InputValue, (uint64_t)v15);
    v13 = v16;
    v14 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    LOBYTE(a8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(a5, v11, a8, a9, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return a8 & 1;
  }
  return result;
}

uint64_t TableColumnForEachState.forEachItem(from:do:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[5];
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t AssociatedTypeWitness;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = v3;
  v75 = a3;
  v74 = a2;
  v6 = *(_QWORD **)v4;
  v82 = *(_QWORD *)(*(_QWORD *)v4 + 104);
  v7 = *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8);
  v8 = v6[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v65 = (char *)v61 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v63 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v68 = (uint64_t)v61 - v15;
  v81 = v8;
  v16 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v84 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v80 = v12;
  v22 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v77 = (char *)v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v85 = (char *)v61 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v61 - v31;
  MEMORY[0x1E0C80A78](v33, v34);
  v79 = (char *)v61 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v64 = (char *)v61 - v38;
  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    v78 = a1;
    v95 = 0;
    v40 = TableColumnForEachState.fetchColumnsPerElement()();
    v67 = v4;
    v76 = v7;
    v83 = v16;
    if ((v41 & 1) == 0)
    {
      if (v40 >= 1)
      {
        v62 = v22;
        v42 = *v78;
        v69 = v40;
        v68 = v42 / v40;
        v95 = v42 / v40;
        swift_beginAccess();
        v43 = v6[15];
        v44 = v6[11];
        v45 = v6[12];
        v46 = swift_getAssociatedTypeWitness();
        v47 = swift_getAssociatedTypeWitness();
        v48 = v6[14];
        v87 = v81;
        v88 = v44;
        v72 = v44;
        v89 = v46;
        v90 = v47;
        v71 = v45;
        v91 = v45;
        v92 = v82;
        v70 = v48;
        v93 = v48;
        v94 = v43;
        v73 = v43;
        type metadata accessor for TableColumnForEach();
      }
      v95 = 0;
      swift_beginAccess();
      v55 = v6[15];
      v57 = v6[11];
      v56 = v6[12];
      v58 = swift_getAssociatedTypeWitness();
      v59 = swift_getAssociatedTypeWitness();
      v60 = v6[14];
      v87 = v81;
      v88 = v57;
      v72 = v57;
      v89 = v58;
      v90 = v59;
      v71 = v56;
      v91 = v56;
      v92 = v82;
      v70 = v60;
      v93 = v60;
      v94 = v55;
      v73 = v55;
      type metadata accessor for TableColumnForEach();
    }
    v61[4] = v9;
    v61[3] = v32;
    v61[1] = v13;
    v62 = v22;
    v86 = 0;
    swift_beginAccess();
    v49 = v6[15];
    v51 = v6[11];
    v50 = v6[12];
    v52 = swift_getAssociatedTypeWitness();
    v53 = swift_getAssociatedTypeWitness();
    v54 = v6[14];
    v87 = v81;
    v88 = v51;
    v72 = v51;
    v89 = v52;
    v90 = v53;
    v71 = v50;
    v91 = v50;
    v92 = v82;
    v70 = v54;
    v93 = v54;
    v94 = v49;
    v73 = v49;
    type metadata accessor for TableColumnForEach();
  }
  return result;
}

uint64_t TableColumnForEach.DynamicTableColumnList.count.getter(uint64_t a1, uint64_t a2)
{
  return TableColumnForEachState.count()(a1, a2);
}

uint64_t TableColumnForEachState.count()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  MEMORY[0x1E0C80A78](a1, a2);
  if (AGSubgraphIsValid())
  {
    v5 = TableColumnForEachState.fetchColumnsPerElement()();
    if ((v6 & 1) == 0)
    {
      *(_QWORD *)&v17 = v5;
      swift_beginAccess();
      v7 = *(_QWORD *)(v3 + 120);
      v8 = *(_QWORD *)(v3 + 88);
      v9 = *(_QWORD *)(v3 + 96);
      v18 = v4;
      v19 = v8;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v21 = swift_getAssociatedTypeWitness();
      v22 = v9;
      v23 = *(_OWORD *)(v3 + 104);
      v24 = v7;
      type metadata accessor for TableColumnForEach();
    }
    v25 = 0;
    v26 = 0;
    MEMORY[0x1E0C80A78](v5, v6);
    *((_QWORD *)&v16 - 2) = &v25;
    *((_QWORD *)&v16 - 1) = v2;
    TableColumnForEachState.forEachItem(from:do:)(&v26, (uint64_t)partial apply for closure #1 in TableColumnForEachState.count(), (uint64_t)(&v16 - 2));
    swift_beginAccess();
    v10 = *(_QWORD *)(v3 + 120);
    v12 = *(_QWORD *)(v3 + 88);
    v11 = *(_QWORD *)(v3 + 96);
    v13 = swift_getAssociatedTypeWitness();
    v14 = swift_getAssociatedTypeWitness();
    v18 = v4;
    v19 = v12;
    AssociatedTypeWitness = v13;
    v21 = v14;
    v22 = v11;
    v17 = *(_OWORD *)(v3 + 104);
    v23 = v17;
    v24 = v10;
    type metadata accessor for TableColumnForEach();
  }
  return 0;
}

uint64_t TableColumnForEachState.fetchColumnsPerElement()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v23 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v20 = (char *)&v17 - v6;
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = (_BYTE *)(v0 + v1[21]);
  if (v9[8] == 1 && *(_QWORD *)v9 == 0)
  {
    v11 = v1[14];
    v12 = v1[15];
    v13 = v1[12];
    v18 = v1[11];
    v19 = v11;
    v17 = v0;
    swift_beginAccess();
    v14 = swift_getAssociatedTypeWitness();
    v15 = swift_getAssociatedTypeWitness();
    v24 = v3;
    v25 = v18;
    v26 = v14;
    v27 = v15;
    v28 = v13;
    v29 = v2;
    v30 = v19;
    v31 = v12;
    type metadata accessor for TableColumnForEach();
  }
  if (v9[8])
    return 0;
  else
    return *(_QWORD *)v9;
}

uint64_t protocol witness for TableColumnList.count.getter in conformance TableColumnForEach<A, B, C, D, E>.DynamicTableColumnList()
{
  uint64_t v0;

  return TableColumnForEach.DynamicTableColumnList.count.getter(*(_QWORD *)v0, *(unsigned int *)(v0 + 8));
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance TableColumnForEach<A, B, C, D, E>.DynamicTableColumnList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  return TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(a1, a2, *(_QWORD *)v5, *(_DWORD *)(v5 + 8), a5[2], a5[3], a5[4], a5[5], a5[6], a3, a5[7], a5[8], a5[9], a4) & 1;
}

void protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance TableColumnForEach<A, B, C, D, E>()
{
  static TableColumnForEach._makeContent(content:inputs:)();
}

uint64_t static TableColumnForEachState.ElementCount.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v5;
  unsigned int v6;
  int v7;

  v5 = (a4 & 1) == 0 && a1 == a3;
  v6 = a4 & 1;
  if (a3)
    v7 = a4 & 1;
  else
    v7 = 0;
  if (a3)
    v6 = 0;
  if (a1)
    v6 = v7;
  if ((a2 & 1) != 0)
    return v6;
  else
    return v5;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnForEachState<A, B, C>.ElementCount(uint64_t a1, uint64_t a2)
{
  return static TableColumnForEachState.ElementCount.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8)) & 1;
}

void TableColumnForEachState.init(inputs:)()
{
  uint64_t v0;
  id v1;

  v1 = (id)AGSubgraphGetCurrent();
  if (v1)
  {
    *(_QWORD *)(v0 + 104) = v1;
    *(_DWORD *)(v0 + 112) = 0;
    *(_BYTE *)(v0 + 116) = 1;
    *(_DWORD *)(v0 + 120) = 0;
    *(_BYTE *)(v0 + 124) = 1;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    type metadata accessor for TableColumnForEach();
  }
  __break(1u);
}

uint64_t TableColumnForEachState.eraseItem(_:)(uint64_t a1)
{
  AGSubgraphRef.willRemove()();
  AGSubgraphRemoveChild();
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 192)) = 1;
  return TableColumnForEachState.Item.release()();
}

void TableColumnForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v37 = a1;
  v38 = a2;
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v29[1] = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v29[4] = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v29[0] = (char *)v29 - v10;
  v34 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v32 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v3[11];
  v35 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v29[2] = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v29[6] = (char *)v29 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v36 = (char *)v29 - v23;
  v39 = v2;
  swift_beginAccess();
  v24 = v3[15];
  v25 = v3[12];
  v26 = swift_getAssociatedTypeWitness();
  v27 = swift_getAssociatedTypeWitness();
  v28 = v3[14];
  v40 = v5;
  v41 = v14;
  v33 = v26;
  v42 = v26;
  v43 = v27;
  v31 = v27;
  v44 = v25;
  v45 = v4;
  v46 = v28;
  v47 = v24;
  type metadata accessor for TableColumnForEach();
}

void sub_18764BC50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48);
  *(_QWORD *)(v8 - 272) = v6;
  *(_QWORD *)(v8 - 360) = v10;
  if (v10(v6, 1, a1) != 1)
  {
    *(_QWORD *)(v8 - 344) = a1;
    v11 = *(_QWORD *)(*(_QWORD *)(v8 - 272) + *(int *)(a1 + 88));
    v12 = *(_QWORD *)(v8 - 288);
    v13 = *(_QWORD *)(v8 - 304);
    (*(void (**)(uint64_t))(v12 + 16))(v13);
    swift_retain();
    TableColumnForEach.IDGenerator.makeID(data:index:offset:)(*(_QWORD *)(v8 - 248), v11, v7, *(_QWORD *)(v8 - 264));
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v1);
    swift_beginAccess();
    *(_QWORD *)(v8 - 288) = v1;
    *(_QWORD *)(v8 - 232) = v1;
    *(_QWORD *)(v8 - 224) = v7;
    *(_QWORD *)(v8 - 216) = v3;
    *(_QWORD *)(v8 - 208) = v5;
    *(_QWORD *)(v8 - 200) = v4;
    *(_QWORD *)(v8 - 192) = v2;
    type metadata accessor for TableColumnForEachState.Item();
  }
  __break(1u);
  JUMPOUT(0x18764C390);
}

void closure #1 in TableColumnForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TableColumnForEachState.ChildContent();
}

void sub_18764C438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v9 - 240) = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (_DWORD *)((char *)&v16 - v11);
  if ((*(_BYTE *)(v3 + 116) & 1) == 0)
  {
    v13 = *(_DWORD *)(v3 + 112);
    (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v7, *(_QWORD *)(v9 - 248), v4, v10);
    *v12 = v13;
    *(_QWORD *)(v9 - 184) = v6;
    *(_QWORD *)(v9 - 176) = v4;
    v14 = *(_QWORD *)(v9 - 256);
    *(_QWORD *)(v9 - 168) = v5;
    *(_QWORD *)(v9 - 160) = v14;
    v15 = *(_QWORD *)(v9 - 232);
    *(_QWORD *)(v9 - 152) = v8;
    *(_QWORD *)(v9 - 144) = v15;
    type metadata accessor for TableColumnForEachState.ChildContent();
  }
  __break(1u);
  JUMPOUT(0x18764C610);
}

uint64_t TableColumnForEachState.Item.release()()
{
  uint64_t result;

  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();
      swift_release();
      swift_release();
    }
    AGSubgraphRef.willInvalidate(isInserted:)(1);
    return AGSubgraphInvalidate();
  }
  return result;
}

void closure #1 in TableColumnForEachState.forEachItem(from:do:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  TableColumnForEachState.item(at:offset:)(a1, *a3);
}

uint64_t sub_18764C728()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t InputValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  result = swift_release();
  if (*(_BYTE *)(v0 + 124) == 1)
    goto LABEL_7;
  type metadata accessor for TableColumnList();
  InputValue = AGGraphGetInputValue();
  outlined init with copy of TableColumnList(InputValue, (uint64_t)v11);
  v6 = v12;
  v7 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  v9 = *v2 + v8;
  if (__OFADD__(*v2, v8))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v10 = *v3;
  if (*v3 >= v9)
  {
    *v2 = v9;
    *v1 &= 1uLL;
  }
  return v10 < v9;
}

void closure #1 in TableColumnForEachState.count()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t InputValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a4 + 124) != 1)
  {
    type metadata accessor for TableColumnList();
    InputValue = AGGraphGetInputValue();
    outlined init with copy of TableColumnList(InputValue, (uint64_t)v9);
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    if (!__OFADD__(*a3, v8))
    {
      *a3 += v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void TableColumnForEachState.Info.Init.forEach.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_18764C948(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void TableColumnForEachState.Info.Init.value.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
}

void sub_18764CA34(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  TableColumnForEachState.Info.Init.forEach.getter();
}

void sub_18764CA88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  TableColumnForEachState.update(forEach:)(v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnForEachState<A, B, C>.Info.Init()
{
  return 0x697463656C6C6F43;
}

void protocol witness for Rule.value.getter in conformance TableColumnForEachState<A, B, C>.Info.Init()
{
  TableColumnForEachState.Info.Init.value.getter();
}

uint64_t sub_18764CB28(uint64_t result, int a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_DWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t TableColumnForEachState.Item.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 88) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_weakDestroy();

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t TableColumnForEachState.Item.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((void (*)(void))TableColumnForEachState.Item.deinit);
}

void TableColumnForEachState.ChildContent.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[8];
  uint64_t AssociatedTypeWitness;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 8);
  v5 = *(_QWORD *)(v3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19[6] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v19[4] = (char *)v19 - v7;
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v19[3] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[5] = v4;
  v11 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v11 - 8);
  v26 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v24 = (char *)v19 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v19[7] = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  specialized TableColumnForEachState.ChildContent.info.getter();
}

void sub_18764CDB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, _QWORD *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 - 280) = v5;
  v8 = *(void (**)(uint64_t, uint64_t, _QWORD *))(v5 + 16);
  *(_QWORD *)(v7 - 272) = v1;
  *(_QWORD *)(v7 - 336) = v8;
  v8(v2, v1, v4);
  swift_beginAccess();
  v9 = v4[3];
  v10 = v4[6];
  v11 = v4[7];
  swift_retain();
  *(_QWORD *)(v7 - 184) = v6;
  *(_QWORD *)(v7 - 176) = v9;
  *(_QWORD *)(v7 - 168) = v3;
  *(_QWORD *)(v7 - 160) = v0;
  *(_QWORD *)(v7 - 152) = v10;
  *(_QWORD *)(v7 - 144) = v11;
  type metadata accessor for TableColumnForEachState.Item();
}

uint64_t sub_18764CE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x18D75CA24](v5, v9, v6, a1, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v11 = *(_QWORD *)(v10 - 208);
  if (v11)
  {
    swift_endAccess();
    if (*(_DWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 + 176)) == *(_DWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 184)))
    {
      *(_QWORD *)(v10 - 344) = v1;
      swift_beginAccess();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v13 = swift_getAssociatedTypeWitness();
      *(_QWORD *)(v10 - 184) = v8;
      *(_QWORD *)(v10 - 176) = v6;
      *(_QWORD *)(v10 - 168) = AssociatedTypeWitness;
      *(_QWORD *)(v10 - 160) = v13;
      *(_QWORD *)(v10 - 352) = v4;
      v14 = *(_QWORD *)(v10 - 344);
      *(_QWORD *)(v10 - 152) = v4;
      *(_QWORD *)(v10 - 144) = v14;
      *(_QWORD *)(v10 - 136) = v2;
      *(_QWORD *)(v10 - 128) = v3;
      type metadata accessor for TableColumnForEach();
    }
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
  return swift_release();
}

void closure #1 in TableColumnForEachState.ChildContent.updateValue()()
{
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_18764D278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void (*v5)(uint64_t);

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, 1, a1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v5 = *(void (**)(uint64_t))(v2 + *(int *)(a1 + 84));
    swift_retain();
    v5(v1);
    return swift_release();
  }
  return result;
}

uint64_t TableColumnForEachState.ChildContent.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x697463656C6C6F43;
  v0._object = (void *)0xEB000000005B6E6FLL;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

void TableColumnForEachState.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_18764D448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t TableColumnForEachState.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((void (*)(void))TableColumnForEachState.deinit);
}

void type metadata accessor for TableColumnForEachState.Info()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableColumnForEachState.Info.Init()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableColumnForEach.MakeList()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for Attribute<TableColumnList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<TableColumnList>)
  {
    type metadata accessor for TableColumnList();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableColumnList>);
  }
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in TableColumnForEach<A, B, C, D, E>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in TableColumnForEach<A, B, C, D, E>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for TableColumnForEach<A, B, C, D, E>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnForEach<A, B, C, D, E>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TableColumnForEach()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnForEach(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TableColumnForEach(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnForEach(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18764D9B8 + 4 * byte_187C482B0[v10]))();
  }
}

void storeEnumTagSinglePayload for TableColumnForEach(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18764DB38()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18764DBB0);
}

void sub_18764DB40(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18764DB48);
  JUMPOUT(0x18764DBB0);
}

void sub_18764DB88()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18764DBB0);
}

void sub_18764DB90()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18764DBB0);
}

uint64_t sub_18764DB98(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18764DBB0);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18764DBACLL);
    JUMPOUT(0x18764DBA4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata completion function for TableColumnForEachState()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
}

uint64_t sub_18764DC78()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t type metadata completion function for TableColumnForEachState.Item()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

void type metadata accessor for TableColumnForEachState.Item()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableColumnForEachState.ElementCount()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableColumnForEach.IDGenerator()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for _AttributeBody in TableColumnForEach<A, B, C, D, E>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableColumnForEachState<A, B, C>.Info.Init()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for TableColumnForEach.DynamicTableColumnList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(a1, a2, *(_QWORD *)(v2 + 48), *(unsigned int *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40)) & 1;
}

void partial apply for closure #1 in TableColumnForEachState.forEachItem(from:do:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in TableColumnForEachState.forEachItem(from:do:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_18764DE80(char a1)
{
  return a1 & 1;
}

uint64_t *specialized TableColumnForEachState.Item.init(id:columns:subgraph:index:offset:seed:state:isConstant:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  uint64_t *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;

  v15 = *v8;
  swift_weakInit();
  *((_BYTE *)v8 + *(_QWORD *)(*v8 + 192)) = 0;
  *((_BYTE *)v8 + *(_QWORD *)(*v8 + 200)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 88) - 8) + 32))((uint64_t)v8 + *(_QWORD *)(*v8 + 128), a1);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 + 136)) = a2;
  swift_weakAssign();
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 152)) = a3;
  v16 = (uint64_t)v8 + *(_QWORD *)(*v8 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v16, a4, AssociatedTypeWitness);
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 168)) = a5;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 + 176)) = a6;
  *((_BYTE *)v8 + *(_QWORD *)(*v8 + 184)) = a8;
  return v8;
}

void type metadata accessor for TableColumnForEachState.ChildContent()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in TableColumnForEachState.count()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in TableColumnForEachState.count()(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t type metadata completion function for TableColumnForEachState.ChildContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnForEachState.ChildContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t destroy for TableColumnForEachState.ChildContent(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_DWORD *initializeWithCopy for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithCopy for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *initializeWithTake for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithTake for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnForEachState.ChildContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18764E328 + 4 * byte_187C482BF[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for TableColumnForEachState.ChildContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void base witness table accessor for _AttributeBody in TableColumnForEachState<A, B, C>.ChildContent()
{
  JUMPOUT(0x18D75FFDCLL);
}

void specialized TableColumnForEachState.ChildContent.info.getter()
{
  type metadata accessor for TableColumnForEachState.Info();
}

uint64_t sub_18764E594()
{
  return *(_QWORD *)AGGraphGetValue();
}

void partial apply for closure #1 in TableColumnForEachState.ChildContent.updateValue()()
{
  closure #1 in TableColumnForEachState.ChildContent.updateValue()();
}

uint64_t AppPreview.content.getter()
{
  return swift_retain();
}

uint64_t AppPreview.content.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AppPreview.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AppPreview.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppPreview.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AppPreview.description.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AppPreviewHost.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  AppPreviewHost.init()();
  return v0;
}

uint64_t AppPreviewHost.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[16];
  uint64_t v15;
  uint64_t v16;
  char v17;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = -1;
  type metadata accessor for SceneBridge();
  swift_allocObject();
  *(_QWORD *)(v0 + 40) = SceneBridge.init()();
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for SceneStorageValues();
  v4 = (_QWORD *)swift_allocObject();
  v4[3] = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v4[6] = 0;
  swift_unknownObjectWeakInit();
  v4[2] = v3;
  v4[4] = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v1 + 48) = v4;
  v5 = static AppGraph.shared;
  if (static AppGraph.shared)
  {
    swift_retain();
    static Update.ensure<A>(_:)();
    if (*(_QWORD *)(v14[0] + 16))
    {
      outlined init with copy of SceneList.Item(v14[0] + 32, (uint64_t)v14);
      swift_bridgeObjectRelease();
      v6 = v15;
      v7 = v16;
      v8 = v17;
      outlined copy of SceneID(v15, v16, v17);
      outlined destroy of SceneList.Item((uint64_t)v14);
      v9 = *(_QWORD *)(v1 + 16);
      v10 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 16) = v6;
      *(_QWORD *)(v1 + 24) = v7;
      v11 = *(_BYTE *)(v1 + 32);
      *(_BYTE *)(v1 + 32) = v8;
      outlined consume of SceneID?(v9, v10, v11);
      v12 = swift_retain();
      specialized AppGraph.addObserver(_:)(v12, v5);
      swift_release();
      swift_release();
      return v1;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall AppPreviewHost.invalidateEverything()()
{
  if (static AppGraph.shared)
  {
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
  }
}

void closure #1 in AppPreviewHost.invalidateEverything()()
{
  void *v0;

  GraphHost.incrementPhase()();
  v0 = (void *)GraphHost.graph.getter();
  AGGraphInvalidateAllValues();

  GraphHost.emptyTransaction(_:)();
  GraphHost.flushTransactions()();
}

uint64_t AppPreviewHost.previews.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  _BYTE v17[48];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29[36];

  AppPreviewHost.sceneItem()(v29);
  outlined init with copy of SceneList.Item.Value(v29, (uint64_t)v24);
  if (v28)
  {
    outlined destroy of SceneList.Item((uint64_t)v29);
    outlined destroy of SceneList.Item.Value((uint64_t)v24);
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v2 = v24[0];
    v1 = v24[1];
    v4 = v24[2];
    v3 = v25;
    v5 = v26;
    v6 = v27;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AppPreview>, (uint64_t)&type metadata for AppPreview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v0 = swift_allocObject();
    *(_OWORD *)(v0 + 16) = xmmword_187BF9830;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    swift_weakInit();
    swift_weakInit();
    swift_weakInit();
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v22, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v17[40] = 2;
    v18 = 0;
    v19 = 0;
    v20 = -1;
    v21 = 0;
    outlined init with copy of RootModifier((uint64_t)&v16, (uint64_t)v22 + 8);
    *(_QWORD *)&v22[0] = v2;
    swift_retain();
    outlined destroy of RootModifier((uint64_t)&v16);
    type metadata accessor for ModifiedContent<AnyView, RootModifier>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v7 = AnyView.init<A>(_:)();
    if (v5)
    {
      v15 = v7;
      EnvironmentValues.init()();
      v16 = v22[0];
      v8 = Text.resolveString(in:with:idiom:)();
      v9 = v5;
      v10 = v4;
      v11 = v1;
      v13 = v12;
      swift_release();
      swift_release();
      v7 = v15;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = v4;
      v11 = v1;
      v13 = 0;
    }
    *(_QWORD *)(v0 + 32) = v7;
    *(_QWORD *)(v0 + 40) = v8;
    *(_QWORD *)(v0 + 48) = v13;
    swift_release();
    outlined consume of Text?(v11, v10, v3, v9);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
    outlined destroy of SceneList.Item((uint64_t)v29);
  }
  return v0;
}

uint64_t AppPreviewHost.sceneItem()@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  char v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD __src[34];
  _QWORD __dst[36];

  MEMORY[0x18D75B908]();
  v6 = *(unsigned __int8 *)(v1 + 32);
  if (v6 == 255 || !static AppGraph.shared)
    goto LABEL_34;
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v23 = a1;
  if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E0CFED28])
  {
    v7 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v4 = __src;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    goto LABEL_35;
  v9 = v7 + 32;
  swift_bridgeObjectRetain();
  outlined copy of SceneID?(v3, v2, v6);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v9, (uint64_t)__src);
    v12 = __src[16];
    v11 = __src[17];
    if ((__src[18] & 1) == 0)
      break;
    if ((v6 & 1) == 0)
    {
      v24 = _typeName(_:qualified:)();
      v26 = v13;
      v14._countAndFlagsBits = 45;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v11 = v26;
      swift_bridgeObjectRetain();
      v16 = v2;
      if (v24 == v3)
        goto LABEL_25;
      goto LABEL_26;
    }
    if (__src[16] == v3 && LOBYTE(__src[17]) == v2)
      goto LABEL_29;
LABEL_12:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v9 += 272;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  if ((v6 & 1) == 0)
  {
    v17 = __src[16] == v3 && __src[17] == v2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_29;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v25 = _typeName(_:qualified:)();
  v27 = v18;
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v16 = v27;
  if (v12 != v25)
    goto LABEL_26;
LABEL_25:
  if (v11 != v16)
  {
LABEL_26:
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_29;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease_n();
LABEL_29:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, 0x110uLL);
  swift_bridgeObjectRelease();
  outlined consume of SceneID?(v3, v2, v6);
  swift_bridgeObjectRelease();
  if (!__dst[32])
  {
    while (1)
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_35:
      outlined copy of SceneID?(v3, v2, v6);
      swift_bridgeObjectRetain();
LABEL_32:
      v4[32] = 0u;
      v4[33] = 0u;
      v4[30] = 0u;
      v4[31] = 0u;
      v4[28] = 0u;
      v4[29] = 0u;
      v4[26] = 0u;
      v4[27] = 0u;
      v4[24] = 0u;
      v4[25] = 0u;
      v4[22] = 0u;
      v4[23] = 0u;
      v4[20] = 0u;
      v4[21] = 0u;
      v4[18] = 0u;
      v4[19] = 0u;
      v4[17] = 0u;
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(v3, v2, v6);
      swift_bridgeObjectRelease();
    }
  }
  memcpy(v23, __dst, 0x110uLL);
  return static Update.end()();
}

uint64_t AppPreviewHost.deinit()
{
  uint64_t v0;

  outlined consume of SceneID?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release();
  swift_release();
  return v0;
}

uint64_t AppPreviewHost.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of SceneID?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AppGraphObserver.scenesDidChange(phaseChanged:) in conformance AppPreviewHost(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AppPreviewHost and conformance AppPreviewHost, a2, (uint64_t (*)(uint64_t))type metadata accessor for AppPreviewHost, (uint64_t)&protocol conformance descriptor for AppPreviewHost);
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  return swift_release();
}

void partial apply for closure #1 in AppPreviewHost.invalidateEverything()()
{
  closure #1 in AppPreviewHost.invalidateEverything()();
}

void type metadata accessor for ModifiedContent<AnyView, RootModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>);
  }
}

uint64_t destroy for AppPreview()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for AppPreview(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AppPreview(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AppPreview(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppPreview()
{
  return &type metadata for AppPreview;
}

uint64_t type metadata accessor for AppPreviewHost()
{
  return objc_opt_self();
}

uint64_t method lookup function for AppPreviewHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppPreviewHost.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for _SetStorage<UIOpenURLContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>)
  {
    type metadata accessor for UIOpenURLContext();
    lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIOpenURLContext, MEMORY[0x1E0DEFCF8]);
    v0 = type metadata accessor for _SetStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>);
  }
}

unint64_t type metadata accessor for UIOpenURLContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIOpenURLContext;
  if (!lazy cache variable for type metadata for UIOpenURLContext)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  }
  return result;
}

void type metadata accessor for _SetStorage<ToolbarPlacement.Role>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>)
  {
    lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role();
    v0 = type metadata accessor for _SetStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>);
  }
}

uint64_t View.navigationPresentationAdaptor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[40];

  outlined init with copy of TableColumnList(a1, (uint64_t)v6);
  MEMORY[0x18D75B4AC](v6, a2, &type metadata for NavigationPresentationAdaptorModifier, a3);
  return outlined destroy of _PresentationTransitionOutputs((uint64_t)v6);
}

uint64_t dispatch thunk of UINavigationPresentationAdaptor.pushViewController(_:animated:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for UINavigationPresentationAdaptorContext()
{
  return &type metadata for UINavigationPresentationAdaptorContext;
}

uint64_t sub_18764F8DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for NavigationPresentationAdaptorModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t assignWithCopy for NavigationPresentationAdaptorModifier(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for NavigationPresentationAdaptorModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationPresentationAdaptorModifier()
{
  return &type metadata for NavigationPresentationAdaptorModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationPresentationAdaptorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationPresentationAdaptorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationPresentationAdaptorModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationPresentationAdaptorModifier()
{
  type metadata accessor for _GraphValue<NavigationPresentationAdaptorModifier>();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationPresentationAdaptorModifier()
{
  return &protocol witness table for NavigationPresentationAdaptorModifier;
}

void type metadata accessor for _GraphValue<NavigationPresentationAdaptorModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>);
  }
}

ValueMetadata *type metadata accessor for _GraphInputs.NavigationPresentationAdaptorKey()
{
  return &type metadata for _GraphInputs.NavigationPresentationAdaptorKey;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.NavigationPresentationAdaptorKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static _GraphInputs.NavigationPresentationAdaptorKey.defaultValue;
  return result;
}

void View.focusSection()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View._focusSection()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return MEMORY[0x18D75B4AC](&v3, a1, &unk_1E1ADA1B8, a2);
}

uint64_t View.focusSection(withSpeedBumpsAtEdges:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &unk_1E1ADA1B8, a3);
}

uint64_t type metadata accessor for FocusSectionResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FocusSectionResponder);
}

uint64_t type metadata completion function for FocusSectionResponder()
{
  return swift_initClassMetadata2();
}

double static _FocusSectionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int OffsetAttribute2;
  int v27;
  double result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  double *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  double v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v35 = *a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v19 = *(_DWORD *)(a2 + 76);
  v20 = *(_DWORD *)(a2 + 80);
  v63 = *(_QWORD *)a2;
  v21 = v6;
  LODWORD(v64) = v6;
  v65 = v7;
  v40 = v9;
  v41 = v18;
  v66 = v9;
  v67 = v8;
  v22 = v8;
  v23 = v10;
  v68 = __PAIR64__(v11, v10);
  v43 = v14;
  v44 = v11;
  v69 = v13;
  v70 = v12;
  v71 = v15;
  v72 = v14;
  v42 = v16;
  v73 = v16;
  v37 = v20;
  v38 = v17;
  v74 = v17;
  v75 = v18;
  v39 = v19;
  v76 = v19;
  v77 = v20;
  a3(&v45);
  v63 = v12;
  LODWORD(v64) = v15;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v34 = a4;
    type metadata accessor for FocusSectionResponder(0);
    v24 = swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(_QWORD *)(v24 + 248) = 0;
    *(_QWORD *)(v24 + 256) = 0;
    *(_WORD *)(v24 + 264) = 512;
    *(_BYTE *)(v24 + 266) = 0;
    *(_QWORD *)(v24 + 272) = 0;
    swift_release();
    v63 = v5;
    v36 = v21;
    LODWORD(v64) = v21;
    v65 = v7;
    v66 = v40;
    v67 = v22;
    v68 = __PAIR64__(v44, v23);
    v69 = v13;
    v70 = v12;
    v71 = v15;
    v72 = v43;
    v73 = v42;
    v74 = v38;
    v75 = v41;
    v76 = v39;
    v77 = v37;
    v33 = DefaultLayoutViewResponder.init(inputs:)();
    v63 = v5;
    LODWORD(v64) = v21;
    v65 = v7;
    v66 = v40;
    v67 = v22;
    v68 = __PAIR64__(v44, v23);
    v69 = v13;
    v70 = v12;
    v71 = v15;
    v72 = v43;
    v73 = v42;
    v74 = v38;
    v75 = v41;
    v76 = v39;
    v77 = v37;
    v32 = _ViewInputs.transform.getter();
    v63 = v5;
    LODWORD(v64) = v21;
    v65 = v7;
    v66 = v40;
    v67 = v22;
    v68 = __PAIR64__(v44, v23);
    v69 = v13;
    v70 = v12;
    v71 = v15;
    v72 = v43;
    v73 = v42;
    v74 = v38;
    v75 = v41;
    v76 = v39;
    v77 = v37;
    v31 = _ViewInputs.animatedPosition()();
    v63 = v5;
    LODWORD(v64) = v21;
    v65 = v7;
    v66 = v40;
    v67 = v22;
    v68 = __PAIR64__(v44, v23);
    v69 = v13;
    v70 = v12;
    v71 = v15;
    v72 = v43;
    v73 = v42;
    v74 = v38;
    v75 = v41;
    v76 = v39;
    v77 = v37;
    v30 = _ViewInputs.animatedSize()();
    v63 = v5;
    LODWORD(v64) = v21;
    v65 = v7;
    v66 = v40;
    v67 = v22;
    v68 = __PAIR64__(v44, v23);
    v69 = v13;
    v70 = v12;
    v71 = v15;
    v72 = v43;
    v73 = v42;
    v74 = v38;
    v75 = v41;
    v76 = v39;
    v77 = v37;
    swift_getKeyPath();
    v29 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v63 = v5;
    LODWORD(v64) = v21;
    v65 = v7;
    v66 = v40;
    v67 = v22;
    v68 = __PAIR64__(v44, v23);
    v69 = v13;
    v70 = v12;
    v71 = v15;
    v72 = v43;
    v73 = v42;
    v74 = v38;
    v75 = v41;
    v76 = v39;
    v77 = v37;
    swift_getKeyPath();
    v25 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    LODWORD(v63) = v35;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_FocusSectionModifier>, (uint64_t)&unk_1E1ADA1B8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v63 = v45;
    v64 = *(_QWORD *)&v46;
    v27 = _ViewOutputs.viewResponders()();
    v63 = __PAIR64__(v31, v32);
    v64 = __PAIR64__(v29, v30);
    v65 = __PAIR64__(OffsetAttribute2, v25);
    v66 = v27;
    v68 = v33;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter();
    swift_retain();
    LODWORD(v24) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v47 = v5;
    v48 = v36;
    v49 = v7;
    v50 = v40;
    v51 = v22;
    v52 = v23;
    v53 = v44;
    v54 = v13;
    v55 = v12;
    v56 = v15;
    v57 = v43;
    v58 = v42;
    v59 = v38;
    v60 = v41;
    v61 = v39;
    v62 = v37;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)(&v47, v24, (uint64_t)&v63);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v63);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v63) = 0;
    _ViewOutputs.subscript.setter();
    swift_release();
    a4 = v34;
  }
  *(_QWORD *)a4 = v45;
  result = v46;
  a4[1] = v46;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance _FocusSectionModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t FocusSectionResponderFilter.updateValue()()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t *Value;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char *v13;
  char v14;
  char v15;
  char *v16;
  char v17;
  char v18;
  unsigned __int8 *v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;

  AGGraphGetValue();
  v2 = v1;
  Value = (uint64_t *)AGGraphGetValue();
  v5 = v4;
  v6 = *Value;
  v7 = Value[1];
  v8 = Value[2];
  v9 = Value[3];
  v10 = Value[4];
  AGGraphGetValue();
  v12 = v11;
  v13 = (char *)AGGraphGetValue();
  v33 = v14;
  v15 = *v13;
  v16 = (char *)AGGraphGetValue();
  v32 = v17;
  v18 = *v16;
  v19 = (unsigned __int8 *)AGGraphGetValue();
  v31 = v20;
  v21 = *v19;
  v22 = *(_QWORD *)(v0 + 32);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v23 & 1) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  if ((v2 & 1) != 0
    || (v5 & 1) != 0
    || (v12 & 1) != 0
    || (v33 & 1) != 0
    || (v32 & 1) != 0
    || (v31 & 1) != 0
    || !AGGraphGetOutputValue())
  {
    *(_QWORD *)&v34 = v7;
    *((_QWORD *)&v34 + 1) = v8;
    *(_QWORD *)&v35 = v9;
    *((_QWORD *)&v35 + 1) = v10;
    v24 = swift_retain();
    *(double *)&v25 = MEMORY[0x18D755E9C](v24);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v26, v25));
    *(_QWORD *)(v22 + 208) = v6;
    *(_OWORD *)(v22 + 216) = v34;
    *(_OWORD *)(v22 + 232) = v35;
    swift_retain();
    v27 = swift_release();
    *(double *)(v22 + 248) = MEMORY[0x18D75BE3C](v27);
    *(_QWORD *)(v22 + 256) = v28;
    *(_BYTE *)(v22 + 264) = v15;
    *(_BYTE *)(v22 + 265) = v18;
    FocusSectionResponder.speedBumpEdges.setter(v21);
    swift_release();
  }
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v30 + 32) = v22;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void FocusSectionResponder.speedBumpEdges.setter(unsigned __int8 a1)
{
  uint64_t v1;
  void *v3;
  int v4;
  id v5;
  unsigned __int8 *v6;
  id v7;
  char *v8;
  char v9;
  char v10;

  *(_BYTE *)(v1 + 266) = a1;
  v3 = *(void **)(v1 + 272);
  if (v3)
  {
    v4 = *(unsigned __int8 *)(v1 + 265);
    v8 = *(char **)(v1 + 272);
    if (v4 == 2)
    {
      v10 = 0;
      v5 = v3;
      v6 = (unsigned __int8 *)&v10;
    }
    else
    {
      v9 = v4 & 1;
      v7 = v3;
      v6 = (unsigned __int8 *)&v9;
    }
    *(_QWORD *)&v8[direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges] = specialized UIRectEdge.init(_:layoutDirection:)(a1, v6);

  }
}

void FocusSectionResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();

}

uint64_t FocusSectionResponder.__deallocating_deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for FocusSectionResponder()
{
  return type metadata accessor for FocusSectionResponder(0);
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance FocusSectionResponder()
{
  specialized FocusSectionResponder.hostedItem.getter();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for BaseFocusResponder.isEnabled.getter in conformance FocusSectionResponder()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 264);
}

uint64_t protocol witness for AnyUIKitHostedFocusItemResponder.hostedItem.getter in conformance FocusSectionResponder()
{
  specialized FocusSectionResponder.hostedItem.getter();
  return swift_unknownObjectRetain();
}

uint64_t @objc UIKitFocusSectionResponderItem._focusSpeedBumpEdges.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges);
}

uint64_t @objc UIKitFocusSectionResponderItem._focusSpeedBumpEdges.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges) = a3;
  return result;
}

uint64_t @objc UIKitFocusSectionResponderItem._focusGuideBehavior(forFocusMovement:)()
{
  return 1;
}

id UIKitFocusSectionResponderItem.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitFocusSectionResponderItem(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitFocusSectionResponderItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitFocusSectionResponderItem);
}

uint64_t type metadata completion function for UIKitFocusSectionResponderItem()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for UIKitFocusSectionResponderItem()
{
  return type metadata accessor for UIKitFocusSectionResponderItem(0);
}

uint64_t sub_18765097C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _FocusSectionModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for _FocusSectionModifier()
{
  return &unk_1E1ADA1B8;
}

_UNKNOWN **base witness table accessor for ViewModifier in _FocusSectionModifier()
{
  return &protocol witness table for _FocusSectionModifier;
}

uint64_t specialized FocusSectionResponder.hostedItem.getter()
{
  uint64_t v0;
  uint64_t result;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  _BYTE *v5;
  _OWORD *v6;
  objc_class *v7;
  id v8;
  void *v9;
  objc_super v10;
  unsigned __int8 v11;

  result = *(_QWORD *)(v0 + 272);
  if (!result)
  {
    v2 = *(unsigned __int8 *)(v0 + 265);
    v3 = *(_BYTE *)(v0 + 266);
    if (v2 == 2)
      v11 = 0;
    else
      v11 = v2 & 1;
    swift_retain();
    v4 = specialized UIRectEdge.init(_:layoutDirection:)(v3, &v11);
    v5 = objc_allocWithZone((Class)type metadata accessor for UIKitFocusSectionResponderItem(0));
    *(_QWORD *)&v5[direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges] = v4;
    swift_weakInit();
    swift_unknownObjectWeakInit();
    v6 = &v5[direct field offset for UIKitContainerFocusResponderItem.frame];
    *v6 = 0u;
    v6[1] = 0u;
    v5[direct field offset for UIKitContainerFocusResponderItem.isEnabled] = 1;
    *(_QWORD *)&v5[direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace] = 0;
    swift_weakAssign();
    type metadata accessor for UIKitContainerFocusResponderItem<FocusSectionResponder>(0);
    v10.receiver = v5;
    v10.super_class = v7;
    v8 = objc_msgSendSuper2(&v10, sel_init);
    swift_release();
    v9 = *(void **)(v0 + 272);
    *(_QWORD *)(v0 + 272) = v8;

    return *(_QWORD *)(v0 + 272);
  }
  return result;
}

void type metadata accessor for UIKitContainerFocusResponderItem<FocusSectionResponder>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusSectionResponder>)
  {
    v2 = type metadata accessor for FocusSectionResponder(255);
    v4 = type metadata accessor for UIKitContainerFocusResponderItem(a1, v2, (uint64_t)&protocol witness table for FocusSectionResponder, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusSectionResponder>);
  }
}

unint64_t lazy protocol witness table accessor for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter;
  if (!lazy protocol witness table cache variable for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusSectionResponderFilter, &unk_1E1AF2F68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter);
  }
  return result;
}

uint64_t specialized FocusSectionResponder.__allocating_init(inputs:)()
{
  uint64_t v0;

  type metadata accessor for FocusSectionResponder(0);
  v0 = swift_allocObject();
  swift_retain();
  ViewTransform.init()();
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0;
  *(_WORD *)(v0 + 264) = 512;
  *(_BYTE *)(v0 + 266) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t specialized FocusSectionResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  type metadata accessor for FocusSectionResponder(0);
  v0 = swift_allocObject();
  swift_retain();
  ViewTransform.init()();
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0;
  *(_WORD *)(v0 + 264) = 512;
  *(_BYTE *)(v0 + 266) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void *type metadata accessor for FocusSectionResponderFilter()
{
  return &unk_1E1AF2F68;
}

ValueMetadata *type metadata accessor for GenericViewControllerRepresentable()
{
  return &type metadata for GenericViewControllerRepresentable;
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance GenericViewControllerRepresentable()
{
  id *v0;

  return *v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityTouchInfo(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
}

uint64_t AccessibilityDirectTouchOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::AccessibilityDirectTouchOptions __swiftcall AccessibilityDirectTouchOptions.init(rawValue:)(SwiftUI::AccessibilityDirectTouchOptions rawValue)
{
  SwiftUI::AccessibilityDirectTouchOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AccessibilityDirectTouchOptions.silentOnTouch.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityDirectTouchOptions.requiresActivation.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.accessibilityDirectTouch(_:options:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[2];

  v6 = *a2;
  v8[0] = a1 & 1;
  v8[1] = v6;
  lazy protocol witness table accessor for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, (uint64_t)v8, 1, a3, (uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, a4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.TouchInfoKey, &type metadata for AccessibilityProperties.TouchInfoKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityDirectTouch(_:options:)@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _QWORD v8[2];

  v6 = *a2;
  v8[0] = a1 & 1;
  v8[1] = v6;
  lazy protocol witness table accessor for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey();
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, (uint64_t)v8, 1, a3, a4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDirectTouchOptions, &type metadata for AccessibilityDirectTouchOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDirectTouchOptions, &type metadata for AccessibilityDirectTouchOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDirectTouchOptions, &type metadata for AccessibilityDirectTouchOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDirectTouchOptions, &type metadata for AccessibilityDirectTouchOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDirectTouchOptions()
{
  return &type metadata for AccessibilityDirectTouchOptions;
}

ValueMetadata *type metadata accessor for AccessibilityTouchInfo()
{
  return &type metadata for AccessibilityTouchInfo;
}

uint64_t KeyboardShortcutBridge.updateKeyCommands(_:)(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::UInt v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(id, _QWORD, _QWORD, uint64_t, uint64_t);
  void *v29;
  id v30;
  char v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  unsigned __int8 v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  Swift::UInt v80;
  unsigned __int8 v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  void (*v87)(_QWORD *);
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  char v93;
  _QWORD *v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  char v100;
  unsigned __int8 v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  _DWORD *v116;
  unint64_t v117;
  uint64_t v118;
  void (*v119)(id, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t *v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  Swift::UInt v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v114 = (_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings);
  v115 = result;
  v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings + 8);
  v3 = v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_currentBindings;
  if (v2 != -1)
  {
    v4 = *(_DWORD *)(v3 + 8);
    if (v4 != -1 && v2 == v4)
      return result;
  }
  v116 = (_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_currentBindings);
  v6 = *(_QWORD *)v3;
  v7 = *(_QWORD *)v114;
  v131 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v131;
  v110 = *(_QWORD *)(v131 + 16);
  if (!v110)
  {
    swift_bridgeObjectRelease();
    v11 = v116;
    goto LABEL_84;
  }
  v9 = 0;
  v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
  v111 = v131 + 32;
  v11 = v116;
  v109 = v131;
  v126 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
  while (1)
  {
    if (v9 >= *(_QWORD *)(v8 + 16))
      goto LABEL_100;
    v12 = v111 + 40 * v9;
    v14 = *(_QWORD *)v12;
    v13 = *(_QWORD *)(v12 + 8);
    v127 = *(_QWORD *)v12;
    v112 = v9;
    if (*(_BYTE *)(v12 + 32))
      break;
    if (v13 != v14)
    {
      v46 = (v13 << 6) - 32;
      while (v14 < v13)
      {
        if (v13-- < 1)
          goto LABEL_87;
        if ((unint64_t)v13 >= *(_QWORD *)(*(_QWORD *)v11 + 16))
          goto LABEL_88;
        v48 = *(_QWORD *)v11 + v46;
        v50 = *(_QWORD *)v48;
        v49 = *(_QWORD *)(v48 + 8);
        v51 = *(_QWORD *)(v48 + 16);
        v52 = *(_BYTE *)(v48 + 24);
        swift_beginAccess();
        v53 = *v10;
        if (*(_QWORD *)(*v10 + 16)
          && (v54 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v49, v51, v52), (v55 & 1) != 0))
        {
          v56 = *(_QWORD *)(v53 + 56) + 24 * v54;
          v57 = *(void **)v56;
          v121 = *(_QWORD *)(v56 + 8);
          v58 = *(_QWORD *)(v56 + 16);
          swift_endAccess();
          outlined init with copy of KeyboardShortcutSource?(v115, (uint64_t)&v131);
          v59 = v134;
          if (v134)
          {
            v122 = v49;
            v60 = v58;
            v61 = v135;
            __swift_project_boxed_opaque_existential_1(&v131, v134);
            v119 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            v62 = v57;
            swift_retain();
            swift_retain();
            v119(v62, v121, v60, v59, v61);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
            v49 = v122;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            v63 = v57;
            swift_retain();
            swift_retain();
            outlined destroy of KeyboardShortcutSource?((uint64_t)&v131);
          }
          swift_beginAccess();
          v64 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v49, v51, v52);
          v65 = 0;
          if ((v66 & 1) != 0)
          {
            v67 = v64;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v69 = *v126;
            v130 = *v126;
            *v126 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              v69 = v130;
            }
            swift_bridgeObjectRelease();
            v65 = *(void **)(*(_QWORD *)(v69 + 56) + 24 * v67);
            specialized _NativeDictionary._delete(at:)(v67, v69);
            *v126 = v69;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();

          swift_bridgeObjectRelease();
          outlined consume of KeyboardShortcutBridge.Shortcut?(v65);
          swift_bridgeObjectRelease();
          v11 = v116;
          v10 = v126;
        }
        else
        {
          swift_endAccess();
        }
        v46 -= 64;
        v14 = v127;
        if (v127 == v13)
          goto LABEL_8;
      }
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      swift_bridgeObjectRelease();
LABEL_84:
      v108 = v114[2];
      *(_QWORD *)v11 = *(_QWORD *)v114;
      v11[2] = v108;
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRelease();
    }
LABEL_8:
    v9 = v112 + 1;
    v8 = v109;
    if (v112 + 1 == v110)
      goto LABEL_89;
  }
  if (*(_BYTE *)(v12 + 32) == 1)
  {
    if (v14 != v13)
    {
      if (v13 < v14)
        goto LABEL_101;
      type metadata accessor for UIKeyCommand();
      v15 = (v14 << 6) + 88;
      v16 = v14;
      while (1)
      {
        if (v16 >= v13)
        {
          __break(1u);
          goto LABEL_91;
        }
        if (v14 < 0)
          goto LABEL_92;
        if ((unint64_t)v16 >= *(_QWORD *)(*(_QWORD *)v114 + 16))
          goto LABEL_94;
        v118 = v16;
        v120 = v15;
        v19 = (_QWORD *)(*(_QWORD *)v114 + v15);
        v20 = *(v19 - 6);
        v21 = *(v19 - 5);
        v22 = *((_BYTE *)v19 - 32);
        v128 = *(_OWORD *)(v19 - 3);
        v23 = *(v19 - 1);
        v24 = *v19;
        v124 = *(v19 - 7);
        v131 = v124;
        v132 = v20;
        v133 = v21;
        LOBYTE(v134) = v22;
        v135 = v128;
        v136 = v23;
        v137 = v24;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        v125 = UIKeyCommand.init(_:)((uint64_t)&v131);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        if (*(_QWORD *)(*v10 + 16))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v124, v20, v21, v22);
          if ((v25 & 1) != 0)
          {
            swift_endAccess();
            goto LABEL_17;
          }
        }
        swift_endAccess();
        outlined init with copy of KeyboardShortcutSource?(v115, (uint64_t)&v131);
        v26 = v134;
        if (v134)
        {
          v27 = v135;
          __swift_project_boxed_opaque_existential_1(&v131, v134);
          v28 = *(void (**)(id, _QWORD, _QWORD, uint64_t, uint64_t))(v27 + 8);
          swift_bridgeObjectRetain();
          v29 = v125;
          v28(v125, v128, *((_QWORD *)&v128 + 1), v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
        }
        else
        {
          swift_bridgeObjectRetain();
          outlined destroy of KeyboardShortcutSource?((uint64_t)&v131);
          v29 = v125;
        }
        swift_beginAccess();
        swift_retain();
        v30 = v29;
        v31 = swift_isUniquelyReferenced_nonNull_native();
        v32 = (_QWORD *)*v126;
        *v126 = 0x8000000000000000;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v20, v21, v22);
        v35 = v32[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_96;
        v38 = v33;
        if (v32[3] >= v37)
        {
          if ((v31 & 1) != 0)
          {
            if ((v33 & 1) == 0)
              goto LABEL_34;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v38 & 1) == 0)
              goto LABEL_34;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v31);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v20, v21, v22);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_103;
          v34 = v39;
          if ((v38 & 1) == 0)
          {
LABEL_34:
            v32[(v34 >> 6) + 8] |= 1 << v34;
            v41 = v32[6] + 32 * v34;
            *(_QWORD *)v41 = v124;
            *(_QWORD *)(v41 + 8) = v20;
            *(_QWORD *)(v41 + 16) = v21;
            *(_BYTE *)(v41 + 24) = v22;
            v42 = v32[7] + 24 * v34;
            *(_QWORD *)v42 = v30;
            *(_OWORD *)(v42 + 8) = v128;
            v43 = v32[2];
            v44 = __OFADD__(v43, 1);
            v45 = v43 + 1;
            if (v44)
              goto LABEL_98;
            v32[2] = v45;
            swift_bridgeObjectRetain();
            goto LABEL_16;
          }
        }
        v17 = v32[7] + 24 * v34;
        v18 = *(void **)v17;
        swift_release();

        *(_QWORD *)v17 = v30;
        *(_OWORD *)(v17 + 8) = v128;
LABEL_16:
        *v126 = (uint64_t)v32;
        swift_bridgeObjectRelease();
        v10 = v126;
        swift_bridgeObjectRelease();
        swift_endAccess();
        v11 = v116;
        v14 = v127;
LABEL_17:
        v16 = v118 + 1;

        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        v15 = v120 + 64;
        if (v13 == v118 + 1)
          goto LABEL_8;
      }
    }
    goto LABEL_8;
  }
  v70 = *(_QWORD *)(v12 + 16);
  v71 = *(_QWORD *)(v12 + 24);
  if (v70 == v71)
    goto LABEL_8;
  if (v71 < v70)
    goto LABEL_102;
  v72 = (v70 << 6) + 88;
  v73 = *(_QWORD *)(v12 + 16);
  v117 = v73;
  v113 = *(_QWORD *)(v12 + 24);
  while (2)
  {
    if ((uint64_t)v73 < v71)
    {
      if (v70 < 0)
        goto LABEL_93;
      if (v73 >= *(_QWORD *)(*(_QWORD *)v114 + 16))
        goto LABEL_95;
      v123 = v72;
      v77 = (_QWORD *)(*(_QWORD *)v114 + v72);
      v79 = *(v77 - 7);
      v78 = *(v77 - 6);
      v80 = *(v77 - 5);
      v81 = *((_BYTE *)v77 - 32);
      v129 = *(_OWORD *)(v77 - 3);
      v82 = v10;
      v83 = *(v77 - 1);
      v84 = *v77;
      swift_beginAccess();
      if (*(_QWORD *)(*v82 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v79, v78, v80, v81);
        if ((v85 & 1) != 0)
        {
          swift_endAccess();
          swift_beginAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          v87 = specialized Dictionary.subscript.modify(&v131, v79, v78, v80, v81);
          v88 = *(void **)v86;
          if (*(_QWORD *)v86)
          {
            *(_OWORD *)(v86 + 8) = v129;
            outlined copy of KeyboardShortcutBridge.Shortcut?(v88);
            swift_retain();
            ((void (*)(uint64_t *, _QWORD))v87)(&v131, 0);
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease_n();
            v71 = v113;
            swift_release_n();

          }
          else
          {
            ((void (*)(uint64_t *, _QWORD))v87)(&v131, 0);
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease_n();
          }
          v76 = v123;
          v70 = v117;
LABEL_60:
          ++v73;
          v72 = v76 + 64;
          v10 = v126;
          if (v71 == v73)
            goto LABEL_8;
          continue;
        }
      }
      swift_endAccess();
      type metadata accessor for UIKeyCommand();
      v131 = v79;
      v132 = v78;
      v133 = v80;
      LOBYTE(v134) = v81;
      v135 = v129;
      v136 = v83;
      v137 = v84;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v89 = UIKeyCommand.init(_:)((uint64_t)&v131);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of KeyboardShortcutSource?(v115, (uint64_t)&v131);
      v90 = v134;
      if (v134)
      {
        v91 = v135;
        __swift_project_boxed_opaque_existential_1(&v131, v134);
        (*(void (**)(id, _QWORD, _QWORD, uint64_t, uint64_t))(v91 + 8))(v89, v129, *((_QWORD *)&v129 + 1), v90, v91);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
      }
      else
      {
        outlined destroy of KeyboardShortcutSource?((uint64_t)&v131);
      }
      swift_beginAccess();
      swift_retain();
      v92 = v89;
      v93 = swift_isUniquelyReferenced_nonNull_native();
      v94 = (_QWORD *)*v126;
      *v126 = 0x8000000000000000;
      v96 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v78, v80, v81);
      v97 = v94[2];
      v98 = (v95 & 1) == 0;
      v99 = v97 + v98;
      if (__OFADD__(v97, v98))
        goto LABEL_97;
      v100 = v95;
      if (v94[3] >= v99)
      {
        if ((v93 & 1) == 0)
          specialized _NativeDictionary.copy()();
        v101 = v81;
        if ((v100 & 1) == 0)
          goto LABEL_79;
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v99, v93);
        v101 = v81;
        v102 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v78, v80, v81);
        if ((v100 & 1) != (v103 & 1))
          goto LABEL_103;
        v96 = v102;
        if ((v100 & 1) == 0)
        {
LABEL_79:
          v94[(v96 >> 6) + 8] |= 1 << v96;
          v104 = v94[6] + 32 * v96;
          *(_QWORD *)v104 = v79;
          *(_QWORD *)(v104 + 8) = v78;
          *(_QWORD *)(v104 + 16) = v80;
          *(_BYTE *)(v104 + 24) = v101;
          v105 = v94[7] + 24 * v96;
          *(_QWORD *)v105 = v92;
          *(_OWORD *)(v105 + 8) = v129;
          v106 = v94[2];
          v44 = __OFADD__(v106, 1);
          v107 = v106 + 1;
          if (v44)
            goto LABEL_99;
          v94[2] = v107;
          swift_bridgeObjectRetain();
          goto LABEL_59;
        }
      }
      v74 = v94[7] + 24 * v96;
      v75 = *(void **)v74;
      swift_release();

      *(_QWORD *)v74 = v92;
      *(_OWORD *)(v74 + 8) = v129;
LABEL_59:
      *v126 = (uint64_t)v94;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();

      v11 = v116;
      v70 = v117;
      v71 = v113;
      v76 = v123;
      goto LABEL_60;
    }
    break;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

