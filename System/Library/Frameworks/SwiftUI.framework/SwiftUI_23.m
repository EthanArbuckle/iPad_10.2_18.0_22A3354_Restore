unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>();
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void __swiftcall GroupedTabViewStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static GroupedTabViewStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static GroupedTabViewStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for GroupedTabViewStyle()
{
  return &type metadata for GroupedTabViewStyle;
}

uint64_t AnyRowSource.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for RowSourceFormula(0, a2, a3, a4);
  AGCreateWeakAttribute();
  return v4;
}

uint64_t AnyColumnSource.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for ColumnSourceFormula(0, a2, a3, a4);
  AGCreateWeakAttribute();
  return v4;
}

uint64_t View.tableStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TableStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for TableStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableStyleModifier);
}

uint64_t static TableStyleConfiguration.RowsAlias._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[9];
  uint64_t v16;
  _BYTE v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v2 = *(_OWORD *)(a2 + 112);
  v3 = *(_OWORD *)(a2 + 80);
  v43 = *(_OWORD *)(a2 + 96);
  v44 = v2;
  v4 = *(_OWORD *)(a2 + 112);
  v45 = *(_OWORD *)(a2 + 128);
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 16);
  v39 = *(_OWORD *)(a2 + 32);
  v40 = v5;
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 80);
  v41 = *(_OWORD *)(a2 + 64);
  v42 = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v38[0] = *(_OWORD *)a2;
  v38[1] = v9;
  v34 = v43;
  v35 = v4;
  v36 = *(_OWORD *)(a2 + 128);
  v30 = v39;
  v31 = v7;
  v32 = v41;
  v33 = v3;
  v46 = *(_QWORD *)(a2 + 144);
  v37 = *(_QWORD *)(a2 + 144);
  v28 = v38[0];
  v29 = v6;
  outlined retain of _TableRowInputs((uint64_t)v38);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  if (!(_QWORD)v18)
  {
    *(_QWORD *)&v15[0] = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v18 + 16);
  v11 = *(_QWORD *)(v18 + 24);
  v12 = *(_QWORD *)(v18 + 32);
  v13 = *(_QWORD *)(v18 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[0] = v13;
  PropertyList.subscript.setter();
  if (!v10)
  {
LABEL_5:
    PreferencesOutputs.init()();
    v24 = v34;
    v25 = v35;
    v26 = v36;
    v27 = v37;
    v20 = v30;
    v21 = v31;
    v22 = v32;
    v23 = v33;
    v18 = v28;
    v19 = v29;
    return outlined release of _TableRowInputs((uint64_t)&v18);
  }
  v24 = v34;
  v25 = v35;
  v26 = v36;
  v20 = v30;
  v21 = v31;
  v22 = v32;
  v23 = v33;
  v18 = v28;
  v19 = v29;
  v15[6] = v34;
  v15[7] = v35;
  v15[8] = v36;
  v15[2] = v30;
  v15[3] = v31;
  v15[4] = v32;
  v15[5] = v33;
  v27 = v37;
  v16 = v37;
  v15[0] = v28;
  v15[1] = v29;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v11 + 8))(v17, v10, v11, v12, v15, v10, v11);
  return outlined release of _TableRowInputs((uint64_t)&v18);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance TableStyleConfiguration.RowsAlias(uint64_t a1)
{
  return specialized static TableStyleConfiguration.RowsAlias._tableRowCount(inputs:)(a1);
}

uint64_t static TableStyleConfiguration.ColumnsAlias._makeContent(content:inputs:)(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = *((_DWORD *)a2 + 2);
  v3 = a2[2];
  v5 = a2[5];
  v4 = a2[6];
  v6 = a2[7];
  v7 = a2[8];
  v8 = a2[9];
  v14 = *((_DWORD *)a2 + 20);
  v15 = *a2;
  v16 = v2;
  v17 = v3;
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v5;
  lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (v26)
  {
    v9 = v26[2];
    v10 = v26[3];
    v12 = v26[4];
    v11 = v26[5];
    swift_retain();
    swift_release();
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v11 = 0;
  }
  v25 = v11;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v9)
  {
    v20 = v4;
    v21 = v6;
    v22 = v7;
    v23 = v8;
    v24 = v14;
    (*(void (**)(_QWORD **, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v10 + 8))(&v26, v9, v10, v12, &v15, v9, v10);
  }
  else
  {
    PreferencesOutputs.init()();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance TableStyleConfiguration.ColumnsAlias(uint64_t *a1)
{
  return specialized static TableStyleConfiguration.ColumnsAlias._tableColumnCount(inputs:)(a1);
}

uint64_t dispatch thunk of TableStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t outlined destroy of Binding<AnyTableColumnCustomization>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TableStyleConfiguration()
{
  return &type metadata for TableStyleConfiguration;
}

uint64_t sub_1879E1A70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for TableStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for TableStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for TableStyleConfiguration.ColumnsAlias()
{
  return &type metadata for TableStyleConfiguration.ColumnsAlias;
}

ValueMetadata *type metadata accessor for TableStyleConfiguration.RowsAlias()
{
  return &type metadata for TableStyleConfiguration.RowsAlias;
}

uint64_t getEnumTagSinglePayload for TableStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879E1BA0 + 4 * byte_187C790E0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TableStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t destroy for TableStyleConfiguration(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
    goto LABEL_8;
  swift_release();
  swift_release();
  result = a1 + 16;
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 2)
  {
LABEL_7:
    result = __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 56))
    result = swift_bridgeObjectRelease();
LABEL_8:
  if (*(_QWORD *)(a1 + 72))
  {
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 96))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TableStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    v11 = *(_QWORD *)(a2 + 72);
    if (v11)
      goto LABEL_15;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 56);
  swift_retain();
  swift_retain();
  if (v7 == 2)
  {
    v14 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 16, a2 + 16);
    v15 = 2;
  }
  else
  {
    if (v7 != 1)
    {
      *(_QWORD *)(a1 + 16) = *v6;
      *(_BYTE *)(a1 + 56) = 0;
      swift_bridgeObjectRetain();
      v11 = *(_QWORD *)(a2 + 72);
      if (v11)
        goto LABEL_15;
      goto LABEL_7;
    }
    v8 = *(_QWORD *)(a2 + 40);
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v9;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 16, a2 + 16);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 32);
      *v5 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    v15 = 1;
  }
  *(_BYTE *)(a1 + 56) = v15;
  v11 = *(_QWORD *)(a2 + 72);
  if (v11)
  {
LABEL_15:
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = *(_QWORD *)(a2 + 96);
    if (v12)
      goto LABEL_16;
    goto LABEL_8;
  }
LABEL_7:
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
LABEL_16:
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v12;
    v18 = *(_QWORD *)(a2 + 104);
    v17 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
LABEL_8:
  v13 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v13;
  return a1;
}

uint64_t assignWithCopy for TableStyleConfiguration(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (!v4)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      v11 = a2[1];
      v10 = a2[2];
      v12 = *a2;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)a1 = v12;
      goto LABEL_18;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    swift_retain();
    swift_release();
    if ((__int128 *)a1 == a2)
      goto LABEL_18;
    v5 = a1 + 16;
    v6 = a2 + 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 16, (uint64_t (*)(_QWORD))type metadata accessor for SelectionManagerBox<AnyHashable>);
    v7 = *((unsigned __int8 *)a2 + 56);
    if (v7 != 2)
    {
      if (v7 == 1)
      {
LABEL_6:
        v8 = *((_QWORD *)a2 + 5);
        if (v8)
        {
          *(_QWORD *)(a1 + 40) = v8;
          *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
          (**(void (***)(uint64_t, __int128 *))(v8 - 8))(v5, v6);
        }
        else
        {
          v18 = *v6;
          v19 = v6[1];
          *(_QWORD *)(v5 + 32) = *((_QWORD *)v6 + 4);
          *(_OWORD *)v5 = v18;
          *(_OWORD *)(v5 + 16) = v19;
        }
        v14 = 1;
        goto LABEL_17;
      }
LABEL_11:
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v6;
      *(_BYTE *)(a1 + 56) = 0;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
  }
  else
  {
    if (!v4)
    {
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[2];
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v15;
      goto LABEL_18;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    v5 = a1 + 16;
    v6 = a2 + 1;
    v9 = *((unsigned __int8 *)a2 + 56);
    swift_retain();
    swift_retain();
    if (v9 != 2)
    {
      if (v9 == 1)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  v13 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  (**(void (***)(uint64_t, __int128 *))(v13 - 8))(v5, v6);
  v14 = 2;
LABEL_17:
  *(_BYTE *)(a1 + 56) = v14;
LABEL_18:
  v20 = (_OWORD *)(a1 + 64);
  v21 = a2 + 4;
  v22 = *((_QWORD *)a2 + 9);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 64, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      v23 = *((_QWORD *)a2 + 10);
      *v20 = *v21;
      *(_QWORD *)(a1 + 80) = v23;
    }
  }
  else if (v22)
  {
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *v21;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *v20 = v24;
  }
  v25 = (_OWORD *)(a1 + 88);
  v26 = (__int128 *)((char *)a2 + 88);
  v27 = *((_QWORD *)a2 + 12);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v27)
    {
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Binding<AnyTableColumnCustomization>(a1 + 88);
      v28 = *(__int128 *)((char *)a2 + 104);
      *v25 = *v26;
      *(_OWORD *)(a1 + 104) = v28;
    }
  }
  else if (v27)
  {
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v29 = *(__int128 *)((char *)a2 + 104);
    *v25 = *v26;
    *(_OWORD *)(a1 + 104) = v29;
  }
  return a1;
}

uint64_t assignWithTake for TableStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_6;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
LABEL_6:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  if (a1 == a2)
    goto LABEL_8;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 16, (uint64_t (*)(_QWORD))type metadata accessor for SelectionManagerBox<AnyHashable>);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
LABEL_7:
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_8:
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_QWORD *)(a2 + 72))
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_release();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_release();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 64, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
LABEL_13:
  if (!*(_QWORD *)(a1 + 96))
  {
LABEL_17:
    v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v7;
    return a1;
  }
  if (!*(_QWORD *)(a2 + 96))
  {
    outlined destroy of Binding<AnyTableColumnCustomization>(a1 + 88);
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedTableStyle()
{
  return &type metadata for ResolvedTableStyle;
}

ValueMetadata *type metadata accessor for ColumnSourceInput()
{
  return &type metadata for ColumnSourceInput;
}

ValueMetadata *type metadata accessor for RowSourceInput()
{
  return &type metadata for RowSourceInput;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTableStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TableStyleConfiguration(v1, a1);
}

uint64_t TableStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t static RowSourceFormula.makeRows(content:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[9];
  uint64_t v16;
  _BYTE v17[4];

  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
    return PreferencesOutputs.init()();
  _GraphValue.init(_:)();
  v11 = *(_OWORD *)(a5 + 112);
  v15[6] = *(_OWORD *)(a5 + 96);
  v15[7] = v11;
  v15[8] = *(_OWORD *)(a5 + 128);
  v16 = *(_QWORD *)(a5 + 144);
  v12 = *(_OWORD *)(a5 + 48);
  v15[2] = *(_OWORD *)(a5 + 32);
  v15[3] = v12;
  v13 = *(_OWORD *)(a5 + 80);
  v15[4] = *(_OWORD *)(a5 + 64);
  v15[5] = v13;
  v14 = *(_OWORD *)(a5 + 16);
  v15[0] = *(_OWORD *)a5;
  v15[1] = v14;
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(a7 + 48))(v17, v15, a6, a7);
}

uint64_t static RowSourceFormula.tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 56))(v8);
}

uint64_t static RowSourceFormula.containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 64))(v8) & 1;
}

uint64_t protocol witness for static AnyRowSourceFormula.makeRows(content:source:inputs:) in conformance RowSourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static RowSourceFormula.makeRows(content:source:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a6 + 16), *(_QWORD *)(a6 + 24));
}

uint64_t protocol witness for static AnyRowSourceFormula.tableRowCount(inputs:) in conformance RowSourceFormula<A>(uint64_t a1, uint64_t a2)
{
  return static RowSourceFormula.tableRowCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for static AnyRowSourceFormula.containsOutlineSymbol(inputs:) in conformance RowSourceFormula<A>(uint64_t a1, uint64_t a2)
{
  return static RowSourceFormula.containsOutlineSymbol(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

unint64_t lazy protocol witness table accessor for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>)
  {
    type metadata accessor for TableStyleModifier<AutomaticTableStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for TableStyleModifier<AutomaticTableStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TableStyleModifier<AutomaticTableStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticTableStyle and conformance AutomaticTableStyle();
    v4 = type metadata accessor for TableStyleModifier(a1, (uint64_t)&type metadata for AutomaticTableStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TableStyleModifier<AutomaticTableStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedTableStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in TableStyleModifier<A>()
{
  return &protocol witness table for TableStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TableStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for TableStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTableStyle()
{
  lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t static ColumnSourceFormula.makeColumns(content:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  _BYTE v24[4];

  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
    return PreferencesOutputs.init()();
  v11 = *((_DWORD *)a5 + 20);
  v12 = a5[2];
  v13 = *((_DWORD *)a5 + 2);
  v14 = *a5;
  _GraphValue.init(_:)();
  v16 = v14;
  v17 = v13;
  v18 = v12;
  v15 = *(_OWORD *)(a5 + 5);
  v19 = *(_OWORD *)(a5 + 3);
  v20 = v15;
  v21 = *(_OWORD *)(a5 + 7);
  v22 = a5[9];
  v23 = v11;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a7 + 64))(v24, &v16, a6, a7);
}

uint64_t static ColumnSourceFormula.tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 20);
  v8 = *a1;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a1 + 5);
  v11 = *(_OWORD *)(a1 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a1 + 7);
  v14 = a1[9];
  v15 = v5;
  return (*(uint64_t (**)(uint64_t *))(a3 + 72))(&v8);
}

uint64_t protocol witness for static AnyColumnSourceFormula.makeColumns(content:source:inputs:) in conformance ColumnSourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  return static ColumnSourceFormula.makeColumns(content:source:inputs:)(a1, a2, a3, a4, a5, *(_QWORD *)(a6 + 16), *(_QWORD *)(a6 + 24));
}

uint64_t protocol witness for static AnyColumnSourceFormula.tableColumnCount(inputs:) in conformance ColumnSourceFormula<A>(uint64_t *a1, uint64_t a2)
{
  return static ColumnSourceFormula.tableColumnCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t specialized static TableStyleConfiguration.ColumnsAlias._tableColumnCount(inputs:)(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *((_DWORD *)a1 + 2);
  v2 = a1[2];
  v4 = a1[5];
  v3 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = *((_DWORD *)a1 + 20);
  v14 = *a1;
  v15 = v1;
  v16 = v2;
  v17 = *(_OWORD *)(a1 + 3);
  v18 = v4;
  lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (v25)
  {
    v9 = v25[5];
    v10 = v25[2];
    v11 = v25[3];
    swift_retain();
    swift_release();
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
  }
  v24 = v9;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v10)
  {
    v19 = v3;
    v20 = v5;
    v21 = v6;
    v22 = v7;
    v23 = v8;
    v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v14, v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return 0;
  }
  return v12;
}

uint64_t specialized static TableStyleConfiguration.RowsAlias._tableRowCount(inputs:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[9];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v1 = *(_OWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 80);
  v41 = *(_OWORD *)(a1 + 96);
  v42 = v1;
  v3 = *(_OWORD *)(a1 + 112);
  v43 = *(_OWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 16);
  v37 = *(_OWORD *)(a1 + 32);
  v38 = v4;
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 80);
  v39 = *(_OWORD *)(a1 + 64);
  v40 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v8;
  v32 = v41;
  v33 = v3;
  v34 = *(_OWORD *)(a1 + 128);
  v28 = v37;
  v29 = v6;
  v30 = v39;
  v31 = v2;
  v44 = *(_QWORD *)(a1 + 144);
  v35 = *(_QWORD *)(a1 + 144);
  v26 = v36[0];
  v27 = v5;
  outlined retain of _TableRowInputs((uint64_t)v36);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  if (!(_QWORD)v16)
  {
    *(_QWORD *)&v14[0] = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v16 + 40);
  v10 = *(_QWORD *)(v16 + 16);
  v11 = *(_QWORD *)(v16 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)&v14[0] = v9;
  PropertyList.subscript.setter();
  if (!v10)
  {
LABEL_5:
    v22 = v32;
    v23 = v33;
    v24 = v34;
    v25 = v35;
    v18 = v28;
    v19 = v29;
    v20 = v30;
    v21 = v31;
    v16 = v26;
    v17 = v27;
    outlined release of _TableRowInputs((uint64_t)&v16);
    return 0;
  }
  v22 = v32;
  v23 = v33;
  v24 = v34;
  v18 = v28;
  v19 = v29;
  v20 = v30;
  v21 = v31;
  v16 = v26;
  v17 = v27;
  v14[6] = v32;
  v14[7] = v33;
  v14[8] = v34;
  v14[2] = v28;
  v14[3] = v29;
  v14[4] = v30;
  v14[5] = v31;
  v25 = v35;
  v15 = v35;
  v14[0] = v26;
  v14[1] = v27;
  v12 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 16))(v14, v10, v11);
  outlined release of _TableRowInputs((uint64_t)&v16);
  return v12;
}

uint64_t specialized static TableStyleConfiguration.RowsAlias._containsOutlineSymbol(inputs:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD v14[9];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v1 = *(_OWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 80);
  v41 = *(_OWORD *)(a1 + 96);
  v42 = v1;
  v3 = *(_OWORD *)(a1 + 112);
  v43 = *(_OWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 16);
  v37 = *(_OWORD *)(a1 + 32);
  v38 = v4;
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 80);
  v39 = *(_OWORD *)(a1 + 64);
  v40 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v8;
  v32 = v41;
  v33 = v3;
  v34 = *(_OWORD *)(a1 + 128);
  v28 = v37;
  v29 = v6;
  v30 = v39;
  v31 = v2;
  v44 = *(_QWORD *)(a1 + 144);
  v35 = *(_QWORD *)(a1 + 144);
  v26 = v36[0];
  v27 = v5;
  outlined retain of _TableRowInputs((uint64_t)v36);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  if (!(_QWORD)v16)
  {
    *(_QWORD *)&v14[0] = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v16 + 40);
  v10 = *(_QWORD *)(v16 + 16);
  v11 = *(_QWORD *)(v16 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)&v14[0] = v9;
  PropertyList.subscript.setter();
  if (!v10)
  {
LABEL_5:
    v22 = v32;
    v23 = v33;
    v24 = v34;
    v25 = v35;
    v18 = v28;
    v19 = v29;
    v20 = v30;
    v21 = v31;
    v16 = v26;
    v17 = v27;
    outlined release of _TableRowInputs((uint64_t)&v16);
    v12 = 0;
    return v12 & 1;
  }
  v22 = v32;
  v23 = v33;
  v24 = v34;
  v18 = v28;
  v19 = v29;
  v20 = v30;
  v21 = v31;
  v16 = v26;
  v17 = v27;
  v14[6] = v32;
  v14[7] = v33;
  v14[8] = v34;
  v14[2] = v28;
  v14[3] = v29;
  v14[4] = v30;
  v14[5] = v31;
  v25 = v35;
  v15 = v35;
  v14[0] = v26;
  v14[1] = v27;
  v12 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 24))(v14, v10, v11);
  outlined release of _TableRowInputs((uint64_t)&v16);
  return v12 & 1;
}

uint64_t outlined init with copy of TableStyleConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableStyleConfiguration(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ColumnSourceFormula(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColumnSourceFormula);
}

uint64_t type metadata accessor for RowSourceFormula(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RowSourceFormula);
}

ValueMetadata *type metadata accessor for AnyRowSource()
{
  return &type metadata for AnyRowSource;
}

ValueMetadata *type metadata accessor for AnyColumnSource()
{
  return &type metadata for AnyColumnSource;
}

uint64_t sub_1879E315C()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

void View.modifierKeyAlternate<A>(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1879E31CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>();
  v4 = type metadata accessor for ModifiedContent();
  v12[0] = v1;
  v12[1] = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
  v5 = MEMORY[0x1E0CE2E70];
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v12);
  v11[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>();
  v6 = MEMORY[0x18D75FFDC](v5, v4, v11);
  type metadata accessor for ModifierKeyAlternateModifier(255, v4, v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v2;
  v10[1] = &protocol witness table for ModifierKeyAlternateModifier<A>;
  return MEMORY[0x18D75FFDC](v5, v8, v10);
}

uint64_t type metadata accessor for ModifierKeyAlternateModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifierKeyAlternateModifier);
}

uint64_t getEnumTagSinglePayload for ModifierKeyAlternateModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879E3378 + 4 * byte_187C79480[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for ModifierKeyAlternateModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ModifierKeyAlternateModifier<A>()
{
  return &protocol witness table for ModifierKeyAlternateModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ModifierKeyAlternateModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ModifierKeyAlternateModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for AccessibilityAction.matches<A>(_:) in conformance AccessibilitySetValueAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AccessibilityAction.matches<A>(_:)(a1, a4, a2, a5);
}

uint64_t AccessibilityAction.matches<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  char v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;

  v45 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v46 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v47 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v48 = (char *)&v43 - v12;
  v13 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v50 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v43 - v23;
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3, v27);
  v30 = swift_dynamicCast();
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
  v31(v24, v30 ^ 1u, 1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v20, v49, a2);
  v31(v20, 0, 1, a2);
  v49 = TupleTypeMetadata2;
  v32 = *(int *)(TupleTypeMetadata2 + 48);
  v33 = v48;
  v34 = &v48[v32];
  v35 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v35(v48, v24, v9);
  v35(v34, v20, v9);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v36(v33, 1, a2) != 1)
  {
    v44 = v13;
    v35(v50, v33, v9);
    if (v36(v34, 1, a2) != 1)
    {
      v39 = v46;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v46, v34, a2);
      v40 = v50;
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v41 = *(void (**)(char *, uint64_t))(v7 + 8);
      v41(v39, a2);
      v37 = *(void (**)(char *, uint64_t))(v44 + 8);
      v37(v20, v9);
      v41(v40, a2);
      v37(v33, v9);
      goto LABEL_8;
    }
    v37 = *(void (**)(char *, uint64_t))(v44 + 8);
    v37(v20, v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v50, a2);
    goto LABEL_6;
  }
  v37 = *(void (**)(char *, uint64_t))(v13 + 8);
  v37(v20, v9);
  if (v36(v34, 1, a2) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v49);
    v38 = 0;
    goto LABEL_8;
  }
  v37(v33, v9);
  v38 = 1;
LABEL_8:
  v37(v24, v9);
  return v38 & 1;
}

uint64_t AccessibilityActionResult.init(BOOLeanLiteral:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if ((result & 1) != 0)
    v2 = 2;
  else
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByBooleanLiteral.BooleanLiteralType : _ExpressibleByBuiltinBooleanLiteral in AccessibilityActionResult()
{
  return MEMORY[0x1E0DEAFD0];
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityScrollAction()
{
  return 0;
}

uint64_t specialized Sequence.reversed()(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v15 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v14 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v6 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x18D75E3BC](v5, v15);
          v10 = (id)MEMORY[0x18D75E3BC](v3 - (v5 + 1), v15);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v7)
            goto LABEL_34;
          v8 = *(id *)(v15 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v7)
            goto LABEL_37;
          v9 = (uint64_t)v8;
          v10 = *(id *)(v15 + 32 + 8 * v1);
        }
        v11 = v10;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v15 < 0
          || (v15 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        }
        v12 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v12 + 32) = v11;
        specialized Array._endMutation()();
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v15 < 0
          || (v15 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;

        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x20) = v9;
        specialized Array._endMutation()();
      }
      v5 = v6;
      if (v4 == v6)
        return v15;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    v15 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t specialized Sequence.reversed()(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v9 < 2)
    return v8;
  v11 = 0;
  v12 = v9 >> 1;
  v13 = v9 - 1;
  v14 = 56 * v9 - 24;
  v15 = 80;
  v31 = v9 >> 1;
  while (1)
  {
    if (v11 == v13)
      goto LABEL_4;
    v16 = *(_QWORD *)(v8 + 16);
    if (v11 >= v16)
      break;
    if (v13 >= v16)
      goto LABEL_13;
    v18 = *(_QWORD *)(v8 + v15 - 48);
    v17 = *(_QWORD *)(v8 + v15 - 40);
    v19 = *(_QWORD *)(v8 + v15 - 24);
    v44 = *(_QWORD *)(v8 + v15 - 32);
    v20 = *(_QWORD *)(v8 + v15);
    v33 = *(_QWORD *)(v8 + v15 - 8);
    v34 = *(_QWORD *)(v8 + v15 - 16);
    v21 = (_QWORD *)(v8 + v14);
    v42 = v8;
    v22 = *(_QWORD *)(v8 + v14);
    v23 = v21[1];
    v24 = v21[3];
    v46 = v21[2];
    v38 = v21[5];
    v39 = v21[4];
    v45 = v21[6];
    v36 = v17;
    swift_retain();
    v37 = v18;
    swift_retain();
    v35 = v19;
    outlined copy of _ViewList_ID.Canonical?(v44, v19);
    v41 = v23;
    swift_retain();
    v32 = v20;
    swift_retain();
    v43 = v22;
    v8 = v42;
    swift_retain();
    v40 = v24;
    outlined copy of _ViewList_ID.Canonical?(v46, v24);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    v25 = (_QWORD *)(v8 + v15);
    v26 = *(_QWORD *)(v8 + v15 - 32);
    v27 = *(_QWORD *)(v8 + v15 - 24);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v26, v27);
    result = swift_release();
    *(v25 - 6) = v43;
    *(v25 - 5) = v41;
    *(v25 - 4) = v46;
    *(v25 - 3) = v40;
    *(v25 - 2) = v39;
    *(v25 - 1) = v38;
    *v25 = v45;
    if (v13 >= *(_QWORD *)(v8 + 16))
      goto LABEL_14;
    v28 = (_QWORD *)(v8 + v14);
    v29 = *(_QWORD *)(v8 + v14 + 16);
    v30 = *(_QWORD *)(v8 + v14 + 24);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v29, v30);
    result = swift_release();
    *v28 = v37;
    v28[1] = v36;
    v28[2] = v44;
    v28[3] = v35;
    v28[4] = v34;
    v28[5] = v33;
    v12 = v31;
    v28[6] = v32;
LABEL_4:
    ++v11;
    v15 += 56;
    --v13;
    v14 -= 56;
    if (v12 == v11)
      return v8;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  __int128 v9[3];
  __int128 v10[3];

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return v1;
  v3 = 0;
  v4 = v2 >> 1;
  v5 = v2 - 1;
  v6 = 48 * v2 - 16;
  for (i = 32; ; i += 48)
  {
    if (v3 == v5)
      goto LABEL_4;
    v8 = *(_QWORD *)(v1 + 16);
    if (v3 >= v8)
      break;
    result = outlined init with copy of AnyAccessibilityAction(v1 + i, (uint64_t)v10);
    if (v5 >= v8)
      goto LABEL_14;
    outlined init with copy of AnyAccessibilityAction(v1 + v6, (uint64_t)v9);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = result;
    }
    if (v3 >= *(_QWORD *)(v1 + 16))
      goto LABEL_15;
    result = outlined assign with take of AnyAccessibilityAction(v9, v1 + i);
    if (v5 >= *(_QWORD *)(v1 + 16))
      goto LABEL_16;
    result = outlined assign with take of AnyAccessibilityAction(v10, v1 + v6);
LABEL_4:
    ++v3;
    --v5;
    v6 -= 48;
    if (v4 == v3)
      return v1;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t AnyAccessibilityAction.matches<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(a1, a2, a3, v7, v8) & 1;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *__return_ptr, _QWORD *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD v27[4];
  char v28;
  id v29[3];
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  *(_OWORD *)v29 = *(_OWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0)
    return 0;
  if (a4 != 1)
  {
    AccessibilityNode.attachment.getter((uint64_t *)v29);

    v21 = swift_bridgeObjectRetain();
    v10 = specialized AccessibilityProperties.subscript.getter(v21);
    result = swift_bridgeObjectRelease_n();
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined copy of AccessibilityActionKind.ActionKind(a1, a2, a3, 1uLL);
  AccessibilityNode.attachment.getter((uint64_t *)v29);

  v8 = swift_bridgeObjectRetain();
  v9 = specialized AccessibilityProperties.subscript.getter(v8);
  swift_bridgeObjectRelease_n();
  v10 = specialized Sequence.reversed()(v9);
  result = outlined consume of AccessibilityActionKind.ActionKind(a1, a2, a3, 1uLL);
  v12 = *(_QWORD *)(v10 + 16);
  if (!v12)
    goto LABEL_15;
LABEL_4:
  v13 = 0;
  v14 = 0;
  v15 = v10 + 32;
  v23 = v5;
LABEL_5:
  v24 = v14;
  v16 = v15 + 48 * v13;
  do
  {
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of AnyAccessibilityAction(v16, (uint64_t)v29);
    v27[0] = a1;
    v27[1] = a2;
    v27[2] = a3;
    v27[3] = a4;
    v18 = a4;
    v19 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    v20 = *(void (**)(char *__return_ptr, _QWORD *))(v19 + 40);
    lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    v20(&v28, v27);
    result = outlined destroy of AnyAccessibilityAction((uint64_t)v29);
    if (v28 == 2)
      goto LABEL_13;
    if (v28 == 3)
    {
      v14 = 1;
      ++v13;
      a4 = v18;
      v15 = v10 + 32;
      if (v17 != v12)
        goto LABEL_5;
LABEL_13:
      swift_bridgeObjectRelease();
LABEL_19:
      v22 = 1;
      if (MEMORY[0x18D760234](v23 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      {
        swift_getObjectType();
        v29[0] = 0;
        LOBYTE(v29[1]) = 1;
        ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
        swift_unknownObjectRelease();
      }
      return v22;
    }
    if ((v28 & 1) == 0)
      goto LABEL_15;
    ++v13;
    v16 += 48;
    a4 = v18;
  }
  while (v17 != v12);
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    goto LABEL_19;
  return 0;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *__return_ptr, unint64_t, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  id v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)v20 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) != 0)
  {
    AccessibilityNode.attachment.getter((uint64_t *)v20);

    v3 = swift_bridgeObjectRetain();
    v4 = specialized AccessibilityProperties.subscript.getter(v3);
    result = swift_bridgeObjectRelease_n();
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = v4 + 32;
LABEL_4:
      v17 = v8;
      v10 = v9 + 48 * v7;
      v11 = v7;
      do
      {
        v7 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of AnyAccessibilityAction(v10, (uint64_t)v20);
        v18 = a1;
        v12 = v21;
        v13 = v22;
        __swift_project_boxed_opaque_existential_1(v20, v21);
        v14 = *(void (**)(char *__return_ptr, unint64_t, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v13 + 40);
        v15 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
        v14(&v19, v15, &v18, &type metadata for AccessibilityScrollAction, v15, v12, v13);
        result = outlined destroy of AnyAccessibilityAction((uint64_t)v20);
        if (v19 == 2)
          goto LABEL_12;
        if (v19 == 3)
        {
          v8 = 1;
          v9 = v4 + 32;
          if (v7 != v6)
            goto LABEL_4;
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_17:
          v16 = 1;
          if (MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
          {
            swift_getObjectType();
            v20[0] = 0;
            LOBYTE(v20[1]) = 1;
            ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
            swift_unknownObjectRelease();
          }
          return v16;
        }
        if ((v19 & 1) == 0)
          goto LABEL_13;
        ++v11;
        v10 += 48;
      }
      while (v7 != v6);
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *__return_ptr, char *, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  id v25[3];
  uint64_t v26;
  uint64_t v27;

  *(_OWORD *)v25 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) != 0)
  {
    AccessibilityNode.attachment.getter((uint64_t *)v25);

    v5 = swift_bridgeObjectRetain();
    v6 = specialized AccessibilityProperties.subscript.getter(v5);
    result = swift_bridgeObjectRelease_n();
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = a2 & 1;
      v12 = v6 + 32;
      v20 = v6 + 32;
LABEL_4:
      v21 = v10;
      v13 = v12 + 48 * v9;
      v14 = v9;
      do
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of AnyAccessibilityAction(v13, (uint64_t)v25);
        v23 = a1;
        v22 = v11;
        v15 = v26;
        v16 = v27;
        __swift_project_boxed_opaque_existential_1(v25, v26);
        v17 = *(void (**)(char *__return_ptr, char *, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v16 + 40);
        v18 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
        v17(&v24, &v23, &v22, &type metadata for AccessibilityAdjustableAction, v18, v15, v16);
        result = outlined destroy of AnyAccessibilityAction((uint64_t)v25);
        if (v24 == 2)
          goto LABEL_12;
        if (v24 == 3)
        {
          v10 = 1;
          v12 = v20;
          if (v9 != v8)
            goto LABEL_4;
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_17:
          v19 = 1;
          if (MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
          {
            swift_getObjectType();
            v25[0] = 0;
            LOBYTE(v25[1]) = 1;
            ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
            swift_unknownObjectRelease();
          }
          return v19;
        }
        if ((v24 & 1) == 0)
          goto LABEL_13;
        ++v14;
        v13 += 48;
      }
      while (v9 != v8);
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *__return_ptr, unint64_t, _OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  id v22[3];
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)v22 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) != 0)
  {
    AccessibilityNode.attachment.getter((uint64_t *)v22);

    v3 = swift_bridgeObjectRetain();
    v4 = specialized AccessibilityProperties.subscript.getter(v3);
    result = swift_bridgeObjectRelease_n();
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = v4 + 32;
LABEL_4:
      v18 = v7;
      v10 = v9 + 48 * v8;
      v11 = v8;
      do
      {
        if (v11 >= *(_QWORD *)(v4 + 16))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of AnyAccessibilityAction(v10, (uint64_t)v22);
        v12 = *(_OWORD *)(a1 + 16);
        v19[0] = *(_OWORD *)a1;
        v19[1] = v12;
        v20 = *(_QWORD *)(a1 + 32);
        v13 = v23;
        v14 = v24;
        __swift_project_boxed_opaque_existential_1(v22, v23);
        v15 = *(void (**)(char *__return_ptr, unint64_t, _OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v14 + 40);
        v16 = lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction();
        v15(&v21, v16, v19, &type metadata for AccessibilityZoomAction, v16, v13, v14);
        result = outlined destroy of AnyAccessibilityAction((uint64_t)v22);
        if (v21 == 2)
          goto LABEL_12;
        if (v21 == 3)
        {
          v8 = v11 + 1;
          v7 = 1;
          v9 = v4 + 32;
          if (v6 - 1 != v11)
            goto LABEL_4;
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_17:
          v17 = 1;
          if (MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
          {
            swift_getObjectType();
            v22[0] = 0;
            LOBYTE(v22[1]) = 1;
            ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
            swift_unknownObjectRelease();
          }
          return v17;
        }
        if ((v21 & 1) == 0)
          goto LABEL_13;
        ++v11;
        v10 += 48;
      }
      while (v6 != v11);
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t AnyAccessibilityAction.perform<A>(action:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[3];
  v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2, a3, a4, v9, v10);
}

BOOL protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityAppIntentHandler(_OWORD *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[4];
  char v7;
  __int128 v8;
  uint64_t v9;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_OWORD *)(v1 + 16);
  v6[1] = *(_OWORD *)v1;
  v6[2] = v4;
  v6[3] = *(_OWORD *)(v1 + 32);
  v7 = v2;
  v8 = *(_OWORD *)(v1 + 56);
  v9 = v3;
  v6[0] = *a1;
  return AccessibilityAppIntentAction.impliedRole(for:)((uint64_t)v6);
}

uint64_t AccessibilityActionHandler.impliedRole(for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  _QWORD v18[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v11 = (char *)v18 - v10;
  v13 = *a1;
  v12 = a1[1];
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v9);
  v18[0] = v13;
  v18[1] = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
  return v15;
}

_BYTE *protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance AccessibilityActionResult@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result)
    v2 = 2;
  else
    v2 = 1;
  *a2 = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionResult(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1879E4AE0 + 4 * byte_187C79520[v4]))();
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1879E4B8C + 4 * byte_187C7952A[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1879E4BC0 + 4 * byte_187C79525[v5]))();
}

uint64_t sub_1879E4BC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879E4BC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879E4BD0);
  return result;
}

uint64_t sub_1879E4BDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879E4BE4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1879E4BE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879E4BF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionResult()
{
  return &type metadata for AccessibilityActionResult;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityAction.ConcreteBase(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879E4CBC + 4 * byte_187C7952F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AnyAccessibilityAction.ConcreteBase(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t destroy for AnyAccessibilityAction(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyAccessibilityAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t AccessibilityActionHandler.name.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityKindActionProvider);
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(&v16, (uint64_t)v19);
    v7 = v20;
    v8 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v16, v7, v8);
    v10 = *((_QWORD *)&v16 + 1);
    v9 = v16;
    v11 = v17;
    if (*((_QWORD *)&v17 + 1) >= 5uLL)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
      if (v13)
      {
        v14 = v12;
        outlined consume of AccessibilityActionKind.ActionKind(v9, v10, v11, *((unint64_t *)&v11 + 1));
        v9 = v14;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
      outlined consume of AccessibilityActionKind.ActionKind(v16, *((uint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return 0;
    }
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v16, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityKindActionProvider?);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  }
  return v9;
}

double AccessibilityActionHandler.asCombinedAction(name:properties:child:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 25) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AccessibilityActionStorage.init(action:category:label:image:handler:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  Swift::UInt32 v25;
  __int128 v27;

  v27 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *((_QWORD *)a2 + 3);
  v19 = *(_QWORD *)(a11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a9, a1, a11);
  v21 = (int *)type metadata accessor for AccessibilityActionStorage(0, a11, a12, v20);
  v22 = a9 + v21[9];
  *(_OWORD *)v22 = v27;
  *(_QWORD *)(v22 + 16) = v17;
  *(_QWORD *)(v22 + 24) = v18;
  v23 = (_QWORD *)(a9 + v21[10]);
  *v23 = a3;
  v23[1] = a4;
  v23[2] = a5;
  v23[3] = a6;
  *(_QWORD *)(a9 + v21[11]) = a7;
  v24 = (_QWORD *)(a9 + v21[12]);
  *v24 = a8;
  v24[1] = a10;
  v25 = AccessibilityActionHandlerSeed;
  *(_DWORD *)(a9 + v21[13]) = AccessibilityActionHandlerSeed;
  AccessibilityActionHandlerSeed = v25 + 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a11);
}

uint64_t AccessibilityActionStorage.perform(value:)()
{
  return static Update.dispatchImmediately<A>(_:)();
}

double AccessibilityActionStorage.asCustomAction(category:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, double);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  Swift::UInt32 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[7];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];

  v44 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = v11[1];
  v43 = *v11;
  v14 = v11[2];
  v13 = v11[3];
  v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v15((char *)&v36 - v16, v3, a2, v10);
  type metadata accessor for AccessibilityActionStorage<AccessibilityVoidAction>(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v41 = v12;
    v42 = v5;
    v39 = v14;
    v40 = v13;
    v49 = v55;
    v50 = v56;
    *(_OWORD *)v51 = v57[0];
    *(_OWORD *)((char *)&v51[1] + 4) = *(_OWORD *)((char *)v57 + 12);
    v45 = *(_OWORD *)&v51[5];
    v46 = v52;
    v47 = v53;
    v48 = v54;
    v17 = *((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1) >= 5uLL)
    {
      LOBYTE(v22) = v46;
      v38 = v45;
      outlined copy of AccessibilityActionKind.ActionKind(v45, *((uint64_t *)&v45 + 1), v46, *((unint64_t *)&v52 + 1));
      ((void (*)(char *, uint64_t, uint64_t))v15)(v7, v3, a2);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v7, a2);
      goto LABEL_6;
    }
    v18 = v7;
    ((void (*)(char *, uint64_t, uint64_t))v15)(v7, v3, a2);
    v19 = (uint64_t *)&v7[*(int *)(a2 + 40)];
    v21 = *v19;
    v20 = v19[1];
    v22 = v19[2];
    v17 = v19[3];
    outlined copy of Text?(*v19, v20, v22, v17);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v18, a2);
    if (v17)
    {
      *(_QWORD *)&v38 = v21;
      *((_QWORD *)&v38 + 1) = v20;
LABEL_6:
      v36 = v22 & 1;
      v23 = *(_QWORD *)(v3 + *(int *)(a2 + 44));
      v24 = v51[2];
      v42 = v51[1];
      v37 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
      v25 = v44;
      *(_QWORD *)(v44 + 24) = v26;
      *(_QWORD *)(v25 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      v27 = swift_allocObject();
      *(_QWORD *)v25 = v27;
      v28 = v43;
      v29 = v40;
      v30 = v41;
      v31 = v39;
      outlined copy of AccessibilityActionCategory?(v43, v41, v39, v40);
      swift_retain();
      swift_retain();
      outlined release of AccessibilityActionStorage<AccessibilityVoidAction>((uint64_t *)&v45);
      v32 = *((_QWORD *)&v38 + 1);
      *(_QWORD *)(v27 + 16) = v38;
      *(_QWORD *)(v27 + 24) = v32;
      *(_QWORD *)(v27 + 32) = v36;
      *(_QWORD *)(v27 + 40) = v17;
      *(_QWORD *)(v27 + 48) = v28;
      *(_QWORD *)(v27 + 56) = v30;
      *(_QWORD *)(v27 + 64) = v31;
      *(_QWORD *)(v27 + 72) = v29;
      result = 0.0;
      *(_OWORD *)(v27 + 80) = 0u;
      *(_OWORD *)(v27 + 96) = 0u;
      v34 = v42;
      *(_QWORD *)(v27 + 112) = v23;
      *(_QWORD *)(v27 + 120) = v34;
      *(_QWORD *)(v27 + 128) = v24;
      *(_DWORD *)(v27 + 136) = v37;
      *(_BYTE *)(v25 + 40) = 0;
      return result;
    }
    outlined release of AccessibilityActionStorage<AccessibilityVoidAction>((uint64_t *)&v45);
  }
  result = 0.0;
  v35 = (_OWORD *)v44;
  *(_OWORD *)(v44 + 25) = 0u;
  *v35 = 0u;
  v35[1] = 0u;
  return result;
}

uint64_t static AccessibilityActionStorage.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  void (*v38)(char *, uint64_t, int *, double);
  uint64_t v39;
  char v40;
  uint64_t v41;
  void (*v42)(char *, int *);
  uint64_t v43;
  void (*v44)(char *, uint64_t, int *);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, int *);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, int *);
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, int *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t, int *);
  char v134;
  char v135;
  char v136;
  char v137;

  v125 = a4;
  v6 = (int *)type metadata accessor for AccessibilityActionStorage(0, a3, a4, a4);
  v7 = *((_QWORD *)v6 - 1);
  MEMORY[0x1E0C80A78](v6, v8);
  v127 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v126 = (uint64_t)&v117 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v129 = (char *)&v117 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v128 = (char *)&v117 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v130 = (char *)&v117 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v131 = (char *)&v117 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v117 - v27;
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = (char *)&v117 - v32;
  v35 = *(int *)(v34 + 52);
  v36 = *(_DWORD *)(a1 + v35);
  v37 = *(_DWORD *)(a2 + v35);
  v38 = *(void (**)(char *, uint64_t, int *, double))(v7 + 16);
  v132 = a1;
  v38((char *)&v117 - v32, a1, v6, v31);
  v39 = a2;
  v133 = (void (*)(char *, uint64_t, int *))v38;
  ((void (*)(char *, uint64_t, int *))v38)(v28, a2, v6);
  if (v36 == v37)
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  else
    v40 = 0;
  v41 = v132;
  v42 = *(void (**)(char *, int *))(v7 + 8);
  v42(v28, v6);
  v42(v33, v6);
  v43 = (uint64_t)v131;
  v44 = v133;
  v133(v131, v41, v6);
  v45 = v130;
  v46 = v39;
  v44(v130, v39, v6);
  if ((v40 & 1) == 0)
  {
    v42(v45, v6);
    v42((char *)v43, v6);
    v63 = v128;
    v61 = v129;
    v66 = v126;
    v64 = v127;
LABEL_29:
    v44(v63, v41, v6);
    v44(v61, v46, v6);
LABEL_30:
    v42(v61, v6);
    v42(v63, v6);
    v44((char *)v66, v41, v6);
LABEL_31:
    v44(v64, v46, v6);
    goto LABEL_32;
  }
  v125 = v39;
  v47 = v6[9];
  v48 = *(_QWORD *)(v43 + v47);
  v49 = *(_QWORD *)(v43 + v47 + 8);
  v50 = *(_QWORD *)(v43 + v47 + 16);
  v51 = *(_QWORD *)(v43 + v47 + 24);
  v52 = (uint64_t *)&v45[v47];
  v53 = v43;
  v54 = *v52;
  v55 = v52[1];
  v57 = v52[2];
  v56 = v52[3];
  if (v51 == 2)
  {
    v58 = v48;
    v123 = v57;
    v124 = v54;
    v59 = v57;
    v60 = v56;
    outlined copy of AccessibilityActionCategory?(v54, v55, v59, v56);
    v42(v45, v6);
    v42((char *)v53, v6);
    v61 = v129;
    if (v60 == 2)
    {
      v62 = 2;
      v64 = v127;
      v63 = v128;
      v65 = v50;
      v46 = v125;
      v66 = v126;
      v67 = v49;
      v68 = v58;
      v41 = v132;
      v69 = v133;
LABEL_18:
      outlined consume of AccessibilityActionCategory?(v68, v67, v65, v62);
      v69(v63, v41, v6);
      v69(v61, v46, v6);
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  if (v56 == 2)
  {
    v70 = v45;
    v71 = v48;
    v123 = v57;
    v124 = v54;
    v122 = v55;
    v60 = 2;
    outlined copy of AccessibilityActionCategory.Category(v48, v49, v50, v51);
    outlined copy of AccessibilityActionCategory.Category(v71, v49, v50, v51);
    v42(v70, v6);
    v42(v131, v6);
    v58 = v71;
    v55 = v122;
    outlined consume of AccessibilityActionCategory.Category(v71, v49, v50, v51);
    v61 = v129;
LABEL_11:
    outlined consume of AccessibilityActionCategory?(v58, v49, v50, v51);
    outlined consume of AccessibilityActionCategory?(v124, v55, v123, v60);
    v41 = v132;
    v44 = v133;
LABEL_28:
    v64 = v127;
    v63 = v128;
    v46 = v125;
    v66 = v126;
    goto LABEL_29;
  }
  v61 = v129;
  if (!v51)
  {
    v72 = v48;
    v73 = v49;
    v76 = v49;
    v77 = v56;
    outlined copy of AccessibilityActionCategory.Category(v48, v76, v50, 0);
    outlined copy of AccessibilityActionCategory.Category(v72, v73, v50, 0);
    if (!v77)
      goto LABEL_17;
LABEL_27:
    v42(v130, v6);
    v42(v131, v6);
    outlined consume of AccessibilityActionCategory.Category(v72, v73, v50, v51);
    outlined consume of AccessibilityActionCategory?(v72, v73, v50, v51);
    v44 = v133;
    goto LABEL_28;
  }
  if (v51 == 1)
  {
    v72 = v48;
    v73 = v49;
    v74 = v49;
    v75 = v56;
    outlined copy of AccessibilityActionCategory.Category(v48, v74, v50, 1uLL);
    outlined copy of AccessibilityActionCategory.Category(v72, v73, v50, 1uLL);
    if (v75 != 1)
      goto LABEL_27;
LABEL_17:
    v42(v130, v6);
    v42(v131, v6);
    outlined consume of AccessibilityActionCategory.Category(v72, v73, v50, v51);
    v68 = v72;
    v69 = v133;
    v67 = v73;
    v62 = v51;
    v64 = v127;
    v63 = v128;
    v65 = v50;
    v46 = v125;
    v66 = v126;
    goto LABEL_18;
  }
  if (v56 < 2)
  {
    v72 = v48;
    v73 = v49;
    outlined copy of AccessibilityActionCategory.Category(v48, v49, v50, v51);
    outlined copy of AccessibilityActionCategory.Category(v72, v49, v50, v51);
    goto LABEL_27;
  }
  v122 = v55;
  v117 = v48;
  v106 = v54;
  v124 = v54;
  v107 = v50;
  v108 = v50;
  v109 = v56;
  v120 = v56;
  outlined copy of AccessibilityActionCategory?(v48, v49, v108, v51);
  v123 = v57;
  outlined copy of AccessibilityActionCategory?(v106, v122, v57, v109);
  v110 = v117;
  outlined copy of AccessibilityActionCategory?(v117, v49, v107, v51);
  v119 = v107;
  outlined copy of AccessibilityActionCategory.Category(v110, v49, v107, v51);
  v135 = v107 & 1;
  v134 = v57 & 1;
  v118 = v49;
  v111 = v124;
  v112 = v122;
  v113 = v120;
  v121 = static Text.== infix(_:_:)();
  v114 = v49;
  v115 = v119;
  outlined consume of AccessibilityActionCategory.Category(v110, v114, v119, v51);
  outlined consume of AccessibilityActionCategory?(v111, v112, v123, v113);
  v42(v130, v6);
  v42(v131, v6);
  v116 = v118;
  outlined consume of AccessibilityActionCategory.Category(v110, v118, v115, v51);
  outlined consume of AccessibilityActionCategory?(v110, v116, v115, v51);
  v63 = v128;
  v44 = v133;
  v133(v128, v41, v6);
  v46 = v125;
  v44(v61, v125, v6);
  v66 = v126;
  v64 = v127;
  if ((v121 & 1) == 0)
    goto LABEL_30;
LABEL_19:
  v78 = v6[10];
  v79 = (uint64_t *)&v63[v78];
  v80 = *(_QWORD *)&v63[v78 + 24];
  v81 = (uint64_t *)&v61[v78];
  v82 = *v81;
  v83 = v81[1];
  v84 = v81[2];
  v85 = v81[3];
  if (v80)
  {
    v86 = *v79;
    v87 = v79[1];
    v88 = v79[2];
    if (v85)
    {
      v126 = v80;
      v127 = (char *)(v88 & 1);
      v122 = v82;
      v123 = v84 & 1;
      v89 = v82;
      v125 = v86;
      v90 = v83;
      v130 = (char *)v88;
      v131 = (char *)v83;
      outlined copy of Text?(v86, v87, v88, v80);
      outlined copy of Text?(v89, v90, v84, v85);
      outlined copy of Text?(v125, v87, (char)v130, v126);
      v137 = (char)v127;
      LOBYTE(v89) = v123;
      v136 = v123;
      v91 = v122;
      v92 = (uint64_t)v131;
      LODWORD(v124) = static Text.== infix(_:_:)();
      outlined consume of Text.Storage(v91, v92, v89);
      swift_bridgeObjectRelease();
      v93 = v125;
      v94 = v87;
      outlined consume of Text.Storage(v125, v87, (char)v127);
      v95 = v126;
      swift_bridgeObjectRelease();
      v42(v129, v6);
      v42(v128, v6);
      outlined consume of Text?(v93, v94, (char)v130, v95);
      v96 = v133;
      v133((char *)v66, v132, v6);
      v96(v64, v46, v6);
      if ((v124 & 1) != 0)
        goto LABEL_38;
LABEL_32:
      v42(v64, v6);
      v42((char *)v66, v6);
      goto LABEL_33;
    }
    v101 = v88 & 1;
    v102 = v86;
    outlined copy of Text.Storage(v86, v87, v88 & 1);
    swift_bridgeObjectRetain();
    v42(v129, v6);
    v42(v128, v6);
    outlined consume of Text.Storage(v102, v87, v101);
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v97 = *v81;
  v98 = *v81;
  v131 = (char *)v81[1];
  outlined copy of Text?(v98, (uint64_t)v131, v84, v85);
  v42(v61, v6);
  v42(v63, v6);
  if (v85)
  {
    outlined consume of Text?(v97, (uint64_t)v131, v84, v85);
LABEL_36:
    v44 = v133;
    v133((char *)v66, v132, v6);
    goto LABEL_31;
  }
  v103 = v133;
  v133((char *)v66, v132, v6);
  v103(v64, v46, v6);
LABEL_38:
  v104 = v6[11];
  v105 = *(_QWORD *)&v64[v104];
  if (*(_QWORD *)(v66 + v104))
  {
    if (v105)
    {
      swift_retain();
      swift_retain();
      v99 = static Image.== infix(_:_:)();
      swift_release();
      v42(v64, v6);
      v42((char *)v66, v6);
      swift_release();
      return v99 & 1;
    }
    swift_retain();
    v42(v64, v6);
    v42((char *)v66, v6);
  }
  else
  {
    swift_retain();
    v42(v64, v6);
    v42((char *)v66, v6);
    if (!v105)
    {
      v99 = 1;
      return v99 & 1;
    }
  }
  swift_release();
LABEL_33:
  v99 = 0;
  return v99 & 1;
}

uint64_t protocol witness for AccessibilityActionHandler.image.getter in conformance AccessibilityActionStorage<A>()
{
  return swift_retain();
}

double protocol witness for AccessibilityActionHandler.asCombinedAction(name:properties:child:) in conformance AccessibilityActionStorage<A>@<D0>(_OWORD *a1@<X8>)
{
  return AccessibilityActionHandler.asCombinedAction(name:properties:child:)(a1);
}

double protocol witness for AccessibilityActionHandler.asCodableAction(in:) in conformance AccessibilityActionStorage<A>@<D0>(uint64_t a1@<X8>)
{
  return protocol witness for static StatefulRule.initialValue.getter in conformance ScrollBehaviorModifier<A>.ScrollBehaviorProvider(a1);
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AccessibilityActionStorage<A>);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionStorage<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AccessibilityActionStorage.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void *AccessibilityActionReference.image.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void (*v10)(char *, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, v1);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + *(int *)(v7 + 44));
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  v9 = v8;
  if (!v8)
  {
    v9 = (void *)MEMORY[0x18D760234](&v6[*(int *)(a1 + 48)]);
    if (v9)
    {
      AccessibilityNode.attachment.getter(v15);
      v12 = (void *)v15[1];

      v13 = swift_bridgeObjectRetain();
      v14 = specialized AccessibilityProperties.subscript.getter(v13);
      swift_bridgeObjectRelease_n();
      if (*(_QWORD *)(v14 + 16))
      {
        v9 = *(void **)(v14 + 32);
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v9 = 0;
      }
    }
  }
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  swift_retain();
  v10(v6, a1);
  return v9;
}

void AccessibilityActionReference.init<A>(_:_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  int *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[2];

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = (int *)type metadata accessor for AccessibilityActionReference(0, a3, AssociatedConformanceWitness, v12);
  swift_unknownObjectWeakInit();
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 40))(v23, a4, a5);
  v14 = (_OWORD *)(a6 + v13[9]);
  v15 = v23[1];
  *v14 = v23[0];
  v14[1] = v15;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  v17 = (uint64_t *)(a6 + v13[10]);
  *v17 = v16;
  v17[1] = v18;
  v17[2] = v19;
  v17[3] = v20;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  *(_QWORD *)(a6 + v13[11]) = v21;
  swift_unknownObjectWeakAssign();

}

void AccessibilityActionReference.perform(value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  char v9;
  char v10;

  v7 = MEMORY[0x18D760234](v3 + *(int *)(a2 + 48));
  if (v7
    && (v8 = (void *)v7,
        v9 = AccessibilityNode.sendAction<A>(_:value:)(v3, a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)),
        v8,
        (v9 & 1) != 0))
  {
    v10 = 2;
  }
  else
  {
    v10 = 1;
  }
  *a3 = v10;
}

BOOL static AccessibilityActionReference.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char v35;
  int *v36;
  int *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  int *v47;
  int *v48;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v9 = (int *)type metadata accessor for AccessibilityActionReference(0, a3, a4, v8);
  v10 = v9[9];
  v12 = *(_QWORD *)(a1 + v10);
  v11 = *(_QWORD *)(a1 + v10 + 8);
  v13 = *(_QWORD *)(a1 + v10 + 16);
  v14 = *(_QWORD *)(a1 + v10 + 24);
  v15 = (uint64_t *)(a2 + v10);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = v15[3];
  if (v14 == 2)
  {
    if (v19 == 2)
      goto LABEL_4;
LABEL_10:
    outlined copy of AccessibilityActionCategory?(v16, v17, v18, v19);
    outlined consume of AccessibilityActionCategory?(v12, v11, v13, v14);
    outlined consume of AccessibilityActionCategory?(v16, v17, v18, v19);
    return 0;
  }
  if (v19 == 2)
  {
    outlined copy of AccessibilityActionCategory.Category(v12, v11, v13, v14);
    outlined copy of AccessibilityActionCategory.Category(v12, v11, v13, v14);
    outlined consume of AccessibilityActionCategory.Category(v12, v11, v13, v14);
    goto LABEL_10;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      v31 = v9;
      outlined copy of AccessibilityActionCategory.Category(v12, v11, v13, 1uLL);
      v9 = v31;
      if (v19 != 1)
        return 0;
    }
    else
    {
      if (v19 < 2)
      {
        outlined copy of AccessibilityActionCategory?(v12, v11, v13, v14);
        outlined consume of AccessibilityActionCategory.Category(v12, v11, v13, v14);
        return 0;
      }
      v48 = v9;
      outlined copy of AccessibilityActionCategory?(v12, v11, v13, v14);
      outlined copy of AccessibilityActionCategory?(v12, v11, v13, v14);
      outlined copy of AccessibilityActionCategory?(v16, v17, v18, v19);
      outlined copy of AccessibilityActionCategory.Category(v12, v11, v13, v14);
      v46 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v12, v11, v13, v14);
      outlined consume of AccessibilityActionCategory?(v16, v17, v18, v19);
      outlined consume of AccessibilityActionCategory.Category(v12, v11, v13, v14);
      outlined consume of AccessibilityActionCategory?(v12, v11, v13, v14);
      v9 = v48;
      if ((v46 & 1) == 0)
        return 0;
    }
  }
  else
  {
    v36 = v9;
    outlined copy of AccessibilityActionCategory.Category(v12, v11, v13, 0);
    v9 = v36;
    if (v19)
      return 0;
  }
LABEL_4:
  v20 = v9[10];
  v21 = (uint64_t *)(a1 + v20);
  v22 = *(_QWORD *)(a1 + v20 + 24);
  v23 = (uint64_t *)(a2 + v20);
  v24 = v23[3];
  if (v22)
  {
    if (!v24)
      return 0;
    v25 = *v21;
    v26 = v21[1];
    v27 = *v23;
    v28 = v23[1];
    v29 = v23[2];
    v43 = v21[2] & 1;
    v45 = v21[2];
    v47 = v9;
    outlined copy of Text?(*v21, v26, v45, v22);
    outlined copy of Text?(v25, v26, v45, v22);
    outlined copy of Text?(v27, v28, v29, v24);
    v44 = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v27, v28, v29 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v25, v26, v43);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v25, v26, v45, v22);
    v9 = v47;
    if ((v44 & 1) == 0)
      return 0;
  }
  else if (v24)
  {
    return 0;
  }
  v32 = v9[11];
  v33 = *(_QWORD *)(a2 + v32);
  if (!*(_QWORD *)(a1 + v32))
  {
    if (!v33)
      goto LABEL_26;
    return 0;
  }
  if (!v33)
    return 0;
  v34 = v9;
  swift_retain();
  swift_retain();
  v35 = static Image.== infix(_:_:)();
  swift_release();
  swift_release();
  v9 = v34;
  if ((v35 & 1) == 0)
    return 0;
LABEL_26:
  v37 = v9;
  v38 = (void *)MEMORY[0x18D760234](a1 + v9[12]);
  v39 = MEMORY[0x18D760234](a2 + v37[12]);
  v40 = (void *)v39;
  if (!v38)
  {
    if (!v39)
      return 1;
    goto LABEL_35;
  }
  if (!v39)
  {
    v40 = v38;
LABEL_35:

    return 0;
  }
  type metadata accessor for AccessibilityNode();
  v41 = v38;
  v42 = static NSObject.== infix(_:_:)();

  return (v42 & 1) != 0;
}

uint64_t protocol witness for AccessibilityActionHandler.category.getter in conformance AccessibilityActionStorage<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
}

uint64_t protocol witness for AccessibilityActionHandler.label.getter in conformance AccessibilityActionStorage<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *v2;
  outlined copy of Text?(*v2, v2[1], v2[2], v2[3]);
  return v3;
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionReference<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AccessibilityActionReference<A>);
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](a4);
  return AccessibilityActionHandler.impliedRole(for:)(a1, a2, v6);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionReference<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AccessibilityActionReference.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t AnyAccessibilityAction.ConcreteBase.name.getter(uint64_t a1)
{
  return AccessibilityActionHandler.name.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t AnyAccessibilityAction.ConcreteBase.image.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.perform(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _BYTE v22[32];

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v22[-v11];
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v22[-v16];
  outlined init with copy of Any(a1, (uint64_t)v22);
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v18)
  {
    v19(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 64))(v17, v6, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, AssociatedTypeWitness);
  }
  else
  {
    v19(v12, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    *a3 = 1;
  }
  return result;
}

uint64_t AnyAccessibilityAction.ConcreteBase.perform<A>(action:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t result;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;

  v38 = a6;
  v11 = a3 + 16;
  v10 = *(_QWORD *)(a3 + 16);
  v35 = *(_QWORD *)(v11 + 8);
  v36 = a2;
  v34 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v37 = (char *)&v32 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v32 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v32 - v24;
  v26 = a3;
  v27 = v38;
  result = AnyAccessibilityAction.ConcreteBase.matches<A>(_:)(a1, v26, a4, a5);
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v36, v16);
    v29 = v37;
    v30 = swift_dynamicCast();
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if ((v30 & 1) != 0)
    {
      v31(v29, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v29, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v35 + 64))(v25, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, AssociatedTypeWitness);
    }
    v31(v29, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v29, v33);
  }
  *v27 = 1;
  return result;
}

uint64_t AnyAccessibilityAction.ConcreteBase.matches<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 32))(v8, v7, v12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(a1, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
  return a4 & 1;
}

uint64_t AnyAccessibilityAction.ConcreteBase.impliedRole(for:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24))(&v3, *(_QWORD *)(a2 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.asReference(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v25;
  id v26;

  v4 = v3;
  v26 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for AccessibilityActionReference(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v25 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v4, v6, v18);
  AccessibilityActionReference.init<A>(_:_:)((uint64_t)v9, v26, AssociatedTypeWitness, v6, v11, (uint64_t)v20);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionReference<A>, v15);
  *(_QWORD *)(a3 + 24) = type metadata accessor for AnyAccessibilityAction.ConcreteBase(0, v15, v21, v22);
  *(_QWORD *)(a3 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  result = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v20, v15);
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

uint64_t AnyAccessibilityAction.ConcreteBase.asCustomAction(category:)(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return (*(uint64_t (**)(_OWORD *, _QWORD))(*(_QWORD *)(a2 + 24) + 72))(v4, *(_QWORD *)(a2 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.asCombinedAction(name:properties:child:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;

  v8 = *a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(a7 + 24)
                                                                                                  + 80))(a1, a2, a3 & 1, a4, &v8, a6, *(_QWORD *)(a7 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.asCodableAction(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *, _QWORD))(*(_QWORD *)(a2 + 24) + 88))(&v3, *(_QWORD *)(a2 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t);
  char v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t TupleTypeMetadata2;
  char v55[40];

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v50 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v52 = (char *)&v48 - v9;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v48 - v13;
  v53 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v49 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v48 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v48 - v24;
  outlined init with copy of TableColumnList(a1, (uint64_t)v55);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for AbstractAnyAccessibilityAction);
  v26 = swift_dynamicCast();
  v27 = *(_QWORD *)(a2 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  if (v26)
  {
    v28(v14, 0, 1, a2);
    v29 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v29(v25, v14, v4);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, a2);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v30(v25, 0, 1, v4);
  }
  else
  {
    v28(v14, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v30(v25, 1, 1, v4);
    v29 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  v31 = v5;
  v32 = v25;
  v29(v21, (char *)v51, v4);
  v30(v21, 0, 1, v4);
  v33 = v53;
  v34 = v52;
  v35 = &v52[*(int *)(TupleTypeMetadata2 + 48)];
  v36 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  v36(v52, v32, v7);
  v36(v35, v21, v7);
  v51 = v31;
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v37(v34, 1, v4) != 1)
  {
    v40 = v32;
    v41 = v49;
    v36(v49, v34, v7);
    if (v37(v35, 1, v4) != 1)
    {
      v43 = v51;
      v44 = v48;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v35, v4);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v45 = *(void (**)(char *, uint64_t))(v43 + 8);
      v45(v44, v4);
      v46 = *(void (**)(char *, uint64_t))(v53 + 8);
      v46(v21, v7);
      v46(v40, v7);
      v45(v41, v4);
      v46(v34, v7);
      return v39 & 1;
    }
    v42 = *(void (**)(char *, uint64_t))(v53 + 8);
    v42(v21, v7);
    v42(v40, v7);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v4);
    goto LABEL_9;
  }
  v38 = *(void (**)(char *, uint64_t))(v33 + 8);
  v38(v21, v7);
  v38(v32, v7);
  if (v37(v35, 1, v4) != 1)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v34, TupleTypeMetadata2);
    v39 = 0;
    return v39 & 1;
  }
  v38(v34, v7);
  v39 = 1;
  return v39 & 1;
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.perform<A>(action:value:) in conformance AnyAccessibilityAction.ConcreteBase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  return AnyAccessibilityAction.ConcreteBase.perform<A>(action:value:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.impliedRole(for:) in conformance AnyAccessibilityAction.ConcreteBase<A>(__int128 *a1, uint64_t a2)
{
  return AnyAccessibilityAction.ConcreteBase.impliedRole(for:)(a1, a2);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asCombinedAction(name:properties:child:) in conformance AnyAccessibilityAction.ConcreteBase<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  return AnyAccessibilityAction.ConcreteBase.asCombinedAction(name:properties:child:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.matches<A>(_:) in conformance AnyAccessibilityAction.ConcreteBase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyAccessibilityAction.ConcreteBase.matches<A>(_:)(a1, a4, a2, a3);
}

_QWORD *AnyAccessibilityAction.asCombinedAction(name:properties:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  Swift::UInt32 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v35;
  __int128 v36;
  _BYTE v37[25];

  v8 = (uint64_t)v7;
  v13 = *a5;
  v14 = v7[3];
  v15 = v7[4];
  v16 = a3 & 1;
  __swift_project_boxed_opaque_existential_1(v7, v14);
  v35 = v13;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, void *, uint64_t, uint64_t))(v15 + 72))(&v36, a1, a2, v16, a4, &v35, a6, v14, v15);
  if (*(_QWORD *)&v37[8])
  {
    v18 = *(_OWORD *)v37;
    *(_OWORD *)a7 = v36;
    *(_OWORD *)(a7 + 16) = v18;
    *(_OWORD *)(a7 + 25) = *(_OWORD *)&v37[9];
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v36, (uint64_t (*)(_QWORD))type metadata accessor for AnyAccessibilityAction?);
    v19 = v7[3];
    v20 = v7[4];
    __swift_project_boxed_opaque_existential_1(v7, v19);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(a1, a2, v16);
    v21 = v20;
    v22 = a4;
    v23 = v33(v19, v21);
    if (!v23)
    {
      v24 = swift_bridgeObjectRetain();
      v25 = specialized AccessibilityProperties.subscript.getter(v24);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v25 + 16))
      {
        v23 = *(_QWORD *)(v25 + 32);
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v23 = 0;
      }
    }
    outlined init with copy of AnyAccessibilityAction(v8, (uint64_t)&v36);
    v26 = swift_allocObject();
    v27 = *(_OWORD *)v37;
    *(_OWORD *)(v26 + 16) = v36;
    *(_OWORD *)(v26 + 32) = v27;
    *(_OWORD *)(v26 + 41) = *(_OWORD *)&v37[9];
    *(_QWORD *)(v26 + 64) = a6;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:);
    *(_QWORD *)(v28 + 24) = v26;
    v29 = *(_BYTE *)(v8 + 40);
    v30 = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
    *(_QWORD *)(a7 + 24) = v31;
    *(_QWORD *)(a7 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v32 = swift_allocObject();
    *(_QWORD *)a7 = v32;
    *(_QWORD *)(v32 + 16) = a1;
    *(_QWORD *)(v32 + 24) = a2;
    *(_QWORD *)(v32 + 32) = v16;
    *(_QWORD *)(v32 + 40) = v22;
    *(_QWORD *)(v32 + 48) = 0;
    *(_QWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 72) = 2;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_QWORD *)(v32 + 112) = v23;
    *(_QWORD *)(v32 + 120) = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
    *(_QWORD *)(v32 + 128) = v28;
    *(_DWORD *)(v32 + 136) = v30;
    *(_BYTE *)(a7 + 40) = v29;
    return a6;
  }
  return result;
}

uint64_t closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  _QWORD v7[4];

  if (*(_BYTE *)(a1 + 40) == 1)
  {
    v7[3] = MEMORY[0x1E0DEE9C0] + 8;
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v3);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 32))(v7, v3, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    result = specialized AccessibilityNode.sendAction<A>(_:value:)(0, 0, 0, 0);
    if ((result & 1) != 0)
      v6 = 2;
    else
      v6 = 1;
    *a2 = v6;
  }
  return result;
}

uint64_t AnyAccessibilityAction.isEqual(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)();
  __int128 v7;
  _OWORD v8[2];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  _BYTE v15[25];
  _BYTE v16[48];
  _OWORD v17[3];
  _BYTE v18[40];

  outlined init with copy of TableColumnList(a1, (uint64_t)v18);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for AbstractAnyAccessibilityAction);
  if ((swift_dynamicCast() & 1) == 0)
    memset(v17, 0, 41);
  outlined init with copy of AnyAccessibilityAction(v1, (uint64_t)v16);
  outlined init with copy of AnyAccessibilityAction?((uint64_t)v17, (uint64_t)v12);
  outlined init with copy of AnyAccessibilityAction?((uint64_t)v16, (uint64_t)&v14);
  if (v13)
  {
    outlined init with copy of AnyAccessibilityAction?((uint64_t)v12, (uint64_t)v9);
    if (*(_QWORD *)&v15[8])
    {
      v7 = v14;
      v8[0] = *(_OWORD *)v15;
      *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)&v15[9];
      v2 = v10;
      v3 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      v4 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v3 + 88))(&v7, v2, v3);
      outlined destroy of AnyAccessibilityAction((uint64_t)&v7);
      v5 = type metadata accessor for AnyAccessibilityAction?;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyAccessibilityAction?);
      outlined destroy of AnyAccessibilityAction((uint64_t)v9);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyAccessibilityAction?);
      outlined destroy of AnyAccessibilityAction((uint64_t)v9);
      v4 = 0;
      v5 = type metadata accessor for (AnyAccessibilityAction?, AnyAccessibilityAction?);
    }
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyAccessibilityAction?);
    if (*(_QWORD *)&v15[8])
      v5 = type metadata accessor for (AnyAccessibilityAction?, AnyAccessibilityAction?);
    else
      v5 = type metadata accessor for AnyAccessibilityAction?;
    if (*(_QWORD *)&v15[8])
      v4 = 0;
    else
      v4 = -1;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))v5);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AnyAccessibilityAction?);
  return v4 & 1;
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.perform(value:) in conformance AnyAccessibilityAction(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, v3, v4);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.impliedRole(for:) in conformance AnyAccessibilityAction(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v7[0] = v2;
  v7[1] = v3;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v7, v4, v5);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asReference(for:) in conformance AnyAccessibilityAction(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v3, v4);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asCustomAction(category:) in conformance AnyAccessibilityAction(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v8 = v7;
  v9 = v2;
  v10 = v3;
  return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v5 + 64))(&v8, v4, v5);
}

_QWORD *protocol witness for AbstractAnyAccessibilityAction.asCombinedAction(name:properties:child:) in conformance AnyAccessibilityAction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  return AnyAccessibilityAction.asCombinedAction(name:properties:child:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asCodableAction(in:) in conformance AnyAccessibilityAction(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v7[0] = v2;
  v7[1] = v3;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 96))(v7, v4, v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyAccessibilityAction(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 88))(a2, v3, v4) & 1;
}

uint64_t sub_1879E7AE0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:)(v1 + 16, a1);
}

uint64_t sub_1879E7B18()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityActionStorage<AccessibilityVoidAction>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>)
  {
    v2 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    v4 = type metadata accessor for AccessibilityActionStorage(a1, (uint64_t)&type metadata for AccessibilityVoidAction, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>);
  }
}

uint64_t sub_1879E7B94()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined assign with take of AnyAccessibilityAction(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a2);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 40) = *((_BYTE *)a1 + 40);
  return a2;
}

uint64_t type metadata accessor for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityActionReference);
}

void type metadata accessor for AccessibilityKindActionProvider?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityKindActionProvider?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityKindActionProvider);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityKindActionProvider?);
  }
}

uint64_t outlined init with copy of AnyAccessibilityAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyAccessibilityAction?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (AnyAccessibilityAction?, AnyAccessibilityAction?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyAccessibilityAction?, AnyAccessibilityAction?))
  {
    type metadata accessor for AnyAccessibilityAction?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyAccessibilityAction?, AnyAccessibilityAction?));
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction;
  if (!lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityZoomAction, &type metadata for AccessibilityZoomAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction;
  if (!lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityZoomAction, &type metadata for AccessibilityZoomAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction);
  }
  return result;
}

void destroy for AnyAccessibilityAction.Resolved(id *a1)
{

  swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AnyAccessibilityAction.Resolved(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = v3;
  swift_bridgeObjectRetain();
  v7 = v5;
  return a1;
}

uint64_t assignWithCopy for AnyAccessibilityAction.Resolved(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for AnyAccessibilityAction.Resolved(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for AnyAccessibilityAction.Resolved()
{
  return &type metadata for AnyAccessibilityAction.Resolved;
}

uint64_t type metadata completion function for AccessibilityActionReference()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for AccessibilityActionReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v4 + 24);
  LODWORD(v6) = -1;
  if (v5 < 0xFFFFFFFF)
    v6 = *(_QWORD *)(v4 + 24);
  if ((int)v6 - 2 < 0 && v5 >= 2)
  {
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v7 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(v8 + 24);
  if ((int)v10 - 2 < 0 && v9 >= 2)
  {
    v12 = *(_QWORD *)v8;
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_BYTE *)(v8 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v8, v13, v14);
    *(_QWORD *)v7 = v12;
    *(_QWORD *)(v7 + 8) = v13;
    *(_BYTE *)(v7 + 16) = v14;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
  }
  v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  else
  {
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)((v15 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  else
    v11 = *(_QWORD *)(v7 + 24);
  v12 = v11 - 2;
  v13 = *(_QWORD *)(v8 + 24);
  if (v13 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(v8 + 24);
  v14 = v10 - 2;
  if (v12 < 0)
  {
    if ((v14 & 0x80000000) == 0)
    {
      if (v9 >= 2)
      {
        outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
        swift_bridgeObjectRelease();
      }
      goto LABEL_14;
    }
    if (v9 >= 2)
    {
      if (v13 >= 2)
      {
        v34 = *(_QWORD *)v8;
        v35 = *(_QWORD *)(v8 + 8);
        v36 = *(_BYTE *)(v8 + 16);
        outlined copy of Text.Storage(*(_QWORD *)v8, v35, v36);
        v37 = *(_QWORD *)v7;
        v38 = *(_QWORD *)(v7 + 8);
        v39 = *(_BYTE *)(v7 + 16);
        *(_QWORD *)v7 = v34;
        *(_QWORD *)(v7 + 8) = v35;
        *(_BYTE *)(v7 + 16) = v36;
        outlined consume of Text.Storage(v37, v38, v39);
        *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(v7);
        v33 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v33;
      }
      goto LABEL_15;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v15;
    goto LABEL_15;
  }
  if (v13 < 2)
    goto LABEL_14;
  v30 = *(_QWORD *)v8;
  v31 = *(_QWORD *)(v8 + 8);
  v32 = *(_BYTE *)(v8 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v8, v31, v32);
  *(_QWORD *)v7 = v30;
  *(_QWORD *)(v7 + 8) = v31;
  *(_BYTE *)(v7 + 16) = v32;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
LABEL_15:
  v16 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 24);
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)v17;
      v26 = *(_QWORD *)(v17 + 8);
      v27 = *(_BYTE *)(v17 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v17, v26, v27);
      *(_QWORD *)v16 = v25;
      *(_QWORD *)(v16 + 8) = v26;
      *(_BYTE *)(v16 + 16) = v27;
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
LABEL_21:
    v28 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v28;
    goto LABEL_22;
  }
  if (v18 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v19 = *(_QWORD *)v17;
  v20 = *(_QWORD *)(v17 + 8);
  v21 = *(_BYTE *)(v17 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v17, v20, v21);
  v22 = *(_QWORD *)v16;
  v23 = *(_QWORD *)(v16 + 8);
  v24 = *(_BYTE *)(v16 + 16);
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = v20;
  *(_BYTE *)(v16 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  *(_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(v7 + 24);
  if ((int)v10 - 2 >= 0)
    goto LABEL_4;
  v18 = *(_QWORD *)(v8 + 24);
  LODWORD(v19) = -1;
  if (v18 < 0xFFFFFFFF)
    v19 = *(_QWORD *)(v8 + 24);
  if ((int)v19 - 2 >= 0)
  {
    if (v9 >= 2)
    {
      outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
      swift_bridgeObjectRelease();
    }
    goto LABEL_4;
  }
  if (v9 < 2)
  {
LABEL_4:
    v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
    goto LABEL_5;
  }
  if (v18 >= 2)
  {
    v23 = *(_BYTE *)(v8 + 16);
    v24 = *(_QWORD *)v7;
    v25 = *(_QWORD *)(v7 + 8);
    v26 = *(_BYTE *)(v7 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_BYTE *)(v7 + 16) = v23;
    outlined consume of Text.Storage(v24, v25, v26);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(v7);
    v22 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v22;
  }
LABEL_5:
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_14:
    v20 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v20;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v14 = *(_BYTE *)(v13 + 16);
  v15 = *(_QWORD *)v12;
  v16 = *(_QWORD *)(v12 + 8);
  v17 = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRelease();
LABEL_15:
  *(_QWORD *)((v12 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionReference(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)(((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1879E86B8 + 4 * byte_187C7953D[v10]))();
  }
}

void storeEnumTagSinglePayload for AccessibilityActionReference(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1879E8858()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879E88E8);
}

void sub_1879E8860(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879E8868);
  JUMPOUT(0x1879E88E8);
}

void sub_1879E88B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879E88E8);
}

void sub_1879E88C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879E88E8);
}

uint64_t sub_1879E88C8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1879E88D4);
    *(_QWORD *)(((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 24) = a2;
LABEL_6:
    JUMPOUT(0x1879E88E8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityActionStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 24);
    LODWORD(v13) = -1;
    if (v12 < 0xFFFFFFFF)
      v13 = *(_QWORD *)(v11 + 24);
    if ((int)v13 - 2 < 0 && v12 >= 2)
    {
      v15 = *(_QWORD *)v11;
      v16 = *(_QWORD *)(v11 + 8);
      v17 = *(_BYTE *)(v11 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v11, v16, v17);
      *(_QWORD *)v10 = v15;
      *(_QWORD *)(v10 + 8) = v16;
      *(_BYTE *)(v10 + 16) = v17;
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v14;
    }
    v18 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v19 + 24) < 0xFFFFFFFFuLL)
    {
      v23 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v23;
    }
    else
    {
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v19, v21, v22);
      *(_QWORD *)v18 = v20;
      *(_QWORD *)(v18 + 8) = v21;
      *(_BYTE *)(v18 + 16) = v22;
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain();
    }
    v24 = (_QWORD *)((v18 + 39) & 0xFFFFFFFFFFFFF8);
    v25 = (_QWORD *)((v19 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    *(_DWORD *)(((unint64_t)v26 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v27 + 19) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  else
    v11 = *(_QWORD *)(v7 + 24);
  v12 = v11 - 2;
  v13 = *(_QWORD *)(v8 + 24);
  if (v13 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(v8 + 24);
  v14 = v10 - 2;
  if (v12 < 0)
  {
    if ((v14 & 0x80000000) == 0)
    {
      if (v9 >= 2)
      {
        outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
        swift_bridgeObjectRelease();
      }
      goto LABEL_14;
    }
    if (v9 >= 2)
    {
      if (v13 >= 2)
      {
        v39 = *(_QWORD *)v8;
        v40 = *(_QWORD *)(v8 + 8);
        v41 = *(_BYTE *)(v8 + 16);
        outlined copy of Text.Storage(*(_QWORD *)v8, v40, v41);
        v42 = *(_QWORD *)v7;
        v43 = *(_QWORD *)(v7 + 8);
        v44 = *(_BYTE *)(v7 + 16);
        *(_QWORD *)v7 = v39;
        *(_QWORD *)(v7 + 8) = v40;
        *(_BYTE *)(v7 + 16) = v41;
        outlined consume of Text.Storage(v42, v43, v44);
        *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(v7);
        v38 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v38;
      }
      goto LABEL_15;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v15;
    goto LABEL_15;
  }
  if (v13 < 2)
    goto LABEL_14;
  v35 = *(_QWORD *)v8;
  v36 = *(_QWORD *)(v8 + 8);
  v37 = *(_BYTE *)(v8 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v8, v36, v37);
  *(_QWORD *)v7 = v35;
  *(_QWORD *)(v7 + 8) = v36;
  *(_BYTE *)(v7 + 16) = v37;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
LABEL_15:
  v16 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 24);
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)v17;
      v26 = *(_QWORD *)(v17 + 8);
      v27 = *(_BYTE *)(v17 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v17, v26, v27);
      *(_QWORD *)v16 = v25;
      *(_QWORD *)(v16 + 8) = v26;
      *(_BYTE *)(v16 + 16) = v27;
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
LABEL_21:
    v28 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v28;
    goto LABEL_22;
  }
  if (v18 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v19 = *(_QWORD *)v17;
  v20 = *(_QWORD *)(v17 + 8);
  v21 = *(_BYTE *)(v17 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v17, v20, v21);
  v22 = *(_QWORD *)v16;
  v23 = *(_QWORD *)(v16 + 8);
  v24 = *(_BYTE *)(v16 + 16);
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = v20;
  *(_BYTE *)(v16 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  v29 = (_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  swift_retain();
  swift_release();
  v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  *(_DWORD *)(((unint64_t)v31 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v32 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD *v15;
  _OWORD *v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = (_OWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  v16 = (_OWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  *v15 = *v16;
  *(_DWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v16 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(v7 + 24);
  if ((int)v10 - 2 >= 0)
    goto LABEL_4;
  v18 = *(_QWORD *)(v8 + 24);
  LODWORD(v19) = -1;
  if (v18 < 0xFFFFFFFF)
    v19 = *(_QWORD *)(v8 + 24);
  if ((int)v19 - 2 >= 0)
  {
    if (v9 >= 2)
    {
      outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
      swift_bridgeObjectRelease();
    }
    goto LABEL_4;
  }
  if (v9 < 2)
  {
LABEL_4:
    v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
    goto LABEL_5;
  }
  if (v18 >= 2)
  {
    v27 = *(_BYTE *)(v8 + 16);
    v28 = *(_QWORD *)v7;
    v29 = *(_QWORD *)(v7 + 8);
    v30 = *(_BYTE *)(v7 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_BYTE *)(v7 + 16) = v27;
    outlined consume of Text.Storage(v28, v29, v30);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(v7);
    v26 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v26;
  }
LABEL_5:
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_14:
    v20 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v20;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v14 = *(_BYTE *)(v13 + 16);
  v15 = *(_QWORD *)v12;
  v16 = *(_QWORD *)(v12 + 8);
  v17 = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRelease();
LABEL_15:
  v21 = (_QWORD *)((v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  swift_release();
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  swift_release();
  *(_DWORD *)(((unint64_t)v23 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v24 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionStorage(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2
    && *((_BYTE *)a1
       + ((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v6 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v9 = *(_QWORD *)(((((((((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

void storeEnumTagSinglePayload for AccessibilityActionStorage(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v10] = 0;
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        v12 = (_QWORD *)((((((((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0)
        {
          *v12 = a2 ^ 0x80000000;
          v12[1] = 0;
        }
        else
        {
          *v12 = a2 - 1;
        }
      }
      else
      {
        (*(void (**)(_BYTE *))(v6 + 56))(a1);
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero(a1, (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 19) & 0xFFFFFFFFFFFFFFF8 | 4);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      a1[v10] = 1;
  }
}

uint64_t instantiation function for generic protocol witness table for AccessibilityActionReference<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionReference<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionReference<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *outlined release of AccessibilityActionStorage<AccessibilityVoidAction>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  outlined consume of AccessibilityActionKind.ActionKind(*a1, a1[1], a1[2], a1[3]);
  outlined consume of AccessibilityActionCategory?(v2, v3, v4, v5);
  outlined consume of Text?(v6, v7, v8, v9);
  swift_release();
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityActionStorage.perform(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v4[4];
  v5 = v4[5];
  v7 = type metadata accessor for AccessibilityActionStorage(0, v4[2], v4[3], a4);
  return (*(uint64_t (**)(uint64_t))(v6 + *(int *)(v7 + 48)))(v5);
}

uint64_t type metadata completion function for BadgedView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BadgedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v11 = a2[2];
    if ((v11 >> 1) > 0x80000000)
    {
      v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
    }
    else
    {
      v12 = *a2;
      v13 = a2[1];
      v14 = a2[3];
      outlined copy of BadgeLabel(*a2, v13, a2[2]);
      *v4 = v12;
      v4[1] = v13;
      v4[2] = v11;
      v4[3] = v14;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v7 + 32) & ~v7, ((unint64_t)a2 + v7 + 32) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for BadgedView(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = a1[2];
  if ((v4 >> 1) <= 0x80000000)
    outlined consume of BadgeLabel(*a1, a1[1], v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for BadgedView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = a2[2];
  if ((v6 >> 1) > 0x80000000)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    outlined copy of BadgeLabel(*a2, v8, v6);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))((*(unsigned __int8 *)(v11 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t *assignWithCopy for BadgedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v6 = a1[2];
  v7 = a2[2];
  v8 = v7 >> 1;
  if ((v6 >> 1) > 0x80000000)
  {
    if (v8 <= 0x80000000)
    {
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[3];
      outlined copy of BadgeLabel(*a2, v16, v7);
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v7;
      a1[3] = v17;
      goto LABEL_8;
    }
LABEL_7:
    v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v18;
    goto LABEL_8;
  }
  if (v8 > 0x80000000)
  {
    outlined consume of BadgeLabel(*a1, a1[1], v6);
    goto LABEL_7;
  }
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  outlined copy of BadgeLabel(*a2, v10, v7);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v7;
  a1[3] = v11;
  outlined consume of BadgeLabel(v12, v13, v14);
LABEL_8:
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t *assignWithTake for BadgedView(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v6 = a1[2];
  if ((v6 >> 1) > 0x80000000)
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 16);
  if ((v7 >> 1) > 0x80000000)
  {
    outlined consume of BadgeLabel(*a1, a1[1], v6);
LABEL_5:
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v11;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *a1;
  v10 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v7;
  a1[3] = v8;
  outlined consume of BadgeLabel(v9, v10, v6);
LABEL_6:
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for BadgedView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 16) >> 1;
      if (v15 > 0x80000000)
        v16 = ~(_DWORD)v15;
      else
        v16 = -1;
      if (v16 + 1 >= 2)
        return v16;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879E980C + 4 * byte_187C79890[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for BadgedView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for BadgedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BadgedView);
}

uint64_t destroy for BadgeLabel(uint64_t *a1)
{
  return outlined consume of BadgeLabel(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for BadgeLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of BadgeLabel(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for BadgeLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of BadgeLabel(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of BadgeLabel(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for BadgeLabel(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of BadgeLabel(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for BadgeLabel()
{
  return &type metadata for BadgeLabel;
}

unint64_t lazy protocol witness table accessor for type BadgeLabel and conformance BadgeLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BadgeLabel and conformance BadgeLabel;
  if (!lazy protocol witness table cache variable for type BadgeLabel and conformance BadgeLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgeLabel, &type metadata for BadgeLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeLabel and conformance BadgeLabel);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BadgeLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized closure #1 in AccessibilityBadgedViewModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _OWORD v14[3];
  _OWORD v15[3];
  _BYTE v16[48];
  _QWORD v17[7];

  v6 = a1;
  if (a3 < 0)
  {
    v8 = a2;
    v9 = a3 & 1;
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17[0] = a1;
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v8 = v7;
    v9 = 0;
  }
  v10 = *a5;
  v11 = a5[1];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v6, v8, v9);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v17, (uint64_t)v16);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  swift_retain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v12, v15);
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v16, (uint64_t)v14);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v14);
  specialized AccessibilityProperties.subscript.getter(*(_QWORD *)(v10 + 16), v14);
  specialized Optional<A>.merge(with:)((uint64_t)v15);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v14);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v15);
  swift_endAccess();
  outlined destroy of AccessibilityValueStorage?((uint64_t)v16);
  outlined destroy of AccessibilityValueStorage((uint64_t)v17);
  outlined consume of Text.Storage(v6, v8, v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a5 = v10;
  a5[1] = v11;
  return result;
}

uint64_t BadgedView.init(badgeLabel:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  type metadata accessor for BadgedView(0, a6, a7, a4);
  return a5();
}

void BadgedView.body.getter(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[2];

  type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
  v2 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  v3[0] = *(_QWORD *)(a1 + 24);
  v3[1] = lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for StaticSourceWriter();
}

void sub_1879E9ECC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v11 = v1[3];
  *(_QWORD *)(v3 - 128) = *v1;
  *(_QWORD *)(v3 - 120) = v9;
  *(_QWORD *)(v3 - 112) = v10;
  *(_QWORD *)(v3 - 104) = v11;
  *(_QWORD *)(v3 - 176) = v2;
  *(_QWORD *)(v3 - 168) = v0;
  *(_QWORD *)(v3 - 160) = v1;
  outlined copy of BadgeLabel?(v8, v9, v10);
  lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, (uint64_t)partial apply for closure #1 in BadgedView.body.getter);
}

uint64_t sub_1879E9F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  outlined consume of BadgeLabel?(*(_QWORD *)(v5 - 128), *(_QWORD *)(v5 - 120), *(_QWORD *)(v5 - 112));
  *(_QWORD *)(v5 - 144) = v2;
  *(_QWORD *)(v5 - 136) = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v3, v0, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v3, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v5 - 200));
  return v7(v1, v0);
}

uint64_t closure #1 in BadgedView.body.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];
  _OWORD v25[2];

  v8 = type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v24 - v16;
  type metadata accessor for BadgedView(0, a2, a3, v18);
  v19 = a1[1];
  v25[0] = *a1;
  v25[1] = v19;
  MEMORY[0x18D75B4AC](v25, a2, v8, a3);
  v20 = lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v24[0] = a3;
  v24[1] = v20;
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v24);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, v21);
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v9, a4);
  return ((uint64_t (*)(char *, uint64_t))v22)(v17, v9);
}

uint64_t AccessibilityConfigurationViewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  outlined copy of BadgeLabel?(a1, a2, a3);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  v10 = v14;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 24) = v10;
  v13 = result;
  v14 = 0;
  if (a3 >> 1 == 0xFFFFFFFF)
  {
    v12 = 0;
  }
  else
  {
    outlined copy of BadgeLabel(a1, a2, a3);
    specialized closure #1 in AccessibilityBadgedViewModifier.body(content:)(a1, a2, a3, a4, &v13);
    outlined consume of BadgeLabel?(a1, a2, a3);
    outlined consume of BadgeLabel?(a1, a2, a3);
    result = v13;
    v12 = v14;
  }
  *a5 = result;
  a5[1] = v12;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityConfigurationViewModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return AccessibilityConfigurationViewModifier.body(content:)(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t protocol witness for View.body.getter in conformance BadgeLabel@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v3, v4);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CAF4C0]);
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = *v1;
  v8 = v1[2];
  if (v8 < 0)
  {
    v13 = v1[3];
    v11 = v1[1];
    v15 = v8 & 1;
    outlined copy of Text.Storage(v7, v11, v8 & 1);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    static Locale.autoupdatingCurrent.getter();
    lazy protocol witness table accessor for type Int and conformance Int();
    IntegerFormatStyle.init(locale:)();
    lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
    result = Text.init<A>(_:format:)();
    v7 = result;
    v11 = v10;
    v13 = v12;
    v15 = v14 & 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v13;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BadgedView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBadgedViewNeedsValue, &type metadata for AccessibilityBadgedViewNeedsValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityConfigurationViewModifier, &unk_1E1B07AD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in BadgedView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in BadgedView.body.getter(*(_OWORD **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void *type metadata accessor for AccessibilityConfigurationViewModifier()
{
  return &unk_1E1B07AD8;
}

void sub_1879EA61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
  v2 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1879EA694()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[14];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v0, v1, v3);
}

uint64_t sub_1879EA6E0()
{
  return MEMORY[0x1E0CE6C58];
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityConfigurationViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityConfigurationViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier, (uint64_t)&unk_1E1B07AD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityConfigurationViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier, (uint64_t)&unk_1E1B07AD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ViewTransform.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ViewTransform.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ViewTransform.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ViewTransform.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ViewTransform.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ViewTransform.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ViewTransform.CodingKeys(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x736D657469;
  if (*v1)
    v2 = 0xD000000000000012;
  v3 = 0x8000000187BD3410;
  if (!*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ViewTransform.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x736D657469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ViewTransform.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ViewTransform.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewTransform.CodingKeys()
{
  lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ViewTransform.CodingKeys()
{
  lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ViewTransform.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for KeyedEncodingContainer<ViewTransform.CodingKeys>();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v1;
  v11 = v1[1];
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v26 = MEMORY[0x1E0DEE9D8];
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  v25 = v14;
  v19 = &v26;
  ViewTransform.forEach(inverted:_:)();
  v21 = v26;
  v20 = 0;
  type metadata accessor for [ViewTransform.Item]();
  lazy protocol witness table accessor for type [ViewTransform.Item] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    ViewTransform.positionAdjustment.getter();
    v21 = v15;
    v22 = v16;
    v20 = 1;
    type metadata accessor for CGSize(0);
    lazy protocol witness table accessor for type CGSize and conformance CGSize();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for KeyedEncodingContainer<ViewTransform.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<ViewTransform.CodingKeys>)
  {
    lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<ViewTransform.CodingKeys>);
  }
}

unint64_t lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewTransform.CodingKeys, &type metadata for ViewTransform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewTransform.CodingKeys, &type metadata for ViewTransform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewTransform.CodingKeys, &type metadata for ViewTransform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewTransform.CodingKeys, &type metadata for ViewTransform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

uint64_t closure #1 in ViewTransform.encode(to:)(uint64_t a1, uint64_t a2, char **a3)
{
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[120];

  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v9);
  v4 = *a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    *a3 = v4;
  }
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v7 >= v6 >> 1)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    *a3 = v4;
  }
  *((_QWORD *)v4 + 2) = v7 + 1;
  return outlined init with take of ViewTransform.Item((uint64_t)v9, (uint64_t)&v4[120 * v7 + 32]);
}

uint64_t partial apply for closure #1 in ViewTransform.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ViewTransform.encode(to:)(a1, a2, *(char ***)(v2 + 16));
}

void type metadata accessor for [ViewTransform.Item]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ViewTransform.Item])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ViewTransform.Item]);
  }
}

unint64_t lazy protocol witness table accessor for type [ViewTransform.Item] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type [ViewTransform.Item] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ViewTransform.Item] and conformance <A> [A])
  {
    type metadata accessor for [ViewTransform.Item]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ViewTransform.Item and conformance ViewTransform.Item();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ViewTransform.Item] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewTransform.Item and conformance ViewTransform.Item()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.Item and conformance ViewTransform.Item;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item and conformance ViewTransform.Item)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2210], MEMORY[0x1E0CE2208]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item and conformance ViewTransform.Item);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CGSize and conformance CGSize;
  if (!lazy protocol witness table cache variable for type CGSize and conformance CGSize)
  {
    type metadata accessor for CGSize(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0C9B9F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ViewTransform(_QWORD *a1)
{
  return ViewTransform.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for ViewTransform.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1879EAFF4 + 4 * byte_187C799C9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879EB028 + 4 * byte_187C799C4[v4]))();
}

uint64_t sub_1879EB028(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879EB030(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879EB038);
  return result;
}

uint64_t sub_1879EB044(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879EB04CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879EB050(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879EB058(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.CodingKeys()
{
  return &type metadata for ViewTransform.CodingKeys;
}

uint64_t outlined init with take of ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2208] - 8) + 32))(a2, a1);
  return a2;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return v3;
}

_BYTE *TextEditorTextView.helper.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _BYTE *v3;
  uint64_t v4;
  id v5;
  _BYTE *v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper);
  if (v2)
  {
    v3 = *(_BYTE **)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper);
  }
  else
  {
    v4 = v0;
    v5 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
    v6 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
    swift_unknownObjectWeakAssign();
    *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate + 8] = &protocol witness table for TextEditorTextView;
    swift_unknownObjectWeakAssign();
    v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 2;
    v7 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

uint64_t specialized StringProtocol.replacingCharacters<A, B>(in:with:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0)
    goto LABEL_25;
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  v15 = v14;
  result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0)
    goto LABEL_25;
  v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v17) = 1;
  v18 = 4 << v17;
  v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a5, a6);
    v19 = result;
  }
  v40 = a3;
  v20 = a2;
  v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v23 = a6 & 0x2000000000000000;
    v25 = a5 & 0xFFFFFFFFFFFFLL;
    v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0)
      v32 = HIBYTE(a6) & 0xF;
    else
      v32 = a5 & 0xFFFFFFFFFFFFLL;
    if (v32 < v19 >> 16)
      goto LABEL_43;
    result = String.UTF8View._foreignDistance(from:to:)();
    v22 = result;
    if (v21)
      v26 = 7;
    else
      v26 = 11;
  }
  else
  {
    v22 = v19 >> 16;
    v23 = a6 & 0x2000000000000000;
    v24 = HIBYTE(a6) & 0xF;
    v25 = a5 & 0xFFFFFFFFFFFFLL;
    v26 = 7;
  }
  if (!v23)
    v24 = v25;
  v27 = 4 << (v21 >> 59);
  v28 = v26 | (v24 << 16);
  a2 = v20;
  if ((a6 & 0x1000000000000000) == 0)
    v27 = 8;
  v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    v33 = v20;
    v34 = v22;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, a5, a6);
    v22 = v34;
    v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    v35 = v26 | (v24 << 16);
    v36 = v22;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v35, a5, a6);
    v22 = v36;
    v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0)
        goto LABEL_18;
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    v37 = v22;
    v38 = String.UTF8View._foreignDistance(from:to:)();
    v22 = v37;
    v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        result = HIBYTE(a4) & 0xF;
        v31 = v22 + result;
        if (!__OFADD__(v22, result))
          goto LABEL_23;
      }
      else
      {
        result = v40 & 0xFFFFFFFFFFFFLL;
        v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL))
          goto LABEL_23;
      }
      goto LABEL_39;
    }
LABEL_37:
    v39 = v22;
    result = String.UTF8View._foreignCount()();
    v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        MEMORY[0x18D75CD3C](result);
LABEL_25:
        String.subscript.getter();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        String.append<A>(contentsOf:)();
        specialized Collection.subscript.getter(a2, a5, a6);
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

void static UIKitTextEditor._makeView(view:inputs:)(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  int v4;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _OWORD v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = v2;
  v10 = *(_OWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v12[0] = v7[0];
  v12[1] = v3;
  v12[2] = v8;
  v11 = *(_DWORD *)(a1 + 80);
  v6 = v7[0];
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) == 0)
  {
    v6 = v12[0];
    static StyleContextAcceptsPredicate.evaluate(inputs:)();
  }
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(0);
  outlined retain of _GraphInputs((uint64_t)v12);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<TextSelection> and conformance _GraphInputs.SelectionBasedStorageKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>, (uint64_t)&protocol conformance descriptor for _GraphInputs.SelectionBasedStorageKey<A>);
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v12);
  v4 = *MEMORY[0x1E0CFED28];
  if ((_DWORD)v6 == *MEMORY[0x1E0CFED28])
  {
    if (DWORD1(v6) != v4)
      goto LABEL_5;
  }
  else
  {
    AGCreateWeakAttribute();
    if (DWORD1(v6) != v4)
    {
LABEL_5:
      AGCreateWeakAttribute();
      if (DWORD2(v6) != v4)
        goto LABEL_6;
LABEL_10:
      if (HIDWORD(v6) == v4)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  if (DWORD2(v6) == v4)
    goto LABEL_10;
LABEL_6:
  AGCreateWeakAttribute();
  if (HIDWORD(v6) != v4)
LABEL_7:
    AGCreateWeakAttribute();
LABEL_11:
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<UIKitTextEditor>, type metadata accessor for UIKitTextEditor, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  type metadata accessor for TextEditorStyleConfiguration(0);
  AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UIKitTextViewAdaptor(0);
  lazy protocol witness table accessor for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v7, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance UIKitTextEditor.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for UIKitTextViewAdaptor(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

double protocol witness for Rule.value.getter in conformance UIKitTextEditor.MakeRepresentable@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t Value;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  __int128 v19;

  v3 = type metadata accessor for TextEditorStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_BYTE *)(v1 + 4);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v6, type metadata accessor for TextEditorStyleConfiguration);
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_BYTE *)(a1 + 8) = 0;
  v9 = (int *)type metadata accessor for UIKitTextViewAdaptor(0);
  v10 = a1 + v9[6];
  type metadata accessor for Binding<TextSelection?>(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v19 = *(_OWORD *)(v1 + 8);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = *(_QWORD *)(v1 + 32);
  v12(v10, 1, 1, v11);
  v15 = *((_QWORD *)v6 + 2);
  v16 = *((_QWORD *)v6 + 3);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  outlined assign with take of WeakBox<Swift.AnyObject>((uint64_t)&v6[*(int *)(v3 + 20)], v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  v17 = a1 + v9[7];
  result = *(double *)&v19;
  *(_OWORD *)v17 = v19;
  *(_QWORD *)(v17 + 16) = v13;
  *(_QWORD *)(v17 + 24) = v14;
  *(_BYTE *)(a1 + v9[8]) = v7;
  return result;
}

void protocol witness for View.body.getter in conformance UIKitTextEditor()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id UIKitTextViewAdaptor.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  type metadata accessor for TextEditorTextView();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v3, sel_setAllowsEditingTextAttributes_, 0);
  objc_msgSend(v3, sel_setDelegate_, v2);
  v4 = *(_QWORD *)v1;
  v5 = *(_BYTE *)(v1 + 8);
  v6 = v3;
  outlined copy of Environment<Bool>.Content(v4, v5);
  specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  objc_msgSend(v6, sel_setBorderStyle_, 0);

  return v6;
}

void UIKitTextViewAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a2 + 40);
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v5, 1);
    v8 = v7;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v5, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v5, 1);

    v6 = v12;
    v5 = v13;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>, (uint64_t)&type metadata for ScrollContentBackgroundKey, (uint64_t)&protocol witness table for ScrollContentBackgroundKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v9 = *((_BYTE *)v2 + *(int *)(type metadata accessor for UIKitTextViewAdaptor(0) + 32));
  TextEditorTextView.updateBackground(_:inheritBackground:)(v12, v13, v9);
  swift_release();
  v10 = *v2;
  v11 = *((_BYTE *)v3 + 8);
  outlined copy of Environment<Bool>.Content(*v3, v11);
  specialized Environment.wrappedValue.getter(v10, v11);
  outlined consume of Environment<Bool>.Content(v10, v11);
  objc_msgSend(a1, sel_setBorderStyle_, 0);
  specialized UIKitTextInputTraits.updateTraits(in:)(v6, v5);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v6, v5);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, (uint64_t)&type metadata for EnvironmentValues.__Key_writingToolsBehavior, (uint64_t)&protocol witness table for EnvironmentValues.__Key_writingToolsBehavior, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  __asm { BR              X10 }
}

uint64_t sub_1879EBF08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  objc_msgSend(v20, sel_setWritingToolsBehavior_, 0);
  *(_QWORD *)(v24 - 96) = v23;
  *(_QWORD *)(v24 - 88) = v21;
  UIKitTextEditorCoordinator.update(_:configuration:env:)((char *)v20, v22, (uint64_t *)(v24 - 96));
  *(_QWORD *)(v24 - 96) = v23;
  *(_QWORD *)(v24 - 88) = v21;
  specialized UIKitTextEditorCoordinatorBase.updateInputAccessoryGenerator(textView:env:)(v20, v24 - 96);
  swift_release();
  return swift_release();
}

void TextEditorTextView.updateBackground(_:inheritBackground:)(uint64_t a1, unsigned __int8 a2, char a3)
{
  void *v3;
  int v6;
  id v7;
  id v8;
  void *v9;
  char **v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  v6 = a2;
  v7 = objc_msgSend(v3, sel_traitCollection);
  v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

  v9 = (void *)objc_opt_self();
  v10 = &selRef_clearColor;
  if (v8 != (id)6)
    v10 = &selRef_systemBackgroundColor;
  v11 = objc_msgSend(v9, *v10);
  v12 = v11;
  v13 = 0;
  if (v6 != 2 && !a1 && (a3 & 1) == 0)
    v13 = v11;
  v14 = v13;
  objc_msgSend(v3, sel_setBackgroundColor_);

}

void UIKitTextEditorCoordinator.update(_:configuration:env:)(char *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  int v54;
  uint64_t (*v55)(_QWORD);
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(__int128 *, _QWORD);
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  _BYTE *v89;
  int *v90;
  _BYTE *v91;
  _OWORD *v92;
  void *v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  char *v114;
  Class isa;
  Class v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  id v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _OWORD v154[2];

  v4 = v3;
  v8 = MEMORY[0x1E0DEA790];
  v9 = MEMORY[0x1E0DEA7A0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], MEMORY[0x1E0DEE810]);
  v119 = *(_QWORD *)(v10 - 8);
  v120 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v118 = (char *)&v117 - v12;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, v8, v9, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v122 = *(_QWORD *)(v13 - 8);
  v123 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v117 - v15;
  v124 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v124, v17);
  v125 = (unint64_t *)((char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v131 = (uint64_t)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v132 = (char *)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for TextSelection(0);
  v129 = *(_QWORD *)(v25 - 8);
  v130 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v126 = (uint64_t)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *a3;
  v28 = (void *)a3[1];
  v30 = OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating) = 1;
  v31 = v4 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration;
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)a2, v31, type metadata accessor for UIKitTextViewAdaptor);
  swift_endAccess();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v28)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v32 = v4
      + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation;
  swift_beginAccess();
  outlined assign with take of WeakBox<Swift.AnyObject>((uint64_t)&v140, v32, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
  swift_endAccess();
  v134 = v29;
  v135 = v28;
  *(_QWORD *)&v140 = v29;
  *((_QWORD *)&v140 + 1) = v28;
  specialized UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)(a1, (uint64_t)&v140);
  v33 = objc_msgSend(a1, sel_text);
  v127 = v30;
  v128 = v4;
  v133 = a1;
  v121 = v16;
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v39 = a2[2];
  v38 = a2[3];
  v40 = a2[4];
  v41 = a2[5];
  *(_QWORD *)&v140 = v39;
  *((_QWORD *)&v140 + 1) = v38;
  *(_QWORD *)&v141 = v40;
  *((_QWORD *)&v141 + 1) = v41;
  type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>);
  v43 = v42;
  MEMORY[0x18D75B9C8](&v136);
  if (!v37)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    *(_QWORD *)&v140 = v39;
    *((_QWORD *)&v140 + 1) = v38;
    *(_QWORD *)&v141 = v40;
    *((_QWORD *)&v141 + 1) = v41;
    MEMORY[0x18D75B9C8](&v136, v43);
    v45 = (void *)MEMORY[0x18D75CC88](v136, v137);
    swift_bridgeObjectRelease();
    objc_msgSend(v133, sel_setText_, v45);

    goto LABEL_14;
  }
  if (v35 == v136 && v37 == v137)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_13;
LABEL_14:
  v46 = type metadata accessor for UIKitTextViewAdaptor(0);
  v47 = v131;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a2 + *(int *)(v46 + 24), v131, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  type metadata accessor for Binding<TextSelection?>(0);
  v49 = v48;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v47, 1, v48) != 1)
  {
    v50 = (uint64_t)v132;
    MEMORY[0x18D75B9C8](v49);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v50, 1, v130);
    v52 = v133;
    v51 = v134;
    v53 = v135;
    if (v54 == 1)
      goto LABEL_17;
    v57 = v126;
    outlined init with take of TableCellFormula(v50, v126, type metadata accessor for TextSelection);
    v58 = v125;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v57, (uint64_t)v125, type metadata accessor for TextSelection.Indices);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v59 = v121;
      v60 = v122;
      v61 = v123;
      (*(void (**)(char *, unint64_t *, uint64_t))(v122 + 32))(v121, v58, v123);
      v62 = v118;
      RangeSet.ranges.getter();
      lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges();
      v63 = v120;
      if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v119 + 8))(v62, v63);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
        v57 = v126;
        v52 = v133;
        goto LABEL_31;
      }
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges();
      dispatch thunk of BidirectionalCollection.index(before:)();
      v74 = (void (*)(__int128 *, _QWORD))dispatch thunk of Collection.subscript.read();
      v76 = *v75;
      v77 = v75[1];
      v74(&v140, 0);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v62, v63);
      v52 = v133;
      if (!((UITextView.range.getter() ^ v76) >> 14) && (v78 ^ v77) < 0x4000)
      {
        (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
LABEL_30:
        v57 = v126;
        goto LABEL_31;
      }
      *(_QWORD *)&v140 = v76;
      *((_QWORD *)&v140 + 1) = v77;
      v79 = objc_msgSend(v52, sel_text);
      v80 = v122;
      v81 = v123;
      if (v79)
      {
        v82 = v79;
        v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v85 = v84;

        v136 = v83;
        v137 = v85;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
        lazy protocol witness table accessor for type String and conformance String();
        v86 = _NSRange.init<A, B>(_:in:)();
        objc_msgSend(v52, sel_setSelectedRange_, v86, v87);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v121, v81);
        goto LABEL_30;
      }
    }
    else
    {
      v64 = *v58;
      v65 = v58[1];
      if (!((UITextView.range.getter() ^ v64) >> 14) && (v66 ^ v65) < 0x4000)
      {
LABEL_31:
        if (v53)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain_n();
          swift_retain_n();
          PropertyList.Tracker.value<A>(_:for:)();
          swift_release_n();
          swift_release_n();
          if ((_BYTE)v140)
          {
            swift_retain_n();
            swift_retain_n();
            PropertyList.Tracker.value<A>(_:for:)();
            swift_release_n();
LABEL_36:
            swift_release_n();
            if ((_BYTE)v140)
            {
              v88 = v140 != 1;
              if ((id)v88 != objc_msgSend(v52, sel_selectionAffinity))
                objc_msgSend(v52, sel_setSelectionAffinity_, v88);
            }
          }
        }
        else
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain_n();
          PropertyList.subscript.getter();
          swift_release_n();
          if ((_BYTE)v140)
          {
            swift_retain_n();
            PropertyList.subscript.getter();
            goto LABEL_36;
          }
        }
        v55 = type metadata accessor for TextSelection;
        v56 = v57;
        goto LABEL_40;
      }
      *(_QWORD *)&v140 = v64;
      *((_QWORD *)&v140 + 1) = v65;
      v67 = objc_msgSend(v52, sel_text);
      if (v67)
      {
        v68 = v67;
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v71 = v70;

        v136 = v69;
        v137 = v71;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
        lazy protocol witness table accessor for type String and conformance String();
        v72 = _NSRange.init<A, B>(_:in:)();
        objc_msgSend(v52, sel_setSelectedRange_, v72, v73);
        goto LABEL_31;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  v50 = (uint64_t)v132;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v129 + 56))(v132, 1, 1, v130);
  v52 = v133;
  v51 = v134;
  v53 = v135;
LABEL_17:
  v55 = (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?;
  v56 = v50;
LABEL_40:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, v55);
  v89 = TextEditorTextView.helper.getter();
  v136 = v51;
  v137 = v53;
  swift_retain();
  swift_retain();
  ScrollEnvironmentProperties.init(environment:)((uint64_t)&v136, (uint64_t)&v140);
  v90 = (int *)&v89[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v90, (uint64_t)&v136);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v140, (uint64_t)v90);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)&v136);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v140);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v136);

  v91 = TextEditorTextView.helper.getter();
  v136 = v51;
  v137 = v53;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v140);
  v92 = &v91[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v92[12] = v152;
  v92[13] = v153;
  v92[14] = v154[0];
  *(_OWORD *)((char *)v92 + 233) = *(_OWORD *)((char *)v154 + 9);
  v92[8] = v148;
  v92[9] = v149;
  v92[10] = v150;
  v92[11] = v151;
  v92[4] = v144;
  v92[5] = v145;
  v92[6] = v146;
  v92[7] = v147;
  *v92 = v140;
  v92[1] = v141;
  v92[2] = v142;
  v92[3] = v143;
  ScrollViewHelper.didChangeMargins(from:)();

  v136 = v51;
  v137 = v53;
  if (EnvironmentValues.font.getter())
  {
    v136 = v51;
    v137 = v53;
    v93 = (void *)Font.platformFont(in:)();
    swift_release();
  }
  else
  {
    v136 = v51;
    v137 = v53;
    EnvironmentValues.dynamicTypeSize.getter();
    v94 = (void *)**((_QWORD **)&unk_1E1B4EE80 + (char)v138);
    v95 = (void *)objc_opt_self();
    v96 = v94;
    v97 = objc_msgSend(v95, sel_traitCollectionWithPreferredContentSizeCategory_, v96);
    v98 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4A88], v97);
    Font.init(_:)();
    v136 = v134;
    v137 = v135;
    v138 = v134;
    v139 = v135;
    EnvironmentValues.fontModifiers.getter();
    v93 = (void *)Font.platformFont(in:modifiers:)();
    swift_bridgeObjectRelease();
    swift_release();

    v51 = v134;
    v53 = v135;

  }
  v136 = v51;
  v137 = v53;
  v99 = (void *)makeParagraphStyle(environment:)();
  objc_msgSend(v99, sel_setLineBreakMode_, 0);
  objc_msgSend(v99, sel_setLineBreakStrategy_, 0);
  v136 = v51;
  v137 = v53;
  if (EnvironmentValues.foregroundColor.getter())
  {
    v136 = v51;
    v137 = v53;
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    Color.Resolved.kitColor.getter();
    objc_opt_self();
    v100 = (id)swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    v100 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  }
  v101 = v100;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (NSAttributedStringKey, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_187C05380;
  v103 = (void *)*MEMORY[0x1E0DC1178];
  *(_QWORD *)(v102 + 32) = *MEMORY[0x1E0DC1178];
  v104 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(_QWORD *)(v102 + 40) = v99;
  v105 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(v102 + 64) = v104;
  *(_QWORD *)(v102 + 72) = v105;
  v106 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(_QWORD *)(v102 + 80) = v101;
  v107 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(v102 + 104) = v106;
  *(_QWORD *)(v102 + 112) = v107;
  *(_QWORD *)(v102 + 144) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  *(_QWORD *)(v102 + 120) = v93;
  v108 = v103;
  v135 = v99;
  v109 = v105;
  v110 = v101;
  v111 = v107;
  v112 = v93;
  specialized Dictionary.init(dictionaryLiteral:)(v102);
  v113 = objc_msgSend(v52, sel_textStorage);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v114 = v52;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v113, sel_addAttributes_range_, isa, 0, objc_msgSend(v113, sel_length));

  v116 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v114, sel_setTypingAttributes_, v116);

  *(_BYTE *)(v128 + v127) = 0;
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitTextViewAdaptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t result;
  __int128 v18;
  objc_super v19;

  v5 = v3;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)v8, type metadata accessor for UIKitTextViewAdaptor);
  v9 = v5 + *(int *)(a1 + 28);
  v10 = (objc_class *)type metadata accessor for UIKitTextEditorCoordinator(0);
  v18 = *(_OWORD *)v9;
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = objc_allocWithZone(v10);
  v14 = &v13[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  v13[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)&v13[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration], type metadata accessor for UIKitTextViewAdaptor);
  v15 = &v13[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_selectionStorage];
  *(_OWORD *)v15 = v18;
  *((_QWORD *)v15 + 2) = v11;
  *((_QWORD *)v15 + 3) = v12;
  v19.receiver = v13;
  v19.super_class = v10;
  v16 = objc_msgSendSuper2(&v19, sel_init);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for UIKitTextViewAdaptor);
  *a3 = v16;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance UIKitTextViewAdaptor(int a1, id a2)
{
  objc_msgSend(a2, sel_contentSize);
  _LayoutTraits.Dimension.min.getter();
  _LayoutTraits.Dimension.ideal.setter();
  _LayoutTraits.Dimension.min.setter();
  return _LayoutTraits.Dimension.max.setter();
}

id UIKitTextEditorCoordinatorBase.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitTextEditorCoordinatorBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitTextEditorCoordinatorBase()
{
  return objc_opt_self();
}

void UIKitTextEditorCoordinator.textViewDidChange(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating) & 1) == 0)
  {
    swift_beginAccess();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v3 = objc_msgSend(a1, sel_text);
    if (!v3)
    {
      __break(1u);
      return;
    }
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>);
    v6 = v5;
    MEMORY[0x18D75B9C8](&v16);
    v8 = v16;
    v7 = v17;
    v9 = objc_msgSend(a1, sel_text);
    if (!v9)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      MEMORY[0x18D75B9C8](&v16, v6);
      v15 = (void *)MEMORY[0x18D75CC88](v16, v17);
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setText_, v15);

      return;
    }
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    if (v8 == v11 && v7 == v13)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
      goto LABEL_9;
  }
}

id UIKitTextEditorCoordinator.textView(_:shouldChangeTextIn:replacementText:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  id result;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[5];

  v9 = v5 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v9, (uint64_t)&v22, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
  if (!v23)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v22, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
    v21 = 1;
    return (id)(v21 & 1);
  }
  outlined init with take of OptionalBinaryInteger(&v22, (uint64_t)v24);
  v10 = (uint64_t (**)(uint64_t))__swift_project_boxed_opaque_existential_1(v24, v24[3]);
  result = objc_msgSend(a1, sel_text);
  if (result)
  {
    v12 = result;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = *v10;
    v17 = Range<>.init(_:in:)();
    if ((v19 & 1) != 0)
    {
      v21 = 1;
    }
    else
    {
      v20 = specialized StringProtocol.replacingCharacters<A, B>(in:with:)(v17, v18, a4, a5, v13, v15);
      v21 = v16(v20);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return (id)(v21 & 1);
  }
  __break(1u);
  return result;
}

uint64_t *closure #1 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *result;
  uint64_t v3;

  type metadata accessor for (_:)();
  result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    v3 = *result;
    result = (uint64_t *)swift_retain();
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
  a1[1] = result;
  return result;
}

void UIKitTextEditorCoordinator.textViewDidChangeSelection(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  id v70;
  int v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);

  v90 = a1;
  v86 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v86, v1);
  v87 = (uint64_t *)((char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for TextSelection(0);
  v88 = *(_QWORD *)(v3 - 8);
  v89 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v77 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v77 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v77 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v77 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v77 - v29;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v77 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TextSelection?>(0);
  v36 = v35;
  v37 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v38);
  if ((*((_BYTE *)v91
        + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating) & 1) == 0)
  {
    v84 = v30;
    v85 = (uint64_t)&v77 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    v77 = v6;
    v82 = v22;
    v83 = v18;
    v79 = v26;
    v80 = v10;
    v41 = v89;
    v40 = v90;
    v81 = v14;
    v42 = (char *)v91
        + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration;
    swift_beginAccess();
    v43 = type metadata accessor for UIKitTextViewAdaptor(0);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v42[*(int *)(v43 + 24)], (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36) == 1)
    {
      v44 = type metadata accessor for Binding<TextSelection?>?;
      v45 = (uint64_t)v34;
LABEL_25:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))v44);
      return;
    }
    v46 = v85;
    outlined init with take of TableCellFormula((uint64_t)v34, v85, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
    v47 = (uint64_t)v84;
    MEMORY[0x18D75B9C8](v36);
    v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
    v48 = v41;
    v49 = v91(v47, 1, v41);
    v78 = v36;
    if (v49)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      v50 = 0;
      v51 = 0;
      v52 = 0;
    }
    else
    {
      v53 = (uint64_t)v77;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)v77, type metadata accessor for TextSelection);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      v54 = TextSelection.range.getter();
      v56 = v55;
      v52 = (v57 & 1) == 0;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v53, type metadata accessor for TextSelection);
      v50 = v54 >> 14;
      v51 = v56 >> 14;
    }
    v58 = v40;
    v59 = (uint64_t)v82;
    v60 = (uint64_t)v83;
    v61 = UITextView.range.getter();
    if (!v52 || v50 != v61 >> 14 || v51 != v62 >> 14)
    {
      v63 = UITextView.range.getter();
      v64 = (uint64_t)v87;
      *v87 = v63;
      *(_QWORD *)(v64 + 8) = v65;
      swift_storeEnumTagMultiPayload();
      v66 = (uint64_t)v79;
      MEMORY[0x18D75B9C8](v78);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, v59, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      v67 = v41;
      v68 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v91;
      v69 = v91(v59, 1, v67);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      if (v69 == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v64, v66, type metadata accessor for TextSelection.Indices);
        *(_BYTE *)(v66 + *(int *)(v48 + 20)) = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v66, 0, 1, v48);
      }
      else if (!v68(v66, 1, v48))
      {
        outlined assign with copy of ToolbarStorage.NavigationProperties?(v64, v66, type metadata accessor for TextSelection.Indices);
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, type metadata accessor for TextSelection.Indices);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
    }
    v70 = objc_msgSend(v58, sel_selectionAffinity);
    if (v70)
      v71 = 2 * (v70 == (id)1);
    else
      v71 = 1;
    v72 = v78;
    MEMORY[0x18D75B9C8](v78);
    v73 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v91;
    if (v91(v60, 1, v48))
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
    }
    else
    {
      v74 = *(unsigned __int8 *)(v60 + *(int *)(v48 + 20));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v60, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      if (v74 == v71)
        goto LABEL_24;
    }
    v75 = (uint64_t)v81;
    MEMORY[0x18D75B9C8](v72);
    if (v73(v75, 1, v48))
    {
      v76 = (uint64_t)v80;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v75, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v45 = v75;
      v44 = type metadata accessor for TextSelection?;
      goto LABEL_25;
    }
    *(_BYTE *)(v75 + *(int *)(v48 + 20)) = v71;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
LABEL_24:
    v44 = type metadata accessor for Binding<TextSelection?>;
    v45 = v46;
    goto LABEL_25;
  }
}

uint64_t UIKitTextEditorCoordinator.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration, type metadata accessor for UIKitTextViewAdaptor);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0+ OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
}

uint64_t ObjC metadata update function for UIKitTextEditorCoordinator()
{
  return type metadata accessor for UIKitTextEditorCoordinator(0);
}

uint64_t type metadata accessor for UIKitTextEditorCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitTextEditorCoordinator);
}

uint64_t type metadata completion function for UIKitTextEditorCoordinator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UIKitTextViewAdaptor(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for UIKitTextViewAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitTextViewAdaptor);
}

id TextEditorTextView.findInteraction(_:didBegin:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  char *v3;
  id result;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  objc_super v13;

  v13.receiver = v3;
  v13.super_class = (Class)swift_getObjectType();
  result = objc_msgSendSuper2(&v13, *a3, a1, a2);
  v8 = &v3[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext];
  v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext + 8];
  if (v9 >= 2)
  {
    v10 = *(_QWORD *)v8;
    v11 = v8[16] & 1;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v9;
    *(_BYTE *)(v12 + 32) = v11;
    outlined copy of Binding<NavigationSplitViewColumn>?(v10, v9);
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    return (id)outlined consume of Binding<NavigationSplitViewColumn>?(v10, v9);
  }
  return result;
}

void TextEditorTextView.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of FindContext?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext + 8));

}

uint64_t type metadata accessor for TextEditorTextView()
{
  return objc_opt_self();
}

unint64_t initializeBufferWithCopyOfBuffer for UIKitTextViewAdaptor(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  char *__dst;
  uint64_t v40;
  uint64_t v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    v10 = *(_QWORD *)(a2 + 40);
    v11 = a3[6];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v10;
    type metadata accessor for Binding<TextSelection?>(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
    v17 = v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v17))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v40 = v17;
      v41 = v15;
      v20 = v13[1];
      *v12 = *v13;
      v12[1] = v20;
      v21 = *(int *)(v17 + 32);
      __dst = (char *)v12 + v21;
      v22 = (char *)v13 + v21;
      v23 = type metadata accessor for TextSelection(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_retain();
      swift_retain();
      v26 = v25(v22, 1, v23);
      v27 = v12;
      if (v26)
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v30 = v40;
        v29 = v41;
      }
      else
      {
        v31 = type metadata accessor for TextSelection.Indices(0);
        v30 = v40;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(__dst, v22, v32);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        __dst[*(int *)(v23 + 20)] = v22[*(int *)(v23 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        v29 = v41;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v30);
    }
    v33 = a3[7];
    v34 = a3[8];
    v35 = (_OWORD *)(a1 + v33);
    v36 = (_OWORD *)(a2 + v33);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  }
  return a1;
}

uint64_t destroy for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  v6 = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v8 = v4 + *(int *)(v6 + 32);
    v9 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  char *__dst;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v39 = a3;
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  type metadata accessor for Binding<TextSelection?>(0);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v16(v12, 1, v14))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = v39;
  }
  else
  {
    v19 = v12[1];
    *v11 = *v12;
    v11[1] = v19;
    v20 = *(int *)(v14 + 32);
    __dst = (char *)v11 + v20;
    v38 = v15;
    v21 = (char *)v12 + v20;
    v22 = type metadata accessor for TextSelection(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    swift_retain();
    v25 = v24(v21, 1, v22);
    v26 = v11;
    if (v25)
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      v28 = v38;
      v18 = v39;
    }
    else
    {
      v29 = type metadata accessor for TextSelection.Indices(0);
      v18 = v39;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(__dst, v21, v30);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      __dst[*(int *)(v22 + 20)] = v21[*(int *)(v22 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
      v28 = v38;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v26, 0, 1, v14);
  }
  v31 = *(int *)(v18 + 28);
  v32 = *(int *)(v18 + 32);
  v33 = (_OWORD *)(a1 + v31);
  v34 = (_OWORD *)(a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  *(_BYTE *)(a1 + v32) = *(_BYTE *)(a2 + v32);
  return a1;
}

uint64_t assignWithCopy for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  char *__dst;
  unsigned int (*v49)(char *, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  type metadata accessor for Binding<TextSelection?>(0);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v11, 1, v13);
  v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v47 = a3;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
      v19 = *(int *)(v14 + 32);
      __dst = &v11[v19];
      v20 = &v12[v19];
      v21 = type metadata accessor for TextSelection(0);
      v22 = *(_QWORD *)(v21 - 8);
      v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_retain();
      swift_retain();
      if (v49(v20, 1, v21))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v38 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(__dst, v20, v39);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        a3 = v47;
        __dst[*(int *)(v21 + 20)] = v20[*(int *)(v21 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    v25 = *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64);
    v26 = v11;
    v27 = v12;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_21;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_retain();
  swift_release();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  swift_retain();
  swift_release();
  v28 = *(int *)(v14 + 32);
  v29 = &v11[v28];
  v30 = &v12[v28];
  v31 = type metadata accessor for TextSelection(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      v36 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v29, v30, v37);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v35)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    v25 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
    v26 = v29;
    v27 = v30;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for TextSelection.Indices);
    v45 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v29, v30, v46);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
  }
  v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
LABEL_21:
  v41 = a3[7];
  v42 = (_DWORD *)(a1 + v41);
  v43 = (_DWORD *)(a2 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  v42[2] = v43[2];
  v42[3] = v43[3];
  v42[4] = v43[4];
  v42[5] = v43[5];
  v42[6] = v43[6];
  v42[7] = v43[7];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  type metadata accessor for Binding<TextSelection?>(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v9[1];
    *v8 = *v9;
    v8[1] = v14;
    v15 = *(int *)(v11 + 32);
    v16 = (char *)v8 + v15;
    v17 = (char *)v9 + v15;
    v18 = type metadata accessor for TextSelection(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v28 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v16, v17, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
  }
  v22 = a3[7];
  v23 = a3[8];
  v24 = (_OWORD *)(a1 + v22);
  v25 = (_OWORD *)(a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  return a1;
}

uint64_t assignWithTake for UIKitTextViewAdaptor(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_release();
  v10 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease();
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  type metadata accessor for Binding<TextSelection?>(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v12, 1, v14);
  v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = *((_QWORD *)v13 + 1);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = v20;
      v21 = *(int *)(v15 + 32);
      v22 = &v12[v21];
      v23 = &v13[v21];
      v24 = type metadata accessor for TextSelection(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v51 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v22, v23, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        v22[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    v28 = *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64);
    v29 = v12;
    v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    goto LABEL_21;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release();
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_release();
  v31 = *(int *)(v15 + 32);
  v32 = &v12[v31];
  v33 = &v13[v31];
  v34 = type metadata accessor for TextSelection(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v32, v33, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v38)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    v28 = *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64);
    v29 = v32;
    v30 = v33;
    goto LABEL_8;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, type metadata accessor for TextSelection.Indices);
    v49 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v32, v33, v50);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
  }
  v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
LABEL_21:
  v43 = a3[7];
  v44 = a3[8];
  v45 = (_OWORD *)(a1 + v43);
  v46 = (_OWORD *)((char *)a2 + v43);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  *(_BYTE *)(a1 + v44) = *((_BYTE *)a2 + v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitTextViewAdaptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879EF3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for UIKitTextViewAdaptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879EF478(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for UIKitTextViewAdaptor()
{
  unint64_t v0;

  type metadata accessor for Binding<TextSelection?>?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitTextEditor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *__dst;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    v8 = *(int *)(v4 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for Binding<TextSelection?>(0);
    v12 = v11;
    v13 = *(_QWORD *)(v11 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v10, 1, v12))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = v10[1];
      *v9 = *v10;
      v9[1] = v16;
      v17 = *(int *)(v12 + 32);
      __dst = (char *)v9 + v17;
      v18 = (char *)v10 + v17;
      v19 = type metadata accessor for TextSelection(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_retain();
      swift_retain();
      if (v21(v18, 1, v19))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v23 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(__dst, v18, v24);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        __dst[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  return a1;
}

_QWORD *initializeWithCopy for UIKitTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *__dst;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v8[1];
    *v7 = *v8;
    v7[1] = v14;
    v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    v16 = (char *)v8 + v15;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_retain();
    swift_retain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(__dst, v16, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for UIKitTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *__dst;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  type metadata accessor for Binding<TextSelection?>(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v5, 1, v7);
  v12 = v10(v6, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      *(_QWORD *)v5 = *(_QWORD *)v6;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
      v13 = *(int *)(v8 + 32);
      __dst = &v5[v13];
      v14 = &v6[v13];
      v15 = type metadata accessor for TextSelection(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_retain();
      swift_retain();
      if (v17(v14, 1, v15))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v40 = v16;
        v33 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          v35 = __dst;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(__dst, v14, v34);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          v35 = __dst;
          memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        v35[*(int *)(v15 + 20)] = v14[*(int *)(v15 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v35, 0, 1, v15);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
      return a1;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
    v21 = v5;
    v22 = v6;
LABEL_8:
    memcpy(v21, v22, v20);
    return a1;
  }
  *(_QWORD *)v5 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
  swift_retain();
  swift_release();
  v23 = *(int *)(v8 + 32);
  v24 = &v5[v23];
  v25 = &v6[v23];
  v26 = type metadata accessor for TextSelection(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      v31 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v24, v25, v32);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      return a1;
    }
    goto LABEL_17;
  }
  if (v30)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64);
    v21 = v24;
    v22 = v25;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, type metadata accessor for TextSelection.Indices);
    v38 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v24, v25, v39);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
  }
  v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
  return a1;
}

_OWORD *initializeWithTake for UIKitTextEditor(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v7[1];
    *v6 = *v7;
    v6[1] = v12;
    v13 = *(int *)(v9 + 32);
    v14 = (char *)v6 + v13;
    v15 = (char *)v7 + v13;
    v16 = type metadata accessor for TextSelection(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithTake for UIKitTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v6, 1, v8);
  v13 = v11(v7, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = *((_QWORD *)v7 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v7;
      *((_QWORD *)v6 + 1) = v14;
      v15 = *(int *)(v9 + 32);
      v16 = &v6[v15];
      v17 = &v7[v15];
      v18 = type metadata accessor for TextSelection(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v16, v17, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
      return a1;
    }
    goto LABEL_7;
  }
  if (v13)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64);
    v23 = v6;
    v24 = v7;
LABEL_8:
    memcpy(v23, v24, v22);
    return a1;
  }
  *(_QWORD *)v6 = *(_QWORD *)v7;
  swift_release();
  *((_QWORD *)v6 + 1) = *((_QWORD *)v7 + 1);
  swift_release();
  v25 = *(int *)(v9 + 32);
  v26 = &v6[v25];
  v27 = &v7[v25];
  v28 = type metadata accessor for TextSelection(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v26, v27, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      return a1;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    v22 = *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64);
    v23 = v26;
    v24 = v27;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for TextSelection.Indices);
    v39 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v26, v27, v40);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
  }
  v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitTextEditor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879F0430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UIKitTextEditor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879F0478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UIKitTextEditor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitTextEditor);
}

_UNKNOWN **base witness table accessor for View in UIKitTextEditor()
{
  return &protocol witness table for UIKitTextEditor;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x18D75CDCC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void specialized UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  __int16 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  unsigned int v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;

  if (*(_QWORD *)(a2 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>, (uint64_t)&type metadata for FindContext.Key, (uint64_t)&protocol witness table for FindContext.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>, (uint64_t)&type metadata for FindContext.Key, (uint64_t)&protocol witness table for FindContext.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = v24;
  v3 = v25;
  v5 = v26;
  v6 = v27;
  v7 = v28;
  if (v27)
    v8 = 256;
  else
    v8 = 0;
  v9 = v8 | v26;
  v10 = &a1[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext];
  v11 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext];
  v12 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext + 8];
  *(_QWORD *)v10 = v24;
  *((_QWORD *)v10 + 1) = v3;
  v10 += 16;
  *(_WORD *)v10 = v9;
  v10[2] = v7 != 0;
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v3);
  outlined consume of FindContext?(v11, v12);
  objc_msgSend(a1, sel_setFindInteractionEnabled_, v6);
  v13 = objc_msgSend(a1, sel_findInteraction);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(a1, sel_window);
    if (v15)
    {

      v16 = objc_msgSend(v14, sel_isFindNavigatorVisible);
      if ((_DWORD)v6)
      {
        if (v3)
        {
          v17 = v5 & 1;
          v24 = v4;
          v25 = v3;
          v26 = v5 & 1;
          type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>);
          v19 = v18;
          swift_retain();
          swift_retain();
          MEMORY[0x18D75B9C8](&v23, v19);
          swift_release();
          swift_release();
          if (!(v16 & 1 | ((v23 & 1) == 0)))
          {
LABEL_18:
            *(_QWORD *)(swift_allocObject() + 16) = v14;
            v22 = v14;
            onNextMainRunLoop(do:)();

            outlined consume of Binding<NavigationSplitViewColumn>?(v4, v3);
            swift_release();
            return;
          }
          goto LABEL_16;
        }
      }
      else if (v3)
      {
        v17 = v5 & 1;
LABEL_16:
        v24 = v4;
        v25 = v3;
        v26 = v17;
        type metadata accessor for Binding<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>);
        v21 = v20;
        swift_retain();
        swift_retain();
        MEMORY[0x18D75B9C8](&v23, v21);
        swift_release();
        swift_release();
        if (v23 != 1 && v16)
          goto LABEL_18;

        goto LABEL_21;
      }
    }
    else
    {
      outlined consume of Binding<NavigationSplitViewColumn>?(v4, v3);
    }

    return;
  }
LABEL_21:
  outlined consume of Binding<NavigationSplitViewColumn>?(v4, v3);
}

void specialized UIKitTextEditorCoordinatorBase.updateInputAccessoryGenerator(textView:env:)(void *a1, uint64_t a2)
{
  uint64_t Strong;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _BYTE v11[8];

  if (*(_QWORD *)(a2 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release();
  Strong = swift_weakLoadStrong();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<InputAccessoryGenerator>);
  swift_release();
  swift_release();
  if (Strong)
  {
    v4 = *(void **)(Strong + 24);
    if (v4)
      goto LABEL_7;
    v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InputAccessoryGenerator.RootUIView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v6 = *(void **)(Strong + 24);
    *(_QWORD *)(Strong + 24) = v5;
    v7 = v5;

    InputAccessoryGenerator.updateHostIfNeeded()();
    v4 = *(void **)(Strong + 24);
    if (v4)
    {
LABEL_7:
      v8 = v4;
      v9 = objc_msgSend(a1, sel_inputAccessoryView);
      if (v9 && (v10 = v9, v9, v10 == v8))
      {
        swift_release();

      }
      else
      {
        objc_msgSend(a1, sel_setInputAccessoryView_, v8);

        swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined consume of FindContext?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    return outlined consume of Binding<NavigationSplitViewColumn>?(a1, a2);
  return a1;
}

uint64_t sub_1879F0B64()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #2 in UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_dismissFindNavigator);
}

id partial apply for closure #1 in UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_presentFindNavigatorShowingReplace_, 0);
}

unint64_t lazy protocol witness table accessor for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable;
  if (!lazy protocol witness table cache variable for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitTextEditor.MakeRepresentable, &unk_1E1ABDC20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, (uint64_t)&type metadata for EnvironmentValues.__Key_writingToolsBehavior, (uint64_t)&protocol witness table for EnvironmentValues.__Key_writingToolsBehavior, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for Binding<Bool>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Binding();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], MEMORY[0x1E0DEE810]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE828], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], MEMORY[0x1E0DEE810]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE820], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextEditorTextView.findInteraction(_:didEnd:)()
{
  return closure #2 in GridBadgeInfosActionBinding.updateValue()();
}

uint64_t objectdestroy_8Tm_4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextEditorTextView.findInteraction(_:didBegin:)()
{
  return closure #2 in GridBadgeInfosActionBinding.updateValue()();
}

uint64_t specialized UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)(void *a1, UIMenu *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  UIMenu *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UIMenu *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  UIMenu *v32;
  uint64_t v33;
  uint64_t *v35;
  Swift::OpaquePointer v36;
  _BYTE v37[16];
  uint64_t v38;
  UIMenu *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  UIImage_optional v48;
  UIImage_optional v49;

  v5 = type metadata accessor for TextSelection(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (uint64_t *)&v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = v2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ((_:))?, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  v9 = v39;
  if (v39)
  {
    v10 = v40;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
    v12 = objc_msgSend(a1, sel_selectionAffinity);
    if (v12)
      v13 = 2 * (v12 == (id)1);
    else
      v13 = 1;
    *v8 = UITextView.range.getter();
    v8[1] = v14;
    type metadata accessor for TextSelection.Indices(0);
    v15 = swift_storeEnumTagMultiPayload();
    *((_BYTE *)v8 + *(int *)(v5 + 20)) = v13;
    MEMORY[0x1E0C80A78](v15, v16);
    *(_QWORD *)&v37[-32] = _s7SwiftUI13TextSelectionVAA16PlatformItemListVIegnr_AcEIegno_TRTA_0;
    *(_QWORD *)&v37[-24] = v11;
    v35 = v8;
    static Update.ensure<A>(_:)();
    v17 = v39;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v18 = MEMORY[0x1E0DEE9D8];
    v47 = MEMORY[0x1E0DEE9D8];
    v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    LOBYTE(v39) = 0;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v20 = type metadata accessor for MenuVisitor.MenuStackGroup();
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
    v24 = v23 + v22;
    if (one-time initialization token for empty != -1)
      swift_once();
    v25 = __swift_project_value_buffer(v20, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25, v24, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    v26 = (char)v39;
    v39 = 0;
    LOBYTE(v40) = 0;
    v41 = MEMORY[0x1E0DEE9E0];
    v42 = v19;
    v43 = v18;
    v44 = MEMORY[0x1E0DEE9E0];
    v45 = v26;
    v46 = v23;
    MenuVisitor.visit(_:uniqueNames:)((uint64_t)v17, &v47);
    swift_bridgeObjectRelease();
    v27 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = a2;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v27);
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v48.value.super.isa = 0;
    v48.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v39, v28, (Swift::String_optional)0, v48, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v39, v36);
    v30 = v29;
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for TextSelection);
  }
  else
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v49.value.super.isa = 0;
    v49.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v32, v31, (Swift::String_optional)0, v49, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)a2, v36);
    return v33;
  }
  return v30;
}

uint64_t *partial apply for closure #1 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)(a1);
}

uint64_t sub_1879F120C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s7SwiftUI13TextSelectionVAA16PlatformItemListVIegnr_AcEIegno_TRTA_0()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t getEnumTagSinglePayload for UIKitTextEditor.MakeRepresentable(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitTextEditor.MakeRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for UIKitTextEditor.MakeRepresentable()
{
  return &unk_1E1ABDC20;
}

uint64_t one-time initialization function for specificationClass()
{
  uint64_t result;

  result = type metadata accessor for ClarityUIApplicationSceneSpecification();
  static ClarityUIApplicationSceneSpecificationWrapper.specificationClass = result;
  return result;
}

uint64_t static ClarityUIApplicationSceneSpecificationWrapper.specificationClass.getter()
{
  if (one-time initialization token for specificationClass != -1)
    swift_once();
  return static ClarityUIApplicationSceneSpecificationWrapper.specificationClass;
}

uint64_t ClarityUIApplicationSceneSpecificationWrapper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ClarityUIApplicationSceneSpecificationWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClarityUIApplicationSceneSpecificationWrapper()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClarityUIApplicationSceneSpecificationWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t ClarityUIApplicationSceneSpecification.initialSettingsDiffActions.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  objc_super v4;
  uint64_t v5;

  v5 = MEMORY[0x1E0DEE9D8];
  objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClarityUIListLayoutSettingsDiffAction()), sel_init);
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ClarityUIApplicationSceneSpecification();
  v1 = objc_msgSendSuper2(&v4, sel_initialSettingsDiffActions);
  type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneSettingsDiffAction);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array.append<A>(contentsOf:)(v2);
  return v5;
}

Class @objc ClarityUIApplicationSceneSpecification.initialSettingsDiffActions.getter(void *a1, uint64_t a2, void (*a3)(void), unint64_t *a4)
{
  id v6;
  Class isa;

  v6 = a1;
  a3();

  type metadata accessor for _UISceneBSActionHandler(0, a4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t ClarityUIApplicationSceneSpecification.initialActionHandlers.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  objc_super v4;
  uint64_t v5;

  v5 = MEMORY[0x1E0DEE9D8];
  objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClarityUIBackButtonActionHandler()), sel_init);
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ClarityUIApplicationSceneSpecification();
  v1 = objc_msgSendSuper2(&v4, sel_initialActionHandlers);
  type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneBSActionHandler);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array.append<A>(contentsOf:)(v2);
  return v5;
}

id ClarityUIApplicationSceneSpecification.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClarityUIApplicationSceneSpecification();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIApplicationSceneSpecification()
{
  return objc_opt_self();
}

void protocol witness for View.body.getter in conformance GaugeStyleConfiguration.MarkedValueLabel()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

double GaugeStyleConfiguration.value.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void GaugeStyleConfiguration.value.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*GaugeStyleConfiguration.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*GaugeStyleConfiguration.label.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void GaugeStyleConfiguration.currentValueLabel.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *GaugeStyleConfiguration.currentValueLabel.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*GaugeStyleConfiguration.currentValueLabel.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void GaugeStyleConfiguration.minimumValueLabel.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

_BYTE *GaugeStyleConfiguration.minimumValueLabel.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = *result;
  return result;
}

uint64_t (*GaugeStyleConfiguration.minimumValueLabel.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void GaugeStyleConfiguration.maximumValueLabel.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 10);
}

_BYTE *GaugeStyleConfiguration.maximumValueLabel.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = *result;
  return result;
}

uint64_t (*GaugeStyleConfiguration.maximumValueLabel.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t View.gaugeStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GaugeStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for GaugeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GaugeStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.Label()
{
  return &protocol witness table for GaugeStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.CurrentValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.CurrentValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.CurrentValueLabel;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.MinimumValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.MinimumValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.MinimumValueLabel;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.MaximumValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.MaximumValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.MaximumValueLabel;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.MarkedValueLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.MarkedValueLabel, &type metadata for GaugeStyleConfiguration.MarkedValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.MarkedValueLabel, &type metadata for GaugeStyleConfiguration.MarkedValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.MarkedValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.MarkedValueLabel;
}

uint64_t dispatch thunk of GaugeStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration()
{
  return &type metadata for GaugeStyleConfiguration;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.Label()
{
  return &type metadata for GaugeStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.CurrentValueLabel;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.MinimumValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.MinimumValueLabel;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.MaximumValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.MaximumValueLabel;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.MarkedValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.MarkedValueLabel;
}

uint64_t sub_1879F1C74(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for GaugeStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for GaugeStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for GaugeStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879F1D84 + 4 * byte_187C79E30[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for GaugeStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in GaugeStyleModifier<A>()
{
  return &protocol witness table for GaugeStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in GaugeStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t GaugeStyleModifier.styleBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v22 - v14;
  v16 = *((_BYTE *)a1 + 8);
  v17 = *((_BYTE *)a1 + 9);
  v18 = *((_BYTE *)a1 + 10);
  v22 = *a1;
  v23 = v16;
  v24 = v17;
  v25 = v18;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 24))(&v22, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for GaugeStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1879F2164()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

ValueMetadata *type metadata accessor for ResolvedGaugeStyle()
{
  return &type metadata for ResolvedGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>)
  {
    type metadata accessor for GaugeStyleModifier<DefaultGaugeStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for GaugeStyleModifier<DefaultGaugeStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GaugeStyleModifier<DefaultGaugeStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultGaugeStyle and conformance DefaultGaugeStyle();
    v4 = type metadata accessor for GaugeStyleModifier(a1, (uint64_t)&type metadata for DefaultGaugeStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GaugeStyleModifier<DefaultGaugeStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedGaugeStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedGaugeStyle()
{
  lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for AnyToken(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for AnyToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 32, a2 + 32);
  return a1;
}

uint64_t *assignWithCopy for AnyToken(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  return a1;
}

uint64_t assignWithTake for AnyToken(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for AnyToken()
{
  return &type metadata for AnyToken;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8AnyTokenVG_s0F8HashableVs5NeverOTg503_s7d91UI024StringTokensToAttributedC10ProjectionV3set4base8newValueyx_SStz_10Foundation0fC0VtFs11fh6VAA0M5G53Vcfu0_32e55f43d5f68d0f276a2331b4c7561cb4AmKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = a1 + 64;
    do
    {
      outlined init with copy of AnyHashable(v4, (uint64_t)v11);
      v13 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 40 * v6;
      v8 = v11[0];
      v9 = v11[1];
      *(_QWORD *)(v7 + 64) = v12;
      *(_OWORD *)(v7 + 32) = v8;
      *(_OWORD *)(v7 + 48) = v9;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v13)(_BYTE *, uint64_t);
  void (*v14)(_BYTE *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];

  v2 = type metadata accessor for AttributedString.Runs.Index();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v19[-v9];
  type metadata accessor for AttributedString.Runs();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
  {
    v11 = type metadata accessor for AttributedString.Runs.Run();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF170]);
    dispatch thunk of BidirectionalCollection.index(before:)();
    v13 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    v13(v6, v2);
    v14 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v16 = v15;
    v17 = type metadata accessor for AttributedString.Runs.Run();
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, v16, v17);
    v14(v19, 0);
    v13(v10, v2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
  }
}

uint64_t AttributedString.search.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

Swift::tuple_OpaquePointer_String __swiftcall SearchAttributedString.splitIntoTokensAndText()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(_OWORD *, _QWORD);
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t KeyPath;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  Swift::String v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  void (*v78)(char *, uint64_t);
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  Swift::tuple_OpaquePointer_String result;

  type metadata accessor for Slice<AttributedString.CharacterView>();
  MEMORY[0x1E0C80A78](v1, v2);
  v75 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v74 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for AttributedString.CharacterView();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v7);
  v71 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for AttributedString.Runs.Run();
  v9 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v10);
  v88 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v89 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for AttributedString.Runs.Index();
  v15 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v16);
  v85 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v69 - v20;
  v22 = type metadata accessor for AttributedString.Runs();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v28 = v27;
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v69 - v34;
  v97 = 0;
  v98 = 0xE000000000000000;
  v76 = v0;
  AttributedString.runs.getter();
  v79 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v79(v31, v26, v22);
  v82 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  dispatch thunk of Collection.startIndex.getter();
  v36 = *(void (**)(char *, uint64_t))(v23 + 8);
  v80 = v26;
  v37 = v26;
  v38 = v22;
  v78 = v36;
  v36(v37, v22);
  v39 = &v31[*(int *)(v28 + 36)];
  v40 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v84 = v21;
  v40(v39, v21, v87);
  outlined init with take of TableCellFormula((uint64_t)v31, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  v41 = &v35[*(int *)(v28 + 36)];
  v70 = (char *)MEMORY[0x1E0DEE9D8];
  v86 = v15;
  v81 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  for (i = v38; ; v38 = i)
  {
    v42 = v84;
    v43 = v87;
    v81(v84, v41, v87);
    v44 = v85;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    v46 = v38;
    v47 = *(void (**)(char *, uint64_t))(v86 + 8);
    v47(v44, v43);
    v47(v42, v43);
    if ((v45 & 1) != 0)
      break;
    v48 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v49 = v89;
    v50 = v83;
    (*(void (**)(char *))(v9 + 16))(v89);
    v48(v95, 0);
    v51 = v80;
    v79(v80, v35, v46);
    dispatch thunk of Collection.formIndex(after:)();
    v78(v51, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v49, 0, 1, v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v49, 1, v50) == 1)
      goto LABEL_13;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v88, v89, v50);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v53);
    *(&v69 - 2) = v54;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (*((_QWORD *)&v91 + 1))
    {
      v95[2] = v92;
      v95[3] = v93;
      v96 = v94;
      v95[0] = v90;
      v95[1] = v91;
      outlined init with copy of AnyToken((uint64_t)v95, (uint64_t)&v90);
      v59 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
      v61 = *((_QWORD *)v59 + 2);
      v60 = *((_QWORD *)v59 + 3);
      if (v61 >= v60 >> 1)
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, v59);
      *((_QWORD *)v59 + 2) = v61 + 1;
      v70 = v59;
      v62 = &v59[72 * v61];
      *((_OWORD *)v62 + 2) = v90;
      v63 = v91;
      v64 = v92;
      v65 = v93;
      *((_QWORD *)v62 + 12) = v94;
      *((_OWORD *)v62 + 4) = v64;
      *((_OWORD *)v62 + 5) = v65;
      *((_OWORD *)v62 + 3) = v63;
      outlined destroy of AnyToken((uint64_t)v95);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v88, v50);
    }
    else
    {
      outlined destroy of AnyToken?((uint64_t)&v90);
      v55 = v71;
      AttributedString.characters.getter();
      v56 = v88;
      v57 = (uint64_t)v74;
      AttributedString.Runs.Run.range.getter();
      AttributedString.CharacterView.subscript.getter();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v73);
      v58._countAndFlagsBits = String.init(_:)();
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v56, v50);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v89, 1, 1, v83);
LABEL_13:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  v66 = v97;
  v67 = (void *)v98;
  v68 = v70;
  result._1._object = v67;
  result._1._countAndFlagsBits = v66;
  result._0._rawValue = v68;
  return result;
}

Swift::Void __swiftcall SearchAttributedString.update(tokens:text:)(Swift::OpaquePointer tokens, Swift::String text)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *rawValue;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25;
  _QWORD v26[9];

  v3 = v2;
  object = text._object;
  countAndFlagsBits = text._countAndFlagsBits;
  v7 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v24 - v16;
  AttributedString.init()();
  v18 = *((_QWORD *)tokens._rawValue + 2);
  if (v18)
  {
    v24[2] = countAndFlagsBits;
    v24[3] = object;
    v25 = v3;
    rawValue = tokens._rawValue;
    v20 = (char *)tokens._rawValue + 32;
    v24[1] = rawValue;
    swift_bridgeObjectRetain();
    do
    {
      v26[0] = 12369903;
      MEMORY[0x18D75CD48](v26, 3);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath, v22);
      v24[-2] = v23;
      swift_getKeyPath();
      outlined init with copy of AnyToken((uint64_t)v20, (uint64_t)v26);
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
      AttributedString.subscript.setter();
      static AttributedString.+= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      v20 += 72;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    v3 = v25;
  }
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  AttributedString.append<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v3, v17, v9);
}

uint64_t specialized Slice.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];

  v2 = v1;
  v38 = a1;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v35 - v10;
  type metadata accessor for Range<AttributedString.Index>(0);
  v37 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v36 = (uint64_t)&v35 - v18;
  type metadata accessor for Slice<AttributedString.CharacterView>();
  v35 = v19;
  v20 = v1 + *(int *)(v19 + 36);
  v21 = &v11[*(int *)(v4 + 48)];
  v22 = type metadata accessor for AttributedString.Index();
  v23 = *(_QWORD **)(v22 - 8);
  v24 = (void (*)(char *, uint64_t, uint64_t))v23[2];
  v24(v11, v2, v22);
  v24(v21, v20, v22);
  v25 = &v7[*(int *)(v4 + 48)];
  v24(v7, (uint64_t)v11, v22);
  v24(v25, (uint64_t)v21, v22);
  v26 = (void (*)(char *, char *, uint64_t))v23[4];
  v26(v15, v7, v22);
  v27 = (void (*)(char *, uint64_t))v23[1];
  v27(v25, v22);
  v28 = &v7[*(int *)(v4 + 48)];
  v26(v7, v11, v22);
  v26(v28, v21, v22);
  v26(&v15[*(int *)(v37 + 36)], v28, v22);
  v27(v7, v22);
  v29 = (uint64_t)v15;
  v30 = v36;
  outlined init with take of TableCellFormula(v29, v36, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  type metadata accessor for AttributedString.CharacterView();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF30]);
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v30, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
  v31 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v33 = *v32;
  swift_bridgeObjectRetain();
  v31(v39, 0);
  return v33;
}

char *SearchAttributedString.tokens.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(_OWORD *, _QWORD);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _OWORD v72[4];
  uint64_t v73;

  v59 = type metadata accessor for AttributedString.Runs.Run();
  v0 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v1);
  v66 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v61 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString.Runs.Index();
  v64 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v63 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v54 - v11;
  v13 = type metadata accessor for AttributedString.Runs();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v54 - v25;
  AttributedString.runs.getter();
  v56 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v56(v22, v17, v13);
  v60 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  dispatch thunk of Collection.startIndex.getter();
  v27 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28 = (uint64_t)v26;
  v57 = v17;
  v55 = v27;
  v27(v17, v13);
  v29 = &v22[*(int *)(v19 + 36)];
  v30 = v64;
  v31 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  v62 = v12;
  v31(v29, v12, v6);
  outlined init with take of TableCellFormula((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  v32 = &v26[*(int *)(v19 + 36)];
  v65 = (char *)MEMORY[0x1E0DEE9D8];
  v58 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  while (1)
  {
    v33 = v62;
    v58(v62, v32, v6);
    v34 = v63;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36 = *(void (**)(char *, uint64_t))(v64 + 8);
    v36(v34, v6);
    v36(v33, v6);
    if ((v35 & 1) != 0)
      break;
    v37 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v38 = v61;
    v39 = v59;
    (*(void (**)(char *))(v0 + 16))(v61);
    v37(v72, 0);
    v40 = v57;
    v56(v57, (char *)v28, v13);
    v41 = v39;
    dispatch thunk of Collection.formIndex(after:)();
    v55(v40, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v0 + 56))(v38, 0, 1, v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v0 + 48))(v38, 1, v39) == 1)
      goto LABEL_12;
    v42 = v66;
    (*(void (**)(char *, char *, uint64_t))(v0 + 32))(v66, v38, v41);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v44);
    *(&v54 - 2) = v45;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (*((_QWORD *)&v68 + 1))
    {
      v72[2] = v69;
      v72[3] = v70;
      v73 = v71;
      v72[0] = v67;
      v72[1] = v68;
      outlined init with copy of AnyToken((uint64_t)v72, (uint64_t)&v67);
      v46 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
      v48 = *((_QWORD *)v46 + 2);
      v47 = *((_QWORD *)v46 + 3);
      if (v48 >= v47 >> 1)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, v46);
      *((_QWORD *)v46 + 2) = v48 + 1;
      v65 = v46;
      v49 = &v46[72 * v48];
      *((_OWORD *)v49 + 2) = v67;
      v50 = v68;
      v51 = v69;
      v52 = v70;
      *((_QWORD *)v49 + 12) = v71;
      *((_OWORD *)v49 + 4) = v51;
      *((_OWORD *)v49 + 5) = v52;
      *((_OWORD *)v49 + 3) = v50;
      outlined destroy of AnyToken((uint64_t)v72);
      (*(void (**)(char *, uint64_t))(v0 + 8))(v66, v41);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v0 + 8))(v42, v41);
      outlined destroy of AnyToken?((uint64_t)&v67);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v0 + 56))(v61, 1, 1, v59);
LABEL_12:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  return v65;
}

double AnyToken.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  *(_QWORD *)(a3 + 24) = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  v9 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(boxed_opaque_existential_1, a1, a2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  swift_getAssociatedConformanceWitness();
  AnyHashable.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 32) = v11;
  *(_OWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 64) = v13;
  return result;
}

Swift::Void __swiftcall SearchAttributedString.update(text:)(Swift::String text)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t countAndFlagsBits;
  uint64_t v34;
  char v35[24];
  uint64_t v36;

  countAndFlagsBits = text._countAndFlagsBits;
  type metadata accessor for Range<AttributedString.Index>(0);
  v31 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v30 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString.Runs();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedString.Runs.Run();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v32 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v17, v18);
  v19 = type metadata accessor for AttributedString();
  v34 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  AttributedString.runs.getter();
  specialized BidirectionalCollection.last.getter((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AttributedString.Runs.Run?);
  }
  else
  {
    v23 = v32;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v32, v7, v13);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v25);
    *(&v29 - 2) = v26;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    v27 = v36;
    outlined destroy of AnyToken?((uint64_t)v35);
    if (!v27)
    {
      v28 = (uint64_t)v30;
      AttributedString.Runs.Run.range.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
      AttributedString.replaceSubrange<A, B>(_:with:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
  }
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  AttributedString.append<A>(_:)();
LABEL_7:
  (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v19);
}

uint64_t SearchAttributedString.append(token:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  _QWORD v40[9];

  v36 = a1;
  type metadata accessor for Range<AttributedString.Index>(0);
  v34 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v33 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributedString.Runs();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedString.Runs.Run();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v35 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v17, v18);
  v19 = type metadata accessor for AttributedString();
  v37 = *(_QWORD *)(v19 - 8);
  v38 = v19;
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = 12369903;
  MEMORY[0x18D75CD48](v40, 3, v21);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  outlined init with copy of AnyToken(v36, (uint64_t)v40);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
  AttributedString.subscript.setter();
  AttributedString.runs.getter();
  specialized BidirectionalCollection.last.getter((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AttributedString.Runs.Run?);
  }
  else
  {
    v24 = v35;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v35, v7, v13);
    v25 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v32 - 2) = v27;
    swift_getKeyPath();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    v28 = v40[3];
    outlined destroy of AnyToken?((uint64_t)v40);
    if (!v28)
    {
      v30 = (uint64_t)v33;
      AttributedString.Runs.Run.range.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x1E0DEB8A8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
      v29 = v38;
      AttributedString.replaceSubrange<A, B>(_:with:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v30, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v24, v13);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v23, v29);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v24, v13);
  }
  v29 = v38;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  AttributedString.append<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v23, v29);
}

uint64_t SearchAttributedString.lastText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = type metadata accessor for AttributedString.Index();
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v55 = (char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v53 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString.CharacterView();
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v50[0] = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Slice<AttributedString.CharacterView>();
  v50[1] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v50 - v16;
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AttributedString.Runs();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for AttributedString.Runs.Run();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v0;
  AttributedString.runs.getter();
  specialized BidirectionalCollection.last.getter((uint64_t)v21);
  v32 = v26;
  v33 = v28;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v21, 1, v27) != 1)
  {
    v34 = (uint64_t)v13;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v21, v27);
    v35 = v50[0];
    AttributedString.characters.getter();
    v36 = (uint64_t)v53;
    AttributedString.Runs.Run.range.getter();
    AttributedString.CharacterView.subscript.getter();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v35, v52);
    v37 = (uint64_t)v55;
    v38 = v56;
    v39 = v57;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v17, v57);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C8]);
    v40 = v31;
    v41 = v33;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v42 = specialized Slice.subscript.getter(v37);
      v43 = v44;
    }
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    v58 = 12369903;
    v45 = MEMORY[0x18D75CD48](&v58, 3);
    if (v43)
    {
      if (v42 == v45 && v43 == v46)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Slice<AttributedString.CharacterView>);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v27);
        return 0;
      }
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    outlined init with copy of Slice<AttributedString.CharacterView>((uint64_t)v17, v34);
    v48 = String.init(_:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Slice<AttributedString.CharacterView>);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v27);
    return v48;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for AttributedString.Runs.Run?);
  return 0;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>)()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>)()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance AnyToken@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable(v1 + 32, a1);
}

Swift::Void __swiftcall SearchAttributedString.update(tokens:)(Swift::OpaquePointer tokens)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(_QWORD *, _QWORD);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*rawValue)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[7];

  type metadata accessor for Slice<AttributedString.CharacterView>();
  v83 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v82 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for AttributedString.CharacterView();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81, v5);
  v79 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v78 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString.Runs.Run();
  v100 = *(_QWORD *)(v10 - 8);
  v101 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v99 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v98 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AttributedString.Runs.Index();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v96 = (char *)&v76 - v23;
  v24 = type metadata accessor for AttributedString.Runs();
  v88 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v93 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v91 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v77 = (char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v90 = (uint64_t)&v76 - v32;
  v33 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v33, v34);
  v84 = (char *)&v76 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for AttributedString();
  v97 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v76 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v76 - v42;
  AttributedString.init()();
  v44 = *((_QWORD *)tokens._rawValue + 2);
  v94 = v24;
  v95 = v17;
  v92 = v20;
  if (v44)
  {
    v45 = (char *)tokens._rawValue + 32;
    rawValue = (void (*)(char *, char *, uint64_t))tokens._rawValue;
    swift_bridgeObjectRetain();
    do
    {
      v102[0] = 12369903;
      MEMORY[0x18D75CD48](v102, 3);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath, v47);
      *(&v76 - 2) = v48;
      swift_getKeyPath();
      outlined init with copy of AnyToken((uint64_t)v45, (uint64_t)v102);
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
      AttributedString.subscript.setter();
      static AttributedString.+= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v39, v36);
      v45 += 72;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    v24 = v94;
    v17 = v95;
  }
  v85 = v43;
  v86 = v36;
  v49 = v93;
  AttributedString.runs.getter();
  v50 = v88;
  v51 = (uint64_t)v77;
  rawValue = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  rawValue(v77, v49, v24);
  v52 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  v53 = v96;
  dispatch thunk of Collection.startIndex.getter();
  v88 = *(_QWORD *)(v50 + 8);
  ((void (*)(char *, uint64_t))v88)(v49, v24);
  v54 = v91;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v51 + *(int *)(v91 + 36), v53, v16);
  v55 = v90;
  outlined init with take of TableCellFormula(v51, v90, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  v56 = v55 + *(int *)(v54 + 36);
  v91 = *(_QWORD *)(v17 + 16);
  while (1)
  {
    v57 = v96;
    ((void (*)(char *, uint64_t, uint64_t))v91)(v96, v56, v16);
    v58 = v92;
    v59 = v94;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v60 = dispatch thunk of static Equatable.== infix(_:_:)();
    v61 = *(void (**)(char *, uint64_t))(v95 + 8);
    v61(v58, v16);
    v61(v57, v16);
    if ((v60 & 1) != 0)
      break;
    v62 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v64 = v100;
    v63 = v101;
    v65 = v98;
    (*(void (**)(char *))(v100 + 16))(v98);
    v62(v102, 0);
    v66 = v93;
    rawValue(v93, (char *)v55, v59);
    dispatch thunk of Collection.formIndex(after:)();
    ((void (*)(char *, uint64_t))v88)(v66, v59);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v65, 1, v63) == 1)
      goto LABEL_12;
    v67 = v56;
    v68 = v52;
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v99, v98, v101);
    v69 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v69, v70);
    *(&v76 - 2) = v71;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    v72 = v102[3];
    outlined destroy of AnyToken?((uint64_t)v102);
    if (!v72)
    {
      v73 = (uint64_t)v78;
      AttributedString.Runs.Run.range.getter();
      v74 = v79;
      AttributedString.characters.getter();
      AttributedString.CharacterView.subscript.getter();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v81);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v73, (uint64_t (*)(_QWORD))type metadata accessor for Range<AttributedString.Index>);
      AttributeContainer.init()();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance Slice<A>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, MEMORY[0x1E0DEDE38]);
      AttributedString.init<A>(_:attributes:)();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
      v75 = v86;
      AttributedString.append<A>(_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v39, v75);
    }
    (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v101);
    v55 = v90;
    v52 = v68;
    v56 = v67;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v98, 1, 1, v101);
LABEL_12:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  (*(void (**)(uint64_t, char *, uint64_t))(v97 + 40))(v87, v85, v86);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Projection.get(base:) in conformance StringToAttributedStringProjection()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v0, v1);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

void type metadata accessor for Slice<AttributedString.CharacterView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<AttributedString.CharacterView>)
  {
    type metadata accessor for AttributedString.CharacterView();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF30]);
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<AttributedString.CharacterView>);
  }
}

uint64_t sub_1879F4FEC()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_1879F5014()
{
  return 8;
}

uint64_t sub_1879F5020()
{
  return swift_release();
}

uint64_t sub_1879F5028(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1879F5038()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

_QWORD *sub_1879F5078(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t outlined destroy of AnyToken?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AnyToken?(0, &lazy cache variable for type metadata for AnyToken?, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>)
  {
    type metadata accessor for AttributeScopes.SwiftUIAttributes();
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>);
  }
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance StringToAttributedStringProjection(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  result = String.init(_:)();
  *a1 = result;
  a1[1] = v10;
  return result;
}

uint64_t StringTokensToAttributedStringProjection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v36 = a5;
  v37 = a7;
  v35 = a2;
  v39 = a8;
  v12 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v38 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v23 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v22);
  v25 = (char *)&v34 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a4 - 8) + 16))((char *)&v34 - v24, a1, a4, v23);
  v26 = (uint64_t *)&v25[*(int *)(TupleTypeMetadata2 + 48)];
  *v26 = v35;
  v26[1] = a3;
  swift_bridgeObjectRetain();
  AttributedString.init()();
  v41 = a4;
  v42 = v36;
  v43 = a6;
  v44 = v37;
  v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.get(base:), (uint64_t)v40, a4, (char *)&type metadata for AnyToken, MEMORY[0x1E0DEDCE8], *(_QWORD *)(a6 + 8), MEMORY[0x1E0DEDD18], v27);
  v29 = *v26;
  v30 = (void *)v26[1];
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v20, v16);
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  SearchAttributedString.update(tokens:text:)((Swift::OpaquePointer)v28, v31);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v32 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v32(v20, v15, v16);
  v32(v39, v20, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v25, TupleTypeMetadata2);
}

double implicit closure #1 in StringTokensToAttributedStringProjection.get(base:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, AssociatedTypeWitness, v6);
  return AnyToken.init<A>(_:)((uint64_t)v8, AssociatedTypeWitness, a2);
}

uint64_t closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  int v4;
  uint64_t v6;

  outlined init with copy of Any(a1, (uint64_t)&v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, v4 ^ 1u, 1, AssociatedTypeWitness);
}

uint64_t key path getter for Identifiable.id : <A>A.Sequence.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t protocol witness for Projection.get(base:) in conformance StringTokensToAttributedStringProjection<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;

  v6 = a2[2];
  v7 = (uint64_t *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  return StringTokensToAttributedStringProjection.get(base:)(a1, *v7, v7[1], v6, a2[3], a2[4], a2[5], a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance StringTokensToAttributedStringProjection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized StringTokensToAttributedStringProjection.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(uint64_t (**)(void))(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40));
}

uint64_t outlined init with copy of Slice<AttributedString.CharacterView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Slice<AttributedString.CharacterView>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for StringTokensToAttributedStringProjection()
{
  JUMPOUT(0x18D75FF28);
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SearchAttributedString(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchAttributedString()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879F57FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SearchAttributedString()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879F5844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SearchAttributedString()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SearchAttributedString;
  if (!type metadata singleton initialization cache for SearchAttributedString)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SearchAttributedString()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for StringToAttributedStringProjection()
{
  return &type metadata for StringToAttributedStringProjection;
}

void base witness table accessor for Equatable in StringTokensToAttributedStringProjection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in StringTokensToAttributedStringProjection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized StringTokensToAttributedStringProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *rawValue;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t KeyPath;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t (*v56)(void);
  char v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t (*)(void), uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  uint64_t result;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(void);
  char *v107;
  uint64_t AssociatedConformanceWitness;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t TupleTypeMetadata2;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t (*v118)(void);
  char v119[16];
  uint64_t v120;
  uint64_t (*v121)(void);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(void);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(void);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  Swift::tuple_OpaquePointer_String v138;

  v101 = a6;
  v11 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v107 = (char *)&object - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v106 = (uint64_t (*)(void))((char *)&object - v17);
  v112 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v105 = type metadata accessor for Range();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v18);
  v103 = (char *)&object - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v102 = (char *)&object - v22;
  v115 = AssociatedTypeWitness;
  v109 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v117 = (char *)&object - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v118 = (uint64_t (*)(void))((char *)&object - v28);
  v113 = *(char **)(a3 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v100 = (char *)&object - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&object - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for AttributedString();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v35, a2, v36);
  v138 = SearchAttributedString.splitIntoTokensAndText()();
  rawValue = v138._0._rawValue;
  countAndFlagsBits = v138._1._countAndFlagsBits;
  object = v138._1._object;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for SearchAttributedString);
  v129 = a3;
  v130 = a4;
  v38 = a5;
  v131 = a5;
  v39 = v101;
  v132 = v101;
  v133 = (uint64_t)rawValue;
  type metadata accessor for AnyToken?(0, &lazy cache variable for type metadata for [AnyToken], (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEAEC8]);
  v40 = swift_getAssociatedTypeWitness();
  lazy protocol witness table accessor for type [AnyToken] and conformance [A]();
  v99 = Sequence.compactMap<A>(_:)();
  v41 = v100;
  (*((void (**)(char *, uint64_t, uint64_t))v113 + 2))(v100, a1, a3);
  v125 = a3;
  v126 = a4;
  v127 = v38;
  v128 = v39;
  KeyPath = swift_getKeyPath();
  v120 = a3;
  v121 = a4;
  v110 = v38;
  v122 = v38;
  v123 = v39;
  v124 = KeyPath;
  v98 = v40;
  v43 = (char *)swift_getAssociatedTypeWitness();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:), (uint64_t)v119, a3, v43, MEMORY[0x1E0DEDCE8], v112, MEMORY[0x1E0DEDD18], v44);
  v45 = (void (*)(char *, uint64_t))*((_QWORD *)v113 + 1);
  v116 = a3;
  v45(v41, a3);
  swift_release();
  v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8AnyTokenVG_s0F8HashableVs5NeverOTg503_s7d91UI024StringTokensToAttributedC10ProjectionV3set4base8newValueyx_SStz_10Foundation0fC0VtFs11fh6VAA0M5G53Vcfu0_32e55f43d5f68d0f276a2331b4c7561cb4AmKTf3nnnpk_nTf1cn_n((uint64_t)rawValue);
  swift_bridgeObjectRelease();
  v47 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  v133 = MEMORY[0x1E0DEE9D8];
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v47, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = v133;
  v49 = specialized CollectionChanges.Projection.init(kind:changes:)(0, v133);
  v52 = v51;
  v101 = v53;
  v111 = a1;
  if (v50 == v53)
    goto LABEL_47;
  v54 = v49;
  v55 = v50;
  v56 = v118;
  v97 = v48;
  v57 = swift_bridgeObjectRetain();
  v60 = (unint64_t)v117;
  v100 = v52;
LABEL_3:
  v61 = v55 - 1;
  if (__OFSUB__(v55, 1))
    goto LABEL_23;
  if (v61 < -1)
    goto LABEL_24;
  v62 = (char *)*((_QWORD *)v52 + 2);
  if ((unint64_t)v62 < v55)
    goto LABEL_25;
  if (!v55)
    goto LABEL_50;
  a4 = v56;
  v63 = &v52[40 * v55];
  v48 = v55 - 1;
  while (1)
  {
    if (v48 > v61)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      v84 = v57;
      v60 = (unint64_t)v58;
      v55 = v59;
      TupleTypeMetadata2 = (uint64_t)(v117 + 32);
      v113 = v117 + 104;
      while ((v60 & 0x8000000000000000) == 0)
      {
        v89 = (char *)*((_QWORD *)v117 + 2);
        if (v60 >= (unint64_t)v89)
          goto LABEL_49;
        v90 = TupleTypeMetadata2 + 40 * v60;
        if (*(unsigned __int8 *)(v90 + 32) >= 2u)
        {
          v133 = 0;
          v134 = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          v133 = 0x2064696C61766E69;
          v134 = 0xEF203A7865646E69;
          v137 = v60;
LABEL_54:
          v94._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v94);
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        v48 = *(_QWORD *)v90;
        v91 = (char *)v55;
        if ((uint64_t)(v60 + 1) < (uint64_t)v55)
        {
          if ((char *)(v60 + 1) == v89)
          {
            while (1)
            {
LABEL_52:
              v133 = 0;
              v134 = 0xE000000000000000;
              swift_bridgeObjectRetain();
              _StringGuts.grow(_:)(23);
              swift_bridgeObjectRelease();
              v133 = 0xD000000000000015;
              v134 = 0x8000000187BDB080;
              v137 = v60;
              v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v93);
              swift_bridgeObjectRelease();
LABEL_51:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }
          v62 = &v113[40 * v60];
          v91 = (char *)(v60 + 1);
          while ((uint64_t)v91 < (uint64_t)v89)
          {
            if (*v62)
            {
              if (*v62 == 1)
              {
                if (v84 == 1)
                  goto LABEL_28;
              }
              else if (v84 == 2)
              {
                goto LABEL_28;
              }
            }
            else if (!v84)
            {
              goto LABEL_28;
            }
            ++v91;
            v62 += 40;
            if (v89 == v91)
              goto LABEL_52;
          }
          __break(1u);
          goto LABEL_45;
        }
LABEL_28:
        dispatch thunk of Collection.startIndex.getter();
        Collection.formIndex(_:offsetBy:)();
        v133 = Array.subscript.getter();
        v134 = v85;
        v135 = v86;
        v136 = v87;
        v88 = type metadata accessor for ArraySlice();
        MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBF88], v88);
        dispatch thunk of RangeReplaceableCollection.insert<A>(contentsOf:at:)();
        (*(void (**)(uint64_t (*)(void), uint64_t))(v109 + 8))(a4, v115);
        v60 = (unint64_t)v91;
        if (v91 == (char *)v55)
          goto LABEL_21;
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      v133 = 0;
      v134 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v133 = 0xD000000000000015;
      v134 = 0x8000000187BDB080;
      v137 = v55;
      v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    if (v63[24])
      break;
    if (!v54)
    {
LABEL_16:
      if (v48 >= (uint64_t)v62)
        goto LABEL_46;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.startIndex.getter();
      Collection.formIndex(_:offsetBy:)();
      Collection.formIndex(_:offsetBy:)();
      v57 = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((v57 & 1) == 0)
        goto LABEL_26;
      v64 = v115;
      v65 = TupleTypeMetadata2;
      v66 = v106;
      v67 = (char *)v106 + *(int *)(TupleTypeMetadata2 + 48);
      v68 = v109;
      v69 = *(void (**)(char *, uint64_t (*)(void), uint64_t))(v109 + 16);
      v69((char *)v106, v118, v115);
      v113 = v67;
      v69(v67, (uint64_t (*)(void))v117, v64);
      v70 = *(int *)(v65 + 48);
      v71 = v107;
      v72 = &v107[v70];
      v69(v107, v66, v64);
      v69(v72, (uint64_t (*)(void))v67, v64);
      v73 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      v74 = v103;
      v73(v103, v71, v64);
      a4 = *(uint64_t (**)(void))(v68 + 8);
      ((void (*)(char *, uint64_t))a4)(v72, v64);
      v75 = &v71[*(int *)(TupleTypeMetadata2 + 48)];
      v73(v71, (char *)v66, v64);
      v73(v75, v113, v64);
      v76 = v105;
      v73(&v74[*(int *)(v105 + 36)], v75, v64);
      ((void (*)(char *, uint64_t))a4)(v71, v64);
      v77 = v104;
      v78 = v102;
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v102, v74, v76);
      dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)();
      v79 = v78;
      v60 = (unint64_t)v117;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v76);
      ((void (*)(unint64_t, uint64_t))a4)(v60, v64);
      v56 = v118;
      v57 = a4();
      v55 = v48;
      v52 = v100;
      if (v101 == v48)
      {
        swift_bridgeObjectRelease();
        a4 = v56;
        v48 = v97;
        goto LABEL_20;
      }
      goto LABEL_3;
    }
LABEL_9:
    --v48;
    v63 -= 40;
    if (v48 == -1)
      goto LABEL_50;
  }
  if (v63[24] == 1)
  {
    if (v54 == 1)
      goto LABEL_16;
    goto LABEL_9;
  }
  if (v54 != 2)
    goto LABEL_9;
LABEL_45:
  if (v48 < (uint64_t)v62)
  {
    v133 = 0;
    v134 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v133 = 0x2064696C61766E69;
    v134 = 0xEF203A7865646E69;
    v137 = v48;
    goto LABEL_54;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a4 = v118;
LABEL_20:
  v57 = specialized CollectionChanges.Projection.init(kind:changes:)(1, v48);
  v117 = v80;
  if (v58 != (char *)v59)
    goto LABEL_27;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81 = (uint64_t *)(v111 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  result = swift_bridgeObjectRelease();
  v83 = (uint64_t)object;
  *v81 = countAndFlagsBits;
  v81[1] = v83;
  return result;
}

uint64_t partial apply for closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)(a1, a2);
}

void type metadata accessor for AnyToken?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for AnyToken);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type [AnyToken] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AnyToken] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AnyToken] and conformance [A])
  {
    type metadata accessor for AnyToken?(255, &lazy cache variable for type metadata for [AnyToken], (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyToken] and conformance [A]);
  }
  return result;
}

uint64_t sub_1879F675C()
{
  return 32;
}

__n128 sub_1879F6768(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)()
{
  return swift_getAtKeyPath();
}

double partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.get(base:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #1 in StringTokensToAttributedStringProjection.get(base:)(a1, a2);
}

void _OutlineGenerator_Configuration.init(element:isExpanded:grouping:parentContent:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for _OutlineGenerator_Configuration();
}

int *sub_1879F6840(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v8 = v7 + result[15];
  *(_QWORD *)v8 = v6;
  *(_QWORD *)(v8 + 8) = v5;
  *(_BYTE *)(v8 + 16) = v4;
  v9 = (_QWORD *)(v7 + result[16]);
  *v9 = v3;
  v9[1] = v2;
  v10 = (_QWORD *)(v7 + result[17]);
  *v10 = v1;
  v10[1] = v11;
  return result;
}

void OutlineGenerator<>.init(configuration:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  type metadata accessor for _OutlineGenerator_Configuration();
}

void sub_1879F68FC()
{
  type metadata accessor for _OutlineGenerator_Configuration.Subtree();
}

void sub_1879F692C()
{
  type metadata accessor for OutlineGenerator();
}

uint64_t sub_1879F695C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  char v17;

  v6 = v3 + a1[23];
  *(_QWORD *)v6 = v5;
  *(_QWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 16) = v17;
  v7 = (uint64_t *)(v1 + *(int *)(v2 + 64));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)(v3 + a1[24]);
  *v10 = v8;
  v10[1] = v9;
  v11 = (uint64_t *)(v1 + *(int *)(v2 + 68));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)(v3 + a1[25]);
  *v14 = v12;
  v14[1] = v13;
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v15(v1, v2);
}

void type metadata accessor for _OutlineGenerator_Configuration()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for _OutlineGenerator_Configuration.Subtree()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for OutlineGenerator()
{
  JUMPOUT(0x18D75FF28);
}

void OutlineGenerator.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for StaticSourceWriter();
}

void sub_1879F6AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 264) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v12 - 328) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v12 - 288) = (char *)&a9 - v19;
  v21 = *(int *)(v10 + 92);
  v20 = *(int *)(v10 + 96);
  *(_QWORD *)(v12 - 344) = v9;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + v20);
  v24 = *(_QWORD *)(v9 + v21);
  v23 = *(_QWORD *)(v9 + v21 + 8);
  v25 = *(unsigned __int8 *)(v9 + v21 + 16);
  (*(void (**)(uint64_t, double))(v9 + *(int *)(v10 + 100)))(v9, v18);
  v22(v24, v23, v25, v11);
  v26 = *(_QWORD *)(v12 - 272);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 280) + 8))(v11, v26);
  *(_QWORD *)(v12 - 224) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v12 - 216) = v26;
  v27 = *(_QWORD *)(v12 - 320);
  *(_QWORD *)(v12 - 208) = *(_QWORD *)(v12 - 336);
  *(_QWORD *)(v12 - 200) = v27;
  v28 = *(_QWORD *)(v10 + 56);
  v29 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v12 - 192) = *(_QWORD *)(v12 - 312);
  *(_QWORD *)(v12 - 184) = v28;
  v30 = *(_QWORD *)(v12 - 304);
  *(_QWORD *)(v12 - 176) = v29;
  *(_QWORD *)(v12 - 168) = v30;
  v31 = *(_QWORD *)(v12 - 344);
  *(_QWORD *)(v12 - 160) = *(_QWORD *)(v12 - 296);
  *(_QWORD *)(v12 - 152) = v31;
  View.viewAlias<A, B>(_:_:)(v27, (uint64_t)partial apply for closure #1 in OutlineGenerator.body.getter);
}

uint64_t sub_1879F6C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8))(v3, v2);
  *(_QWORD *)(v5 - 136) = v0;
  *(_QWORD *)(v5 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v5 - 136);
  v7 = *(_QWORD *)(v5 - 288);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v6);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 264) + 8);
  v8(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v7, v1, *(_QWORD *)(v5 - 248));
  return v8(v7, v1);
}

void closure #1 in OutlineGenerator.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for OutlineGenerator();
}

uint64_t sub_1879F6D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v2 + *(int *)(a1 + 104), v1, v4);
  static ViewBuilder.buildBlock<A>(_:)(v5, v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
}

uint64_t type metadata completion function for _OutlineGenerator_Configuration()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _OutlineGenerator_Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = (_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = (_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _OWORD *v12;
  _OWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  v12 = (_OWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  _OWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = (_OWORD *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  *(_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _OutlineGenerator_Configuration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1879F7360 + 4 * byte_187C7A560[v10]))();
  }
}

void storeEnumTagSinglePayload for _OutlineGenerator_Configuration(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1879F74E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879F755CLL);
}

void sub_1879F74E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879F74F0);
  JUMPOUT(0x1879F755CLL);
}

void sub_1879F7534()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879F755CLL);
}

void sub_1879F753C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879F755CLL);
}

uint64_t sub_1879F7544(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1879F7550);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1879F755CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for OutlineGenerator()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OutlineGenerator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3 + 48);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v10 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v9 + ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v9) + *(_QWORD *)(v8 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  else
  {
    v14 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v15 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
    v17 = (_QWORD *)(((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (char *)v21 + v9;
    v24 = ((unint64_t)v20 + v9 + 16) & ~v9;
    v25 = (unint64_t)(v23 + 16) & v14;
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v26(v24, v25, v7);
  }
  return v4;
}

uint64_t destroy for OutlineGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 48) - 8) + 8))((((((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) - 8) + 80));
}

uint64_t initializeWithCopy for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = *(_QWORD *)(a3 + 48);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = ((unint64_t)v15 + v20 + 16) & ~v20;
  v22 = ((unint64_t)v16 + v20 + 16) & ~v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v23(v21, v22, v18);
  return a1;
}

uint64_t assignWithCopy for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  v10 = (v7 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v7 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  swift_retain();
  swift_release();
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v12 = (_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  v15 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))(((unint64_t)v15 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = v12;
  v13 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(((unint64_t)v15 + *(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v16 + *(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithTake for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  v10 = (v7 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  swift_release();
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_release();
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v12 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_release();
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(((unint64_t)v14 + *(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v15 + *(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlineGenerator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = v9 + 16;
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v10 + ((((v8 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v9) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if (v4 == v7)
        return (*(uint64_t (**)(void))(v3 + 48))();
      v18 = v8 + a1;
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))((v10
                                                                      + ((((v18 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v9);
      v19 = *(_QWORD *)(((v18 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v19 >= 0xFFFFFFFF)
        LODWORD(v19) = -1;
      return (v19 + 1);
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v10 + ((((v8 + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~(_DWORD)v9) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879F7CF8 + 4 * byte_187C7A56F[v17 - 1]))();
}

void storeEnumTagSinglePayload for OutlineGenerator(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 48) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(unsigned __int8 *)(v6 + 80)
       + 16
       + ((((*(_QWORD *)(v5 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

_UNKNOWN **base witness table accessor for View in _OutlineGenerator_Configuration<A, B, C>.Subtree()
{
  return &protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree;
}

uint64_t associated type witness table accessor for View.Body : View in OutlineGenerator<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for View.body.getter in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t instantiation function for generic protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void partial apply for closure #1 in OutlineGenerator.body.getter()
{
  uint64_t v0;

  closure #1 in OutlineGenerator.body.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 16));
}

void sub_1879F80E0()
{
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1879F8110()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[10];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

double Stepper.init(onIncrement:onDecrement:onEditingChanged:label:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(double);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;

  v24 = a5;
  v25 = a6;
  v14 = *(_QWORD *)(a8 - 8);
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v15);
  v20 = type metadata accessor for Stepper(0, a8, a9, v19);
  v21 = &a7[*(int *)(v20 + 40)];
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = a1;
  *((_QWORD *)a7 + 2) = a2;
  *((_QWORD *)a7 + 3) = a3;
  v22 = v24;
  *((_QWORD *)a7 + 4) = a4;
  *((_QWORD *)a7 + 5) = v22;
  *((_QWORD *)a7 + 6) = v25;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&a7[*(int *)(v20 + 36)], v17, a8);
  result = 0.0;
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  return result;
}

void Stepper.init<A>(label:currentValueLabel:onIncrement:onDecrement:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a5);
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Stepper.body.getter()
{
  lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_1879F82DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v14 = type metadata accessor for ModifiedContent();
  v9[16] = *(_QWORD *)(v14 - 8);
  v9[11] = v14;
  MEMORY[0x1E0C80A78](v14, v14);
  v9[10] = (char *)&a9 - v15;
  v16 = type metadata accessor for ModifiedContent();
  v9[13] = v16;
  v9[15] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v9[12] = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v9[14] = (char *)&a9 - v21;
  v22 = v12[1];
  v23 = v12[2];
  v24 = v12[3];
  v26 = v12[4];
  v25 = v12[5];
  v27 = v12[6];
  *(_QWORD *)(v13 - 192) = *v12;
  *(_QWORD *)(v13 - 184) = v22;
  *(_QWORD *)(v13 - 176) = v23;
  *(_QWORD *)(v13 - 168) = v24;
  *(_QWORD *)(v13 - 160) = v26;
  *(_QWORD *)(v13 - 152) = v25;
  *(_QWORD *)(v13 - 144) = v27;
  v9[20] = v10;
  v9[21] = v11;
  v9[22] = v12;
  swift_retain();
  outlined copy of AppIntentExecutor?(v22);
  outlined copy of AppIntentExecutor?(v24);
  v9[6] = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  swift_retain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for StepperStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in Stepper.body.getter);
}

void sub_1879F8424()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = *(_QWORD *)(v2 - 184);
  v4 = *(_QWORD *)(v2 - 168);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  swift_release();
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v9 = v1[4];
  v8 = v1[5];
  v10 = v1[6];
  v0[25] = *v1;
  v0[26] = v5;
  v0[27] = v6;
  v0[28] = v7;
  v0[29] = v9;
  v0[30] = v8;
  v0[31] = v10;
  v11 = (char *)v1 + *(int *)(v0[8] + 40);
  v12 = *(void **)v11;
  v13 = (void *)*((_QWORD *)v11 + 1);
  v15 = (void *)*((_QWORD *)v11 + 2);
  v14 = (void *)*((_QWORD *)v11 + 3);
  *(_QWORD *)(v2 - 224) = *(_QWORD *)v11;
  *(_QWORD *)(v2 - 216) = v13;
  *(_QWORD *)(v2 - 208) = v15;
  *(_QWORD *)(v2 - 200) = v14;
  swift_retain();
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v7);
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v12, v13, v15, v14);
  *(_QWORD *)(v2 - 240) = v0[6];
  *(_QWORD *)(v2 - 232) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[11], v2 - 240);
  AccessibilityStepperModifier.init(_:value:)(v0 + 25, (uint64_t *)(v2 - 224));
}

uint64_t sub_1879F8518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);

  v9 = *(_QWORD *)(v8 - 192);
  v10 = *(void **)(v8 - 184);
  v11 = *(_QWORD *)(v8 - 176);
  v12 = *(void **)(v8 - 168);
  *(_QWORD *)(v4 + 8) = v11;
  *(_QWORD *)(v4 + 16) = v9;
  v13 = *(_BYTE *)(v8 - 160);
  v14 = *(_QWORD *)(v8 - 152);
  v15 = *(_QWORD *)(v8 - 144);
  *(_QWORD *)(v4 + 24) = v15;
  *(_QWORD *)(v4 + 32) = v14;
  v16 = *(_QWORD *)(v8 - 136);
  v17 = *(_QWORD *)(v8 - 128);
  *(_QWORD *)(v4 + 40) = v17;
  *(_QWORD *)(v4 + 48) = v16;
  v18 = *(_QWORD *)(v8 - 120);
  v19 = *(_QWORD *)(v8 - 96);
  *(_QWORD *)(v4 + 56) = v19;
  *(_QWORD *)(v4 + 200) = v9;
  *(_QWORD *)(v4 + 208) = v10;
  *(_QWORD *)(v4 + 216) = v11;
  *(_QWORD *)(v4 + 224) = v12;
  *(_BYTE *)(v4 + 232) = v13;
  *(_QWORD *)(v4 + 240) = v14;
  *(_QWORD *)(v4 + 248) = v15;
  *(_QWORD *)(v4 + 256) = v16;
  *(_QWORD *)(v4 + 264) = v17;
  *(_QWORD *)(v4 + 272) = v18;
  v20 = *(_OWORD *)(v8 - 112);
  *(_OWORD *)(v4 + 64) = v20;
  *(_OWORD *)(v4 + 280) = v20;
  *(_QWORD *)(v4 + 296) = v19;
  v21 = type metadata accessor for AccessibilityStepperModifier(0, v6, v5, a4);
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityStepperModifier<A>, v21);
  *(_QWORD *)(v4 + 184) = v5;
  *(_QWORD *)(v4 + 192) = &protocol witness table for AccessibilityAttachmentModifier;
  v23 = *(_QWORD *)(v4 + 104);
  v24 = MEMORY[0x18D75FFDC](v7, v23, v4 + 184);
  v25 = *(_QWORD *)(v4 + 96);
  v26 = v5;
  v27 = *(_QWORD *)(v4 + 80);
  View.accessibilityConfiguration<A>(_:)(v4 + 200, v6, v21, v26, v22);
  outlined consume of AccessibilitySliderValue?(*(void **)(v4 + 16), v10, *(void **)(v4 + 8), v12);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v4 + 32));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v4 + 48));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 128) + 8))(v27, v6);
  v28 = *(_QWORD *)(v4 + 112);
  static ViewBuilder.buildExpression<A>(_:)(v25, v23, v24);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 120) + 8);
  v29(v25, v23);
  static ViewBuilder.buildBlock<A>(_:)(v28, v23, *(_QWORD *)(v4 + 136));
  return v29(v28, v23);
}

uint64_t closure #1 in Stepper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Stepper(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t partial apply for closure #1 in Stepper.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Stepper.body.getter(v1[4], v1[2], v1[3], a1);
}

double Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(uint64_t (*)(), char *, uint64_t);
  char *v97;
  uint64_t v98;
  char v99;
  char *v100;
  uint64_t (*v101)();
  char *v102;
  uint64_t v103;
  uint64_t (*v104)();
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t (*v110)();
  uint64_t (*v111)();
  uint64_t v112;
  void (*v113)(uint64_t (*)(), uint64_t, uint64_t);
  uint64_t (*v114)();
  char *v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  void (*v126)(void);
  char *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t (*v137)();
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char *v142;
  uint64_t (*v143)();
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  void (*v154)(char *, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)();
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  void (*v169)(char *, uint64_t);
  void (*v170)(char *, uint64_t);
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  void (*v175)(char *, char *, uint64_t);
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t (*v192)();
  uint64_t (*v193)();
  uint64_t v194;
  double result;
  uint64_t v196;
  void (*v197)(char *, uint64_t, uint64_t);
  int v198;
  void (*v199)(void);
  uint64_t v200;
  char *v201;
  char *v202;
  void (*v203)(char *, uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t);
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  char *v215;
  uint64_t (*v216)();
  char *v217;
  void (*v218)(char *, uint64_t, double);
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t (*v232)();
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;

  v225 = a7;
  v224 = a6;
  v223 = a5;
  v221 = a4;
  v240 = a3;
  *(_QWORD *)&v244 = a1;
  v215 = a9;
  v239 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v15, v16);
  v220 = (char *)&v196 - v17;
  v235 = a8;
  v237 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v236 = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v209 = (char *)&v196 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v228 = (char *)&v196 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v217 = (char *)&v196 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v213 = (void (*)(char *, char *, uint64_t))((char *)&v196 - v32);
  v231 = AssociatedTypeWitness;
  v229 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = *(_QWORD *)(v229 + 64);
  MEMORY[0x1E0C80A78](v34, v35);
  v208 = (char *)&v196 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v216 = (uint64_t (*)())((char *)&v196 - v38);
  MEMORY[0x1E0C80A78](v39, v40);
  v227 = (char *)&v196 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v212 = (char *)&v196 - v44;
  v243 = type metadata accessor for Binding();
  v234 = *(_QWORD *)(v243 - 8);
  v214 = *(_QWORD *)(v234 + 64);
  MEMORY[0x1E0C80A78](v243, v45);
  v233 = (char *)&v196 - v46;
  v241 = a10;
  v242 = a12;
  v211 = *(_QWORD *)(a12 + 8);
  v47 = type metadata accessor for ClosedRange();
  v48 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v48, v49);
  v219 = (char *)&v196 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (char *)&v196 - v53;
  v55 = *(_QWORD *)(v47 - 8);
  v56 = *(_QWORD *)(v55 + 64);
  MEMORY[0x1E0C80A78](v57, v58);
  MEMORY[0x1E0C80A78](v59, v60);
  v62 = (char *)&v196 - v61;
  MEMORY[0x1E0C80A78](v63, v64);
  v66 = (char *)&v196 - v65;
  v69 = MEMORY[0x1E0C80A78](v67, v68);
  v232 = (uint64_t (*)())((char *)&v196 - v70);
  v230 = v71;
  v73 = v72;
  v218 = *(void (**)(char *, uint64_t, double))(v71 + 16);
  v218(v54, a2, v69);
  v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48))(v54, 1, v47);
  v222 = a2;
  v238 = v73;
  if (v74 == 1)
  {
    (*(void (**)(char *, uint64_t))(v230 + 8))(v54, v73);
    v75 = v234;
    v232 = *(uint64_t (**)())(v234 + 16);
    v76 = v243;
    ((void (*)(char *, _QWORD, uint64_t))v232)(v233, v244, v243);
    v77 = v231;
    v78 = v229;
    v227 = *(char **)(v229 + 16);
    v79 = v212;
    ((void (*)(char *, uint64_t, uint64_t))v227)(v212, v240, v231);
    v80 = *(unsigned __int8 *)(v75 + 80);
    v81 = (v80 + 48) & ~v80;
    v82 = *(unsigned __int8 *)(v78 + 80);
    v226 = v81;
    v83 = (v214 + v82 + v81) & ~v82;
    v216 = (uint64_t (*)())(v83 + v33);
    v214 = v80 | v82 | 7;
    v84 = (char *)swift_allocObject();
    v85 = v235;
    v86 = v241;
    v87 = v242;
    *((_QWORD *)v84 + 2) = v235;
    *((_QWORD *)v84 + 3) = v86;
    *((_QWORD *)v84 + 4) = v239;
    *((_QWORD *)v84 + 5) = v87;
    v213 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
    v88 = v233;
    v213(&v84[v81], v233, v76);
    v217 = v84;
    v89 = v85;
    v90 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
    v90(&v84[v83], v79, v77);
    ((void (*)(char *, _QWORD, uint64_t))v232)(v88, v244, v76);
    ((void (*)(char *, uint64_t, uint64_t))v227)(v79, v240, v77);
    v91 = (char *)swift_allocObject();
    v92 = v241;
    *((_QWORD *)v91 + 2) = v89;
    *((_QWORD *)v91 + 3) = v92;
    *((_QWORD *)v91 + 4) = v239;
    *((_QWORD *)v91 + 5) = v87;
    v213(&v91[v226], v88, v76);
    v233 = v91;
    v93 = v77;
    v90(&v91[v83], v79, v77);
    v216 = partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    v232 = partial apply for closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    v94 = v215;
    v95 = v78;
LABEL_18:
    v103 = v238;
    goto LABEL_19;
  }
  v202 = v66;
  v201 = (char *)&v196 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = v56;
  v207 = v62;
  v200 = v33;
  v96 = *(void (**)(uint64_t (*)(), char *, uint64_t))(v55 + 32);
  v96(v232, v54, v47);
  v97 = (char *)v213;
  MEMORY[0x18D75B9C8](v243);
  v98 = v241;
  dispatch thunk of Strideable.distance(to:)();
  v203 = *(void (**)(char *, uint64_t, uint64_t))(v211 + 8);
  v99 = dispatch thunk of static Equatable.== infix(_:_:)();
  v100 = v97;
  v210 = v55;
  v206 = (void (*)(char *, char *, uint64_t))v96;
  v205 = v47;
  if ((v99 & 1) != 0)
  {
    v101 = 0;
    v102 = 0;
    v103 = v238;
    v95 = v229;
    v93 = v231;
    v104 = v232;
    goto LABEL_11;
  }
  v105 = v231;
  swift_getAssociatedConformanceWitness();
  v106 = v229;
  v107 = v240;
  v108 = dispatch thunk of static Comparable.> infix(_:_:)();
  (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v217, v100, v98);
  v109 = v202;
  v110 = v232;
  v199 = *(void (**)(void))(v55 + 16);
  v199();
  v111 = v216;
  v112 = v107;
  v113 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t))(v106 + 16);
  v113(v216, v112, v105);
  if ((v108 & 1) == 0)
  {
    (*(void (**)(uint64_t (*)(), uint64_t))(v106 + 8))(v111, v105);
    v131 = v210;
    (*(void (**)(char *, uint64_t))(v210 + 8))(v109, v47);
    (*(void (**)(char *, uint64_t))(v226 + 8))(v217, v98);
    v121 = v233;
    v123 = v234;
    v124 = v242;
    v125 = v207;
    v120 = v131;
    v126 = v199;
    goto LABEL_9;
  }
  v197 = (void (*)(char *, uint64_t, uint64_t))v113;
  swift_getAssociatedConformanceWitness();
  v114 = v111;
  v115 = v212;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v116 = v228;
  dispatch thunk of Strideable.advanced(by:)();
  v117 = *(void (**)(char *, uint64_t))(v106 + 8);
  v117(v115, v105);
  v118 = v217;
  v198 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v119 = *(void (**)(char *, uint64_t))(v226 + 8);
  v119(v116, v98);
  v117((char *)v114, v105);
  v120 = v210;
  (*(void (**)(char *, uint64_t))(v210 + 8))(v202, v47);
  v119(v118, v98);
  v110 = v232;
  v121 = v233;
  v122 = v106;
  v123 = v234;
  v124 = v242;
  v125 = v207;
  v126 = v199;
  if ((v198 & 1) == 0)
  {
LABEL_9:
    v132 = v243;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 16))(v121, v244, v243);
    ((void (*)(char *, uint64_t (*)(), uint64_t))v126)(v125, v110, v47);
    v133 = (*(unsigned __int8 *)(v123 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
    v134 = (v214 + v133 + *(unsigned __int8 *)(v120 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
    v102 = (char *)swift_allocObject();
    *((_QWORD *)v102 + 2) = v235;
    *((_QWORD *)v102 + 3) = v98;
    *((_QWORD *)v102 + 4) = v239;
    *((_QWORD *)v102 + 5) = v124;
    v135 = &v102[v133];
    v104 = v232;
    v136 = v132;
    v95 = v229;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v135, v121, v136);
    v206(&v102[v134], v125, v47);
    v101 = partial apply for closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    v93 = v231;
    goto LABEL_10;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v234 + 16))(v233, v244, v243);
  ((void (*)(char *, uint64_t (*)(), uint64_t))v126)(v125, v110, v47);
  v127 = v212;
  v197(v212, v240, v231);
  v128 = (*(unsigned __int8 *)(v123 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
  v129 = (v214 + v128 + *(unsigned __int8 *)(v120 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
  v130 = (v204 + *(unsigned __int8 *)(v122 + 80) + v129) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
  v102 = (char *)swift_allocObject();
  *((_QWORD *)v102 + 2) = v235;
  *((_QWORD *)v102 + 3) = v98;
  *((_QWORD *)v102 + 4) = v239;
  *((_QWORD *)v102 + 5) = v124;
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(&v102[v128], v233, v243);
  v93 = v231;
  v206(&v102[v129], v207, v47);
  v95 = v229;
  v104 = v232;
  (*(void (**)(char *, char *, uint64_t))(v229 + 32))(&v102[v130], v127, v93);
  v101 = partial apply for closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
LABEL_10:
  v103 = v238;
  v100 = (char *)v213;
LABEL_11:
  v137 = v104;
  v138 = dispatch thunk of static Equatable.== infix(_:_:)();
  v217 = v102;
  v216 = v101;
  if ((v138 & 1) == 0)
  {
    swift_getAssociatedConformanceWitness();
    v139 = v95;
    v140 = v240;
    v141 = dispatch thunk of static Comparable.> infix(_:_:)();
    (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v209, v100, v98);
    v142 = v201;
    v143 = v137;
    v144 = v205;
    (*(void (**)(char *, uint64_t (*)(), uint64_t))(v210 + 16))(v201, v143, v205);
    v145 = v208;
    v146 = v140;
    v147 = *(void (**)(char *, uint64_t, uint64_t))(v139 + 16);
    v147(v208, v146, v93);
    if ((v141 & 1) != 0)
    {
      v203 = v147;
      v148 = v228;
      v149 = v242;
      dispatch thunk of Strideable.advanced(by:)();
      LODWORD(v211) = dispatch thunk of static Comparable.>= infix(_:_:)();
      v150 = v139;
      v151 = v149;
      v152 = v144;
      v153 = *(void (**)(char *, uint64_t))(v226 + 8);
      v153(v148, v98);
      v154 = *(void (**)(char *, uint64_t))(v150 + 8);
      v154(v145, v93);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v142, v144);
      v153(v209, v98);
      v154(v227, v93);
      v155 = v151;
      v153((char *)v213, v98);
      v156 = v243;
      v157 = v234;
      v158 = v214;
      v159 = v98;
      v160 = v232;
      v161 = v152;
      if ((v211 & 1) != 0)
      {
        v162 = v234;
        v163 = v243;
        (*(void (**)(char *, _QWORD, uint64_t))(v234 + 16))(v233, v244, v243);
        v206(v207, (char *)v160, v161);
        v164 = v231;
        v203(v212, v240, v231);
        v165 = (*(unsigned __int8 *)(v162 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
        v166 = (v158 + v165 + *(unsigned __int8 *)(v210 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
        v95 = v229;
        v167 = (v204 + *(unsigned __int8 *)(v229 + 80) + v166) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80);
        v168 = (char *)swift_allocObject();
        *((_QWORD *)v168 + 2) = v235;
        *((_QWORD *)v168 + 3) = v159;
        *((_QWORD *)v168 + 4) = v239;
        *((_QWORD *)v168 + 5) = v155;
        (*(void (**)(char *, char *, uint64_t))(v162 + 32))(&v168[v165], v233, v163);
        v206(&v168[v166], v207, v205);
        v233 = v168;
        v93 = v164;
        (*(void (**)(char *, char *, uint64_t))(v95 + 32))(&v168[v167], v212, v164);
        v232 = partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
        v94 = v215;
        goto LABEL_18;
      }
    }
    else
    {
      v169 = *(void (**)(char *, uint64_t))(v139 + 8);
      v169(v145, v93);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v142, v144);
      v170 = *(void (**)(char *, uint64_t))(v226 + 8);
      v170(v209, v98);
      v169(v227, v93);
      v170(v100, v98);
      v171 = v144;
      v156 = v243;
      v157 = v234;
      v158 = v214;
      v160 = v232;
      v161 = v171;
    }
    v172 = v157;
    v173 = v233;
    (*(void (**)(char *, _QWORD, uint64_t))(v157 + 16))(v233, v244, v156);
    v174 = v207;
    v175 = v206;
    v206(v207, (char *)v160, v161);
    v176 = (*(unsigned __int8 *)(v172 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
    v177 = (v158 + v176 + *(unsigned __int8 *)(v210 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
    v178 = (char *)swift_allocObject();
    v179 = v241;
    *((_QWORD *)v178 + 2) = v235;
    *((_QWORD *)v178 + 3) = v179;
    v180 = v242;
    *((_QWORD *)v178 + 4) = v239;
    *((_QWORD *)v178 + 5) = v180;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(&v178[v176], v173, v156);
    v233 = v178;
    v175(&v178[v177], v174, v161);
    v232 = partial apply for closure #4 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    v94 = v215;
    v93 = v231;
    v95 = v229;
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t))(v95 + 8))(v227, v93);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v100, v98);
  (*(void (**)(uint64_t (*)(), uint64_t))(v210 + 8))(v104, v205);
  v232 = 0;
  v233 = 0;
  v94 = v215;
LABEL_19:
  v181 = v221;
  v182 = v235;
  (*(void (**)(char *, uint64_t, uint64_t))(v237 + 16))(v236, v221, v235);
  MEMORY[0x18D75B9C8](v243);
  v183 = v222;
  ((void (*)(char *, uint64_t, uint64_t))v218)(v219, v222, v103);
  v184 = v220;
  v185 = v240;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v220, v240, v93);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v184, 0, 1, v93);
  AccessibilityBoundedNumber.init<A>(for:in:by:)();
  v186 = v237;
  (*(void (**)(uint64_t, uint64_t))(v237 + 8))(v181, v182);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v185, v93);
  (*(void (**)(uint64_t, uint64_t))(v230 + 8))(v183, v238);
  (*(void (**)(_QWORD, uint64_t))(v234 + 8))(v244, v243);
  v244 = v245;
  v187 = v246;
  v188 = v247;
  v190 = type metadata accessor for Stepper(0, v182, v239, v189);
  v191 = &v94[*(int *)(v190 + 40)];
  v192 = v216;
  *(_QWORD *)v94 = v223;
  *((_QWORD *)v94 + 1) = v192;
  v193 = v232;
  *((_QWORD *)v94 + 2) = v217;
  *((_QWORD *)v94 + 3) = v193;
  v194 = v224;
  *((_QWORD *)v94 + 4) = v233;
  *((_QWORD *)v94 + 5) = v194;
  *((_QWORD *)v94 + 6) = v225;
  (*(void (**)(char *, char *, uint64_t))(v186 + 32))(&v94[*(int *)(v190 + 36)], v236, v182);
  result = *(double *)&v244;
  *(_OWORD *)v191 = v244;
  *((_QWORD *)v191 + 2) = v187;
  *((_QWORD *)v191 + 3) = v188;
  return result;
}

uint64_t closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v19[1] = a3;
  v6 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v19 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v19 - v15;
  type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  Comparable.clamped(to:)();
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, a5);
  dispatch thunk of Strideable.advanced(by:)();
  v17(v12, a5);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, a5);
}

uint64_t closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  type metadata accessor for ClosedRange();
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

uint64_t closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a3;
  v29 = a1;
  v26 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v26 - v8;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v26 - v21;
  v23 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v23);
  Comparable.clamped(to:)();
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v14, a5);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  dispatch thunk of Strideable.advanced(by:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, AssociatedTypeWitness);
  v24(v18, a5);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v24)(v22, a5);
}

uint64_t closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v14 - v10;
  type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  dispatch thunk of Strideable.advanced(by:)();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, a4);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a4);
}

uint64_t closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD v23[2];

  v23[0] = a1;
  v23[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)v23 - v8;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v23 - v17;
  v19 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v19, v20);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  dispatch thunk of Strideable.advanced(by:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v14, a4);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, a4);
}

uint64_t Stepper.init<A>(value:step:onEditingChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a7;
  v48 = a3;
  v44 = a6;
  v45 = a5;
  v49 = a4;
  v46 = a9;
  v43 = a10;
  MEMORY[0x1E0C80A78](a1, a11);
  v42 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = v39;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v18);
  v20 = (char *)&v38 - v19;
  v40 = a8;
  v21 = type metadata accessor for ClosedRange();
  v22 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v38 - v24;
  v26 = type metadata accessor for Binding();
  v27 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v31 = (char *)&v38 - v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))((char *)&v38 - v30, a1, v26, v29);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v25, 1, 1, v21);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v33 = AssociatedTypeWitness;
  v34 = v32(v20, a2, AssociatedTypeWitness);
  v35 = (uint64_t)v42;
  v45(v34);
  v36 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t)v31, (uint64_t)v25, (uint64_t)v20, v35, 0, v48, v49, v47, v46, v40, v43, v41);
  (*(void (**)(uint64_t, uint64_t, double))(v39 + 8))(a2, v33, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(a1, v26);
}

void Stepper.init<A, B>(value:step:label:currentValueLabel:onEditingChanged:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t Stepper.init<A>(value:in:step:onEditingChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a8;
  v54 = a4;
  v50 = a7;
  v51 = a6;
  v55 = a5;
  v47 = a3;
  v42 = a2;
  v45 = a1;
  v52 = a9;
  v49 = a11;
  MEMORY[0x1E0C80A78](a1, a12);
  v48 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = v41;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v18);
  v20 = (char *)&v40 - v19;
  v43 = a10;
  v21 = type metadata accessor for ClosedRange();
  v22 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - v24;
  v26 = type metadata accessor for Binding();
  v27 = *(_QWORD *)(v26 - 8);
  v44 = v26;
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v31 = (char *)&v40 - v30;
  (*(void (**)(char *, uint64_t, double))(v27 + 16))((char *)&v40 - v30, a1, v29);
  v32 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v25, a2, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v25, 0, 1, v21);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v34 = v47;
  v35 = AssociatedTypeWitness;
  v36 = v33(v20, v47, AssociatedTypeWitness);
  v37 = (uint64_t)v48;
  v51(v36);
  v38 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t)v31, (uint64_t)v25, (uint64_t)v20, v37, 0, v54, v55, v53, v52, v43, v49, v46);
  (*(void (**)(uint64_t, uint64_t, double))(v41 + 8))(v34, v35, v38);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v42, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v45, v44);
}

void Stepper.init<A, B>(value:in:step:label:currentValueLabel:onEditingChanged:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double Stepper<>.init(_:onIncrement:onDecrement:onEditingChanged:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double result;

  v12 = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = a1;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  *(_QWORD *)(a5 + 40) = a6;
  *(_QWORD *)(a5 + 48) = a7;
  *(_QWORD *)(a5 + 56) = v12;
  *(_QWORD *)(a5 + 64) = v13;
  *(_BYTE *)(a5 + 72) = v14 & 1;
  *(_QWORD *)(a5 + 80) = v15;
  result = 0.0;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  return result;
}

double Stepper<>.init<A>(_:onIncrement:onDecrement:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double result;
  _QWORD v23[2];
  char v24;
  uint64_t v25;

  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v23);
  v16 = v23[0];
  v15 = v23[1];
  v17 = v24;
  v18 = v25;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = v16;
  *(_QWORD *)(a9 + 64) = v15;
  *(_BYTE *)(a9 + 72) = v17;
  *(_QWORD *)(a9 + 80) = v18;
  result = 0.0;
  *(_OWORD *)(a9 + 88) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  return result;
}

__n128 Stepper<>.init<A>(_:value:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __n128 result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  __n128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  v42 = a8;
  v41 = a7;
  v34 = a6;
  v35 = a5;
  v40 = a4;
  v39 = a3;
  v38 = a2;
  v37 = a1;
  v36 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v16);
  v18 = (char *)&v33 - v17;
  v19 = type metadata accessor for Binding();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v33 - v23, a5, v19, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a6, AssociatedTypeWitness);
  v44 = v37;
  v45 = v38;
  v46 = v39;
  v47 = v40;
  Stepper.init<A>(value:step:onEditingChanged:label:)((uint64_t)v24, (uint64_t)v18, v41, v42, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v43, MEMORY[0x1E0CE6CF8], a10, (char *)v48, MEMORY[0x1E0CE6C58], v36);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v34, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v35, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v49;
  v26 = v52;
  v27 = v53;
  result = v50;
  v29 = v48[1];
  v30 = v51;
  v31 = v54;
  v32 = v55;
  *(_OWORD *)a9 = v48[0];
  *(_OWORD *)(a9 + 16) = v29;
  *(_QWORD *)(a9 + 32) = v25;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v30;
  *(_BYTE *)(a9 + 72) = v26;
  *(_QWORD *)(a9 + 80) = v27;
  *(_OWORD *)(a9 + 88) = v31;
  *(_OWORD *)(a9 + 104) = v32;
  return result;
}

__n128 Stepper<>.init<A, B>(_:value:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __n128 result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  __n128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  v38 = a8;
  v41 = a6;
  v40 = a5;
  v39 = a4;
  v36 = a3;
  v35 = a2;
  v37 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)&v34 - v16;
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v34 - v22, a2, v18, v21);
  v24 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v36, AssociatedTypeWitness);
  v43 = v41;
  v44 = a7;
  v45 = v38;
  v46 = a10;
  v25 = v37;
  v47 = v37;
  Stepper.init<A>(value:step:onEditingChanged:label:)((uint64_t)v23, (uint64_t)v17, v39, v40, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v42, MEMORY[0x1E0CE6CF8], a7, (char *)v48, MEMORY[0x1E0CE6C58], a10);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v24, v34);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v35, v18);
  (*(void (**)(uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v25);
  v26 = v49;
  v27 = v52;
  v28 = v53;
  result = v50;
  v30 = v48[1];
  v31 = v51;
  v32 = v54;
  v33 = v55;
  *(_OWORD *)a9 = v48[0];
  *(_OWORD *)(a9 + 16) = v30;
  *(_QWORD *)(a9 + 32) = v26;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v31;
  *(_BYTE *)(a9 + 72) = v27;
  *(_QWORD *)(a9 + 80) = v28;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  return result;
}

__n128 Stepper<>.init<A>(_:value:in:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __n128 result;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedTypeWitness;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[16];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  __n128 v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;

  v57 = a8;
  v51 = a7;
  v44 = a6;
  v48 = a5;
  v55 = a4;
  v54 = a3;
  v53 = a2;
  v52 = a1;
  v56 = a10;
  v49 = a12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = v42;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v16);
  v46 = (char *)&v42 - v17;
  v18 = type metadata accessor for ClosedRange();
  v19 = *(_QWORD *)(v18 - 8);
  v43 = v18;
  v20 = v19;
  v45 = v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v42 - v22;
  v24 = type metadata accessor for Binding();
  v25 = *(_QWORD *)(v24 - 8);
  v47 = v24;
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v29 = (char *)&v42 - v28;
  (*(void (**)(char *, uint64_t, double))(v25 + 16))((char *)&v42 - v28, a5, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a6, v18);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v31 = (uint64_t)v46;
  v32 = v51;
  v33 = AssociatedTypeWitness;
  v30(v46, v51, AssociatedTypeWitness);
  v59 = v52;
  v60 = v53;
  v61 = v54;
  v62 = v55;
  Stepper.init<A>(value:in:step:onEditingChanged:label:)((uint64_t)v29, (uint64_t)v23, v31, v57, v56, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v58, MEMORY[0x1E0CE6CF8], (char *)v63, a11, MEMORY[0x1E0CE6C58], v49);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v43);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v48, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v64;
  v35 = v67;
  v36 = v68;
  result = v65;
  v38 = v63[1];
  v39 = v66;
  v40 = v69;
  v41 = v70;
  *(_OWORD *)a9 = v63[0];
  *(_OWORD *)(a9 + 16) = v38;
  *(_QWORD *)(a9 + 32) = v34;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v39;
  *(_BYTE *)(a9 + 72) = v35;
  *(_QWORD *)(a9 + 80) = v36;
  *(_OWORD *)(a9 + 88) = v40;
  *(_OWORD *)(a9 + 104) = v41;
  return result;
}

__n128 Stepper<>.init<A, B>(_:value:in:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __n128 result;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedTypeWitness;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[2];
  uint64_t v66;
  __n128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;

  v58 = a7;
  v57 = a6;
  v56 = a5;
  v53 = a4;
  v52 = a3;
  v49 = a2;
  v55 = a1;
  v54 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = v45;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)&v45 - v16;
  v18 = type metadata accessor for ClosedRange();
  v19 = *(_QWORD *)(v18 - 8);
  v46 = v18;
  v20 = v19;
  v47 = v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v45 - v22;
  v24 = type metadata accessor for Binding();
  v25 = *(_QWORD *)(v24 - 8);
  v48 = v24;
  v50 = v25;
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v29 = (char *)&v45 - v28;
  (*(void (**)(char *, uint64_t, double))(v30 + 16))((char *)&v45 - v28, a2, v27);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v32 = v52;
  v31(v23, v52, v18);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v34 = v53;
  v35 = AssociatedTypeWitness;
  v33(v17, v53, AssociatedTypeWitness);
  v60 = v58;
  v61 = a8;
  v62 = v54;
  v63 = a11;
  v36 = v55;
  v64 = v55;
  Stepper.init<A>(value:in:step:onEditingChanged:label:)((uint64_t)v29, (uint64_t)v23, (uint64_t)v17, v56, v57, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v59, MEMORY[0x1E0CE6CF8], (char *)v65, a8, MEMORY[0x1E0CE6C58], a11);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v32, v46);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v48);
  (*(void (**)(uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v36);
  v37 = v66;
  v38 = v69;
  v39 = v70;
  result = v67;
  v41 = v65[1];
  v42 = v68;
  v43 = v71;
  v44 = v72;
  *(_OWORD *)a9 = v65[0];
  *(_OWORD *)(a9 + 16) = v41;
  *(_QWORD *)(a9 + 32) = v37;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v42;
  *(_BYTE *)(a9 + 72) = v38;
  *(_QWORD *)(a9 + 80) = v39;
  *(_OWORD *)(a9 + 88) = v43;
  *(_OWORD *)(a9 + 104) = v44;
  return result;
}

void Stepper.init<A>(value:step:format:label:onEditingChanged:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, double);
  _QWORD v46[6];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[16];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v63 = a6;
  v64 = a7;
  v55 = a5;
  v67 = a1;
  v68 = a4;
  v70 = a3;
  v61 = a2;
  v62 = a9;
  v65 = a11;
  v52 = a12;
  v54 = a13;
  v66 = a8;
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v59 = v16;
  v18 = AssociatedTypeWitness;
  v58 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v19);
  v56 = (char *)v46 - v20;
  v57 = v18;
  v53 = type metadata accessor for ClosedRange();
  v21 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v21, v22);
  v50 = (char *)v46 - v23;
  v49 = *(_QWORD *)(a10 - 8);
  v24 = v49;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Binding();
  v51 = *(_QWORD *)(v29 - 8);
  v30 = v51;
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)v46 - v32;
  v35 = type metadata accessor for TextField(0, a8, a11, v34);
  v46[3] = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)v46 - v37;
  v47 = type metadata accessor for ModifiedContent();
  v46[5] = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v39);
  v46[4] = (char *)v46 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0C80A78](v41, v42);
  v46[0] = (char *)v46 - v44;
  v45 = *(void (**)(char *, uint64_t, uint64_t, double))(v30 + 16);
  v46[2] = v29;
  v45(v33, v67, v29, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v28, v70, a10);
  v72 = v66;
  v73 = a10;
  v48 = a10;
  v74 = v65;
  v75 = v52;
  v76 = v54;
  v77 = v68;
  v78 = v55;
  v46[1] = v33;
  TextField.init<A>(value:format:prompt:label:)((uint64_t)v33, (uint64_t)v28, 0, 0, 0, 0, (void (*)(uint64_t))partial apply for closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:), (uint64_t)v71, (uint64_t)v38, v66, a10, v65, v52);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextField<A>, v35);
  View.labelsHidden()();
}

uint64_t sub_1879FB320()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 392) + 8))(v1, v2);
  v0(v5, v4, v6);
  v8 = *(_QWORD *)(v7 - 344);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 - 320) - 8) + 56))(v8, 1, 1);
  v9 = *(_QWORD *)(v7 - 296);
  v10 = *(_QWORD *)(v7 - 256);
  v11 = *(_QWORD *)(v7 - 280);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 16))(v9, v10, v11);
  v13 = *(_QWORD *)(v7 - 264);
  (*(void (**)(uint64_t))(v7 - 200))(v12);
  v14 = *(_QWORD *)(v7 - 376);
  v15 = *(_QWORD *)(v7 - 416);
  v16 = *(_QWORD *)(v7 - 368);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v14 + 16))(*(_QWORD *)(v7 - 384), v15, v16);
  v17 = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = v17;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v7 - 104);
  v18 = AnyView.init<A>(_:)();
  v19 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(*(_QWORD *)(v7 - 408), v8, v9, v13, v18, *(_QWORD *)(v7 - 240), *(_QWORD *)(v7 - 232), *(_QWORD *)(v7 - 216), *(char **)(v7 - 248), *(_QWORD *)(v7 - 288), *(_QWORD *)(v7 - 224), *(_QWORD *)(v7 - 272));
  (*(void (**)(_QWORD, _QWORD, double))(*(_QWORD *)(v7 - 352) + 8))(*(_QWORD *)(v7 - 184), *(_QWORD *)(v7 - 360), v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 8))(v10, v11);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 336) + 8))(*(_QWORD *)(v7 - 208), *(_QWORD *)(v7 - 400));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
}

void Stepper.init<A>(value:in:step:format:label:onEditingChanged:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, double);
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD v51[8];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76[8];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v66 = a8;
  v65 = a7;
  v57 = a6;
  v72 = a5;
  v75 = a4;
  v63 = a3;
  v73 = a2;
  v64 = a9;
  v67 = a12;
  v54 = a13;
  v55 = a14;
  v68 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v62 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24);
  v19 = v18;
  v69 = v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = v17;
  v21 = AssociatedTypeWitness;
  v60 = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v22);
  v58 = (char *)v51 - v23;
  v59 = v21;
  v71 = type metadata accessor for ClosedRange();
  v24 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v24, v25);
  v70 = (char *)v51 - v26;
  v53 = *(_QWORD *)(v19 - 8);
  v27 = v53;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Binding();
  v56 = *(_QWORD *)(v32 - 8);
  v33 = v56;
  MEMORY[0x1E0C80A78](v32, v34);
  v36 = (char *)v51 - v35;
  v38 = type metadata accessor for TextField(0, a10, a12, v37);
  v51[3] = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)v51 - v40;
  v52 = type metadata accessor for ModifiedContent();
  v51[7] = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v42);
  v51[6] = (char *)v51 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v44, v45);
  v51[1] = (char *)v51 - v47;
  v48 = *(void (**)(char *, uint64_t, uint64_t, double))(v33 + 16);
  v51[5] = v32;
  v48(v36, a1, v32, v46);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v50 = v69;
  v49(v31, v75, v69);
  v77 = v68;
  v78 = v50;
  v79 = v67;
  v80 = v54;
  v81 = v55;
  v82 = v72;
  v83 = v57;
  v51[2] = v36;
  TextField.init<A>(value:format:prompt:label:)((uint64_t)v36, (uint64_t)v31, 0, 0, 0, 0, (void (*)(uint64_t))partial apply for closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:), (uint64_t)v76, (uint64_t)v41, v68, v50, v67, v54);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextField<A>, v38);
  View.labelsHidden()();
}

uint64_t sub_1879FB884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 408) + 8))(v0, v5);
  *(_QWORD *)(v7 - 400) = v2;
  v4(v6, v2, v1);
  v8 = *(_QWORD *)(v7 - 224);
  v9 = *(_QWORD *)(v7 - 216);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v8, *(_QWORD *)(v7 - 200), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  v11 = *(_QWORD *)(v7 - 320);
  v12 = *(_QWORD *)(v7 - 280);
  v13 = *(_QWORD *)(v7 - 304);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 16))(v11, v12, v13);
  v15 = *(_QWORD *)(v7 - 288);
  (*(void (**)(uint64_t))(v7 - 208))(v14);
  v16 = *(_QWORD *)(v7 - 376);
  v17 = *(_QWORD *)(v7 - 424);
  v18 = *(_QWORD *)(v7 - 368);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v16 + 16))(*(_QWORD *)(v7 - 384), v17, v18);
  v19 = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = v19;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v18, v7 - 104);
  v20 = AnyView.init<A>(_:)();
  v21 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(*(_QWORD *)(v7 - 416), *(_QWORD *)(v7 - 224), v11, v15, v20, *(_QWORD *)(v7 - 264), *(_QWORD *)(v7 - 256), *(_QWORD *)(v7 - 240), *(char **)(v7 - 272), *(_QWORD *)(v7 - 312), *(_QWORD *)(v7 - 248), *(_QWORD *)(v7 - 296));
  (*(void (**)(_QWORD, _QWORD, double))(*(_QWORD *)(v7 - 360) + 8))(*(_QWORD *)(v7 - 184), *(_QWORD *)(v7 - 232), v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 8))(v12, v13);
  (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v7 - 200), *(_QWORD *)(v7 - 216));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 336) + 8))(*(_QWORD *)(v7 - 400), *(_QWORD *)(v7 - 392));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
}

uint64_t partial apply for closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in LabeledContent<>.init<A>(_:content:)(v1[7], v1[8], v1[2], v1[4], a1);
}

void Stepper<>.init<A>(_:value:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49[88];

  v40 = a8;
  v33 = a7;
  v42 = a6;
  v41 = a5;
  v38 = a4;
  v37 = a3;
  v43 = a2;
  v34 = a1;
  v35 = a11;
  v36 = a12;
  v39 = a9;
  v30 = *(_QWORD *)(a10 - 8);
  v12 = v30;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v14;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v32 = v16;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v28 - v18;
  v20 = type metadata accessor for Binding();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v28 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v28 - v24, v41, v20, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v42, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33, a10);
  v45 = v34;
  v46 = v43;
  v47 = v37;
  v48 = v38;
  v26 = swift_allocObject();
  v27 = v39;
  *(_QWORD *)(v26 + 16) = v40;
  *(_QWORD *)(v26 + 24) = v27;
  swift_retain();
  Stepper.init<A>(value:step:format:label:onEditingChanged:)((uint64_t)v25, (uint64_t)v19, (uint64_t)v29, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v44, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply, v26, MEMORY[0x1E0CE6CF8], (uint64_t)v49, a10, MEMORY[0x1E0CE6C58], v35, v36);
}

__n128 sub_1879FBD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 384) + 8))(v4, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 368) + 8))(*(_QWORD *)(v5 - 288), *(_QWORD *)(v5 - 376));
  (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v5 - 296), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 - 192);
  v7 = *(_BYTE *)(v5 - 152);
  v8 = *(_QWORD *)(v5 - 144);
  result = *(__n128 *)(v5 - 184);
  v10 = *(_OWORD *)(v5 - 208);
  v11 = *(_OWORD *)(v5 - 168);
  v12 = *(_OWORD *)(v5 - 136);
  v13 = *(_OWORD *)(v5 - 120);
  *(_OWORD *)v0 = *(_OWORD *)(v5 - 224);
  *(_OWORD *)(v0 + 16) = v10;
  *(_QWORD *)(v0 + 32) = v6;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v11;
  *(_BYTE *)(v0 + 72) = v7;
  *(_QWORD *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 88) = v12;
  *(_OWORD *)(v0 + 104) = v13;
  return result;
}

uint64_t sub_1879FBE04()
{
  swift_release();
  return swift_deallocObject();
}

void Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[16];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[72];

  v43 = a7;
  v41 = a6;
  v40 = a5;
  v39 = a4;
  v44 = a3;
  v42 = a2;
  v45 = a1;
  v38 = a9;
  v35 = a10;
  v36 = a11;
  v32 = *(_QWORD *)(a8 - 8);
  v12 = v32;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v14;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  v34 = v16;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v30 - v18;
  v20 = type metadata accessor for Binding();
  v21 = *(_QWORD *)(v20 - 8);
  v37 = v20;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v30 - v24;
  (*(void (**)(char *, uint64_t, double))(v21 + 16))((char *)&v30 - v24, v42, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v44, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v39, a8);
  v47 = v43;
  v48 = a8;
  v26 = v35;
  v49 = v38;
  v50 = v35;
  v27 = v36;
  v51 = v36;
  v52 = v45;
  v28 = swift_allocObject();
  v29 = v41;
  *(_QWORD *)(v28 + 16) = v40;
  *(_QWORD *)(v28 + 24) = v29;
  swift_retain();
  Stepper.init<A>(value:step:format:label:onEditingChanged:)((uint64_t)v25, (uint64_t)v19, (uint64_t)v31, (uint64_t)partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), (uint64_t)v46, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply, v28, MEMORY[0x1E0CE6CF8], (uint64_t)v53, a8, MEMORY[0x1E0CE6C58], v26, v27);
}

__n128 sub_1879FC0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 400) + 8))(v3, v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 384) + 8))(*(_QWORD *)(v4 - 304), *(_QWORD *)(v4 - 392));
  (*(void (**)(_QWORD, _QWORD))(v2 + 8))(*(_QWORD *)(v4 - 320), *(_QWORD *)(v4 - 360));
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v4 - 312) - 8) + 8))(*(_QWORD *)(v4 - 296));
  v5 = *(_QWORD *)(v4 - 192);
  v6 = *(_BYTE *)(v4 - 152);
  v7 = *(_QWORD *)(v4 - 144);
  result = *(__n128 *)(v4 - 184);
  v9 = *(_OWORD *)(v4 - 208);
  v10 = *(_OWORD *)(v4 - 168);
  v11 = *(_OWORD *)(v4 - 136);
  v12 = *(_OWORD *)(v4 - 120);
  *(_OWORD *)v0 = *(_OWORD *)(v4 - 224);
  *(_OWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 32) = v5;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v10;
  *(_BYTE *)(v0 + 72) = v6;
  *(_QWORD *)(v0 + 80) = v7;
  *(_OWORD *)(v0 + 88) = v11;
  *(_OWORD *)(v0 + 104) = v12;
  return result;
}

void Stepper<>.init<A>(_:value:in:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _BYTE v62[40];

  v45 = a8;
  v44 = a7;
  v55 = a6;
  v53 = a5;
  v50 = a4;
  v49 = a3;
  v56 = a2;
  v48 = a1;
  v52 = a10;
  v51 = a9;
  v46 = a13;
  v47 = a12;
  v54 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  v16 = v15;
  v38 = v15;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v35 - v18;
  v36 = (uint64_t)&v35 - v18;
  v20 = type metadata accessor for ClosedRange();
  v21 = *(_QWORD *)(v20 - 8);
  v39 = v20;
  v40 = v21;
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v35 - v23;
  v25 = type metadata accessor for Binding();
  v26 = *(_QWORD *)(v25 - 8);
  v41 = v25;
  v42 = v26;
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v30 = (char *)&v35 - v29;
  (*(void (**)(char *, uint64_t, double))(v31 + 16))((char *)&v35 - v29, v53, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v55, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v44, AssociatedTypeWitness);
  v32 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v43, v45, a11);
  v58 = v48;
  v59 = v56;
  v60 = v49;
  v61 = v50;
  v33 = swift_allocObject();
  v34 = v52;
  *(_QWORD *)(v33 + 16) = v51;
  *(_QWORD *)(v33 + 24) = v34;
  swift_retain();
  Stepper.init<A>(value:in:step:format:label:onEditingChanged:)((uint64_t)v30, (uint64_t)v24, v36, v32, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v57, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> (), v33, (uint64_t)v62, MEMORY[0x1E0CE6CF8], a11, MEMORY[0x1E0CE6C58], v47, v46);
}

__n128 sub_1879FC4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 296) + 8))(v2, v3);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 424) + 8))(v1, *(_QWORD *)(v4 - 432));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 408) + 8))(*(_QWORD *)(v4 - 288), *(_QWORD *)(v4 - 416));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 392) + 8))(*(_QWORD *)(v4 - 304), *(_QWORD *)(v4 - 400));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 - 192);
  v6 = *(_BYTE *)(v4 - 152);
  v7 = *(_QWORD *)(v4 - 144);
  result = *(__n128 *)(v4 - 184);
  v9 = *(_OWORD *)(v4 - 208);
  v10 = *(_OWORD *)(v4 - 168);
  v11 = *(_OWORD *)(v4 - 136);
  v12 = *(_OWORD *)(v4 - 120);
  *(_OWORD *)v0 = *(_OWORD *)(v4 - 224);
  *(_OWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 32) = v5;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v10;
  *(_BYTE *)(v0 + 72) = v6;
  *(_QWORD *)(v0 + 80) = v7;
  *(_OWORD *)(v0 + 88) = v11;
  *(_OWORD *)(v0 + 104) = v12;
  return result;
}

void Stepper<>.init<A, B>(_:value:in:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[7];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[16];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[32];

  v48 = a8;
  v43 = a7;
  v42 = a6;
  v41 = a5;
  v47 = a4;
  v46 = a3;
  v44 = a2;
  v49 = a1;
  v38 = a11;
  v39 = a12;
  v40 = a10;
  v45 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v37 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v36[1] = AssociatedTypeWitness;
  v15 = v14;
  v36[2] = v14;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v16);
  v18 = (char *)v36 - v17;
  v36[0] = (uint64_t)v36 - v17;
  v19 = type metadata accessor for ClosedRange();
  v20 = *(_QWORD *)(v19 - 8);
  v36[3] = v19;
  v36[4] = v20;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)v36 - v22;
  v24 = type metadata accessor for Binding();
  v25 = *(_QWORD *)(v24 - 8);
  v36[5] = v24;
  v36[6] = v25;
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v29 = (char *)v36 - v28;
  (*(void (**)(char *, uint64_t, double))(v30 + 16))((char *)v36 - v28, v44, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v46, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v47, AssociatedTypeWitness);
  v31 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v37, v41, a9);
  v51 = v48;
  v52 = a9;
  v32 = v38;
  v53 = v40;
  v54 = v38;
  v33 = v39;
  v55 = v39;
  v56 = v49;
  v34 = swift_allocObject();
  v35 = v43;
  *(_QWORD *)(v34 + 16) = v42;
  *(_QWORD *)(v34 + 24) = v35;
  swift_retain();
  Stepper.init<A>(value:in:step:format:label:onEditingChanged:)((uint64_t)v29, (uint64_t)v23, v36[0], v31, (uint64_t)partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), (uint64_t)v50, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply, v34, (uint64_t)v57, MEMORY[0x1E0CE6CF8], a9, MEMORY[0x1E0CE6C58], v32, v33);
}

__n128 sub_1879FC8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 328) + 8))(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 432) + 8))(*(_QWORD *)(v3 - 312), *(_QWORD *)(v3 - 440));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 416) + 8))(*(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 424));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 400) + 8))(*(_QWORD *)(v3 - 336), *(_QWORD *)(v3 - 408));
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v3 - 304) - 8) + 8))(*(_QWORD *)(v3 - 296));
  v4 = *(_QWORD *)(v3 - 192);
  v5 = *(_BYTE *)(v3 - 152);
  v6 = *(_QWORD *)(v3 - 144);
  result = *(__n128 *)(v3 - 184);
  v8 = *(_OWORD *)(v3 - 208);
  v9 = *(_OWORD *)(v3 - 168);
  v10 = *(_OWORD *)(v3 - 136);
  v11 = *(_OWORD *)(v3 - 120);
  *(_OWORD *)v0 = *(_OWORD *)(v3 - 224);
  *(_OWORD *)(v0 + 16) = v8;
  *(_QWORD *)(v0 + 32) = v4;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v9;
  *(_BYTE *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 80) = v6;
  *(_OWORD *)(v0 + 88) = v10;
  *(_OWORD *)(v0 + 104) = v11;
  return result;
}

uint64_t partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(_QWORD *)(v1 + 56), a1);
}

uint64_t associated type witness table accessor for View.Body : View in Stepper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Stepper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Stepper(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  __int128 v34;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 56) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    a1 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v14 = a2 + 1;
    v13 = a2[1];
    swift_retain();
    if (v13)
    {
      v15 = a2[2];
      a1[1] = v13;
      a1[2] = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 1) = *v14;
    }
    v16 = ~v6;
    v17 = a2[3];
    if (v17)
    {
      v18 = a2[4];
      a1[3] = v17;
      a1[4] = v18;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    }
    v19 = a2[6];
    a1[5] = a2[5];
    a1[6] = v19;
    v20 = (char *)a2 + v6;
    v21 = ((unint64_t)a1 + v6 + 56) & v16;
    v22 = (unint64_t)(v20 + 56) & v16;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v23(v21, v22, v4);
    v24 = (v7 + v21) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v7 + v22) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(void **)v25;
    if (*(_QWORD *)v25 < 0xFFFFFFFFuLL)
    {
      v34 = *(_OWORD *)(v25 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_OWORD *)(v24 + 16) = v34;
    }
    else
    {
      *(_QWORD *)v24 = v26;
      v27 = *(void **)(v25 + 8);
      *(_QWORD *)(v24 + 8) = v27;
      v28 = *(void **)(v25 + 16);
      *(_QWORD *)(v24 + 16) = v28;
      v29 = *(void **)(v25 + 24);
      *(_QWORD *)(v24 + 24) = v29;
      v30 = v26;
      v31 = v27;
      v32 = v28;
      v33 = v29;
    }
  }
  return a1;
}

void destroy for Stepper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  id *v6;

  swift_release();
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 24))
    swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (id *)((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)*v6 >= 0xFFFFFFFF)
  {

  }
}

_QWORD *initializeWithCopy for Stepper(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  __int128 v29;

  *a1 = *a2;
  v7 = a2 + 1;
  v6 = a2[1];
  swift_retain();
  if (v6)
  {
    v8 = a2[2];
    a1[1] = v6;
    a1[2] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v7;
  }
  v9 = a2[3];
  if (v9)
  {
    v10 = a2[4];
    a1[3] = v9;
    a1[4] = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  v11 = a2[6];
  a1[5] = a2[5];
  a1[6] = v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)a1 + v14 + 56) & ~v14;
  v16 = ((unint64_t)a2 + v14 + 56) & ~v14;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  swift_retain();
  v17(v15, v16, v12);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(void **)v20;
  if (*(_QWORD *)v20 < 0xFFFFFFFFuLL)
  {
    v29 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v29;
  }
  else
  {
    *(_QWORD *)v19 = v21;
    v22 = *(void **)(v20 + 8);
    *(_QWORD *)(v19 + 8) = v22;
    v23 = *(void **)(v20 + 16);
    *(_QWORD *)(v19 + 16) = v23;
    v24 = *(void **)(v20 + 24);
    *(_QWORD *)(v19 + 24) = v24;
    v25 = v21;
    v26 = v22;
    v27 = v23;
    v28 = v24;
  }
  return a1;
}

_QWORD *assignWithCopy for Stepper(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  __int128 v39;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = a2[1];
  if (a1[1])
  {
    if (v6)
    {
      v7 = a2[2];
      a1[1] = v6;
      a1[2] = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    v8 = a2[2];
    a1[1] = v6;
    a1[2] = v8;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  v9 = a2[3];
  if (a1[3])
  {
    if (v9)
    {
      v10 = a2[4];
      a1[3] = v9;
      a1[4] = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = a2[4];
    a1[3] = v9;
    a1[4] = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
LABEL_15:
  v12 = a2[6];
  a1[5] = a2[5];
  a1[6] = v12;
  swift_retain();
  swift_release();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)a1 + v14 + 56) & ~v14;
  v16 = ((unint64_t)a2 + v14 + 56) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64) + 7;
  v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(void **)v18;
  v21 = *(void **)v19;
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v21 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v18 = v21;
      v32 = *(void **)(v19 + 8);
      *(_QWORD *)(v18 + 8) = v32;
      v33 = *(void **)(v19 + 16);
      *(_QWORD *)(v18 + 16) = v33;
      v34 = *(void **)(v19 + 24);
      *(_QWORD *)(v18 + 24) = v34;
      v35 = v21;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      return a1;
    }
LABEL_21:
    v39 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v39;
    return a1;
  }
  if ((unint64_t)v21 < 0xFFFFFFFF)
  {

    goto LABEL_21;
  }
  *(_QWORD *)v18 = v21;
  v22 = v21;

  v23 = *(void **)(v18 + 8);
  v24 = *(void **)(v19 + 8);
  *(_QWORD *)(v18 + 8) = v24;
  v25 = v24;

  v26 = *(void **)(v18 + 16);
  v27 = *(void **)(v19 + 16);
  *(_QWORD *)(v18 + 16) = v27;
  v28 = v27;

  v29 = *(void **)(v18 + 24);
  v30 = *(void **)(v19 + 24);
  *(_QWORD *)(v18 + 24) = v30;
  v31 = v30;

  return a1;
}

uint64_t initializeWithTake for Stepper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 56 + a1) & ~v6;
  v8 = (v6 + 56 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  return a1;
}

uint64_t assignWithTake for Stepper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 56 + a1) & ~v13;
  v15 = (v13 + 56 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(void **)v17;
  if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
  {
LABEL_19:
    v23 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v23;
    return a1;
  }
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {

    goto LABEL_19;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;

  v20 = *(void **)(v17 + 8);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);

  v21 = *(void **)(v17 + 16);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);

  v22 = *(void **)(v17 + 24);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for Stepper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 56) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 56) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1879FD344 + 4 * byte_187C7A678[v10]))();
  }
}

void storeEnumTagSinglePayload for Stepper(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 56) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 56) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 56) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1879FD4CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879FD548);
}

void sub_1879FD4D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879FD4DCLL);
  JUMPOUT(0x1879FD548);
}

void sub_1879FD4F0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879FD548);
}

void sub_1879FD4F8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879FD548);
}

void sub_1879FD500(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x1879FD50CLL);
    if (a2 < 0)
      JUMPOUT(0x1879FD530);
    *(_QWORD *)(v3 + 40) = (a2 - 1);
  }
  JUMPOUT(0x1879FD548);
}

uint64_t type metadata accessor for Stepper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Stepper);
}

void sub_1879FD56C()
{
  lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1879FD5A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[12];

  v0 = type metadata accessor for ModifiedContent();
  v1 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = &protocol witness table for AccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

uint64_t partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t objectdestroy_12Tm_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v4 + *(int *)(v2 + 32), v1);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t (*a1)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)v1 + 2);
  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v6 = *(_QWORD *)(type metadata accessor for Binding() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return a1(&v1[v7], &v1[(v7 + v8 + v9) & ~v9], v2, v3, v4, v5);
}

uint64_t partial apply for closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  type metadata accessor for Binding();
  type metadata accessor for ClosedRange();
  return closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)();
}

uint64_t objectdestroy_18Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = type metadata accessor for ClosedRange();
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v5 + v7) & ~v7;
  swift_release();
  swift_release();
  v9 = v0 + v4 + *(int *)(v2 + 32);
  v10 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v10(v9, v1);
  v10(v0 + v8, v1);
  v10(v0 + v8 + *(int *)(v6 + 36), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  type metadata accessor for Binding();
  type metadata accessor for ClosedRange();
  return specialized Binding.wrappedValue.setter();
}

uint64_t partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t objectdestroy_24Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, uint64_t);
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v15 = type metadata accessor for ClosedRange();
  v6 = *(_QWORD *)(v15 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = (v7 + v8 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  swift_release();
  swift_release();
  v12 = v0 + v4 + *(int *)(v2 + 32);
  v13 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v13(v12, v1);
  v13(v0 + v7, v1);
  v13(v0 + v7 + *(int *)(v15 + 36), v1);
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v11, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t (*a1)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)v1 + 2);
  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v6 = *(_QWORD *)(type metadata accessor for Binding() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for ClosedRange() - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return a1(&v1[v7], &v1[v10], &v1[(v10 + v11 + v12) & ~v12], v2, v3, v4, v5);
}

uint64_t _SegmentedControl.init(configuration:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  uint64_t v33;

  v31[3] = a3;
  v32 = a2;
  v33 = a7;
  v31[1] = a5;
  MEMORY[0x1E0C80A78](a1, a2);
  v31[2] = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PickerStyleConfiguration(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v31 - v16;
  v19 = type metadata accessor for _SegmentedControlContainer(0, a4, a6, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v31 - v21;
  v23 = type metadata accessor for _VariadicView.Tree();
  v24 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v28 = (char *)v31 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a1, v13, v26);
  v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v22, v17, v13);
  v32(v29);
  _VariadicView.Tree.init(root:content:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v33, v28, v23);
}

void static _SegmentedControl._makeView(view:inputs:)()
{
  type metadata accessor for _SegmentedControl();
}

uint64_t sub_1879FDEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  v3 = type metadata accessor for _SegmentedControlContainer(255, v1, v0, v2);
  type metadata accessor for _VariadicView.Tree();
  _GraphValue.subscript.getter();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControlContainer<A>, v3);
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

void closure #1 in static _SegmentedControl._makeView(view:inputs:)()
{
  type metadata accessor for _SegmentedControl();
}

uint64_t sub_1879FDFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v10[2] = a1;
  type metadata accessor for _SegmentedControlContainer(255, v5, v4, a4);
  v11 = type metadata accessor for _VariadicView.Tree();
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v12;
}

void partial apply for closure #1 in static _SegmentedControl._makeView(view:inputs:)()
{
  closure #1 in static _SegmentedControl._makeView(view:inputs:)();
}

void type metadata accessor for _SegmentedControl()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for _SegmentedControlContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _SegmentedControlContainer);
}

void protocol witness for static View._makeView(view:inputs:) in conformance _SegmentedControl<A, B>()
{
  static _SegmentedControl._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _SegmentedControl<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControl<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _SegmentedControl<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControl<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _SegmentedControl<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControl<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t _SegmentedControlContainer.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[56];
  _BYTE v10[56];

  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v10);
  v6 = type metadata accessor for PickerStyleConfiguration(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v5);
  v7 = PickerStyleConfiguration.selectedBoundIndices(children:)((uint64_t)v10, v6);
  outlined init with copy of SubviewsCollection((uint64_t)v10, (uint64_t)v9);
  ResolvedSegmentedControl.init(selectedIndices:segments:)(v7, (uint64_t)v9, a3);
  return outlined destroy of SubviewsCollection((uint64_t)v10);
}

double ResolvedSegmentedControl.init(selectedIndices:segments:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double result;
  __int128 v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)(a3 + 96) = swift_getKeyPath();
  *(_BYTE *)(a3 + 104) = 0;
  outlined init with copy of SubviewsCollection(a2, a3);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  v6 = static MainActor.shared.getter();
  v7 = (_QWORD *)swift_allocObject();
  v8 = MEMORY[0x1E0DF06E8];
  v7[2] = v6;
  v7[3] = v8;
  v7[4] = a1;
  swift_bridgeObjectRetain();
  v9 = static MainActor.shared.getter();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v9;
  v10[3] = v8;
  v10[4] = a1;
  type metadata accessor for Int?();
  Binding.init(get:set:)();
  outlined destroy of SubviewsCollection(a2);
  result = *(double *)&v12;
  *(_OWORD *)(a3 + 56) = v12;
  *(_QWORD *)(a3 + 72) = v13;
  *(_BYTE *)(a3 + 80) = v14;
  *(_QWORD *)(a3 + 88) = a1;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _SegmentedControlContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControlContainer<A>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void closure #1 in ResolvedSegmentedControl.init(selectedIndices:segments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a3 + 16))
  {
    type metadata accessor for Binding<Int?>();
    MEMORY[0x18D75B9C8](v3, v4, v5, v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #2 in ResolvedSegmentedControl.init(selectedIndices:segments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = a4 + 40;
    do
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      v6 += 32;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ResolvedSegmentedControl@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_BYTE *)(v1 + 104);
  v4 = swift_retain();
  v5 = specialized Environment.wrappedValue.getter(v4, v3);
  swift_release();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v1);
  result = swift_release();
  *a1 = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for _SegmentedControlContainer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v7 + 8) & ~v7);
    }
    else
    {
      v15 = *v14;
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1879FE584 + 4 * byte_187C7A6F0[v12]))();
  }
}

void storeEnumTagSinglePayload for _SegmentedControlContainer(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1879FE74C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879FE7BCLL);
}

void sub_1879FE754(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879FE75CLL);
  JUMPOUT(0x1879FE7BCLL);
}

void sub_1879FE774()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879FE7BCLL);
}

void sub_1879FE77C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879FE7BCLL);
}

void sub_1879FE784(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1879FE7B8);
      JUMPOUT(0x1879FE7B4);
    }
    JUMPOUT(0x1879FE790);
  }
  JUMPOUT(0x1879FE7BCLL);
}

uint64_t type metadata completion function for _SegmentedControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for _SegmentedControlContainer(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  result = type metadata accessor for _VariadicView.Tree();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _SegmentedControl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  void (*v25)(unint64_t, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 9;
  v12 = (v11 & ~v10) + *(_QWORD *)(v9 + 64);
  v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v14 = *a2;
  *a1 = *a2;
  if ((v10 | v7) > 7 || v13 != 0 || v12 > 0x18)
  {
    a1 = (uint64_t *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
    swift_retain();
  }
  else
  {
    v27 = v4;
    v28 = ~v10;
    v18 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = ((unint64_t)v18 + v7 + 8) & ~v7;
    v21 = ((unint64_t)v19 + v7 + 8) & ~v7;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v22(v20, v21, v5);
    v23 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
    v25 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v25(((unint64_t)a1 + v11) & v28, ((unint64_t)a2 + v11) & v28, v27);
  }
  return a1;
}

uint64_t destroy for _SegmentedControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64) + 7;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + (v7 & 0xFFFFFFFFFFFFFFF8) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *initializeWithCopy for _SegmentedControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v13(v11, v12, v8);
  v14 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + 7;
  v15 = ((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + v19 + 9;
  v21 = ((unint64_t)a1 + v20) & ~v19;
  v22 = ((unint64_t)a2 + v20) & ~v19;
  v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v17);
  return a1;
}

_QWORD *assignWithCopy for _SegmentedControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))(((unint64_t)a1 + (v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)a2 + (v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

_QWORD *initializeWithTake for _SegmentedControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + v9 + 8) & ~v9, ((unint64_t)v7 + v9 + 8) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))(((unint64_t)a1 + (v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)a2 + (v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

_QWORD *assignWithTake for _SegmentedControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(((unint64_t)a1 + (v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)a2 + (v10 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _SegmentedControl(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((*(_QWORD *)(v5 + 64) + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 9;
  v14 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_27;
  v15 = (v13 & ~v12) + *(_QWORD *)(v8 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_27:
      if (v7 < v9)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v8 + 48))((v13 + a1) & ~v12, *(unsigned int *)(v8 + 84), v4);
      v22 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v22 + v11 + 8) & ~v11);
      v23 = *v22;
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_27;
LABEL_18:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if (!(_DWORD)v15)
    return v10 + v20 + 1;
  if (v15 <= 3)
    v21 = (v13 & ~(_DWORD)v12) + *(_DWORD *)(v8 + 64);
  else
    v21 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879FEFBC + 4 * byte_187C7A6FF[v21 - 1]))();
}

void storeEnumTagSinglePayload for _SegmentedControl(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 9
       + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

_UNKNOWN **base witness table accessor for View in _SegmentedControl<A, B>()
{
  return &protocol witness table for _SegmentedControl<A, B>;
}

uint64_t instantiation function for generic protocol witness table for _SegmentedControlContainer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControlContainer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in _SegmentedControlContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1879FF364@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.segmentedControlStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1879FF39C()
{
  swift_retain();
  specialized EnvironmentValues.subscript.setter();
  return swift_release();
}

void partial apply for closure #1 in ResolvedSegmentedControl.init(selectedIndices:segments:)()
{
  uint64_t *v0;

  closure #1 in ResolvedSegmentedControl.init(selectedIndices:segments:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #2 in ResolvedSegmentedControl.init(selectedIndices:segments:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in ResolvedSegmentedControl.init(selectedIndices:segments:)(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for ResolvedSegmentedControl()
{
  return &type metadata for ResolvedSegmentedControl;
}

unint64_t lazy protocol witness table accessor for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl;
  if (!lazy protocol witness table cache variable for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSegmentedControl, &type metadata for ResolvedSegmentedControl);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSegmentedControl()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1879FF454()
{
  return MEMORY[0x1E0CE7508];
}

uint64_t Shape.fillShadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v7;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v15 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v7, a2, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v18, a2);
  v20 = a4 + *(int *)(type metadata accessor for _ShadowView(0, a2, a3, v19) + 36);
  *(_QWORD *)v20 = a1;
  *(double *)(v20 + 8) = a5;
  *(double *)(v20 + 16) = a6;
  *(double *)(v20 + 24) = a7;
  return swift_retain();
}

uint64_t _ShadowView.init(shape:effect:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _ShadowView(0, a3, a4, v15);
  v17 = a5 + *(int *)(result + 36);
  *(_QWORD *)v17 = a2;
  *(double *)(v17 + 8) = a6;
  *(double *)(v17 + 16) = a7;
  *(double *)(v17 + 24) = a8;
  return result;
}

uint64_t type metadata accessor for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ShadowView);
}

uint64_t _ShadowView.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ShadowView.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ShadowView.shape.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ShadowView.effect.getter(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v2 = *(double *)(v1 + *(int *)(a1 + 36) + 8);
  swift_retain();
  return v2;
}

uint64_t _ShadowView.effect.setter(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  v10 = v5 + *(int *)(a2 + 36);
  result = swift_release();
  *(_QWORD *)v10 = a1;
  *(double *)(v10 + 8) = a3;
  *(double *)(v10 + 16) = a4;
  *(double *)(v10 + 24) = a5;
  return result;
}

uint64_t (*_ShadowView.effect.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ShadowView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _ShadowView(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  type metadata accessor for PropertyList.Tracker();
  PropertyList.Tracker.__allocating_init()();
  type metadata accessor for ResolvedShadowView(0, a3, a4, v4);
  v6 = type metadata accessor for ShadowChild(0, a3, a4, v5);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowChild<A>, v6);
  _GraphValue.init<A>(_:)();
  static View.makeDebuggableView(view:inputs:)();
  return swift_release();
}

uint64_t type metadata accessor for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedShadowView);
}

uint64_t type metadata accessor for ShadowChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShadowChild);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _ShadowView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _ShadowView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

_UNKNOWN **base witness table accessor for View in _ShadowView<A>()
{
  return &protocol witness table for _ShadowView<A>;
}

uint64_t type metadata completion function for _ShadowView()
{
  return type metadata completion function for DelaySource();
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShadowView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_retain();
  swift_release();
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

uint64_t initializeWithTake for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShadowView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1879FFC14 + 4 * byte_187C7A880[v10]))();
  }
}

void storeEnumTagSinglePayload for _ShadowView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1879FFD8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879FFE08);
}

void sub_1879FFD94(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879FFD9CLL);
  JUMPOUT(0x1879FFE08);
}

void sub_1879FFDDC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879FFE08);
}

void sub_1879FFDE4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879FFE08);
}

uint64_t sub_1879FFDEC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1879FFE08);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1879FFE04);
    JUMPOUT(0x1879FFDF8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

_UNKNOWN **sub_1879FFE20()
{
  return &protocol witness table for _ShadowView<A>;
}

uint64_t type metadata completion function for ResolvedShadowView()
{
  return type metadata completion function for DelaySource();
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedShadowView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 45 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = *(_OWORD *)((char *)v10 + 29);
    v12 = v10[1];
    v13 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v10;
    v13[1] = v12;
    *(_OWORD *)((char *)v13 + 29) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 29);
  v10 = v8[1];
  *v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 29) = v9;
  return a1;
}

uint64_t assignWithCopy for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 44) = *(_BYTE *)(v8 + 44);
  return a1;
}

uint64_t initializeWithTake for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 29);
  v10 = v8[1];
  *v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 29) = v9;
  return a1;
}

uint64_t assignWithTake for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 44) = *(_BYTE *)(v8 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedShadowView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 < a2 && *((_BYTE *)a1 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 45))
    return v5 + *a1 + 1;
  if (v5)
    return (*(uint64_t (**)(void))(v4 + 48))();
  else
    return 0;
}

void storeEnumTagSinglePayload for ResolvedShadowView(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 45;
  if (v7 >= a2)
  {
    if (v7 < a3)
      a1[v8] = 0;
    if ((_DWORD)a2)
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 56))(a1, a2, v7);
  }
  else
  {
    v9 = ~(_DWORD)v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v9;
    if (v7 < a3)
      a1[v8] = 1;
  }
}

uint64_t ShadowChild.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Value;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v57 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v56 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v4;
  v5 = *(_QWORD *)(v4 + 24);
  v64 = type metadata accessor for ResolvedShadowView(0, v2, v5, v6);
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v7);
  v59 = (char *)&v53 - v8;
  v58 = v2;
  v10 = type metadata accessor for _ShadowView(255, v2, v5, v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v63 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v53 - v17;
  v65 = v19;
  v20 = *(int *)(v19 + 48);
  Value = AGGraphGetValue();
  v23 = v22;
  v24 = *(_QWORD *)(v10 - 8);
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v55(v18, Value, v10);
  v25 = v23 & 1;
  v18[v20] = v23 & 1;
  v26 = (uint64_t *)AGGraphGetValue();
  v28 = *v26;
  v62 = v26[1];
  if ((v23 & 1) != 0 || (v29 = v27, !AGGraphGetOutputValue()))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    if ((v29 & 1) == 0
      || (swift_retain(), v30 = PropertyList.Tracker.hasDifferentUsedValues(_:)(), swift_release(), (v30 & 1) == 0))
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v18, v65);
      swift_release();
      return swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  v32 = *(int *)(v65 + 48);
  v33 = v65;
  v34 = v28;
  v35 = v25;
  v36 = (void (*)(char *, char *, uint64_t))v55;
  v55(v14, (uint64_t)v18, v10);
  v14[v32] = v35;
  v37 = *(void (**)(char *, uint64_t))(v24 + 8);
  swift_retain();
  v37(v14, v10);
  v54 = v34;
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v72 = v74;
  v73 = v75;
  _ShadowEffect.resolve(in:)();
  swift_release();
  swift_release();
  swift_release();
  v53 = v68;
  v38 = v69;
  v39 = v70;
  LOBYTE(v32) = v71;
  v40 = v66;
  v41 = v67;
  v42 = *(int *)(v33 + 48);
  v36(v14, v18, v10);
  v14[v42] = v35;
  v43 = v57;
  v44 = v56;
  v45 = v58;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v56, v14, v58);
  v37(v14, v10);
  v46 = (uint64_t)v59;
  v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v43 + 32))(v59, v44, v45);
  v48 = v64;
  v49 = v46 + *(int *)(v64 + 36);
  *(_QWORD *)v49 = v40;
  *(_QWORD *)(v49 + 8) = v41;
  *(_OWORD *)(v49 + 16) = v53;
  *(_QWORD *)(v49 + 32) = v38;
  *(_DWORD *)(v49 + 40) = v39;
  *(_BYTE *)(v49 + 44) = v32;
  v51 = MEMORY[0x1E0C80A78](v47, v50);
  *((_QWORD *)&v53 - 2) = v60;
  *((_QWORD *)&v53 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowChild<A>, v51);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v46, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v53 - 2), v48, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v52);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v46, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v18, v65);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance ShadowChild<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvedShadowView(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ShadowChild<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowChild<A>, a1);
  return static AsyncAttribute.flags.getter();
}

void static ResolvedShadowView._makeView(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32[3];

  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v19 = *(_DWORD *)(a2 + 80);
  v14 = type metadata accessor for ResolvedShadowView(0, a3, a4, a4);
  v32[0] = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v13;
  v27 = v12;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>, v14);
  v17 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)&v28 = *(_QWORD *)(a2 + 40);
  v18 = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 72);
  static Animatable.makeAnimatable(value:inputs:)();
  _GraphValue.init(_:)();
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v13;
  v27 = v12;
  v28 = v17;
  v29 = v18;
  v30 = v15;
  v31 = v19;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>, v14);
  static SizeDependentLeafView.makeLeafView(view:inputs:)(v32, &v21, v14, v16, a5);
}

double ResolvedShadowView.content(size:)(uint64_t *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v13[2];
  char v14;

  (*(void (**)(_OWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a2 + 24) + 24))(v13, *(_QWORD *)(a2 + 16), 0.0, 0.0, a3, a4);
  v7 = swift_allocObject();
  v8 = v13[1];
  *(_OWORD *)(v7 + 16) = v13[0];
  *(_OWORD *)(v7 + 32) = v8;
  *(_BYTE *)(v7 + 48) = v14;
  v9 = v4 + *(int *)(a2 + 36);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)v9;
  LODWORD(v8) = *(_DWORD *)(v9 + 40);
  LOBYTE(v9) = *(_BYTE *)(v9 + 44);
  *(_OWORD *)(v7 + 72) = v11;
  *(_QWORD *)(v7 + 88) = v10;
  *(_DWORD *)(v7 + 96) = v8;
  *(_BYTE *)(v7 + 100) = v9;
  *a1 = v7 | 0x5000000000000000;
  return 0.0;
}

uint64_t ResolvedShadowView.animatableData.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  double v7;
  __int128 *v8;
  uint64_t v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 24))(v3, v4, v7);
  v8 = (__int128 *)(v1 + *(int *)(a1 + 36));
  v9 = *((_QWORD *)v8 + 4);
  v10 = *((_DWORD *)v8 + 10);
  v11 = *((_BYTE *)v8 + 44);
  v12 = v8[1];
  v14 = *v8;
  v15 = v12;
  v16 = v9;
  v17 = v10;
  v18 = v11;
  ResolvedShadowStyle.animatableData.getter();
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  return AnimatablePair.init(_:_:)();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance ResolvedShadowView<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  specialized ResolvedShadowView.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowView<A>(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  v8 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v8;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[7] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[8] = malloc(v13);
  v5[9] = malloc(v13);
  ResolvedShadowView.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowView<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowView<A>(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), v4, v5);
    specialized ResolvedShadowView.animatableData.setter((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    specialized ResolvedShadowView.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72), v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance ResolvedShadowView<A>@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  return result;
}

_UNKNOWN **base witness table accessor for View in ResolvedShadowView<A>()
{
  return &protocol witness table for ResolvedShadowView<A>;
}

uint64_t instantiation function for generic protocol witness table for ResolvedShadowView<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>);
  a1[2] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>, a2);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>, a2);
  a1[3] = result;
  return result;
}

void associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ResolvedShadowView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ShadowChild<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for static View._makeView(view:inputs:) in conformance ResolvedShadowView<A>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  static ResolvedShadowView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedShadowView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedShadowView<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ResolvedShadowView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedShadowView<A>, a1);
  specialized PrimitiveView.body.getter();
}

void type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255, &lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>);
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>();
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
    v0 = type metadata accessor for AnimatablePair();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  }
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>(uint64_t a1)
{
  type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(a1, &lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, Float>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Float, Float>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>);
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = type metadata accessor for AnimatablePair();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for AnimatablePair<Float, Float>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<Float, Float>)
  {
    v0 = type metadata accessor for AnimatablePair();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, Float>);
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, Float>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>);
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255, &lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE26B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE26B8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized ResolvedShadowView.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  _BYTE v13[24];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v7 = &v13[-v6];
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  v9 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  *(_QWORD *)&v16 = AssociatedTypeWitness;
  *((_QWORD *)&v16 + 1) = v9;
  *(_QWORD *)&v17 = AssociatedConformanceWitness;
  *((_QWORD *)&v17 + 1) = v11;
  type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter();
  v16 = *(_OWORD *)&v13[8];
  v17 = v14;
  v18 = v15;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 32))(v7, v2, v3);
  return ResolvedShadowStyle.animatableData.setter();
}

uint64_t sub_187A01278()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t EnvironmentValues.tableColumnHeadersVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.tableColumnHeadersVisibility : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tableColumnHeadersVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tableColumnHeadersVisibility : EnvironmentValues()
{
  return EnvironmentValues.tableColumnHeadersVisibility.setter();
}

uint64_t EnvironmentValues.tableColumnHeadersVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_187A014D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tableColumnHeadersVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A01508()
{
  return EnvironmentValues.tableColumnHeadersVisibility.setter();
}

void View.tableHeaderBezelVisibility(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.tableColumnHeaders(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_187A015B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187A0161C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Visibility?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>(255, &lazy cache variable for type metadata for Visibility?, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility?>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for Visibility);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>);
  }
}

void *type metadata accessor for TableColumnHeadersVisibilityKey()
{
  return &unk_1E1AFFD20;
}

objc_class *FetchedResults.init(_:)@<X0>(objc_class *a1@<X0>, NSArray *a2@<X8>)
{
  void *v4;
  id v5;
  void *v6;
  NSArray v7;
  objc_class *result;

  v4 = *(void **)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x80));
  if (v4 && (v5 = objc_msgSend(v4, sel_fetchedObjects)) != 0)
  {
    v6 = v5;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
    result = (objc_class *)swift_bridgeObjectRelease();
  }
  else
  {
    result = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D20]), sel_init);
    v7.super.isa = result;
  }
  a2->super.isa = v7.super.isa;
  a2[1].super.isa = a1;
  return result;
}

void FetchedResults.nsSortDescriptors.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    v1 = DeferredFetchRequest.result.getter();
    swift_release();
    v2 = objc_msgSend(v1, sel_sortDescriptors);

    if (v2)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void key path setter for FetchedResults.nsSortDescriptors : <A>FetchedResults<A>()
{
  swift_bridgeObjectRetain();
  FetchedResults.nsSortDescriptors.setter();
}

void FetchedResults.nsSortDescriptors.setter()
{
  uint64_t v0;
  id v1;
  Class isa;
  NSManagedObjectContext_optional v3;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    v1 = DeferredFetchRequest.result.getter();
    swift_release();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setSortDescriptors_, isa);

    v3.value.super.isa = 0;
    FetchController.update(in:)(v3);
  }
  else
  {
    __break(1u);
  }
}

void (*FetchedResults.nsSortDescriptors.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = v2[1];
  a1[1] = a2;
  a1[2] = v4;
  a1[3] = v5;
  FetchedResults.nsSortDescriptors.getter();
  *a1 = v6;
  return FetchedResults.nsSortDescriptors.modify;
}

void FetchedResults.nsSortDescriptors.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    FetchedResults.nsSortDescriptors.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    FetchedResults.nsSortDescriptors.setter();
  }
}

void FetchedResults.nsPredicate.getter()
{
  uint64_t v0;
  id v1;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    v1 = DeferredFetchRequest.result.getter();
    swift_release();
    objc_msgSend(v1, sel_predicate);

  }
  else
  {
    __break(1u);
  }
}

void key path setter for FetchedResults.nsPredicate : <A>FetchedResults<A>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  v4 = *a1;
  type metadata accessor for FetchedResults(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = v4;
  specialized FetchedResults.nsPredicate.setter((uint64_t)v4);

}

void FetchedResults.nsPredicate.setter(void *a1)
{
  specialized FetchedResults.nsPredicate.setter((uint64_t)a1);

}

void (*FetchedResults.nsPredicate.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = v2[1];
  a1[1] = a2;
  a1[2] = v4;
  a1[3] = v5;
  FetchedResults.nsPredicate.getter();
  *a1 = v6;
  return FetchedResults.nsPredicate.modify;
}

void FetchedResults.nsPredicate.modify(uint64_t *a1, char a2)
{
  id v2;
  id v3;

  v3 = (id)*a1;
  if ((a2 & 1) != 0)
  {
    v2 = v3;
    specialized FetchedResults.nsPredicate.setter((uint64_t)v3);

  }
  else
  {
    specialized FetchedResults.nsPredicate.setter(*a1);

  }
}

uint64_t FetchedResults.startIndex.getter()
{
  return 0;
}

id FetchedResults.endIndex.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_count);
}

uint64_t FetchedResults.subscript.getter(uint64_t a1)
{
  id *v1;
  id v2;
  uint64_t v4;

  v2 = objc_msgSend(*v1, sel_objectAtIndex_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  return v4;
}

id FetchRequest.managedObjectContext.getter()
{
  uint64_t v0;
  void *v1;
  char v2;
  id v3;

  v1 = *(void **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<UISceneSession?>.Content(v1, v2);
  v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<UISceneSession?>.Content(v1, v2);
  return v3;
}

uint64_t property wrapper backing initializer of FetchRequest.controller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Controller;

  v5 = type metadata accessor for FetchedResults(255, a3, a3, a4);
  Controller = type metadata accessor for FetchController(0, MEMORY[0x1E0DEE9C0] + 8, a3, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchController<A, B, C>, Controller);
  return StateObject.init(wrappedValue:)();
}

uint64_t FetchRequest.controller.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Controller;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for FetchedResults(255, v4, a3, a4);
  Controller = type metadata accessor for FetchController(0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchController<A, B, C>, Controller);
  return StateObject.wrappedValue.getter();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance FetchedResults<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

id protocol witness for Collection.endIndex.getter in conformance FetchedResults<A>@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = FetchedResults.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance FetchedResults<A>(uint64_t **a1, uint64_t *a2))(_QWORD *a1)
{
  uint64_t *v4;
  uint64_t (*v5)();
  uint64_t v6;

  v4 = (uint64_t *)malloc(0x30uLL);
  *a1 = v4;
  v5 = FetchedResults.subscript.read(v4, *a2);
  v4[4] = v6;
  v4[5] = (uint64_t)v5;
  return protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>;
}

uint64_t (*FetchedResults.subscript.read(uint64_t *a1, uint64_t a2))()
{
  *a1 = FetchedResults.subscript.getter(a2);
  return Array.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.indices.getter in conformance FetchedResults<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t protocol witness for Collection.index(after:) in conformance FetchedResults<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance FetchedResults<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance FetchedResults<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance FetchedResults<A>(uint64_t a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>, a1);
  v4 = specialized Collection._copyToContiguousArray()(v1, a1, v3);
  v5 = *v1;

  return v4;
}

id implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for FetchedResults(255, a1, a3, a4);
  type metadata accessor for FetchController(0, MEMORY[0x1E0DEE9C0] + 8, a1, v5);
  return specialized FetchController.__allocating_init(_:)((uint64_t)partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller, 0);
}

uint64_t property wrapper backing initializer of FetchRequest.results(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FetchedResults(255, a2, a3, a4);
  type metadata accessor for Optional();
  return State.init(wrappedValue:)();
}

uint64_t FetchRequest.results.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FetchedResults(255, *(_QWORD *)(a1 + 16), a3, a4);
  type metadata accessor for Optional();
  type metadata accessor for State();
  return State.wrappedValue.getter();
}

uint64_t FetchRequest.$results.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FetchedResults(255, *(_QWORD *)(a1 + 16), a3, a4);
  type metadata accessor for Optional();
  type metadata accessor for State();
  return State.projectedValue.getter();
}

void FetchRequest.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v8;
  void *v9;
  void *v10;

  FetchRequest.results.getter(a1, a2, a3, a4);
  outlined consume of FetchedResults<A>?<A>(v9, v10);
  v8 = (id)FetchRequest.controller.getter(a1, v4, v5, v6);
  FetchController.results.getter();

}

uint64_t FetchRequest.Configuration.nsSortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FetchRequest.Configuration.nsSortDescriptors.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FetchRequest.Configuration.nsSortDescriptors.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void *FetchRequest.Configuration.nsPredicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void FetchRequest.Configuration.nsPredicate.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*FetchRequest.Configuration.nsPredicate.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FetchRequest.projectedValue.getter(uint64_t a1)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = v1[3];
  v20 = v1[2];
  v21 = v3;
  v22 = v1[4];
  v4 = v1[1];
  v18 = *v1;
  v19 = v4;
  type metadata accessor for MainActor();
  outlined retain of FetchRequest<A>((uint64_t)&v18);
  v5 = static MainActor.shared.getter();
  v6 = swift_allocObject();
  v7 = v18;
  *(_OWORD *)(v6 + 56) = v19;
  v8 = v21;
  *(_OWORD *)(v6 + 72) = v20;
  v9 = MEMORY[0x1E0DF06E8];
  *(_OWORD *)(v6 + 88) = v8;
  *(_OWORD *)(v6 + 104) = v22;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v9;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 40) = v7;
  outlined retain of FetchRequest<A>((uint64_t)&v18);
  v11 = static MainActor.shared.getter();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v9;
  *(_QWORD *)(v12 + 32) = v10;
  v13 = v18;
  *(_OWORD *)(v12 + 56) = v19;
  v14 = v21;
  *(_OWORD *)(v12 + 72) = v20;
  *(_OWORD *)(v12 + 88) = v14;
  *(_OWORD *)(v12 + 104) = v22;
  *(_OWORD *)(v12 + 40) = v13;
  type metadata accessor for FetchRequest.Configuration(0, v10, v15, v16);
  return Binding.init(get:set:)();
}

void closure #1 in FetchRequest.projectedValue.getter(uint64_t *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v6 = DeferredFetchRequest.result.getter();
  v2 = objc_msgSend(v6, sel_sortDescriptors);
  if (v2)
  {
    v3 = v2;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = objc_msgSend(v6, sel_predicate);
    *a1 = v4;
    a1[1] = (uint64_t)v5;

  }
  else
  {
    __break(1u);
  }
}

void closure #2 in FetchRequest.projectedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t Request;
  id v13;

  v8 = *(_QWORD *)(a1 + 8);
  v13 = DeferredFetchRequest.result.getter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, sel_setSortDescriptors_, isa);

  objc_msgSend(v13, sel_setPredicate_, v8);
  Request = type metadata accessor for FetchRequest(0, a6, v10, v11);
  FetchRequest.update(_:)(a2, Request);

}

void FetchRequest.update(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Class isa;
  void *v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  void *v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  NSManagedObjectContext_optional v36;

  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = FetchRequest.managedObjectContext.getter();
  v8 = objc_msgSend(v7, sel_persistentStoreCoordinator);

  if (v8)
  {
    v30 = (_QWORD *)FetchRequest.controller.getter(a2, v9, v10, v11);
    LOBYTE(v34) = v4;
    *(_QWORD *)&v35 = v5;
    *((_QWORD *)&v35 + 1) = v6;
    FetchRequest.$results.getter(a2, v12, v13, v14);
    type metadata accessor for FetchedResults(255, *(_QWORD *)(a2 + 16), v15, v16);
    type metadata accessor for Optional();
    type metadata accessor for Binding();
    Binding.transaction(_:)();
    swift_release();
    swift_release();
    outlined consume of FetchedResults<A>?<A>(v32, v33);
    v17 = (_QWORD *)((char *)v30 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v30) + 0x88));
    v18 = *v17;
    v19 = v17[1];
    v20 = (void *)v17[2];
    v21 = (void *)v17[3];
    *v17 = v3;
    v17[1] = v34;
    *((_OWORD *)v17 + 1) = v35;
    outlined consume of Binding<FetchedResults<A>?>?<A>(v18, v19, v20, v21);

    v25 = (void *)FetchRequest.controller.getter(a2, v22, v23, v24);
    v36.value.super.isa = (Class)FetchRequest.managedObjectContext.getter();
    isa = v36.value.super.isa;
    FetchController.update(in:)(v36);

  }
  else
  {
    static os_log_type_t.fault.getter();
    v27 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_187BF9830;
    v29 = FetchRequest.managedObjectContext.getter();
    *(_QWORD *)(v28 + 56) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type NSManagedObjectContext and conformance NSObject();
    *(_QWORD *)(v28 + 32) = v29;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall FetchRequest.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  void *v20;
  void *v21;

  v5 = *(void **)v4;
  v19 = *(_BYTE *)(v4 + 8);
  v6 = *(void **)(v4 + 16);
  v17 = *(void **)(v4 + 24);
  v18 = v0;
  v7 = *(_BYTE *)(v4 + 32);
  v8 = *(void **)(v4 + 40);
  v9 = *(void **)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 72);
  v11 = (_QWORD *)FetchRequest.controller.getter(v0, v1, v2, v3);
  *(_QWORD *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x70)) = v10;
  swift_retain();

  swift_release();
  outlined copy of Environment<UISceneSession?>.Content(v5, v19);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>((uint64_t)v6, v17, v7);
  outlined copy of FetchedResults<A>?<A>(v8, v9);
  swift_retain();
  swift_retain();
  swift_retain();
  FetchRequest.$results.getter(v18, v12, v13, v14);
  type metadata accessor for FetchedResults(255, *(_QWORD *)(v18 + 16), v15, v16);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  Binding.transaction(_:)();
  swift_release();
  swift_release();
  outlined consume of FetchedResults<A>?<A>(v20, v21);
  swift_release();
  outlined consume of FetchedResults<A>?<A>(v6, v17);
  FetchRequest.update(_:)((uint64_t)v5, v18);
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v5, v19);
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>((uint64_t)v6, v17, v7);
  outlined consume of FetchedResults<A>?<A>(v8, v9);
  swift_release();
  swift_release();
  swift_release();
}

uint64_t static FetchRequest._propertyBehaviors.getter()
{
  return 2;
}

__n128 FetchRequest.init(entity:sortDescriptors:predicate:animation:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v11;
  uint64_t *v12;
  id v13;
  id v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __n128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  type metadata accessor for DeferredFetchRequest(0, a5, (uint64_t)a3, a4);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a5;
  v11[3] = a1;
  v11[4] = a2;
  v11[5] = a3;
  v12 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:), (uint64_t)v11);
  swift_retain();
  v13 = a1;
  v14 = a3;
  v15 = Transaction.init(animation:)();
  FetchRequest.init(deferredFetchRequest:transaction:)(v12, v15, (uint64_t)&v22);

  swift_release();
  v16 = v23;
  v17 = v25;
  v18 = v28;
  result = v24;
  v20 = v26;
  v21 = v27;
  *(_QWORD *)a6 = v22;
  *(_BYTE *)(a6 + 8) = v16;
  *(__n128 *)(a6 + 16) = result;
  *(_BYTE *)(a6 + 32) = v17;
  *(_OWORD *)(a6 + 40) = v20;
  *(_OWORD *)(a6 + 56) = v21;
  *(_QWORD *)(a6 + 72) = v18;
  return result;
}

id closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  Class isa;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  v5 = NSFetchRequest.__allocating_init()();
  objc_msgSend(v5, sel_setEntity_, a1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, sel_setSortDescriptors_, isa);

  objc_msgSend(v5, sel_setPredicate_, a3);
  return v5;
}

__n128 FetchRequest.init(deferredFetchRequest:transaction:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  _QWORD v19[2];
  __n128 v20;
  uint64_t v21;

  v6 = *a1;
  KeyPath = swift_getKeyPath();
  v8 = swift_allocObject();
  v9 = *(_QWORD *)(v6 + 80);
  *(_QWORD *)(v8 + 16) = v9;
  v11 = property wrapper backing initializer of FetchRequest.controller((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller, v8, v9, v10);
  v13 = v12;
  v15 = v14;
  v19[0] = 0;
  v19[1] = 0;
  property wrapper backing initializer of FetchRequest.results((uint64_t)v19, v9, v14, v16);
  v17 = v21;
  result = v20;
  *(_QWORD *)a3 = KeyPath;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v13;
  *(_BYTE *)(a3 + 32) = v15 & 1;
  *(__n128 *)(a3 + 40) = result;
  *(_QWORD *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 64) = a2;
  *(_QWORD *)(a3 + 72) = a1;
  return result;
}

__n128 FetchRequest.init(fetchRequest:animation:)@<Q0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  swift_retain();
  v6 = Transaction.init(animation:)();
  FetchRequest.init(fetchRequest:transaction:)(a1, v6, a2, (uint64_t)&v13);
  swift_release();
  v7 = v14;
  v8 = v16;
  v9 = v19;
  result = v15;
  v11 = v17;
  v12 = v18;
  *(_QWORD *)a3 = v13;
  *(_BYTE *)(a3 + 8) = v7;
  *(__n128 *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 56) = v12;
  *(_QWORD *)(a3 + 72) = v9;
  return result;
}

__n128 FetchRequest.init(fetchRequest:transaction:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  char v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;

  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  swift_dynamicCast();
  v8 = v27;
  type metadata accessor for DeferredFetchRequest(0, a3, v9, v10);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = v8;
  v12 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in FetchRequest.init(fetchRequest:transaction:), v11);
  v13 = v8;
  FetchRequest.init(deferredFetchRequest:transaction:)(v12, a2, (uint64_t)&v20);

  v14 = v21;
  v15 = v23;
  v16 = v26;
  result = v22;
  v18 = v24;
  v19 = v25;
  *(_QWORD *)a4 = v20;
  *(_BYTE *)(a4 + 8) = v14;
  *(__n128 *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 32) = v15;
  *(_OWORD *)(a4 + 40) = v18;
  *(_OWORD *)(a4 + 56) = v19;
  *(_QWORD *)(a4 + 72) = v16;
  return result;
}

__n128 FetchRequest<>.init(sortDescriptors:predicate:animation:)@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __n128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  type metadata accessor for DeferredFetchRequest(0, a4, a3, a4);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a4;
  v9[3] = a1;
  v9[4] = a2;
  v10 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:), (uint64_t)v9);
  swift_retain();
  v11 = a2;
  v12 = Transaction.init(animation:)();
  FetchRequest.init(deferredFetchRequest:transaction:)(v10, v12, (uint64_t)&v19);

  swift_release();
  v13 = v20;
  v14 = v22;
  v15 = v25;
  result = v21;
  v17 = v23;
  v18 = v24;
  *(_QWORD *)a5 = v19;
  *(_BYTE *)(a5 + 8) = v13;
  *(__n128 *)(a5 + 16) = result;
  *(_BYTE *)(a5 + 32) = v14;
  *(_OWORD *)(a5 + 40) = v17;
  *(_OWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 72) = v15;
  return result;
}

{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  _QWORD v20[4];
  uint64_t v21;
  char v22;
  __n128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v21 = a1;
  v20[2] = a4;
  type metadata accessor for SortDescriptor();
  v9 = type metadata accessor for Array();
  v10 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v9);
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:), (uint64_t)v20, v9, v10, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  swift_bridgeObjectRelease();
  FetchRequest<>.init(sortDescriptors:predicate:animation:)(v13, a2, a3, a4, (uint64_t)&v21);
  v14 = v22;
  v15 = v24;
  v16 = v27;
  result = v23;
  v18 = v25;
  v19 = v26;
  *(_QWORD *)a5 = v21;
  *(_BYTE *)(a5 + 8) = v14;
  *(__n128 *)(a5 + 16) = result;
  *(_BYTE *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 40) = v18;
  *(_OWORD *)(a5 + 56) = v19;
  *(_QWORD *)(a5 + 72) = v16;
  return result;
}

id closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  Class isa;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  v3 = NSFetchRequest.__allocating_init()();
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_entity);
  objc_msgSend(v3, sel_setEntity_, v4);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setSortDescriptors_, isa);

  objc_msgSend(v3, sel_setPredicate_, a2);
  return v3;
}

uint64_t FetchRequest.Configuration<>.sortDescriptors.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[5] = *v1;
  v9[2] = *(_QWORD *)(a1 + 16);
  type metadata accessor for [NSSortDescriptor]();
  v3 = v2;
  v4 = (char *)type metadata accessor for SortDescriptor();
  v5 = lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]();
  swift_bridgeObjectRetain();
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter, (uint64_t)v9, v3, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t key path setter for FetchRequest.Configuration<>.sortDescriptors : <A>FetchRequest<A>.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for FetchRequest.Configuration(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = swift_bridgeObjectRetain();
  return FetchRequest.Configuration<>.sortDescriptors.setter(v5, v4);
}

uint64_t FetchRequest.Configuration<>.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];

  v3 = v2;
  v10[5] = a1;
  v10[2] = *(_QWORD *)(a2 + 16);
  type metadata accessor for SortDescriptor();
  v4 = type metadata accessor for Array();
  v5 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v4);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.setter, (uint64_t)v10, v4, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v3 = v8;
  return result;
}

uint64_t closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for SortDescriptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v10 - v7;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  result = NSSortDescriptor.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t (*FetchRequest.Configuration<>.sortDescriptors.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = FetchRequest.Configuration<>.sortDescriptors.getter(a2);
  return FetchRequest.Configuration<>.sortDescriptors.modify;
}

uint64_t FetchRequest.Configuration<>.sortDescriptors.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if ((a2 & 1) == 0)
    return FetchRequest.Configuration<>.sortDescriptors.setter(*a1, v2);
  v3 = swift_bridgeObjectRetain();
  FetchRequest.Configuration<>.sortDescriptors.setter(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t FetchedResults<>.sortDescriptors.getter(uint64_t a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  __int128 v12;

  v12 = *v1;
  FetchedResults.nsSortDescriptors.getter();
  *(_QWORD *)&v12 = v3;
  v11[2] = *(_QWORD *)(a1 + 16);
  type metadata accessor for [NSSortDescriptor]();
  v5 = v4;
  v6 = (char *)type metadata accessor for SortDescriptor();
  v7 = lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]();
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchedResults<>.sortDescriptors.getter, (uint64_t)v11, v5, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  swift_bridgeObjectRelease();
  return v9;
}

void key path setter for FetchedResults<>.sortDescriptors : <A>FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for FetchedResults(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = swift_bridgeObjectRetain();
  FetchedResults<>.sortDescriptors.setter(v5, v4);
}

void FetchedResults<>.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];
  void *v13;
  id v14;

  v4 = *(void **)v2;
  v3 = *(void **)(v2 + 8);
  v13 = v4;
  v14 = v3;
  v12[5] = a1;
  v12[2] = *(_QWORD *)(a2 + 16);
  type metadata accessor for SortDescriptor();
  v5 = type metadata accessor for Array();
  v6 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  v7 = v4;
  v8 = v3;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v5);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:), (uint64_t)v12, v5, v6, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  swift_bridgeObjectRelease();
  FetchedResults.nsSortDescriptors.setter();
  v11 = v13;

}

uint64_t closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = type metadata accessor for SortDescriptor();
  v5 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v12 - v7;
  v9 = *a1;
  SortDescriptor.init<A>(_:comparing:)();
  v10 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, v4);
  __break(1u);
  return result;
}

void (*FetchedResults<>.sortDescriptors.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = v2[1];
  a1[1] = a2;
  a1[2] = v3;
  a1[3] = v4;
  *a1 = FetchedResults<>.sortDescriptors.getter(a2);
  return FetchedResults<>.sortDescriptors.modify;
}

void FetchedResults<>.sortDescriptors.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if ((a2 & 1) != 0)
  {
    v3 = swift_bridgeObjectRetain();
    FetchedResults<>.sortDescriptors.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    FetchedResults<>.sortDescriptors.setter(*a1, v2);
  }
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t result;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for Range();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v19 - v11;
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, a1, v4);
  v14(v8, a2, v4);
  if ((v13 & 1) == 0)
  {
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v18)(v12, v4);
    goto LABEL_5;
  }
  v15 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v16)(v12, v4);
  if ((v15 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t, uint64_t);

  v25 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - v19;
  v21 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v22 = v25(v20, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

void specialized FetchedResults.nsPredicate.setter(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSManagedObjectContext_optional v4;

  if (*(_QWORD *)(*(_QWORD *)(v1 + 8) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + 8)) + 0x70)))
  {
    swift_retain();
    v3 = DeferredFetchRequest.result.getter();
    swift_release();
    objc_msgSend(v3, sel_setPredicate_, a1);

    v4.value.super.isa = 0;
    FetchController.update(in:)(v4);
  }
  else
  {
    __break(1u);
  }
}

void outlined consume of FetchedResults<A>?<A>(void *a1, void *a2)
{
  if (a1)
  {

  }
}

uint64_t outlined retain of FetchRequest<A>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v2, v3, v4);
  outlined copy of FetchedResults<A>?<A>(v5, v6);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

id outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_retain();
}

id outlined copy of FetchedResults<A>?<A>(id result, void *a2)
{
  id v2;

  if (result)
  {
    v2 = result;
    return a2;
  }
  return result;
}

void outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release();
}

void partial apply for closure #1 in FetchRequest.projectedValue.getter(uint64_t *a1@<X8>)
{
  closure #1 in FetchRequest.projectedValue.getter(a1);
}

void partial apply for closure #2 in FetchRequest.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  closure #2 in FetchRequest.projectedValue.getter(a1, a2, v2[2], v2[3], (uint64_t)(v2 + 5), v2[4]);
}

uint64_t type metadata accessor for FetchRequest.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FetchRequest.Configuration);
}

uint64_t type metadata accessor for FetchedResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FetchedResults);
}

uint64_t sub_187A04118()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:)()
{
  uint64_t *v0;

  return closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:)(v0[3], v0[4], v0[5]);
}

uint64_t sub_187A04158()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in FetchRequest.init(fetchRequest:transaction:)()
{
  uint64_t v0;

  return (id)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(v0 + 24));
}

uint64_t sub_187A04198()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)()
{
  uint64_t v0;

  return closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter(a1, a2);
}

void type metadata accessor for [NSSortDescriptor]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [NSSortDescriptor])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NSSortDescriptor]);
  }
}

unint64_t lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [NSSortDescriptor] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NSSortDescriptor] and conformance [A])
  {
    type metadata accessor for [NSSortDescriptor]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NSSortDescriptor] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.setter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)(a1, a2);
}

void base witness table accessor for BidirectionalCollection in FetchedResults<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in FetchedResults<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

void base witness table accessor for Collection in FetchedResults<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in FetchedResults<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FetchedResults<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for Sequence in FetchedResults<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void sub_187A04374(_QWORD *a1@<X8>)
{
  uint64_t v2;

  FetchedResults.nsSortDescriptors.getter();
  *a1 = v2;
}

uint64_t sub_187A043B0()
{
  return 8;
}

_QWORD *sub_187A043BC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_187A043C8(_QWORD *a1@<X8>)
{
  uint64_t v2;

  FetchedResults.nsPredicate.getter();
  *a1 = v2;
}

uint64_t sub_187A04404()
{
  return 8;
}

uint64_t sub_187A04410@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for FetchRequest.Configuration(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  result = FetchRequest.Configuration<>.sortDescriptors.getter(v5);
  *a4 = result;
  return result;
}

uint64_t sub_187A0445C()
{
  return 8;
}

uint64_t sub_187A04468@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for FetchedResults(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  result = FetchedResults<>.sortDescriptors.getter(v5);
  *a4 = result;
  return result;
}

uint64_t sub_187A044B4()
{
  return 8;
}

uint64_t assignWithCopy for FetchedResults(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t destroy for FetchRequest(uint64_t a1)
{
  void *v2;

  outlined consume of Environment<UISceneSession?>.Content(*(id *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_BYTE *)(a1 + 32));
  v2 = *(void **)(a1 + 40);
  if (v2)
  {

  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FetchRequest(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;

  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(void **)(a2 + 40);
  if (v9)
  {
    v10 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = v9;
    v12 = v10;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FetchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a2, v7);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<UISceneSession?>.Content(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(void **)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 32);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(void **)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v12;
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v13, v14, v15);
  v18 = *(void **)(a1 + 40);
  v19 = *(void **)(a2 + 40);
  if (!v18)
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 40) = v19;
      v24 = *(void **)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v24;
      v25 = v19;
      v26 = v24;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  if (!v19)
  {
    v27 = type metadata accessor for FetchedResults(0, *(_QWORD *)(a3 + 16), v16, v17);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1 + 40, v27);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 40) = v19;
  v20 = v19;

  v21 = *(void **)(a2 + 48);
  v22 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v21;
  v23 = v21;

LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FetchRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<UISceneSession?>.Content(v8, v9);
  v10 = *((_BYTE *)a2 + 32);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(void **)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_BYTE *)(a1 + 32) = v10;
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v11, v12, v13);
  v16 = *(void **)(a1 + 40);
  v17 = a2[5];
  if (!v16)
    goto LABEL_5;
  if (!v17)
  {
    v19 = type metadata accessor for FetchedResults(0, *(_QWORD *)(a3 + 16), v14, v15);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1 + 40, v19);
LABEL_5:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = v17;

  v18 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2[6];

LABEL_6:
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_release();
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_release();
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for FetchRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FetchRequest);
}

uint64_t sub_187A04894()
{
  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller(*(_QWORD *)(v4 + 16), a2, a3, a4);
}

objc_class *partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller@<X0>(void *a1@<X0>, NSArray *a2@<X8>)
{
  return FetchedResults.init(_:)((objc_class *)a1, a2);
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSManagedObjectContext and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFD08], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext and conformance NSObject);
  }
  return result;
}

void outlined consume of Binding<FetchedResults<A>?>?<A>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a2)
  {
    swift_release();
    swift_release();
    outlined consume of FetchedResults<A>?<A>(a3, a4);
  }
}

uint64_t partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.setter(a1, a2);
}

uint64_t partial apply for closure #1 in FetchedResults<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter(a1, a2);
}

uint64_t destroy for FoundationProgressView(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for FoundationProgressView(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = v4;
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 24);
    *v5 = *(_OWORD *)(a2 + 8);
    v5[1] = v9;
    v5[2] = *(_OWORD *)(a2 + 40);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FoundationProgressView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NSProgress.UIState(a1 + 8);
      v11 = *(_OWORD *)(a2 + 24);
      v10 = *(_OWORD *)(a2 + 40);
      *v7 = *v8;
      *(_OWORD *)(a1 + 24) = v11;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *v8;
    v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v13;
    *v7 = v12;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of NSProgress.UIState(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FoundationProgressView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5)
  {
    outlined destroy of NSProgress.UIState(a1 + 8);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FoundationProgressView()
{
  return &type metadata for FoundationProgressView;
}

void *type metadata accessor for NSProgress.UIState()
{
  return &unk_1E1B0DEF8;
}

_UNKNOWN **base witness table accessor for View in FoundationProgressView.Body()
{
  return &protocol witness table for FoundationProgressView.Body;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(a1, a2, a3, a4, (uint64_t (*)(int *, uint64_t *))MEMORY[0x1E0CE6EA8]);
}

uint64_t static FoundationProgressView.Body._makeViewList(view:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<FoundationProgressView.Body>, (uint64_t)&type metadata for FoundationProgressView.Body, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  type metadata accessor for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>();
  swift_allocObject();
  SubscriptionLifetime.init()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value();
  static View.makeViewList(view:inputs:)();
  return swift_release();
}

void protocol witness for View.body.getter in conformance FoundationProgressView.Body()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(a1, a2, a3, a4, (uint64_t (*)(int *, uint64_t *))MEMORY[0x1E0CE6D50]);
}

__n128 protocol witness for View.body.getter in conformance FoundationProgressView@<Q0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  id v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  __int128 v9;
  __int128 v10;

  v3 = *v1;
  type metadata accessor for State<NSProgress.UIState?>(0, &lazy cache variable for type metadata for State<NSProgress.UIState?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  v4 = v3;
  State.projectedValue.getter();
  result = v8;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(__n128 *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 56) = v10;
  return result;
}

void type metadata accessor for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>)
  {
    type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState> and conformance Publishers.Map<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>, MEMORY[0x1E0C95950]);
    v0 = type metadata accessor for SubscriptionLifetime();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>);
  }
}

void type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>)
  {
    type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>> and conformance Publishers.CombineLatest4<A, B, C, D>, (uint64_t (*)(uint64_t))type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, MEMORY[0x1E0C956D8]);
    v0 = type metadata accessor for Publishers.Map();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>);
  }
}

void type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>)
  {
    type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(255, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
    type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(255, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
    lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
    lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, String> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
    v0 = type metadata accessor for Publishers.CombineLatest4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>);
  }
}

unint64_t type metadata accessor for NSProgress()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSProgress;
  if (!lazy cache variable for type metadata for NSProgress)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSProgress);
  }
  return result;
}

void type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for NSProgress();
    v3 = type metadata accessor for NSObject.KeyValueObservingPublisher();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB2118], v4);
    atomic_store(result, a1);
  }
  return result;
}

id FoundationProgressView.Body.BodyAttribute.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  id v57;
  uint64_t v58;
  id result;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _DWORD v64[4];
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(0, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
  v75 = v1;
  v76 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v69 = (char *)v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v67 = (char *)v64 - v6;
  type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(0, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
  v71 = v7;
  v74 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v66 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v65 = (char *)v64 - v12;
  type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>();
  v77 = v13;
  v79 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v68 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>();
  v81 = *(_QWORD *)(v16 - 8);
  v82 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v72 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for NSProgress.UIStateSubscriber();
  MEMORY[0x1E0C80A78](v73, v19);
  v21 = (_QWORD *)((char *)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = v0;
  v78 = *(_QWORD *)(v0 + 8);
  v64[3] = *(_DWORD *)v0;
  Value = (_QWORD *)AGGraphGetValue();
  v23 = Value[1];
  v24 = Value[2];
  v26 = Value[3];
  v25 = Value[4];
  v27 = Value[5];
  v28 = Value[6];
  v30 = Value[7];
  v29 = Value[8];
  swift_retain();
  swift_retain();
  outlined copy of NSProgress.UIState?(v26, v25, v27, v28);
  CombineIdentifier.init()();
  v70 = v21;
  *v21 = v23;
  v21[1] = v24;
  v21[2] = v26;
  v21[3] = v25;
  v21[4] = v27;
  v21[5] = v28;
  v21[6] = v30;
  v21[7] = v29;
  v31 = *(void **)AGGraphGetValue();
  swift_getKeyPath();
  v32 = v31;
  v33 = v65;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  swift_getKeyPath();
  v34 = v66;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  swift_getKeyPath();
  v35 = v67;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  swift_getKeyPath();
  v36 = v69;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
  lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, String> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
  v37 = v68;
  v38 = v36;
  v39 = v71;
  v40 = v75;
  Publisher.combineLatest<A, B, C>(_:_:_:)();
  v41 = *(void (**)(char *, uint64_t))(v76 + 8);
  v41(v38, v40);
  v41(v35, v40);
  v42 = *(void (**)(char *, uint64_t))(v74 + 8);
  v42(v34, v39);
  v42(v33, v39);
  swift_allocObject();
  swift_unknownObjectUnownedInit();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>> and conformance Publishers.CombineLatest4<A, B, C, D>, (uint64_t (*)(uint64_t))type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, MEMORY[0x1E0C956D8]);
  v43 = v72;
  v44 = v77;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v37, v44);

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSProgress.UIStateSubscriber and conformance NSProgress.UIStateSubscriber, (uint64_t (*)(uint64_t))type metadata accessor for NSProgress.UIStateSubscriber, (uint64_t)&protocol conformance descriptor for NSProgress.UIStateSubscriber);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSProgress.UIStateSubscriber and conformance NSProgress.UIStateSubscriber, (uint64_t (*)(uint64_t))type metadata accessor for NSProgress.UIStateSubscriber, (uint64_t)&protocol conformance descriptor for NSProgress.UIStateSubscriber);
  v45 = (uint64_t)v70;
  SubscriptionLifetime.subscribe<A>(subscriber:to:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v43, v82);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for NSProgress.UIStateSubscriber);
  v46 = AGGraphGetValue();
  v47 = *(_QWORD *)(v46 + 16);
  v48 = *(_OWORD *)(v46 + 24);
  v49 = *(_OWORD *)(v46 + 40);
  v50 = *(_OWORD *)(v46 + 56);
  v83 = *(_QWORD *)(v46 + 8);
  v84 = v47;
  v85 = v48;
  v86 = v49;
  v87 = v50;
  type metadata accessor for State<NSProgress.UIState?>(0, &lazy cache variable for type metadata for Binding<NSProgress.UIState?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v88);
  v51 = v91;
  if (v91)
  {
    v52 = v88;
    v53 = v90;
    v55 = v92;
    v54 = v93;
    v56 = v89 & 1;
LABEL_6:
    v83 = v52;
    LOBYTE(v84) = v56;
    *(_QWORD *)&v85 = v53;
    *((_QWORD *)&v85 + 1) = v51;
    *(_QWORD *)&v86 = v55;
    *((_QWORD *)&v86 + 1) = v54;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  v57 = *(id *)AGGraphGetValue();
  objc_msgSend(v57, sel_fractionCompleted);
  v52 = v58;
  v56 = objc_msgSend(v57, sel_isIndeterminate);
  result = objc_msgSend(v57, sel_localizedDescription);
  if (result)
  {
    v60 = result;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v51 = v61;

    result = objc_msgSend(v57, sel_localizedAdditionalDescription);
    if (result)
    {
      v62 = result;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v54 = v63;

      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t FoundationProgressView.Body.BodyAttribute.Value.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v47 = a1;
  v2 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ResolvedProgressView(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>();
  v46 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v1;
  v20 = *((_BYTE *)v1 + 8);
  v21 = v1[3];
  v45 = v1[2];
  v23 = v1[4];
  v22 = v1[5];
  v24 = v20 & 1;
  if (v24)
    v19 = 0;
  *(_QWORD *)v5 = v19;
  v5[8] = v24;
  v5[9] = 0;
  swift_storeEnumTagMultiPayload();
  outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v9, type metadata accessor for ProgressViewValue);
  v9[*(int *)(v6 + 20)] = 0;
  v9[*(int *)(v6 + 24)] = 0;
  v25 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v25 = v23 & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    v48 = v23;
    v49 = v22;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v26 = Text.init<A>(_:)();
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
  }
  else
  {
    v26 = 0;
    v28 = 0;
    v32 = 0;
    v30 = 0;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v14, type metadata accessor for ResolvedProgressView);
  v33 = (uint64_t *)&v14[*(int *)(v11 + 36)];
  *v33 = v26;
  v33[1] = v28;
  v33[2] = v32;
  v33[3] = v30;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for ResolvedProgressView);
  v34 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v34 = v45 & 0xFFFFFFFFFFFFLL;
  if (v34)
  {
    v48 = v45;
    v49 = v21;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v35 = Text.init<A>(_:)();
    v37 = v36;
    v39 = v38;
    v41 = v40 & 1;
  }
  else
  {
    v35 = 0;
    v37 = 0;
    v41 = 0;
    v39 = 0;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>);
  v42 = (uint64_t *)&v18[*(int *)(v46 + 36)];
  *v42 = v35;
  v42[1] = v37;
  v42[2] = v41;
  v42[3] = v39;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>);
  return outlined init with take of TableCellFormula((uint64_t)v18, v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(int *, uint64_t *))
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 20);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 5);
  v14 = *(_OWORD *)(a2 + 3);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 7);
  v17 = a2[9];
  v18 = v8;
  return a5(&v19, &v11);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FoundationProgressView.Body.BodyAttribute.Value()
{
  type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
  type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(0, &lazy cache variable for type metadata for OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance FoundationProgressView.Body.BodyAttribute.Value@<X0>(uint64_t a1@<X8>)
{
  return FoundationProgressView.Body.BodyAttribute.Value.body.getter(a1);
}

void key path getter for NSProgress.localizedDescription : NSProgress(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void key path setter for NSProgress.localizedDescription : NSProgress(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  uint64_t v7;
  id v8;

  v6 = *a2;
  if (a1[1])
    v7 = MEMORY[0x18D75CC88](*a1);
  else
    v7 = 0;
  v8 = (id)v7;
  objc_msgSend(v6, *a5);

}

void closure #1 in NSProgress.uiStatePublisher.getter(uint64_t a1@<X8>)
{
  void *Strong;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(Strong, sel_fractionCompleted);
  v4 = v3;
  v5 = objc_msgSend(Strong, sel_isIndeterminate);
  v6 = objc_msgSend(Strong, sel_localizedDescription);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    v11 = objc_msgSend(Strong, sel_localizedAdditionalDescription);
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      *(_QWORD *)a1 = v4;
      *(_BYTE *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v15;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t NSProgress.UIStateSubscriber.respond(to:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  __int128 *v4;
  char v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v3 = *a1;
  v4 = (__int128 *)(a1 + 2);
  v26 = a1[2];
  v27 = v3;
  v5 = *((_BYTE *)a1 + 8);
  v25 = a1[3];
  v7 = (__int128 *)(a1 + 4);
  v6 = a1[4];
  v8 = a1[5];
  v9 = type metadata accessor for NSProgress.UIStateSubscriber();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9, v12);
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for NSProgress.UIStateSubscriber);
    v28 = *v4;
    v34 = *v7;
    v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v14 = swift_allocObject();
    outlined init with take of TableCellFormula((uint64_t)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (uint64_t (*)(_QWORD))type metadata accessor for NSProgress.UIStateSubscriber);
    v15 = (_OWORD *)(v14 + ((v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
    v16 = *((_OWORD *)a1 + 1);
    *v15 = *(_OWORD *)a1;
    v15[1] = v16;
    v15[2] = *((_OWORD *)a1 + 2);
    outlined retain of String?((uint64_t)&v28);
    outlined retain of String?((uint64_t)&v34);
    static Update.enqueueAction(_:)();
    return swift_release();
  }
  else
  {
    v18 = v1[2];
    v19 = v1[3];
    v20 = v1[4];
    v21 = v1[5];
    v23[1] = v1[6];
    v24 = v20;
    *(_QWORD *)&v28 = v27;
    *((_QWORD *)&v28 + 1) = v5 & 1;
    v29 = v26;
    v30 = v25;
    v31 = v6;
    v32 = v8;
    v22 = *v4;
    v33 = *v7;
    v34 = v22;
    outlined retain of String?((uint64_t)&v34);
    outlined retain of String?((uint64_t)&v33);
    swift_retain();
    swift_retain();
    outlined copy of NSProgress.UIState?(v18, v19, v24, v21);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined release of String?((uint64_t)&v34);
    outlined release of String?((uint64_t)&v33);
    swift_release();
    swift_release();
    return outlined consume of NSProgress.UIState?(v18, v19, v24, v21);
  }
}

uint64_t update #1 () in NSProgress.UIStateSubscriber.respond(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = v6;
  outlined retain of String?((uint64_t)&v9);
  outlined retain of String?((uint64_t)&v8);
  swift_retain();
  swift_retain();
  outlined copy of NSProgress.UIState?(v2, v3, v4, v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined release of String?((uint64_t)&v9);
  outlined release of String?((uint64_t)&v8);
  swift_release();
  swift_release();
  return outlined consume of NSProgress.UIState?(v2, v3, v4, v5);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance NSProgress.UIStateSubscriber(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[3];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  NSProgress.UIStateSubscriber.respond(to:)((uint64_t *)v3);
  return static Subscribers.Demand.none.getter();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance NSProgress.UIStateSubscriber@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CombineIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

unint64_t lazy protocol witness table accessor for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute;
  if (!lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FoundationProgressView.Body.BodyAttribute, &unk_1E1ADBD88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value;
  if (!lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FoundationProgressView.Body.BodyAttribute.Value, &unk_1E1ADBD08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value);
  }
  return result;
}

uint64_t type metadata accessor for NSProgress.UIStateSubscriber()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NSProgress.UIStateSubscriber;
  if (!type metadata singleton initialization cache for NSProgress.UIStateSubscriber)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined copy of NSProgress.UIState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

char *keypath_get_selector_completedUnitCount()
{
  return sel_completedUnitCount;
}

id sub_187A063A8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_completedUnitCount);
  *a2 = result;
  return result;
}

id sub_187A063D8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCompletedUnitCount_, *a1);
}

char *keypath_get_selector_totalUnitCount()
{
  return sel_totalUnitCount;
}

id sub_187A063F8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_totalUnitCount);
  *a2 = result;
  return result;
}

id sub_187A06428(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTotalUnitCount_, *a1);
}

char *keypath_get_selector_localizedDescription()
{
  return sel_localizedDescription;
}

void sub_187A06448(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for NSProgress.localizedDescription : NSProgress(a1, (SEL *)&selRef_localizedDescription, a2);
}

void sub_187A06464(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for NSProgress.localizedDescription : NSProgress(a1, a2, a3, a4, (SEL *)&selRef_setLocalizedDescription_);
}

char *keypath_get_selector_localizedAdditionalDescription()
{
  return sel_localizedAdditionalDescription;
}

void sub_187A0648C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for NSProgress.localizedDescription : NSProgress(a1, (SEL *)&selRef_localizedAdditionalDescription, a2);
}

void sub_187A064A8(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for NSProgress.localizedDescription : NSProgress(a1, a2, a3, a4, (SEL *)&selRef_setLocalizedAdditionalDescription_);
}

uint64_t sub_187A064C4()
{
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in NSProgress.uiStatePublisher.getter(uint64_t a1@<X8>)
{
  closure #1 in NSProgress.uiStatePublisher.getter(a1);
}

void type metadata accessor for State<NSProgress.UIState?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for NSProgress.UIState?, (uint64_t)&unk_1E1B0DEF8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    v8 = a2[5];
    swift_retain();
    swift_retain();
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v8;
      v9 = a2[7];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    v11 = *(int *)(a3 + 20);
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for CombineIdentifier();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for CombineIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NSProgress.UIState(a1 + 16);
      v10 = *(_OWORD *)(a2 + 32);
      v9 = *(_OWORD *)(a2 + 48);
      *v6 = *v7;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *v7;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *v6 = v11;
  }
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

_OWORD *initializeWithTake for NSProgress.UIStateSubscriber(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    outlined destroy of NSProgress.UIState(a1 + 16);
LABEL_5:
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSProgress.UIStateSubscriber()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A06A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CombineIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NSProgress.UIStateSubscriber()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A06AD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CombineIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NSProgress.UIStateSubscriber()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for FoundationProgressView.Body.BodyAttribute()
{
  return &unk_1E1ADBD88;
}

uint64_t destroy for NSProgress.UIState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSProgress.UIState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSProgress.UIState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSProgress.UIState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for FoundationProgressView.Body.BodyAttribute.Value()
{
  return &unk_1E1ADBD08;
}

uint64_t destroy for FoundationProgressView.Body(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FoundationProgressView.Body(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = v4;
  swift_retain();
  swift_retain();
  if (v6)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  return a1;
}

uint64_t assignWithCopy for FoundationProgressView.Body(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v7 = (_OWORD *)(a1 + 24);
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NSProgress.UIState(a1 + 24);
      v11 = *(_OWORD *)(a2 + 40);
      v10 = *(_OWORD *)(a2 + 56);
      *v7 = *v8;
      *(_OWORD *)(a1 + 40) = v11;
      *(_OWORD *)(a1 + 56) = v10;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *v8;
    v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    *v7 = v12;
  }
  return a1;
}

uint64_t assignWithTake for FoundationProgressView.Body(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 48);
  if (!v5)
  {
    outlined destroy of NSProgress.UIState(a1 + 24);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FoundationProgressView.Body()
{
  return &type metadata for FoundationProgressView.Body;
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in NSProgress.UIStateSubscriber()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSProgress.UIStateSubscriber and conformance NSProgress.UIStateSubscriber, (uint64_t (*)(uint64_t))type metadata accessor for NSProgress.UIStateSubscriber, (uint64_t)&protocol conformance descriptor for NSProgress.UIStateSubscriber);
}

uint64_t associated type witness table accessor for View.Body : View in FoundationProgressView.Body.BodyAttribute.Value()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>)
  {
    type metadata accessor for ResolvedProgressView(255);
    type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(255, &lazy cache variable for type metadata for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
    type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(255, &lazy cache variable for type metadata for OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>);
  }
}

uint64_t type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3();
    type metadata accessor for OptionalSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressView and conformance ResolvedProgressView, type metadata accessor for ResolvedProgressView, (uint64_t)&protocol conformance descriptor for ResolvedProgressView);
    v3[1] = &protocol witness table for OptionalSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187A07260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for NSProgress.UIStateSubscriber();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  if (*(_QWORD *)(v2 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = v2 + *(int *)(v1 + 20);
  v4 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for update #1 () in NSProgress.UIStateSubscriber.respond(to:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for NSProgress.UIStateSubscriber() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return update #1 () in NSProgress.UIStateSubscriber.respond(to:)((_QWORD *)(v0 + v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for OptionalSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for OptionalViewAlias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalViewAlias);
}

uint64_t type metadata completion function for OptionalSourceWriter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OptionalSourceWriter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for OptionalSourceWriter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for OptionalSourceWriter(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for OptionalSourceWriter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for OptionalSourceWriter(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for OptionalSourceWriter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionalSourceWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for OptionalSourceWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_187A07B5C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187A07B64()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void type metadata accessor for OptionalSourceWriter()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for StaticSourceWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A07C44 + 4 * byte_187C7B1AE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for StaticSourceWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in StaticSourceWriter<A, B>()
{
  return &protocol witness table for StaticSourceWriter<A, B>;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ListStyleContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent, (uint64_t)&type metadata for ListStyleContent, &lazy protocol witness table cache variable for type SourceInput<ListStyleContent> and conformance SourceInput<A>);
}

uint64_t specialized static ViewAlias._makeView(view:inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, unint64_t *a6)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v34[32];
  _BYTE v35[32];
  int v36;

  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v34[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v35 = v11;
  *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 64);
  v36 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v33 = *(_OWORD *)a2;
  *(_OWORD *)v34 = v12;
  type metadata accessor for SourceInput<ListStyleContent>(0, a3, a4, a5);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(a6, a3, a4, a5);
  PropertyList.subscript.getter();
  if (!v23)
  {
    v32 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  v13 = *(_QWORD *)(v23 + 48);
  v14 = *(_QWORD *)(v23 + 16);
  v15 = *(_QWORD *)(v23 + 24);
  v16 = *(_QWORD *)(v23 + 32);
  v22 = *(unsigned int *)(v23 + 40);
  v21 = *(_BYTE *)(v23 + 44);
  swift_retain();
  swift_release();
  v32 = v13;
  PropertyList.subscript.setter();
  if (!v14)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  v17 = PropertyList.subscript.setter();
  v23 = v33;
  v24 = DWORD2(v33);
  v25 = *(_QWORD *)v34;
  v26 = *(_OWORD *)&v34[8];
  v27 = *(_QWORD *)&v34[24];
  v28 = *(_QWORD *)v35;
  v29 = *(_OWORD *)&v35[8];
  v30 = *(_QWORD *)&v35[24];
  v31 = v36;
  v18 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
  v19 = ((uint64_t (*)(uint64_t))a4)(v17);
  LOBYTE(v32) = v21;
  v18(&v32, v14, v15, v16, v22 | ((unint64_t)v21 << 32), &v23, a5, v19, v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static ViewAlias._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _BYTE v28[4];
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;

  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v9 = a2[6];
  v10 = *((_DWORD *)a2 + 20);
  v29 = *a2;
  v30 = v6;
  v31 = v7;
  v32 = *(_OWORD *)(a2 + 3);
  v33 = v8;
  v34 = v9;
  v35 = *(_OWORD *)(a2 + 7);
  v36 = a2[9];
  v37 = v10;
  v11 = type metadata accessor for SourceInput(0, a3, a4, a4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v11);
  _GraphInputs.popLast<A, B>(_:)();
  v12 = v19;
  if (v19)
  {
    v13 = v22;
    v18 = a4;
    v14 = BYTE4(v22);
    v15 = v20;
    v17 = v21;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v19 = v29;
    LODWORD(v20) = v30;
    v21 = v31;
    v22 = v32;
    v23 = v33;
    v24 = v34;
    v25 = v35;
    v26 = v36;
    v27 = v37;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(v28, v12, v15, v17, v13 | ((unint64_t)(v14 & 1) << 32), &v19, a3, v18, v12, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized static ViewAlias._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, unint64_t *a6)
{
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  char v35;

  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v32[16] = *(_OWORD *)(a2 + 32);
  v33 = v11;
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_BYTE *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v31 = *(_OWORD *)a2;
  *(_OWORD *)v32 = v12;
  type metadata accessor for SourceInput<ListStyleContent>(0, a3, a4, a5);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(a6, a3, a4, a5);
  PropertyList.subscript.getter();
  if (!(_QWORD)v25)
  {
    v30 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  v13 = *(_QWORD *)(v25 + 48);
  v14 = *(_QWORD *)(v25 + 16);
  v15 = *(_QWORD *)(v25 + 24);
  v23 = *(unsigned int *)(v25 + 40);
  v24 = *(_QWORD *)(v25 + 32);
  v22 = *(_BYTE *)(v25 + 44);
  swift_retain();
  swift_release();
  v30 = v13;
  PropertyList.subscript.setter();
  if (!v14)
  {
LABEL_5:
    v19 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 32);
    v27 = v19;
    v28 = *(_OWORD *)(a2 + 64);
    v29 = *(_BYTE *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 16);
    v25 = *(_OWORD *)a2;
    *(_OWORD *)v26 = v20;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  v16 = PropertyList.subscript.setter();
  *(_QWORD *)&v25 = v31;
  DWORD2(v25) = DWORD2(v31);
  *(_QWORD *)v26 = *(_QWORD *)v32;
  *(_OWORD *)&v26[8] = *(_OWORD *)&v32[8];
  *(_QWORD *)&v26[24] = *(_QWORD *)&v32[24];
  v27 = v33;
  LODWORD(v28) = v34;
  *((_QWORD *)&v28 + 1) = *((_QWORD *)&v34 + 1);
  v29 = v35;
  v17 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16);
  v18 = ((uint64_t (*)(uint64_t))a4)(v16);
  LOBYTE(v30) = v22;
  v17(&v30, v14, v15, v24, v23 | ((unint64_t)v22 << 32), &v25, a5, v18, v14, v15);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent, (uint64_t)&type metadata for ListStyleContent, &lazy protocol witness table cache variable for type SourceInput<ListStyleContent> and conformance SourceInput<A>);
}

uint64_t specialized static ViewAlias._viewListCount(inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

{
  return specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t static ViewAlias._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 3);
  v17 = *a1;
  v18 = v4;
  v19 = v5;
  v6 = type metadata accessor for SourceInput(0, a2, a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v6);
  _ViewListCountInputs.popLast<A, B>(_:)();
  v7 = v14;
  if ((_QWORD)v14)
  {
    v8 = v16;
    v9 = BYTE4(v16);
    v11 = *((_QWORD *)&v14 + 1);
    v10 = v15;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v14 = v17;
    LODWORD(v15) = v18;
    v16 = v19;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, __int128 *, uint64_t, uint64_t))(v11 + 24))(v7, v11, v10, v8 | ((unint64_t)(v9 & 1) << 32), &v14, v7, v11);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  return v12;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance UIKitButtonConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<UIKitButtonConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitButtonConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<UIKitButtonConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitButtonConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<UIKitButtonConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.TextInputSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions, (uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.TextInputSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.TextInputSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions, (uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.TextInputSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.TextInputSuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions, (uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.TextInputSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PreviewModifierContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent, (uint64_t)&type metadata for PreviewModifierContent, &lazy protocol witness table cache variable for type SourceInput<PreviewModifierContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PreviewModifierContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent, (uint64_t)&type metadata for PreviewModifierContent, &lazy protocol witness table cache variable for type SourceInput<PreviewModifierContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PreviewModifierContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent, (uint64_t)&type metadata for PreviewModifierContent, &lazy protocol witness table cache variable for type SourceInput<PreviewModifierContent> and conformance SourceInput<A>);
}

void View.optionalViewAlias<A, B>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_187A08A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v13 - v10;
  v4(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v11, v2, v5);
  MEMORY[0x18D75B4AC](v11, *(_QWORD *)(v6 - 136), a1, *(_QWORD *)(v6 - 128));
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ListRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent, (uint64_t)&type metadata for ListRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ListRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent, (uint64_t)&type metadata for ListRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListRowHeightTemplateContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent, (uint64_t)&type metadata for ListRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ListFirstRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent, (uint64_t)&type metadata for ListFirstRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListFirstRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ListFirstRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent, (uint64_t)&type metadata for ListFirstRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListFirstRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListFirstRowHeightTemplateContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent, (uint64_t)&type metadata for ListFirstRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListFirstRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ColorPickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label, (uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ColorPickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ColorPickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label, (uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ColorPickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ColorPickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label, (uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ColorPickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MenuStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label, (uint64_t)&type metadata for MenuStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MenuStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label, (uint64_t)&type metadata for MenuStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label, (uint64_t)&type metadata for MenuStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MenuStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content, (uint64_t)&type metadata for MenuStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MenuStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content, (uint64_t)&type metadata for MenuStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content, (uint64_t)&type metadata for MenuStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ToggleStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ToggleStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ToggleStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ToggleStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToggleStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ToggleStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance OutlineSubgroupChildren(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (uint64_t (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren, (uint64_t)&type metadata for OutlineSubgroupChildren, &lazy protocol witness table cache variable for type SourceInput<OutlineSubgroupChildren> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance OutlineSubgroupChildren(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (uint64_t (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren, (uint64_t)&type metadata for OutlineSubgroupChildren, &lazy protocol witness table cache variable for type SourceInput<OutlineSubgroupChildren> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance OutlineSubgroupChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (uint64_t (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren, (uint64_t)&type metadata for OutlineSubgroupChildren, &lazy protocol witness table cache variable for type SourceInput<OutlineSubgroupChildren> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TabViewStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content, a3);
  return static ViewAlias._makeView(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1, a2, a3, (uint64_t)&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DisclosureGroupStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DisclosureGroupStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedRadioGroupPicker.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label, (uint64_t)&type metadata for ResolvedRadioGroupPicker.Label, &lazy protocol witness table cache variable for type SourceInput<ResolvedRadioGroupPicker.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedRadioGroupPicker.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label, (uint64_t)&type metadata for ResolvedRadioGroupPicker.Label, &lazy protocol witness table cache variable for type SourceInput<ResolvedRadioGroupPicker.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedRadioGroupPicker.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label, (uint64_t)&type metadata for ResolvedRadioGroupPicker.Label, &lazy protocol witness table cache variable for type SourceInput<ResolvedRadioGroupPicker.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Sidebar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Sidebar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Sidebar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Sidebar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitViewStyleConfiguration.Sidebar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Sidebar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Detail(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Detail> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Detail(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Detail> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitViewStyleConfiguration.Detail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Detail> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PrimitiveButtonStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<PrimitiveButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _NavigationViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_NavigationViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _NavigationViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_NavigationViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _NavigationViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_NavigationViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MultiDatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label, (uint64_t)&type metadata for MultiDatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MultiDatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MultiDatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label, (uint64_t)&type metadata for MultiDatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MultiDatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultiDatePickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label, (uint64_t)&type metadata for MultiDatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MultiDatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ButtonStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _TextFieldStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel, (uint64_t)&type metadata for _TextFieldStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_TextFieldStyleLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _TextFieldStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel, (uint64_t)&type metadata for _TextFieldStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_TextFieldStyleLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _TextFieldStyleLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel, (uint64_t)&type metadata for _TextFieldStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_TextFieldStyleLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ProgressViewStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ProgressViewStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ProgressViewStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ProgressViewStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ProgressViewStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ProgressViewStyleConfiguration.CurrentValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label, (uint64_t)&type metadata for SliderStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label, (uint64_t)&type metadata for SliderStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label, (uint64_t)&type metadata for SliderStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.MinimumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.MaximumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabelGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content, (uint64_t)&type metadata for LabelGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabelGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabelGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content, (uint64_t)&type metadata for LabelGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabelGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabelGroupStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content, (uint64_t)&type metadata for LabelGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabelGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PickerStyleConfiguration<A>.Label(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Label, a3);
  return static ViewAlias._makeView(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PickerStyleConfiguration<A>.Label(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Label, a3);
  return static ViewAlias._makeViewList(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PickerStyleConfiguration<A>.Label(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PickerStyleConfiguration<A>.Label);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PickerStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Content, a3);
  return static ViewAlias._makeView(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PickerStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Content, a3);
  return static ViewAlias._makeViewList(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PickerStyleConfiguration<A>.Content(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PickerStyleConfiguration<A>.Content);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, a3);
  return static ViewAlias._makeView(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, a3);
  return static ViewAlias._makeViewList(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PickerStyleConfiguration<A>.CurrentValueLabel(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.Header(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header, (uint64_t)&type metadata for SectionStyleConfiguration.Header, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Header> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.Header(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header, (uint64_t)&type metadata for SectionStyleConfiguration.Header, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Header> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.Footer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.Actions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions, (uint64_t)&type metadata for SectionStyleConfiguration.Actions, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Actions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.Actions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions, (uint64_t)&type metadata for SectionStyleConfiguration.Actions, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Actions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.Actions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions, (uint64_t)&type metadata for SectionStyleConfiguration.Actions, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Actions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.RawContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.RawContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchField(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchField(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchSuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchCustomScopeBar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar, (uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomScopeBar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchCustomScopeBar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar, (uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomScopeBar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchCustomScopeBar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar, (uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomScopeBar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchCustomAccessory(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory, (uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomAccessory> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchCustomAccessory(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory, (uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomAccessory> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchCustomAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (uint64_t (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory, (uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomAccessory> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AccessoryBarContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent, (uint64_t)&type metadata for AccessoryBarContent, &lazy protocol witness table cache variable for type SourceInput<AccessoryBarContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AccessoryBarContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent, (uint64_t)&type metadata for AccessoryBarContent, &lazy protocol witness table cache variable for type SourceInput<AccessoryBarContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AccessoryBarContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent, (uint64_t)&type metadata for AccessoryBarContent, &lazy protocol witness table cache variable for type SourceInput<AccessoryBarContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FormStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content, (uint64_t)&type metadata for FormStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FormStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content, (uint64_t)&type metadata for FormStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content, (uint64_t)&type metadata for FormStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FormStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer, (uint64_t)&type metadata for FormStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FormStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer, (uint64_t)&type metadata for FormStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormStyleConfiguration.Footer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer, (uint64_t)&type metadata for FormStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _NavigationStackStyleConfiguration.Root(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (uint64_t (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, &lazy protocol witness table cache variable for type SourceInput<_NavigationStackStyleConfiguration.Root> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _NavigationStackStyleConfiguration.Root(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (uint64_t (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, &lazy protocol witness table cache variable for type SourceInput<_NavigationStackStyleConfiguration.Root> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _NavigationStackStyleConfiguration.Root(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (uint64_t (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, &lazy protocol witness table cache variable for type SourceInput<_NavigationStackStyleConfiguration.Root> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StepperStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label, (uint64_t)&type metadata for StepperStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<StepperStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StepperStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label, (uint64_t)&type metadata for StepperStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<StepperStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StepperStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label, (uint64_t)&type metadata for StepperStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<StepperStyleConfiguration.Label> and conformance SourceInput<A>);
}

void View.viewAlias<A, B, C>(if:_:source:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for StaticSourceWriter();
}

void sub_187A0AD98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v5;
  *(_QWORD *)(v4 - 96) = MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v4 - 88) = v2;
  type metadata accessor for StaticIf();
}

uint64_t sub_187A0ADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v15 - v12;
  (*(void (**)(double))(v8 - 152))(v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 32))(v3, v2, v6);
  ViewModifier.requiring<A>(_:)(v4, v7, (uint64_t)v13);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v7);
  MEMORY[0x18D75B4AC](v13, *(_QWORD *)(v8 - 128), a1, *(_QWORD *)(v8 - 136));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TokenFieldConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label, (uint64_t)&type metadata for TokenFieldConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<TokenFieldConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TokenFieldConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label, (uint64_t)&type metadata for TokenFieldConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<TokenFieldConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TokenFieldConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label, (uint64_t)&type metadata for TokenFieldConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<TokenFieldConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BadgeViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content, (uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<BadgeViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BadgeViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content, (uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<BadgeViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BadgeViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content, (uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<BadgeViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.CurrentValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.MinimumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.MaximumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.MarkedValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MarkedValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MarkedValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.MarkedValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MarkedValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MarkedValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.MarkedValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MarkedValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MarkedValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree, a3);
  return static ViewAlias._makeView(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree, a3);
  return static ViewAlias._makeViewList(view:inputs:)(v5, a2, a3, v5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(__int128 *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _OutlineGenerator_Configuration<A, B, C>.Subtree);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = MEMORY[0x18D75FFDC](a4);
  return static ViewAlias._viewListCount(inputs:)(a1, a2, v6, v7);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StaticSourceWriter<A, B>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in OptionalSourceWriter<A, B>()
{
  return &protocol witness table for OptionalSourceWriter<A, B>;
}

void static OptionalSourceWriter._makeInputs(modifier:inputs:)()
{
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_187A0B668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int OffsetAttribute2;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 64))
    closure #1 in static OptionalSourceWriter._makeInputs(modifier:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AnySource.init<A>(_:)(OffsetAttribute2, v3, v2);
  v6 = type metadata accessor for SourceInput(0, v1, v0, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v6);
  lazy protocol witness table accessor for type AnySource and conformance AnySource();
  return _GraphInputs.append<A, B>(_:to:)();
}

void closure #1 in static OptionalSourceWriter._makeInputs(modifier:inputs:)()
{
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_187A0B788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v5[2] = a1;
  v6 = type metadata accessor for Optional();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

uint64_t AnySource.init<A>(_:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _BYTE v16[16];
  uint64_t IsNil;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Optional();
  v19[0] = a3;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, v19);
  v9 = type metadata accessor for SourceFormula(0, v6, v7, v8);
  AGCreateWeakAttribute();
  v15 = a1;
  IsNil = type metadata accessor for AnySource.IsNil(0, a2, v10, v11);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnySource.IsNil<A>, IsNil);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v15, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v16, IsNil, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  return v9;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OptionalSourceWriter<A, B>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OptionalSourceWriter<A, B>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance OptionalSourceWriter<A, B>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance OptionalSourceWriter<A, B>()
{
  static OptionalSourceWriter._makeInputs(modifier:inputs:)();
}

uint64_t OptionalViewAlias.wrappedValue.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  if ((a1 & 1) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 16))(a4, a2, a3);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v6, 1, a2);
}

uint64_t OptionalViewAlias.StaticSourceBox.update(property:phase:)(_BYTE *a1)
{
  _BYTE *v1;

  *a1 = *v1;
  return 0;
}

uint64_t OptionalViewAlias.OptionalSourceBox.update(property:phase:)(BOOL *a1)
{
  char v2;
  char v3;
  uint64_t result;

  v2 = *(_BYTE *)AGGraphGetValue();
  result = v3 & 1;
  *a1 = (v2 & 1) == 0;
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance OptionalViewAlias<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static OptionalViewAlias._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24));
}

BOOL AnySource.IsNil.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  _BOOL8 v9;
  uint64_t v11;

  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v11 - v6;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, Value, v3);
  v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(v7, 1, a2) == 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v9;
}

BOOL protocol witness for Rule.value.getter in conformance AnySource.IsNil<A>@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v2;
  _BOOL8 result;

  result = AnySource.IsNil.value.getter(*v2, *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnySource.IsNil<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnySource.IsNil<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ControlGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ControlGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ControlGroupStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ControlGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ControlGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ControlGroupStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GroupBoxStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GroupBoxStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GroupBoxStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GroupBoxStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GroupBoxStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GroupBoxStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _MenuButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _MenuButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _MenuButtonStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _MenuButtonStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _MenuButtonStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _MenuButtonStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance HelpStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content, (uint64_t)&type metadata for HelpStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<HelpStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HelpStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content, (uint64_t)&type metadata for HelpStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<HelpStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HelpStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content, (uint64_t)&type metadata for HelpStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<HelpStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabeledContentStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabeledContentStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabeledContentStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabeledContentStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabeledContentStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabeledContentStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfiguration.Control(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control, (uint64_t)&type metadata for SearchFieldConfiguration.Control, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Control> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfiguration.Control(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control, (uint64_t)&type metadata for SearchFieldConfiguration.Control, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Control> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfiguration.Control(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control, (uint64_t)&type metadata for SearchFieldConfiguration.Control, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Control> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfiguration.Suggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions, (uint64_t)&type metadata for SearchFieldConfiguration.Suggestions, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Suggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfiguration.Suggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions, (uint64_t)&type metadata for SearchFieldConfiguration.Suggestions, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Suggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfiguration.Suggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions, (uint64_t)&type metadata for SearchFieldConfiguration.Suggestions, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Suggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfiguration.Scopes(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfiguration.Scopes(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfiguration.Scopes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabelStyleConfiguration.Title(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title, (uint64_t)&type metadata for LabelStyleConfiguration.Title, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Title> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabelStyleConfiguration.Title(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title, (uint64_t)&type metadata for LabelStyleConfiguration.Title, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Title> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabelStyleConfiguration.Title(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title, (uint64_t)&type metadata for LabelStyleConfiguration.Title, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Title> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabelStyleConfiguration.Icon(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Icon> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabelStyleConfiguration.Icon(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Icon> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabelStyleConfiguration.Icon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Icon> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DatePickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _DatePickerStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel, (uint64_t)&type metadata for _DatePickerStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_DatePickerStyleLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DatePickerStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel, (uint64_t)&type metadata for _DatePickerStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_DatePickerStyleLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _DatePickerStyleLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel, (uint64_t)&type metadata for _DatePickerStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_DatePickerStyleLabel> and conformance SourceInput<A>);
}

uint64_t lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for SourceInput<ListStyleContent>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static OptionalViewAlias._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for SourceInput(0, a4, a6, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v8);
  lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();
  PropertyList.subscript.getter();
  if (v14 && (v10 = *(_BYTE *)(v14 + 44), swift_release(), (v10 & 1) == 0))
  {
    v12 = type metadata accessor for OptionalViewAlias.OptionalSourceBox(0, a4, a6, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalViewAlias<A>.OptionalSourceBox, v12);
  }
  else
  {
    v11 = type metadata accessor for OptionalViewAlias.StaticSourceBox(0, a4, a6, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalViewAlias<A>.StaticSourceBox, v11);
  }
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

unint64_t lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Stack<AnySource> and conformance <A> Stack<A>;
  if (!lazy protocol witness table cache variable for type Stack<AnySource> and conformance <A> Stack<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Stack<AnySource>, (uint64_t)&unk_1E1B0CE00, MEMORY[0x1E0CE72F0]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AnySource and conformance AnySource();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7300], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stack<AnySource> and conformance <A> Stack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySource and conformance AnySource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnySource and conformance AnySource;
  if (!lazy protocol witness table cache variable for type AnySource and conformance AnySource)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnySource, &unk_1E1B0CE00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySource and conformance AnySource);
  }
  return result;
}

uint64_t type metadata accessor for OptionalViewAlias.StaticSourceBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalViewAlias.StaticSourceBox);
}

uint64_t type metadata accessor for OptionalViewAlias.OptionalSourceBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalViewAlias.OptionalSourceBox);
}

uint64_t type metadata accessor for AnySource.IsNil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySource.IsNil);
}

unint64_t lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel;
  if (!lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DatePickerStyleLabel, &type metadata for _DatePickerStyleLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel;
  if (!lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DatePickerStyleLabel, &type metadata for _DatePickerStyleLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HelpStyleConfiguration.Content, &type metadata for HelpStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HelpStyleConfiguration.Content, &type metadata for HelpStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OptionalViewAlias(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A0CE8C + 4 * byte_187C7B1C1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A0CEC0 + 4 * byte_187C7B1BC[v4]))();
}

uint64_t sub_187A0CEC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A0CEC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A0CED0);
  return result;
}

uint64_t sub_187A0CEDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A0CEE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A0CEE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A0CEF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for _AttributeBody in AnySource.IsNil<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in OptionalViewAlias<A>.OptionalSourceBox()
{
  return &protocol witness table for OptionalViewAlias<A>;
}

void base witness table accessor for GraphInput in SourceInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PropertyKey in SourceInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for SourceInput<ListStyleContent>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for SourceInput(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for FileImportOperation(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    if (*(_QWORD *)((char *)a2 + v16 + 24))
    {
      v19 = *(_QWORD *)v18;
      v20 = *((_QWORD *)v18 + 1);
      v21 = v18[16];
      outlined copy of Text.Storage(*(_QWORD *)v18, v20, v21);
      *(_QWORD *)v17 = v19;
      *((_QWORD *)v17 + 1) = v20;
      v17[16] = v21;
      *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
    }
    v23 = a3[7];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    if (*(_QWORD *)((char *)a2 + v23 + 24))
    {
      v26 = *(_QWORD *)v25;
      v27 = *((_QWORD *)v25 + 1);
      v28 = v25[16];
      outlined copy of Text.Storage(*(_QWORD *)v25, v27, v28);
      *(_QWORD *)v24 = v26;
      *((_QWORD *)v24 + 1) = v27;
      v24[16] = v28;
      *((_QWORD *)v24 + 3) = *((_QWORD *)v25 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v29;
    }
    v30 = a3[8];
    v31 = (char *)v4 + v30;
    v32 = (char *)a2 + v30;
    if (*(_QWORD *)((char *)a2 + v30 + 24))
    {
      v33 = *(_QWORD *)v32;
      v34 = *((_QWORD *)v32 + 1);
      v35 = v32[16];
      outlined copy of Text.Storage(*(_QWORD *)v32, v34, v35);
      *(_QWORD *)v31 = v33;
      *((_QWORD *)v31 + 1) = v34;
      v31[16] = v35;
      *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v36 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v36;
    }
    v37 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)v4 + v37) = *((_BYTE *)a2 + v37);
    v38 = a3[11];
    v39 = (char *)v4 + v38;
    v40 = (char *)a2 + v38;
    type metadata accessor for Predicate<Pack{URL}>();
    v42 = v41;
    v43 = *(_QWORD *)(v41 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    if (v44(v40, 1, v42))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v40, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
    }
    v46 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = a3[14];
    v50 = a3[15];
    v51 = (_QWORD *)((char *)v4 + v49);
    v52 = (_QWORD *)((char *)a2 + v49);
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    v54 = (_QWORD *)((char *)v4 + v50);
    v55 = (_QWORD *)((char *)a2 + v50);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FileImportOperation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[6];
  if (*(_QWORD *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v8 = a1 + a2[7];
  if (*(_QWORD *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v9 = a1 + a2[8];
  if (*(_QWORD *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v10 = a1 + a2[11];
  type metadata accessor for Predicate<Pack{URL}>();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for FileImportOperation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  if (*(_QWORD *)((char *)a2 + v14 + 24))
  {
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    v19 = v16[16];
    outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 1) = v18;
    v15[16] = v19;
    *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
  }
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  if (*(_QWORD *)((char *)a2 + v21 + 24))
  {
    v24 = *(_QWORD *)v23;
    v25 = *((_QWORD *)v23 + 1);
    v26 = v23[16];
    outlined copy of Text.Storage(*(_QWORD *)v23, v25, v26);
    *(_QWORD *)v22 = v24;
    *((_QWORD *)v22 + 1) = v25;
    v22[16] = v26;
    *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
  }
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  if (*(_QWORD *)((char *)a2 + v28 + 24))
  {
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    v33 = v30[16];
    outlined copy of Text.Storage(*(_QWORD *)v30, v32, v33);
    *(_QWORD *)v29 = v31;
    *((_QWORD *)v29 + 1) = v32;
    v29[16] = v33;
    *((_QWORD *)v29 + 3) = *((_QWORD *)v30 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v34;
  }
  v35 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  v36 = a3[11];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  type metadata accessor for Predicate<Pack{URL}>();
  v40 = v39;
  v41 = *(_QWORD *)(v39 - 8);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  if (v42(v38, 1, v40))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v37, v38, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
  }
  v44 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = a3[14];
  v48 = a3[15];
  v49 = (_QWORD *)((char *)a1 + v47);
  v50 = (_QWORD *)((char *)a2 + v47);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = (_QWORD *)((char *)a1 + v48);
  v53 = (_QWORD *)((char *)a2 + v48);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FileImportOperation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (uint64_t)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a1 + v15 + 24);
  v19 = *(_QWORD *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      v20 = *(_QWORD *)v17;
      v21 = *((_QWORD *)v17 + 1);
      v22 = v17[16];
      outlined copy of Text.Storage(*(_QWORD *)v17, v21, v22);
      v23 = *(_QWORD *)v16;
      v24 = *(_QWORD *)(v16 + 8);
      v25 = *(_BYTE *)(v16 + 16);
      *(_QWORD *)v16 = v20;
      *(_QWORD *)(v16 + 8) = v21;
      *(_BYTE *)(v16 + 16) = v22;
      outlined consume of Text.Storage(v23, v24, v25);
      *(_QWORD *)(v16 + 24) = *((_QWORD *)v17 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v16);
      v29 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v29;
    }
  }
  else if (v19)
  {
    v26 = *(_QWORD *)v17;
    v27 = *((_QWORD *)v17 + 1);
    v28 = v17[16];
    outlined copy of Text.Storage(*(_QWORD *)v17, v27, v28);
    *(_QWORD *)v16 = v26;
    *(_QWORD *)(v16 + 8) = v27;
    *(_BYTE *)(v16 + 16) = v28;
    *(_QWORD *)(v16 + 24) = *((_QWORD *)v17 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v30;
  }
  v31 = a3[7];
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a1 + v31 + 24);
  v35 = *(_QWORD *)((char *)a2 + v31 + 24);
  if (v34)
  {
    if (v35)
    {
      v36 = *(_QWORD *)v33;
      v37 = *((_QWORD *)v33 + 1);
      v38 = v33[16];
      outlined copy of Text.Storage(*(_QWORD *)v33, v37, v38);
      v39 = *(_QWORD *)v32;
      v40 = *(_QWORD *)(v32 + 8);
      v41 = *(_BYTE *)(v32 + 16);
      *(_QWORD *)v32 = v36;
      *(_QWORD *)(v32 + 8) = v37;
      *(_BYTE *)(v32 + 16) = v38;
      outlined consume of Text.Storage(v39, v40, v41);
      *(_QWORD *)(v32 + 24) = *((_QWORD *)v33 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v32);
      v45 = *((_OWORD *)v33 + 1);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 16) = v45;
    }
  }
  else if (v35)
  {
    v42 = *(_QWORD *)v33;
    v43 = *((_QWORD *)v33 + 1);
    v44 = v33[16];
    outlined copy of Text.Storage(*(_QWORD *)v33, v43, v44);
    *(_QWORD *)v32 = v42;
    *(_QWORD *)(v32 + 8) = v43;
    *(_BYTE *)(v32 + 16) = v44;
    *(_QWORD *)(v32 + 24) = *((_QWORD *)v33 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *((_OWORD *)v33 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v46;
  }
  v47 = a3[8];
  v48 = (uint64_t)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = *(_QWORD *)((char *)a1 + v47 + 24);
  v51 = *(_QWORD *)((char *)a2 + v47 + 24);
  if (v50)
  {
    if (v51)
    {
      v52 = *(_QWORD *)v49;
      v53 = *((_QWORD *)v49 + 1);
      v54 = v49[16];
      outlined copy of Text.Storage(*(_QWORD *)v49, v53, v54);
      v55 = *(_QWORD *)v48;
      v56 = *(_QWORD *)(v48 + 8);
      v57 = *(_BYTE *)(v48 + 16);
      *(_QWORD *)v48 = v52;
      *(_QWORD *)(v48 + 8) = v53;
      *(_BYTE *)(v48 + 16) = v54;
      outlined consume of Text.Storage(v55, v56, v57);
      *(_QWORD *)(v48 + 24) = *((_QWORD *)v49 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v48);
      v61 = *((_OWORD *)v49 + 1);
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *(_OWORD *)(v48 + 16) = v61;
    }
  }
  else if (v51)
  {
    v58 = *(_QWORD *)v49;
    v59 = *((_QWORD *)v49 + 1);
    v60 = v49[16];
    outlined copy of Text.Storage(*(_QWORD *)v49, v59, v60);
    *(_QWORD *)v48 = v58;
    *(_QWORD *)(v48 + 8) = v59;
    *(_BYTE *)(v48 + 16) = v60;
    *(_QWORD *)(v48 + 24) = *((_QWORD *)v49 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v62 = *((_OWORD *)v49 + 1);
    *(_OWORD *)v48 = *(_OWORD *)v49;
    *(_OWORD *)(v48 + 16) = v62;
  }
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v63 = a3[11];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  type metadata accessor for Predicate<Pack{URL}>();
  v67 = v66;
  v68 = *(_QWORD *)(v66 - 8);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  v70 = v69(v64, 1, v66);
  v71 = v69(v65, 1, v67);
  if (!v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v64, v65, v67);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v64, v67);
    goto LABEL_34;
  }
  if (v71)
  {
LABEL_34:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v65, v67);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
LABEL_35:
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v73 = a3[13];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = *(_QWORD *)v75;
  v74[8] = v75[8];
  *(_QWORD *)v74 = v76;
  v77 = a3[14];
  v78 = (_QWORD *)((char *)a1 + v77);
  v79 = (_QWORD *)((char *)a2 + v77);
  v80 = v79[1];
  *v78 = *v79;
  v78[1] = v80;
  swift_retain();
  swift_release();
  v81 = a3[15];
  v82 = (_QWORD *)((char *)a1 + v81);
  v83 = (_QWORD *)((char *)a2 + v81);
  v84 = v83[1];
  *v82 = *v83;
  v82[1] = v84;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for FileImportOperation(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_OWORD *)((char *)a1 + v12);
  v15 = (_OWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_OWORD *)((char *)a1 + v13);
  v18 = (_OWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_OWORD *)((char *)a1 + v20);
  v23 = (_OWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  v25 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  type metadata accessor for Predicate<Pack{URL}>();
  v29 = v28;
  v30 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v27, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
  }
  v32 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v34[8];
  v35 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v35) = *(_OWORD *)((char *)a2 + v35);
  return a1;
}

_QWORD *assignWithTake for FileImportOperation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (uint64_t)a1 + v16;
  v18 = (char *)a2 + v16;
  if (*(_QWORD *)((char *)a1 + v16 + 24))
  {
    if (*((_QWORD *)v18 + 3))
    {
      v19 = v18[16];
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)(v17 + 8);
      v22 = *(_BYTE *)(v17 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_BYTE *)(v17 + 16) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(_QWORD *)(v17 + 24) = *((_QWORD *)v18 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined destroy of Text(v17);
  }
  v23 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_12:
  v24 = a3[7];
  v25 = (uint64_t)a1 + v24;
  v26 = (char *)a2 + v24;
  if (*(_QWORD *)((char *)a1 + v24 + 24))
  {
    if (*((_QWORD *)v26 + 3))
    {
      v27 = v26[16];
      v28 = *(_QWORD *)v25;
      v29 = *(_QWORD *)(v25 + 8);
      v30 = *(_BYTE *)(v25 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_BYTE *)(v25 + 16) = v27;
      outlined consume of Text.Storage(v28, v29, v30);
      *(_QWORD *)(v25 + 24) = *((_QWORD *)v26 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of Text(v25);
  }
  v31 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v31;
LABEL_17:
  v32 = a3[8];
  v33 = (uint64_t)a1 + v32;
  v34 = (char *)a2 + v32;
  if (*(_QWORD *)((char *)a1 + v32 + 24))
  {
    if (*((_QWORD *)v34 + 3))
    {
      v35 = v34[16];
      v36 = *(_QWORD *)v33;
      v37 = *(_QWORD *)(v33 + 8);
      v38 = *(_BYTE *)(v33 + 16);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *(_BYTE *)(v33 + 16) = v35;
      outlined consume of Text.Storage(v36, v37, v38);
      *(_QWORD *)(v33 + 24) = *((_QWORD *)v34 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    outlined destroy of Text(v33);
  }
  v39 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v39;
LABEL_22:
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  v40 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  type metadata accessor for Predicate<Pack{URL}>();
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v41, 1, v43);
  v48 = v46(v42, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v41, v42, v44);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v44);
    goto LABEL_27;
  }
  if (v48)
  {
LABEL_27:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v42, v44);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
LABEL_28:
  v50 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v52[8];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  swift_release();
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  swift_release();
  return a1;
}

uint64_t sub_187A0E154(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    v8 = v12;
    v7 = *(_QWORD *)(v12 - 8);
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[9]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

void sub_187A0E218(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
      return;
    }
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    v10 = v12;
    v9 = *(_QWORD *)(v12 - 8);
    v11 = a4[11];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

ValueMetadata *type metadata accessor for FileImportOperation.Key()
{
  return &type metadata for FileImportOperation.Key;
}

uint64_t protocol witness for ConfigurableFileOperation.customizationID.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.defaultDirectory.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s10Foundation9PredicateVyAA3URLV_QPGSgWOdTm_0(a1, v2 + *(int *)(a2 + 20), (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

uint64_t protocol witness for ConfigurableFileOperation.message.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t result;

  v10 = (uint64_t *)(v5 + *(int *)(a5 + 24));
  result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.urlEnabled.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s10Foundation9PredicateVyAA3URLV_QPGSgWOdTm_0(a1, v2 + *(int *)(a2 + 44), &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
}

uint64_t protocol witness for ConfigurableFileOperation.importsUnresolvedAliases.setter in conformance FileImportOperation(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.browserOptions.setter in conformance FileImportOperation(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v3 = *(_BYTE *)(result + 8);
  v4 = v2 + *(int *)(a2 + 52);
  *(_QWORD *)v4 = *(_QWORD *)result;
  *(_BYTE *)(v4 + 8) = v3;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FileImportOperation.Key(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with take of FileImportOperation?(a1, (uint64_t)v7);
  v12 = type metadata accessor for FileImportOperation(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
  {
    a2();
    outlined destroy of FileImportOperation?((uint64_t)v7);
  }
  else
  {
    outlined init with take of FileImportOperation((uint64_t)v7, (uint64_t)v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  }
  return outlined init with take of FileImportOperation?((uint64_t)v11, a1);
}

uint64_t outlined init with take of FileImportOperation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FileImportOperation?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of FileImportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FileImportOperation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation9PredicateVyAA3URLV_QPGSgWOdTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for FileImportOperation.Resolved(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for FileImportOperation(0);
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (*(_QWORD *)((char *)a2 + v17 + 24))
    {
      v20 = *(_QWORD *)v19;
      v21 = *((_QWORD *)v19 + 1);
      v22 = v19[16];
      outlined copy of Text.Storage(*(_QWORD *)v19, v21, v22);
      *(_QWORD *)v18 = v20;
      *((_QWORD *)v18 + 1) = v21;
      v18[16] = v22;
      *((_QWORD *)v18 + 3) = *((_QWORD *)v19 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v23;
    }
    v24 = v8[7];
    v25 = (char *)v4 + v24;
    v26 = (char *)a2 + v24;
    if (*(_QWORD *)((char *)a2 + v24 + 24))
    {
      v27 = *(_QWORD *)v26;
      v28 = *((_QWORD *)v26 + 1);
      v29 = v26[16];
      outlined copy of Text.Storage(*(_QWORD *)v26, v28, v29);
      *(_QWORD *)v25 = v27;
      *((_QWORD *)v25 + 1) = v28;
      v25[16] = v29;
      *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = *((_OWORD *)v26 + 1);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v30;
    }
    v31 = v8[8];
    v32 = (char *)v4 + v31;
    v33 = (char *)a2 + v31;
    if (*(_QWORD *)((char *)a2 + v31 + 24))
    {
      v34 = *(_QWORD *)v33;
      v35 = *((_QWORD *)v33 + 1);
      v36 = v33[16];
      outlined copy of Text.Storage(*(_QWORD *)v33, v35, v36);
      *(_QWORD *)v32 = v34;
      *((_QWORD *)v32 + 1) = v35;
      v32[16] = v36;
      *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v37 = *((_OWORD *)v33 + 1);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v37;
    }
    *(_QWORD *)((char *)v4 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
    *((_BYTE *)v4 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    v38 = v8[11];
    v39 = (char *)v4 + v38;
    v40 = (char *)a2 + v38;
    type metadata accessor for Predicate<Pack{URL}>();
    v42 = v41;
    v43 = *(_QWORD *)(v41 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    if (v44(v40, 1, v42))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v40, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
    }
    *((_BYTE *)v4 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    v46 = v8[13];
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = v8[14];
    v50 = (_QWORD *)((char *)v4 + v49);
    v51 = (_QWORD *)((char *)a2 + v49);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = v8[15];
    v54 = (_QWORD *)((char *)v4 + v53);
    v55 = (_QWORD *)((char *)a2 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = a3[5];
    v58 = a3[6];
    v59 = (_QWORD *)((char *)v4 + v57);
    v60 = (_QWORD *)((char *)a2 + v57);
    v61 = v60[1];
    *v59 = *v60;
    v59[1] = v61;
    v62 = (_QWORD *)((char *)v4 + v58);
    v63 = (_QWORD *)((char *)a2 + v58);
    v64 = v63[1];
    *v62 = *v63;
    v62[1] = v64;
    v65 = a3[7];
    v66 = (_QWORD *)((char *)v4 + v65);
    v67 = (_QWORD *)((char *)a2 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FileImportOperation.Resolved(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for FileImportOperation(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v6 = a1 + v2[6];
  if (*(_QWORD *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  v7 = a1 + v2[7];
  if (*(_QWORD *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v8 = a1 + v2[8];
  if (*(_QWORD *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v9 = a1 + v2[11];
  type metadata accessor for Predicate<Pack{URL}>();
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FileImportOperation.Resolved(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for FileImportOperation(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  if (*(_QWORD *)((char *)a2 + v15 + 24))
  {
    v18 = *(_QWORD *)v17;
    v19 = *((_QWORD *)v17 + 1);
    v20 = v17[16];
    outlined copy of Text.Storage(*(_QWORD *)v17, v19, v20);
    *(_QWORD *)v16 = v18;
    *((_QWORD *)v16 + 1) = v19;
    v16[16] = v20;
    *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v21;
  }
  v22 = v7[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  if (*(_QWORD *)((char *)a2 + v22 + 24))
  {
    v25 = *(_QWORD *)v24;
    v26 = *((_QWORD *)v24 + 1);
    v27 = v24[16];
    outlined copy of Text.Storage(*(_QWORD *)v24, v26, v27);
    *(_QWORD *)v23 = v25;
    *((_QWORD *)v23 + 1) = v26;
    v23[16] = v27;
    *((_QWORD *)v23 + 3) = *((_QWORD *)v24 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v28;
  }
  v29 = v7[8];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  if (*(_QWORD *)((char *)a2 + v29 + 24))
  {
    v32 = *(_QWORD *)v31;
    v33 = *((_QWORD *)v31 + 1);
    v34 = v31[16];
    outlined copy of Text.Storage(*(_QWORD *)v31, v33, v34);
    *(_QWORD *)v30 = v32;
    *((_QWORD *)v30 + 1) = v33;
    v30[16] = v34;
    *((_QWORD *)v30 + 3) = *((_QWORD *)v31 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v35 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v35;
  }
  *(_QWORD *)((char *)a1 + v7[9]) = *(_QWORD *)((char *)a2 + v7[9]);
  *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
  v36 = v7[11];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  type metadata accessor for Predicate<Pack{URL}>();
  v40 = v39;
  v41 = *(_QWORD *)(v39 - 8);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  if (v42(v38, 1, v40))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v37, v38, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
  }
  *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
  v44 = v7[13];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v7[14];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  v51 = v7[15];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = a3[5];
  v56 = a3[6];
  v57 = (_QWORD *)((char *)a1 + v55);
  v58 = (_QWORD *)((char *)a2 + v55);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v60 = (_QWORD *)((char *)a1 + v56);
  v61 = (_QWORD *)((char *)a2 + v56);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v63 = a3[7];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  v66 = v65[1];
  *v64 = *v65;
  v64[1] = v66;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FileImportOperation.Resolved(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for FileImportOperation(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = v6[6];
  v17 = (uint64_t)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)((char *)a1 + v16 + 24);
  v20 = *(_QWORD *)((char *)a2 + v16 + 24);
  if (v19)
  {
    if (v20)
    {
      v21 = *(_QWORD *)v18;
      v22 = *((_QWORD *)v18 + 1);
      v23 = v18[16];
      outlined copy of Text.Storage(*(_QWORD *)v18, v22, v23);
      v24 = *(_QWORD *)v17;
      v25 = *(_QWORD *)(v17 + 8);
      v26 = *(_BYTE *)(v17 + 16);
      *(_QWORD *)v17 = v21;
      *(_QWORD *)(v17 + 8) = v22;
      *(_BYTE *)(v17 + 16) = v23;
      outlined consume of Text.Storage(v24, v25, v26);
      *(_QWORD *)(v17 + 24) = *((_QWORD *)v18 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v17);
      v30 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v30;
    }
  }
  else if (v20)
  {
    v27 = *(_QWORD *)v18;
    v28 = *((_QWORD *)v18 + 1);
    v29 = v18[16];
    outlined copy of Text.Storage(*(_QWORD *)v18, v28, v29);
    *(_QWORD *)v17 = v27;
    *(_QWORD *)(v17 + 8) = v28;
    *(_BYTE *)(v17 + 16) = v29;
    *(_QWORD *)(v17 + 24) = *((_QWORD *)v18 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v31;
  }
  v32 = v6[7];
  v33 = (uint64_t)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a1 + v32 + 24);
  v36 = *(_QWORD *)((char *)a2 + v32 + 24);
  if (v35)
  {
    if (v36)
    {
      v37 = *(_QWORD *)v34;
      v38 = *((_QWORD *)v34 + 1);
      v39 = v34[16];
      outlined copy of Text.Storage(*(_QWORD *)v34, v38, v39);
      v40 = *(_QWORD *)v33;
      v41 = *(_QWORD *)(v33 + 8);
      v42 = *(_BYTE *)(v33 + 16);
      *(_QWORD *)v33 = v37;
      *(_QWORD *)(v33 + 8) = v38;
      *(_BYTE *)(v33 + 16) = v39;
      outlined consume of Text.Storage(v40, v41, v42);
      *(_QWORD *)(v33 + 24) = *((_QWORD *)v34 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v33);
      v46 = *((_OWORD *)v34 + 1);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *(_OWORD *)(v33 + 16) = v46;
    }
  }
  else if (v36)
  {
    v43 = *(_QWORD *)v34;
    v44 = *((_QWORD *)v34 + 1);
    v45 = v34[16];
    outlined copy of Text.Storage(*(_QWORD *)v34, v44, v45);
    *(_QWORD *)v33 = v43;
    *(_QWORD *)(v33 + 8) = v44;
    *(_BYTE *)(v33 + 16) = v45;
    *(_QWORD *)(v33 + 24) = *((_QWORD *)v34 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v47 = *((_OWORD *)v34 + 1);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *(_OWORD *)(v33 + 16) = v47;
  }
  v48 = v6[8];
  v49 = (uint64_t)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *(_QWORD *)((char *)a1 + v48 + 24);
  v52 = *(_QWORD *)((char *)a2 + v48 + 24);
  if (v51)
  {
    if (v52)
    {
      v53 = *(_QWORD *)v50;
      v54 = *((_QWORD *)v50 + 1);
      v55 = v50[16];
      outlined copy of Text.Storage(*(_QWORD *)v50, v54, v55);
      v56 = *(_QWORD *)v49;
      v57 = *(_QWORD *)(v49 + 8);
      v58 = *(_BYTE *)(v49 + 16);
      *(_QWORD *)v49 = v53;
      *(_QWORD *)(v49 + 8) = v54;
      *(_BYTE *)(v49 + 16) = v55;
      outlined consume of Text.Storage(v56, v57, v58);
      *(_QWORD *)(v49 + 24) = *((_QWORD *)v50 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v49);
      v62 = *((_OWORD *)v50 + 1);
      *(_OWORD *)v49 = *(_OWORD *)v50;
      *(_OWORD *)(v49 + 16) = v62;
    }
  }
  else if (v52)
  {
    v59 = *(_QWORD *)v50;
    v60 = *((_QWORD *)v50 + 1);
    v61 = v50[16];
    outlined copy of Text.Storage(*(_QWORD *)v50, v60, v61);
    *(_QWORD *)v49 = v59;
    *(_QWORD *)(v49 + 8) = v60;
    *(_BYTE *)(v49 + 16) = v61;
    *(_QWORD *)(v49 + 24) = *((_QWORD *)v50 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v63 = *((_OWORD *)v50 + 1);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v63;
  }
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
  v64 = v6[11];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  type metadata accessor for Predicate<Pack{URL}>();
  v68 = v67;
  v69 = *(_QWORD *)(v67 - 8);
  v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  v71 = v70(v65, 1, v67);
  v72 = v70(v66, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 24))(v65, v66, v68);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v69 + 8))(v65, v68);
    goto LABEL_34;
  }
  if (v72)
  {
LABEL_34:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v65, v66, v68);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v65, 0, 1, v68);
LABEL_35:
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  v74 = v6[13];
  v75 = (char *)a1 + v74;
  v76 = (char *)a2 + v74;
  v77 = *(_QWORD *)v76;
  v75[8] = v76[8];
  *(_QWORD *)v75 = v77;
  v78 = v6[14];
  v79 = (_QWORD *)((char *)a1 + v78);
  v80 = (_QWORD *)((char *)a2 + v78);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  swift_retain();
  swift_release();
  v82 = v6[15];
  v83 = (_QWORD *)((char *)a1 + v82);
  v84 = (_QWORD *)((char *)a2 + v82);
  v85 = v84[1];
  *v83 = *v84;
  v83[1] = v85;
  swift_retain();
  swift_release();
  v86 = a3[5];
  v87 = (_QWORD *)((char *)a1 + v86);
  v88 = (_QWORD *)((char *)a2 + v86);
  *v87 = *v88;
  v87[1] = v88[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89 = a3[6];
  v90 = (_QWORD *)((char *)a1 + v89);
  v91 = (_QWORD *)((char *)a2 + v89);
  *v90 = *v91;
  v90[1] = v91[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v92 = a3[7];
  v93 = (_QWORD *)((char *)a1 + v92);
  v94 = (_QWORD *)((char *)a2 + v92);
  *v93 = *v94;
  v93[1] = v94[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for FileImportOperation.Resolved(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for FileImportOperation(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = v6[6];
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v6[7];
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v6[8];
  v22 = (_OWORD *)((char *)a1 + v21);
  v23 = (_OWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
  v25 = v6[11];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  type metadata accessor for Predicate<Pack{URL}>();
  v29 = v28;
  v30 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v27, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
  }
  *((_BYTE *)a1 + v6[12]) = *((_BYTE *)a2 + v6[12]);
  v32 = v6[13];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v34[8];
  *(_OWORD *)((char *)a1 + v6[14]) = *(_OWORD *)((char *)a2 + v6[14]);
  *(_OWORD *)((char *)a1 + v6[15]) = *(_OWORD *)((char *)a2 + v6[15]);
  v35 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v35) = *(_OWORD *)((char *)a2 + v35);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for FileImportOperation.Resolved(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for FileImportOperation(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = v7[6];
  v18 = (uint64_t)a1 + v17;
  v19 = (char *)a2 + v17;
  if (*(_QWORD *)((char *)a1 + v17 + 24))
  {
    if (*((_QWORD *)v19 + 3))
    {
      v20 = v19[16];
      v21 = *(_QWORD *)v18;
      v22 = *(_QWORD *)(v18 + 8);
      v23 = *(_BYTE *)(v18 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_BYTE *)(v18 + 16) = v20;
      outlined consume of Text.Storage(v21, v22, v23);
      *(_QWORD *)(v18 + 24) = *((_QWORD *)v19 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined destroy of Text(v18);
  }
  v24 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v24;
LABEL_12:
  v25 = v7[7];
  v26 = (uint64_t)a1 + v25;
  v27 = (char *)a2 + v25;
  if (*(_QWORD *)((char *)a1 + v25 + 24))
  {
    if (*((_QWORD *)v27 + 3))
    {
      v28 = v27[16];
      v29 = *(_QWORD *)v26;
      v30 = *(_QWORD *)(v26 + 8);
      v31 = *(_BYTE *)(v26 + 16);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_BYTE *)(v26 + 16) = v28;
      outlined consume of Text.Storage(v29, v30, v31);
      *(_QWORD *)(v26 + 24) = *((_QWORD *)v27 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of Text(v26);
  }
  v32 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v32;
LABEL_17:
  v33 = v7[8];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  if (*(_QWORD *)((char *)a1 + v33 + 24))
  {
    if (*((_QWORD *)v35 + 3))
    {
      v36 = v35[16];
      v37 = *(_QWORD *)v34;
      v38 = *(_QWORD *)(v34 + 8);
      v39 = *(_BYTE *)(v34 + 16);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_BYTE *)(v34 + 16) = v36;
      outlined consume of Text.Storage(v37, v38, v39);
      *(_QWORD *)(v34 + 24) = *((_QWORD *)v35 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    outlined destroy of Text(v34);
  }
  v40 = *((_OWORD *)v35 + 1);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v40;
LABEL_22:
  *(_QWORD *)((char *)a1 + v7[9]) = *(_QWORD *)((char *)a2 + v7[9]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v7[10]) = *((_BYTE *)a2 + v7[10]);
  v41 = v7[11];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  type metadata accessor for Predicate<Pack{URL}>();
  v45 = v44;
  v46 = *(_QWORD *)(v44 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v42, 1, v44);
  v49 = v47(v43, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v42, v43, v45);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v45);
    goto LABEL_27;
  }
  if (v49)
  {
LABEL_27:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v42, v43, v45);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
LABEL_28:
  *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
  v51 = v7[13];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
  *(_OWORD *)((char *)a1 + v7[14]) = *(_OWORD *)((char *)a2 + v7[14]);
  swift_release();
  *(_OWORD *)((char *)a1 + v7[15]) = *(_OWORD *)((char *)a2 + v7[15]);
  swift_release();
  v54 = a3[5];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  v59 = a3[6];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (_QWORD *)((char *)a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  v64 = a3[7];
  v65 = (_QWORD *)((char *)a1 + v64);
  v66 = (_QWORD *)((char *)a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileImportOperation.Resolved()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A0F9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for FileImportOperation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for FileImportOperation.Resolved()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A0FA64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FileImportOperation(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for FileImportOperation.Resolved(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportOperation.Resolved);
}

uint64_t type metadata completion function for FileImportOperation.Resolved()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FileImportOperation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void $defer #2 () in HostingScrollView.updateContext(_:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  double v14;
  double v15;
  double *v16;

  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper);
  v6 = *(_DWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v7 = __OFSUB__(v6, 1);
  v8 = v6 - 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v8;
    if (!v8 && *(_BYTE *)(v5 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
      ScrollViewHelper.updateGraphState(isPreferred:)(0);
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection))
      v14 = a3;
    else
      v14 = a5;
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection))
      v15 = a5;
    else
      v15 = a3;
    v16 = (double *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets);
    *v16 = a2;
    v16[1] = v15;
    v16[2] = a4;
    v16[3] = v14;
  }
}

uint64_t closure #1 in closure #1 in HostingScrollView.updateContext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  *v6 = a2;
  v6[1] = a3;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  v8 = (_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset);
  *(int64x2_t *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset) = vdupq_n_s64(0x7FF0000000000000uLL);
  swift_retain();
  HostingScrollView.updateAnimationTarget(_:)(a2, a3);
  *v8 = 0;
  v8[1] = 0;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig) != 2)
  {
    v9 = a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig;
    *(_BYTE *)(v9 + 2) = 0;
    *(_WORD *)v9 = 2;
  }
  v10 = *v6;
  *v6 = 0;
  v6[1] = 0;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
}

uint64_t HostingScrollView.updateAnimationTarget(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t result;
  double v25;
  char v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char **v36;
  objc_super v37;

  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(v2, sel_adjustedContentInset);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  objc_msgSend(v2, sel_contentOffset);
  v15 = v9 + v14;
  v17 = v7 + v16;
  v37.receiver = v2;
  v37.super_class = ObjectType;
  objc_msgSendSuper2(&v37, sel_bounds);
  if (v18 - (v9 + v13) < 0.0)
    v20 = 0.0;
  else
    v20 = v18 - (v9 + v13);
  if (v19 - (v7 + v11) < 0.0)
    v21 = 0.0;
  else
    v21 = v19 - (v7 + v11);
  objc_msgSend(v2, sel_contentSize);
  *(double *)&result = COERCE_DOUBLE(specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(a1, a2, v15, v17, v20, v21, v22, v23));
  if ((v26 & 1) == 0)
  {
    v27 = result;
    v28 = v25;
    v29 = *(double *)&result;
    v30 = v25;
    v31 = (double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    if (*(double *)&result - *(double *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset] != 0.0
      || v25 - v31[1] != 0.0)
    {
      objc_msgSend(v2, sel_adjustedContentInset, *(_QWORD *)&v11, *(_QWORD *)&v13);
      v33 = v29 - v32;
      v35 = v30 - v34;
      if (!objc_msgSend(v2, sel_isScrollAnimating)
        || (v36 = &selRef__updateScrollAnimationForChangedTargetOffset_,
            (objc_msgSend(v2, sel_respondsToSelector_, sel__updateScrollAnimationForChangedTargetOffset_) & 1) == 0))
      {
        v36 = &selRef_setContentOffset_;
      }
      *(double *)&result = COERCE_DOUBLE(objc_msgSend(v2, *v36, v33, v35));
      *(_QWORD *)v31 = v27;
      v31[1] = v28;
    }
  }
  return result;
}

void closure #1 in HostingScrollView.checkAnimationCompletion()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  objc_class *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char v35;
  double v36;
  double v37;
  double *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  int v48;
  int v49;
  objc_super v50;
  char v51;
  objc_super v52;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (!v2)
    return;
  v3 = (char *)v2;
  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  if (!v5)
    goto LABEL_25;
  v6 = v4[1];
  v7 = swift_retain();
  MEMORY[0x18D75B908](v7);
  v8 = OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper;
  v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  v10 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  v11 = *(_DWORD *)(v9 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_DWORD *)(v9 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v13;
  objc_msgSend(v3, sel_adjustedContentInset);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  objc_msgSend(v3, sel_contentOffset);
  v23 = v17 + v22;
  v25 = v15 + v24;
  v26 = (objc_class *)type metadata accessor for HostingScrollView();
  v52.receiver = v3;
  v52.super_class = v26;
  objc_msgSendSuper2(&v52, sel_bounds);
  if (v27 - (v17 + v21) < 0.0)
    v29 = 0.0;
  else
    v29 = v27 - (v17 + v21);
  if (v28 - (v15 + v19) < 0.0)
    v30 = 0.0;
  else
    v30 = v28 - (v15 + v19);
  objc_msgSend(v3, sel_contentSize);
  v51 = v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection];
  v33 = COERCE_DOUBLE(specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(v5, v6, v23, v25, v29, v30, v31, v32));
  if ((v35 & 1) == 0)
  {
    v36 = v33;
    v37 = v34;
    v38 = (double *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    if (v33 - *(double *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset] != 0.0 || v34 - v38[1] != 0.0)
    {
      objc_msgSend(v3, sel_adjustedContentInset, *(_QWORD *)&v19, *(_QWORD *)&v21);
      v45 = v36 - v44;
      v47 = v37 - v46;
      v50.receiver = v3;
      v50.super_class = v26;
      objc_msgSendSuper2(&v50, sel_setContentOffset_animated_, 1, v45, v47);
      *(_BYTE *)(v9 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 4;
      ScrollViewHelper.updateGraphState(isPreferred:)(0);
      *v38 = v45;
      v38[1] = v47;
      v48 = *(_DWORD *)(v9 + v10);
      v12 = __OFSUB__(v48, 1);
      v49 = v48 - 1;
      if (v12)
      {
LABEL_29:
        __break(1u);
        return;
      }
      *(_DWORD *)(v9 + v10) = v49;
      if (!v49 && *(_BYTE *)(v9 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
      static Update.end()();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
LABEL_25:

      return;
    }
  }
  if (v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig] != 2)
  {
    v39 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
    v39[2] = 0;
    *(_WORD *)v39 = 2;
  }
  v40 = *v4;
  *v4 = 0;
  v4[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v40);
  v41 = *(_QWORD *)&v3[v8];
  v42 = *(_DWORD *)(v41 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v12 = __OFSUB__(v42, 1);
  v43 = v42 - 1;
  if (v12)
    goto LABEL_28;
  *(_DWORD *)(v41 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v43;
  if (!v43 && *(_BYTE *)(v41 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  static Update.end()();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
}

void HostingScrollView.bounds.didset()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;

  HostingScrollView.PlatformGroupContainer.pruneFillerItems()();
  v1 = objc_msgSend(v0, sel_isTracking);
  if ((_DWORD)v1 && *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget])
    *(_BYTE *)(*(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper]
             + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  v4 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  v5 = *(_DWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v7;
  MEMORY[0x1E0C80A78](v1, v2);
  static Update.ensure<A>(_:)();
  v8 = *(_DWORD *)(v3 + v4);
  v6 = __OFSUB__(v8, 1);
  v9 = v8 - 1;
  if (v6)
  {
LABEL_11:
    __break(1u);
    return;
  }
  *(_DWORD *)(v3 + v4) = v9;
  if (!v9 && *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
}

void closure #1 in HostingScrollView.bounds.didset(char *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v23;
  CGRect v24;
  __C::CGRect v25;
  CGRect v26;
  __C::CGRect v27;

  v23.receiver = a1;
  v23.super_class = (Class)type metadata accessor for HostingScrollView();
  objc_msgSendSuper2(&v23, sel_bounds);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  v26.origin.x = v11;
  v26.origin.y = v13;
  v26.size.width = v15;
  v26.size.height = v17;
  if (!CGRectEqualToRect(v24, v26))
  {
    v18 = (uint64_t *)&a1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
    v19 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
    if (v19)
    {
      v20 = v18[1];
      *v18 = 0;
      v18[1] = 0;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
      HostingScrollView.updateAnimationTarget(_:)(v19, v20);
      if (objc_msgSend(a1, sel_isScrollAnimating))
      {
        v21 = *v18;
        *v18 = v19;
        v18[1] = v20;
      }
      else
      {
        v21 = v19;
      }
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
    }
  }
  if (v11 != a2 || v13 != a3)
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  v27.origin.x = v11;
  v27.origin.y = v13;
  v27.size.width = v15;
  v27.size.height = v17;
  ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)(v25, v27);
}

uint64_t HostingScrollView._shouldScrollToContentBeginningInRightToLeft.getter()
{
  uint64_t v0;
  char v1;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper)
                 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes) & 1) != 0
    && (static Semantics.v6.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
  {
    static Semantics.v4_4.getter();
    v1 = isLinkedOnOrAfter(_:)();
  }
  else
  {
    v1 = 0;
  }
  return v1 & 1;
}

uint64_t protocol witness for AnyPlatformViewHost.responder.getter in conformance HostingScrollView()
{
  return swift_weakLoadStrong();
}

BOOL protocol witness for ScrollViewHelperDelegate.scrollToTop() in conformance HostingScrollView()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture);
  if (v1)
  {
    v2 = swift_retain();
    v1(v2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  }
  return v1 != 0;
}

uint64_t HostingScrollView.PlatformGroupContainer._childContainers.getter()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  void *v3;
  uint64_t Strong;
  unint64_t v5;
  uint64_t v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  if ((MEMORY[0x18D75A3D8]() & 1) != 0)
  {
    v2 = MEMORY[0x18D760234](&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView]);
    if (v2 && (v3 = (void *)v2, Strong = swift_weakLoadStrong(), v3, Strong))
    {
      v5 = ViewResponder.childGestureContainers.getter();
      swift_release();
      if (v5 >> 62)
      {
LABEL_5:
        type metadata accessor for _UIGestureRecognizerContainer();
        swift_bridgeObjectRetain();
        v6 = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease_n();
        return v6;
      }
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
      if (MEMORY[0x1E0DEE9D8] >> 62)
        goto LABEL_5;
    }
    v9 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UIGestureRecognizerContainer();
    if (swift_dynamicCastMetatype() || (v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_9:
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = v9 + 32;
      while (swift_dynamicCastObjCProtocolConditional())
      {
        v11 += 8;
        if (!--v10)
          goto LABEL_9;
      }
      swift_bridgeObjectRelease();
      return v9 | 1;
    }
  }
  else
  {
    v12.receiver = v0;
    v12.super_class = ObjectType;
    v8 = objc_msgSendSuper2(&v12, sel__childGestureRecognizerContainers);
    type metadata accessor for _UIGestureRecognizerContainer();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  return v5;
}

id HostingScrollView.PlatformGroupContainer.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  id v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBounds] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableFillerBounds] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBorder] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__pixelLength] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem] = 0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

void partial apply for closure #1 in HostingScrollView.bounds.didset()
{
  uint64_t v0;

  closure #1 in HostingScrollView.bounds.didset(*(char **)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

uint64_t sub_187A10D54()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A10D7C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in HostingScrollView.checkAnimationCompletion()()
{
  uint64_t v0;

  closure #1 in HostingScrollView.checkAnimationCompletion()(v0);
}

uint64_t partial apply for closure #1 in closure #1 in HostingScrollView.updateContext(_:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in HostingScrollView.updateContext(_:)(v0[2], v0[3], v0[4]);
}

void specialized HostingScrollView.init(coder:)()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  _OWORD *v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;

  swift_weakInit();
  v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_rtlAdjustment] = 0;
  v1 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  *v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_descendantScrollableAxes] = 0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_QWORD *)v2 + 8) = 0xF000000000000004;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets];
  *v3 = 0u;
  v3[1] = 0u;
  v4 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
  v5[2] = 0;
  *(_WORD *)v5 = 2;
  v6 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
  *v6 = 0;
  v6[1] = 0;
  v7 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 0;
  *v7 = v8;
  v7[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  swift_weakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t objectdestroy_3Tm_4()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

Swift::Void __swiftcall TabViewCustomization.validateCustomization(entries:)(Swift::OpaquePointer entries)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  char v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  Swift::String v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  _QWORD __dst[42];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int16 v35;
  unsigned __int8 v36;
  uint64_t v37;
  __int16 v38;
  id v39;
  __int128 v40;
  __int16 v41;
  char v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int16 v48;
  char v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  _OWORD v53[5];
  __int128 v54;
  uint64_t v55;
  _BYTE __src[264];
  char v57;

  v1 = *((_QWORD *)entries._rawValue + 2);
  if (v1)
  {
    v2 = (char *)entries._rawValue + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TabEntry((uint64_t)v2, (uint64_t)__src);
      if ((v57 & 1) != 0)
      {
        memcpy(__dst, __src, 0x108uLL);
        TabViewCustomization.validateCustomization(entries:)((Swift::OpaquePointer)__dst[1]);
        outlined destroy of TabItemGroup((uint64_t)__dst);
        goto LABEL_7;
      }
      v54 = *(_OWORD *)&__src[80];
      v53[3] = *(_OWORD *)&__src[48];
      v53[4] = *(_OWORD *)&__src[64];
      v53[0] = *(_OWORD *)__src;
      v53[1] = *(_OWORD *)&__src[16];
      v55 = *(_QWORD *)&__src[96];
      v53[2] = *(_OWORD *)&__src[32];
      v6 = *(_QWORD *)&__src[88];
      __dst[0] = *(_QWORD *)&__src[88];
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0)
      {
        v33 = v6;
        v7 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v7 != -1)
          swift_once();
        LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
        v40 = *(_OWORD *)&qword_1EDF00118;
        v41 = word_1EDF00128;
        v42 = byte_1EDF0012A;
        v43 = qword_1EDF00130;
        v44 = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        v8 = LOBYTE(__dst[0]);
        outlined consume of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
        swift_bridgeObjectRelease();
        outlined init with copy of TabItem((uint64_t)v53, (uint64_t)__dst);
        if (v8 == 2)
        {
          outlined destroy of TabItem((uint64_t)__dst);
          outlined init with copy of TabItem((uint64_t)v53, (uint64_t)&v39);
          v9 = 0;
        }
        else
        {
          v46 = __dst[11];
          LOWORD(v33) = static TabOptions.TraitKey.defaultValue;
          v34 = *(_OWORD *)&qword_1EDF00118;
          v35 = word_1EDF00128;
          v36 = byte_1EDF0012A;
          v37 = qword_1EDF00130;
          v38 = word_1EDF00138;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          v10 = v39;
          v11 = v44;
          v12 = HIBYTE(v44);
          outlined consume of TabCustomizationID?(v40, *((uint64_t *)&v40 + 1), v41);
          swift_bridgeObjectRelease();
          if (v12 == 1 && (v11 & 1) != 0)
            v13 = v10 == 1;
          else
            v13 = v10 < 2;
          outlined destroy of TabItem((uint64_t)__dst);
          outlined init with copy of TabItem((uint64_t)v53, (uint64_t)&v39);
          if (v13)
          {
            v9 = 0;
          }
          else
          {
            v31 = v45;
            LOWORD(v46) = static TabOptions.TraitKey.defaultValue;
            v47 = *(_OWORD *)&qword_1EDF00118;
            v48 = word_1EDF00128;
            v49 = byte_1EDF0012A;
            v50 = qword_1EDF00130;
            v51 = word_1EDF00138;
            ViewTraitCollection.value<A>(for:defaultValue:)();
            v14 = v36;
            outlined consume of TabCustomizationID?(v34, *((uint64_t *)&v34 + 1), v35);
            swift_bridgeObjectRelease();
            v9 = v14 == 1;
          }
        }
        outlined destroy of TabItem((uint64_t)&v39);
        v31 = *((_QWORD *)&v54 + 1);
        LOWORD(v46) = static TabOptions.TraitKey.defaultValue;
        v47 = *(_OWORD *)&qword_1EDF00118;
        v48 = word_1EDF00128;
        v49 = byte_1EDF0012A;
        v50 = qword_1EDF00130;
        v51 = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        v15 = HIBYTE(v35);
        outlined consume of TabCustomizationID?(v34, *((uint64_t *)&v34 + 1), v35);
        swift_bridgeObjectRelease();
        outlined init with copy of TabItem((uint64_t)v53, (uint64_t)&v46);
        if (v9 || v15 == 1)
        {
          v33 = v52;
          LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
          v40 = *(_OWORD *)&qword_1EDF00118;
          v41 = word_1EDF00128;
          v42 = byte_1EDF0012A;
          v43 = qword_1EDF00130;
          v44 = word_1EDF00138;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          v3 = __dst[1];
          v4 = __dst[2];
          v5 = LOBYTE(__dst[3]);
          outlined copy of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
          outlined consume of TabCustomizationID?(v3, v4, v5);
          swift_bridgeObjectRelease();
          if (v5 == 255)
          {
            outlined destroy of TabItem((uint64_t)&v46);
            __dst[0] = 0;
            __dst[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(215);
            v31 = __dst[0];
            v32 = __dst[1];
            v16._countAndFlagsBits = 0xD000000000000045;
            v16._object = (void *)0x8000000187BED620;
            String.append(_:)(v16);
            v39 = (id)*((_QWORD *)&v54 + 1);
            v17 = one-time initialization token for defaultValue;
            swift_bridgeObjectRetain();
            if (v17 != -1)
              swift_once();
            ViewTraitCollection.value<A>(for:defaultValue:)();
            swift_bridgeObjectRelease();
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&__dst[3], (uint64_t)&v33);
            outlined retain of PlatformItem.PrimaryContent?(&v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PlatformItem.PrimaryContent?);
            outlined destroy of PlatformItem((uint64_t)__dst);
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v33, (uint64_t)&v39);
            if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v39) == 1
              || (v18 = v39,
                  v19 = v39,
                  outlined retain of PlatformItem.PrimaryContent?(&v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PlatformItem.PrimaryContent?), !v18))
            {
              v26 = 0;
              v27 = 0xE000000000000000;
            }
            else
            {
              v20 = objc_msgSend(v19, sel_string);

              v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v23 = v22;

              __dst[0] = 39;
              __dst[1] = 0xE100000000000000;
              v24._countAndFlagsBits = v21;
              v24._object = v23;
              String.append(_:)(v24);
              v25._countAndFlagsBits = 8231;
              v25._object = (void *)0xE200000000000000;
              String.append(_:)(v25);
              swift_bridgeObjectRelease();
              v26 = __dst[0];
              v27 = __dst[1];
            }
            v28 = v27;
            String.append(_:)(*(Swift::String *)&v26);
            swift_bridgeObjectRelease();
            v29._countAndFlagsBits = 0xD000000000000090;
            v29._object = (void *)0x8000000187BED670;
            String.append(_:)(v29);
            MEMORY[0x18D75AC90](v31, v32);
            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
          outlined consume of TabCustomizationID?(v3, v4, v5);
        }
        outlined destroy of TabItem((uint64_t)&v46);
      }
LABEL_6:
      outlined destroy of TabItem((uint64_t)v53);
LABEL_7:
      v2 += 272;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t TabViewCustomization.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  int v8;
  char v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _BYTE *v12;
  void (*v13)(_QWORD *);
  _QWORD v15[4];

  v8 = a1;
  v9 = a4 & 1;
  v10 = v4 + *(int *)(type metadata accessor for TabViewCustomization() + 20);
  if (v8)
  {
    if (*(_QWORD *)(*(_QWORD *)v10 + 16))
      specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15[0] = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v10 = v15[0];
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = specialized Dictionary.subscript.modify(v15, a2, a3, v9);
    if (*v12 != 3)
      *v12 = 0;
    ((void (*)(_QWORD *, _QWORD))v13)(v15, 0);
  }
  return outlined consume of TabCustomizationID.Base();
}

unint64_t TabViewCustomization.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  UUID.init()();
  v2 = type metadata accessor for TabViewCustomization();
  v3 = *(int *)(v2 + 20);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + v3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v5 = *(int *)(v2 + 24);
  result = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(a1 + v5) = result;
  return result;
}

uint64_t type metadata accessor for TabViewCustomization()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TabViewCustomization;
  if (!type metadata singleton initialization cache for TabViewCustomization)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TabViewCustomization.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  v7 = 0;
  if ((v8 & 1) != 0)
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 56) + v6);
  swift_bridgeObjectRelease();
  return v7;
}

{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 24));
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain_n();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = swift_bridgeObjectRetain();
  v10 = specialized _ArrayProtocol.filter(_:)(v9);
  swift_bridgeObjectRelease();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_n(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t TabViewCustomization.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return TabViewCustomization.subscript.setter(a1, a2, a3, 0);
}

Swift::Void __swiftcall TabViewCustomization.resetVisibility()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v2 = *(int *)(type metadata accessor for TabViewCustomization() + 20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v2) = v1;
}

Swift::Void __swiftcall TabViewCustomization.resetSectionOrder()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v2 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v2) = v1;
}

Swift::Void __swiftcall TabViewCustomization.resetSectionOrder(for:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object, 0);
  LOBYTE(countAndFlagsBits) = v7;
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v2 + v5);
    *(_QWORD *)(v2 + v5) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
    outlined consume of TabCustomizationID.Base();
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *(_QWORD *)(v2 + v5) = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

uint64_t static TabViewCustomization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (v4 = type metadata accessor for TabViewCustomization(),
        (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 20)), *(_QWORD *)(a2 + *(int *)(v4 + 20))) & 1) != 0))
  {
    return specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TabViewCustomization.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  type metadata accessor for Binding<TabViewCustomization>?(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static TabViewCustomization.Key.defaultValue);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t (*TabViewCustomization.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;

  a1[1] = a3;
  a1[2] = v3;
  v6 = a1 + 3;
  *a1 = a2;
  v7 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, 0);
    v9 = 0;
    if ((v10 & 1) != 0)
      v9 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *v6 = v9;
  return TabSidebarCustomization.subscript.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TabViewCustomization.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7453626154726570;
  if (*v0 != 1)
    v1 = 0x6974636553726570;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabViewCustomization.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TabViewCustomization.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabViewCustomization.CodingKeys()
{
  lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabViewCustomization.CodingKeys()
{
  lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TabViewCustomization.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabViewCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys, (uint64_t)&unk_1E1AD5140, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = type metadata accessor for TabViewCustomization();
    v15 = *(_QWORD *)(v3 + *(int *)(v11 + 20));
    v14 = 1;
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabCustomizationEntry]);
    lazy protocol witness table accessor for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry and conformance TabCustomizationEntry, MEMORY[0x1E0DEA0B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = *(_QWORD *)(v3 + *(int *)(v11 + 24));
    v14 = 2;
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabSectionCustomizationEntry]);
    lazy protocol witness table accessor for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry, MEMORY[0x1E0DEA0B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t TabViewCustomization.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v32 = a2;
  v35 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v3);
  v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabViewCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys, (uint64_t)&unk_1E1AD5140, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v37 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v30 - v8;
  v10 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v14 = *(int *)(v10 + 20);
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v13[v14] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v16 = *(int *)(v10 + 24);
  *(_QWORD *)&v13[v16] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();
  v36 = v9;
  v17 = v38;
  v18 = (uint64_t)a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v19 = v33;
    v38 = v14;
    v31 = v16;
    v20 = v6;
    LOBYTE(v40) = 0;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v22 = v34;
    v21 = v35;
    v23 = v36;
    v24 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v13, v22, v21);
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabCustomizationEntry]);
    v39 = 1;
    lazy protocol witness table accessor for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry and conformance TabCustomizationEntry, MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v40;
    v26 = v38;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v13[v26] = v25;
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabSectionCustomizationEntry]);
    v39 = 2;
    lazy protocol witness table accessor for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry, MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v24);
    v28 = v40;
    v29 = v31;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v13[v29] = v28;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, v32, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    __swift_destroy_boxed_opaque_existential_1(v18);
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20))) & 1) != 0)
  {
    return specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 24)), *(_QWORD *)(a2 + *(int *)(a3 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabViewCustomization@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TabViewCustomization.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabViewCustomization(_QWORD *a1)
{
  return TabViewCustomization.encode(to:)(a1);
}

void TabSectionCustomizationEntry.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  unsigned __int8 *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = (unsigned __int8 *)(a2 + 48);
    do
    {
      v5 = *v4;
      v4 += 24;
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of TabCustomizationID.Base();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

uint64_t TabSectionCustomizationEntry.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabSectionCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AF82A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[1] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t TabCustomizationEntry.Visibility.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;

  v32 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1E1AD9788, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v28 = (char *)&v25 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1E1AD97A8, v3);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v25 = (char *)&v25 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1E1AD97C8, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v25 - v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1E1AD96F8, v3);
  v17 = v16;
  v31 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v25 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v32)
  {
    if (v32 == 1)
    {
      v34 = 1;
      lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();
      v21 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v23 = v26;
      v22 = v27;
    }
    else
    {
      v35 = 2;
      lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();
      v21 = v28;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v23 = v29;
      v22 = v30;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
  }
  else
  {
    v33 = 0;
    lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v20, v17);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabSectionCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabSectionCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance TabSectionCustomizationEntry@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized TabSectionCustomizationEntry.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabSectionCustomizationEntry(_QWORD *a1)
{
  uint64_t *v1;

  return TabSectionCustomizationEntry.encode(to:)(a1, *v1);
}

void protocol witness for Hashable.hash(into:) in conformance TabSectionCustomizationEntry(uint64_t a1)
{
  uint64_t *v1;

  TabSectionCustomizationEntry.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.HiddenCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.HiddenCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.VisibleCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.VisibleCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();
  return CodingKey.debugDescription.getter();
}

char *protocol witness for Decodable.init(from:) in conformance TabCustomizationEntry.Visibility@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = specialized TabCustomizationEntry.Visibility.init(from:)(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationEntry.Visibility(_QWORD *a1)
{
  unsigned __int8 *v1;

  return TabCustomizationEntry.Visibility.encode(to:)(a1, *v1);
}

uint64_t TabCustomizationEntry.encode(to:)(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AD9668, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = a2;
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TabCustomizationEntry.CodingKeys()
{
  return 0x696C696269736976;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabCustomizationEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();
  return CodingKey.debugDescription.getter();
}

unint64_t protocol witness for Decodable.init(from:) in conformance TabCustomizationEntry@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized TabCustomizationEntry.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationEntry(_QWORD *a1)
{
  char *v1;

  return TabCustomizationEntry.encode(to:)(a1, *v1);
}

uint64_t TabViewCustomizationTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  char v8;
  uint64_t result;
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;

  *a4 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v13);
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v12);
  if (*((_QWORD *)&v14 + 1))
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      *(_QWORD *)(a5 + 24) = type metadata accessor for TabViewCustomization();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(a2, a3);
      return swift_release();
    }
  }
  else
  {
    result = outlined destroy of Any?((uint64_t)&v13);
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

void static TabViewCustomizationTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v7 = objc_msgSend(a1, sel_dataForKey_, v6);

  if (v7)
  {
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(_QWORD *)(a4 + 24) = type metadata accessor for TabViewCustomization();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v8, v10);
    swift_release();
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

unint64_t lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewCustomization.CodingKeys, &unk_1E1AD5140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewCustomization.CodingKeys, &unk_1E1AD5140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewCustomization.CodingKeys, &unk_1E1AD5140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewCustomization.CodingKeys, &unk_1E1AD5140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry and conformance TabCustomizationEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry, &type metadata for TabCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry, &type metadata for TabCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry, &type metadata for TabCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry, &type metadata for TabSectionCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry, &type metadata for TabSectionCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry, &type metadata for TabSectionCustomizationEntry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
  }
  return result;
}

void type metadata accessor for TransformBox<TabViewCustomizationTransform>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransformBox<TabViewCustomizationTransform>)
  {
    v4 = type metadata accessor for TransformBox(0, (uint64_t)&unk_1E1AFAF60, (uint64_t)&protocol witness table for TabViewCustomizationTransform, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransformBox<TabViewCustomizationTransform>);
  }
}

uint64_t sub_187A1353C@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = TabViewCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_187A13568(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  swift_bridgeObjectRetain();
  return TabViewCustomization.subscript.setter(v5, v3, v4, 0);
}

uint64_t sub_187A135B0()
{
  return 0;
}

uint64_t sub_187A135C0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = TabViewCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_187A135F0()
{
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewCustomization(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TabViewCustomization(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewCustomization()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A138CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TabViewCustomization()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A13954(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for TabViewCustomization()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for TabViewCustomizationTransform()
{
  return &unk_1E1AFAF60;
}

ValueMetadata *type metadata accessor for TabSectionCustomizationEntry()
{
  return &type metadata for TabSectionCustomizationEntry;
}

ValueMetadata *type metadata accessor for TabCustomizationEntry()
{
  return &type metadata for TabCustomizationEntry;
}

void *type metadata accessor for TabViewCustomization.CodingKeys()
{
  return &unk_1E1AD5140;
}

uint64_t specialized TabViewCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];

  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TabViewCustomization();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v32);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (v16)
  {
    v17(v10, 0, 1, v11);
    outlined init with take of TabViewCustomization((uint64_t)v10, (uint64_t)v15);
    v18 = *(int *)(v11 + 20);
    v19 = swift_bridgeObjectRetain();
    v20 = specialized _NativeDictionary.filter(_:)(v19);
    swift_bridgeObjectRelease_n();
    *(_QWORD *)&v15[v18] = v20;
    v21 = *(int *)(v11 + 24);
    v22 = swift_bridgeObjectRetain();
    v23 = specialized _NativeDictionary.filter(_:)(v22);
    swift_bridgeObjectRelease_n();
    *(_QWORD *)&v15[v21] = v23;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
    v26 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v28 = v27;
    swift_release();
    *(_QWORD *)&v30 = a3;
    *((_QWORD *)&v30 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v28 >> 60 == 15)
    {
      v30 = 0u;
      v31 = 0u;
    }
    else
    {
      *((_QWORD *)&v31 + 1) = MEMORY[0x1E0CB0338];
      *(_QWORD *)&v30 = v26;
      *((_QWORD *)&v30 + 1) = v28;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v30, (uint64_t)v32);
    v24 = (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization;
    v25 = (uint64_t)v15;
  }
  else
  {
    v17(v10, 1, 1, v11);
    v24 = (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?;
    v25 = (uint64_t)v10;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v25, v24);
}

char *specialized TabCustomizationEntry.Visibility.init(from:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1E1AD9788, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v38 = (char *)&v30 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1E1AD97A8, v2);
  v36 = v6;
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v37 = (char *)&v30 - v8;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1E1AD97C8, v2);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v30 - v11;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1E1AD96F8, v2);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v30 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();
  v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    v21 = v37;
    v20 = v38;
    v39 = v15;
    v22 = v18;
    v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v18 = (char *)*(unsigned __int8 *)(v23 + 32);
      if (*(_BYTE *)(v23 + 32))
      {
        if ((_DWORD)v18 == 1)
        {
          v41 = 1;
          lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v24 = v39;
          (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v14);
        }
        else
        {
          v42 = 2;
          lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v29 = v39;
          (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v14);
        }
      }
      else
      {
        v40 = 0;
        lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v14);
      }
    }
    else
    {
      v25 = type metadata accessor for DecodingError();
      swift_allocError();
      v27 = v26;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v27 = &type metadata for TabCustomizationEntry.Visibility;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v14);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v18;
}

unint64_t specialized TabCustomizationEntry.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AD9668, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();
  v10 = (unint64_t)v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v10;
}

_QWORD *specialized TabSectionCustomizationEntry.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabSectionCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys, (uint64_t)&unk_1E1AF82A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();
  v10 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = (_QWORD *)v12[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v10;
}

uint64_t specialized TabViewCustomization.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7453626154726570 && a2 == 0xEB00000000657461
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974636553726570 && a2 == 0xEF65746174536E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.CodingKeys, &unk_1E1AD9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.CodingKeys, &unk_1E1AD9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.CodingKeys, &unk_1E1AD9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.CodingKeys, &unk_1E1AD9668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility, &type metadata for TabCustomizationEntry.Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility, &type metadata for TabCustomizationEntry.Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility, &type metadata for TabCustomizationEntry.Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry.CodingKeys, &unk_1E1AF82A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry.CodingKeys, &unk_1E1AF82A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry.CodingKeys, &unk_1E1AF82A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionCustomizationEntry.CodingKeys, &unk_1E1AF82A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

uint64_t specialized static TabViewCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Class isa;
  void *v39;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[24];
  uint64_t v45;

  type metadata accessor for TabViewCustomization?(0);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v41 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v41 - v19;
  outlined init with copy of Any?(a1, (uint64_t)v44);
  if (v45)
  {
    v21 = type metadata accessor for TabViewCustomization();
    v22 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, v22 ^ 1u, 1, v21);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v44);
    v21 = type metadata accessor for TabViewCustomization();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  }
  type metadata accessor for TabViewCustomization();
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  v24 = v23(v20, 1, v21);
  v43 = v9;
  if (!v24)
  {
    v41 = a3;
    v42 = a2;
    v25 = *(int *)(v21 + 20);
    v26 = a4;
    v27 = swift_bridgeObjectRetain();
    v28 = specialized _NativeDictionary.filter(_:)(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v25] = v28;
    v29 = *(int *)(v21 + 24);
    v30 = swift_bridgeObjectRetain();
    v31 = specialized _NativeDictionary.filter(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v29] = v31;
    a4 = v26;
    a3 = v41;
    a2 = v42;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
  v32 = v23(v16, 1, v21);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
  if (v32 == 1)
  {
    v33 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v33);

  }
  else
  {
    v34 = a3;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
    lazy protocol witness table accessor for type TabViewCustomization? and conformance <A> A?();
    v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v37 = v36;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
    swift_release();
    outlined copy of Data._Representation(v35, v37);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v35, v37);
    v39 = (void *)MEMORY[0x18D75CC88](v34, a4);
    objc_msgSend(a2, sel_setObject_forKey_, isa, v39);
    swift_unknownObjectRelease();

    outlined consume of Data?(v35, v37);
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
}

unint64_t lazy protocol witness table accessor for type TabViewCustomization? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type TabViewCustomization? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TabViewCustomization? and conformance <A> A?)
  {
    type metadata accessor for TabViewCustomization?(255);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t)&protocol conformance descriptor for TabViewCustomization);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization? and conformance <A> A?);
  }
  return result;
}

void *type metadata accessor for TabSectionCustomizationEntry.CodingKeys()
{
  return &unk_1E1AF82A0;
}

uint64_t storeEnumTagSinglePayload for TabSectionCustomizationEntry.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_187A14C54 + 4 * byte_187C7B780[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_187A14C74 + 4 * byte_187C7B785[v4]))();
}

_BYTE *sub_187A14C54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_187A14C74(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187A14C7C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187A14C84(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187A14C8C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187A14C94(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TabCustomizationEntry.CodingKeys()
{
  return &unk_1E1AD9668;
}

ValueMetadata *type metadata accessor for TabViewCustomization.Key()
{
  return &type metadata for TabViewCustomization.Key;
}

ValueMetadata *type metadata accessor for TabCustomizationEntry.Visibility()
{
  return &type metadata for TabCustomizationEntry.Visibility;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.HiddenCodingKeys, &unk_1E1AD9788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.HiddenCodingKeys, &unk_1E1AD9788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.HiddenCodingKeys, &unk_1E1AD9788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.VisibleCodingKeys, &unk_1E1AD97A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.VisibleCodingKeys, &unk_1E1AD97A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.VisibleCodingKeys, &unk_1E1AD97A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.AutomaticCodingKeys, &unk_1E1AD97C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.AutomaticCodingKeys, &unk_1E1AD97C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.AutomaticCodingKeys, &unk_1E1AD97C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.CodingKeys, &unk_1E1AD96F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.CodingKeys, &unk_1E1AD96F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.CodingKeys, &unk_1E1AD96F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationEntry.Visibility.CodingKeys, &unk_1E1AD96F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TabCustomizationEntry(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A15024 + 4 * byte_187C7B78F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A15058 + 4 * byte_187C7B78A[v4]))();
}

uint64_t sub_187A15058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A15060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A15068);
  return result;
}

uint64_t sub_187A15074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A1507CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A15080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A15088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.CodingKeys()
{
  return &unk_1E1AD96F8;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  return &unk_1E1AD97C8;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.VisibleCodingKeys()
{
  return &unk_1E1AD97A8;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.HiddenCodingKeys()
{
  return &unk_1E1AD9788;
}

uint64_t outlined copy of PlatformItem.PrimaryContent?(uint64_t result, void *a2, void *a3, void *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v29;
  id v32;
  id v33;
  id v34;

  if (result != 1)
  {
    v29 = (void *)result;
    v32 = a3;
    v33 = v29;
    v34 = a2;
    outlined copy of Image.Resolved?(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
      a23,
      a24,
      a25);
    return swift_retain();
  }
  return result;
}

_QWORD *outlined retain of PlatformItem.PrimaryContent?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26]);
  return a1;
}

uint64_t View.interactionRepresentable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for InteractionRepresentableEffect(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for InteractionRepresentableEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InteractionRepresentableEffect);
}

uint64_t dispatch thunk of _UIInteractionRepresentable.makeUIInteraction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _UIInteractionRepresentable.updateUIInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata completion function for _UIInteractionView()
{
  return swift_initClassMetadata2();
}

uint64_t InteractionRepresentableEffect.effectValue(size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v5 = (uint64_t *)swift_allocObject();
  v5[5] = a1;
  v5[6] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InteractionRepresentableEffect<A>, a1);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5 + 2);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 3;
  return result;
}

uint64_t protocol witness for static _RendererEffect.disabledForFlattenedContent.getter in conformance InteractionRepresentableEffect<A>()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InteractionRepresentableEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InteractionRepresentableEffect<A>, a5);
  return static RendererEffect._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InteractionRepresentableEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InteractionRepresentableEffect<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance InteractionRepresentableEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InteractionRepresentableEffect<A>, a4);
  return static RendererEffect._viewListCount(inputs:body:)();
}

char *InteractionRepresentableEffect.makePlatformGroup()(uint64_t a1)
{
  void *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  id v6;
  id v7;
  char *v8;

  v1 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = (objc_class *)type metadata accessor for _UIInteractionView(0, AssociatedTypeWitness, v3, v4);
  v6 = v1;
  v7 = objc_allocWithZone(v5);
  v8 = _UIInteractionView.init(_:)((uint64_t)v6);
  objc_msgSend(v8, sel_addInteraction_, v6);

  return v8;
}

char *_UIInteractionView.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return _UIInteractionView.init(_:)(a1);
}

void InteractionRepresentableEffect.updatePlatformGroup(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(void);
  id v9;

  v2 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _UIInteractionView(0, AssociatedTypeWitness, v4, v5);
  swift_unknownObjectRetain();
  v6 = swift_dynamicCastClass();
  if (v6 && (v7 = *(void **)(v6 + direct field offset for _UIInteractionView.managedInteraction)) != 0)
  {
    v8 = *(void (**)(void))(v2 + 24);
    v9 = v7;
    v8();
    swift_unknownObjectRelease();

  }
  else
  {
    swift_unknownObjectRelease();
  }
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance InteractionRepresentableEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized InteractionRepresentableEffect.viewType.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a3, a4);
}

char *_UIInteractionView.init(_:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[direct field offset for _UIInteractionView.managedInteraction] = 0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  v4 = (char *)objc_msgSendSuper2(&v6, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v4[direct field offset for _UIInteractionView.managedInteraction] = a1;
  swift_unknownObjectRelease();
  return v4;
}

id _UIInteractionView.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  id v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[direct field offset for _UIInteractionView.managedInteraction] = 0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

id @objc _UIInteractionView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return _UIInteractionView.init(coder:)(a3);
}

void @objc _UIInteractionView.init(frame:)()
{
  specialized _UIInteractionView.init(frame:)();
}

uint64_t _UIInteractionView.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t @objc _UIInteractionView.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _UIInteractionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UIInteractionView);
}

uint64_t sub_187A15B9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for InteractionRepresentableEffect(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for InteractionRepresentableEffect<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for InteractionRepresentableEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A15CAC + 4 * byte_187C7C170[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for InteractionRepresentableEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in InteractionRepresentableEffect<A>()
{
  return &protocol witness table for InteractionRepresentableEffect<A>;
}

void base witness table accessor for MultiViewModifier in InteractionRepresentableEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PrimitiveViewModifier in InteractionRepresentableEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Animatable in InteractionRepresentableEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _RendererEffect in InteractionRepresentableEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for AnyViewFactory in InteractionRepresentableEffect<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized InteractionRepresentableEffect.viewType.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for InteractionRepresentableEffect(0, a1, a2, a4);
}

uint64_t sub_187A15F18()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void specialized _UIInteractionView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void static ToolbarTitleDisplayMode.inline.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t View.toolbarTitleDisplayMode(_:)(char *a1)
{
  char v1;

  v1 = *a1;
  *(_BYTE *)(swift_allocObject() + 16) = v1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

void static ToolbarTitleDisplayMode.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ToolbarTitleDisplayMode.large.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarTitleDisplayMode.inlineLarge.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t closure #1 in View.toolbarTitleDisplayMode(_:)(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;

  v2 = *(_QWORD *)(result + 24);
  if (!v2)
  {
    v3 = (_BYTE *)(result + 40);
    LOBYTE(v4) = *(_BYTE *)(result + 40);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    if (v4 != 5)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v2 == 1)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_QWORD *)(result + 32) = 1;
    *(_QWORD *)(result + 40) = a2;
    *(_QWORD *)(result + 48) = 0;
    *(_BYTE *)(result + 56) = 3;
    return result;
  }
  v3 = (_BYTE *)(result + 40);
  v4 = *(unsigned __int8 *)(result + 40);
  if (v4 == 5)
  {
LABEL_7:
    LOBYTE(v4) = a2;
LABEL_8:
    *v3 = v4;
    return result;
  }
  if (!*(_QWORD *)(result + 48))
    goto LABEL_8;
  return result;
}

uint64_t sub_187A16098()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ToolbarTitleDisplayMode()
{
  return &type metadata for ToolbarTitleDisplayMode;
}

uint64_t sub_187A160BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceTransformModifier<NavigationTitleKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceTransformModifier<NavigationTitleKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarTitleDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187A161C0 + 4 * byte_187C7C3F5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187A161F4 + 4 * byte_187C7C3F0[v4]))();
}

uint64_t sub_187A161F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A161FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A16204);
  return result;
}

uint64_t sub_187A16210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A16218);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_187A1621C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A16224(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarTitleDisplayMode.Role()
{
  return &type metadata for ToolbarTitleDisplayMode.Role;
}

unint64_t lazy protocol witness table accessor for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role;
  if (!lazy protocol witness table cache variable for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarTitleDisplayMode.Role, &type metadata for ToolbarTitleDisplayMode.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role);
  }
  return result;
}

uint64_t LimitedAvailabilityTableRowContent.init<A>(erasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for LimitedAvailabilityTableRowContentStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 120) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 136), a1);
  return v5;
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityTableRowContentStorage);
}

uint64_t static LimitedAvailabilityTableRowContent._makeRows(content:inputs:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[12];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a2[7];
  v47 = a2[6];
  v48 = v9;
  v49 = a2[8];
  v50 = *((_QWORD *)a2 + 18);
  v10 = a2[3];
  v43 = a2[2];
  v44 = v10;
  v11 = a2[5];
  v45 = a2[4];
  v46 = v11;
  v12 = a2[1];
  v41 = *a2;
  v42 = v12;
  *(_QWORD *)&v28 = *((_QWORD *)&v49 + 1);
  DWORD2(v28) = v50;
  PreferencesInputs.makeIndirectOutputs()();
  v13 = *(_QWORD *)&v40[0];
  v14 = DWORD2(v40[0]);
  LODWORD(v40[0]) = v8;
  type metadata accessor for LimitedAvailabilityTableRowContent(255, a3, a4, v15);
  type metadata accessor for _GraphValue();
  v16 = _GraphValue.value.getter();
  v17 = (id)AGSubgraphGetCurrent();
  if (!v17)
    __break(1u);
  v35 = v47;
  v36 = v48;
  v37 = v49;
  LODWORD(v28) = v16;
  v31 = v43;
  v32 = v44;
  v33 = v45;
  v34 = v46;
  v29 = v41;
  v30 = v42;
  *((_QWORD *)&v28 + 1) = v17;
  *(_QWORD *)&v38 = v50;
  *((_QWORD *)&v38 + 1) = v13;
  LODWORD(v39) = DWORD2(v40[0]);
  *((_QWORD *)&v39 + 1) = 0;
  MEMORY[0x1E0C80A78](v17, v18);
  v25 = type metadata accessor for LimitedAvailabilityTableRowContent.IndirectOutputs(0, a3, a4, v19);
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityTableRowContent<A>.IndirectOutputs, v25);
  outlined retain of _TableRowInputs((uint64_t)&v41);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v21 = v20;
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v24, v25, MEMORY[0x1E0DEDCE8], v21, MEMORY[0x1E0DEDD18], v22);
  v40[8] = v36;
  v40[9] = v37;
  v40[10] = v38;
  v40[11] = v39;
  v40[4] = v32;
  v40[5] = v33;
  v40[6] = v34;
  v40[7] = v35;
  v40[0] = v28;
  v40[1] = v29;
  v40[2] = v30;
  v40[3] = v31;
  outlined release of LimitedAvailabilityTableRowContent<A>.IndirectOutputs((uint64_t)v40);
  *(_QWORD *)&v28 = v13;
  DWORD2(v28) = v14;
  v27 = 0;
  result = PreferencesOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a5 = v13;
  *(_DWORD *)(a5 + 8) = v14;
  return result;
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityTableRowContent);
}

void LimitedAvailabilityTableRowContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  id v6;

  if (!*(_QWORD *)(v1 + 184))
  {
    v3 = (id)AGSubgraphGetGraph();
    v4 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v1 + 184) = v4;
    v6 = v4;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v5 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityTableRowContent.IndirectOutputs.updateValue()(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityTableRowContent.IndirectOutputs.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, uint64_t *, _OWORD *);
  __int128 v31;
  __int128 v32;
  int v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _OWORD v47[9];
  uint64_t v48;
  uint64_t v49;
  int v50;
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[48];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  unsigned __int128 v60;
  __int128 v61;
  unsigned __int128 v62;
  _BYTE v63[48];
  __int128 v64;
  uint64_t v65;

  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v55[16] = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v55[32] = v4;
  v56 = *(_OWORD *)(a1 + 144);
  v57 = *(_QWORD *)(a1 + 160);
  v5 = *(_OWORD *)(a1 + 64);
  v52 = *(_OWORD *)(a1 + 48);
  v53 = v5;
  v6 = *(_OWORD *)(a1 + 96);
  v54 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)v55 = v6;
  v7 = *(_OWORD *)(a1 + 32);
  v51[0] = *(_OWORD *)(a1 + 16);
  v51[1] = v7;
  v44 = *((_QWORD *)&v56 + 1);
  v41 = v54;
  v42 = DWORD2(v53);
  v43 = v56;
  v36 = *(_QWORD *)&v51[0];
  v35 = DWORD2(v51[0]);
  v8 = v7;
  v38 = *((_QWORD *)&v52 + 1);
  v39 = v53;
  v40 = *(_OWORD *)&v55[8];
  v9 = *((_QWORD *)&v7 + 1);
  v10 = v52;
  v11 = *((_QWORD *)&v54 + 1);
  v12 = *(_QWORD *)v55;
  v37 = *(_OWORD *)&v55[24];
  v13 = *((_QWORD *)&v4 + 1);
  v14 = v57;
  swift_beginAccess();
  v15 = *(_DWORD *)(v8 + 16);
  v16 = *(_QWORD *)(v8 + 24);
  v31 = *(_OWORD *)(v8 + 48);
  v32 = *(_OWORD *)(v8 + 32);
  v18 = *(_QWORD *)(v8 + 64);
  v17 = *(_QWORD *)(v8 + 72);
  v19 = *(_BYTE *)(v8 + 80);
  v20 = *(_BYTE *)(v8 + 81);
  v21 = *(_QWORD *)(v8 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = v15;
  *(_QWORD *)(v22 + 24) = v16;
  *(_OWORD *)(v22 + 32) = v32;
  *(_OWORD *)(v22 + 48) = v31;
  *(_QWORD *)(v22 + 64) = v18;
  *(_QWORD *)(v22 + 72) = v17;
  *(_BYTE *)(v22 + 80) = v19;
  *(_BYTE *)(v22 + 81) = v20;
  *(_QWORD *)(v22 + 88) = v21;
  outlined retain of _TableRowInputs((uint64_t)v51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v23 = *(_QWORD *)(a1 + 168);
  LODWORD(v21) = *(_DWORD *)(a1 + 176);
  v25 = type metadata accessor for LimitedAvailabilityTableRowContent.IndirectOutputs(0, a2, a3, v24);
  type metadata accessor for LimitedAvailabilityTableRowContent(0, *(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), v26);
  v27 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityTableRowContent(0, a2, a3, v28);
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphValue.init(_:)();
  *(_QWORD *)&v58 = v36;
  DWORD2(v58) = v35;
  *(_QWORD *)&v59 = v22;
  *((_QWORD *)&v59 + 1) = v9;
  v60 = __PAIR128__(v38, v10);
  *(_QWORD *)&v61 = v39;
  DWORD2(v61) = v42;
  v62 = __PAIR128__(v11, v41);
  *(_QWORD *)v63 = v12;
  *(_OWORD *)&v63[8] = v40;
  *(_OWORD *)&v63[24] = v37;
  *(_QWORD *)&v63[40] = v13;
  LODWORD(v64) = v43;
  *((_QWORD *)&v64 + 1) = v44;
  v65 = v14;
  v47[6] = *(_OWORD *)&v63[16];
  v47[7] = *(_OWORD *)&v63[32];
  v47[8] = v64;
  v48 = v14;
  v47[2] = __PAIR128__(v38, v10);
  v47[3] = v61;
  v47[4] = __PAIR128__(v11, v41);
  v47[5] = *(_OWORD *)v63;
  v47[0] = v58;
  v47[1] = v59;
  v29 = *(void (**)(uint64_t *__return_ptr, uint64_t *, _OWORD *))(*(_QWORD *)v27 + 96);
  outlined retain of _TableRowInputs((uint64_t)&v58);
  v29(&v49, &v45, v47);
  swift_release();
  outlined release of _TableRowInputs((uint64_t)&v58);
  *(_QWORD *)&v47[0] = v23;
  DWORD2(v47[0]) = v21;
  v45 = v49;
  v46 = v50;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined release of _TableRowInputs((uint64_t)&v58);
}

void LimitedAvailabilityTableRowContent.tableRowBody.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance LimitedAvailabilityTableRowContent<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance LimitedAvailabilityTableRowContent<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static LimitedAvailabilityTableRowContent._makeRows(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance LimitedAvailabilityTableRowContent<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance RichTextEditor();
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance LimitedAvailabilityTableRowContent<A>()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

void LimitedAvailabilityTableRowContentStorageBase._makeRows(content:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityTableRowContentStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilityTableRowContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityTableRowContentStorage._makeRows(content:inputs:)(int *a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[9];
  uint64_t v17;
  _BYTE v18[4];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = (_QWORD *)*v2;
  v4 = *a1;
  v5 = a2[7];
  v25 = a2[6];
  v26 = v5;
  v27 = a2[8];
  v28 = *((_QWORD *)a2 + 18);
  v6 = a2[3];
  v21 = a2[2];
  v22 = v6;
  v7 = a2[5];
  v23 = a2[4];
  v24 = v7;
  v8 = a2[1];
  v19 = *a2;
  v20 = v8;
  LODWORD(v16[0]) = v4;
  v10 = v3[14];
  v9 = v3[15];
  v11 = v3[16];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityTableRowContent(255, v10, AssociatedConformanceWitness, v13);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v14 = type metadata accessor for LimitedAvailabilityTableRowContentStorage.Child(0, v10, v9, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityTableRowContentStorage<A, B>.Child, v14);
  _GraphValue.init<A>(_:)();
  v16[6] = v25;
  v16[7] = v26;
  v16[8] = v27;
  v17 = v28;
  v16[2] = v21;
  v16[3] = v22;
  v16[4] = v23;
  v16[5] = v24;
  v16[0] = v19;
  v16[1] = v20;
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(v11 + 48))(v18, v16, v9, v11);
}

uint64_t LimitedAvailabilityTableRowContentStorage.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;

  specialized LimitedAvailabilityTableRowContentStorage.Child.content.getter(a1, a2);
  type metadata accessor for LimitedAvailabilityTableRowContentStorage(0, a2, a3, a4);
  v9 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v9 + *(_QWORD *)(*(_QWORD *)v9 + 136), a3);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityTableRowContentStorage<A, B>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;

  return LimitedAvailabilityTableRowContentStorage.Child.value.getter(*v2, a1[2], a1[3], a1[4], a2);
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityTableRowContent.IndirectOutputs);
}

uint64_t outlined release of LimitedAvailabilityTableRowContent<A>.IndirectOutputs(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return a1;
}

uint64_t instantiation function for generic protocol witness table for LimitedAvailabilityTableRowContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityTableRowContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for LimitedAvailabilityTableRowContentStorageBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContentStorageBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityTableRowContentStorageBase);
}

uint64_t method lookup function for LimitedAvailabilityTableRowContentStorageBase()
{
  return swift_lookUpClassMethod();
}

void destroy for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v7 = *(void **)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v7;
  v8 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v7;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v7 = *(void **)(a1 + 184);
  v8 = *(void **)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v8;
  v9 = v8;

  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v4 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

  return a1;
}

uint64_t getEnumTagSinglePayload for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityTableRowContent<A>.IndirectOutputs()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContentStorage.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityTableRowContentStorage.Child);
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityTableRowContentStorage<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized LimitedAvailabilityTableRowContentStorage.Child.content.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityTableRowContent(0, a2, AssociatedConformanceWitness, v4);
  return *(_QWORD *)AGGraphGetValue();
}

ValueMetadata *type metadata accessor for Toolbar.LocationStorage()
{
  return &type metadata for Toolbar.LocationStorage;
}

uint64_t storeEnumTagSinglePayload for Toolbar.BarLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483633;
    if (a3 >= 0x7FFFFFF1)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF1)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 14;
  }
  return result;
}

ValueMetadata *type metadata accessor for Toolbar.BarLocation()
{
  return &type metadata for Toolbar.BarLocation;
}

_DWORD *__swift_memcpy7_1(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Toolbar.BarContext(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[7])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Toolbar.BarContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Toolbar.BarContext()
{
  return &type metadata for Toolbar.BarContext;
}

uint64_t destroy for Toolbar.PlatformVended(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for Toolbar.PlatformVended(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v7 = *(void **)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = v7;
  a1[5] = v6;
  v9 = *(void **)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  a1[6] = v9;
  a1[7] = v8;
  v10 = v3;
  v11 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v7;
  swift_retain();
  v13 = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Toolbar.PlatformVended(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(void **)(a1 + 32);
  v11 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  v12 = v11;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  v13 = *(void **)(a1 + 48);
  v14 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  v15 = v14;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Toolbar.PlatformVended(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release();

  *(_OWORD *)(a1 + 48) = a2[3];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Toolbar.PlatformVended()
{
  return &type metadata for Toolbar.PlatformVended;
}

ValueMetadata *type metadata accessor for Toolbar()
{
  return &type metadata for Toolbar;
}

uint64_t assignWithCopy for Toolbar.UpdateContext(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 2)
  {
    if (v4 == 2)
    {
      outlined destroy of PushTarget(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
      goto LABEL_9;
    }
    swift_unknownObjectWeakCopyAssign();
LABEL_8:
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_9;
  }
  if (v4 != 2)
  {
    swift_unknownObjectWeakCopyInit();
    goto LABEL_8;
  }
  v5 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v5;
LABEL_9:
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 2)
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeInit();
LABEL_8:
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PushTarget(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
LABEL_9:
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AllowsToolbarItemBridgingModifier()
{
  return &type metadata for AllowsToolbarItemBridgingModifier;
}

Swift::Void __swiftcall ToolbarViewListVisitor.finalizeGroup()()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)();
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  void (*v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;

  v1 = type metadata accessor for ToolbarStorage.Entry(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v73 = (unint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v72, v5);
  v74 = (void (*)())((char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: ToolbarStorage.Item), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v65 - v9);
  type metadata accessor for (Int, ToolbarStorage.Item)();
  v71 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v70 = (unint64_t *)((char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)();
  v75 = *(_QWORD *)(v14 - 8);
  v76 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v78 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (uint64_t *)((char *)&v65 - v19);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (unint64_t *)((char *)&v65 - v23);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (uint64_t *)((char *)&v65 - v27);
  v29 = *(_QWORD **)(v0 + 88);
  if (!v29)
    return;
  v69 = v1;
  v30 = MEMORY[0x1E0DEE9D8];
  v80 = MEMORY[0x1E0DEE9D8];
  v31 = v29[2];
  swift_bridgeObjectRetain_n();
  v77 = v31;
  v79 = v29;
  if (v31)
  {
    v66 = v10;
    v67 = v2;
    v68 = v0;
    v32 = 0;
    v0 = MEMORY[0x1E0DEE9D8];
    v33 = type metadata accessor for (offset: Int, element: ToolbarStorage.Item);
    v2 = v76;
    v34 = type metadata accessor for ToolbarStorage.Item;
    while (v32 < v29[2])
    {
      v35 = type metadata accessor for ToolbarStorage.Item(0);
      v36 = (uint64_t)v29
          + ((*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v35 - 8) + 72) * v32;
      v37 = (uint64_t)v20 + *(int *)(v2 + 48);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v36, v37, type metadata accessor for ToolbarStorage.Item);
      v38 = (uint64_t)v24 + *(int *)(v2 + 48);
      *v24 = v32;
      outlined init with take of TableCellFormula(v37, v38, type metadata accessor for ToolbarStorage.Item);
      outlined init with take of TableCellFormula((uint64_t)v24, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
      v39 = *(int *)(v2 + 48);
      v40 = (uint64_t)v20 + v39;
      *v20 = *v28;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v28 + v39, (uint64_t)v20 + v39, type metadata accessor for ToolbarStorage.Item);
      v30 = *(unsigned __int8 *)(v40 + *(int *)(v35 + 56));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, type metadata accessor for ToolbarStorage.Item);
      if ((v30 & 1) != 0)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
      }
      else
      {
        outlined init with take of TableCellFormula((uint64_t)v28, v78, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v0 + 16) + 1, 1);
        v0 = v80;
        v42 = *(_QWORD *)(v80 + 16);
        v41 = *(_QWORD *)(v80 + 24);
        v30 = v42 + 1;
        if (v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
          v0 = v80;
        }
        *(_QWORD *)(v0 + 16) = v30;
        outlined init with take of TableCellFormula(v78, v0+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v42, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
        v2 = v76;
      }
      ++v32;
      v29 = v79;
      if (v77 == v32)
      {
        v30 = v80;
        v2 = v67;
        v0 = v68;
        v10 = v66;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v30 + 16);
  if (!v43)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (v43 != 1)
  {
    swift_release();
    goto LABEL_20;
  }
  v44 = v75;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v30 + ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80)), (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
  v45 = v76;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v10, 0, 1, v76);
  swift_release();
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v44 + 48))(v10, 1, v45) == 1)
  {
    outlined destroy of TableRowID?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item)?, (uint64_t)type metadata accessor for (offset: Int, element: ToolbarStorage.Item), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_20:
    v33 = v74;
    goto LABEL_25;
  }
  v46 = (uint64_t)v10 + *(int *)(v45 + 48);
  v48 = v70;
  v47 = v71;
  v49 = (uint64_t)v70 + *(int *)(v71 + 48);
  *v70 = *v10;
  outlined init with take of TableCellFormula(v46, v49, type metadata accessor for ToolbarStorage.Item);
  v50 = *v48;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v48 + *(int *)(v47 + 48), type metadata accessor for ToolbarStorage.Item);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if ((v50 & 0x8000000000000000) == 0)
      goto LABEL_23;
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v29 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
  if ((v50 & 0x8000000000000000) != 0)
    goto LABEL_33;
LABEL_23:
  v33 = v74;
  if (v50 >= v29[2])
  {
LABEL_34:
    __break(1u);
    return;
  }
  v51 = type metadata accessor for ToolbarStorage.Item(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v79 = v29;
  *((_BYTE *)v29 + v53 + *(_QWORD *)(v52 + 72) * v50 + *(int *)(v51 + 60)) = 1;
LABEL_25:
  v54 = (int *)type metadata accessor for ToolbarViewListVisitor();
  v55 = (uint64_t *)(v0 + v54[16]);
  v56 = *v55;
  v57 = v55[1];
  outlined init with copy of ToolbarItemPlacement.Role(v0 + 8, (uint64_t)v33 + 16);
  v58 = *(_WORD *)(v0 + 50);
  v59 = *(_BYTE *)(v0 + 52);
  v60 = *(_QWORD *)(v0 + 56);
  v34 = (uint64_t (*)(uint64_t))(v0 + v54[15]);
  outlined init with copy of TableRowList?((uint64_t)v34, (uint64_t)v33 + *(int *)(v72 + 44), (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, (uint64_t)type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  *(_QWORD *)v33 = v56;
  *((_QWORD *)v33 + 1) = v57;
  *(_WORD *)((char *)v33 + 57) = v58;
  *((_BYTE *)v33 + 59) = v59;
  v61 = v79;
  *((_QWORD *)v33 + 8) = v60;
  *((_QWORD *)v33 + 9) = v61;
  v24 = v73;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v33, (uint64_t)v73, type metadata accessor for ToolbarStorage.GroupItem);
  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  swift_storeEnumTagMultiPayload();
  *((_BYTE *)v24 + *(int *)(v69 + 20)) = 2;
  v30 = v54[18];
  v28 = *(_QWORD **)(v0 + v30);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_31:
    v28 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
  v63 = v28[2];
  v62 = v28[3];
  if (v63 >= v62 >> 1)
    v28 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v28);
  v28[2] = v63 + 1;
  outlined init with take of TableCellFormula((uint64_t)v24, (uint64_t)v28+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v63, type metadata accessor for ToolbarStorage.Entry);
  *(_QWORD *)(v0 + v30) = v28;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, type metadata accessor for ToolbarStorage.GroupItem);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = 0;
  outlined destroy of TableRowID?((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, (uint64_t)type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v64 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v34, 1, 1, v64);
}

uint64_t View.allowsToolbarItemBridging(options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v5 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  return MEMORY[0x18D75B4AC](&v7, a2, v5, a3);
}

uint64_t EnvironmentValues.toolbarUpdateContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  outlined init with copy of TableRowList?(a1, (uint64_t)&v4, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of TableRowID?(a1, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

uint64_t Toolbar.BarLocation.priority(for:context:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  int8x16_t v11;
  int8x8_t v12;
  char v13;
  BOOL v14;
  int8x16_t v15;
  int8x8_t v16;
  int8x16_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _BYTE v25[40];
  char v26;
  _OWORD v27[2];
  uint64_t v28;
  _BYTE v29[40];
  _BYTE v30[40];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[40];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  outlined init with copy of Toolbar.BarLocation(v2, (uint64_t)&v38);
  result = 0;
  switch(*((_QWORD *)&v39 + 1))
  {
    case 0:
      *(_QWORD *)v30 = 1;
      memset(&v30[8], 0, 32);
      LOBYTE(v31) = 2;
      v9 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)(a1, (uint64_t)v30);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v30);
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if ((v9 & 1) != 0)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v30);
        return 1;
      }
      *(_QWORD *)v25 = 17;
      memset(&v25[8], 0, 32);
      v26 = 2;
      v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v30, (uint64_t)v25);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v25);
      goto LABEL_42;
    case 1:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (v31 != 2)
        goto LABEL_82;
      if (!(*(_QWORD *)&v30[24] | *(_QWORD *)&v30[32] | *(_QWORD *)v30 | *(_QWORD *)&v30[16] | *(_QWORD *)&v30[8]))
      {
        if (v4)
          return 10;
        else
          return 0;
      }
      if (*(_QWORD *)v30 == 3
        && !(*(_QWORD *)&v30[24] | *(_QWORD *)&v30[32] | *(_QWORD *)&v30[16] | *(_QWORD *)&v30[8]))
      {
        return 20;
      }
      goto LABEL_82;
    case 2:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (!(_BYTE)v31)
        return 30;
      if (v31 != 2)
        goto LABEL_82;
      if (!(*(_QWORD *)&v30[24] | *(_QWORD *)&v30[32] | *(_QWORD *)v30 | *(_QWORD *)&v30[16] | *(_QWORD *)&v30[8]))
        return 0;
      v10 = *(_QWORD *)&v30[24] | *(_QWORD *)&v30[32] | *(_QWORD *)&v30[16] | *(_QWORD *)&v30[8];
      if (*(_QWORD *)v30 == 2 && !v10)
      {
        if (v6 ^ 1 | v5)
          return 0;
        else
          return 20;
      }
      if ((*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFFDLL) == 5 && !v10)
        return 40;
      v24 = *(_QWORD *)v30 == 21 || *(_QWORD *)v30 == 10;
      if (v24 && !v10)
        return 10;
      if (*(_QWORD *)v30 == 23 && !v10)
        return 35;
      goto LABEL_82;
    case 3:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (v31 != 2)
        goto LABEL_82;
      v11 = vorrq_s8(*(int8x16_t *)&v30[8], *(int8x16_t *)&v30[24]);
      v12 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
      if (*(_QWORD *)v30 == 2 && !*(_QWORD *)&v12)
      {
        if (((v6 ^ 1 | v5) & 1) == 0)
          return 0;
        return 30;
      }
      if (*(_QWORD *)v30 == 6 && !*(_QWORD *)&v12)
        return 20;
      if (*(_QWORD *)v30 == 9 && !*(_QWORD *)&v12)
        return 10;
      if (*(_QWORD *)v30 == 18 && !*(_QWORD *)&v12)
        return (v7 & 1) == 0;
      if (*(_QWORD *)v30 == 22 && !*(_QWORD *)&v12)
        return 10;
LABEL_82:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v30);
      return 0;
    case 4:
    case 6:
    case 7:
    case 9:
    case 0xCLL:
    case 0xDLL:
    case 0xELL:
      return result;
    case 5:
      *(_QWORD *)v30 = 12;
      memset(&v30[8], 0, 32);
      LOBYTE(v31) = 2;
      v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)(a1, (uint64_t)v30);
LABEL_42:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v30);
      return v13 & 1;
    case 8:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (v31 != 2 || *(_QWORD *)v30 != 15)
        goto LABEL_82;
      goto LABEL_39;
    case 0xALL:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (v31 != 2)
        goto LABEL_82;
      v14 = *(_QWORD *)v30 == 11 || *(_QWORD *)v30 == 4;
      v15 = vorrq_s8(*(int8x16_t *)&v30[8], *(int8x16_t *)&v30[24]);
      v16 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      if (!v14 || *(_QWORD *)&v16 != 0)
        goto LABEL_82;
      return 1;
    case 0xBLL:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (v31 != 2 || *(_QWORD *)v30 != 8)
        goto LABEL_82;
LABEL_39:
      v18 = vorrq_s8(*(int8x16_t *)&v30[8], *(int8x16_t *)&v30[24]);
      if (vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))
        goto LABEL_82;
      return 1;
    default:
      *(_OWORD *)v25 = v38;
      *(_OWORD *)&v25[16] = v39;
      *(_QWORD *)&v25[32] = v40;
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v30);
      if (v31 == 1)
      {
        v35 = *(_OWORD *)v30;
        v36 = *(_OWORD *)&v30[16];
        v37 = *(_QWORD *)&v30[32];
      }
      else
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v30);
        v35 = 0u;
        v36 = 0u;
        v37 = 0;
      }
      outlined init with copy of AnyHashable((uint64_t)v25, (uint64_t)v34);
      v19 = MEMORY[0x1E0DEC198];
      v20 = MEMORY[0x1E0DEB940];
      outlined init with copy of TableRowList?((uint64_t)&v35, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined init with copy of TableRowList?((uint64_t)v34, (uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v19, (uint64_t)v20, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      if (*(_QWORD *)&v30[24])
      {
        outlined init with copy of TableRowList?((uint64_t)v30, (uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        if (*((_QWORD *)&v32 + 1))
        {
          v27[0] = v31;
          v27[1] = v32;
          v28 = v33;
          v21 = MEMORY[0x18D75E284](v29, v27);
          outlined destroy of AnyHashable((uint64_t)v27);
          outlined destroy of TableRowID?((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          outlined destroy of TableRowID?((uint64_t)&v35, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          outlined destroy of AnyHashable((uint64_t)v25);
          outlined destroy of AnyHashable((uint64_t)v29);
          outlined destroy of TableRowID?((uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          return (v21 & 1) != 0;
        }
        v23 = MEMORY[0x1E0DEC198];
        outlined destroy of TableRowID?((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        outlined destroy of TableRowID?((uint64_t)&v35, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v23, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        outlined destroy of AnyHashable((uint64_t)v25);
        outlined destroy of AnyHashable((uint64_t)v29);
      }
      else
      {
        v22 = MEMORY[0x1E0DEC198];
        outlined destroy of TableRowID?((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        outlined destroy of TableRowID?((uint64_t)&v35, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v22, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        outlined destroy of AnyHashable((uint64_t)v25);
        if (!*((_QWORD *)&v32 + 1))
        {
          outlined destroy of TableRowID?((uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          return 1;
        }
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable?, AnyHashable?));
      return 0;
  }
}

uint64_t EnvironmentValues.toolbarUpdateContext.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

char *protocol witness for static CaseIterable.allCases.getter in conformance Toolbar.BarLocation@<X0>(char **a1@<X8>)
{
  char *result;

  result = specialized static Toolbar.BarLocation.allCases.getter();
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Toolbar.BarLocation()
{
  Hasher.init(_seed:)();
  Toolbar.BarLocation.hash(into:)();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type [Toolbar.BarLocation] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Toolbar.BarLocation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Toolbar.BarLocation] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Toolbar.BarLocation], (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Toolbar.BarLocation] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ToolbarUpdateContextKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of TableRowList?((uint64_t)&static EnvironmentValues.ToolbarUpdateContextKey.defaultValue, a1, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

uint64_t ToolbarViewListVisitor.visit(view:traits:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  int v39;
  char v40;
  __int16 v41;
  char v42;
  uint64_t v43;
  int *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[5];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[12];

  v3 = v2;
  v71 = a1;
  v67 = type metadata accessor for ToolbarStorage.Entry(0);
  v5 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v6);
  v68 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for ToolbarStorage.Item(0);
  v69 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v8);
  v70 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v59 - v12;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v59 - v16;
  v81[0] = *a2;
  v18 = v81[0];
  v19 = ViewTraitCollection.isSectioned.getter();
  v81[0] = v18;
  v20 = ViewTraitCollection.groupDepth.getter();
  v81[0] = v18;
  v21 = ViewTraitCollection.isEmptyView.getter();
  if (v20 || (v19 & 1) == 0)
  {
    v81[0] = v18;
    if ((ViewTraitCollection.isSectionFooter.getter() & v21 & 1) != 0)
    {
      v24 = *((unsigned __int8 *)v3 + 72);
      *((_BYTE *)v3 + *(int *)(type metadata accessor for ToolbarViewListVisitor() + 68)) = v19 & 1;
      v25 = v3[10];
      v26 = v25 + 1;
      if (!__OFADD__(v25, 1))
      {
        v27 = v24 | v19;
LABEL_34:
        v3[10] = v26;
        return v27 & 1;
      }
      __break(1u);
      goto LABEL_39;
    }
    if ((v19 & 1) == 0 && *((_BYTE *)v3 + *(int *)(type metadata accessor for ToolbarViewListVisitor() + 68)) == 1)
      ToolbarViewListVisitor.finalizeGroup()();
LABEL_17:
    v32 = v71;
    v33 = *(_QWORD *)(v71 + 48);
    v34 = *(_QWORD *)(v71 + 56);
    v35 = *v3;
    v62 = v3[10];
    v63 = v35;
    v66 = (int *)type metadata accessor for ToolbarViewListVisitor();
    v36 = (uint64_t *)((char *)v3 + v66[16]);
    v37 = v36[1];
    v61 = *v36;
    v81[0] = v18;
    swift_bridgeObjectRetain();
    v64 = v34;
    swift_bridgeObjectRetain();
    v38 = ViewTraitCollection.isSectionHeader.getter();
    v60 = v19;
    v59 = v5;
    if ((v38 & 1) != 0)
    {
      v65 = 1;
    }
    else
    {
      v81[0] = v18;
      v65 = ViewTraitCollection.isSectionFooter.getter();
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v3 + 1), (uint64_t)v81);
    v39 = *((unsigned __int8 *)v3 + 49);
    if (v39 == 2)
      v40 = 2;
    else
      v40 = v39 & 1;
    v41 = *((_WORD *)v3 + 25);
    v42 = *((_BYTE *)v3 + 52);
    v43 = v3[7];
    outlined init with copy of _ViewList_View(v32, (uint64_t)(v13 + 104));
    v44 = (int *)v72;
    outlined init with copy of TableRowList?((uint64_t)(v3 + 8), (uint64_t)&v13[*(int *)(v72 + 52)], (uint64_t)&lazy cache variable for type metadata for WeakBox<PreferenceBridge>, (uint64_t)MEMORY[0x1E0CE3278], (uint64_t)MEMORY[0x1E0CE77D8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v45 = &v13[v44[12]];
    v46 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
    *(_QWORD *)v13 = v33;
    v47 = v63;
    *((_QWORD *)v13 + 1) = v64;
    *((_QWORD *)v13 + 2) = v47;
    v48 = v61;
    *((_QWORD *)v13 + 3) = v62;
    *((_QWORD *)v13 + 4) = v48;
    *((_QWORD *)v13 + 5) = v37;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v81, (uint64_t)(v13 + 48));
    v13[89] = v40;
    *((_WORD *)v13 + 45) = v41;
    v13[92] = v42;
    *((_QWORD *)v13 + 12) = v43;
    v13[v44[14]] = v65 & 1;
    v13[v44[15]] = 0;
    if (v3[11])
    {
      v49 = v70;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, v70, type metadata accessor for ToolbarStorage.Item);
      v24 = v3[11];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_25;
      goto LABEL_37;
    }
    v5 = v68;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, v68, type metadata accessor for ToolbarStorage.Item);
    type metadata accessor for ToolbarStorage.Entry.Kind(0);
    swift_storeEnumTagMultiPayload();
    *(_BYTE *)(v5 + *(int *)(v67 + 20)) = 2;
    v20 = v66[18];
    v24 = *(uint64_t *)((char *)v3 + v20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_29;
    goto LABEL_40;
  }
  ToolbarViewListVisitor.finalizeGroup()();
  swift_bridgeObjectRelease();
  v3[11] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v75 = v18;
  v22 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v22 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined init with copy of TableRowList?((uint64_t)v81, (uint64_t)&v75, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (*((_QWORD *)&v76 + 1))
  {
    v73[2] = v77;
    v73[3] = v78;
    v73[4] = v79;
    v74 = v80;
    v73[0] = v75;
    v73[1] = v76;
    outlined init with copy of _ViewList_View((uint64_t)v73, (uint64_t)v17);
    v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    swift_storeEnumTagMultiPayload();
    outlined destroy of _ViewList_View((uint64_t)v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v17, 0, 1, v23);
  }
  else
  {
    v28 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v17, 1, 1, v28);
  }
  outlined destroy of TableRowID?((uint64_t)v81, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v24 = type metadata accessor for ToolbarViewListVisitor();
  outlined assign with take of ToolbarStorage.GroupItem.CollapsedContent?((uint64_t)v17, (uint64_t)v3 + *(int *)(v24 + 60));
  if ((v21 & 1) == 0)
    goto LABEL_17;
  *((_BYTE *)v3 + *(int *)(v24 + 68)) = 1;
  v29 = v3[10];
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, (_QWORD *)v24);
LABEL_29:
    v50 = v60;
    v49 = v59;
    v55 = *(_QWORD *)(v24 + 16);
    v54 = *(_QWORD *)(v24 + 24);
    if (v55 >= v54 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1, (_QWORD *)v24);
    *(_QWORD *)(v24 + 16) = v55 + 1;
    outlined init with take of TableCellFormula(v5, v24+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v55, type metadata accessor for ToolbarStorage.Entry);
    *(uint64_t *)((char *)v3 + v20) = v24;
    while (1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for ToolbarStorage.Item);
      v56 = *((_BYTE *)v3 + 72);
      *((_BYTE *)v3 + v66[17]) = v50 & 1;
      v57 = v3[10];
      v30 = __OFADD__(v57, 1);
      v26 = v57 + 1;
      if (!v30)
        break;
      __break(1u);
LABEL_37:
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, (_QWORD *)v24);
LABEL_25:
      v50 = v60;
      v51 = v69;
      v53 = *(_QWORD *)(v24 + 16);
      v52 = *(_QWORD *)(v24 + 24);
      if (v53 >= v52 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, (_QWORD *)v24);
      *(_QWORD *)(v24 + 16) = v53 + 1;
      outlined init with take of TableCellFormula(v49, v24+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v53, type metadata accessor for ToolbarStorage.Item);
      v3[11] = v24;
    }
    v27 = v56 | v50;
    goto LABEL_34;
  }
  v3[10] = v31;
  v27 = 1;
  return v27 & 1;
}

Swift::Void __swiftcall ToolbarPlacementEnvironment.updateValue()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  _BYTE v21[40];
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)&v23 = *(_QWORD *)(v0 + 8);
  DWORD2(v23) = v1;
  v25 = *(_OWORD *)(v0 + 32);
  v24 = v2;
  v26 = v3;
  _GraphInputs.environment.getter();
  Value = (_QWORD *)AGGraphGetValue();
  v5 = Value[1];
  *(_QWORD *)&v27 = *Value;
  *((_QWORD *)&v27 + 1) = v5;
  v6 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v6, (uint64_t)&v23);
  outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v23, (uint64_t)v21);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v21, (uint64_t)v19);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v21);
  if (!AGGraphGetOutputValue())
  {
    if (*((_QWORD *)&v27 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>, MEMORY[0x1E0CE53F0]);
      swift_retain();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>, MEMORY[0x1E0CE53F0]);
      swift_retain();
      PropertyList.subscript.getter();
    }
    swift_release();
    if ((_QWORD)v23)
    {
      *(_QWORD *)&v23 = *(_QWORD *)(v0 + 56);
      type metadata accessor for PrimaryBarViewModel(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimaryBarViewModel and conformance BarEnvironmentViewModel, type metadata accessor for PrimaryBarViewModel, (uint64_t)&protocol conformance descriptor for BarEnvironmentViewModel);
      swift_retain();
      *(_QWORD *)v21 = ObservableObject<>.objectWillChange.getter();
      type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, (uint64_t (*)(uint64_t))MEMORY[0x1E0C96030], MEMORY[0x1E0C96020], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6620]);
      lazy protocol witness table accessor for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>();
      lazy protocol witness table accessor for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>();
      SubscriptionLifetime.subscribe<A>(subscriber:to:)();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static Semantics.v3.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v7 = AGGraphGetValue();
    outlined init with copy of ToolbarItemPlacement(v7, (uint64_t)&v23);
    *(_QWORD *)v21 = 5;
    memset(&v21[8], 0, 32);
    v22 = 2;
    v8 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v23, (uint64_t)v21);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v21);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v23);
    if ((v8 & 1) != 0)
    {
      static Font.body.getter();
      Font.bold()();
      swift_release();
      EnvironmentValues.defaultFont.setter();
    }
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v23 = v27;
    EnvironmentValues.dynamicTypeSize.getter();
    v9 = v21[0];
    if (v21[0] >= 5u)
      v9 = 5;
    if (v9 <= 3)
      LOBYTE(v9) = 3;
    LOBYTE(v23) = v9;
    EnvironmentValues.dynamicTypeSize.setter();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  memset(v21, 0, sizeof(v21));
  outlined init with copy of ToolbarPlacement.Storage((uint64_t)v21, (uint64_t)v19);
  if (v20 == 7)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined destroy of ToolbarPlacement.Storage((uint64_t)v19);
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v19, (uint64_t)&v23);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)&v23, (uint64_t)v19);
    if (*((_QWORD *)&v27 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (*(_QWORD *)(v18 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v10 & 1) != 0))
    {
      swift_retain();
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
      EnvironmentValues.defaultForegroundStyle.setter();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v23);
  }
  v11 = *((_QWORD *)&v27 + 1);
  v12 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v12, (uint64_t)&v23);
  swift_retain();
  swift_retain();
  v13 = ToolbarItemPlacement.Role.couldBeInPrimaryBar.getter();
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v23);
  if ((v13 & 1) == 0)
    goto LABEL_35;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  if (v11)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  if ((_QWORD)v23)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if ((v23 & 1) != 0)
    {
      *(_QWORD *)&v23 = static Color.white.getter();
      AnyShapeStyle.init<A>(_:)();
      swift_retain();
      EnvironmentValues.defaultForegroundStyle.setter();
      EnvironmentValues.tint.setter();
    }
  }
  else
  {
LABEL_35:
    swift_release();
    swift_release();
  }
  outlined destroy of ToolbarPlacement((uint64_t)v21);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static Semantics.v3.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v23 = v27;
    EnvironmentValues.verticalSizeClass.getter();
    if (v21[0] == 2 || (v21[0] & 1) != 0)
      v14 = 2;
    else
      v14 = 1;
    LOBYTE(v23) = v14;
    EnvironmentValues.imageScale.setter();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v15 = v27;
  v16 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v16, (uint64_t)&v23);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17 = ToolbarItemPlacement.Role.couldBeInPrimaryBar.getter();
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v23);
  if ((v17 & 1) == 0)
    goto LABEL_50;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  if (*((_QWORD *)&v15 + 1))
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  if ((_QWORD)v23)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v23 != 2)
    {
      LOBYTE(v23) = v23 & 1;
      EnvironmentValues.colorScheme.setter();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_50:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  v23 = v27;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ToolbarForegroundStyleKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static EnvironmentValues.ToolbarForegroundStyleKey.defaultValue;
  return swift_bridgeObjectRetain();
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarItemBridgingPreferenceKey(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  result = a2(&v5);
  if (__OFADD__(*(_QWORD *)a1, v5))
  {
    __break(1u);
  }
  else
  {
    v4 = v6;
    *(_QWORD *)a1 += v5;
    *(_BYTE *)(a1 + 8) = (*(_BYTE *)(a1 + 8) | v4) & 1;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolbarItemBridgingConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AllowsToolbarItemBridgingModifier@<X0>(uint64_t (**a1)(uint64_t result)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = partial apply for closure #1 in AllowsToolbarItemBridgingModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t Toolbar.UpdateContext.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  v1 = MEMORY[0x18D760234](v0 + 64);
  if (v1)
  {
    v2 = (void *)v1;
    _print_unlocked<A, B>(_:_:)();

  }
  _StringGuts.grow(_:)(39);
  v3._object = (void *)0x8000000187BED790;
  v3._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AllowsToolbarItemBridgingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A19F08()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AllowsToolbarItemBridgingModifier.body(content:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  if (__OFADD__(*(_QWORD *)result, v2 & 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result += v2 & 1;
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 1 | ((v2 & 2) != 0);
  }
  return result;
}

uint64_t specialized static Toolbar.BarLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[40];
  _BYTE v8[24];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v8);
  outlined init with copy of Toolbar.BarLocation(a2, (uint64_t)&v10);
  switch(v9)
  {
    case 0:
      if (*((_QWORD *)&v11 + 1))
        goto LABEL_33;
      goto LABEL_19;
    case 1:
      if (*((_QWORD *)&v11 + 1) == 1)
        goto LABEL_19;
      goto LABEL_33;
    case 2:
      if (*((_QWORD *)&v11 + 1) != 2)
        goto LABEL_33;
      goto LABEL_19;
    case 3:
      if (*((_QWORD *)&v11 + 1) != 3)
        goto LABEL_33;
      goto LABEL_19;
    case 4:
      if (*((_QWORD *)&v11 + 1) != 4)
        goto LABEL_33;
      goto LABEL_19;
    case 5:
      if (*((_QWORD *)&v11 + 1) != 5)
        goto LABEL_33;
      goto LABEL_19;
    case 6:
      if (*((_QWORD *)&v11 + 1) != 6)
        goto LABEL_33;
      goto LABEL_19;
    case 7:
      if (*((_QWORD *)&v11 + 1) != 7)
        goto LABEL_33;
      goto LABEL_19;
    case 8:
      if (*((_QWORD *)&v11 + 1) != 8)
        goto LABEL_33;
      goto LABEL_19;
    case 9:
      if (*((_QWORD *)&v11 + 1) != 9)
        goto LABEL_33;
      goto LABEL_19;
    case 10:
      if (*((_QWORD *)&v11 + 1) != 10)
        goto LABEL_33;
      goto LABEL_19;
    case 11:
      if (*((_QWORD *)&v11 + 1) != 11)
        goto LABEL_33;
      goto LABEL_19;
    case 12:
      if (*((_QWORD *)&v11 + 1) != 12)
        goto LABEL_33;
      goto LABEL_19;
    case 13:
      if (*((_QWORD *)&v11 + 1) != 13)
        goto LABEL_33;
      goto LABEL_19;
    case 14:
      if (*((_QWORD *)&v11 + 1) != 14)
        goto LABEL_33;
LABEL_19:
      outlined destroy of Toolbar.BarLocation((uint64_t)v8);
      v3 = 1;
      break;
    default:
      outlined init with copy of Toolbar.BarLocation((uint64_t)v8, (uint64_t)v7);
      if (*((_QWORD *)&v11 + 1) >= 0xFuLL)
      {
        v5[0] = v10;
        v5[1] = v11;
        v6 = v12;
        v3 = MEMORY[0x18D75E284](v7, v5);
        outlined destroy of AnyHashable((uint64_t)v5);
        outlined destroy of AnyHashable((uint64_t)v7);
        outlined destroy of Toolbar.BarLocation((uint64_t)v8);
      }
      else
      {
        outlined destroy of AnyHashable((uint64_t)v7);
LABEL_33:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation));
        v3 = 0;
      }
      break;
  }
  return v3 & 1;
}

BOOL specialized static Toolbar.UpdateContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  int v7;
  char v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  _BOOL8 v13;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE v19[64];
  uint64_t v20;
  _BYTE v21[64];
  uint64_t v22;
  _BYTE v23[56];
  uint64_t v24;
  _BYTE v25[56];
  uint64_t v26;
  _BYTE v27[88];
  uint64_t v28;
  _BYTE v29[88];
  uint64_t v30;
  _BYTE v31[81];
  unsigned __int8 v32;
  _BYTE v33[81];
  char v34;

  v4 = *(unsigned __int8 *)(a1 + 80);
  v5 = *(unsigned __int8 *)(a2 + 80);
  if (v4 == 2)
  {
    if (v5 == 2)
    {
      outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v33);
      outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v31);
      goto LABEL_7;
    }
LABEL_5:
    outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v33);
    outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v31);
    goto LABEL_11;
  }
  if (v5 == 2)
    goto LABEL_5;
  v6 = v5 ^ v4;
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v33);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v31);
  if ((v6 & 1) != 0)
    goto LABEL_11;
LABEL_7:
  v7 = v32;
  if (v34 == 2)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v31);
    outlined destroy of Toolbar.UpdateContext((uint64_t)v33);
    if (v7 == 2)
    {
      outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v29);
      outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v27);
LABEL_26:
      v8 = specialized static Array<A>.== infix(_:_:)(v30, v28);
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v32 == 2)
  {
LABEL_11:
    outlined destroy of Toolbar.UpdateContext((uint64_t)v31);
    outlined destroy of Toolbar.UpdateContext((uint64_t)v33);
LABEL_12:
    outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v29);
    outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v27);
    goto LABEL_13;
  }
  v15 = v32 ^ v34;
  outlined destroy of Toolbar.UpdateContext((uint64_t)v31);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v33);
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v29);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v27);
  if ((v15 & 1) == 0)
    goto LABEL_26;
LABEL_13:
  v8 = 0;
LABEL_14:
  outlined destroy of Toolbar.UpdateContext((uint64_t)v29);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v27);
  v9 = specialized static HostingControllerOverrides.== infix(_:_:)(a1, a2);
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v25);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v23);
  if ((v9 & 1) == 0)
    goto LABEL_21;
  v10 = (void *)MEMORY[0x18D760234](&v26);
  v11 = (void *)MEMORY[0x18D760234](&v24);
  v12 = v11;
  if (!v10)
  {
    if (!v11)
    {
      outlined destroy of Toolbar.UpdateContext((uint64_t)v23);
      outlined destroy of Toolbar.UpdateContext((uint64_t)v25);
      outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v21);
      outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v19);
      goto LABEL_28;
    }

    goto LABEL_21;
  }

  if (!v12)
  {
LABEL_21:
    outlined destroy of Toolbar.UpdateContext((uint64_t)v23);
    outlined destroy of Toolbar.UpdateContext((uint64_t)v25);
    outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v21);
    outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v19);
    goto LABEL_22;
  }

  outlined destroy of Toolbar.UpdateContext((uint64_t)v23);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v25);
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v21);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v19);
  if (v10 == v12)
  {
LABEL_28:
    v16 = (void *)MEMORY[0x18D760234](&v22);
    v17 = (void *)MEMORY[0x18D760234](&v20);
    v18 = v17;
    if (v16)
    {

      if (v18)
      {

        v13 = v16 == v18;
        goto LABEL_35;
      }
    }
    else
    {
      if (!v17)
      {
        v13 = 1;
LABEL_35:
        outlined destroy of Toolbar.UpdateContext((uint64_t)v19);
        outlined destroy of Toolbar.UpdateContext((uint64_t)v21);
        if ((v8 & 1) != 0)
          return v13;
        return 0;
      }

    }
    v13 = 0;
    goto LABEL_35;
  }
LABEL_22:
  outlined destroy of Toolbar.UpdateContext((uint64_t)v19);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v21);
  return 0;
}

char *specialized static Toolbar.BarLocation.allCases.getter()
{
  uint64_t inited;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[3];
  __int128 v7;
  char *v8;

  v8 = (char *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Toolbar.BarLocation>, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187C05380;
  *(_OWORD *)(inited + 32) = 0u;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_OWORD *)(inited + 80) = 0u;
  *(_QWORD *)(inited + 96) = 2;
  *(_OWORD *)(inited + 104) = 0u;
  *(_OWORD *)(inited + 120) = 0u;
  *(_OWORD *)(inited + 136) = xmmword_187C304D0;
  specialized Array.append<A>(contentsOf:)(inited);
  v1 = swift_initStackObject();
  *(_OWORD *)(v1 + 16) = xmmword_187C7C710;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 5;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 10;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_QWORD *)(v1 + 176) = 11;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = xmmword_187C39050;
  specialized Array.append<A>(contentsOf:)(v1);
  memset(v6, 0, sizeof(v6));
  v7 = xmmword_187C44460;
  v2 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  outlined init with take of Toolbar.BarLocation((uint64_t)v6, (uint64_t)&v2[40 * v4 + 32]);
  return v2;
}

void type metadata accessor for (offset: Int, element: ToolbarStorage.Item)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item))
  {
    type metadata accessor for ToolbarStorage.Item(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item));
  }
}

void type metadata accessor for (Int, ToolbarStorage.Item)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Int, ToolbarStorage.Item))
  {
    type metadata accessor for ToolbarStorage.Item(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, ToolbarStorage.Item));
  }
}

uint64_t type metadata accessor for ToolbarViewListVisitor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ToolbarViewListVisitor;
  if (!type metadata singleton initialization cache for ToolbarViewListVisitor)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>;
  if (!lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, (uint64_t (*)(uint64_t))MEMORY[0x1E0C96030], MEMORY[0x1E0C96020], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6620]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6638], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>;
  if (!lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, (uint64_t (*)(uint64_t))MEMORY[0x1E0C96030], MEMORY[0x1E0C96020], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6620]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6630], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>);
  }
  return result;
}

uint64_t destroy for ToolbarPlacementEnvironment()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ToolbarPlacementEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToolbarPlacementEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ToolbarPlacementEnvironment(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ToolbarPlacementEnvironment()
{
  return &type metadata for ToolbarPlacementEnvironment;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarForegroundStyleKey()
{
  return &type metadata for EnvironmentValues.ToolbarForegroundStyleKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarUpdateContextKey()
{
  return &type metadata for EnvironmentValues.ToolbarUpdateContextKey;
}

ValueMetadata *type metadata accessor for ToolbarItemBridgingPreferenceKey()
{
  return &type metadata for ToolbarItemBridgingPreferenceKey;
}

ValueMetadata *type metadata accessor for ToolbarItemBridgingOptions()
{
  return &type metadata for ToolbarItemBridgingOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for Toolbar.VendedItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for Toolbar.VendedItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t assignWithTake for Toolbar.VendedItem(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for Toolbar.VendedItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Toolbar.VendedItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Toolbar.VendedItem(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Toolbar.VendedItem()
{
  return &type metadata for Toolbar.VendedItem;
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarViewListVisitor(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  int *v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(void **, uint64_t, uint64_t);
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _OWORD *v24;
  _OWORD *v25;
  unint64_t v26;
  id v27;
  id v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  __int128 v39;
  void *v40;
  id v41;
  int v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(_BYTE *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  void *v114;
  _BYTE *v115;
  int *v116;
  uint64_t v117;
  _BYTE *v118;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    *a1 = *a2;
    v7 = a1 + 1;
    v8 = a2 + 1;
    if (*((_BYTE *)a2 + 48) == 1)
    {
      v9 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 2) = v9;
      (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
      *((_BYTE *)v4 + 48) = 1;
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 3);
      *v7 = *v8;
      *(_OWORD *)(v4 + 3) = v11;
      *(_OWORD *)((char *)v4 + 33) = *(_OWORD *)((char *)a2 + 33);
    }
    *(_DWORD *)((char *)v4 + 49) = *(_DWORD *)((char *)a2 + 49);
    v4[7] = a2[7];
    swift_weakCopyInit();
    *((_BYTE *)v4 + 72) = *((_BYTE *)a2 + 72);
    v12 = a2[11];
    v4[10] = a2[10];
    v4[11] = v12;
    v13 = v6[15];
    v14 = (void **)((char *)v4 + v13);
    v15 = (void **)((char *)a2 + v13);
    v16 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
LABEL_55:
      v96 = v6[16];
      v97 = v6[17];
      v98 = (_QWORD *)((char *)v4 + v96);
      v99 = (uint64_t *)((char *)a2 + v96);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      *((_BYTE *)v4 + v97) = *((_BYTE *)a2 + v97);
      *(_QWORD *)((char *)v4 + v6[18]) = *(uint64_t *)((char *)a2 + v6[18]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v4;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v39 = *(_OWORD *)(v15 + 3);
      *(_OWORD *)(v14 + 3) = v39;
      (**(void (***)(void **, void **))(v39 - 8))(v14, v15);
      v14[5] = v15[5];
      v14[6] = v15[6];
      v14[7] = v15[7];
      *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
      v40 = v15[10];
      v14[10] = v40;
      swift_retain();
      swift_bridgeObjectRetain();
      v41 = v40;
LABEL_54:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_55;
    }
    v116 = v6;
    v106 = v17;
    v107 = v16;
    v20 = *v15;
    v21 = v15[1];
    *v14 = *v15;
    v14[1] = v21;
    v22 = v15[3];
    v14[2] = v15[2];
    v14[3] = v22;
    *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
    v23 = v15[6];
    v14[5] = v15[5];
    v14[6] = v23;
    *((_BYTE *)v14 + 56) = *((_BYTE *)v15 + 56);
    v24 = v14 + 8;
    v25 = v15 + 8;
    v26 = (unint64_t)v15[23];
    v27 = v20;
    v28 = v21;
    v29 = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v26 >> 1 == 4294967294)
    {
      v30 = *((_OWORD *)v15 + 13);
      *((_OWORD *)v14 + 12) = *((_OWORD *)v15 + 12);
      *((_OWORD *)v14 + 13) = v30;
      *((_OWORD *)v14 + 14) = *((_OWORD *)v15 + 14);
      *(_DWORD *)((char *)v14 + 239) = *(_DWORD *)((char *)v15 + 239);
      v31 = *((_OWORD *)v15 + 9);
      *((_OWORD *)v14 + 8) = *((_OWORD *)v15 + 8);
      *((_OWORD *)v14 + 9) = v31;
      v32 = *((_OWORD *)v15 + 11);
      *((_OWORD *)v14 + 10) = *((_OWORD *)v15 + 10);
      *((_OWORD *)v14 + 11) = v32;
      v33 = *((_OWORD *)v15 + 5);
      *v24 = *v25;
      *((_OWORD *)v14 + 5) = v33;
      v34 = *((_OWORD *)v15 + 7);
      *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
      *((_OWORD *)v14 + 7) = v34;
      v6 = v116;
      v35 = v15[32];
      if (v35)
      {
LABEL_11:
        v14[31] = v15[31];
        v14[32] = v35;
        v36 = v15[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v36 >= 2)
          v37 = v36;
        v14[33] = v36;
        *((_DWORD *)v14 + 68) = *((_DWORD *)v15 + 68);
        *((_BYTE *)v14 + 276) = *((_BYTE *)v15 + 276);
        *(_WORD *)((char *)v14 + 277) = *(_WORD *)((char *)v15 + 277);
        v38 = v15[36];
        v14[35] = v15[35];
        v14[36] = v38;
        swift_retain();
        swift_retain();
LABEL_23:
        v53 = (unint64_t)v15[41];
        if (v53 >> 2 == 0xFFFFFFFF)
        {
          v54 = *(_OWORD *)(v15 + 47);
          *(_OWORD *)(v14 + 45) = *(_OWORD *)(v15 + 45);
          *(_OWORD *)(v14 + 47) = v54;
          v14[49] = v15[49];
          v55 = *(_OWORD *)(v15 + 39);
          *(_OWORD *)(v14 + 37) = *(_OWORD *)(v15 + 37);
          *(_OWORD *)(v14 + 39) = v55;
          v56 = *(_OWORD *)(v15 + 43);
          *(_OWORD *)(v14 + 41) = *(_OWORD *)(v15 + 41);
          *(_OWORD *)(v14 + 43) = v56;
        }
        else
        {
          v57 = v15[37];
          v103 = (uint64_t)v15[39];
          v104 = (uint64_t)v15[38];
          v102 = (uint64_t)v15[40];
          v58 = (uint64_t)v15[42];
          v59 = (uint64_t)v15[43];
          v60 = v15[44];
          v108 = (uint64_t)v15[45];
          v110 = (uint64_t)v15[46];
          v112 = (uint64_t)v15[47];
          v114 = v15[48];
          v117 = (uint64_t)v15[49];
          outlined copy of PlatformItemList.Item.SystemItem(v57, v104, v103, v102, v53, v58, v59, (char)v60, v108, v110, v112, (char)v114, v117);
          v14[37] = v57;
          v14[38] = (void *)v104;
          v14[39] = (void *)v103;
          v14[40] = (void *)v102;
          v14[41] = (void *)v53;
          v14[42] = (void *)v58;
          v14[43] = (void *)v59;
          v14[44] = v60;
          v14[45] = (void *)v108;
          v14[46] = (void *)v110;
          v14[47] = (void *)v112;
          v14[48] = v114;
          v14[49] = (void *)v117;
        }
        v61 = v15[51];
        if (v61 == (void *)1)
        {
          v62 = *((_OWORD *)v15 + 28);
          *((_OWORD *)v14 + 27) = *((_OWORD *)v15 + 27);
          *((_OWORD *)v14 + 28) = v62;
          *((_BYTE *)v14 + 464) = *((_BYTE *)v15 + 464);
          v63 = *((_OWORD *)v15 + 26);
          *((_OWORD *)v14 + 25) = *((_OWORD *)v15 + 25);
          *((_OWORD *)v14 + 26) = v63;
LABEL_36:
          v69 = v15[60];
          v14[59] = v15[59];
          v14[60] = v69;
          v14[61] = v15[61];
          *((_BYTE *)v14 + 496) = *((_BYTE *)v15 + 496);
          v70 = v15[63];
          swift_bridgeObjectRetain();
          if (v70)
          {
            v71 = v15[64];
            v14[63] = v70;
            v14[64] = v71;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v14 + 63) = *(_OWORD *)(v15 + 63);
          }
          *((_WORD *)v14 + 260) = *((_WORD *)v15 + 260);
          v72 = v15[66];
          if (v72)
          {
            v14[66] = v72;
            v14[67] = v15[67];
            v14[68] = v15[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v14 + 33) = *((_OWORD *)v15 + 33);
            v14[68] = v15[68];
          }
          v73 = v15[69];
          if (v73 == (void *)1)
          {
            *(_OWORD *)(v14 + 69) = *(_OWORD *)(v15 + 69);
            v14[71] = v15[71];
          }
          else
          {
            v14[69] = v73;
            v74 = v15[70];
            swift_retain();
            if (v74)
            {
              v75 = v15[71];
              v14[70] = v74;
              v14[71] = v75;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v14 + 35) = *((_OWORD *)v15 + 35);
            }
          }
          v76 = v15[72];
          v14[72] = v76;
          v14[73] = v15[73];
          v14[74] = v15[74];
          v14[75] = v15[75];
          v14[76] = v15[76];
          v14[77] = v15[77];
          v14[78] = v15[78];
          *((_WORD *)v14 + 316) = *((_WORD *)v15 + 316);
          *((_BYTE *)v14 + 634) = *((_BYTE *)v15 + 634);
          v113 = (int *)type metadata accessor for PlatformItemList.Item();
          v77 = v113[28];
          v115 = (char *)v15 + v77;
          v118 = (char *)v14 + v77;
          v78 = type metadata accessor for CommandOperation();
          v105 = *(_QWORD *)(v78 - 8);
          v109 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v105 + 48);
          v79 = v76;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v109(v115, 1, v78))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v118, v115, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
            v17 = v106;
            v16 = v107;
          }
          else
          {
            *v118 = *v115;
            v81 = *(int *)(v78 + 20);
            v111 = v78;
            v82 = &v118[v81];
            v83 = &v115[v81];
            v84 = *(_QWORD *)&v115[v81];
            v85 = *(_QWORD *)&v115[v81 + 8];
            v86 = v115[v81 + 16];
            outlined copy of Text.Storage(v84, *((_QWORD *)v83 + 1), v83[16]);
            *(_QWORD *)v82 = v84;
            *((_QWORD *)v82 + 1) = v85;
            v82[16] = v86;
            *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
            v87 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v88 = &v82[v87];
            v89 = &v83[v87];
            v90 = type metadata accessor for UUID();
            v91 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
            swift_bridgeObjectRetain();
            v91(v88, v89, v90);
            v92 = *(int *)(v111 + 24);
            v93 = &v118[v92];
            v94 = &v115[v92];
            if (*v94)
            {
              v95 = v94[1];
              *v93 = *v94;
              v93[1] = v95;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v93 = *(_OWORD *)v94;
            }
            v17 = v106;
            v16 = v107;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v118, 0, 1, v111);
          }
          *((_BYTE *)v14 + v113[29]) = *((_BYTE *)v15 + v113[29]);
          *((_BYTE *)v14 + v113[30]) = *((_BYTE *)v15 + v113[30]);
          *((_BYTE *)v14 + v113[31]) = *((_BYTE *)v15 + v113[31]);
          *((_BYTE *)v14 + v113[32]) = *((_BYTE *)v15 + v113[32]);
          *(void **)((char *)v14 + v113[33]) = *(void **)((char *)v15 + v113[33]);
          swift_retain();
          goto LABEL_54;
        }
        *((_DWORD *)v14 + 100) = *((_DWORD *)v15 + 100);
        *((_BYTE *)v14 + 404) = *((_BYTE *)v15 + 404);
        if (v61)
        {
          v64 = v15[52];
          v14[51] = v61;
          v14[52] = v64;
          swift_retain();
          v65 = v15[53];
          if (v65)
            goto LABEL_30;
        }
        else
        {
          *(_OWORD *)(v14 + 51) = *(_OWORD *)(v15 + 51);
          v65 = v15[53];
          if (v65)
          {
LABEL_30:
            v66 = v15[54];
            v14[53] = v65;
            v14[54] = v66;
            swift_retain();
            v67 = v15[55];
            if (v67)
            {
LABEL_31:
              v68 = v15[56];
              v14[55] = v67;
              v14[56] = v68;
              swift_retain();
LABEL_35:
              v14[57] = v15[57];
              *((_BYTE *)v14 + 464) = *((_BYTE *)v15 + 464);
              goto LABEL_36;
            }
LABEL_34:
            *(_OWORD *)(v14 + 55) = *(_OWORD *)(v15 + 55);
            goto LABEL_35;
          }
        }
        *(_OWORD *)(v14 + 53) = *(_OWORD *)(v15 + 53);
        v67 = v15[55];
        if (v67)
          goto LABEL_31;
        goto LABEL_34;
      }
    }
    else
    {
      v42 = *((unsigned __int8 *)v15 + 72);
      if (v42 == 255)
      {
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *((_BYTE *)v14 + 72) = *((_BYTE *)v15 + 72);
      }
      else
      {
        v43 = v15[8];
        outlined copy of GraphicsImage.Contents(v43, *((_BYTE *)v15 + 72));
        v14[8] = v43;
        *((_BYTE *)v14 + 72) = v42;
        v29 = (unint64_t)v15[23];
      }
      v6 = v116;
      v14[10] = v15[10];
      *(_OWORD *)(v14 + 11) = *(_OWORD *)(v15 + 11);
      *((_BYTE *)v14 + 104) = *((_BYTE *)v15 + 104);
      *(_OWORD *)((char *)v14 + 108) = *(_OWORD *)((char *)v15 + 108);
      *((_BYTE *)v14 + 124) = *((_BYTE *)v15 + 124);
      v44 = *((_OWORD *)v15 + 9);
      *((_OWORD *)v14 + 8) = *((_OWORD *)v15 + 8);
      *((_OWORD *)v14 + 9) = v44;
      *((_WORD *)v14 + 80) = *((_WORD *)v15 + 80);
      *((_BYTE *)v14 + 162) = *((_BYTE *)v15 + 162);
      *((_BYTE *)v14 + 163) = *((_BYTE *)v15 + 163);
      if (v29 >> 1 == 0xFFFFFFFF)
      {
        v45 = *(_OWORD *)(v15 + 23);
        *(_OWORD *)(v14 + 21) = *(_OWORD *)(v15 + 21);
        *(_OWORD *)(v14 + 23) = v45;
      }
      else
      {
        v46 = (uint64_t)v15[21];
        v47 = (uint64_t)v15[22];
        v48 = v15[24];
        outlined copy of AccessibilityImageLabel(v46, v47, v29);
        v14[21] = (void *)v46;
        v14[22] = (void *)v47;
        v14[23] = (void *)v29;
        v14[24] = v48;
      }
      v49 = v15[26];
      v14[25] = v15[25];
      v14[26] = v49;
      *((_WORD *)v14 + 108) = *((_WORD *)v15 + 108);
      *((_DWORD *)v14 + 55) = *((_DWORD *)v15 + 55);
      *((_BYTE *)v14 + 224) = *((_BYTE *)v15 + 224);
      v50 = v15[29];
      v14[29] = v50;
      *((_WORD *)v14 + 120) = *((_WORD *)v15 + 120);
      *((_BYTE *)v14 + 242) = *((_BYTE *)v15 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v51 = v50;
      v35 = v15[32];
      if (v35)
        goto LABEL_11;
    }
    v52 = *(_OWORD *)(v15 + 33);
    *(_OWORD *)(v14 + 31) = *(_OWORD *)(v15 + 31);
    *(_OWORD *)(v14 + 33) = v52;
    *(_OWORD *)(v14 + 35) = *(_OWORD *)(v15 + 35);
    goto LABEL_23;
  }
  v10 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for ToolbarViewListVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 48) == 1)
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 60);
  v5 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v4);
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_36;
    }

    swift_bridgeObjectRelease();
    swift_release();
    v6 = *(_QWORD *)(v4 + 184);
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v8 = *(unsigned __int8 *)(v4 + 72);
      if (v8 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
        v6 = *(_QWORD *)(v4 + 184);
        v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v7 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v6);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      v9 = *(void **)(v4 + 264);
      if ((unint64_t)v9 >= 2)

      swift_release();
      swift_release();
    }
    v10 = *(_QWORD *)(v4 + 328);
    if (v10 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(_QWORD *)(v4 + 304), *(_QWORD *)(v4 + 312), *(_QWORD *)(v4 + 320), v10, *(_QWORD *)(v4 + 336), *(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 352), *(_QWORD *)(v4 + 360), *(_QWORD *)(v4 + 368), *(_QWORD *)(v4 + 376), *(_QWORD *)(v4 + 384), *(_QWORD *)(v4 + 392));
    v11 = *(_QWORD *)(v4 + 408);
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 504))
          swift_release();
        if (*(_QWORD *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v4 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v4 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        v13 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
        {
          v14 = v12 + *(int *)(v13 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
          swift_bridgeObjectRelease();
          v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v16 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
          if (*(_QWORD *)(v12 + *(int *)(v13 + 24)))
            swift_release();
        }
        swift_release();
        goto LABEL_36;
      }
      swift_release();
    }
    if (*(_QWORD *)(v4 + 424))
      swift_release();
    if (*(_QWORD *)(v4 + 440))
      swift_release();
    goto LABEL_24;
  }
LABEL_36:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ToolbarViewListVisitor(uint64_t a1, uint64_t *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(void **, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _OWORD *v23;
  _OWORD *v24;
  unint64_t v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  __int128 v37;
  void *v38;
  id v39;
  int v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  _BYTE *v83;
  char *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, _BYTE *, uint64_t);
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  unsigned int (*v116)(_BYTE *, uint64_t, uint64_t);
  void *v117;
  uint64_t v118;
  char *v119;

  v7 = *a2;
  v6 = a2 + 1;
  *(_QWORD *)a1 = v7;
  v8 = (_OWORD *)(a1 + 8);
  if (*((_BYTE *)a2 + 48) == 1)
  {
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v8, v6);
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    v10 = v6[1];
    *v8 = *v6;
    v8[1] = v10;
    *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v6 + 25);
  }
  *(_DWORD *)(a1 + 49) = *(_DWORD *)((char *)a2 + 49);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_weakCopyInit();
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  v11 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v11;
  v12 = a3[15];
  v13 = (char *)(a1 + v12);
  v14 = (void **)((char *)a2 + v12);
  v15 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (!v17(v14, 1, v15))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v37 = *(_OWORD *)(v14 + 3);
      *(_OWORD *)(v13 + 24) = v37;
      (**(void (***)(void *, const void *))(v37 - 8))(v13, v14);
      *((_QWORD *)v13 + 5) = v14[5];
      *((_QWORD *)v13 + 6) = v14[6];
      *((_QWORD *)v13 + 7) = v14[7];
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      v38 = v14[10];
      *((_QWORD *)v13 + 10) = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      v39 = v38;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_53;
    }
    v112 = v16;
    v113 = v15;
    v114 = a3;
    v19 = *v14;
    v20 = v14[1];
    *(_QWORD *)v13 = *v14;
    *((_QWORD *)v13 + 1) = v20;
    v21 = v14[3];
    *((_QWORD *)v13 + 2) = v14[2];
    *((_QWORD *)v13 + 3) = v21;
    v13[32] = *((_BYTE *)v14 + 32);
    v22 = v14[6];
    *((_QWORD *)v13 + 5) = v14[5];
    *((_QWORD *)v13 + 6) = v22;
    v13[56] = *((_BYTE *)v14 + 56);
    v23 = v13 + 64;
    v24 = v14 + 8;
    v25 = (unint64_t)v14[23];
    v26 = v19;
    v27 = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v25 >> 1 == 4294967294)
    {
      v28 = *((_OWORD *)v14 + 13);
      *((_OWORD *)v13 + 12) = *((_OWORD *)v14 + 12);
      *((_OWORD *)v13 + 13) = v28;
      *((_OWORD *)v13 + 14) = *((_OWORD *)v14 + 14);
      *(_DWORD *)(v13 + 239) = *(_DWORD *)((char *)v14 + 239);
      v29 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v29;
      v30 = *((_OWORD *)v14 + 11);
      *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
      *((_OWORD *)v13 + 11) = v30;
      v31 = *((_OWORD *)v14 + 5);
      *v23 = *v24;
      *((_OWORD *)v13 + 5) = v31;
      v32 = *((_OWORD *)v14 + 7);
      *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
      *((_OWORD *)v13 + 7) = v32;
      v33 = v14[32];
      if (v33)
      {
LABEL_9:
        *((_QWORD *)v13 + 31) = v14[31];
        *((_QWORD *)v13 + 32) = v33;
        v34 = v14[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v34 >= 2)
          v35 = v34;
        *((_QWORD *)v13 + 33) = v34;
        *((_DWORD *)v13 + 68) = *((_DWORD *)v14 + 68);
        v13[276] = *((_BYTE *)v14 + 276);
        *(_WORD *)(v13 + 277) = *(_WORD *)((char *)v14 + 277);
        v36 = v14[36];
        *((_QWORD *)v13 + 35) = v14[35];
        *((_QWORD *)v13 + 36) = v36;
        swift_retain();
        swift_retain();
LABEL_21:
        v51 = (unint64_t)v14[41];
        if (v51 >> 2 == 0xFFFFFFFF)
        {
          v52 = *(_OWORD *)(v14 + 47);
          *(_OWORD *)(v13 + 360) = *(_OWORD *)(v14 + 45);
          *(_OWORD *)(v13 + 376) = v52;
          *((_QWORD *)v13 + 49) = v14[49];
          v53 = *(_OWORD *)(v14 + 39);
          *(_OWORD *)(v13 + 296) = *(_OWORD *)(v14 + 37);
          *(_OWORD *)(v13 + 312) = v53;
          v54 = *(_OWORD *)(v14 + 43);
          *(_OWORD *)(v13 + 328) = *(_OWORD *)(v14 + 41);
          *(_OWORD *)(v13 + 344) = v54;
        }
        else
        {
          v55 = v14[37];
          v56 = (uint64_t)v14[38];
          v105 = (uint64_t)v14[40];
          v106 = (uint64_t)v14[39];
          v57 = (uint64_t)v14[42];
          v58 = (uint64_t)v14[43];
          v59 = v14[44];
          v108 = (uint64_t)v14[45];
          v110 = (uint64_t)v14[46];
          v115 = (uint64_t)v14[47];
          v117 = v14[48];
          v118 = (uint64_t)v14[49];
          outlined copy of PlatformItemList.Item.SystemItem(v55, v56, v106, v105, v51, v57, v58, (char)v59, v108, v110, v115, (char)v117, v118);
          *((_QWORD *)v13 + 37) = v55;
          *((_QWORD *)v13 + 38) = v56;
          *((_QWORD *)v13 + 39) = v106;
          *((_QWORD *)v13 + 40) = v105;
          *((_QWORD *)v13 + 41) = v51;
          *((_QWORD *)v13 + 42) = v57;
          *((_QWORD *)v13 + 43) = v58;
          *((_QWORD *)v13 + 44) = v59;
          *((_QWORD *)v13 + 45) = v108;
          *((_QWORD *)v13 + 46) = v110;
          *((_QWORD *)v13 + 47) = v115;
          *((_QWORD *)v13 + 48) = v117;
          *((_QWORD *)v13 + 49) = v118;
        }
        v60 = v14[51];
        if (v60 == (void *)1)
        {
          v61 = *((_OWORD *)v14 + 28);
          *((_OWORD *)v13 + 27) = *((_OWORD *)v14 + 27);
          *((_OWORD *)v13 + 28) = v61;
          v13[464] = *((_BYTE *)v14 + 464);
          v62 = *((_OWORD *)v14 + 26);
          *((_OWORD *)v13 + 25) = *((_OWORD *)v14 + 25);
          *((_OWORD *)v13 + 26) = v62;
LABEL_34:
          v68 = v14[60];
          *((_QWORD *)v13 + 59) = v14[59];
          *((_QWORD *)v13 + 60) = v68;
          *((_QWORD *)v13 + 61) = v14[61];
          v13[496] = *((_BYTE *)v14 + 496);
          v69 = v14[63];
          swift_bridgeObjectRetain();
          if (v69)
          {
            v70 = v14[64];
            *((_QWORD *)v13 + 63) = v69;
            *((_QWORD *)v13 + 64) = v70;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 63);
          }
          *((_WORD *)v13 + 260) = *((_WORD *)v14 + 260);
          v71 = v14[66];
          if (v71)
          {
            *((_QWORD *)v13 + 66) = v71;
            *((_QWORD *)v13 + 67) = v14[67];
            *((_QWORD *)v13 + 68) = v14[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v13 + 33) = *((_OWORD *)v14 + 33);
            *((_QWORD *)v13 + 68) = v14[68];
          }
          v72 = v14[69];
          if (v72 == (void *)1)
          {
            *(_OWORD *)(v13 + 552) = *(_OWORD *)(v14 + 69);
            *((_QWORD *)v13 + 71) = v14[71];
          }
          else
          {
            *((_QWORD *)v13 + 69) = v72;
            v73 = v14[70];
            swift_retain();
            if (v73)
            {
              v74 = v14[71];
              *((_QWORD *)v13 + 70) = v73;
              *((_QWORD *)v13 + 71) = v74;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v13 + 35) = *((_OWORD *)v14 + 35);
            }
          }
          v75 = v14[72];
          *((_QWORD *)v13 + 72) = v75;
          *((_QWORD *)v13 + 73) = v14[73];
          *((_QWORD *)v13 + 74) = v14[74];
          *((_QWORD *)v13 + 75) = v14[75];
          *((_QWORD *)v13 + 76) = v14[76];
          *((_QWORD *)v13 + 77) = v14[77];
          *((_QWORD *)v13 + 78) = v14[78];
          *((_WORD *)v13 + 316) = *((_WORD *)v14 + 316);
          v13[634] = *((_BYTE *)v14 + 634);
          v111 = type metadata accessor for PlatformItemList.Item();
          v76 = *(int *)(v111 + 112);
          v119 = &v13[v76];
          v77 = (char *)v14 + v76;
          v78 = type metadata accessor for CommandOperation();
          v109 = *(_QWORD *)(v78 - 8);
          v116 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v109 + 48);
          v79 = v75;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v116(v77, 1, v78))
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
            memcpy(v119, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
            v15 = v113;
            a3 = v114;
            v81 = (int *)v111;
            v16 = v112;
          }
          else
          {
            *v119 = *v77;
            v82 = *(int *)(v78 + 20);
            v83 = v77;
            v107 = v77;
            v84 = &v119[v82];
            v85 = &v83[v82];
            v86 = *(_QWORD *)&v83[v82];
            v87 = *(_QWORD *)&v83[v82 + 8];
            v88 = v83[v82 + 16];
            outlined copy of Text.Storage(v86, v87, v88);
            *(_QWORD *)v84 = v86;
            *((_QWORD *)v84 + 1) = v87;
            v84[16] = v88;
            *((_QWORD *)v84 + 3) = *((_QWORD *)v85 + 3);
            v89 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v90 = &v84[v89];
            v91 = &v85[v89];
            v92 = v78;
            v93 = type metadata accessor for UUID();
            v94 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
            swift_bridgeObjectRetain();
            v94(v90, v91, v93);
            v95 = *(int *)(v92 + 24);
            v96 = &v119[v95];
            v97 = &v107[v95];
            if (*v97)
            {
              v98 = v97[1];
              *(_QWORD *)v96 = *v97;
              *((_QWORD *)v96 + 1) = v98;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v96 = *(_OWORD *)v97;
            }
            v15 = v113;
            a3 = v114;
            v81 = (int *)v111;
            v16 = v112;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v119, 0, 1, v92);
          }
          v13[v81[29]] = *((_BYTE *)v14 + v81[29]);
          v13[v81[30]] = *((_BYTE *)v14 + v81[30]);
          v13[v81[31]] = *((_BYTE *)v14 + v81[31]);
          v13[v81[32]] = *((_BYTE *)v14 + v81[32]);
          *(_QWORD *)&v13[v81[33]] = *(void **)((char *)v14 + v81[33]);
          swift_retain();
          goto LABEL_52;
        }
        *((_DWORD *)v13 + 100) = *((_DWORD *)v14 + 100);
        v13[404] = *((_BYTE *)v14 + 404);
        if (v60)
        {
          v63 = v14[52];
          *((_QWORD *)v13 + 51) = v60;
          *((_QWORD *)v13 + 52) = v63;
          swift_retain();
          v64 = v14[53];
          if (v64)
            goto LABEL_28;
        }
        else
        {
          *(_OWORD *)(v13 + 408) = *(_OWORD *)(v14 + 51);
          v64 = v14[53];
          if (v64)
          {
LABEL_28:
            v65 = v14[54];
            *((_QWORD *)v13 + 53) = v64;
            *((_QWORD *)v13 + 54) = v65;
            swift_retain();
            v66 = v14[55];
            if (v66)
            {
LABEL_29:
              v67 = v14[56];
              *((_QWORD *)v13 + 55) = v66;
              *((_QWORD *)v13 + 56) = v67;
              swift_retain();
LABEL_33:
              *((_QWORD *)v13 + 57) = v14[57];
              v13[464] = *((_BYTE *)v14 + 464);
              goto LABEL_34;
            }
LABEL_32:
            *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 55);
            goto LABEL_33;
          }
        }
        *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 53);
        v66 = v14[55];
        if (v66)
          goto LABEL_29;
        goto LABEL_32;
      }
    }
    else
    {
      v40 = *((unsigned __int8 *)v14 + 72);
      if (v40 == 255)
      {
        *(_QWORD *)v23 = *(_QWORD *)v24;
        v13[72] = *((_BYTE *)v14 + 72);
      }
      else
      {
        v41 = v14[8];
        outlined copy of GraphicsImage.Contents(v41, *((_BYTE *)v14 + 72));
        *((_QWORD *)v13 + 8) = v41;
        v13[72] = v40;
        v25 = (unint64_t)v14[23];
      }
      *((_QWORD *)v13 + 10) = v14[10];
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 11);
      v13[104] = *((_BYTE *)v14 + 104);
      *(_OWORD *)(v13 + 108) = *(_OWORD *)((char *)v14 + 108);
      v13[124] = *((_BYTE *)v14 + 124);
      v42 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v42;
      *((_WORD *)v13 + 80) = *((_WORD *)v14 + 80);
      v13[162] = *((_BYTE *)v14 + 162);
      v13[163] = *((_BYTE *)v14 + 163);
      if (v25 >> 1 == 0xFFFFFFFF)
      {
        v43 = *(_OWORD *)(v14 + 23);
        *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 21);
        *(_OWORD *)(v13 + 184) = v43;
      }
      else
      {
        v44 = (uint64_t)v14[21];
        v45 = (uint64_t)v14[22];
        v46 = v14[24];
        outlined copy of AccessibilityImageLabel(v44, v45, v25);
        *((_QWORD *)v13 + 21) = v44;
        *((_QWORD *)v13 + 22) = v45;
        *((_QWORD *)v13 + 23) = v25;
        *((_QWORD *)v13 + 24) = v46;
      }
      v47 = v14[26];
      *((_QWORD *)v13 + 25) = v14[25];
      *((_QWORD *)v13 + 26) = v47;
      *((_WORD *)v13 + 108) = *((_WORD *)v14 + 108);
      *((_DWORD *)v13 + 55) = *((_DWORD *)v14 + 55);
      v13[224] = *((_BYTE *)v14 + 224);
      v48 = v14[29];
      *((_QWORD *)v13 + 29) = v48;
      *((_WORD *)v13 + 120) = *((_WORD *)v14 + 120);
      v13[242] = *((_BYTE *)v14 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v49 = v48;
      v33 = v14[32];
      if (v33)
        goto LABEL_9;
    }
    v50 = *(_OWORD *)(v14 + 33);
    *(_OWORD *)(v13 + 248) = *(_OWORD *)(v14 + 31);
    *(_OWORD *)(v13 + 264) = v50;
    *(_OWORD *)(v13 + 280) = *(_OWORD *)(v14 + 35);
    goto LABEL_21;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_53:
  v99 = a3[16];
  v100 = a3[17];
  v101 = (_QWORD *)(a1 + v99);
  v102 = (uint64_t *)((char *)a2 + v99);
  v103 = v102[1];
  *v101 = *v102;
  v101[1] = v103;
  *(_BYTE *)(a1 + v100) = *((_BYTE *)a2 + v100);
  *(_QWORD *)(a1 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void **, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void *v21;
  void *v22;
  _OWORD *v23;
  id *v24;
  unint64_t v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  id v38;
  int v39;
  void *v40;
  void *v41;
  _OWORD *v42;
  id *v43;
  unint64_t v44;
  id v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  void *v57;
  id v58;
  int v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  int v64;
  id v65;
  id v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int v75;
  void *v76;
  id v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  __int128 v103;
  void *v104;
  _OWORD *v105;
  __int128 v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  id v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  int v146;
  void *v147;
  id v148;
  void *v149;
  id v150;
  int v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  __int128 v177;
  void *v178;
  _OWORD *v179;
  __int128 v180;
  void *v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  int *v188;
  uint64_t v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  uint64_t v198;
  void (*v199)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int (*v218)(_BYTE *, uint64_t, uint64_t);
  uint64_t v219;
  unsigned int (*v220)(_BYTE *, uint64_t, uint64_t);
  uint64_t v221;
  void *v222;
  _BYTE *v223;
  void *v224;
  _BYTE *v225;
  void *__dstb;
  _BYTE *__dst;
  void *__dstc;
  _BYTE *__dsta;
  uint64_t v230;
  int *v231;
  int *v232;

  v6 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 8);
    if (*(_BYTE *)(a2 + 48) == 1)
    {
      v8 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(_OWORD *, __int128 *))(v8 - 8))(v7, v6);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      v9 = *v6;
      v10 = v6[1];
      *(_OWORD *)((char *)v7 + 25) = *(__int128 *)((char *)v6 + 25);
      *v7 = v9;
      v7[1] = v10;
    }
  }
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_weakCopyAssign();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[15];
  v12 = (void **)(a1 + v11);
  v13 = (void **)(a2 + v11);
  v14 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (v18)
    {
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_10:
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, v19);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      goto LABEL_66;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v56 = v13[3];
      v12[3] = v56;
      v12[4] = v13[4];
      (**((void (***)(void **, void **))v56 - 1))(v12, v13);
      v12[5] = v13[5];
      *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
      *((_DWORD *)v12 + 13) = *((_DWORD *)v13 + 13);
      v12[7] = v13[7];
      v12[8] = v13[8];
      v12[9] = v13[9];
      v57 = v13[10];
      v12[10] = v57;
      swift_retain();
      swift_bridgeObjectRetain();
      v58 = v57;
LABEL_65:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_66;
    }
    v214 = v15;
    v230 = v14;
    v231 = a3;
    v21 = *v13;
    *v12 = *v13;
    v22 = v13[1];
    v12[1] = v22;
    v12[2] = v13[2];
    v12[3] = v13[3];
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    v12[5] = v13[5];
    v12[6] = v13[6];
    *((_BYTE *)v12 + 56) = *((_BYTE *)v13 + 56);
    v23 = v12 + 8;
    v24 = v13 + 8;
    v25 = (unint64_t)v13[23];
    v26 = v21;
    v27 = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v25 >> 1 == 4294967294)
    {
      v28 = *(_OWORD *)v24;
      v29 = *((_OWORD *)v13 + 5);
      v30 = *((_OWORD *)v13 + 7);
      *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
      *((_OWORD *)v12 + 7) = v30;
      *v23 = v28;
      *((_OWORD *)v12 + 5) = v29;
      v31 = *((_OWORD *)v13 + 8);
      v32 = *((_OWORD *)v13 + 9);
      v33 = *((_OWORD *)v13 + 11);
      *((_OWORD *)v12 + 10) = *((_OWORD *)v13 + 10);
      *((_OWORD *)v12 + 11) = v33;
      *((_OWORD *)v12 + 8) = v31;
      *((_OWORD *)v12 + 9) = v32;
      v34 = *((_OWORD *)v13 + 12);
      v35 = *((_OWORD *)v13 + 13);
      v36 = *((_OWORD *)v13 + 14);
      *(_DWORD *)((char *)v12 + 239) = *(_DWORD *)((char *)v13 + 239);
      *((_OWORD *)v12 + 13) = v35;
      *((_OWORD *)v12 + 14) = v36;
      *((_OWORD *)v12 + 12) = v34;
      if (v13[32])
      {
LABEL_14:
        v12[31] = v13[31];
        v12[32] = v13[32];
        v37 = v13[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v37 >= 2)
          v38 = v37;
        v12[33] = v37;
        v39 = *((_DWORD *)v13 + 68);
        *((_BYTE *)v12 + 276) = *((_BYTE *)v13 + 276);
        *((_DWORD *)v12 + 68) = v39;
        *((_BYTE *)v12 + 277) = *((_BYTE *)v13 + 277);
        *((_BYTE *)v12 + 278) = *((_BYTE *)v13 + 278);
        v12[35] = v13[35];
        v12[36] = v13[36];
        swift_retain();
        swift_retain();
LABEL_33:
        v80 = (unint64_t)v13[41];
        if (v80 >> 2 == 0xFFFFFFFF)
        {
          v81 = *(_OWORD *)(v13 + 37);
          v82 = *(_OWORD *)(v13 + 41);
          *(_OWORD *)(v12 + 39) = *(_OWORD *)(v13 + 39);
          *(_OWORD *)(v12 + 41) = v82;
          *(_OWORD *)(v12 + 37) = v81;
          v83 = *(_OWORD *)(v13 + 43);
          v84 = *(_OWORD *)(v13 + 45);
          v85 = *(_OWORD *)(v13 + 47);
          v12[49] = v13[49];
          *(_OWORD *)(v12 + 45) = v84;
          *(_OWORD *)(v12 + 47) = v85;
          *(_OWORD *)(v12 + 43) = v83;
        }
        else
        {
          v86 = v13[37];
          v87 = (uint64_t)v13[38];
          v204 = (uint64_t)v13[40];
          v205 = (uint64_t)v13[39];
          v88 = (uint64_t)v13[42];
          v89 = (uint64_t)v13[43];
          v90 = v13[44];
          v207 = (uint64_t)v13[45];
          v210 = (uint64_t)v13[46];
          v217 = (uint64_t)v13[47];
          v222 = v13[48];
          __dstb = v13[49];
          outlined copy of PlatformItemList.Item.SystemItem(v86, v87, v205, v204, v80, v88, v89, (char)v90, v207, v210, v217, (char)v222, (uint64_t)__dstb);
          v12[37] = v86;
          v12[38] = (void *)v87;
          v12[39] = (void *)v205;
          v12[40] = (void *)v204;
          v12[41] = (void *)v80;
          v12[42] = (void *)v88;
          v12[43] = (void *)v89;
          v12[44] = v90;
          v12[45] = (void *)v207;
          v12[46] = (void *)v210;
          v12[47] = (void *)v217;
          v12[48] = v222;
          v12[49] = __dstb;
        }
        if (v13[51] == (void *)1)
        {
          *((_OWORD *)v12 + 25) = *((_OWORD *)v13 + 25);
          v91 = *((_OWORD *)v13 + 26);
          v92 = *((_OWORD *)v13 + 27);
          v93 = *((_OWORD *)v13 + 28);
          *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
          *((_OWORD *)v12 + 27) = v92;
          *((_OWORD *)v12 + 28) = v93;
          *((_OWORD *)v12 + 26) = v91;
          goto LABEL_46;
        }
        *((_BYTE *)v12 + 400) = *((_BYTE *)v13 + 400);
        *((_BYTE *)v12 + 401) = *((_BYTE *)v13 + 401);
        *((_BYTE *)v12 + 402) = *((_BYTE *)v13 + 402);
        *((_BYTE *)v12 + 403) = *((_BYTE *)v13 + 403);
        *((_BYTE *)v12 + 404) = *((_BYTE *)v13 + 404);
        v94 = v13[51];
        if (v94)
        {
          v95 = v13[52];
          v12[51] = v94;
          v12[52] = v95;
          swift_retain();
          v96 = v13[53];
          if (v96)
            goto LABEL_40;
        }
        else
        {
          *(_OWORD *)(v12 + 51) = *(_OWORD *)(v13 + 51);
          v96 = v13[53];
          if (v96)
          {
LABEL_40:
            v97 = v13[54];
            v12[53] = v96;
            v12[54] = v97;
            swift_retain();
            v98 = v13[55];
            if (v98)
            {
LABEL_41:
              v99 = v13[56];
              v12[55] = v98;
              v12[56] = v99;
              swift_retain();
LABEL_45:
              v12[57] = v13[57];
              *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
LABEL_46:
              v12[59] = v13[59];
              v12[60] = v13[60];
              v12[61] = v13[61];
              *((_BYTE *)v12 + 496) = *((_BYTE *)v13 + 496);
              v100 = v13[63];
              swift_bridgeObjectRetain();
              if (v100)
              {
                v101 = v13[64];
                v12[63] = v100;
                v12[64] = v101;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(v12 + 63) = *(_OWORD *)(v13 + 63);
              }
              *((_WORD *)v12 + 260) = *((_WORD *)v13 + 260);
              v102 = v13[66];
              if (v102)
              {
                v12[66] = v102;
                v12[67] = v13[67];
                v12[68] = v13[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v103 = *((_OWORD *)v13 + 33);
                v12[68] = v13[68];
                *((_OWORD *)v12 + 33) = v103;
              }
              v104 = v13[69];
              if (v104 == (void *)1)
              {
                v105 = v12 + 69;
                v106 = *(_OWORD *)(v13 + 69);
                v12[71] = v13[71];
              }
              else
              {
                v12[69] = v104;
                v107 = v13[70];
                swift_retain();
                if (v107)
                {
                  v108 = v13[71];
                  v12[70] = v107;
                  v12[71] = v108;
                  swift_retain();
LABEL_58:
                  v109 = v13[72];
                  v12[72] = v109;
                  v12[73] = v13[73];
                  v12[74] = v13[74];
                  v12[75] = v13[75];
                  v12[76] = v13[76];
                  v12[77] = v13[77];
                  v12[78] = v13[78];
                  *((_BYTE *)v12 + 632) = *((_BYTE *)v13 + 632);
                  *((_BYTE *)v12 + 633) = *((_BYTE *)v13 + 633);
                  *((_BYTE *)v12 + 634) = *((_BYTE *)v13 + 634);
                  v211 = (int *)type metadata accessor for PlatformItemList.Item();
                  v110 = v211[28];
                  __dst = (char *)v12 + v110;
                  v111 = (char *)v13 + v110;
                  v112 = type metadata accessor for CommandOperation();
                  v208 = *(_QWORD *)(v112 - 8);
                  v218 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v208 + 48);
                  v113 = v109;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v218(v111, 1, v112))
                  {
                    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
                    memcpy(__dst, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
                    v14 = v230;
                    a3 = v231;
                    v15 = v214;
                  }
                  else
                  {
                    *__dst = *v111;
                    v115 = *(int *)(v112 + 20);
                    v116 = &__dst[v115];
                    v117 = &v111[v115];
                    v223 = v111;
                    v118 = *(_QWORD *)&v111[v115];
                    v119 = *((_QWORD *)v117 + 1);
                    v120 = v117[16];
                    outlined copy of Text.Storage(v118, v119, v120);
                    *(_QWORD *)v116 = v118;
                    *((_QWORD *)v116 + 1) = v119;
                    v116[16] = v120;
                    *((_QWORD *)v116 + 3) = *((_QWORD *)v117 + 3);
                    v121 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v122 = &v116[v121];
                    v123 = &v117[v121];
                    v124 = v112;
                    v125 = type metadata accessor for UUID();
                    v126 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v125 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v127 = v125;
                    v128 = v124;
                    v126(v122, v123, v127);
                    v129 = *(int *)(v124 + 24);
                    v130 = &__dst[v129];
                    v131 = &v223[v129];
                    if (*v131)
                    {
                      v132 = v131[1];
                      *v130 = *v131;
                      v130[1] = v132;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v130 = *(_OWORD *)v131;
                    }
                    v14 = v230;
                    a3 = v231;
                    v15 = v214;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v208 + 56))(__dst, 0, 1, v128);
                  }
                  *((_BYTE *)v12 + v211[29]) = *((_BYTE *)v13 + v211[29]);
                  *((_BYTE *)v12 + v211[30]) = *((_BYTE *)v13 + v211[30]);
                  *((_BYTE *)v12 + v211[31]) = *((_BYTE *)v13 + v211[31]);
                  *((_BYTE *)v12 + v211[32]) = *((_BYTE *)v13 + v211[32]);
                  *(void **)((char *)v12 + v211[33]) = *(void **)((char *)v13 + v211[33]);
                  swift_retain();
                  goto LABEL_65;
                }
                v105 = v12 + 70;
                v106 = *((_OWORD *)v13 + 35);
              }
              *v105 = v106;
              goto LABEL_58;
            }
LABEL_44:
            *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 55);
            goto LABEL_45;
          }
        }
        *(_OWORD *)(v12 + 53) = *(_OWORD *)(v13 + 53);
        v98 = v13[55];
        if (v98)
          goto LABEL_41;
        goto LABEL_44;
      }
    }
    else
    {
      v59 = *((unsigned __int8 *)v13 + 72);
      if (v59 == 255)
      {
        v66 = *v24;
        *((_BYTE *)v12 + 72) = *((_BYTE *)v13 + 72);
        *(_QWORD *)v23 = v66;
      }
      else
      {
        v60 = *v24;
        outlined copy of GraphicsImage.Contents(*v24, *((_BYTE *)v13 + 72));
        v12[8] = v60;
        *((_BYTE *)v12 + 72) = v59;
      }
      v12[10] = v13[10];
      *(_OWORD *)(v12 + 11) = *(_OWORD *)(v13 + 11);
      *((_BYTE *)v12 + 104) = *((_BYTE *)v13 + 104);
      v67 = *(_OWORD *)((char *)v13 + 108);
      *((_BYTE *)v12 + 124) = *((_BYTE *)v13 + 124);
      *(_OWORD *)((char *)v12 + 108) = v67;
      v68 = *((_OWORD *)v13 + 8);
      v69 = *((_OWORD *)v13 + 9);
      *((_BYTE *)v12 + 160) = *((_BYTE *)v13 + 160);
      *((_OWORD *)v12 + 8) = v68;
      *((_OWORD *)v12 + 9) = v69;
      *((_BYTE *)v12 + 161) = *((_BYTE *)v13 + 161);
      *((_BYTE *)v12 + 162) = *((_BYTE *)v13 + 162);
      *((_BYTE *)v12 + 163) = *((_BYTE *)v13 + 163);
      v70 = (unint64_t)v13[23];
      if (v70 >> 1 == 0xFFFFFFFF)
      {
        v71 = *(_OWORD *)(v13 + 23);
        *(_OWORD *)(v12 + 21) = *(_OWORD *)(v13 + 21);
        *(_OWORD *)(v12 + 23) = v71;
      }
      else
      {
        v72 = (uint64_t)v13[21];
        v73 = (uint64_t)v13[22];
        v74 = v13[24];
        outlined copy of AccessibilityImageLabel(v72, v73, (uint64_t)v13[23]);
        v12[21] = (void *)v72;
        v12[22] = (void *)v73;
        v12[23] = (void *)v70;
        v12[24] = v74;
      }
      v12[25] = v13[25];
      v12[26] = v13[26];
      *((_BYTE *)v12 + 216) = *((_BYTE *)v13 + 216);
      *((_BYTE *)v12 + 217) = *((_BYTE *)v13 + 217);
      v75 = *((_DWORD *)v13 + 55);
      *((_BYTE *)v12 + 224) = *((_BYTE *)v13 + 224);
      *((_DWORD *)v12 + 55) = v75;
      v76 = v13[29];
      v12[29] = v76;
      *((_WORD *)v12 + 120) = *((_WORD *)v13 + 120);
      *((_BYTE *)v12 + 242) = *((_BYTE *)v13 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v77 = v76;
      if (v13[32])
        goto LABEL_14;
    }
    v78 = *(_OWORD *)(v13 + 31);
    v79 = *(_OWORD *)(v13 + 35);
    *(_OWORD *)(v12 + 33) = *(_OWORD *)(v13 + 33);
    *(_OWORD *)(v12 + 35) = v79;
    *(_OWORD *)(v12 + 31) = v78;
    goto LABEL_33;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_10;
  }
  if (a1 == a2)
    goto LABEL_66;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v61 = v13[3];
    v12[3] = v61;
    v12[4] = v13[4];
    (**((void (***)(void **, void **))v61 - 1))(v12, v13);
    v12[5] = v13[5];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((_DWORD *)v12 + 13) = *((_DWORD *)v13 + 13);
    v12[7] = v13[7];
    v12[8] = v13[8];
    v12[9] = v13[9];
    v62 = v13[10];
    v12[10] = v62;
    swift_retain();
    swift_bridgeObjectRetain();
    v63 = v62;
    swift_storeEnumTagMultiPayload();
    goto LABEL_66;
  }
  v232 = a3;
  v40 = *v13;
  *v12 = *v13;
  v41 = v13[1];
  v12[1] = v41;
  v12[2] = v13[2];
  v12[3] = v13[3];
  *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
  v12[5] = v13[5];
  v12[6] = v13[6];
  *((_BYTE *)v12 + 56) = *((_BYTE *)v13 + 56);
  v42 = v12 + 8;
  v43 = v13 + 8;
  v44 = (unint64_t)v13[23];
  v45 = v40;
  v46 = v41;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v44 >> 1 == 4294967294)
  {
    v47 = *(_OWORD *)v43;
    v48 = *((_OWORD *)v13 + 5);
    v49 = *((_OWORD *)v13 + 7);
    *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
    *((_OWORD *)v12 + 7) = v49;
    *v42 = v47;
    *((_OWORD *)v12 + 5) = v48;
    v50 = *((_OWORD *)v13 + 8);
    v51 = *((_OWORD *)v13 + 9);
    v52 = *((_OWORD *)v13 + 11);
    *((_OWORD *)v12 + 10) = *((_OWORD *)v13 + 10);
    *((_OWORD *)v12 + 11) = v52;
    *((_OWORD *)v12 + 8) = v50;
    *((_OWORD *)v12 + 9) = v51;
    v53 = *((_OWORD *)v13 + 12);
    v54 = *((_OWORD *)v13 + 13);
    v55 = *((_OWORD *)v13 + 14);
    *(_DWORD *)((char *)v12 + 239) = *(_DWORD *)((char *)v13 + 239);
    *((_OWORD *)v12 + 13) = v54;
    *((_OWORD *)v12 + 14) = v55;
    *((_OWORD *)v12 + 12) = v53;
  }
  else
  {
    v64 = *((unsigned __int8 *)v13 + 72);
    if (v64 == 255)
    {
      v137 = *v43;
      *((_BYTE *)v12 + 72) = *((_BYTE *)v13 + 72);
      *(_QWORD *)v42 = v137;
    }
    else
    {
      v65 = *v43;
      outlined copy of GraphicsImage.Contents(*v43, *((_BYTE *)v13 + 72));
      v12[8] = v65;
      *((_BYTE *)v12 + 72) = v64;
    }
    v12[10] = v13[10];
    *(_OWORD *)(v12 + 11) = *(_OWORD *)(v13 + 11);
    *((_BYTE *)v12 + 104) = *((_BYTE *)v13 + 104);
    v138 = *(_OWORD *)((char *)v13 + 108);
    *((_BYTE *)v12 + 124) = *((_BYTE *)v13 + 124);
    *(_OWORD *)((char *)v12 + 108) = v138;
    v139 = *((_OWORD *)v13 + 8);
    v140 = *((_OWORD *)v13 + 9);
    *((_BYTE *)v12 + 160) = *((_BYTE *)v13 + 160);
    *((_OWORD *)v12 + 8) = v139;
    *((_OWORD *)v12 + 9) = v140;
    *((_BYTE *)v12 + 161) = *((_BYTE *)v13 + 161);
    *((_BYTE *)v12 + 162) = *((_BYTE *)v13 + 162);
    *((_BYTE *)v12 + 163) = *((_BYTE *)v13 + 163);
    v141 = (unint64_t)v13[23];
    if (v141 >> 1 == 0xFFFFFFFF)
    {
      v142 = *(_OWORD *)(v13 + 23);
      *(_OWORD *)(v12 + 21) = *(_OWORD *)(v13 + 21);
      *(_OWORD *)(v12 + 23) = v142;
    }
    else
    {
      v143 = (uint64_t)v13[21];
      v144 = (uint64_t)v13[22];
      v145 = v13[24];
      outlined copy of AccessibilityImageLabel(v143, v144, (uint64_t)v13[23]);
      v12[21] = (void *)v143;
      v12[22] = (void *)v144;
      v12[23] = (void *)v141;
      v12[24] = v145;
    }
    v12[25] = v13[25];
    v12[26] = v13[26];
    *((_BYTE *)v12 + 216) = *((_BYTE *)v13 + 216);
    *((_BYTE *)v12 + 217) = *((_BYTE *)v13 + 217);
    v146 = *((_DWORD *)v13 + 55);
    *((_BYTE *)v12 + 224) = *((_BYTE *)v13 + 224);
    *((_DWORD *)v12 + 55) = v146;
    v147 = v13[29];
    v12[29] = v147;
    *((_WORD *)v12 + 120) = *((_WORD *)v13 + 120);
    *((_BYTE *)v12 + 242) = *((_BYTE *)v13 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v148 = v147;
  }
  if (v13[32])
  {
    v12[31] = v13[31];
    v12[32] = v13[32];
    v149 = v13[33];
    swift_bridgeObjectRetain();
    if ((unint64_t)v149 >= 2)
      v150 = v149;
    v12[33] = v149;
    v151 = *((_DWORD *)v13 + 68);
    *((_BYTE *)v12 + 276) = *((_BYTE *)v13 + 276);
    *((_DWORD *)v12 + 68) = v151;
    *((_BYTE *)v12 + 277) = *((_BYTE *)v13 + 277);
    *((_BYTE *)v12 + 278) = *((_BYTE *)v13 + 278);
    v12[35] = v13[35];
    v12[36] = v13[36];
    swift_retain();
    swift_retain();
  }
  else
  {
    v152 = *(_OWORD *)(v13 + 31);
    v153 = *(_OWORD *)(v13 + 35);
    *(_OWORD *)(v12 + 33) = *(_OWORD *)(v13 + 33);
    *(_OWORD *)(v12 + 35) = v153;
    *(_OWORD *)(v12 + 31) = v152;
  }
  v154 = (unint64_t)v13[41];
  if (v154 >> 2 == 0xFFFFFFFF)
  {
    v155 = *(_OWORD *)(v13 + 37);
    v156 = *(_OWORD *)(v13 + 41);
    *(_OWORD *)(v12 + 39) = *(_OWORD *)(v13 + 39);
    *(_OWORD *)(v12 + 41) = v156;
    *(_OWORD *)(v12 + 37) = v155;
    v157 = *(_OWORD *)(v13 + 43);
    v158 = *(_OWORD *)(v13 + 45);
    v159 = *(_OWORD *)(v13 + 47);
    v12[49] = v13[49];
    *(_OWORD *)(v12 + 45) = v158;
    *(_OWORD *)(v12 + 47) = v159;
    *(_OWORD *)(v12 + 43) = v157;
  }
  else
  {
    v160 = v13[37];
    v161 = (uint64_t)v13[38];
    v206 = (uint64_t)v13[40];
    v209 = (uint64_t)v13[39];
    v162 = (uint64_t)v13[42];
    v163 = (uint64_t)v13[43];
    v164 = v13[44];
    v212 = (uint64_t)v13[45];
    v215 = (uint64_t)v13[46];
    v219 = (uint64_t)v13[47];
    v224 = v13[48];
    __dstc = v13[49];
    outlined copy of PlatformItemList.Item.SystemItem(v160, v161, v209, v206, v154, v162, v163, (char)v164, v212, v215, v219, (char)v224, (uint64_t)__dstc);
    v12[37] = v160;
    v12[38] = (void *)v161;
    v12[39] = (void *)v209;
    v12[40] = (void *)v206;
    v12[41] = (void *)v154;
    v12[42] = (void *)v162;
    v12[43] = (void *)v163;
    v12[44] = v164;
    v12[45] = (void *)v212;
    v12[46] = (void *)v215;
    v12[47] = (void *)v219;
    v12[48] = v224;
    v12[49] = __dstc;
  }
  if (v13[51] == (void *)1)
  {
    *((_OWORD *)v12 + 25) = *((_OWORD *)v13 + 25);
    v165 = *((_OWORD *)v13 + 26);
    v166 = *((_OWORD *)v13 + 27);
    v167 = *((_OWORD *)v13 + 28);
    *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
    *((_OWORD *)v12 + 27) = v166;
    *((_OWORD *)v12 + 28) = v167;
    *((_OWORD *)v12 + 26) = v165;
  }
  else
  {
    *((_BYTE *)v12 + 400) = *((_BYTE *)v13 + 400);
    *((_BYTE *)v12 + 401) = *((_BYTE *)v13 + 401);
    *((_BYTE *)v12 + 402) = *((_BYTE *)v13 + 402);
    *((_BYTE *)v12 + 403) = *((_BYTE *)v13 + 403);
    *((_BYTE *)v12 + 404) = *((_BYTE *)v13 + 404);
    v168 = v13[51];
    if (v168)
    {
      v169 = v13[52];
      v12[51] = v168;
      v12[52] = v169;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v12 + 51) = *(_OWORD *)(v13 + 51);
    }
    v170 = v13[53];
    if (v170)
    {
      v171 = v13[54];
      v12[53] = v170;
      v12[54] = v171;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v12 + 53) = *(_OWORD *)(v13 + 53);
    }
    v172 = v13[55];
    if (v172)
    {
      v173 = v13[56];
      v12[55] = v172;
      v12[56] = v173;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 55);
    }
    v12[57] = v13[57];
    *((_BYTE *)v12 + 464) = *((_BYTE *)v13 + 464);
  }
  v12[59] = v13[59];
  v12[60] = v13[60];
  v12[61] = v13[61];
  *((_BYTE *)v12 + 496) = *((_BYTE *)v13 + 496);
  v174 = v13[63];
  swift_bridgeObjectRetain();
  if (v174)
  {
    v175 = v13[64];
    v12[63] = v174;
    v12[64] = v175;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v12 + 63) = *(_OWORD *)(v13 + 63);
  }
  *((_WORD *)v12 + 260) = *((_WORD *)v13 + 260);
  v176 = v13[66];
  if (v176)
  {
    v12[66] = v176;
    v12[67] = v13[67];
    v12[68] = v13[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v177 = *((_OWORD *)v13 + 33);
    v12[68] = v13[68];
    *((_OWORD *)v12 + 33) = v177;
  }
  v178 = v13[69];
  if (v178 == (void *)1)
  {
    v179 = v12 + 69;
    v180 = *(_OWORD *)(v13 + 69);
    v12[71] = v13[71];
LABEL_103:
    *v179 = v180;
    goto LABEL_104;
  }
  v12[69] = v178;
  v181 = v13[70];
  swift_retain();
  if (!v181)
  {
    v179 = v12 + 70;
    v180 = *((_OWORD *)v13 + 35);
    goto LABEL_103;
  }
  v182 = v13[71];
  v12[70] = v181;
  v12[71] = v182;
  swift_retain();
LABEL_104:
  v183 = v13[72];
  v12[72] = v183;
  v12[73] = v13[73];
  v12[74] = v13[74];
  v12[75] = v13[75];
  v12[76] = v13[76];
  v12[77] = v13[77];
  v12[78] = v13[78];
  *((_BYTE *)v12 + 632) = *((_BYTE *)v13 + 632);
  *((_BYTE *)v12 + 633) = *((_BYTE *)v13 + 633);
  *((_BYTE *)v12 + 634) = *((_BYTE *)v13 + 634);
  v216 = type metadata accessor for PlatformItemList.Item();
  v184 = *(int *)(v216 + 112);
  v225 = (char *)v13 + v184;
  __dsta = (char *)v12 + v184;
  v185 = type metadata accessor for CommandOperation();
  v213 = *(_QWORD *)(v185 - 8);
  v220 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v213 + 48);
  v186 = v183;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v220(v225, 1, v185))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dsta, v225, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    a3 = v232;
    v188 = (int *)v216;
  }
  else
  {
    *__dsta = *v225;
    v189 = *(int *)(v185 + 20);
    v190 = &__dsta[v189];
    v191 = &v225[v189];
    v192 = *(_QWORD *)&v225[v189];
    v193 = *(_QWORD *)&v225[v189 + 8];
    v221 = v185;
    v194 = v225[v189 + 16];
    outlined copy of Text.Storage(*(_QWORD *)v191, *((_QWORD *)v191 + 1), v191[16]);
    *(_QWORD *)v190 = v192;
    *((_QWORD *)v190 + 1) = v193;
    v190[16] = v194;
    *((_QWORD *)v190 + 3) = *((_QWORD *)v191 + 3);
    v195 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v196 = &v190[v195];
    v197 = &v191[v195];
    v198 = type metadata accessor for UUID();
    v199 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v198 - 8) + 16);
    swift_bridgeObjectRetain();
    v199(v196, v197, v198);
    v200 = *(int *)(v221 + 24);
    v201 = &__dsta[v200];
    v202 = &v225[v200];
    if (*v202)
    {
      v203 = v202[1];
      *v201 = *v202;
      v201[1] = v203;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v201 = *(_OWORD *)v202;
    }
    a3 = v232;
    v188 = (int *)v216;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v213 + 56))(__dsta, 0, 1, v221);
  }
  *((_BYTE *)v12 + v188[29]) = *((_BYTE *)v13 + v188[29]);
  *((_BYTE *)v12 + v188[30]) = *((_BYTE *)v13 + v188[30]);
  *((_BYTE *)v12 + v188[31]) = *((_BYTE *)v13 + v188[31]);
  *((_BYTE *)v12 + v188[32]) = *((_BYTE *)v13 + v188[32]);
  *(void **)((char *)v12 + v188[33]) = *(void **)((char *)v13 + v188[33]);
  swift_retain();
  swift_storeEnumTagMultiPayload();
LABEL_66:
  v133 = a3[16];
  v134 = (_QWORD *)(a1 + v133);
  v135 = (_QWORD *)(a2 + v133);
  *v134 = *v135;
  v134[1] = v135[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_weakTakeInit();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = a3[15];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = v9[1];
      *v8 = *v9;
      v8[1] = v13;
      *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
      v14 = *((_QWORD *)v9 + 6);
      *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 6) = v14;
      *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
      v15 = v9[13];
      v8[12] = v9[12];
      v8[13] = v15;
      v8[14] = v9[14];
      *(_DWORD *)((char *)v8 + 239) = *(_DWORD *)((char *)v9 + 239);
      v16 = v9[9];
      v8[8] = v9[8];
      v8[9] = v16;
      v17 = v9[11];
      v8[10] = v9[10];
      v8[11] = v17;
      v18 = v9[5];
      v8[4] = v9[4];
      v8[5] = v18;
      v19 = v9[7];
      v8[6] = v9[6];
      v8[7] = v19;
      *(_OWORD *)((char *)v8 + 248) = *(_OWORD *)((char *)v9 + 248);
      v20 = *(_OWORD *)((char *)v9 + 280);
      *(_OWORD *)((char *)v8 + 264) = *(_OWORD *)((char *)v9 + 264);
      *(_OWORD *)((char *)v8 + 280) = v20;
      v21 = *(_OWORD *)((char *)v9 + 376);
      *(_OWORD *)((char *)v8 + 360) = *(_OWORD *)((char *)v9 + 360);
      *(_OWORD *)((char *)v8 + 376) = v21;
      *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
      v22 = *(_OWORD *)((char *)v9 + 312);
      *(_OWORD *)((char *)v8 + 296) = *(_OWORD *)((char *)v9 + 296);
      *(_OWORD *)((char *)v8 + 312) = v22;
      v23 = *(_OWORD *)((char *)v9 + 344);
      *(_OWORD *)((char *)v8 + 328) = *(_OWORD *)((char *)v9 + 328);
      *(_OWORD *)((char *)v8 + 344) = v23;
      v24 = v9[28];
      v8[27] = v9[27];
      v8[28] = v24;
      *((_BYTE *)v8 + 464) = *((_BYTE *)v9 + 464);
      v25 = v9[26];
      v8[25] = v9[25];
      v8[26] = v25;
      *(_OWORD *)((char *)v8 + 472) = *(_OWORD *)((char *)v9 + 472);
      *(_OWORD *)((char *)v8 + 481) = *(_OWORD *)((char *)v9 + 481);
      v26 = *((_QWORD *)v9 + 63);
      v50 = v11;
      if (v26)
      {
        v27 = *((_QWORD *)v9 + 64);
        *((_QWORD *)v8 + 63) = v26;
        *((_QWORD *)v8 + 64) = v27;
      }
      else
      {
        *(_OWORD *)((char *)v8 + 504) = *(_OWORD *)((char *)v9 + 504);
      }
      *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
      v8[33] = v9[33];
      *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
      *((_QWORD *)v8 + 71) = *((_QWORD *)v9 + 71);
      *(_OWORD *)((char *)v8 + 552) = *(_OWORD *)((char *)v9 + 552);
      *((_QWORD *)v8 + 72) = *((_QWORD *)v9 + 72);
      *(_OWORD *)((char *)v8 + 584) = *(_OWORD *)((char *)v9 + 584);
      *(_OWORD *)((char *)v8 + 600) = *(_OWORD *)((char *)v9 + 600);
      *((_QWORD *)v8 + 77) = *((_QWORD *)v9 + 77);
      *((_QWORD *)v8 + 78) = *((_QWORD *)v9 + 78);
      *((_BYTE *)v8 + 632) = *((_BYTE *)v9 + 632);
      *(_WORD *)((char *)v8 + 633) = *(_WORD *)((char *)v9 + 633);
      v28 = (int *)type metadata accessor for PlatformItemList.Item();
      v29 = v28[28];
      v52 = (char *)v8 + v29;
      v30 = (char *)v9 + v29;
      v31 = type metadata accessor for CommandOperation();
      v32 = *(_QWORD *)(v31 - 8);
      v51 = v30;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v52, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        v11 = v50;
      }
      else
      {
        *v52 = *v30;
        v34 = *(int *)(v31 + 20);
        v35 = &v52[v34];
        v47 = &v51[v34];
        v36 = *(_OWORD *)&v51[v34 + 16];
        *v35 = *(_OWORD *)&v51[v34];
        v35[1] = v36;
        v37 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v49 = (char *)v35 + v37;
        v48 = &v47[v37];
        v38 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v49, v48, v38);
        v39 = *(int *)(v31 + 24);
        v40 = &v52[v39];
        v41 = (uint64_t *)&v51[v39];
        v42 = *v41;
        v43 = v31;
        if (*v41)
        {
          v44 = v41[1];
          *v40 = v42;
          v40[1] = v44;
        }
        else
        {
          *(_OWORD *)v40 = *(_OWORD *)v41;
        }
        v11 = v50;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v52, 0, 1, v43);
      }
      *((_BYTE *)v8 + v28[29]) = *((_BYTE *)v9 + v28[29]);
      *((_BYTE *)v8 + v28[30]) = *((_BYTE *)v9 + v28[30]);
      *((_BYTE *)v8 + v28[31]) = *((_BYTE *)v9 + v28[31]);
      *((_BYTE *)v8 + v28[32]) = *((_BYTE *)v9 + v28[32]);
      *(_QWORD *)((char *)v8 + v28[33]) = *(_QWORD *)((char *)v9 + v28[33]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(v11 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v45 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithTake for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_OWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  size_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  char *v90;
  uint64_t v91;
  int *v92;
  char *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *__dst;
  _BYTE *__dsta;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_weakTakeAssign();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[15];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_8:
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, v15);
      v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
LABEL_9:
      memcpy(v8, v9, v17);
      goto LABEL_31;
    }
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = v9[1];
      *v8 = *v9;
      v8[1] = v18;
      *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
      v19 = *((_QWORD *)v9 + 6);
      *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 6) = v19;
      *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
      v20 = v9[13];
      v8[12] = v9[12];
      v8[13] = v20;
      v8[14] = v9[14];
      *(_DWORD *)((char *)v8 + 239) = *(_DWORD *)((char *)v9 + 239);
      v21 = v9[9];
      v8[8] = v9[8];
      v8[9] = v21;
      v22 = v9[11];
      v8[10] = v9[10];
      v8[11] = v22;
      v23 = v9[5];
      v8[4] = v9[4];
      v8[5] = v23;
      v24 = v9[7];
      v8[6] = v9[6];
      v8[7] = v24;
      *(_OWORD *)((char *)v8 + 248) = *(_OWORD *)((char *)v9 + 248);
      v25 = *(_OWORD *)((char *)v9 + 280);
      *(_OWORD *)((char *)v8 + 264) = *(_OWORD *)((char *)v9 + 264);
      *(_OWORD *)((char *)v8 + 280) = v25;
      v26 = *(_OWORD *)((char *)v9 + 376);
      *(_OWORD *)((char *)v8 + 360) = *(_OWORD *)((char *)v9 + 360);
      *(_OWORD *)((char *)v8 + 376) = v26;
      *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
      v27 = *(_OWORD *)((char *)v9 + 312);
      *(_OWORD *)((char *)v8 + 296) = *(_OWORD *)((char *)v9 + 296);
      *(_OWORD *)((char *)v8 + 312) = v27;
      v28 = *(_OWORD *)((char *)v9 + 344);
      *(_OWORD *)((char *)v8 + 328) = *(_OWORD *)((char *)v9 + 328);
      *(_OWORD *)((char *)v8 + 344) = v28;
      v29 = v9[28];
      v8[27] = v9[27];
      v8[28] = v29;
      *((_BYTE *)v8 + 464) = *((_BYTE *)v9 + 464);
      v30 = v9[26];
      v8[25] = v9[25];
      v8[26] = v30;
      *(_OWORD *)((char *)v8 + 472) = *(_OWORD *)((char *)v9 + 472);
      *(_OWORD *)((char *)v8 + 481) = *(_OWORD *)((char *)v9 + 481);
      v31 = *((_QWORD *)v9 + 63);
      if (v31)
      {
        v32 = *((_QWORD *)v9 + 64);
        *((_QWORD *)v8 + 63) = v31;
        *((_QWORD *)v8 + 64) = v32;
      }
      else
      {
        *(_OWORD *)((char *)v8 + 504) = *(_OWORD *)((char *)v9 + 504);
      }
      *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
      v8[33] = v9[33];
      *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
      *((_QWORD *)v8 + 71) = *((_QWORD *)v9 + 71);
      *(_OWORD *)((char *)v8 + 552) = *(_OWORD *)((char *)v9 + 552);
      *((_QWORD *)v8 + 72) = *((_QWORD *)v9 + 72);
      *(_OWORD *)((char *)v8 + 584) = *(_OWORD *)((char *)v9 + 584);
      *(_OWORD *)((char *)v8 + 600) = *(_OWORD *)((char *)v9 + 600);
      *((_QWORD *)v8 + 77) = *((_QWORD *)v9 + 77);
      *((_QWORD *)v8 + 78) = *((_QWORD *)v9 + 78);
      *((_BYTE *)v8 + 632) = *((_BYTE *)v9 + 632);
      *(_WORD *)((char *)v8 + 633) = *(_WORD *)((char *)v9 + 633);
      v92 = (int *)type metadata accessor for PlatformItemList.Item();
      v48 = v92[28];
      __dst = (char *)v8 + v48;
      v49 = (char *)v9 + v48;
      v50 = type metadata accessor for CommandOperation();
      v51 = *(_QWORD *)(v50 - 8);
      v94 = v49;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        *__dst = *v49;
        v53 = *(int *)(v50 + 20);
        v54 = &__dst[v53];
        v88 = &v94[v53];
        v55 = *(_OWORD *)&v94[v53 + 16];
        *v54 = *(_OWORD *)&v94[v53];
        v54[1] = v55;
        v56 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v90 = (char *)v54 + v56;
        v89 = &v88[v56];
        v57 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v90, v89, v57);
        v58 = *(int *)(v50 + 24);
        v59 = &__dst[v58];
        v60 = (uint64_t *)&v94[v58];
        v61 = *v60;
        if (*v60)
        {
          v62 = v60[1];
          *v59 = v61;
          v59[1] = v62;
        }
        else
        {
          *(_OWORD *)v59 = *(_OWORD *)v60;
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
      }
      *((_BYTE *)v8 + v92[29]) = *((_BYTE *)v9 + v92[29]);
      *((_BYTE *)v8 + v92[30]) = *((_BYTE *)v9 + v92[30]);
      *((_BYTE *)v8 + v92[31]) = *((_BYTE *)v9 + v92[31]);
      *((_BYTE *)v8 + v92[32]) = *((_BYTE *)v9 + v92[32]);
      *(_QWORD *)((char *)v8 + v92[33]) = *(_QWORD *)((char *)v9 + v92[33]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(v11 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_8;
    }
    if (a1 == a2)
      goto LABEL_31;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v17 = *(_QWORD *)(v11 + 64);
      goto LABEL_9;
    }
    v33 = v9[1];
    *v8 = *v9;
    v8[1] = v33;
    *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    v34 = *((_QWORD *)v9 + 6);
    *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
    *((_QWORD *)v8 + 6) = v34;
    *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
    v35 = v9[13];
    v8[12] = v9[12];
    v8[13] = v35;
    v8[14] = v9[14];
    *(_DWORD *)((char *)v8 + 239) = *(_DWORD *)((char *)v9 + 239);
    v36 = v9[9];
    v8[8] = v9[8];
    v8[9] = v36;
    v37 = v9[11];
    v8[10] = v9[10];
    v8[11] = v37;
    v38 = v9[5];
    v8[4] = v9[4];
    v8[5] = v38;
    v39 = v9[7];
    v8[6] = v9[6];
    v8[7] = v39;
    *(_OWORD *)((char *)v8 + 248) = *(_OWORD *)((char *)v9 + 248);
    v40 = *(_OWORD *)((char *)v9 + 280);
    *(_OWORD *)((char *)v8 + 264) = *(_OWORD *)((char *)v9 + 264);
    *(_OWORD *)((char *)v8 + 280) = v40;
    v41 = *(_OWORD *)((char *)v9 + 376);
    *(_OWORD *)((char *)v8 + 360) = *(_OWORD *)((char *)v9 + 360);
    *(_OWORD *)((char *)v8 + 376) = v41;
    *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
    v42 = *(_OWORD *)((char *)v9 + 312);
    *(_OWORD *)((char *)v8 + 296) = *(_OWORD *)((char *)v9 + 296);
    *(_OWORD *)((char *)v8 + 312) = v42;
    v43 = *(_OWORD *)((char *)v9 + 344);
    *(_OWORD *)((char *)v8 + 328) = *(_OWORD *)((char *)v9 + 328);
    *(_OWORD *)((char *)v8 + 344) = v43;
    v44 = v9[28];
    v8[27] = v9[27];
    v8[28] = v44;
    *((_BYTE *)v8 + 464) = *((_BYTE *)v9 + 464);
    v45 = v9[26];
    v8[25] = v9[25];
    v8[26] = v45;
    *(_OWORD *)((char *)v8 + 472) = *(_OWORD *)((char *)v9 + 472);
    *(_OWORD *)((char *)v8 + 481) = *(_OWORD *)((char *)v9 + 481);
    v46 = *((_QWORD *)v9 + 63);
    if (v46)
    {
      v47 = *((_QWORD *)v9 + 64);
      *((_QWORD *)v8 + 63) = v46;
      *((_QWORD *)v8 + 64) = v47;
    }
    else
    {
      *(_OWORD *)((char *)v8 + 504) = *(_OWORD *)((char *)v9 + 504);
    }
    *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
    v8[33] = v9[33];
    *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
    *((_QWORD *)v8 + 71) = *((_QWORD *)v9 + 71);
    *(_OWORD *)((char *)v8 + 552) = *(_OWORD *)((char *)v9 + 552);
    *((_QWORD *)v8 + 72) = *((_QWORD *)v9 + 72);
    *(_OWORD *)((char *)v8 + 584) = *(_OWORD *)((char *)v9 + 584);
    *(_OWORD *)((char *)v8 + 600) = *(_OWORD *)((char *)v9 + 600);
    *((_QWORD *)v8 + 77) = *((_QWORD *)v9 + 77);
    *((_QWORD *)v8 + 78) = *((_QWORD *)v9 + 78);
    *((_BYTE *)v8 + 632) = *((_BYTE *)v9 + 632);
    *(_WORD *)((char *)v8 + 633) = *(_WORD *)((char *)v9 + 633);
    v63 = (int *)type metadata accessor for PlatformItemList.Item();
    v64 = v63[28];
    __dsta = (char *)v8 + v64;
    v65 = (char *)v9 + v64;
    v66 = type metadata accessor for CommandOperation();
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dsta, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v91 = v67;
      *__dsta = *v65;
      v76 = *(int *)(v66 + 20);
      v77 = &__dsta[v76];
      v95 = v65;
      v78 = &v65[v76];
      v79 = v78[1];
      *v77 = *v78;
      v77[1] = v79;
      v80 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v93 = (char *)v77 + v80;
      v81 = (char *)v78 + v80;
      v82 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v93, v81, v82);
      v83 = *(int *)(v66 + 24);
      v84 = &__dsta[v83];
      v85 = (uint64_t *)&v95[v83];
      v86 = *v85;
      if (*v85)
      {
        v87 = v85[1];
        *v84 = v86;
        v84[1] = v87;
      }
      else
      {
        *(_OWORD *)v84 = *(_OWORD *)v85;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v91 + 56))(__dsta, 0, 1, v66);
    }
    *((_BYTE *)v8 + v63[29]) = *((_BYTE *)v9 + v63[29]);
    *((_BYTE *)v8 + v63[30]) = *((_BYTE *)v9 + v63[30]);
    *((_BYTE *)v8 + v63[31]) = *((_BYTE *)v9 + v63[31]);
    *((_BYTE *)v8 + v63[32]) = *((_BYTE *)v9 + v63[32]);
    *(_QWORD *)((char *)v8 + v63[33]) = *(_QWORD *)((char *)v9 + v63[33]);
    swift_storeEnumTagMultiPayload();
  }
LABEL_31:
  v69 = a3[16];
  v70 = (_QWORD *)(a1 + v69);
  v71 = (uint64_t *)(a2 + v69);
  v73 = *v71;
  v72 = v71[1];
  *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  v74 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v74) = *(_QWORD *)(a2 + v74);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarViewListVisitor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A1DEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 60), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 72));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarViewListVisitor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_187A1DF80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 60), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 72)) = (a2 - 1);
}

void type metadata completion function for ToolbarViewListVisitor()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for ToolbarViewListVisitor.ContinuationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A1E144 + 4 * byte_187C7C76D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A1E178 + 4 * byte_187C7C768[v4]))();
}

uint64_t sub_187A1E178(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A1E180(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A1E188);
  return result;
}

uint64_t sub_187A1E194(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A1E19CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A1E1A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A1E1A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarViewListVisitor.ContinuationMode()
{
  return &type metadata for ToolbarViewListVisitor.ContinuationMode;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, (uint64_t)&type metadata for IncludesStyledTextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for IncludesStyledTextModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>)
  {
    type metadata accessor for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>, (uint64_t)&type metadata for ToolbarItemBridgingPreferenceKey, (uint64_t)&protocol witness table for ToolbarItemBridgingPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>);
  }
}

void type metadata accessor for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>)
  {
    lazy protocol witness table accessor for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>, (uint64_t)&type metadata for ToolbarItemBridgingPreferenceKey, (uint64_t)&protocol witness table for ToolbarItemBridgingPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode;
  if (!lazy protocol witness table cache variable for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarViewListVisitor.ContinuationMode, &type metadata for ToolbarViewListVisitor.ContinuationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemBridgingOptions, &type metadata for ToolbarItemBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemBridgingOptions, &type metadata for ToolbarItemBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemBridgingOptions, &type metadata for ToolbarItemBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemBridgingOptions, &type metadata for ToolbarItemBridgingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

uint64_t outlined assign with take of ToolbarStorage.GroupItem.CollapsedContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ToolbarItemBridgingConfiguration()
{
  return &type metadata for ToolbarItemBridgingConfiguration;
}

uint64_t ClarityUIPreviewContext.subscript.getter(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  if (a1 != &type metadata for ClarityUIPreviewContextKey)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

uint64_t protocol witness for PreviewContext.subscript.getter in conformance ClarityUIPreviewContext(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  return ClarityUIPreviewContext.subscript.getter(a1, a2, a3);
}

void static ClarityUIPreviewContextKey.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for ClarityUIPreviewContext()
{
  return &type metadata for ClarityUIPreviewContext;
}

ValueMetadata *type metadata accessor for ClarityUIPreviewContextKey()
{
  return &type metadata for ClarityUIPreviewContextKey;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  char v6;
  _BYTE v8[32];
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = a1 + 32;
  for (i = a2 + 32; ; i += 120)
  {
    outlined init with copy of SwiftUIAnySortComparator(i, (uint64_t)v8);
    v6 = MEMORY[0x18D75E284](&v9, v4);
    outlined destroy of SwiftUIAnySortComparator((uint64_t)v8);
    if ((v6 & 1) != 0)
      break;
    if (v2 == ++v3)
      return 0;
  }
  return v3;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x18D75E3BC](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      type metadata accessor for AccessibilityNode();
      v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)MEMORY[0x18D75E3BC](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = static NSObject.== infix(_:_:)();

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3)
          continue;
      }
      return;
    }
  }
}

{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x18D75E3BC](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
      v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)MEMORY[0x18D75E3BC](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = static NSObject.== infix(_:_:)();

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3)
          continue;
      }
      return;
    }
  }
}

unint64_t specialized Dictionary.optimisticFilter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::UInt32 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  Swift::UInt32 v30;
  char isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t result;
  char v44;
  char v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v49;
  int64_t i;
  int64_t v51;
  Swift::UInt32 v52;
  char v53[176];
  Swift::UInt32 v54;
  _BYTE v55[176];
  _QWORD *v56;
  _BYTE v57[176];
  Swift::UInt32 v58;
  _BYTE v59[176];
  _DWORD v60[44];
  char v61;
  Swift::UInt32 v62;
  _QWORD v63[24];

  if (*(_QWORD *)(a1 + 16) >= 0x41uLL)
  {
    v1 = swift_bridgeObjectRetain();
    v2 = specialized _NativeDictionary.filter(_:)(v1, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
    swift_bridgeObjectRelease();
    return v2;
  }
  v47 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v46 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v49 = 0;
  i = 0;
  v44 = 1;
  v45 = 1;
  if (v5)
    goto LABEL_8;
LABEL_9:
  v9 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v9 >= v46)
    goto LABEL_31;
  v10 = *(_QWORD *)(v47 + 8 * v9);
  v11 = i + 1;
  if (v10)
    goto LABEL_24;
  v11 = i + 2;
  if (i + 2 >= v46)
  {
LABEL_31:
    v2 = a1;
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    if ((v45 & 1) != 0)
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if ((v44 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      return v2;
    }
    v17 = -1;
    v18 = -1 << *(_BYTE *)(a1 + 32);
    if (-v18 < 64)
      v17 = ~(-1 << -(char)v18);
    v19 = v17 & *(_QWORD *)(a1 + 64);
    v51 = (unint64_t)(63 - v18) >> 6;
    swift_bridgeObjectRetain();
    v20 = 0;
    v21 = 0;
    v22 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    while (!v19)
    {
      v25 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_81;
      v27 = v21;
      if (v25 < v51)
      {
        v28 = *(_QWORD *)(v47 + 8 * v25);
        if (v28)
          goto LABEL_47;
        v29 = v21 + 2;
        v27 = v21 + 1;
        if (v21 + 2 < v51)
        {
          v28 = *(_QWORD *)(v47 + 8 * v29);
          if (v28)
            goto LABEL_50;
          v27 = v21 + 2;
          if (v21 + 3 < v51)
          {
            v28 = *(_QWORD *)(v47 + 8 * (v21 + 3));
            if (v28)
            {
              v25 = v21 + 3;
              goto LABEL_47;
            }
            v27 = v21 + 3;
            if (v21 + 4 < v51)
            {
              v28 = *(_QWORD *)(v47 + 8 * (v21 + 4));
              if (v28)
              {
                v25 = v21 + 4;
                goto LABEL_47;
              }
              v29 = v21 + 5;
              v27 = v21 + 4;
              if (v21 + 5 < v51)
              {
                v28 = *(_QWORD *)(v47 + 8 * v29);
                if (!v28)
                {
                  while (1)
                  {
                    v25 = v29 + 1;
                    if (__OFADD__(v29, 1))
                      goto LABEL_85;
                    if (v25 >= v51)
                    {
                      v27 = v51 - 1;
                      goto LABEL_64;
                    }
                    v28 = *(_QWORD *)(v47 + 8 * v25);
                    ++v29;
                    if (v28)
                      goto LABEL_47;
                  }
                }
LABEL_50:
                v25 = v29;
LABEL_47:
                v23 = (v28 - 1) & v28;
                v24 = __clz(__rbit64(v28)) + (v25 << 6);
LABEL_43:
                v26 = *(_QWORD *)(v2 + 56);
                v60[0] = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v24);
                outlined init with copy of ConfirmationDialog(v26 + 176 * v24, (uint64_t)&v60[2]);
                v27 = v25;
                goto LABEL_65;
              }
            }
          }
        }
      }
LABEL_64:
      v23 = 0;
      v61 = 0;
      memset(v60, 0, sizeof(v60));
LABEL_65:
      outlined init with take of TableCellFormula((uint64_t)v60, (uint64_t)&v62, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?);
      if (!v63[2])
      {
        outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
        return (unint64_t)v22;
      }
      v30 = v62;
      outlined init with take of ConfirmationDialog((uint64_t)v63, (uint64_t)v60);
      if (v20 == 0x8000000000000000)
        goto LABEL_86;
      if (v20 < 0x40 && ((v49 >> v20) & 1) != 0)
      {
        outlined init with copy of ConfirmationDialog((uint64_t)v60, (uint64_t)&v58);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v56 = v22;
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        v34 = v22[2];
        v35 = (v32 & 1) == 0;
        v36 = v34 + v35;
        if (__OFADD__(v34, v35))
          goto LABEL_82;
        v37 = v32;
        if (v22[3] >= v36)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
          v38 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v37 & 1) != (v39 & 1))
            goto LABEL_87;
          v33 = v38;
        }
        v2 = a1;
        v22 = v56;
        if ((v37 & 1) != 0)
        {
          outlined assign with take of ConfirmationDialog((uint64_t)&v58, v56[7] + 176 * v33);
        }
        else
        {
          v56[(v33 >> 6) + 8] |= 1 << v33;
          *(_DWORD *)(v22[6] + 4 * v33) = v30;
          outlined init with take of ConfirmationDialog((uint64_t)&v58, v22[7] + 176 * v33);
          v40 = v22[2];
          v41 = __OFADD__(v40, 1);
          v42 = v40 + 1;
          if (v41)
            goto LABEL_84;
          v22[2] = v42;
        }
        swift_bridgeObjectRelease();
      }
      outlined destroy of ConfirmationDialog((uint64_t)v60);
      ++v20;
      v21 = v27;
      v19 = v23;
    }
    v23 = (v19 - 1) & v19;
    v24 = __clz(__rbit64(v19)) | (v21 << 6);
    v25 = v21;
    goto LABEL_43;
  }
  v10 = *(_QWORD *)(v47 + 8 * v11);
  if (v10)
  {
LABEL_24:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    for (i = v11; ; v8 = v7 | (i << 6))
    {
      v13 = *(_QWORD *)(a1 + 56);
      v62 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v8);
      v14 = v62;
      outlined init with copy of ConfirmationDialog(v13 + 176 * v8, (uint64_t)v63);
      v60[0] = v14;
      outlined init with take of ConfirmationDialog((uint64_t)v63, (uint64_t)&v60[2]);
      v58 = v14;
      outlined init with copy of ConfirmationDialog((uint64_t)&v60[2], (uint64_t)v59);
      LODWORD(v56) = v14;
      outlined init with copy of ConfirmationDialog((uint64_t)v59, (uint64_t)v57);
      v54 = v14;
      outlined init with copy of ConfirmationDialog((uint64_t)v57, (uint64_t)v55);
      v52 = v14;
      outlined init with take of ConfirmationDialog((uint64_t)v55, (uint64_t)v53);
      v15 = v53[0];
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v52, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v56, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v60, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
      outlined destroy of ConfirmationDialog((uint64_t)v59);
      if (v15 == 1)
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_86;
        v45 = 0;
        v16 = 1 << v6;
        if (v6 >= 0x40)
          v16 = 0;
        v49 |= v16;
        ++v6;
        if (!v5)
          goto LABEL_9;
      }
      else
      {
        v44 = 0;
        ++v6;
        if (!v5)
          goto LABEL_9;
      }
LABEL_8:
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
    }
  }
  v11 = i + 3;
  if (i + 3 >= v46)
    goto LABEL_31;
  v10 = *(_QWORD *)(v47 + 8 * v11);
  if (v10)
    goto LABEL_24;
  v11 = i + 4;
  if (i + 4 >= v46)
    goto LABEL_31;
  v10 = *(_QWORD *)(v47 + 8 * v11);
  if (v10)
    goto LABEL_24;
  v12 = i + 5;
  if (i + 5 >= v46)
    goto LABEL_31;
  v10 = *(_QWORD *)(v47 + 8 * v12);
  if (v10)
  {
    v11 = i + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v46)
      goto LABEL_31;
    v10 = *(_QWORD *)(v47 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_24;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_87:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  int64_t i;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  int v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  Swift::UInt32 v51;
  unint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  _QWORD *v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  _OWORD v108[15];
  _QWORD *v109;
  _OWORD v110[15];
  _BYTE v111[244];
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  Swift::UInt32 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;

  v1 = a1;
  if (*(_QWORD *)(a1 + 16) >= 0x41uLL)
  {
    v2 = swift_bridgeObjectRetain();
    v3 = specialized _NativeDictionary.filter(_:)(v2, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
    swift_bridgeObjectRelease();
    return v3;
  }
  v5 = 0;
  i = 0;
  v7 = 0;
  v8 = a1 + 64;
  v9 = -1;
  v10 = -1 << *(_BYTE *)(a1 + 32);
  if (-v10 < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *(_QWORD *)(a1 + 64);
  v12 = (unint64_t)(63 - v10) >> 6;
  v13 = 1;
  v14 = 1;
  if (v11)
    goto LABEL_9;
LABEL_10:
  v17 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v17 < v12)
    {
      v18 = *(_QWORD *)(v8 + 8 * v17);
      v19 = i + 1;
      if (v18)
        goto LABEL_25;
      v19 = i + 2;
      if (i + 2 < v12)
      {
        v18 = *(_QWORD *)(v8 + 8 * v19);
        if (v18)
          goto LABEL_25;
        v19 = i + 3;
        if (i + 3 < v12)
        {
          v18 = *(_QWORD *)(v8 + 8 * v19);
          if (v18)
            goto LABEL_25;
          v19 = i + 4;
          if (i + 4 < v12)
          {
            v18 = *(_QWORD *)(v8 + 8 * v19);
            if (!v18)
            {
              v20 = i + 5;
              if (i + 5 < v12)
              {
                v18 = *(_QWORD *)(v8 + 8 * v20);
                if (v18)
                {
                  v19 = i + 5;
                  goto LABEL_25;
                }
                while (1)
                {
                  v19 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_80;
                  if (v19 >= v12)
                    goto LABEL_32;
                  v18 = *(_QWORD *)(v8 + 8 * v19);
                  ++v20;
                  if (v18)
                    goto LABEL_25;
                }
              }
              goto LABEL_32;
            }
LABEL_25:
            v11 = (v18 - 1) & v18;
            v16 = __clz(__rbit64(v18)) + (v19 << 6);
            for (i = v19; ; v16 = v15 | (i << 6))
            {
              if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 240 * v16) == 1)
              {
                if ((v5 & 0x8000000000000000) != 0)
                  goto LABEL_83;
                v13 = 0;
                v21 = 1 << v5;
                if (v5 >= 0x40)
                  v21 = 0;
                v7 |= v21;
                ++v5;
                if (!v11)
                  goto LABEL_10;
              }
              else
              {
                v14 = 0;
                ++v5;
                if (!v11)
                  goto LABEL_10;
              }
LABEL_9:
              v15 = __clz(__rbit64(v11));
              v11 &= v11 - 1;
            }
          }
        }
      }
    }
LABEL_32:
    swift_bridgeObjectRetain();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    if ((v13 & 1) != 0)
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if ((v14 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      return v1;
    }
    v22 = -1;
    v23 = -1 << *(_BYTE *)(v1 + 32);
    if (-v23 < 64)
      v22 = ~(-1 << -(char)v23);
    v24 = v22 & *(_QWORD *)(v1 + 64);
    v103 = (unint64_t)(63 - v23) >> 6;
    swift_bridgeObjectRetain();
    v25 = 0;
    v105 = 0;
    v104 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v101 = v1 + 64;
    v102 = v1;
    while (1)
    {
      v107 = v25;
      if (v24)
      {
        v106 = (v24 - 1) & v24;
        v26 = __clz(__rbit64(v24)) | (v105 << 6);
      }
      else
      {
        v27 = v105 + 1;
        if (__OFADD__(v105, 1))
          goto LABEL_78;
        if (v27 >= v103)
        {
LABEL_76:
          outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
          return (unint64_t)v104;
        }
        v28 = *(_QWORD *)(v8 + 8 * v27);
        v29 = v105 + 1;
        if (!v28)
        {
          v29 = v105 + 2;
          if (v105 + 2 >= v103)
            goto LABEL_76;
          v28 = *(_QWORD *)(v8 + 8 * v29);
          if (!v28)
          {
            v29 = v105 + 3;
            if (v105 + 3 >= v103)
              goto LABEL_76;
            v28 = *(_QWORD *)(v8 + 8 * v29);
            if (!v28)
            {
              v29 = v105 + 4;
              if (v105 + 4 >= v103)
                goto LABEL_76;
              v28 = *(_QWORD *)(v8 + 8 * v29);
              if (!v28)
              {
                v30 = v105 + 5;
                if (v105 + 5 >= v103)
                  goto LABEL_76;
                v28 = *(_QWORD *)(v8 + 8 * v30);
                if (!v28)
                {
                  while (1)
                  {
                    v29 = v30 + 1;
                    if (__OFADD__(v30, 1))
                      goto LABEL_82;
                    if (v29 >= v103)
                      goto LABEL_76;
                    v28 = *(_QWORD *)(v8 + 8 * v29);
                    ++v30;
                    if (v28)
                      goto LABEL_58;
                  }
                }
                v29 = v105 + 5;
              }
            }
          }
        }
LABEL_58:
        v105 = v29;
        v106 = (v28 - 1) & v28;
        v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      v31 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * v26);
      v32 = (_OWORD *)(*(_QWORD *)(v1 + 56) + 240 * v26);
      v34 = v32[1];
      v33 = v32[2];
      v110[0] = *v32;
      v110[1] = v34;
      v110[2] = v33;
      v35 = v32[6];
      v37 = v32[3];
      v36 = v32[4];
      v110[5] = v32[5];
      v110[6] = v35;
      v110[3] = v37;
      v110[4] = v36;
      v38 = v32[10];
      v40 = v32[7];
      v39 = v32[8];
      v110[9] = v32[9];
      v110[10] = v38;
      v110[7] = v40;
      v110[8] = v39;
      v41 = v32[14];
      v43 = v32[11];
      v42 = v32[12];
      v110[13] = v32[13];
      v110[14] = v41;
      v110[11] = v43;
      v110[12] = v42;
      v44 = v32[13];
      *(_OWORD *)&v111[196] = v32[12];
      *(_OWORD *)&v111[212] = v44;
      *(_OWORD *)&v111[228] = v32[14];
      v45 = v32[9];
      *(_OWORD *)&v111[132] = v32[8];
      *(_OWORD *)&v111[148] = v45;
      v46 = v32[11];
      *(_OWORD *)&v111[164] = v32[10];
      *(_OWORD *)&v111[180] = v46;
      v47 = v32[5];
      *(_OWORD *)&v111[68] = v32[4];
      *(_OWORD *)&v111[84] = v47;
      v48 = v32[7];
      *(_OWORD *)&v111[100] = v32[6];
      *(_OWORD *)&v111[116] = v48;
      v49 = v32[1];
      *(_OWORD *)&v111[4] = *v32;
      *(_OWORD *)&v111[20] = v49;
      v50 = v32[3];
      *(_OWORD *)&v111[36] = v32[2];
      *(_OWORD *)&v111[52] = v50;
      v112 = v31;
      v125 = *(_OWORD *)&v111[192];
      v126 = *(_OWORD *)&v111[208];
      v127 = *(_OWORD *)&v111[224];
      v128 = *(_DWORD *)&v111[240];
      v121 = *(_OWORD *)&v111[128];
      v122 = *(_OWORD *)&v111[144];
      v123 = *(_OWORD *)&v111[160];
      v124 = *(_OWORD *)&v111[176];
      v117 = *(_OWORD *)&v111[64];
      v118 = *(_OWORD *)&v111[80];
      v119 = *(_OWORD *)&v111[96];
      v120 = *(_OWORD *)&v111[112];
      v113 = *(_OWORD *)v111;
      v114 = *(_OWORD *)&v111[16];
      v115 = *(_OWORD *)&v111[32];
      v116 = *(_OWORD *)&v111[48];
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v112);
      outlined init with take of TableCellFormula((uint64_t)&v112, (uint64_t)&v144, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: AlertStorage)?);
      v51 = v144;
      v141 = v157;
      v142 = v158;
      v143 = v159;
      v137 = v153;
      v138 = v154;
      v139 = v155;
      v140 = v156;
      v133 = v149;
      v134 = v150;
      v135 = v151;
      v136 = v152;
      v129 = v145;
      v130 = v146;
      v131 = v147;
      v132 = v148;
      if (v107 == 0x8000000000000000)
        goto LABEL_83;
      if (v107 >= 0x41)
      {
        outlined retain of AlertStorage(v110);
        outlined release of AlertStorage(&v129);
        goto LABEL_40;
      }
      if (v107 == 64)
      {
        outlined retain of AlertStorage(v110);
      }
      else
      {
        outlined retain of AlertStorage(v110);
        if (((v7 >> v107) & 1) != 0)
        {
          v52 = v7;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v109 = v104;
          v55 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
          v56 = v104[2];
          v57 = (v54 & 1) == 0;
          v58 = v56 + v57;
          if (__OFADD__(v56, v57))
            goto LABEL_79;
          v59 = v54;
          if (v104[3] >= v58)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
            v7 = v52;
            if ((v59 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
            v60 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
            if ((v59 & 1) != (v61 & 1))
              goto LABEL_84;
            v55 = v60;
            v7 = v52;
            if ((v59 & 1) == 0)
            {
LABEL_67:
              v62 = v109;
              v109[(v55 >> 6) + 8] |= 1 << v55;
              *(_DWORD *)(v62[6] + 4 * v55) = v51;
              v63 = (_OWORD *)(v62[7] + 240 * v55);
              v65 = v130;
              v64 = v131;
              *v63 = v129;
              v63[1] = v65;
              v63[2] = v64;
              v66 = v135;
              v68 = v132;
              v67 = v133;
              v63[5] = v134;
              v63[6] = v66;
              v63[3] = v68;
              v63[4] = v67;
              v69 = v139;
              v71 = v136;
              v70 = v137;
              v63[9] = v138;
              v63[10] = v69;
              v63[7] = v71;
              v63[8] = v70;
              v72 = v140;
              v73 = v141;
              v74 = v143;
              v63[13] = v142;
              v63[14] = v74;
              v63[11] = v72;
              v63[12] = v73;
              v75 = v62[2];
              v76 = __OFADD__(v75, 1);
              v77 = v75 + 1;
              if (v76)
                goto LABEL_81;
              v104 = v62;
              v62[2] = v77;
              goto LABEL_73;
            }
          }
          v104 = v109;
          v78 = (_OWORD *)(v109[7] + 240 * v55);
          v80 = v78[1];
          v79 = v78[2];
          v108[0] = *v78;
          v108[1] = v80;
          v108[2] = v79;
          v81 = v78[6];
          v83 = v78[3];
          v82 = v78[4];
          v108[5] = v78[5];
          v108[6] = v81;
          v108[3] = v83;
          v108[4] = v82;
          v84 = v78[9];
          v85 = v78[10];
          v86 = v78[8];
          v108[7] = v78[7];
          v108[9] = v84;
          v108[10] = v85;
          v108[8] = v86;
          v87 = v78[14];
          v89 = v78[11];
          v88 = v78[12];
          v108[13] = v78[13];
          v108[14] = v87;
          v108[11] = v89;
          v108[12] = v88;
          outlined release of AlertStorage(v108);
          v91 = v130;
          v90 = v131;
          *v78 = v129;
          v78[1] = v91;
          v78[2] = v90;
          v92 = v135;
          v94 = v132;
          v93 = v133;
          v78[5] = v134;
          v78[6] = v92;
          v78[3] = v94;
          v78[4] = v93;
          v95 = v139;
          v97 = v136;
          v96 = v137;
          v78[9] = v138;
          v78[10] = v95;
          v78[7] = v97;
          v78[8] = v96;
          v98 = v143;
          v100 = v140;
          v99 = v141;
          v78[13] = v142;
          v78[14] = v98;
          v78[11] = v100;
          v78[12] = v99;
LABEL_73:
          swift_bridgeObjectRelease();
          v8 = v101;
          v1 = v102;
          goto LABEL_40;
        }
      }
      outlined release of AlertStorage(&v129);
LABEL_40:
      v24 = v106;
      v25 = v107 + 1;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_84:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UIKitDialogBridge.ActivePresentation(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  _BOOL4 v8;
  _BOOL4 v10;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 4);
  if (*((_BYTE *)a2 + 4))
    v5 = 0;
  else
    v5 = v2 == v3;
  v6 = v5;
  v8 = v4 == 1 && v2 == v3;
  v10 = v4 == 2 && v3 == 0;
  if (*((_BYTE *)a1 + 4) != 1)
    v8 = v10;
  if (*((_BYTE *)a1 + 4))
    return v8;
  else
    return v6;
}

void UIKitDialogBridge.updateExistingDialog(allDialogs:id:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  int v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  _BYTE *v12;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  _OWORD v17[11];

  v3 = v2;
  if (*(_QWORD *)(a1 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(a1 + 56) + 176 * v5, (uint64_t)v17);
  else
    memset(v17, 0, 169);
  outlined init with copy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v17, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v16)
  {
    v7 = v15[0];
    outlined destroy of ConfirmationDialog((uint64_t)v15);
    v8 = *(void **)(v3 + 48);
    if (v8)
      goto LABEL_7;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
  v7 = 0;
  v8 = *(void **)(v3 + 48);
  if (!v8)
    goto LABEL_12;
LABEL_7:
  outlined init with copy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v17, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (!v14)
  {
LABEL_13:
    v11 = v8;
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
    goto LABEL_14;
  }
  outlined init with take of ConfirmationDialog((uint64_t)v13, (uint64_t)v15);
  v9 = objc_msgSend(v8, sel_popoverPresentationController);
  if (v9)
  {
    v10 = v9;
    UIKitDialogBridge.updateAnchor(dialog:presentationController:)((uint64_t)v15, v9);

  }
  outlined destroy of ConfirmationDialog((uint64_t)v15);
LABEL_14:
  if (v7 == *(unsigned __int8 *)(v3 + 44) < 2u)
  {
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);

  }
  else
  {
    if ((v7 & 1) == 0)
    {
      objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, 0);
      UIKitDialogBridge.reset()();
    }
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v17, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    if (v16)
    {
      swift_retain();
      swift_retain();
      outlined destroy of ConfirmationDialog((uint64_t)v15);
      v13[0] = v7;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();

      v12 = v17;
    }
    else
    {
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);

      v12 = v15;
    }
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
  }
}

uint64_t UIKitDialogBridge.showNewDialog(_:id:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _BOOL8 v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73[6];

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v65 - v7;
  v9 = type metadata accessor for DialogActionContext(0);
  v65 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (uint64_t *)((char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v13, v14);
  v18 = (id *)((char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned __int8 *)(v2 + 44) < 2u)
    goto LABEL_42;
  MEMORY[0x1E0C80A78](v15, v16);
  v71 = a1;
  type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation)(0, &lazy cache variable for type metadata for (PlatformItemList, PlatformItemList));
  static Update.ensure<A>(_:)();
  v19 = v73[4];
  PlatformItemList.mergedContentItem.getter(v73[5], (uint64_t)v18);
  swift_bridgeObjectRelease();
  v20 = *v18;
  v21 = *v18;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v20)
  {
    v22 = objc_msgSend(v21, sel_string);

    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  v26 = *(_QWORD *)(v2 + 96);
  v73[0] = *(_QWORD *)(v2 + 88);
  v73[1] = v26;
  swift_retain();
  swift_retain();
  swift_retain();
  DialogActionContext.init(visiting:presentationType:environment:actionDelegate:)(v19, 1, v73, v2, v12);
  type metadata accessor for PlatformAlertController();
  v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
  v28 = v71;
  v29 = *(unsigned __int8 *)(v71 + 112) == 2;
  v30 = (char *)v27;
  objc_msgSend(v30, sel_setSeverity_, v29);
  v31 = *(unsigned __int8 *)(v28 + 96);
  if (v31 != 2)
  {
    if ((v31 & 1) != 0)
      v32 = 2;
    else
      v32 = 1;
    objc_msgSend(v30, sel_setOverrideUserInterfaceStyle_, v32);
  }
  v33 = *(_QWORD *)(v28 + 104);
  v72 = v30;
  if (v33)
  {
    v34 = v30;
    swift_retain();
    v35 = (void *)UIKitDialogBridge.resolveIcon(_:)();
    objc_msgSend(v34, sel_setImage_, v35);
    swift_release();

    v30 = v72;
  }
  v36 = swift_allocObject();
  swift_weakInit();
  v37 = (uint64_t (**)())&v30[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  v38 = *(_QWORD *)&v30[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  *v37 = partial apply for closure #2 in UIKitDialogBridge.showNewDialog(_:id:);
  v37[1] = (uint64_t (*)())v36;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v38);
  if (*(_BYTE *)(v28 + 56) == 1)
  {
    v39 = *(_QWORD *)(v28 + 40);
    v40 = *(_QWORD *)(v28 + 48);
    v41 = v30;
    v42 = (void *)MEMORY[0x18D75CC88](v39, v40);
    objc_msgSend(v41, sel_setTitle_, v42);

    v30 = v72;
  }
  v43 = v30;
  if (v25)
  {
    v44 = (void *)MEMORY[0x18D75CC88](v23, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = 0;
  }
  v70 = v2;
  objc_msgSend(v30, sel_setMessage_, v44);

  v45 = v12[1];
  v68 = a2;
  v67 = v8;
  v69 = v12;
  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    v46 = _CocoaArrayWrapper.endIndex.getter();
    if (v46)
      goto LABEL_19;
  }
  else
  {
    v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v46)
    {
LABEL_19:
      if (v46 >= 1)
      {
        v47 = 0;
        v48 = *(_BYTE *)(v71 + 76);
        while (1)
        {
          if ((v45 & 0xC000000000000001) != 0)
          {
            v49 = (id)MEMORY[0x18D75E3BC](v47, v45);
            if ((v48 & 1) == 0)
              goto LABEL_27;
          }
          else
          {
            v49 = *(id *)(v45 + 8 * v47 + 32);
            if ((v48 & 1) == 0)
            {
LABEL_27:
              if (objc_msgSend(v49, sel_style) != (id)2)
              {
                v50 = (void *)Color.Resolved.kitColor.getter();
                objc_opt_self();
                v51 = (void *)swift_dynamicCastObjCClass();
                if (!v51)

                objc_msgSend(v49, sel__setImageTintColor_, v51);
                objc_msgSend(v49, sel__setTitleTextColor_, v51);

                v30 = v72;
              }
            }
          }
          ++v47;
          objc_msgSend(v30, sel_addAction_, v49);

          if (v46 == v47)
            goto LABEL_31;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
  }
LABEL_31:
  swift_bridgeObjectRelease();
  v52 = objc_msgSend(v30, sel_popoverPresentationController);
  v53 = v70;
  if (v52)
  {
    v54 = v52;
    UIKitDialogBridge.updateAnchor(dialog:presentationController:)(v71, v52);

  }
  v55 = (void *)MEMORY[0x18D760234](v53 + 16);
  v56 = (uint64_t)v69;
  if (!v55)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v57 = v55;
  v58 = objc_msgSend(v55, sel_presentedViewController);
  if (v58)
  {
    v59 = v58;
    if ((objc_msgSend(v58, sel_isBeingDismissed) & 1) == 0)
    {
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
        objc_msgSend(v57, sel_dismissViewControllerAnimated_completion_, 1, 0);
    }

  }
  objc_msgSend(v57, sel_presentViewController_animated_completion_, v30, 1, 0);

  v60 = *(void **)(v53 + 48);
  *(_QWORD *)(v53 + 48) = v30;

  v61 = v56;
  v62 = (uint64_t)v67;
  outlined init with take of TableCellFormula(v61, (uint64_t)v67, type metadata accessor for DialogActionContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v66);
  v63 = v53 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  swift_beginAccess();
  outlined assign with take of DialogActionContext?(v62, v63);
  result = swift_endAccess();
  *(_DWORD *)(v53 + 40) = v68;
  *(_BYTE *)(v53 + 44) = 1;
  return result;
}

void UIKitDialogBridge.updateExistingAlert(allAlerts:id:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  void *v20;
  id v21;
  void *v22;
  _OWORD v23[15];
  __int128 __dst;
  _BYTE v25[240];

  v3 = v2;
  if (*(_QWORD *)(a1 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    v7 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 240 * v5);
    v9 = v7[1];
    v8 = v7[2];
    v23[0] = *v7;
    v23[1] = v9;
    v23[2] = v8;
    v10 = v7[6];
    v12 = v7[3];
    v11 = v7[4];
    v23[5] = v7[5];
    v23[6] = v10;
    v23[3] = v12;
    v23[4] = v11;
    v13 = v7[10];
    v15 = v7[7];
    v14 = v7[8];
    v23[9] = v7[9];
    v23[10] = v13;
    v23[7] = v15;
    v23[8] = v14;
    v16 = v7[14];
    v18 = v7[11];
    v17 = v7[12];
    v23[13] = v7[13];
    v23[14] = v16;
    v23[11] = v18;
    v23[12] = v17;
    memmove(&__dst, v7, 0xF0uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&__dst);
    v19 = LOBYTE(v23[0]);
    outlined retain of AlertStorage(v23);
    outlined init with take of AlertStorage?((uint64_t)&__dst, (uint64_t)v25, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  }
  else
  {
    _s7SwiftUI12AlertStorageVSgWOi0_(&__dst);
    outlined init with take of AlertStorage?((uint64_t)&__dst, (uint64_t)v25, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    v19 = 0;
  }
  v20 = *(void **)(v3 + 48);
  if (v20)
  {
    if (v19 == *(unsigned __int8 *)(v3 + 44) < 2u)
    {
      outlined release of AlertStorage?((uint64_t)v25);
    }
    else
    {
      v21 = v20;
      v22 = v21;
      if ((v19 & 1) == 0)
      {
        objc_msgSend(v21, sel_dismissViewControllerAnimated_completion_, 1, 0);
        UIKitDialogBridge.reset()();
      }
      outlined init with take of AlertStorage?((uint64_t)v25, (uint64_t)&__dst, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      if (_s7SwiftUI12AlertStorageVSgWOg((uint64_t)&__dst) == 1)
      {

      }
      else
      {
        LOBYTE(v23[0]) = v19;
        swift_retain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();

        outlined release of AlertStorage?((uint64_t)v25);
        swift_release();
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t UIKitDialogBridge.showNewAlert(_:id:)(__int128 *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _BOOL8 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t (**v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  char **v54;
  char **v55;
  id v56;
  void *v57;
  char **v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Class v77;
  id v78;
  char *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  char *v85;
  id v86;
  void *v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  _DWORD v98[2];
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD v107[7];
  _OWORD v108[5];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[6];
  _QWORD v120[11];
  _BYTE v121[20];
  char v122[8];
  uint64_t v123;
  int v124;
  char v125;
  __int128 aBlock;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v3 = v2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1E0C80A78](v6, v7);
  v100 = (uint64_t)v98 - v8;
  v104 = type metadata accessor for DialogActionContext(0);
  v99 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104, v9);
  v11 = (_QWORD *)((char *)v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v12, v13);
  v17 = (id *)((char *)v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a1[13];
  v119[3] = a1[12];
  v119[4] = v18;
  v119[5] = a1[14];
  v19 = a1[9];
  v118 = a1[8];
  v119[0] = v19;
  v20 = a1[11];
  v119[1] = a1[10];
  v119[2] = v20;
  v21 = a1[5];
  v114 = a1[4];
  v115 = v21;
  v22 = a1[7];
  v116 = a1[6];
  v117 = v22;
  v23 = a1[1];
  v110 = *a1;
  v111 = v23;
  v24 = a1[3];
  v112 = a1[2];
  v113 = v24;
  if (*(unsigned __int8 *)(v3 + 44) < 2u)
    goto LABEL_50;
  MEMORY[0x1E0C80A78](v14, v15);
  v98[1] = v25;
  type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation)(0, &lazy cache variable for type metadata for (PlatformItemList, PlatformItemList));
  static Update.ensure<A>(_:)();
  v26 = aBlock;
  PlatformItemList.mergedContentItem.getter(*((uint64_t *)&aBlock + 1), (uint64_t)v17);
  swift_bridgeObjectRelease();
  v27 = (uint64_t)*v17;
  v28 = *v17;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v27)
  {
    v29 = objc_msgSend(v28, sel_string);

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

  }
  else
  {
    v31 = 0;
  }
  v101 = a2;
  v32 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)&aBlock = *(_QWORD *)(v3 + 88);
  *((_QWORD *)&aBlock + 1) = v32;
  swift_retain();
  swift_retain();
  swift_retain();
  DialogActionContext.init(visiting:presentationType:environment:actionDelegate:)(v26, 0, (uint64_t *)&aBlock, v3, v11);
  type metadata accessor for PlatformAlertController();
  v33 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 1);
  v34 = BYTE9(v115) == 2;
  v35 = (char *)v33;
  objc_msgSend(v35, sel_setSeverity_, v34);
  if (BYTE9(v113) != 2)
  {
    if ((BYTE9(v113) & 1) != 0)
      v36 = 2;
    else
      v36 = 1;
    objc_msgSend(v35, sel_setOverrideUserInterfaceStyle_, v36);
  }
  v37 = MEMORY[0x1E0CE7298];
  outlined init with take of AlertStorage?((uint64_t)&v114, (uint64_t)v122, (uint64_t)&lazy cache variable for type metadata for Image?, MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  outlined init with take of AlertStorage?((uint64_t)v122, (uint64_t)&v123, (uint64_t)&lazy cache variable for type metadata for Image?, v37, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v123)
  {
    v38 = v35;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v122);
    v39 = (void *)UIKitDialogBridge.resolveIcon(_:)();
    objc_msgSend(v38, sel_setImage_, v39);

    outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v122);
  }
  v40 = swift_allocObject();
  swift_weakInit();
  v41 = (uint64_t (**)())&v35[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  v42 = *(_QWORD *)&v35[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  *v41 = partial apply for closure #2 in UIKitDialogBridge.showNewAlert(_:id:);
  v41[1] = (uint64_t (*)())v40;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v42);
  v43 = *((_QWORD *)&v112 + 1);
  v44 = v113;
  v45 = v35;
  v46 = (void *)MEMORY[0x18D75CC88](v43, v44);
  objc_msgSend(v45, sel_setTitle_, v46);

  v47 = v45;
  if (v31)
  {
    v48 = (void *)MEMORY[0x18D75CC88](v27, v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = 0;
  }
  objc_msgSend(v45, sel_setMessage_, v48);

  v106 = v11[1];
  v102 = v3;
  v103 = v11;
  if (v106 >> 62)
  {
    swift_bridgeObjectRetain();
    v49 = _CocoaArrayWrapper.endIndex.getter();
    if (!v49)
      goto LABEL_29;
  }
  else
  {
    v49 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v49)
      goto LABEL_29;
  }
  outlined init with take of AlertStorage?((uint64_t)&v114 + 8, (uint64_t)v121, (uint64_t)&lazy cache variable for type metadata for Color.Resolved?, MEMORY[0x1E0CE7110], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v49 < 1)
  {
    __break(1u);
    goto LABEL_48;
  }
  v50 = 0;
  v51 = v106 & 0xC000000000000001;
  v52 = &lazy cache variable for type metadata for Color.Resolved?;
  v53 = MEMORY[0x1E0CE7110];
  v54 = &selRef__defaultInteractionBehavior;
  v55 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
  v105 = v106 & 0xC000000000000001;
  do
  {
    if (v51)
      v56 = (id)MEMORY[0x18D75E3BC](v50, v106);
    else
      v56 = *(id *)(v106 + 8 * v50 + 32);
    v57 = v56;
    outlined init with take of AlertStorage?((uint64_t)v121, (uint64_t)&v124, (uint64_t)v52, v53, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    if ((v125 & 1) == 0 && objc_msgSend(v57, v55[347]) != (id)2)
    {
      v58 = v54;
      v59 = v49;
      v60 = v45;
      v61 = v53;
      v62 = v52;
      v63 = (void *)Color.Resolved.kitColor.getter();
      objc_opt_self();
      v64 = (void *)swift_dynamicCastObjCClass();
      if (!v64)

      objc_msgSend(v57, sel__setImageTintColor_, v64);
      objc_msgSend(v57, sel__setTitleTextColor_, v64);

      v52 = v62;
      v53 = v61;
      v45 = v60;
      v49 = v59;
      v54 = v58;
      v51 = v105;
      v55 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
    }
    ++v50;
    objc_msgSend(v45, v54[501], v57);

  }
  while (v49 != v50);
LABEL_29:
  swift_bridgeObjectRelease();
  v65 = *(_QWORD *)((char *)v103 + *(int *)(v104 + 32));
  if (v65 >> 62)
  {
    swift_bridgeObjectRetain();
    v66 = _CocoaArrayWrapper.endIndex.getter();
    if (!v66)
      goto LABEL_38;
  }
  else
  {
    v66 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v66)
      goto LABEL_38;
  }
  if (v66 < 1)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v67 = 0;
  do
  {
    if ((v65 & 0xC000000000000001) != 0)
      v68 = (id)MEMORY[0x18D75E3BC](v67, v65);
    else
      v68 = *(id *)(v65 + 8 * v67 + 32);
    v69 = v68;
    ++v67;
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = v69;
    *(_QWORD *)&v128 = partial apply for closure #3 in UIKitDialogBridge.showNewAlert(_:id:);
    *((_QWORD *)&v128 + 1) = v70;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v127 = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
    *((_QWORD *)&v127 + 1) = &block_descriptor_77;
    v71 = _Block_copy(&aBlock);
    v72 = v45;
    v73 = v69;
    swift_release();
    objc_msgSend(v72, sel_addTextFieldWithConfigurationHandler_, v71);
    _Block_release(v71);

  }
  while (v66 != v67);
LABEL_38:
  swift_bridgeObjectRelease();
  outlined init with take of AlertStorage?((uint64_t)v119 + 8, (uint64_t)v120, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  outlined init with take of AlertStorage?((uint64_t)v120, (uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if ((_QWORD)aBlock)
  {
    v108[2] = v128;
    v108[3] = v129;
    v108[4] = v130;
    v109 = v131;
    v108[0] = aBlock;
    v108[1] = v127;
    type metadata accessor for UIHostingController<BoundInputsView>(0, v74, v75, v76);
    v78 = objc_allocWithZone(v77);
    v79 = v45;
    outlined retain of BoundInputsView?(v120, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
    v80 = specialized UIHostingController.init(rootView:)((uint64_t)v108);
    objc_msgSend(v79, sel_setContentViewController_, v80);

    outlined retain of BoundInputsView?(v120, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of BoundInputsView?);
  }
  v81 = (uint64_t)v103;
  objc_msgSend(v45, sel_setPreferredAction_, *(_QWORD *)((char *)v103 + *(int *)(v104 + 36)));
  v82 = v102;
  v83 = (void *)MEMORY[0x18D760234](v102 + 16);
  if (!v83)
    goto LABEL_49;
  v84 = v83;
  v85 = v45;
  v86 = objc_msgSend(v83, sel_presentedViewController);
  if (v86)
  {
    v87 = v86;
    if ((objc_msgSend(v86, sel_isBeingDismissed) & 1) == 0)
    {
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
        objc_msgSend(v84, sel_dismissViewControllerAnimated_completion_, 1, 0);
    }

  }
  v88 = AGCreateWeakAttribute();
  v89 = v88;
  v90 = HIDWORD(v88);
  v91 = swift_allocObject();
  swift_weakInit();
  v92 = swift_allocObject();
  *(_QWORD *)(v92 + 16) = v91;
  *(_DWORD *)(v92 + 24) = v89;
  *(_DWORD *)(v92 + 28) = v90;
  v107[4] = partial apply for closure #4 in UIKitDialogBridge.showNewAlert(_:id:);
  v107[5] = v92;
  v107[0] = MEMORY[0x1E0C809B0];
  v107[1] = 1107296256;
  v107[2] = thunk for @escaping @callee_guaranteed () -> ();
  v107[3] = &block_descriptor_15_3;
  v93 = _Block_copy(v107);
  swift_release();
  objc_msgSend(v84, sel_presentViewController_animated_completion_, v85, 1, v93);

  _Block_release(v93);
  v94 = *(void **)(v82 + 48);
  *(_QWORD *)(v82 + 48) = v85;

  v95 = v100;
  outlined init with take of TableCellFormula(v81, v100, type metadata accessor for DialogActionContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56))(v95, 0, 1, v104);
  v96 = v82 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  swift_beginAccess();
  outlined assign with take of DialogActionContext?(v95, v96);
  result = swift_endAccess();
  *(_DWORD *)(v82 + 40) = v101;
  *(_BYTE *)(v82 + 44) = 0;
  return result;
}

void UIKitDialogBridge.updateAnchor(dialog:presentationController:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v4 = MEMORY[0x18D760234](a1 + 88);
  if (v4)
  {
    v9 = (id)v4;
    objc_msgSend(a2, sel_setBarButtonItem_);

  }
  else
  {
    v5 = MEMORY[0x18D760234](v2 + 24);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = *(_QWORD *)(v2 + 32);
      ObjectType = swift_getObjectType();
      objc_msgSend(a2, sel_setSourceView_, v6);
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
      ViewGraph.transform.getter();
      swift_release();
      type metadata accessor for CGRect(0);
      Anchor.convert(to:)();
      objc_msgSend(a2, sel_setSourceRect_, v10, v11, v12, v13);

      swift_release();
    }
  }
}

uint64_t UIKitDialogBridge.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  Swift::UInt32 v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[240];
  _BYTE v31[240];
  _OWORD v32[15];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  v1 = v0;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v30[-v4];
  v6 = v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector + 4) & 1) == 0)
  {
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = *(_DWORD *)(v0 + 40);
  if (!*(_BYTE *)(v0 + 44))
  {
    swift_beginAccess();
    v11 = *(_QWORD *)(v0 + 80);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v13 & 1) != 0))
      {
        v14 = (_OWORD *)(*(_QWORD *)(v11 + 56) + 240 * v12);
        v16 = v14[1];
        v15 = v14[2];
        v32[0] = *v14;
        v32[1] = v16;
        v32[2] = v15;
        v17 = v14[3];
        v18 = v14[4];
        v19 = v14[6];
        v32[5] = v14[5];
        v32[6] = v19;
        v32[3] = v17;
        v32[4] = v18;
        v20 = v14[7];
        v21 = v14[8];
        v22 = v14[10];
        v32[9] = v14[9];
        v32[10] = v22;
        v32[7] = v20;
        v32[8] = v21;
        v23 = v14[11];
        v24 = v14[12];
        v25 = v14[14];
        v32[13] = v14[13];
        v32[14] = v25;
        v32[11] = v23;
        v32[12] = v24;
        memmove(&v33, v14, 0xF0uLL);
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v33);
        outlined retain of AlertStorage(v32);
      }
      else
      {
        _s7SwiftUI12AlertStorageVSgWOi0_(v32);
        outlined init with take of AlertStorage?((uint64_t)v32, (uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      }
      outlined init with take of AlertStorage?((uint64_t)&v33, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      outlined init with take of AlertStorage?((uint64_t)v31, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      if (_s7SwiftUI12AlertStorageVSgWOg((uint64_t)v32) != 1)
      {
        outlined init with take of AlertStorage?((uint64_t)&v33, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
        swift_endAccess();
        swift_retain();
        swift_retain();
        outlined release of AlertStorage?((uint64_t)v30);
        v42[104] = 0;
        goto LABEL_21;
      }
    }
    goto LABEL_19;
  }
  if (*(_BYTE *)(v0 + 44) == 1)
  {
    swift_beginAccess();
    v8 = *(_QWORD *)(v0 + 64);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v10 & 1) != 0))
      {
        outlined init with copy of ConfirmationDialog(*(_QWORD *)(v8 + 56) + 176 * v9, (uint64_t)&v33);
        if ((_QWORD)v34)
        {
          swift_retain();
          swift_retain();
          outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
          swift_endAccess();
          LOBYTE(v32[0]) = 0;
LABEL_21:
          dispatch thunk of AnyLocation.set(_:transaction:)();
          swift_release();
          swift_release();
          goto LABEL_22;
        }
      }
      else
      {
        v41 = 0u;
        memset(v42, 0, 25);
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
      }
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
    }
LABEL_19:
    swift_endAccess();
  }
LABEL_22:
  *(_DWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 44) = 2;
  v26 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;

  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = 0;
  swift_bridgeObjectRelease();
  v27 = type metadata accessor for DialogActionContext(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v5, 1, 1, v27);
  v28 = v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  swift_beginAccess();
  outlined assign with take of DialogActionContext?((uint64_t)v5, v28);
  swift_endAccess();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in UIKitDialogBridge.showNewDialog(_:id:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  AGGraphClearUpdate();
  v2 = *(_QWORD *)AGGraphGetValue();
  v3 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = AGGraphSetUpdate();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t UIKitDialogBridge.resolveIcon(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v14;
  id v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  __int16 v27;
  id v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  __int16 v39;
  uint64_t v40;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))MEMORY[0x1E0CE6B88]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v16 - v3;
  v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v28 = v10;
  v29 = v9;
  v11 = type metadata accessor for Text.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  Image.resolve(in:)();
  if (v40)
  {
    swift_unknownObjectRetain();
    outlined release of Image.Resolved((uint64_t)&v28);
    objc_opt_self();
    v12 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    v13 = v28;
    v14 = v29;
    v16 = v28;
    v17 = v29;
    v18 = v30;
    v19 = v31;
    v20 = v32;
    v21 = v33;
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v26 = v38;
    v27 = v39;
    outlined copy of GraphicsImage.Contents?(v28, v29);
    v12 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, 0);
    outlined release of Image.Resolved((uint64_t)&v28);
    outlined consume of GraphicsImage.Contents?(v13, v14);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE5448]);
  return v12;
}

void UIKitDialogBridge.updateAlertActionsEnabled(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  void *v47;
  void *v48;
  char v49;
  id v50;
  id v51;
  _BYTE *v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  BOOL v59;
  unsigned int v60;
  int v61;
  _BYTE v62[4];
  int v63;
  id v64;
  unint64_t v65;
  char *v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  void **v78;
  _BYTE *v79;

  v3 = type metadata accessor for PlatformItemList.Item();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v62[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v75 = &v62[-v10];
  MEMORY[0x1E0C80A78](v11, v12);
  v76 = &v62[-v13];
  MEMORY[0x1E0C80A78](v14, v15);
  v78 = (void **)&v62[-v16];
  MEMORY[0x1E0C80A78](v17, v18);
  v77 = &v62[-v19];
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v62[-v22];
  v24 = type metadata accessor for DialogActionContext(0);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v79 = &v62[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(_BYTE *)(v1 + 44))
  {
    v28 = *(void **)(v1 + 48);
    if (v28)
    {
      v29 = v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
      swift_beginAccess();
      outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v29, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for DialogActionContext?, (uint64_t)type metadata accessor for DialogActionContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TableSections.Item)?);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
      {
        outlined destroy of IntelligenceElement?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
        return;
      }
      v74 = v7;
      outlined init with take of TableCellFormula((uint64_t)v23, (uint64_t)v79, type metadata accessor for DialogActionContext);
      v30 = v28;
      v31 = objc_msgSend(v30, sel_actions);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
      v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v32 >> 62)
      {
LABEL_42:
        swift_bridgeObjectRetain();
        v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v34 = v76;
        v35 = v77;
        if (v33)
          goto LABEL_8;
      }
      else
      {
        v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        v34 = v76;
        v35 = v77;
        if (v33)
        {
LABEL_8:
          v64 = v30;
          v65 = v1;
          v73 = v4;
          if (v33 < 1)
          {
            __break(1u);
            return;
          }
          v68 = 0;
          v36 = 0;
          v37 = *(int *)(v24 + 28);
          v38 = v32 & 0xC000000000000001;
          v66 = v75 + 521;
          v67 = v34 + 521;
          v71 = v32;
          v72 = a1;
          v70 = v33;
          while (1)
          {
            v39 = v38 ? (id)MEMORY[0x18D75E3BC](v36, v32) : *(id *)(v32 + 8 * v36 + 32);
            v30 = v39;
            v40 = *(_QWORD *)&v79[v37];
            if (*(_QWORD *)(v40 + 16))
            {
              v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v39);
              if ((v42 & 1) != 0)
              {
                v1 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v41);
                if ((v1 & 0x8000000000000000) == 0 && v1 < *(_QWORD *)(a1 + 16))
                  break;
              }
            }

LABEL_11:
            if (v33 == ++v36)
            {
              swift_bridgeObjectRelease();

              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v79, type metadata accessor for DialogActionContext);
              if ((v68 & 1) != 0)
              {
                *(_QWORD *)(v65 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList) = a1;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
              }
              return;
            }
          }
          v43 = v38;
          v4 = v37;
          v24 = (uint64_t)v35;
          v44 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
          v45 = a1 + v44;
          a1 = *(_QWORD *)(v73 + 72) * v1;
          v32 = (unint64_t)type metadata accessor for PlatformItemList.Item;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45 + a1, v24, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          if (v1 >= *(_QWORD *)(*(_QWORD *)v79 + 16))
          {
            __break(1u);
            goto LABEL_42;
          }
          v46 = v78;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)v79 + v44 + a1, (uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v47 = *v46;
          v48 = *(void **)v24;
          v49 = *(_QWORD *)v24 == 0;
          v37 = v4;
          if (*v46)
          {
            if (!v48)
            {
              v52 = v76;
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v78, (uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              v53 = v75;
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v77, (uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              v38 = v43;
              v33 = v70;
              goto LABEL_28;
            }
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
            v50 = v48;
            v51 = v47;
            v49 = static NSObject.== infix(_:_:)();

          }
          v38 = v43;
          v52 = v76;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v78, (uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v53 = v75;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v77, (uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v33 = v70;
          if ((v49 & 1) != 0)
          {
            v63 = v52[520];
            v69 = *v67;
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            v54 = v53[520];
            v55 = (uint64_t)v53;
            v56 = *v66;
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            v32 = v71;
            if ((v69 & 1) != 0)
            {
              if ((v56 & 1) != 0)
              {
                v57 = (uint64_t)v74;
                outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v77, (uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
LABEL_35:
                v60 = objc_msgSend(v30, sel_isEnabled);
                v61 = *(unsigned __int8 *)(v57 + 56);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
                a1 = v72;
                if (v60 == v61)
                {

                }
                else
                {
                  objc_msgSend(v30, sel_setEnabled_, objc_msgSend(v30, sel_isEnabled) ^ 1);

                  v68 = 1;
                }
                v35 = v77;
                goto LABEL_31;
              }
            }
            else if ((v56 & 1) == 0)
            {
              v58 = v77;
              v57 = (uint64_t)v74;
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v77, (uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              v59 = v63 == v54;
              v35 = v58;
              if (v59)
                goto LABEL_35;
LABEL_30:

              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v57, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              a1 = v72;
LABEL_31:
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              goto LABEL_11;
            }
LABEL_29:
            v35 = v77;
            v57 = (uint64_t)v74;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v77, (uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            goto LABEL_30;
          }
LABEL_28:
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
          v32 = v71;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();

      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v79, type metadata accessor for DialogActionContext);
    }
  }
}

uint64_t UIKitDialogBridge.startTrackingUpdates(actions:)()
{
  uint64_t v0;
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[8];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  static Semantics.v5.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    result = AGWeakAttributeGetAttribute();
    if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    {
      v2 = result;
      v3 = MEMORY[0x18D75B908]();
      v5 = v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
      if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector + 4) & 1) != 0)
      {
        v6 = (id)AGGraphGetAttributeSubgraph();
        AGGraphClearUpdate();
        v7 = (id)AGSubgraphGetCurrent();
        AGSubgraphSetCurrent();
        swift_weakInit();
        v12 = v2;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        lazy protocol witness table accessor for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions();
        v8 = Attribute.init<A>(body:value:flags:update:)();
        outlined destroy of weak AnyGestureResponder?((uint64_t)v11);
        *(_DWORD *)v5 = v8;
        *(_BYTE *)(v5 + 4) = 0;
        static AGAttributeFlags.transactional.getter();
        AGGraphGetFlags();
        AGGraphSetFlags();
        AGSubgraphSetCurrent();

        AGGraphSetUpdate();
      }
      else
      {
        MEMORY[0x1E0C80A78](v3, v4);
        MEMORY[0x1E0C80A78](v9, v10);
        AGGraphMutateAttribute();
        static AGAttributeFlags.transactional.getter();
        AGGraphGetFlags();
        AGGraphSetFlags();
      }
      return static Update.end()();
    }
  }
  return result;
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance UIKitDialogBridge.UpdateAlertActions()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    AGGraphGetValue();
    v1 = swift_bridgeObjectRetain();
    UIKitDialogBridge.updateAlertActionsEnabled(_:)(v1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance UIKitDialogBridge.UpdateAlertActions()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
    *(_DWORD *)v1 = 0;
    *(_BYTE *)(v1 + 4) = 1;
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance UIKitDialogBridge.UpdateAlertActions()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
    *(_DWORD *)v1 = 0;
    *(_BYTE *)(v1 + 4) = 1;
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in UIKitDialogBridge.showNewAlert(_:id:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  AGGraphClearUpdate();
  v2 = *(_QWORD *)AGGraphGetValue();
  v3 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = AGGraphSetUpdate();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t closure #2 in UIKitDialogBridge.showNewDialog(_:id:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    static Semantics.v4.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    {
      v2 = swift_allocObject();
      *(_QWORD *)(v2 + 16) = v1;
      *(_BYTE *)(v2 + 24) = 0;
      swift_retain();
      onNextMainRunLoop(do:)();
      swift_release();
    }
    else
    {
      dismissActually #1 () in UIKitDialogBridge.dismiss(triggerCancellation:)(v1, 0);
    }
    return swift_release();
  }
  return result;
}

void closure #3 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  _BYTE v0[8];
  _BYTE v1[16];

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula((uint64_t)v0, (uint64_t)v1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
  v1[8] = 0;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)v1);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)v1);
  PlatformTextFieldCoordinator.update()();
}

uint64_t closure #4 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    UIKitDialogBridge.startTrackingUpdates(actions:)();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall UIKitDialogBridge.performDialogAction(_:)(UIAlertAction a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext);
  swift_beginAccess();
  v10 = type metadata accessor for DialogActionContext(0);
  v11 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (v11(v9, 1, v10)
    || (v12 = *(uint64_t *)((char *)v9 + *(int *)(v10 + 28)), !*(_QWORD *)(v12 + 16))
    || (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1.super.isa), (v14 & 1) == 0))
  {
    swift_endAccess();
    return;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_endAccess();
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList))
  {
    v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList);
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v11(v9, 1, v10))
    return;
  v16 = *v9;
  swift_bridgeObjectRetain();
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_8:
  if (v15 >= *(_QWORD *)(v16 + 16))
  {
LABEL_15:
    __break(1u);
    return;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v8 + 50);
  v17 = (void (*)(uint64_t))*((_QWORD *)v8 + 51);
  v19 = *((_QWORD *)v8 + 52);
  v20 = *((_QWORD *)v8 + 53);
  v21 = *((_QWORD *)v8 + 54);
  v22 = *((_QWORD *)v8 + 55);
  v23 = *((_QWORD *)v8 + 56);
  v24 = *((_QWORD *)v8 + 57);
  v25 = v8[464];
  LOBYTE(v27) = v25;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v18, (uint64_t)v17, v19, v20, v21, v22, v23, v24, v27, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v17 != (void (*)(uint64_t))1)
  {
    outlined copy of AppIntentExecutor?((uint64_t)v17);
    LOBYTE(v28) = v25;
    v26 = outlined consume of PlatformItemList.Item.SelectionBehavior?(v18, (uint64_t)v17, v19, v20, v21, v22, v23, v24, v28, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if (v17)
    {
      v17(v26);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v17);
    }
  }
}

uint64_t dismissActually #1 () in UIKitDialogBridge.dismiss(triggerCancellation:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::UInt32 v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _BYTE v56[240];
  _BYTE v57[240];
  _OWORD v58[15];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];

  v4 = type metadata accessor for DialogActionContext.CancelType(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v54 - v11;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v54 - v15;
  v17 = *(_DWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 44))
  {
    if (*(_BYTE *)(a1 + 44) == 1)
    {
      swift_beginAccess();
      v18 = *(_QWORD *)(a1 + 64);
      if (v18)
      {
        if (*(_QWORD *)(v18 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v20 & 1) != 0))
        {
          outlined init with copy of ConfirmationDialog(*(_QWORD *)(v18 + 56) + 176 * v19, (uint64_t)&v59);
          if ((_QWORD)v60)
          {
            swift_retain();
            swift_retain();
            outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v59, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
            swift_endAccess();
            LOBYTE(v58[0]) = 0;
            dispatch thunk of AnyLocation.set(_:transaction:)();
            swift_release();
            swift_release();
            if ((a2 & 1) == 0)
              return UIKitDialogBridge.reset()();
            goto LABEL_22;
          }
        }
        else
        {
          v67 = 0u;
          memset(v68, 0, 25);
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
        }
        outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v59, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
      }
      swift_endAccess();
      if ((a2 & 1) == 0)
        return UIKitDialogBridge.reset()();
LABEL_22:
      v37 = a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
      swift_beginAccess();
      v38 = type metadata accessor for DialogActionContext(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38))
      {
        v39 = v37 + *(int *)(v38 + 24);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v39, 1, v4))
        {
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v39, (uint64_t)v12, type metadata accessor for DialogActionContext.CancelType);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8, type metadata accessor for DialogActionContext.CancelType);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            v40 = type metadata accessor for PlatformItemList.Item();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v16, 0, 1, v40);
          }
          else
          {
            outlined init with take of PlatformItemList.Item?((uint64_t)v8, (uint64_t)v16);
          }
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for DialogActionContext.CancelType);
          v41 = type metadata accessor for PlatformItemList.Item();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v16, 1, v41) == 1)
          {
            outlined destroy of IntelligenceElement?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
          }
          else
          {
            v42 = *((_QWORD *)v16 + 50);
            v43 = (void (*)(uint64_t))*((_QWORD *)v16 + 51);
            v44 = *((_QWORD *)v16 + 52);
            v45 = *((_QWORD *)v16 + 53);
            v46 = *((_QWORD *)v16 + 54);
            v47 = *((_QWORD *)v16 + 55);
            v48 = *((_QWORD *)v16 + 56);
            v49 = v16[464];
            LOBYTE(v52) = v49;
            v54 = *((_QWORD *)v16 + 57);
            v55 = (char *)v42;
            outlined consume of PlatformItemList.Item.SelectionBehavior?(v42, (uint64_t)v43, v44, v45, v46, v47, v48, v54, v52, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            if (v43 != (void (*)(uint64_t))1)
            {
              outlined copy of AppIntentExecutor?((uint64_t)v43);
              LOBYTE(v53) = v49;
              v50 = outlined consume of PlatformItemList.Item.SelectionBehavior?((uint64_t)v55, (uint64_t)v43, v44, v45, v46, v47, v48, v54, v53, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
              if (v43)
              {
                v43(v50);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v43);
              }
            }
          }
        }
      }
      return UIKitDialogBridge.reset()();
    }
LABEL_21:
    if ((a2 & 1) == 0)
      return UIKitDialogBridge.reset()();
    goto LABEL_22;
  }
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 80);
  if (!v21)
  {
    swift_endAccess();
    goto LABEL_21;
  }
  v22 = *(_QWORD *)(v21 + 16);
  v55 = v12;
  if (v22 && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v24 & 1) != 0))
  {
    v25 = (_OWORD *)(*(_QWORD *)(v21 + 56) + 240 * v23);
    v27 = v25[1];
    v26 = v25[2];
    v58[0] = *v25;
    v58[1] = v27;
    v58[2] = v26;
    v28 = v25[3];
    v29 = v25[4];
    v30 = v25[6];
    v58[5] = v25[5];
    v58[6] = v30;
    v58[3] = v28;
    v58[4] = v29;
    v31 = v25[7];
    v32 = v25[8];
    v33 = v25[10];
    v58[9] = v25[9];
    v58[10] = v33;
    v58[7] = v31;
    v58[8] = v32;
    v34 = v25[11];
    v35 = v25[12];
    v36 = v25[14];
    v58[13] = v25[13];
    v58[14] = v36;
    v58[11] = v34;
    v58[12] = v35;
    memmove(&v59, v25, 0xF0uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v59);
    outlined retain of AlertStorage(v58);
  }
  else
  {
    _s7SwiftUI12AlertStorageVSgWOi0_(v58);
    outlined init with take of AlertStorage?((uint64_t)v58, (uint64_t)&v59, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  }
  outlined init with take of AlertStorage?((uint64_t)&v59, (uint64_t)v57, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  outlined init with take of AlertStorage?((uint64_t)v57, (uint64_t)v58, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (_s7SwiftUI12AlertStorageVSgWOg((uint64_t)v58) == 1)
  {
    swift_endAccess();
  }
  else
  {
    outlined init with take of AlertStorage?((uint64_t)&v59, (uint64_t)v56, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    swift_endAccess();
    swift_retain();
    swift_retain();
    outlined release of AlertStorage?((uint64_t)v56);
    v68[96] = 0;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
  }
  v12 = v55;
  if ((a2 & 1) != 0)
    goto LABEL_22;
  return UIKitDialogBridge.reset()();
}

uint64_t UIKitDialogBridge.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of IntelligenceElement?(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  return swift_bridgeObjectRelease();
}

uint64_t ObjC metadata update function for UIKitDialogBridge()
{
  return type metadata accessor for UIKitDialogBridge();
}

id PlatformAlertController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformAlertController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PlatformAlertController()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for UIKitDialogBridge.ActivePresentation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitDialogBridge.ActivePresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for UIKitDialogBridge.ActivePresentation(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for UIKitDialogBridge.ActivePresentation(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UIKitDialogBridge.ActivePresentation()
{
  return &type metadata for UIKitDialogBridge.ActivePresentation;
}

uint64_t UIKitDialogBridge.descriptionChildren.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 48);
  if (!v1
    || (type metadata accessor for PlatformAlertController(),
        type metadata accessor for CustomRecursiveStringConvertible(),
        v2 = v1,
        (swift_dynamicCast() & 1) == 0))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    goto LABEL_6;
  }
  v3 = *((_QWORD *)&v8 + 1);
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_6:
    outlined destroy of IntelligenceElement?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible?, (void (*)(uint64_t))type metadata accessor for CustomRecursiveStringConvertible);
    return MEMORY[0x1E0DEE9D8];
  }
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

uint64_t UIKitDialogBridge.descriptionAttributes.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t inited;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t result;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v1 = *(void **)(v0 + 48);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for _ContiguousArrayStorage<(String, String)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = 0x656C746974;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v3 = v1;
  v4 = objc_msgSend(v3, sel_title);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0xE000000000000000;
  }
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 56) = v8;
  v10 = objc_msgSend(v3, sel_message);
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 2, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = 2;
    *(_QWORD *)(inited + 64) = 0x6567617373656DLL;
    *(_QWORD *)(inited + 72) = 0xE700000000000000;
    *(_QWORD *)(inited + 80) = v12;
    *(_QWORD *)(inited + 88) = v14;
  }
  v15 = objc_msgSend(v3, sel_preferredAction);
  if (!v15)
  {
LABEL_13:
    if (objc_msgSend(v3, sel_severity, v31) == (id)1)
    {
      v29 = *(_QWORD *)(inited + 16);
      v28 = *(_QWORD *)(inited + 24);
      if (v29 >= v28 >> 1)
        inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, (_QWORD *)inited);
      *(_QWORD *)(inited + 16) = v29 + 1;
      v30 = (_QWORD *)(inited + 32 * v29);
      v30[4] = 0x7974697265766573;
      v30[5] = 0xE800000000000000;
      v30[6] = 0x6C61636974697263;
      v30[7] = 0xE800000000000000;
    }
    v9 = specialized _arrayForceCast<A, B>(_:)(inited);
    swift_bridgeObjectRelease();

    return v9;
  }
  v16 = v15;
  v17 = objc_msgSend(v3, sel_actions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection<>.firstIndex(of:)((uint64_t)v16, v18);
  v20 = v19;
  v22 = v21;
  result = swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    v31 = v20;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(inited + 16);
    v25 = *(_QWORD *)(inited + 24);
    if (v26 >= v25 >> 1)
      inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = v26 + 1;
    v27 = (_QWORD *)(inited + 32 * v26);
    v27[4] = 0x6572726566657270;
    v27[5] = 0xEF6E6F6974634164;
    v27[6] = 0;
    v27[7] = 0xE000000000000000;

    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionName.getter in conformance UIKitDialogBridge()
{
  uint64_t v0;

  if (*(_BYTE *)(*(_QWORD *)v0 + 44) == 1)
    return 0xD000000000000012;
  else
    return 0x7472656C41;
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance UIKitDialogBridge()
{
  return UIKitDialogBridge.descriptionAttributes.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionChildren.getter in conformance UIKitDialogBridge()
{
  return UIKitDialogBridge.descriptionChildren.getter();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v4 = v2;
  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v4 = a2((char *)v10, v7, v5);
    MEMORY[0x18D760108](v10, -1, -1);
  }
  return v4;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(_BYTE *)(*(_QWORD *)(a3 + 56) + 240 * v12) == 1)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int v21;
  unsigned __int8 v22;
  int v23;
  _BYTE v24[176];
  int v25;
  _BYTE v26[176];
  _BYTE v27[184];
  unsigned __int8 *v28;

  v17 = (unint64_t *)result;
  v18 = 0;
  v4 = 0;
  v19 = a3 + 64;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 64);
  v20 = (unint64_t)(v5 + 63) >> 6;
  v28 = &v22;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
      goto LABEL_5;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v20)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    v13 = *(_QWORD *)(v19 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v20)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      v13 = *(_QWORD *)(v19 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v20)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
        v13 = *(_QWORD *)(v19 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_20:
    v7 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_5:
    v10 = *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v9);
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(a3 + 56) + 176 * v9, (uint64_t)v27);
    v25 = v10;
    outlined init with copy of ConfirmationDialog((uint64_t)v27, (uint64_t)v26);
    v23 = v10;
    outlined init with copy of ConfirmationDialog((uint64_t)v26, (uint64_t)v24);
    v21 = v10;
    outlined init with take of ConfirmationDialog((uint64_t)v24, (uint64_t)v28);
    v11 = v22;
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v21, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    result = outlined destroy of ConfirmationDialog((uint64_t)v27);
    if (v11 == 1)
    {
      *(unint64_t *)((char *)v17 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      if (__OFADD__(v18++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      }
    }
  }
  v14 = v12 + 3;
  if (v14 >= v20)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
  v13 = *(_QWORD *)(v19 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v20)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    v13 = *(_QWORD *)(v19 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t *v17;
  uint64_t v18;
  _BYTE v19[96];
  uint64_t v20;
  _QWORD v21[13];
  _BYTE v22[96];
  uint64_t v23;
  _BYTE v24[96];
  _BYTE v25[104];
  int64_t v26;

  v17 = (unint64_t *)result;
  v18 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v26)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v26)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v26)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_20:
    v8 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_5:
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v10);
    outlined init with copy of NavigationDestinationPresentation(*(_QWORD *)(a3 + 56) + 96 * v10, (uint64_t)v25);
    v23 = v11;
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v25, (uint64_t)v24);
    v21[12] = v11;
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v24, (uint64_t)v22);
    v20 = v11;
    outlined init with take of NavigationDestinationPresentation((uint64_t)v22, (uint64_t)v21);
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v21, (uint64_t)v19);
    LOBYTE(v11) = v19[88];
    outlined destroy of NavigationDestinationPresentation((uint64_t)v19);
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v20);
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v23);
    result = outlined destroy of NavigationDestinationPresentation((uint64_t)v25);
    if ((v11 & 1) == 0)
    {
      *(unint64_t *)((char *)v17 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v18++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      }
    }
  }
  v14 = v12 + 3;
  if (v14 >= v26)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v26)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized UIKitDialogBridge.init()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(a1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  swift_retain();
  EnvironmentValues.init()();
  v2 = a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  v3 = type metadata accessor for DialogActionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList) = 0;
  v4 = a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return a1;
}

uint64_t outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, ValueMetadata *))
{
  uint64_t v4;

  v4 = a3(0, a2, &type metadata for ConfirmationDialog);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined assign with take of DialogActionContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double _s7SwiftUI12AlertStorageVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t _s7SwiftUI12AlertStorageVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of AlertStorage?(uint64_t a1)
{
  outlined consume of AlertStorage?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_OWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(void **)(a1 + 184));
  return a1;
}

uint64_t outlined consume of AlertStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t result;

  if (a3)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of DialogSuppressionConfiguration?(a13, a14, a15, a16, a17, a18);
    return outlined consume of BoundInputsView?(a20, a21, a22, a23, a24);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.showNewDialog(_:id:)@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in UIKitDialogBridge.showNewDialog(_:id:)(a1);
}

uint64_t sub_187A23D00()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitDialogBridge.showNewDialog(_:id:)()
{
  return closure #2 in UIKitDialogBridge.showNewDialog(_:id:)();
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.dismiss(triggerCancellation:)()
{
  uint64_t v0;

  return dismissActually #1 () in UIKitDialogBridge.dismiss(triggerCancellation:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void type metadata accessor for (key: ViewIdentity, value: AlertStorage)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: AlertStorage)?)
  {
    type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)(255, &lazy cache variable for type metadata for (key: ViewIdentity, value: AlertStorage));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: AlertStorage)?);
  }
}

void type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.showNewAlert(_:id:)@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in UIKitDialogBridge.showNewAlert(_:id:)(a1);
}

uint64_t outlined init with take of AlertStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t partial apply for closure #2 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  return closure #2 in UIKitDialogBridge.showNewDialog(_:id:)();
}

uint64_t sub_187A23EA0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #3 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  closure #3 in UIKitDialogBridge.showNewAlert(_:id:)();
}

uint64_t sub_187A23ECC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  return closure #4 in UIKitDialogBridge.showNewAlert(_:id:)();
}

void type metadata accessor for UIHostingController<BoundInputsView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UIHostingController<BoundInputsView>)
  {
    v4 = type metadata accessor for UIHostingController(0, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<BoundInputsView>);
  }
}

unint64_t lazy protocol witness table accessor for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions;
  if (!lazy protocol witness table cache variable for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitDialogBridge.UpdateAlertActions, &unk_1E1AC7780);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.startTrackingUpdates(actions:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 8) = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t sub_187A23FA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t initializeWithCopy for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakCopyInit();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakTakeInit();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakTakeAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void *type metadata accessor for UIKitDialogBridge.UpdateAlertActions()
{
  return &unk_1E1AC7780;
}

uint64_t initializeWithCopy for NavigationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v24;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v24);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v24;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_OWORD *)(a2 + 72);
  v22 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v22;
  *(_OWORD *)(a1 + 72) = v21;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationRequest(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 64) = v4;
  outlined consume of NavigationRequest.Action(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationRequest(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationRequest(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_QWORD *)(a1 + 104) = 2 * -a2;
      *(_QWORD *)(a1 + 112) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

__n128 static NavigationRequest.setSelection<A>(_:list:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __n128 v18;
  uint64_t v19;
  __int128 v20;

  v18 = *a2;
  v9 = a2[1].n128_u64[0];
  v10 = a2[1].n128_u64[1];
  v11 = a2[2].n128_u8[0];
  v12 = a2[2].n128_u64[1];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3);
  type metadata accessor for SelectionManagerBox(255, a3, a4, v13);
  type metadata accessor for Binding();
  v15 = type metadata accessor for ToAnyListSelection(0, a3, a4, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToAnyListSelection<A>, v15);
  Binding.projecting<A>(_:)();
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a5 = v19;
  *(_OWORD *)(a5 + 8) = v20;
  *(_QWORD *)(a5 + 24) = v16;
  *(_QWORD *)(a5 + 32) = a3;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 64) = 2;
  result = v18;
  *(__n128 *)(a5 + 72) = v18;
  *(_QWORD *)(a5 + 88) = v9;
  *(_QWORD *)(a5 + 96) = v10;
  *(_QWORD *)(a5 + 104) = v11 & 1 | 0x4000000000000000;
  *(_QWORD *)(a5 + 112) = v12;
  *(_BYTE *)(a5 + 120) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  return result;
}

__n128 static NavigationRequest.boundSelectionChange<A>(list:newValue:transaction:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  __n128 result;
  __n128 v11;

  v11 = *a1;
  v5 = a1[1].n128_u64[0];
  v6 = a1[1].n128_u64[1];
  v7 = a1[2].n128_u64[1];
  v8 = a1[2].n128_u8[0] & 1 | 0x4000000000000000;
  v9 = Transaction.disablesAnimations.getter();
  *(_QWORD *)a3 = a2;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 7;
  result = v11;
  *(__n128 *)(a3 + 72) = v11;
  *(_QWORD *)(a3 + 88) = v5;
  *(_QWORD *)(a3 + 96) = v6;
  *(_QWORD *)(a3 + 104) = v8;
  *(_QWORD *)(a3 + 112) = v7;
  *(_BYTE *)(a3 + 120) = v9 & 1;
  *(_QWORD *)(a3 + 128) = 0;
  return result;
}

__n128 static NavigationRequest.editingChanged<A>(forSelectionType:list:newValue:)@<Q0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 72) = *(_OWORD *)a1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 32) & 1 | 0x4000000000000000;
  *(_QWORD *)a4 = a2 & 1;
  *(_QWORD *)(a4 + 8) = a3;
  *(_BYTE *)(a4 + 64) = 8;
  *(_OWORD *)(a4 + 88) = v5;
  *(_QWORD *)(a4 + 104) = v7;
  *(_QWORD *)(a4 + 112) = v6;
  *(_BYTE *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  return result;
}

uint64_t static NavigationRequest.updateView<A>(_:from:identifier:shouldTargetSourceColumn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v11 = MEMORY[0x1E0C80A78](a1, a1);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  (*(void (**)(char *, double))(v19 + 16))(v13, v11);
  *(_QWORD *)a6 = AnyNavigationLinkPresentedView.init<A>(_:)((uint64_t)v13, a4, a5, v20);
  *(_QWORD *)(a6 + 8) = v15;
  *(_QWORD *)(a6 + 16) = v16;
  *(_QWORD *)(a6 + 24) = v17;
  *(_QWORD *)(a6 + 32) = v18;
  *(_QWORD *)(a6 + 40) = a3 & 1;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  *(_BYTE *)(a6 + 64) = 14;
  outlined init with take of NavigationRequest.KeyKind(a2, a6 + 72);
  *(_BYTE *)(a6 + 120) = 0;
  *(_QWORD *)(a6 + 128) = 0;
  swift_retain();
  return outlined copy of _ViewList_ID.Canonical?(v16, v17);
}

uint64_t static NavigationRequest.programmaticallyPresentView<A>(_:from:transaction:depth:identifier:dismiss:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a3;
  v28 = a4;
  v29 = a2;
  v11 = MEMORY[0x1E0C80A78](a1, a1);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v14;
  v15 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  (*(void (**)(char *, double))(v19 + 16))(v13, v11);
  v21 = AnyNavigationLinkPresentedView.init<A>(_:)((uint64_t)v13, a6, a8, v20);
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v15, v17);
  swift_retain();
  v22 = Transaction.disablesAnimations.getter();
  v23 = v27;
  *(_QWORD *)a7 = v21;
  *(_QWORD *)(a7 + 8) = v23;
  *(_QWORD *)(a7 + 16) = v16;
  *(_QWORD *)(a7 + 24) = v15;
  *(_QWORD *)(a7 + 32) = v17;
  *(_QWORD *)(a7 + 40) = v18;
  v24 = v29;
  *(_QWORD *)(a7 + 48) = v28;
  *(_QWORD *)(a7 + 56) = a5;
  *(_BYTE *)(a7 + 64) = 18;
  result = outlined init with take of NavigationRequest.KeyKind(v24, a7 + 72);
  *(_BYTE *)(a7 + 120) = v22 & 1;
  *(_QWORD *)(a7 + 128) = 0;
  return result;
}

uint64_t NavigationRequest.KeyKind.previous.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  _OWORD v5[2];
  __int128 v6;
  _OWORD v7[3];
  _BYTE v8[24];
  _BYTE v9[8];
  unsigned __int8 v10;

  result = outlined init with take of NavigationRequest.KeyKind(v1, (uint64_t)v5);
  if (!((unint64_t)v6 >> 62))
  {
    v4 = BYTE8(v5[0]);
    goto LABEL_6;
  }
  if ((unint64_t)v6 >> 62 == 1)
  {
    *(_QWORD *)&v6 = v6 & 0x3FFFFFFFFFFFFFFFLL;
    v7[0] = v5[0];
    v7[1] = v5[1];
    v7[2] = v6;
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v7 + 8, (uint64_t)v8);
    result = outlined init with take of NavigationState.StackContent.Key?((uint64_t)v8, (uint64_t)v9);
    v4 = v10;
    if (v10 != 6)
LABEL_6:
      __asm { BR              X14 }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0x1FFFFFFFELL;
  a1[5] = 0;
  return result;
}

uint64_t static NavigationRequest.presentView<A>(_:from:identifier:binding:shouldTargetSourceColumn:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a6;
  HIDWORD(v27) = a5;
  v30 = a2;
  v12 = MEMORY[0x1E0C80A78](a1, a1);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v29 = v15[3];
  (*(void (**)(char *, double))(v19 + 16))(v14, v12);
  v21 = AnyNavigationLinkPresentedView.init<A>(_:)((uint64_t)v14, a8, a9, v20);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = a4;
  *(_BYTE *)(v22 + 32) = BYTE4(v27);
  v23 = v28 & 1;
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v17, v18);
  swift_retain();
  swift_retain();
  LOBYTE(a4) = Transaction.disablesAnimations.getter();
  v24 = Transaction.animation.getter();
  *(_QWORD *)a7 = v21;
  *(_QWORD *)(a7 + 8) = v16;
  *(_QWORD *)(a7 + 16) = v17;
  *(_QWORD *)(a7 + 24) = v18;
  v25 = v30;
  *(_QWORD *)(a7 + 32) = v29;
  *(_QWORD *)(a7 + 40) = partial apply for closure #1 in View.actionSheet(isPresented:content:);
  *(_QWORD *)(a7 + 48) = v22;
  *(_QWORD *)(a7 + 56) = v23;
  *(_BYTE *)(a7 + 64) = 13;
  result = outlined init with take of NavigationRequest.KeyKind(v25, a7 + 72);
  *(_BYTE *)(a7 + 120) = a4 & 1;
  *(_QWORD *)(a7 + 128) = v24;
  return result;
}

double static NavigationRequest.setInitialPossibilities<A>(_:stack:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v13 = *(_QWORD *)(a5 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](a1, a1);
  v16 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v13 + 16))(v16, v15);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v16, a5);
  *(_QWORD *)a7 = partial apply for closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:);
  *(_QWORD *)(a7 + 8) = v18;
  result = 0.0;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_BYTE *)(a7 + 64) = 0;
  *(_QWORD *)(a7 + 72) = a2;
  *(_QWORD *)(a7 + 80) = a3;
  *(_QWORD *)(a7 + 128) = 0;
  *(_QWORD *)(a7 + 88) = a4;
  *(_QWORD *)(a7 + 96) = 0;
  *(_QWORD *)(a7 + 104) = 0;
  *(_QWORD *)(a7 + 112) = 0;
  *(_BYTE *)(a7 + 120) = 0;
  return result;
}

unint64_t NavigationRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9 = *(_BYTE *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 104);
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  outlined copy of NavigationRequest.Action(v1, v2, v3, v4, v5, v6, v8, v7, v9);
  NavigationRequest.Action.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  outlined consume of NavigationRequest.Action(v1, v2, v3, v4, v5, v6, v8, v7, v9);
  v11._countAndFlagsBits = 0x203A79656B5B205DLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  if (v20 >> 62)
  {
    if (v20 >> 62 != 1)
    {
      v14 = 0xE500000000000000;
      v12 = 0x74696C7073;
      goto LABEL_7;
    }
    v12 = NavigationState.ListKey.description.getter();
  }
  else
  {
    NavigationState.StackContent.Key.debugDescription.getter(v18, v19);
  }
  v14 = v13;
LABEL_7:
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 93;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0xD00000000000001ELL;
}

uint64_t closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ResolvedNavigationDestinations.possibilities<A>(from:depth:)(a2, 0, a3, a4);
}

void protocol witness for CustomStringConvertible.description.getter in conformance NavigationRequest.KeyKind()
{
  uint64_t *v0;
  unint64_t v1;

  v1 = (unint64_t)v0[4] >> 62;
  if ((_DWORD)v1)
  {
    if ((_DWORD)v1 == 1)
      NavigationState.ListKey.description.getter();
  }
  else
  {
    NavigationState.StackContent.Key.debugDescription.getter(*v0, v0[1]);
  }
}

uint64_t NavigationRequest.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  char v16;
  Swift::String v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(unsigned __int8 *)(v0 + 64);
  v40 = *(_QWORD *)(v0 + 88);
  v41 = *(_QWORD *)(v0 + 80);
  v42 = *(_QWORD *)(v0 + 104);
  v43 = *(unsigned __int8 *)(v0 + 120);
  v38 = *(_QWORD *)(v0 + 72);
  v39 = *(_QWORD *)(v0 + 128);
  _StringGuts.grow(_:)(105);
  v10._countAndFlagsBits = 0xD00000000000001ELL;
  v10._object = (void *)0x8000000187BECCC0;
  String.append(_:)(v10);
  v11 = v4;
  v12 = v8;
  v13 = v11;
  outlined copy of NavigationRequest.Action(v1, v2, v11, v3, v6, v5, v7, v12, v9);
  NavigationRequest.Action.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = v13;
  v16 = v5;
  outlined consume of NavigationRequest.Action(v1, v2, v15, v3, v6, v5, v7, v12, v9);
  v17._countAndFlagsBits = 0x203A79656B5B205DLL;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  v18 = v42 >> 62;
  if (!(v42 >> 62))
  {
    v19 = v41;
    NavigationState.StackContent.Key.debugDescription.getter(v38, v41);
    goto LABEL_5;
  }
  if ((_DWORD)v18 == 1)
  {
    v19 = v41;
    v20 = NavigationState.ListKey.description.getter();
LABEL_5:
    v22 = v21;
    goto LABEL_7;
  }
  v22 = 0xE500000000000000;
  v20 = 0x74696C7073;
  v19 = v41;
LABEL_7:
  v23 = 1702195828;
  v24 = v22;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0xD000000000000017;
  v25._object = (void *)0x8000000187BEDC90;
  String.append(_:)(v25);
  if (v43)
    v26 = 1702195828;
  else
    v26 = 0x65736C6166;
  if (v43)
    v27 = 0xE400000000000000;
  else
    v27 = 0xE500000000000000;
  v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0x616D696E615B205DLL;
  v29._object = (void *)0xEE00203A6E6F6974;
  String.append(_:)(v29);
  if (v39)
  {
    v30 = Animation.description.getter();
    v32 = v31;
  }
  else
  {
    v32 = 0xEC0000006E6F6974;
    v30 = 0x616D696E61206F4ELL;
  }
  v33 = v32;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v34._object = (void *)0x8000000187BEDCB0;
  v34._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v34);
  if ((_DWORD)v18)
  {
    if ((_DWORD)v18 != 1)
      goto LABEL_23;
    v19 = v40;
    if (v40 == 6)
      goto LABEL_23;
  }
  if (v9 != 13)
  {
    if (v9 != 14)
      goto LABEL_23;
    LOBYTE(v12) = v16;
  }
  if (!(v19 & 0xFE | (unint64_t)(v12 & 1)))
  {
    v35 = (void *)0xE400000000000000;
    goto LABEL_24;
  }
LABEL_23:
  v35 = (void *)0xE500000000000000;
  v23 = 0x65736C6166;
LABEL_24:
  v36._countAndFlagsBits = v23;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t NavigationRequest.TargetedRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  uint64_t v38;
  Swift::String v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[6];
  char v64;
  uint64_t v65;

  v48 = *(_QWORD *)(v0 + 8);
  v49 = *(_QWORD *)v0;
  v46 = *(_QWORD *)(v0 + 24);
  v47 = *(_QWORD *)(v0 + 16);
  v44 = *(_QWORD *)(v0 + 40);
  v45 = *(_QWORD *)(v0 + 32);
  v42 = *(_QWORD *)(v0 + 56);
  v43 = *(_QWORD *)(v0 + 48);
  v41 = *(_BYTE *)(v0 + 64);
  v51 = *(_QWORD *)(v0 + 80);
  v52 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 96);
  v50 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  v53 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 200);
  v62 = *(_QWORD *)(v0 + 192);
  v58 = *(_QWORD *)(v0 + 216);
  v59 = *(_QWORD *)(v0 + 208);
  v56 = *(_QWORD *)(v0 + 232);
  v57 = *(_QWORD *)(v0 + 224);
  v55 = *(_QWORD *)(v0 + 240);
  v54 = *(unsigned __int8 *)(v0 + 248);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)v63, "Request for ");
  BYTE5(v63[1]) = 0;
  HIWORD(v63[1]) = -5120;
  if (v8 >> 1 == 0xFFFFFFFF)
    v10 = v52;
  else
    v10 = v4;
  if (v8 >> 1 == 0xFFFFFFFF)
    v11 = v51;
  else
    v11 = v5;
  if (v8 >> 1 == 0xFFFFFFFF)
    v12 = v50;
  else
    v12 = v7;
  if (v8 >> 1 == 0xFFFFFFFF)
    v13 = v1;
  else
    v13 = v6;
  if (v8 >> 1 == 0xFFFFFFFF)
    v14 = v2;
  else
    v14 = v8;
  if (v8 >> 1 == 0xFFFFFFFF)
    v15 = v3;
  else
    v15 = v9;
  if (!(v14 >> 62))
  {
    NavigationState.StackContent.Key.debugDescription.getter(v10, v11);
    goto LABEL_23;
  }
  if (v14 >> 62 == 1)
  {
    v63[2] = v10;
    v63[3] = v11;
    v63[4] = v12;
    v63[5] = v13;
    v64 = v14 & 1;
    v65 = v15;
    v16 = NavigationState.ListKey.description.getter();
LABEL_23:
    v18 = v17;
    goto LABEL_25;
  }
  v18 = 0xE500000000000000;
  v16 = 0x74696C7073;
LABEL_25:
  v19 = v62;
  v20 = v18;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 8250;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  v22 = v53;
  v23 = v62;
  v25 = v59;
  v24 = v60;
  v26 = v60;
  v27 = v59;
  v29 = v57;
  v28 = v58;
  v30 = v58;
  v31 = v57;
  v33 = v55;
  v32 = v56;
  v34 = v56;
  v35 = v55;
  v36 = v54;
  v37 = v54;
  if (v54 == 255)
  {
    v27 = v46;
    v31 = v44;
    v30 = v45;
    v35 = v42;
    v34 = v43;
    outlined copy of NavigationRequest.Action(v49, v48, v47, v46, v45, v44, v43, v42, v41);
    v36 = -1;
    v33 = v55;
    v32 = v56;
    v29 = v57;
    v28 = v58;
    v25 = v59;
    v24 = v60;
    v22 = v49;
    v23 = v48;
    v26 = v47;
    v37 = v41;
    v19 = v62;
  }
  v61 = v22;
  v38 = v23;
  outlined copy of NavigationRequest.Action?(v53, v19, v24, v25, v28, v29, v32, v33, v36);
  NavigationRequest.Action.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  outlined consume of NavigationRequest.Action(v61, v38, v26, v27, v30, v31, v34, v35, v37);
  return v63[0];
}

void NavigationRequest.Action.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_187A25440()
{
  return 0x68746150746573;
}

uint64_t outlined init with take of NavigationState.StackContent.Key?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187A259E0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for NavigationRequest.TargetedRequest(uint64_t a1)
{
  uint64_t result;

  outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  result = swift_release();
  if (*(unsigned __int8 *)(a1 + 248) != 255)
    return outlined consume of NavigationRequest.Action(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(_BYTE *)(a1 + 248));
  return result;
}

uint64_t initializeWithCopy for NavigationRequest.TargetedRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v24;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v12 = *(unsigned __int8 *)(a2 + 248);
  swift_retain();
  if (v12 == 255)
  {
    v21 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v21;
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v22;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 184);
    v14 = *(_QWORD *)(a2 + 192);
    v15 = *(_QWORD *)(a2 + 200);
    v16 = *(_QWORD *)(a2 + 208);
    v17 = *(_QWORD *)(a2 + 216);
    v18 = *(_QWORD *)(a2 + 224);
    v20 = *(_QWORD *)(a2 + 232);
    v19 = *(_QWORD *)(a2 + 240);
    outlined copy of NavigationRequest.Action(v13, v14, v15, v16, v17, v18, v20, v19, v12);
    *(_QWORD *)(a1 + 184) = v13;
    *(_QWORD *)(a1 + 192) = v14;
    *(_QWORD *)(a1 + 200) = v15;
    *(_QWORD *)(a1 + 208) = v16;
    *(_QWORD *)(a1 + 216) = v17;
    *(_QWORD *)(a1 + 224) = v18;
    *(_QWORD *)(a1 + 232) = v20;
    *(_QWORD *)(a1 + 240) = v19;
    *(_BYTE *)(a1 + 248) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for NavigationRequest.TargetedRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v60;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v60 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v60);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v60;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_OWORD *)(a2 + 72);
  v22 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v22;
  *(_OWORD *)(a1 + 72) = v21;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  v23 = *(_OWORD *)(a2 + 136);
  v24 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v24;
  *(_OWORD *)(a1 + 136) = v23;
  v25 = (_OWORD *)(a1 + 184);
  v26 = (_OWORD *)(a2 + 184);
  v27 = *(unsigned __int8 *)(a2 + 248);
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
    if (v27 == 255)
    {
      *v25 = *v26;
      v56 = *(_OWORD *)(a2 + 200);
      v57 = *(_OWORD *)(a2 + 216);
      v58 = *(_OWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_OWORD *)(a1 + 216) = v57;
      *(_OWORD *)(a1 + 232) = v58;
      *(_OWORD *)(a1 + 200) = v56;
    }
    else
    {
      v45 = *(_QWORD *)(a2 + 184);
      v46 = *(_QWORD *)(a2 + 192);
      v47 = *(_QWORD *)(a2 + 200);
      v48 = *(_QWORD *)(a2 + 208);
      v49 = *(_QWORD *)(a2 + 216);
      v50 = *(_QWORD *)(a2 + 224);
      v52 = *(_QWORD *)(a2 + 232);
      v51 = *(_QWORD *)(a2 + 240);
      outlined copy of NavigationRequest.Action(v45, v46, v47, v48, v49, v50, v52, v51, v27);
      *(_QWORD *)(a1 + 184) = v45;
      *(_QWORD *)(a1 + 192) = v46;
      *(_QWORD *)(a1 + 200) = v47;
      *(_QWORD *)(a1 + 208) = v48;
      *(_QWORD *)(a1 + 216) = v49;
      *(_QWORD *)(a1 + 224) = v50;
      *(_QWORD *)(a1 + 232) = v52;
      *(_QWORD *)(a1 + 240) = v51;
      *(_BYTE *)(a1 + 248) = v27;
    }
  }
  else if (v27 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
    *v25 = *v26;
    v54 = *(_OWORD *)(a2 + 216);
    v53 = *(_OWORD *)(a2 + 232);
    v55 = *(_OWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_OWORD *)(a1 + 216) = v54;
    *(_OWORD *)(a1 + 232) = v53;
    *(_OWORD *)(a1 + 200) = v55;
  }
  else
  {
    v28 = *(_QWORD *)(a2 + 184);
    v29 = *(_QWORD *)(a2 + 192);
    v30 = *(_QWORD *)(a2 + 200);
    v31 = *(_QWORD *)(a2 + 208);
    v32 = *(_QWORD *)(a2 + 216);
    v33 = *(_QWORD *)(a2 + 224);
    v35 = *(_QWORD *)(a2 + 232);
    v34 = *(_QWORD *)(a2 + 240);
    outlined copy of NavigationRequest.Action(v28, v29, v30, v31, v32, v33, v35, v34, v27);
    v36 = *(_QWORD *)(a1 + 184);
    v37 = *(_QWORD *)(a1 + 192);
    v38 = *(_QWORD *)(a1 + 200);
    v39 = *(_QWORD *)(a1 + 208);
    v40 = *(_QWORD *)(a1 + 216);
    v41 = *(_QWORD *)(a1 + 224);
    v42 = *(_QWORD *)(a1 + 232);
    v43 = *(_QWORD *)(a1 + 240);
    v44 = *(_BYTE *)(a1 + 248);
    *(_QWORD *)(a1 + 184) = v28;
    *(_QWORD *)(a1 + 192) = v29;
    *(_QWORD *)(a1 + 200) = v30;
    *(_QWORD *)(a1 + 208) = v31;
    *(_QWORD *)(a1 + 216) = v32;
    *(_QWORD *)(a1 + 224) = v33;
    *(_QWORD *)(a1 + 232) = v35;
    *(_QWORD *)(a1 + 240) = v34;
    *(_BYTE *)(a1 + 248) = v27;
    outlined consume of NavigationRequest.Action(v36, v37, v38, v39, v40, v41, v42, v43, v44);
  }
  return a1;
}

uint64_t assignWithTake for NavigationRequest.TargetedRequest(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 64) = v4;
  outlined consume of NavigationRequest.Action(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v16 = *(unsigned __int8 *)(a1 + 248);
  if (v16 == 255)
    goto LABEL_5;
  v17 = *(unsigned __int8 *)(a2 + 248);
  if (v17 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
LABEL_5:
    v26 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v26;
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    v27 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v27;
    return a1;
  }
  v18 = *(_QWORD *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 208);
  v22 = *(_QWORD *)(a1 + 216);
  v23 = *(_QWORD *)(a1 + 224);
  v24 = *(_QWORD *)(a1 + 232);
  v25 = *(_QWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 248) = v17;
  outlined consume of NavigationRequest.Action(v18, v19, v20, v21, v22, v23, v24, v25, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationRequest.TargetedRequest(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 249))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationRequest.TargetedRequest(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 248) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 249) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_QWORD *)(a1 + 104) = 2 * -a2;
      *(_QWORD *)(a1 + 112) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 249) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationRequest.TargetedRequest()
{
  return &type metadata for NavigationRequest.TargetedRequest;
}

ValueMetadata *type metadata accessor for NavigationRequest.KeyKind()
{
  return &type metadata for NavigationRequest.KeyKind;
}

uint64_t destroy for NavigationRequest.Action(uint64_t a1)
{
  return outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for NavigationRequest.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for NavigationRequest.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for NavigationRequest.Action(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  outlined consume of NavigationRequest.Action(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationRequest.Action(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEA && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 234);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x16)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationRequest.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE9)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 234;
    if (a3 >= 0xEA)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xEA)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for NavigationRequest.Action(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 0x15u)
    return *(unsigned __int8 *)(a1 + 64);
  else
    return (*(_DWORD *)a1 + 22);
}

uint64_t destructiveInjectEnumTag for NavigationRequest.Action(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x16)
  {
    *(_QWORD *)result = a2 - 22;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    LOBYTE(a2) = 22;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationRequest.Action()
{
  return &type metadata for NavigationRequest.Action;
}

uint64_t sub_187A26330()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:)(a1, v1 + ((v3 + 32) & ~v3), v2, *(_QWORD *)(v1 + 24));
}

uint64_t View.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  if (a1)
    v5 = 0;
  else
    v5 = 0x1FFFFFFFELL;
  return BadgedView.init(badgeLabel:content:)(a1, 0, v5, 0, partial apply for closure #1 in Link.body.getter, a2, a3, a4);
}

uint64_t View.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (a4)
    v11 = a1;
  else
    v11 = 0;
  if (a4)
    v12 = a2;
  else
    v12 = 0;
  if (a4)
    v13 = a3 & 1 | 0x8000000000000000;
  else
    v13 = 0x1FFFFFFFELL;
  outlined copy of Text?(a1, a2, a3, a4);
  return BadgedView.init(badgeLabel:content:)(v11, v12, v13, a4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in Link.archivedBody.getter, a5, a6, a7);
}

uint64_t View.badge(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v6 = a1;
  if (a1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = Text.init(_:tableName:bundle:comment:)();
    v6 = v9;
    v11 = v10;
    v13 = v12 & 1;
  }
  else
  {
    v8 = 0;
    v13 = 0;
    v11 = 0;
  }
  View.badge(_:)(v8, v6, v13, v11, a2, a3, a4);
  return outlined consume of Text?(v8, v6, v13, v11);
}

uint64_t View.badge<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:), (uint64_t)v14, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], v8, (uint64_t)&v15);
  v9 = v15;
  v10 = v16;
  v11 = v17;
  v12 = v18;
  View.badge(_:)(v15, v16, v17, v18, a1, a3, a5);
  return outlined consume of Text?(v9, v10, v11, v12);
}

void Scene.badge(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  Scene.badge(_:)();
}

void Scene.badge<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_187A26680(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for BadgedView(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

void sub_187A266A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for BadgedView(255, *a1, a1[2], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187A266D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceWritingModifier<BadgePreferenceKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _PreferenceWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

void type metadata accessor for _PreferenceWritingModifier<BadgePreferenceKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<BadgePreferenceKey>)
  {
    v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<BadgePreferenceKey>);
  }
}

uint64_t sub_187A2678C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _PreferenceWritingModifier<BadgePreferenceKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _PreferenceWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

ValueMetadata *type metadata accessor for BadgePreferenceKey()
{
  return &type metadata for BadgePreferenceKey;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance BadgePreferenceKey(_QWORD *result, _QWORD *(*a2)(__int128 *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = result[3];
  if (v3)
  {
    v4 = result[2];
    v5 = *(_OWORD *)result;
  }
  else
  {
    result = a2(&v6);
    v5 = v6;
    v4 = v7;
    v3 = v8;
  }
  *(_OWORD *)v2 = v5;
  v2[2] = v4;
  v2[3] = v3;
  return result;
}

uint64_t ScalarDeceleration.iter(_:minValue:maxValue:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5)
{
  uint64_t v5;
  double v6;
  double v7;
  _BYTE *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t result;
  double v17;

  v6 = *(double *)(v5 + 56);
  if (v6 == 0.0)
  {
    if ((a2 & 1) == 0)
    {
      v7 = *(double *)(v5 + 8);
      if (v7 < *(double *)&a1
        && *(double *)(v5 + 16) * *(double *)(v5 + 24) < *(double *)&a1 - v7 + *(double *)&a1 - v7)
      {
        v8 = (_BYTE *)(v5 + 80);
        if ((*(_BYTE *)(v5 + 80) & 1) == 0)
        {
          v6 = *(double *)(v5 + 40);
          v9 = *(_QWORD *)(v5 + 48);
          *(double *)(v5 + 64) = *(double *)&a1;
LABEL_12:
          *(double *)(v5 + 56) = v6;
          *(_QWORD *)(v5 + 24) = v9;
          goto LABEL_13;
        }
        goto LABEL_13;
      }
    }
    if ((a4 & 1) == 0)
    {
      v10 = *(double *)(v5 + 8);
      if (v10 > *(double *)&a3
        && *(double *)&a3 - v10 + *(double *)&a3 - v10 < *(double *)(v5 + 16) * *(double *)(v5 + 24))
      {
        v8 = (_BYTE *)(v5 + 80);
        if ((*(_BYTE *)(v5 + 80) & 1) == 0)
        {
          v6 = *(double *)(v5 + 40);
          v9 = *(_QWORD *)(v5 + 48);
          *(double *)(v5 + 64) = *(double *)&a3;
          goto LABEL_12;
        }
LABEL_13:
        *v8 = 1;
      }
    }
  }
  v11 = *(double *)v5;
  if (*(double *)v5 >= a5)
  {
    v13 = *(double *)(v5 + 16);
  }
  else
  {
    v12 = *(double *)(v5 + 8);
    v13 = *(double *)(v5 + 16);
    v14 = *(double *)(v5 + 32);
    do
    {
      v15 = v13 + v14 * 0.00416666667;
      v12 = v12 + v15 * 0.00833333333;
      v14 = v6 * (*(double *)(v5 + 64) - v12) - *(double *)(v5 + 24) * v15;
      v13 = v15 + v14 * 0.00416666667;
      v11 = v11 + 0.00833333333;
    }
    while (v11 < a5);
    *(double *)(v5 + 8) = v12;
    *(double *)(v5 + 16) = v13;
    *(double *)(v5 + 32) = v14;
    *(double *)v5 = v11;
  }
  if (fabs(v13) >= *(double *)(v5 + 72))
    return 0;
  if (v6 == 0.0)
  {
    *(double *)(v5 + 8) = round(*(double *)(v5 + 8));
    return 1;
  }
  v17 = *(double *)(v5 + 64);
  if (vabdd_f64(v17, *(double *)(v5 + 8)) >= 0.5)
    return 0;
  *(double *)(v5 + 8) = v17;
  *(_QWORD *)(v5 + 16) = 0;
  result = 1;
  *(_QWORD *)(v5 + 32) = 0;
  return result;
}

double specialized Deceleration2D.init(time:offset:velocity:drag:bounceStiffness:bounceDrag:stoppedVelocity:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  int64_t v29;
  double result;
  uint64_t v31;
  uint64_t v35;

  v35 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 0);
  v22 = v35;
  v24 = *(_QWORD *)(v35 + 16);
  v23 = *(_QWORD *)(v35 + 24);
  v25 = v23 >> 1;
  v26 = v24 + 1;
  if (v23 >> 1 <= v24)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
    v22 = v35;
    v23 = *(_QWORD *)(v35 + 24);
    v25 = v23 >> 1;
  }
  v27 = -a6;
  *(_QWORD *)(v22 + 16) = v26;
  v28 = v22 + 88 * v24;
  *(double *)(v28 + 32) = a1;
  *(double *)(v28 + 40) = a2;
  *(double *)(v28 + 48) = a4;
  *(double *)(v28 + 56) = a6;
  *(double *)(v28 + 64) = -(a6 * a4);
  *(double *)(v28 + 72) = a7;
  *(double *)(v28 + 80) = a8;
  *(_QWORD *)(v28 + 88) = 0;
  *(_QWORD *)(v28 + 96) = 0;
  *(_QWORD *)(v28 + 104) = a17;
  *(_BYTE *)(v28 + 112) = 0;
  v29 = v24 + 2;
  if (v25 < v29)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v29, 1);
    v22 = v35;
  }
  result = v27 * a5;
  *(_QWORD *)(v22 + 16) = v29;
  v31 = v22 + 88 * v26;
  *(double *)(v31 + 32) = a1;
  *(double *)(v31 + 40) = a3;
  *(double *)(v31 + 48) = a5;
  *(double *)(v31 + 56) = a6;
  *(double *)(v31 + 64) = v27 * a5;
  *(double *)(v31 + 72) = a7;
  *(double *)(v31 + 80) = a8;
  *(_QWORD *)(v31 + 88) = 0;
  *(_QWORD *)(v31 + 96) = 0;
  *(_QWORD *)(v31 + 104) = a17;
  *(_BYTE *)(v31 + 112) = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for ScalarDeceleration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScalarDeceleration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScalarDeceleration()
{
  return &type metadata for ScalarDeceleration;
}

ValueMetadata *type metadata accessor for Deceleration2D()
{
  return &type metadata for Deceleration2D;
}

uint64_t View.controlGroupStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ControlGroupStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ControlGroupStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlGroupStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for ControlGroupStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ControlGroupStyleConfiguration.Content()
{
  return &protocol witness table for ControlGroupStyleConfiguration.Content;
}

unint64_t instantiation function for generic protocol witness table for ControlGroupStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ControlGroupStyleConfiguration.Label()
{
  return &protocol witness table for ControlGroupStyleConfiguration.Label;
}

uint64_t dispatch thunk of ControlGroupStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for ControlGroupStyleConfiguration()
{
  return &type metadata for ControlGroupStyleConfiguration;
}

ValueMetadata *type metadata accessor for ControlGroupStyleConfiguration.Content()
{
  return &type metadata for ControlGroupStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for ControlGroupStyleConfiguration.Label()
{
  return &type metadata for ControlGroupStyleConfiguration.Label;
}

uint64_t sub_187A26E48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ControlGroupStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ControlGroupStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for ResolvedControlGroup()
{
  return &type metadata for ResolvedControlGroup;
}

uint64_t getEnumTagSinglePayload for ControlGroupStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A26F68 + 4 * byte_187C7D2A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ControlGroupStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ControlGroupStyleModifier<A>()
{
  return &protocol witness table for ControlGroupStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ControlGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ResolvedControlGroup.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 2;
  if (one-time initialization token for contain != -1)
    swift_once();
  v3 = static AccessibilityChildBehavior.contain;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for MutableBox<AccessibilityAttachment>();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = v7;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v4 + 16);
  swift_endAccess();
  swift_release();
  result = swift_release();
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = _s7SwiftUI4ViewPAAE36accessibilityShowsLargeContentVieweryQrAA013AccessibilityfgC8BehaviorOFyAA0ifgC4TreeOzcfU_TA_0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ResolvedControlGroup@<X0>(uint64_t a1@<X8>)
{
  return ResolvedControlGroup.body.getter(a1);
}

uint64_t ControlGroupStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v17 - v12;
  (*(void (**)(double))(v3 + 24))(v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, AssociatedTypeWitness, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for ControlGroupStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>)
  {
    type metadata accessor for ControlGroupStyleModifier<AutomaticControlGroupStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for ControlGroupStyleModifier<AutomaticControlGroupStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ControlGroupStyleModifier<AutomaticControlGroupStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle();
    v4 = type metadata accessor for ControlGroupStyleModifier(a1, (uint64_t)&type metadata for AutomaticControlGroupStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ControlGroupStyleModifier<AutomaticControlGroupStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedControlGroup(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedControlGroup()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A27570()
{
  return swift_deallocObject();
}

void type metadata accessor for MutableBox<AccessibilityAttachment>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>)
  {
    v0 = type metadata accessor for MutableBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>);
  }
}

uint64_t sub_187A2769C()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t static EmptyControlWidgetTemplate._kind.getter()
{
  return 0;
}

uint64_t static EmptyControlWidgetTemplate._controlType.getter()
{
  return MEMORY[0x1E0DEDCE8];
}

_UNKNOWN **associated type witness table accessor for ControlWidgetTemplate.Body : ControlWidgetTemplate in EmptyControlWidgetTemplate()
{
  return &protocol witness table for Never;
}

uint64_t protocol witness for static ControlWidgetTemplate._controlType.getter in conformance EmptyControlWidgetTemplate()
{
  return MEMORY[0x1E0DEDCE8];
}

ValueMetadata *type metadata accessor for EmptyControlWidgetTemplate()
{
  return &type metadata for EmptyControlWidgetTemplate;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(int a1, int a2)
{
  unsigned int v2;

  v2 = ((a2 & 0x10000) == 0) ^ ((a1 & 0x10000u) >> 16);
  if (((a2 & 0x100) == 0) == (unsigned __int16)(a1 & 0x100) >> 8)
    v2 = 0;
  if (((a2 & 1) == 0) == (a1 & 1))
    v2 = 0;
  if (a2 == 2)
    v2 = 0;
  if (a1 == 2)
    return a2 == 2;
  else
    return v2;
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(char a1, char a2)
{
  _BOOL4 v3;

  v3 = a2 != 5 && a2 == a1;
  if (a1 == 5)
    return a2 == 5;
  else
    return v3;
}

{
  _BOOL4 v3;

  v3 = a2 != 4 && a2 == a1;
  if (a1 == 4)
    return a2 == 4;
  else
    return v3;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for URL();
  v5 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, v5);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - v12;
  type metadata accessor for (UIListContentConfiguration?, UIListContentConfiguration?)(0, (unint64_t *)&lazy cache variable for type metadata for (URL?, URL?), (unint64_t *)&lazy cache variable for type metadata for URL?, v5);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v24 - v16;
  v19 = (char *)&v24 + *(int *)(v18 + 48) - v16;
  outlined init with copy of PlatformItemList.Item?(a1, (uint64_t)&v24 - v16, (unint64_t *)&lazy cache variable for type metadata for URL?, v5);
  outlined init with copy of PlatformItemList.Item?(a2, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for URL?, v5);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v20(v17, 1, v4) != 1)
  {
    outlined init with copy of PlatformItemList.Item?((uint64_t)v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    if (v20(v19, 1, v4) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v19, v4);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))v5, MEMORY[0x1E0CB0028]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v6 + 8);
      v22(v9, v4);
      v22(v13, v4);
      outlined destroy of IntelligenceElement?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, v5);
      return v21 & 1;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v4);
    goto LABEL_6;
  }
  if (v20(v19, 1, v4) != 1)
  {
LABEL_6:
    outlined destroy of TableRowList?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for (URL?, URL?), (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD))type metadata accessor for (UIListContentConfiguration?, UIListContentConfiguration?));
    v21 = 0;
    return v21 & 1;
  }
  outlined destroy of IntelligenceElement?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v21 = 1;
  return v21 & 1;
}

{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UIListContentConfiguration();
  v5 = (void (*)(uint64_t))MEMORY[0x1E0DC23A0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for UIListContentConfiguration?, v5);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - v12;
  type metadata accessor for (UIListContentConfiguration?, UIListContentConfiguration?)(0, &lazy cache variable for type metadata for (UIListContentConfiguration?, UIListContentConfiguration?), &lazy cache variable for type metadata for UIListContentConfiguration?, v5);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v24 - v16;
  v19 = (char *)&v24 + *(int *)(v18 + 48) - v16;
  outlined init with copy of PlatformItemList.Item?(a1, (uint64_t)&v24 - v16, &lazy cache variable for type metadata for UIListContentConfiguration?, v5);
  outlined init with copy of PlatformItemList.Item?(a2, (uint64_t)v19, &lazy cache variable for type metadata for UIListContentConfiguration?, v5);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v20(v17, 1, v4) != 1)
  {
    outlined init with copy of PlatformItemList.Item?((uint64_t)v17, (uint64_t)v13, &lazy cache variable for type metadata for UIListContentConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC23A0]);
    if (v20(v19, 1, v4) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v19, v4);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIListContentConfiguration and conformance UIListContentConfiguration, (uint64_t (*)(uint64_t))v5, MEMORY[0x1E0DC23B0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v6 + 8);
      v22(v9, v4);
      v22(v13, v4);
      outlined destroy of IntelligenceElement?((uint64_t)v17, &lazy cache variable for type metadata for UIListContentConfiguration?, v5);
      return v21 & 1;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v4);
    goto LABEL_6;
  }
  if (v20(v19, 1, v4) != 1)
  {
LABEL_6:
    outlined destroy of TableRowList?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for (UIListContentConfiguration?, UIListContentConfiguration?), (uint64_t)&lazy cache variable for type metadata for UIListContentConfiguration?, (uint64_t)MEMORY[0x1E0DC23A0], (uint64_t (*)(_QWORD))type metadata accessor for (UIListContentConfiguration?, UIListContentConfiguration?));
    v21 = 0;
    return v21 & 1;
  }
  outlined destroy of IntelligenceElement?((uint64_t)v17, &lazy cache variable for type metadata for UIListContentConfiguration?, (void (*)(uint64_t))MEMORY[0x1E0DC23A0]);
  v21 = 1;
  return v21 & 1;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  char v6;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = (a3 & a6) == 255;
  if (a3 == 255 || a6 == 0xFF)
    return v6 & 1;
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      v6 = a1 == a4 && a2 == a5;
      return v6 & 1;
    }
    outlined copy of SceneID?(a1, a2, a3);
    outlined copy of SceneID?(a4, a5, a6);
    v22 = _typeName(_:qualified:)();
    v24 = v13;
    v14._countAndFlagsBits = 45;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16 = v24;
    swift_bridgeObjectRetain();
    v17 = a5;
    if (v22 != a4)
      goto LABEL_17;
LABEL_12:
    if (v16 == v17)
    {
      v6 = 1;
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(a4, a5, a6);
      outlined consume of SceneID?(a1, a2, a3);
      return v6 & 1;
    }
LABEL_17:
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_18;
  }
  if ((a6 & 1) != 0)
  {
    outlined copy of SceneID?(a1, a2, a3);
    outlined copy of SceneID?(a1, a2, a3);
    outlined copy of SceneID?(a4, a5, a6);
    v23 = _typeName(_:qualified:)();
    v25 = v18;
    v19._countAndFlagsBits = 45;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v17 = v25;
    v16 = a2;
    if (a1 != v23)
      goto LABEL_17;
    goto LABEL_12;
  }
  if (a1 == a4 && a2 == a5)
  {
    v6 = 1;
    return v6 & 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  _BOOL8 result;

  switch(a1)
  {
    case 2u:
      if (a2 == 2)
        goto LABEL_13;
      goto LABEL_15;
    case 3u:
      if (a2 != 3)
        goto LABEL_15;
      goto LABEL_13;
    case 4u:
      if (a2 != 4)
        goto LABEL_15;
      goto LABEL_13;
    case 5u:
      if (a2 != 5)
        goto LABEL_15;
      goto LABEL_13;
    case 6u:
      if (a2 != 6)
        goto LABEL_15;
      goto LABEL_13;
    case 7u:
      if (a2 != 7)
        goto LABEL_15;
LABEL_13:
      result = 1;
      break;
    default:
      if (a2 - 2 >= 6)
        result = ((a2 ^ a1) & 1) == 0;
      else
LABEL_15:
        result = 0;
      break;
  }
  return result;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;
  char v13;

  if (!a2)
  {
    if (!a6)
      return 1;
    goto LABEL_10;
  }
  if (!a6)
  {
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a1 == a5 && a2 == a6)
  {
    if (a3 == a7)
      return a4 == a8;
    return 0;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v13 & 1) != 0 && a3 == a7)
    return a4 == a8;
  return result;
}

SwiftUI::KeyEquivalent __swiftcall KeyEquivalent.init(extendedGraphemeClusterLiteral:)(SwiftUI::KeyEquivalent extendedGraphemeClusterLiteral)
{
  SwiftUI::KeyEquivalent *v1;

  *v1 = extendedGraphemeClusterLiteral;
  return extendedGraphemeClusterLiteral;
}

_QWORD *KeyboardShortcut.init(_:modifiers:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = result[1];
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = a2;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

uint64_t View.keyboardShortcutBindingBehavior<A>(action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  v24 = a7;
  v25 = a4;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for KeyboardShortcutBindingBehavior(0, v15, v16, v14);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v24 - v20;
  v22 = swift_retain();
  a3(v22);
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[*(int *)(v17 + 36)], v13, a5);
  MEMORY[0x18D75B4AC](v21, v25, v17, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t View.keyboardShortcut(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t HasKeyboardShortcut;
  _BYTE v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;

  v24 = a2;
  v27 = a3;
  type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>();
  v4 = type metadata accessor for ModifiedContent();
  v25 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v22[-v6];
  type metadata accessor for ViewInputFlagModifier<HasKeyboardShortcut>(255);
  v8 = type metadata accessor for ModifiedContent();
  v26 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v22[-v10];
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = *((_BYTE *)a1 + 24);
  v23 = v15;
  swift_getKeyPath();
  v30 = v12;
  v31 = v13;
  v32 = v14;
  v33 = v15;
  v16 = v24;
  View.environment<A>(_:_:)();
  swift_release();
  v17 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>, MEMORY[0x1E0CE65C0]);
  v29[0] = v16;
  v29[1] = v17;
  v18 = MEMORY[0x1E0CE2E70];
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v29);
  HasKeyboardShortcut = lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  View.input<A>(_:)((uint64_t)&type metadata for HasKeyboardShortcut, v4, (uint64_t)&type metadata for HasKeyboardShortcut, v19, HasKeyboardShortcut);
  (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v7, v4);
  v30 = v12;
  v31 = v13;
  v32 = v14;
  v33 = v23;
  v28[0] = v19;
  v28[1] = &protocol witness table for ViewInputFlagModifier<A>;
  MEMORY[0x18D75FFDC](v18, v8, v28);
  View._trait<A>(_:_:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v26 + 8))(v11, v8);
}

_QWORD *KeyboardShortcut.init(_:modifiers:localization:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;

  v4 = result[1];
  v5 = *a3;
  *(_QWORD *)a4 = *result;
  *(_QWORD *)(a4 + 8) = v4;
  *(_QWORD *)(a4 + 16) = a2;
  *(_BYTE *)(a4 + 24) = v5;
  return result;
}

SwiftUI::KeyEquivalent __swiftcall KeyEquivalent.init(_:)(SwiftUI::KeyEquivalent result)
{
  SwiftUI::KeyEquivalent *v1;

  *v1 = result;
  return result;
}

uint64_t View.keyboardShortcut(_:modifiers:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6[3];
  char v7;

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[2] = a2;
  v7 = 0;
  return View.keyboardShortcut(_:)(v6, a3, a4);
}

uint64_t View.keyboardShortcut(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  __int128 v6;
  uint64_t v7;
  char v8;

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_BYTE *)a1 + 24);
  v6 = *a1;
  v7 = v3;
  v8 = v4;
  return View.keyboardShortcut(_:)((uint64_t *)&v6, a2, a3);
}

uint64_t View.keyboardShortcut(_:modifiers:localization:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v8[3];
  char v9;

  v5 = a1[1];
  v6 = *a3;
  v8[0] = *a1;
  v8[1] = v5;
  v8[2] = a2;
  v9 = v6;
  return View.keyboardShortcut(_:)(v8, a4, a5);
}

void static KeyboardShortcut.Localization.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void Scene.keyboardShortcut(_:modifiers:localization:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.keyboardShortcut(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static KeyboardShortcut.Localization.withoutMirroring.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static KeyboardShortcut.Localization.custom.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static KeyboardShortcut.defaultAction.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 13;
  *(_QWORD *)(a1 + 8) = 0xE100000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

void static KeyboardShortcut.cancelAction.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 27;
  *(_QWORD *)(a1 + 8) = 0xE100000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

uint64_t KeyboardShortcut.key.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t KeyboardShortcut.key.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*KeyboardShortcut.key.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t KeyboardShortcut.modifiers.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t KeyboardShortcut.modifiers.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*KeyboardShortcut.modifiers.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void KeyboardShortcut.localization.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

_BYTE *KeyboardShortcut.localization.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = *result;
  return result;
}

uint64_t (*KeyboardShortcut.localization.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static KeyEquivalent.upArrow.getter(_QWORD *a1@<X8>)
{
  *a1 = 8428783;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.downArrow.getter(_QWORD *a1@<X8>)
{
  *a1 = 8494319;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.leftArrow.getter(_QWORD *a1@<X8>)
{
  *a1 = 8559855;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.rightArrow.getter(_QWORD *a1@<X8>)
{
  *a1 = 8625391;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.escape.getter(_QWORD *a1@<X8>)
{
  *a1 = 27;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.delete.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.deleteForward.getter(_QWORD *a1@<X8>)
{
  *a1 = 11050223;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.home.getter(_QWORD *a1@<X8>)
{
  *a1 = 11115759;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.end.getter(_QWORD *a1@<X8>)
{
  *a1 = 11246831;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.pageUp.getter(_QWORD *a1@<X8>)
{
  *a1 = 11312367;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.pageDown.getter(_QWORD *a1@<X8>)
{
  *a1 = 11377903;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.clear.getter(_QWORD *a1@<X8>)
{
  *a1 = 12164335;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.tab.getter(_QWORD *a1@<X8>)
{
  *a1 = 9;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.space.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.return.getter(_QWORD *a1@<X8>)
{
  *a1 = 13;
  a1[1] = 0xE100000000000000;
}

uint64_t KeyEquivalent.character.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyEquivalent.character.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*KeyEquivalent.character.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t KeyEquivalent.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t static KeyEquivalent.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int KeyEquivalent.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyEquivalent()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyEquivalent()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyEquivalent()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SceneKeyboardShortcutsKey@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SceneKeyboardShortcutsKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ButtonKeyboardShortcutKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasKeyboardShortcut()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasKeyboardShortcut()
{
  lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  return PropertyList.subscript.setter();
}

void KeyboardShortcut.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int KeyboardShortcut.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyboardShortcut()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance KeyboardShortcut()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyboardShortcut()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int OffsetAttribute2;
  id v17;
  uint64_t v18;
  double result;
  _OWORD v20[5];
  int v21;
  uint64_t v22;
  double v23;
  _OWORD v24[5];
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;

  v9 = a2[3];
  v10 = a2[1];
  v28 = a2[2];
  v29 = v9;
  v11 = a2[3];
  v30 = a2[4];
  v12 = a2[1];
  v26 = *a2;
  v27 = v12;
  v24[2] = v28;
  v24[3] = v11;
  v24[4] = a2[4];
  v13 = *a1;
  v31 = *((_DWORD *)a2 + 20);
  v25 = *((_DWORD *)a2 + 20);
  v24[0] = v26;
  v24[1] = v10;
  a3(&v22);
  outlined retain of _ViewInputs((uint64_t)&v26);
  lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v26);
  if (LOBYTE(v24[0]) == 1)
  {
    LODWORD(v24[0]) = v13;
    type metadata accessor for KeyboardShortcutBindingBehavior(255, a4, a5, v14);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64))
      closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(1, a4, a5, v15);
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v20[2] = v28;
    v20[3] = v29;
    v20[4] = v30;
    v21 = v31;
    v20[0] = v26;
    v20[1] = v27;
    v17 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)v20, 1, (uint64_t)v24);
    *(_QWORD *)&v20[0] = v29;
    DWORD2(v20[0]) = DWORD2(v29);
    MEMORY[0x1E0C80A78](v17, v18);
    outlined retain of _ViewInputs((uint64_t)&v26);
    outlined retain of [Text.Modifier]((uint64_t)v20);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    outlined release of PlatformItemListGenerator<TextPlatformItemListFlags, A>((void **)v24);
  }
  *(_QWORD *)a6 = v22;
  result = v23;
  a6[1] = v23;
  return result;
}

uint64_t closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for KeyboardShortcutBindingBehavior(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v11[2] = v6;
  v11[3] = a2;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t implicit closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(int a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  int v10;
  char v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  __int16 v36;
  char v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  LODWORD(v50) = a1;
  type metadata accessor for KeyboardShortcutBindingBehavior(255, a4, a5, a4);
  type metadata accessor for _GraphValue();
  v9 = _GraphValue.value.getter();
  v10 = *(_DWORD *)(a2 + 8);
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(void **)a2;
  v30 = *(_DWORD *)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 100);
  v33 = *(_DWORD *)(a2 + 104);
  v34 = *(_DWORD *)(a2 + 96);
  v12 = a3[3];
  v52 = a3[2];
  v53 = v12;
  v54 = a3[4];
  LODWORD(v55) = *((_DWORD *)a3 + 20);
  v13 = a3[1];
  v50 = *a3;
  v51 = v13;
  v14 = v11 & 1;
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 88);
  v27 = *(_OWORD *)(a2 + 56);
  v28 = *(_OWORD *)(a2 + 72);
  swift_getKeyPath();
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)a2);
  LODWORD(a2) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v18 = a3[3];
  v52 = a3[2];
  v53 = v18;
  v54 = a3[4];
  LODWORD(v55) = *((_DWORD *)a3 + 20);
  v19 = a3[1];
  v50 = *a3;
  v51 = v19;
  swift_getKeyPath();
  v20 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)&v50 = *((_QWORD *)a3 + 6);
  DWORD2(v50) = *((_DWORD *)a3 + 14);
  v21 = PreferencesInputs.hostKeys.getter();
  v22 = *MEMORY[0x1E0CFED28];
  *(_WORD *)((char *)&v47 + 13) = v36;
  HIBYTE(v47) = v37;
  LODWORD(v41) = v9;
  *((_QWORD *)&v41 + 1) = v32;
  LODWORD(v42) = v10;
  *((_QWORD *)&v42 + 1) = v31;
  LODWORD(v43) = v30;
  *((_QWORD *)&v43 + 1) = v29;
  *(_QWORD *)&v44 = v15;
  *((_QWORD *)&v44 + 1) = v16;
  v45 = v27;
  v46 = v28;
  *(_QWORD *)&v47 = v17;
  DWORD2(v47) = v34;
  BYTE12(v47) = v14;
  *(_QWORD *)&v48 = __PAIR64__(a2, v33);
  *((_QWORD *)&v48 + 1) = __PAIR64__(v21, v20);
  v49 = v22;
  v39 = type metadata accessor for BindKeyboardShortcutItems(0, a4, a5, v23);
  v40 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BindKeyboardShortcutItems<A>, v39);
  type metadata accessor for Attribute<[KeyboardShortcutBinding]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v41, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_27, (uint64_t)v38, v39, MEMORY[0x1E0DEDCE8], v24, MEMORY[0x1E0DEDD18], v25);
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v52 = v43;
  v53 = v44;
  v54 = v45;
  v55 = v46;
  v50 = v41;
  v51 = v42;
  outlined release of BindKeyboardShortcutItems<A>((uint64_t)&v50);
  return v35;
}

uint64_t BindKeyboardShortcutItems.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for KeyboardShortcutBindingBehavior(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t BindKeyboardShortcutItems.shortcut.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  char v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for KeyboardShortcut?, (uint64_t)&type metadata for KeyboardShortcut, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  v3 = *(_BYTE *)(Value + 24);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_BYTE *)(a1 + 24) = v3;
  return swift_bridgeObjectRetain();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance KeyboardShortcutBindingBehavior<A>@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance KeyboardShortcutBindingBehavior<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyboardShortcutBindingBehavior<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t BindKeyboardShortcutItems.updateValue()(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t *, uint64_t);
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  _QWORD v51[2];
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  id v60;
  ValueMetadata *v61;
  int v62;
  _UNKNOWN **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  ValueMetadata *v67;
  uint64_t v68;
  _UNKNOWN **v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[64];
  __int128 v74;
  __int128 v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86;

  v2 = v1;
  v86 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (id *)((char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v11 = type metadata accessor for KeyboardShortcutBindingBehavior(0, v9, v8, v10);
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (_QWORD *)((char *)v51 - v13);
  v15 = v1[7];
  v83 = v1[6];
  v84 = v15;
  v85 = *((_DWORD *)v1 + 32);
  v16 = v1[3];
  v79 = v1[2];
  v80 = v16;
  v17 = v1[5];
  v81 = v1[4];
  v82 = v17;
  v18 = v1[1];
  v77 = *v1;
  v78 = v18;
  v19 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v71 = v19;
  v20 = PreferenceKeys.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
    goto LABEL_9;
  if (*(_BYTE *)AGGraphGetValue() != 1)
    goto LABEL_9;
  v74 = v83;
  v75 = v84;
  v76 = v85;
  *(_OWORD *)v73 = v79;
  *(_OWORD *)&v73[16] = v80;
  *(_OWORD *)&v73[32] = v81;
  *(_OWORD *)&v73[48] = v82;
  v71 = v77;
  v72 = v78;
  BindKeyboardShortcutItems.shortcut.getter((uint64_t)&v67);
  if (v68)
  {
    v64 = v68;
    v61 = v67;
    v63 = v69;
    v62 = v70;
    v21 = v85;
    if (v85 == *MEMORY[0x1E0CFED28])
    {
      v22 = *((_QWORD *)&v77 + 1);
      v58 = v78;
      v57 = *((_QWORD *)&v78 + 1);
      v56 = v79;
      v55 = *((_QWORD *)&v79 + 1);
      v23 = v80;
      v59 = v81;
      v24 = v82;
      v25 = v83;
      v53 = BYTE12(v83);
      v54 = DWORD2(v83);
      v52 = v84;
      v60 = (id)AGSubgraphGetCurrent();
      if (AGGraphGetCurrentAttribute() != v21)
      {
        v26 = (id)AGGraphGetAttributeSubgraph();
        AGSubgraphSetCurrent();

        v51[1] = v51;
        *(_QWORD *)&v71 = v22;
        DWORD2(v71) = v58;
        *(_QWORD *)&v72 = v57;
        DWORD2(v72) = v56;
        *(_QWORD *)v73 = v55;
        *(_OWORD *)&v73[8] = v23;
        *(_OWORD *)&v73[24] = v59;
        *(_OWORD *)&v73[40] = v24;
        *(_QWORD *)&v73[56] = v25;
        LODWORD(v74) = v54;
        BYTE4(v74) = v53;
        DWORD2(v74) = v52;
        MEMORY[0x1E0C80A78](v27, v28);
        v67 = &type metadata for TextPlatformItemListFlags;
        v68 = v9;
        v69 = &protocol witness table for TextPlatformItemListFlags;
        v70 = v8;
        type metadata accessor for PlatformItemListGenerator();
      }
      __break(1u);
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_187BF9830;
    v30 = *((_QWORD *)v2 + 1);
    v31 = *((_DWORD *)v2 + 4);
    v32 = *((_QWORD *)v2 + 3);
    v33 = *((_DWORD *)v2 + 8);
    v34 = *((_QWORD *)v2 + 5);
    v35 = *((_DWORD *)v2 + 26);
    v36 = *((_BYTE *)v2 + 108);
    LODWORD(v71) = *(_DWORD *)v2;
    *((_QWORD *)&v71 + 1) = v30;
    LODWORD(v72) = v31;
    *((_QWORD *)&v72 + 1) = v32;
    *(_DWORD *)v73 = v33;
    *(_QWORD *)&v73[8] = v34;
    v37 = v2[4];
    *(_OWORD *)&v73[16] = v2[3];
    *(_OWORD *)&v73[32] = v37;
    *(_OWORD *)&v73[48] = v2[5];
    *(_QWORD *)&v74 = *((_QWORD *)v2 + 12);
    DWORD2(v74) = v35;
    BYTE12(v74) = v36;
    v75 = v2[7];
    v76 = v21;
    BindKeyboardShortcutItems.modifier.getter(a1, v38, (uint64_t)v14);
    v40 = *v14;
    v39 = v14[1];
    v41 = *(void (**)(uint64_t *, uint64_t))(v65 + 8);
    swift_retain();
    v41(v14, v66);
    AGGraphGetValue();
    v42 = swift_bridgeObjectRetain();
    PlatformItemList.mergedContentItem.getter(v42, (uint64_t)v7);
    swift_bridgeObjectRelease();
    v43 = *v7;
    v44 = *v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (v43)
    {
      v45 = objc_msgSend(v44, sel_string);

      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v48 = v47;

    }
    else
    {
      v46 = 0;
      v48 = 0;
    }
    v50 = v64;
    *(_QWORD *)(v29 + 32) = v61;
    *(_QWORD *)(v29 + 40) = v50;
    *(_QWORD *)(v29 + 48) = v63;
    *(_BYTE *)(v29 + 56) = v62;
    *(_QWORD *)(v29 + 64) = v40;
    *(_QWORD *)(v29 + 72) = v39;
    *(_QWORD *)(v29 + 80) = v46;
    *(_QWORD *)(v29 + 88) = v48;
    *(_QWORD *)&v71 = v29;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    *(_QWORD *)&v71 = MEMORY[0x1E0DEE9D8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    return AGGraphSetOutputValue();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyboardShortcutBinding()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 56);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
    String.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance KeyboardShortcutBinding()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 56);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
    String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyboardShortcutBinding()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 56);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
    String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance KeyboardShortcutBindingsKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

BOOL specialized static KeyboardShortcut.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v7;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v4)
      return 0;
    return v3 == v5;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v7 & 1) != 0 && v2 == v4)
    return v3 == v5;
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in KeyEquivalent()
{
  return MEMORY[0x1E0DEA300];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in KeyEquivalent()
{
  return MEMORY[0x1E0DEA2F8];
}

uint64_t assignWithCopy for KeyboardShortcut(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardShortcut.Localization()
{
  return &type metadata for KeyboardShortcut.Localization;
}

ValueMetadata *type metadata accessor for KeyEquivalent()
{
  return &type metadata for KeyEquivalent;
}

uint64_t sub_187A29D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>();
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HasKeyboardShortcut>(255);
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>, MEMORY[0x1E0CE65C0]);
  v5 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v7[0] = MEMORY[0x18D75FFDC](v5, v3, v8);
  v7[1] = lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v5, v4, v7);
}

uint64_t sub_187A29E74(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t storeEnumTagSinglePayload for KeyboardShortcut.Localization(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A29EC8 + 4 * byte_187C7D50B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A29EFC + 4 * byte_187C7D506[v4]))();
}

uint64_t sub_187A29EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A29F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A29F0CLL);
  return result;
}

uint64_t sub_187A29F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A29F20);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A29F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A29F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyboardShortcut.Localization.Style()
{
  return &type metadata for KeyboardShortcut.Localization.Style;
}

uint64_t destroy for KeyboardShortcutBinding()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyboardShortcutBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyboardShortcutBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KeyboardShortcutBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardShortcutBinding()
{
  return &type metadata for KeyboardShortcutBinding;
}

uint64_t type metadata completion function for KeyboardShortcutBindingBehavior()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for KeyboardShortcutBindingBehavior(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    *a1 = v7;
    a1 = (_QWORD *)(v7 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = v7;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for KeyboardShortcutBindingBehavior(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for KeyboardShortcutBindingBehavior(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *assignWithCopy for KeyboardShortcutBindingBehavior(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_OWORD *assignWithTake for KeyboardShortcutBindingBehavior(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyboardShortcutBindingBehavior(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 16) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A2A484 + 4 * byte_187C7D510[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for KeyboardShortcutBindingBehavior(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for KeyboardShortcutBindingBehavior(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyboardShortcutBindingBehavior);
}

ValueMetadata *type metadata accessor for HasKeyboardShortcut()
{
  return &type metadata for HasKeyboardShortcut;
}

ValueMetadata *type metadata accessor for ButtonKeyboardShortcutKey()
{
  return &type metadata for ButtonKeyboardShortcutKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in KeyboardShortcutBindingBehavior<A>()
{
  return &protocol witness table for KeyboardShortcutBindingBehavior<A>;
}

unint64_t lazy protocol witness table accessor for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style;
  if (!lazy protocol witness table cache variable for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyboardShortcut.Localization.Style, &type metadata for KeyboardShortcut.Localization.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasKeyboardShortcut()
{
  return &protocol witness table for HasKeyboardShortcut;
}

uint64_t outlined retain of TableColumnCustomizationID?(uint64_t a1)
{
  outlined copy of TableColumnCustomizationID?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t specialized static KeyboardShortcutBinding.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    result = 0;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  if (v2 == v6 && v3 == v7)
  {
    result = (v5 | v9) == 0;
    if (v5)
    {
      if (v9)
      {
        if (v4 == v8 && v5 == v9)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(__int128 **)(v0 + 48), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void **outlined release of PlatformItemListGenerator<TextPlatformItemListFlags, A>(void **a1)
{
  void *v2;

  v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t outlined release of BindKeyboardShortcutItems<A>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SceneKeyboardShortcutsKey()
{
  return &type metadata for EnvironmentValues.SceneKeyboardShortcutsKey;
}

uint64_t destroy for BindKeyboardShortcutItems(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy132_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindKeyboardShortcutItems(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 132))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BindKeyboardShortcutItems(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 132) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 132) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardShortcutBindingsKey()
{
  return &type metadata for KeyboardShortcutBindingsKey;
}

void base witness table accessor for _AttributeBody in BindKeyboardShortcutItems<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined retain of BindKeyboardShortcutItems<A>(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

void type metadata accessor for (Toolbar.UpdateContext?, Toolbar.UpdateContext?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Toolbar.UpdateContext?, Toolbar.UpdateContext?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.UpdateContext?, Toolbar.UpdateContext?));
  }
}

void type metadata accessor for (UIListContentConfiguration?, UIListContentConfiguration?)(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

ValueMetadata *type metadata accessor for TabCustomizationID()
{
  return &type metadata for TabCustomizationID;
}

uint64_t TabCustomizationID.Base.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;

  v28 = a3;
  v29 = a4;
  v27 = a2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1E1ACBBA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v22 - v8;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1E1ACBB18, v5);
  v11 = v10;
  v23 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v22 - v13;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys, (uint64_t)&unk_1E1ACBA88, v5);
  v16 = v15;
  v26 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v22 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v29 & 1) != 0)
  {
    v31 = 1;
    lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v20 = v25;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v20);
  }
  else
  {
    v30 = 0;
    lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v19, v16);
}

uint64_t TabCustomizationID.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  HIDWORD(v14) = a4;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys, (uint64_t)&unk_1E1ACB9F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v14 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = a2;
  v16 = a3;
  v17 = BYTE4(v14) & 1;
  lazy protocol witness table accessor for type TabCustomizationID.Base and conformance TabCustomizationID.Base();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.Base.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.Base.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.Base.ExplicitCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.Base.ExplicitCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.Base.TransientCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.Base.TransientCodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabCustomizationID.Base@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = specialized TabCustomizationID.Base.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationID.Base(_QWORD *a1)
{
  uint64_t v1;

  return TabCustomizationID.Base.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TabCustomizationID.Base()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TabCustomizationID.Base()
{
  uint64_t v0;

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TabCustomizationID.Base()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static TabCustomizationID.Base.== infix(_:_:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.CodingKeys()
{
  lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance TabCustomizationID@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = specialized TabCustomizationID.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationID(_QWORD *a1)
{
  uint64_t v1;

  return TabCustomizationID.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static TabCustomizationID.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

unint64_t TabCustomizationID.description.getter(uint64_t a1, void *a2, char a3)
{
  Swift::String v5;
  unint64_t v7;

  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v7 = 0xD000000000000022;
  }
  else
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v7 = 0xD000000000000021;
  }
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return v7;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID()
{
  uint64_t v0;

  return TabCustomizationID.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.CodingKeys, &unk_1E1ACB9F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.CodingKeys, &unk_1E1ACB9F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.CodingKeys, &unk_1E1ACB9F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.CodingKeys, &unk_1E1ACB9F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base and conformance TabCustomizationID.Base()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base, &type metadata for TabCustomizationID.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base, &type metadata for TabCustomizationID.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base, &type metadata for TabCustomizationID.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base);
  }
  return result;
}

uint64_t specialized static TabCustomizationID.Base.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL specialized static TabCustomizationID.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
    if (a1 == a4 && a2 == a5)
      return 1;
  }
  else
  {
    if ((a6 & 1) != 0)
      return 0;
    if (a1 == a4 && a2 == a5)
      return 1;
  }
  return (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
}

uint64_t specialized TabCustomizationID.Base.init(from:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1E1ACBBA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v38 = v3;
  v36 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v37 = (char *)&v32 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1E1ACBB18, v2);
  v7 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  v35 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v32 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys, (uint64_t)&unk_1E1ACBA88, v2);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v32 - v15;
  v17 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();
  v18 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
    goto LABEL_7;
  v19 = v10;
  v20 = v37;
  v21 = v38;
  v39 = v13;
  v33 = a1;
  v22 = KeyedDecodingContainer.allKeys.getter();
  v23 = v12;
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v27 = type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v29 = &type metadata for TabCustomizationID.Base;
    v17 = (uint64_t)v16;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC450], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v12);
    a1 = v33;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v17;
  }
  if ((*(_BYTE *)(v22 + 32) & 1) != 0)
  {
    LODWORD(v35) = *(unsigned __int8 *)(v22 + 32);
    v41 = 1;
    lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v24 = v20;
    v25 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = v39;
    v17 = v25;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v21);
  }
  else
  {
    v40 = 0;
    lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v30 = v34;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = v39;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v30);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  return v17;
}

_QWORD *specialized TabCustomizationID.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys, (uint64_t)&unk_1E1ACB9F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();
  v10 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type TabCustomizationID.Base and conformance TabCustomizationID.Base();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = (_QWORD *)v12[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v10;
}

void *type metadata accessor for TabCustomizationID.CodingKeys()
{
  return &unk_1E1ACB9F8;
}

ValueMetadata *type metadata accessor for TabCustomizationID.Base()
{
  return &type metadata for TabCustomizationID.Base;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.TransientCodingKeys, &unk_1E1ACBBA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.TransientCodingKeys, &unk_1E1ACBBA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.TransientCodingKeys, &unk_1E1ACBBA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.TransientCodingKeys, &unk_1E1ACBBA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.ExplicitCodingKeys, &unk_1E1ACBB18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.ExplicitCodingKeys, &unk_1E1ACBB18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.ExplicitCodingKeys, &unk_1E1ACBB18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.ExplicitCodingKeys, &unk_1E1ACBB18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.CodingKeys, &unk_1E1ACBA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.CodingKeys, &unk_1E1ACBA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.CodingKeys, &unk_1E1ACBA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationID.Base.CodingKeys, &unk_1E1ACBA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TabCustomizationID.Base.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A2C0D0 + 4 * byte_187C7DB95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A2C104 + 4 * byte_187C7DB90[v4]))();
}

uint64_t sub_187A2C104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A2C10C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A2C114);
  return result;
}

uint64_t sub_187A2C120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A2C128);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A2C12C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A2C134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TabCustomizationID.Base.CodingKeys()
{
  return &unk_1E1ACBA88;
}

void *type metadata accessor for TabCustomizationID.Base.ExplicitCodingKeys()
{
  return &unk_1E1ACBB18;
}

uint64_t storeEnumTagSinglePayload for TabCustomizationID.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_187A2C1A0 + 4 * byte_187C7DB9A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_187A2C1C0 + 4 * byte_187C7DB9F[v4]))();
}

_BYTE *sub_187A2C1A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_187A2C1C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187A2C1C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187A2C1D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187A2C1D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187A2C1E0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TabCustomizationID.Base.TransientCodingKeys()
{
  return &unk_1E1ACBBA8;
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v7);
    v4 = v8;
    v5 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v10, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(0);
  if (swift_dynamicCast())
    return v7[0];
  else
    return 0;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return v8[0];
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = static AccessibilityProperties.ActionsKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)&v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(&v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  v6 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))v6);
  if (swift_dynamicCast())
    return v8;
  else
    return 0;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v7);
    v4 = v8;
    v5 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v10, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AccessibilityRotorInfo], (uint64_t)&type metadata for AccessibilityRotorInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return v7[0];
  else
    return MEMORY[0x1E0DEE9D8];
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ImagesKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [Image], MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return v8[0];
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = static AccessibilityProperties.ImagesKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, MEMORY[0x1E0CE5740], (void (*)(_QWORD))type metadata accessor for [Text]?);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 16) && (v2 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE57B0]), (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)&v9);
    v4 = v10;
    v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v12, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  v6 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Text?, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))v6);
  v7 = swift_dynamicCast();
  result = 0;
  if (v7)
    return v9;
  return result;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 16) && (v2 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5750]), (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)&v10);
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v13, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  v6 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Double?, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))v6);
  v7 = swift_dynamicCast();
  v8 = v10;
  if (!v7)
    return 0;
  return v8;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(_QWORD *)(a1 + 16) && (v2 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE57E0]), (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    v4 = v9;
    v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  v6 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, MEMORY[0x1E0CE5D88], (uint64_t (*)(_QWORD, uint64_t))v6);
  if (swift_dynamicCast())
    return LOBYTE(v8[0]);
  else
    return 7;
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, MEMORY[0x1E0CE5790], type metadata accessor for AccessibilityChartDescriptorStorage?);
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  _BYTE v10[128];
  _BYTE v11[128];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(_QWORD, uint64_t))v8);
  if (swift_dynamicCast())
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v12);
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTextLayoutProperties??);
    outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTextLayoutProperties??);
  }
  else
  {
    _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOi0_((uint64_t)v11);
  }
  return outlined init with take of Image.Resolved?((uint64_t)v11, a2, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
}

{
  unint64_t v4;
  char v5;
  __int128 v6;
  _QWORD v8[3];
  __int128 v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v8);
    v6 = v9;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD))(*((_QWORD *)&v6 + 1) + 8))(v10, v6, *((_QWORD *)&v6 + 1));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  if (swift_dynamicCast())
    return outlined init with take of ScrollableCollection?((uint64_t)v8, a2);
  memset(v8, 0, sizeof(v8));
  v9 = xmmword_187BFE310;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  return outlined destroy of ScrollableCollection??((uint64_t)v8);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;
  char v16;
  _OWORD v17[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    v6 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v17, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))v8);
  if (swift_dynamicCast())
    return outlined init with take of Image.Resolved?((uint64_t)&v10, a2, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v15 = 0;
  v14 = 0;
  v16 = -2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_WORD *)(a2 + 68) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 70) = -1;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityScrollableContext??);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    v6 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))v8);
  if (swift_dynamicCast())
    return outlined init with take of Image.Resolved?((uint64_t)&v10, a2, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v13 = -2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = -1;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTableContext??);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v12);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(&v12, v14);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v12;
  v11 = v13;
  if (!(_DWORD)result)
  {
    v10 = 0;
    v11 = 0;
  }
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v11;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5710]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v13);
    v6 = v15;
    v7 = v16;
    __swift_project_boxed_opaque_existential_1(v13, v15);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v17, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E0CE64B0], (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v13[0];
  v11 = v13[1];
  v12 = v14;
  if (!(_DWORD)result)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  _BYTE v10[312];
  _BYTE v11[312];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5810]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800], (uint64_t (*)(_QWORD, uint64_t))v8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v12);
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityDataSeriesConfiguration??);
    outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityDataSeriesConfiguration??);
  }
  else
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v11);
  }
  return outlined init with take of Image.Resolved?((uint64_t)v11, a2, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19[-1] - v6;
  if (*(_QWORD *)(a1 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE57A0]), (v9 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v8, (uint64_t)v19);
    v10 = v20;
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v11 + 8))(v22, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for LinkDestination.Configuration?(0);
  v13 = v12;
  v14 = swift_dynamicCast();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  if ((v14 & 1) != 0)
  {
    v15(v7, 0, 1, v13);
    return outlined init with take of TableCellFormula((uint64_t)v7, a2, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
  }
  else
  {
    v15(v7, 1, 1, v13);
    v17 = type metadata accessor for LinkDestination.Configuration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
    return outlined destroy of TaskPriority?((uint64_t)v7, &lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTouchInfo?, (uint64_t)&type metadata for AccessibilityTouchInfo, (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v12[0];
  v11 = v12[1];
  if (!(_DWORD)result)
  {
    v10 = 2;
    v11 = 0;
  }
  *a2 = v10;
  a2[1] = v11;
  return result;
}

int8x16_t specialized AccessibilityProperties.subscript.getter@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  int v9;
  char v10;
  __int32 v11;
  unint64_t v12;
  int8x16_t result;
  int8x16_t v14;
  __int32 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];

  if (*(_QWORD *)(a1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TemporalState),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v14);
    v6 = v17;
    v7 = v18;
    __swift_project_boxed_opaque_existential_1(&v14, v17);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v19, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E0CE0CF0], (uint64_t (*)(_QWORD, uint64_t))v8);
  v9 = swift_dynamicCast();
  v10 = v16;
  v11 = v15;
  if (v9)
  {
    v12 = -1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  result = vandq_s8(v14, (int8x16_t)vdupq_n_s64(v12));
  *a2 = result;
  a2[1].i32[0] = v11;
  a2[1].i8[4] = v10 & 1 | ((v9 & 1) == 0);
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  int v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t result;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  _OWORD v18[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5788]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v15);
    v6 = v16.i64[1];
    v7 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, v16.i64[1]);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v18, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E0CE67B0], (uint64_t (*)(_QWORD, uint64_t))v8);
  v9 = swift_dynamicCast();
  v10 = v17;
  if (v9)
    v11 = -1;
  else
    v11 = 0;
  v12 = (int8x16_t)vdupq_n_s64(v11);
  if (!v9)
    v10 = 0;
  result = vandq_s8(v15, v12);
  v14 = vandq_s8(v16, v12);
  *a2 = result;
  a2[1] = v14;
  a2[2].i64[0] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5728]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v9);
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v13, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = v9;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    return static AccessibilityProperties.VisibilityKey.defaultValue.getter();
  }
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE57D0]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityCustomAttributes?, MEMORY[0x1E0CE6410], (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v11[0];
  if (!(_DWORD)result)
    v10 = 0;
  *a2 = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE58B8]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v9);
    v6 = v11;
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v13, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    *a2 = v9;
  }
  else
  {
    v9 = 0uLL;
    v10 = 1;
    return static AccessibilityProperties.TraitsKey.defaultValue.getter();
  }
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE58A0]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    v6 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t (*)(_QWORD, uint64_t))v8);
  if ((swift_dynamicCast() & 1) != 0)
    return outlined init with take of Image.Resolved?((uint64_t)&v10, (uint64_t)a2, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = 1;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityValueStorage??);
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[5];
  _OWORD v9[6];
  _OWORD v10[2];
  _BYTE v11[128];
  _BYTE v12[128];
  _BYTE v13[136];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v11, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  outlined init with take of Image.Resolved?(a1, (uint64_t)v12, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v12) == 1)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey, (uint64_t)v9);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>();
    v8[3] = v3;
    v8[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>);
    v4 = (_OWORD *)swift_allocObject();
    v8[0] = v4;
    outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v9, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
    v5 = v9[5];
    v4[5] = v9[4];
    v4[6] = v5;
    v4[7] = v10[0];
    *(_OWORD *)((char *)v4 + 121) = *(_OWORD *)((char *)v10 + 9);
    v6 = v9[1];
    v4[1] = v9[0];
    v4[2] = v6;
    v7 = v9[3];
    v4[3] = v9[2];
    v4[4] = v7;
    return specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
  }
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  _QWORD v6[5];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = static AccessibilityProperties.ActionsKey.defaultValue;
  swift_bridgeObjectRetain();
  v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>();
    v6[3] = v5;
    v6[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>);
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  outlined init with copy of TableRowList?(a1, (uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for IntelligenceAppIntentsPayloadProviding?);
  if (v9)
  {
    v2 = MEMORY[0x1E0CE4E20];
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<ScrollableCollection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v9 = v3;
    v10 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>();
    v8[0] = swift_allocObject();
    outlined init with copy of TableRowList?(a1, v8[0] + 16, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, v2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for IntelligenceAppIntentsPayloadProviding?);
    specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
    v4 = (_QWORD *)a1;
    v5 = &lazy cache variable for type metadata for ScrollableCollection?;
    v6 = &lazy cache variable for type metadata for ScrollableCollection;
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey, (uint64_t)v8);
    outlined destroy of LocationBasedSensoryFeedback?(a1, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    v5 = &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?;
    v6 = &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry;
    v4 = v8;
  }
  return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)v5, (unint64_t *)v6);
}

{
  uint64_t v3;
  _QWORD v4[8];
  unsigned __int8 v5;

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  if (v5 == 255)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey, (uint64_t)v4);
    outlined destroy of AccessibilityTableContext?(a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
    v4[3] = v3;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
    v4[0] = swift_allocObject();
    outlined init with copy of SwiftUIAnySortComparator?(a1, v4[0] + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
    return outlined destroy of AccessibilityTableContext?(a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
}

{
  uint64_t v2;
  _QWORD v4[5];

  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>();
    v4[3] = v2;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AccessibilityRotorInfo]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey, (uint64_t)v4);
    swift_bridgeObjectRelease();
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  _QWORD v6[5];

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = static AccessibilityProperties.ImagesKey.defaultValue;
  swift_bridgeObjectRetain();
  v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ImagesKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[Image]>();
    v6[3] = v5;
    v6[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Image]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[Image]>);
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.ImagesKey);
  }
}

{
  uint64_t v2;
  _QWORD v4[5];
  unsigned __int8 v5;

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v4, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v5 == 255)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey, (uint64_t)v4);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v4, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>();
    v4[3] = v2;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>);
    v4[0] = swift_allocObject();
    outlined init with copy of SwiftUIAnySortComparator?(a1, v4[0] + 16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.TableContextKey);
    return outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v5, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
  if (v5[5])
  {
    v2 = MEMORY[0x1E0CE5E40];
    outlined destroy of AccessibilityTableContext?((uint64_t)v5, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityValueStorage?>();
    v5[3] = v3;
    v5[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityValueStorage?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityValueStorage?>);
    v5[0] = swift_allocObject();
    outlined init with copy of SwiftUIAnySortComparator?(a1, v5[0] + 16, &lazy cache variable for type metadata for AccessibilityValueStorage?, v2);
    specialized Dictionary.subscript.setter((uint64_t)v5, MEMORY[0x1E0CE58A0]);
    return outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v2);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE58A0], (uint64_t)v5);
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, MEMORY[0x1E0CE5740], &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];
  _QWORD v12[5];
  _BYTE v13[24];
  uint64_t v14;

  v2 = MEMORY[0x1E0CE67B0];
  outlined init with take of Image.Resolved?(a1, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E0CE67B0]);
  v3 = v12[0];
  v4 = v12[1];
  v5 = v12[2];
  v6 = v12[3];
  v7 = v12[4];
  outlined init with take of Image.Resolved?(a1, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, v2);
  if (v14)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>();
    v11[3] = v8;
    v11[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>);
    v9 = (_QWORD *)swift_allocObject();
    v11[0] = v9;
    v9[2] = v3;
    v9[3] = v4;
    v9[4] = v5;
    v9[5] = v6;
    v9[6] = v7;
    return specialized Dictionary.subscript.setter((uint64_t)v11, MEMORY[0x1E0CE5788]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5788], (uint64_t)v11);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  uint64_t v2;
  _QWORD v4[5];

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>();
    v4[3] = v2;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityCustomAttributes?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E0CE57D0]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE57D0], (uint64_t)v4);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  _BYTE __src[312];
  _BYTE v9[312];
  _BYTE v10[312];
  _BYTE v11[320];

  v2 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?(a1, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v2);
  outlined init with take of Image.Resolved?(a1, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v2);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v10) == 1)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5810], (uint64_t)__src);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>();
    v7[3] = v4;
    v7[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>);
    v5 = swift_allocObject();
    v6 = (void *)(v5 + 16);
    v7[0] = v5;
    outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
    memcpy(v6, __src, 0x138uLL);
    return specialized Dictionary.subscript.setter((uint64_t)v7, MEMORY[0x1E0CE5810]);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12[5];

  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v12[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, v6);
  v7 = type metadata accessor for LinkDestination.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE57A0], (uint64_t)v12);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v12[3] = v9;
    v12[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<LinkDestination.Configuration?> and conformance AccessibilityPropertiesEntry<A>, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
    specialized Dictionary.subscript.setter((uint64_t)v12, MEMORY[0x1E0CE57A0]);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD v6[5];

  if (a1 == 2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, (uint64_t)v6);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>();
    v6[3] = v5;
    v6[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTouchInfo?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>);
    v6[0] = a1;
    v6[1] = a2;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey);
  }
}

{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  static AccessibilityProperties.TraitsKey.defaultValue.getter();
  if (v7 == a1 && v8 == a2)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE58B8], (uint64_t)&v7);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v9 = v5;
    v10 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    v7 = a1;
    v8 = a2;
    return specialized Dictionary.subscript.setter((uint64_t)&v7, MEMORY[0x1E0CE58B8]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  _QWORD v7[2];
  char v8;
  uint64_t v9;
  uint64_t v10;

  if ((a3 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v7);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>();
    v9 = v5;
    v10 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityUIKitTraits?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>);
    v7[0] = a1;
    v7[1] = a2;
    v8 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey);
  }
}

{
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>();
    v10 = v6;
    v11 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>);
    v8[0] = a1;
    v8[1] = a2;
    v9 = a3;
    return specialized Dictionary.subscript.setter((uint64_t)v8, MEMORY[0x1E0CE5710]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5710], (uint64_t)v8);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if ((a3 & 0x100000000) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TemporalState, (uint64_t)v8);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    v3 = a3;
    type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>();
    v11 = v6;
    v12 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>);
    v8[0] = a1;
    v8[1] = a2;
    v9 = v3;
    v10 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.TemporalState);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(unint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v2 = HIDWORD(a1);
  static AccessibilityProperties.VisibilityKey.defaultValue.getter();
  if (v6 == v1 && v7 == (_DWORD)v2)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5728], (uint64_t)&v6);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v8 = v4;
    v9 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v6 = v1;
    v7 = v2;
    return specialized Dictionary.subscript.setter((uint64_t)&v6, MEMORY[0x1E0CE5728]);
  }
}

BOOL AccessibilityProperties.merge(with:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int32 v23;
  __int32 v24;
  void (*v25)(int8x16_t *, _QWORD);
  __int32 *v26;
  __int32 v27;
  int8x16_t v28;
  void (*v29)(int8x16_t *, _QWORD);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(unsigned __int128 *, _QWORD);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (*v169)(uint64_t);
  int v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  int v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  unsigned __int128 v187;
  unsigned int v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  _BYTE v194[72];
  int8x16_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;
  int8x16_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int8x16_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[5];
  _BYTE v208[136];

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v180 - v10;
  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v21 = *a1;
  v22 = *(_QWORD *)(*a1 + 16);
  if (!v22)
    return v22 != 0;
  v184 = (uint64_t)&v180 - v18;
  v185 = v11;
  v180 = v20;
  v181 = v19;
  v182 = v7;
  v186 = v22;
  v203.i64[0] = v21;
  AccessibilityProperties.visibility.getter();
  v23 = v199.i32[0];
  v24 = v199.i32[1];
  v25 = (void (*)(int8x16_t *, _QWORD))AccessibilityProperties.visibility.modify();
  v27 = v26[1];
  *v26 = *v26 & (v27 | ~v24) | v23 & ~v27;
  v26[1] = v27 | v24;
  v25(&v203, 0);
  v203.i64[0] = v21;
  AccessibilityProperties.traits.getter();
  v28 = v199;
  v29 = (void (*)(int8x16_t *, _QWORD))AccessibilityProperties.traits.modify();
  v31 = v30[1];
  *v30 = *v30 & (v31 | ~v28.i64[1]) | v28.i64[0] & ~v31;
  v30[1] = v31 | v28.i64[1];
  v29(&v203, 0);
  v32 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v32, (uint64_t)&v203);
  swift_bridgeObjectRelease();
  v33 = v203.i64[0];
  swift_bridgeObjectRelease();
  if (!v33)
  {
    v39 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v39, (uint64_t)&v195);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v195.i64[0], v195.i8[8]);
    goto LABEL_13;
  }
  v34 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v34, (uint64_t)&v203);
  swift_bridgeObjectRelease();
  v35 = v203.i64[0];
  v36 = v203.i8[8];
  v37 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v37, (uint64_t)&v199);
  swift_bridgeObjectRelease();
  if (!v199.i64[0])
  {
    if (v35)
    {
      specialized AccessibilityProperties.subscript.setter(v35, v36);
      goto LABEL_10;
    }
LABEL_11:
    specialized AccessibilityProperties.subscript.setter(v199.i64[0], v199.i8[8]);
    goto LABEL_12;
  }
  if (!v35)
    goto LABEL_11;
  v195.i64[0] = v199.i64[0];
  v195.i8[8] = v199.i8[8];
  *(_QWORD *)&v187 = v35;
  BYTE8(v187) = v36;
  v38 = AccessibilityLabelStorage.merge(with:)();
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.setter(v195.i64[0], v195.i8[8]);
  if ((v38 & 1) != 0)
  {
LABEL_10:
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey, (uint64_t)&v203);
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v203, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    goto LABEL_15;
  }
LABEL_12:
  v40 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v40, (uint64_t)&v203);
  swift_bridgeObjectRelease();
  v41 = v203.i64[0];
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_13:
    v42 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v42, (uint64_t)&v195);
    swift_bridgeObjectRelease();
    outlined init with take of Image.Resolved?((uint64_t)&v195, (uint64_t)&v199, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
    outlined release of AccessibilityTextLayoutProperties?(v199.i64);
    outlined init with take of Image.Resolved?((uint64_t)&v199, (uint64_t)&v203, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
    if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)&v203) == 1)
    {
      v43 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v43, (uint64_t)&v195);
      swift_bridgeObjectRelease();
      outlined init with take of Image.Resolved?((uint64_t)&v195, (uint64_t)v208, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
      specialized AccessibilityProperties.subscript.setter((uint64_t)v208);
    }
  }
LABEL_15:
  v44 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v44, &v203);
  swift_bridgeObjectRelease();
  v45 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v45, &v199);
  swift_bridgeObjectRelease();
  specialized Optional<A>.merge(with:)((uint64_t)&v203);
  v46 = MEMORY[0x1E0CE5E40];
  outlined destroy of AccessibilityTableContext?((uint64_t)&v203, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v199, (uint64_t)&v195, &lazy cache variable for type metadata for AccessibilityValueStorage?, v46);
  specialized AccessibilityProperties.subscript.setter((uint64_t)&v195);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v199, &lazy cache variable for type metadata for AccessibilityValueStorage?, v46);
  v203.i64[0] = *v2;
  v47 = *(_QWORD *)(AccessibilityProperties.hints.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v47)
  {
    v203.i64[0] = v21;
    v48 = AccessibilityProperties.hints.getter();
    MEMORY[0x18D75A2A0](v48);
  }
  v49 = swift_bridgeObjectRetain();
  v50 = specialized AccessibilityProperties.subscript.getter(v49);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  swift_bridgeObjectRelease();
  outlined consume of Text?(v50, v52, v54, v56);
  if (!v56)
  {
    v57 = swift_bridgeObjectRetain();
    v58 = specialized AccessibilityProperties.subscript.getter(v57);
    v60 = v59;
    v62 = v61;
    v64 = v63;
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v58, v60, v62, v64);
  }
  v65 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v65, &v203);
  swift_bridgeObjectRelease();
  v66 = v203;
  v67 = v204;
  v68 = v205;
  v69 = v206;
  v70 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v70, &v199);
  swift_bridgeObjectRelease();
  v72 = v199.i64[1];
  v71 = v199.i64[0];
  v73 = v200;
  v74 = v202;
  if (v201)
  {
    if (v68)
    {
      v195 = v199;
      v196 = v200;
      v197 = v201;
      v198 = v202;
      v187 = (unsigned __int128)v66;
      LOBYTE(v188) = v67;
      v190 = v68;
      v191 = v69;
      AccessibilityActivationPointStorage.merge(with:)();
      outlined consume of AccessibilityActivationPointStorage?(v66.i64[0], v66.i64[1], v67, v68);
      v72 = v195.i64[1];
      v71 = v195.i64[0];
      v73 = v196;
      v68 = v197;
      v74 = v198;
    }
    else
    {
      v68 = v201;
    }
  }
  else if (v68)
  {
    v72 = v66.i64[1];
    v71 = v66.i64[0];
    v73 = v67;
    v74 = v69;
  }
  v207[0] = v71;
  v207[1] = v72;
  v207[2] = v73;
  v207[3] = v68;
  v207[4] = v74;
  specialized AccessibilityProperties.subscript.setter((uint64_t)v207);
  v75 = swift_bridgeObjectRetain();
  v76 = specialized AccessibilityProperties.subscript.getter(v75, MEMORY[0x1E0CE5740], (void (*)(_QWORD))type metadata accessor for [Text]?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v76)
  {
    v77 = swift_bridgeObjectRetain();
    v78 = MEMORY[0x1E0CE5740];
    v79 = specialized AccessibilityProperties.subscript.getter(v77, MEMORY[0x1E0CE5740], (void (*)(_QWORD))type metadata accessor for [Text]?);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v79, v78, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>);
  }
  v80 = swift_bridgeObjectRetain();
  v81 = specialized AccessibilityProperties.subscript.getter(v80);
  swift_bridgeObjectRelease();
  v82 = swift_bridgeObjectRetain();
  v83 = specialized AccessibilityProperties.subscript.getter(v82);
  swift_bridgeObjectRelease();
  v203.i64[0] = v83;
  specialized Array.append<A>(contentsOf:)(v81);
  specialized AccessibilityProperties.subscript.setter(v203.i64[0]);
  v84 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v84, &v203);
  swift_bridgeObjectRelease();
  v85 = v203.i64[0];
  v86 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v86, &v199);
  swift_bridgeObjectRelease();
  if (v199.i64[0])
  {
    if (v85)
    {
      v195.i64[0] = v199.i64[0];
      *(_QWORD *)&v187 = v85;
      AccessibilityCustomAttributes.merge(with:)();
      swift_bridgeObjectRelease();
      v85 = v195.i64[0];
    }
    else
    {
      v85 = v199.i64[0];
    }
  }
  specialized AccessibilityProperties.subscript.setter(v85);
  v87 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v87, (uint64_t)&v203);
  swift_bridgeObjectRelease();
  v89 = v203.i64[1];
  v88 = v203.i64[0];
  v90 = v204;
  v91 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v91, (uint64_t)&v199);
  swift_bridgeObjectRelease();
  v92 = v199.i64[0];
  v93 = v200;
  if (v199.i64[1])
  {
    if (v89)
    {
      v195 = v199;
      v196 = v200;
      v187 = __PAIR128__(v89, v88);
      LOBYTE(v188) = v90;
      AccessibilityIdentifierStorage.merge(with:)();
      swift_bridgeObjectRelease();
      v89 = v195.i64[1];
      v92 = v195.i64[0];
      v93 = v196;
    }
    else
    {
      v89 = v199.i64[1];
    }
  }
  else if (v89)
  {
    v92 = v88;
    v93 = v90;
  }
  specialized AccessibilityProperties.subscript.setter(v92, v89, v93);
  v94 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v94);
  v96 = v95;
  swift_bridgeObjectRelease();
  if ((v96 & 1) != 0)
  {
    v97 = swift_bridgeObjectRetain();
    v98 = specialized AccessibilityProperties.subscript.getter(v97);
    v100 = v99;
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v98, v100 & 1);
  }
  v203.i64[0] = *v2;
  AccessibilityProperties.explicitAutomationType.getter();
  if ((v101 & 1) != 0)
  {
    v203.i64[0] = v21;
    AccessibilityProperties.explicitAutomationType.getter();
    AccessibilityProperties.explicitAutomationType.setter();
  }
  v102 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v102, (uint64_t)&v203);
  swift_bridgeObjectRelease();
  v103 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)&v203, (uint64_t)&v195, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)&v195);
  outlined init with take of Image.Resolved?((uint64_t)&v195, (uint64_t)&v199, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v103);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v199) == 1)
  {
    v104 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v104, (uint64_t)&v187);
    swift_bridgeObjectRelease();
    outlined init with take of Image.Resolved?((uint64_t)&v187, (uint64_t)&v203, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v203);
  }
  v105 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v105, (uint64_t)&v187);
  swift_bridgeObjectRelease();
  v106 = v190;
  outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v187, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  if (!v106)
  {
    v107 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v107, (uint64_t)&v187);
    swift_bridgeObjectRelease();
    outlined init with copy of TableRowList?((uint64_t)&v187, (uint64_t)v194, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for IntelligenceAppIntentsPayloadProviding?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v194);
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v187, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  }
  v108 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v108, (uint64_t)&v187);
  swift_bridgeObjectRelease();
  v109 = v193;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v187, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  if (v109 >= 0xFF)
  {
    v110 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v110, (uint64_t)&v187);
    swift_bridgeObjectRelease();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v187, (uint64_t)v194, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v194);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v187, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
  v111 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v111, (uint64_t *)&v187);
  swift_bridgeObjectRelease();
  if (v187 == 2)
  {
    v112 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v112, (uint64_t *)&v187);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v187, *((uint64_t *)&v187 + 1));
  }
  v113 = swift_bridgeObjectRetain();
  v114 = specialized AccessibilityProperties.subscript.getter(v113);
  v116 = v115;
  v118 = v117;
  swift_bridgeObjectRelease();
  v183 = v118 & 1;
  v119 = swift_bridgeObjectRetain();
  v120 = specialized AccessibilityProperties.subscript.getter(v119);
  v122 = v121;
  v123 = v21;
  v124 = v2;
  v126 = v125;
  swift_bridgeObjectRelease();
  if ((v118 & 1) != 0)
    v127 = v120;
  else
    v127 = v114;
  if ((v118 & 1) != 0)
    v128 = v122;
  else
    v128 = v116;
  v129 = (v122 | v116) & ~v120;
  v130 = (v120 | v114) & ~v129;
  if ((v118 & 1) != 0)
  {
    v130 = v120;
    v129 = v122;
  }
  v131 = v124;
  v132 = v123;
  if ((v126 & 1) != 0)
    v133 = v127;
  else
    v133 = v130;
  if ((v126 & 1) != 0)
    v134 = v128;
  else
    v134 = v129;
  if ((v126 & 1) != 0)
    v135 = v183;
  else
    v135 = 0;
  specialized AccessibilityProperties.subscript.setter(v133, v134, v135);
  v136 = swift_bridgeObjectRetain();
  v137 = v184;
  specialized AccessibilityProperties.subscript.getter(v136, v184);
  swift_bridgeObjectRelease();
  v138 = type metadata accessor for LinkDestination.Configuration();
  v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 48))(v137, 1, v138);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v137, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
  if (v139 == 1)
  {
    v140 = swift_bridgeObjectRetain();
    v141 = v180;
    specialized AccessibilityProperties.subscript.getter(v140, v180);
    swift_bridgeObjectRelease();
    v142 = v181;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v141, v181, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
    specialized AccessibilityProperties.subscript.setter(v142);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v141, (uint64_t (*)(_QWORD))type metadata accessor for LinkDestination.Configuration?);
  }
  *(_QWORD *)&v187 = v132;
  v143 = AccessibilityProperties.customContentList.getter();
  v144 = (void (*)(unsigned __int128 *, _QWORD))AccessibilityProperties.customContentList.modify();
  specialized Array.append<A>(contentsOf:)(v143);
  v144(&v187, 0);
  v145 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v145, (char *)&v187);
  swift_bridgeObjectRelease();
  if (v187 == 8)
  {
    v146 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v146, (char *)&v187);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v187);
  }
  v147 = swift_bridgeObjectRetain();
  v148 = specialized AccessibilityProperties.subscript.getter(v147);
  swift_bridgeObjectRelease();
  if (v148 == 7)
  {
    v149 = swift_bridgeObjectRetain();
    v150 = specialized AccessibilityProperties.subscript.getter(v149);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v150);
  }
  v151 = swift_bridgeObjectRetain();
  v152 = specialized AccessibilityProperties.subscript.getter(v151);
  swift_bridgeObjectRelease();
  v153 = swift_bridgeObjectRetain();
  v154 = specialized AccessibilityProperties.subscript.getter(v153);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v187 = v154;
  specialized Array.append<A>(contentsOf:)(v152);
  specialized AccessibilityProperties.subscript.setter(v187);
  v155 = swift_bridgeObjectRetain();
  v156 = specialized AccessibilityProperties.subscript.getter(v155);
  swift_bridgeObjectRelease();
  v157 = swift_bridgeObjectRetain();
  v158 = specialized AccessibilityProperties.subscript.getter(v157);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v187 = v158;
  specialized Array.append<A>(contentsOf:)(v156);
  specialized AccessibilityProperties.subscript.setter(v187);
  v159 = swift_bridgeObjectRetain();
  v160 = specialized AccessibilityProperties.subscript.getter(v159, MEMORY[0x1E0CE5790], type metadata accessor for AccessibilityChartDescriptorStorage?);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v160)
  {
    v161 = swift_bridgeObjectRetain();
    v162 = MEMORY[0x1E0CE5790];
    v163 = specialized AccessibilityProperties.subscript.getter(v161, MEMORY[0x1E0CE5790], type metadata accessor for AccessibilityChartDescriptorStorage?);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v163, v162, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  v164 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v164, (uint64_t)&v187);
  swift_bridgeObjectRelease();
  v165 = v192;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v187, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v165 == 255)
  {
    v166 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v166, (uint64_t)&v187);
    swift_bridgeObjectRelease();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v187, (uint64_t)v194, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v194);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v187, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
  *(_QWORD *)&v187 = *v131;
  v167 = (uint64_t)v185;
  AccessibilityProperties.locale.getter();
  v168 = type metadata accessor for Locale();
  v169 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
  v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 48))(v167, 1, v168);
  outlined destroy of TaskPriority?(v167, &lazy cache variable for type metadata for Locale?, v169);
  if (v170 == 1)
  {
    *(_QWORD *)&v187 = v132;
    AccessibilityProperties.locale.getter();
    AccessibilityProperties.locale.setter();
  }
  v171 = swift_bridgeObjectRetain();
  v172 = (void *)specialized AccessibilityProperties.subscript.getter(v171);
  swift_bridgeObjectRelease();

  if (!v172)
  {
    v173 = swift_bridgeObjectRetain();
    v174 = specialized AccessibilityProperties.subscript.getter(v173);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v174, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>);
  }
  v175 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v175, (char *)&v187);
  swift_bridgeObjectRelease();
  if (v187 == 2)
  {
    v176 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v176, (char *)&v187);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v187);
  }
  v177 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v177, (int8x16_t *)&v187);
  swift_bridgeObjectRelease();
  if (v189 == 1)
  {
    v178 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v178, (int8x16_t *)&v187);
    swift_bridgeObjectRelease();
    v194[0] = v189;
    specialized AccessibilityProperties.subscript.setter(v187, *((uint64_t *)&v187 + 1), v188 | ((unint64_t)v189 << 32));
  }
  v22 = v186;
  return v22 != 0;
}

BOOL AccessibilityAttachment.merge(with:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v8 = *a1;
  v4 = AccessibilityProperties.merge(with:)(&v8);
  v5 = v1[1];
  v8 = *v1;
  v9 = v5;
  v6 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v6)
  {
    v8 = v2;
    v9 = v3;
    if (AccessibilityAttachment.platformElement.getter())
    {
      AccessibilityAttachment.platformElement.setter();
      return 1;
    }
  }
  return v4;
}

uint64_t static AccessibilityAttachment.combine(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  id v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v4 = a1[2];
  v5 = v4 - 1;
  if (v4 == 1)
  {
    v7 = (void *)a1[5];
    *a2 = a1[4];
    a2[1] = (uint64_t)v7;
    v8 = v7;
    return swift_bridgeObjectRetain();
  }
  else if (v4)
  {
    v9 = &a1[2 * v5];
    v10 = (void *)v9[5];
    v21 = v9[4];
    v22 = v10;
    swift_bridgeObjectRetain();
    v11 = v10;
    result = swift_bridgeObjectRetain();
    v12 = (void **)&a1[2 * v4 + 1];
    v13 = v4 - 2;
    while (v13 < v5)
    {
      v14 = (uint64_t)*(v12 - 1);
      v15 = *v12;
      v19 = v14;
      v16 = v15;
      swift_bridgeObjectRetain();
      AccessibilityProperties.merge(with:)(&v19);
      v19 = v21;
      v20 = v22;
      v17 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v17)
      {
        v19 = v14;
        v20 = v15;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }

      result = swift_bridgeObjectRelease();
      v12 -= 2;
      if (--v13 == -1)
      {
        result = swift_bridgeObjectRelease();
        v18 = (uint64_t)v22;
        *a2 = v21;
        a2[1] = v18;
        return result;
      }
    }
    __break(1u);
  }
  else
  {
    return AccessibilityAttachment.init()();
  }
  return result;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.ActionsKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static AccessibilityProperties.ActionsKey.defaultValue, a1);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(a1, a2, a3, &one-time initialization token for defaultValue, &static AccessibilityProperties.ActionsKey.defaultValue, specialized static Array<A>.== infix(_:_:));
}

unint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.BridgedElementKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.BridgedElementKey(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TemporalState()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return MEMORY[0x1E0CE0CF0];
}

void protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TemporalState(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TemporalState(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.ImagesKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static AccessibilityProperties.ImagesKey.defaultValue, a1);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ImagesKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(a1, a2, a3, &one-time initialization token for defaultValue, &static AccessibilityProperties.ImagesKey.defaultValue, specialized static Array<A>.== infix(_:_:));
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char v10;

  v8 = *a1;
  if (*a4 != -1)
    swift_once();
  v9 = *a5;
  swift_bridgeObjectRetain();
  v10 = a6(v8, v9);
  swift_bridgeObjectRelease();
  return v10 & 1;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.RotorInfoKey(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == 0;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ScrollableCollectionKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ScrollableCollectionKey(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  outlined init with copy of TableRowList?(a1, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for IntelligenceAppIntentsPayloadProviding?);
  v1 = v4;
  if (v4)
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  return v1 == 0;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ScrollableContextKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityScrollableContext;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.ScrollableContextKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 70) = -1;
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ScrollableContextKey(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[64];
  unsigned int v4;
  unsigned __int16 v5;
  unsigned __int8 v6;

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  v1 = v4 | ((unint64_t)((v5 | (v6 << 16)) & 0xFFFFFF) << 32);
  if (v6 != 255)
    outlined destroy of AccessibilityTableContext?((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  return HIWORD(v1) > 0xFEu;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TextLayoutPropertiesKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityTextLayoutProperties;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TextLayoutPropertiesKey@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[128];

  _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOi0_((uint64_t)v3);
  return outlined init with take of Image.Resolved?((uint64_t)v3, a1, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TextLayoutPropertiesKey(uint64_t a1)
{
  _BYTE v2[128];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  return _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v2) == 1;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TableContextKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityTableContext;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TableContextKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = -1;
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TableContextKey(uint64_t a1)
{
  int v1;
  _BYTE v3[40];
  unsigned __int8 v4;

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  v1 = v4;
  if (v4 != 255)
    outlined destroy of AccessibilityTableContext?((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  return v1 == 255;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TouchInfoKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityTouchInfo;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TouchInfoKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 2;
  *a1 = xmmword_187C39070;
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TouchInfoKey(unsigned __int8 *a1)
{
  return *a1 == 2;
}

void type metadata accessor for LinkDestination.Configuration?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for LinkDestination.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t specialized Optional<A>.merge(with:)(uint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  _OWORD v9[3];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;

  v2 = v1;
  v4 = MEMORY[0x1E0CE5E40];
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v1, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v15, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
  if (!*((_QWORD *)&v14 + 1))
  {
    if (*((_QWORD *)&v16 + 1))
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
      outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
      outlined destroy of AccessibilityTableContext?((uint64_t)v15, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
      v6 = 1;
      return v6 & 1;
    }
LABEL_7:
    v6 = 0;
    return v6 & 1;
  }
  if (!*((_QWORD *)&v16 + 1))
  {
    outlined destroy of AccessibilityValueStorage((uint64_t)v13);
    goto LABEL_7;
  }
  v5 = MEMORY[0x1E0CE5E40];
  outlined destroy of AccessibilityTableContext?((uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
  v10 = v13[0];
  v11 = v13[1];
  v12 = v14;
  v9[0] = v15[0];
  v9[1] = v15[1];
  v9[2] = v16;
  *v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  outlined destroy of AccessibilityTableContext?((uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v5);
  v6 = AccessibilityValueStorage.merge(with:)();
  outlined destroy of AccessibilityValueStorage((uint64_t)v9);
  v7 = v11;
  *v2 = v10;
  v2[1] = v7;
  v2[2] = v12;
  return v6 & 1;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>();
    v8 = v4;
    v9 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>);
    v6 = a1;
    v7 = a2;
    return specialized Dictionary.subscript.setter((uint64_t)&v6, MEMORY[0x1E0CE5888]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5888], (uint64_t)&v6);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5750], (uint64_t)&v5);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v5, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<Double?>();
    v7 = v3;
    v8 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<Double?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<Double?>);
    v5 = a1;
    v6 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)&v5, MEMORY[0x1E0CE5750]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5768]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E0CE6498], (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v11[0];
  if (!(_DWORD)result)
    v10 = 2;
  *a2 = v10;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE57C0]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTextContentType?, MEMORY[0x1E0CE6318], (uint64_t (*)(_QWORD, uint64_t))v8);
  result = swift_dynamicCast();
  v10 = v11[0];
  if (!(_DWORD)result)
    v10 = 8;
  *a2 = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v10;
  _QWORD v12[5];

  if (a1)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v12[3] = v10;
    v12[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>(a5, a3, a4);
    v12[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v12, a2);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)v12);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  if (a4)
  {
    type metadata accessor for AccessibilityPropertiesEntry<Text?>();
    v11[3] = v8;
    v11[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<Text?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<Text?>);
    v9 = (_QWORD *)swift_allocObject();
    v11[0] = v9;
    v9[2] = a1;
    v9[3] = a2;
    v9[4] = a3;
    v9[5] = a4;
    return specialized Dictionary.subscript.setter((uint64_t)v11, MEMORY[0x1E0CE57B0]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE57B0], (uint64_t)v11);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(char a1)
{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  if (a1 == 8)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE57C0], (uint64_t)v4);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextContentType?>();
    v5 = v3;
    v6 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTextContentType?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextContentType?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E0CE57C0]);
  }
}

{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  if (a1 == 7)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE57E0], (uint64_t)v4);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>();
    v5 = v3;
    v6 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityHeadingLevel?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E0CE57E0]);
  }
}

{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  if (a1 == 2)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E0CE5768], (uint64_t)v4);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>();
    v5 = v3;
    v6 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E0CE5768]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(a1 + 56) + 40 * v5, (uint64_t)v10);
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v13, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  a3(0);
  if (swift_dynamicCast())
    return v10[0];
  else
    return 0;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ActionsKey()
{
  return &type metadata for AccessibilityProperties.ActionsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TouchInfoKey()
{
  return &type metadata for AccessibilityProperties.TouchInfoKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TextLayoutPropertiesKey()
{
  return &type metadata for AccessibilityProperties.TextLayoutPropertiesKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.TextLayoutPropertiesKey, &type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey);
  }
  return result;
}

double _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>);
  }
}

uint64_t sub_187A31398()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 128) != 1)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<Text?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<Text?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Text?, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Text?>);
  }
}

uint64_t sub_187A31430()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>);
  }
}

uint64_t sub_187A314D4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 136))
    {
      if (*(_QWORD *)(v0 + 96))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v0 + 128))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v0 + 264))
    {
      if (*(_QWORD *)(v0 + 224))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_BYTE *)(v0 + 216));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v0 + 256))
      {
        outlined consume of Text.Storage(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_BYTE *)(v0 + 248));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E0CE0CF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E0CE6498], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>);
  }
}

uint64_t sub_187A316A4()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityTableContext??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityTableContext??)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTableContext??);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, MEMORY[0x1E0CE5D88], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextContentType?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextContentType?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityTextContentType?, MEMORY[0x1E0CE6318], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextContentType?>);
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityTouchInfo?, (uint64_t)&type metadata for AccessibilityTouchInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>);
  }
}

uint64_t sub_187A31934()
{
  uint64_t v0;
  unint64_t v1;

  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    switch((_DWORD)v1)
    {
      case 2:
        goto LABEL_5;
      case 1:
LABEL_6:
        swift_release();
        return swift_deallocObject();
      case 0:
LABEL_5:
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        goto LABEL_6;
    }
  }
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityScrollableContext??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityScrollableContext??)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext??);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<ScrollableCollection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_187A31A74()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined destroy of ScrollableCollection??(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(0, &lazy cache variable for type metadata for ScrollableCollection??, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for IntelligenceAppIntentsPayloadProviding?(255, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined init with take of ScrollableCollection?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 304) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void type metadata accessor for AccessibilityDataSeriesConfiguration??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration??)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration??);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<Double?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Double?, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E0CE64B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityCustomAttributes?, MEMORY[0x1E0CE6410], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E0CE67B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>);
  }
}

uint64_t sub_187A31E08()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityValueStorage?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>);
  }
}

uint64_t sub_187A31EA4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
  {
    if (*(_QWORD *)(v0 + 40))
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityValueStorage??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityValueStorage??)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityValueStorage??);
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ImagesKey()
{
  return &type metadata for AccessibilityProperties.ImagesKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.RotorInfoKey()
{
  return &type metadata for AccessibilityProperties.RotorInfoKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TableContextKey()
{
  return &type metadata for AccessibilityProperties.TableContextKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.BridgedElementKey()
{
  return &type metadata for AccessibilityProperties.BridgedElementKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TemporalState()
{
  return &type metadata for AccessibilityProperties.TemporalState;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ScrollableContextKey()
{
  return &type metadata for AccessibilityProperties.ScrollableContextKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ScrollableCollectionKey()
{
  return &type metadata for AccessibilityProperties.ScrollableCollectionKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.ScrollableCollectionKey, &type metadata for AccessibilityProperties.ScrollableCollectionKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.ScrollableContextKey, &type metadata for AccessibilityProperties.ScrollableContextKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.TemporalState, &type metadata for AccessibilityProperties.TemporalState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.BridgedElementKey, &type metadata for AccessibilityProperties.BridgedElementKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey);
  }
  return result;
}

uint64_t EnvironmentValues.disableAutocorrection.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.disableAutocorrection.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View._disableAutocorrection(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues._disableAutocorrection.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
  }
}

uint64_t EnvironmentValues._disableAutocorrection.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.autocorrectionDisabled.getter()
{
  return EnvironmentValues.disableAutocorrection.getter() & 1;
}

uint64_t (*EnvironmentValues.disableAutocorrection.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.disableAutocorrection.modify;
}

uint64_t EnvironmentValues.disableAutocorrection.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_187A3279C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.disableAutocorrection.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A327D8()
{
  return EnvironmentValues.disableAutocorrection.setter();
}

uint64_t sub_187A327FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.disableAutocorrection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A32834()
{
  return EnvironmentValues.disableAutocorrection.setter();
}

ValueMetadata *type metadata accessor for AutocorrectionTypeKey()
{
  return &type metadata for AutocorrectionTypeKey;
}

uint64_t sub_187A32868@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues._disableAutocorrection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A328A0()
{
  return EnvironmentValues._disableAutocorrection.setter();
}

void UINavigationItemAdaptor.options.getter(_QWORD *a1@<X8>)
{
  UINavigationItemAdaptor.options.getter(a1);
}

{
  *a1 = 0;
}

Swift::Bool __swiftcall UINavigationItemAdaptor.viewControllerWillAppear(_:child:)(UIViewController *_, UIViewController *child)
{
  return 1;
}

Swift::Bool __swiftcall UINavigationItemAdaptor.viewControllerWillDisappear(_:child:)(UIViewController *_, UIViewController *child)
{
  return 1;
}

uint64_t UINavigationItemAdaptorOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::UINavigationItemAdaptorOptions __swiftcall UINavigationItemAdaptorOptions.init(rawValue:)(SwiftUI::UINavigationItemAdaptorOptions rawValue)
{
  SwiftUI::UINavigationItemAdaptorOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static UINavigationItemAdaptorOptions.propagatesChildViewControllers.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static UINavigationItemAdaptorOptions.disableUpdates.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

double static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  double result;
  uint64_t v4;
  double v5;

  a1(&v4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationItemAdaptorModifier>, (uint64_t)&type metadata for NavigationItemAdaptorModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v4;
  result = v5;
  a2[1] = v5;
  return result;
}

uint64_t implicit closure #1 in static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t NavigationItemAdaptorModifier.MakeAdaptor.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[7];

  v1 = v0;
  v29[6] = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(char **)Value;
  v6 = *(_QWORD *)(*(_QWORD *)Value + 16);
  if (v6)
  {
    v7 = (uint64_t)(v5 + 32);
    swift_bridgeObjectRetain_n();
    v8 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v7, (uint64_t)v29);
      outlined init with copy of TableColumnList((uint64_t)v29, (uint64_t)v26);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v29);
      v9 = v27;
      v10 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v25, v9, v10);
      v8 |= v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      v7 += 48;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = 0;
  }
  v11 = *(_QWORD *)(v0 + 8);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v5;
  v13 = *((_QWORD *)v5 + 2);
  if (v13)
  {
    v14 = *(_DWORD *)(v1 + 16) + 1;
    *(_DWORD *)(v1 + 16) = v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v12 + 16) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_27:
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
    v16 = *((_QWORD *)v5 + 2);
    v17 = v13 - 1;
    if (v16 < v13 - 1)
      v17 = *((_QWORD *)v5 + 2);
    if (v17 >= 2)
    {
      v19 = v17 + 1;
      v20 = v19 & 1;
      if ((v19 & 1) == 0)
        v20 = 2;
      v18 = v19 - v20;
      v21 = (int *)(v5 + 120);
      v22 = v18;
      do
      {
        *(v21 - 12) = v14;
        *v21 = v14;
        v21 += 24;
        v22 -= 2;
      }
      while (v22);
    }
    else
    {
      v18 = 0;
    }
    v23 = 48 * v18 + 72;
    do
    {
      if (v18 >= v16)
      {
        __break(1u);
        goto LABEL_27;
      }
      ++v18;
      *(_DWORD *)&v5[v23] = v14;
      v23 += 48;
    }
    while (v13 != v18);
    *(_QWORD *)(v12 + 16) = v5;
  }
  type metadata accessor for (_:)();
  if (AGGraphGetOutputValue() && (v4 & 1) == 0 && v8 == v11)
  {
    result = swift_release();
  }
  else
  {
    v29[0] = partial apply for closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue();
    v29[1] = v12;
    swift_retain();
    AGGraphSetOutputValue();
    result = swift_release_n();
  }
  *(_QWORD *)(v1 + 8) = v8;
  return result;
}

uint64_t closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue()()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationItemAdaptorModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance UINavigationItemAdaptorKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static UINavigationItemAdaptorKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance UINavigationItemAdaptorKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t View.navigationItemAdaptor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  _BYTE v12[40];
  __int128 v13;
  uint64_t v14;
  uint64_t v15[5];

  v15[3] = a3;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of UINavigationItemAdaptor?((uint64_t)v15, (uint64_t)&v13);
  if (v14)
  {
    outlined init with take of OptionalBinaryInteger(&v13, (uint64_t)v12);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>, (uint64_t)&type metadata for UINavigationItemAdaptorStorage.Adaptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
    outlined init with copy of TableColumnList((uint64_t)v12, v10 + 32);
    *(_DWORD *)(v10 + 72) = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  outlined destroy of UINavigationItemAdaptor?((uint64_t)v15);
  v15[0] = v10;
  MEMORY[0x18D75B4AC](v15, a2, &type metadata for NavigationItemAdaptorModifier, a4);
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of UINavigationItemAdaptor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UINavigationItemAdaptor?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UINavigationItemAdaptor?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UINavigationItemAdaptor?)
  {
    type metadata accessor for UINavigationItemAdaptor();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UINavigationItemAdaptor?);
  }
}

unint64_t type metadata accessor for UINavigationItemAdaptor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UINavigationItemAdaptor;
  if (!lazy cache variable for type metadata for UINavigationItemAdaptor)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UINavigationItemAdaptor);
  }
  return result;
}

uint64_t outlined destroy of UINavigationItemAdaptor?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UINavigationItemAdaptor?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UINavigationItemAdaptorOptions, &type metadata for UINavigationItemAdaptorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UINavigationItemAdaptorOptions, &type metadata for UINavigationItemAdaptorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UINavigationItemAdaptorOptions, &type metadata for UINavigationItemAdaptorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UINavigationItemAdaptorOptions, &type metadata for UINavigationItemAdaptorOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

uint64_t dispatch thunk of UINavigationItemAdaptor.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of UINavigationItemAdaptor.updateUINavigationItem(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of UINavigationItemAdaptor.viewControllerWillAppear(_:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of UINavigationItemAdaptor.viewControllerWillDisappear(_:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorContext()
{
  return &type metadata for UINavigationItemAdaptorContext;
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorOptions()
{
  return &type metadata for UINavigationItemAdaptorOptions;
}

uint64_t sub_187A33228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for NavigationItemAdaptorModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorKey()
{
  return &type metadata for UINavigationItemAdaptorKey;
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorStorage()
{
  return &type metadata for UINavigationItemAdaptorStorage;
}

uint64_t initializeWithCopy for UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorStorage.Adaptor()
{
  return &type metadata for UINavigationItemAdaptorStorage.Adaptor;
}

ValueMetadata *type metadata accessor for NavigationItemAdaptorModifier()
{
  return &type metadata for NavigationItemAdaptorModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationItemAdaptorModifier()
{
  return &protocol witness table for NavigationItemAdaptorModifier;
}

uint64_t partial apply for implicit closure #1 in static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor;
  if (!lazy protocol witness table cache variable for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationItemAdaptorModifier.MakeAdaptor, &unk_1E1AF9FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor);
  }
  return result;
}

uint64_t sub_187A33438()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue()()
{
  return closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue()();
}

void *type metadata accessor for NavigationItemAdaptorModifier.MakeAdaptor()
{
  return &unk_1E1AF9FE0;
}

uint64_t getEnumTagSinglePayload for TransactionalPreferenceModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187A334F4 + 4 * byte_187C7EA90[v10]))();
  }
}

void storeEnumTagSinglePayload for TransactionalPreferenceModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187A3366C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A336E4);
}

void sub_187A33674(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A3367CLL);
  JUMPOUT(0x187A336E4);
}

void sub_187A336BC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A336E4);
}

void sub_187A336C4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A336E4);
}

uint64_t sub_187A336CC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187A336E4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187A336E0);
    JUMPOUT(0x187A336D8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for TransactionalPreferenceModifier()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for ViewModifier in TransactionalPreferenceModifier<A, B>()
{
  return &protocol witness table for TransactionalPreferenceModifier<A, B>;
}

void View.transactionalPreference<A, B>(key:value:transform:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TransactionalPreferenceModifier();
}

void sub_187A33790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;

  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v14, *(_QWORD *)(v15 - 160), v13, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v18, v14, v13);
  *(_QWORD *)(v15 - 112) = v13;
  *(_QWORD *)(v15 - 104) = v12;
  *(_QWORD *)(v15 - 96) = v10;
  *(_QWORD *)(v15 - 88) = v9;
  type metadata accessor for TransactionalPreferenceModifier();
}

uint64_t sub_187A337F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = (_QWORD *)(v2 + *(int *)(a1 + 52));
  *v6 = *(_QWORD *)(v5 - 152);
  v6[1] = v3;
  swift_retain();
  MEMORY[0x18D75B4AC](v2, *(_QWORD *)(v5 - 136), v1, *(_QWORD *)(v5 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
}

void static TransactionalPreferenceModifier._makeView(modifier:inputs:body:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[64];

  v14[12] = a2;
  v14[13] = a1;
  v14[14] = a7;
  v14[61] = *MEMORY[0x1E0C80C00];
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v14[5] = (char *)v14 - v13;
  v14[50] = a3;
  v14[51] = a4;
  v14[2] = a4;
  v14[3] = a6;
  v14[52] = a5;
  v14[53] = a6;
  type metadata accessor for IsAnimated();
}

void sub_187A338F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  *(_QWORD *)(v9 + 48) = a1;
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 32) = (char *)&a9 - v17;
  LODWORD(v17) = *v14;
  v18 = *(_DWORD *)(v10 + 8);
  v19 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 136) = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 144) = v19;
  *(_DWORD *)(v9 + 168) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 172) = v18;
  v20 = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 160) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 164) = v20;
  *(_DWORD *)(v9 + 156) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 176) = *(_QWORD *)(v10 + 48);
  v22 = *(_DWORD *)(v10 + 56);
  v21 = *(_DWORD *)(v10 + 60);
  v23 = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 120) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 124) = v21;
  v24 = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 68) = v23;
  *(_DWORD *)(v9 + 56) = v22;
  *(_DWORD *)(v9 + 60) = v24;
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v9 + 312) = v17;
  *(_QWORD *)(v16 - 192) = v13;
  *(_QWORD *)(v16 - 184) = v12;
  *(_QWORD *)(v16 - 176) = v15;
  *(_QWORD *)(v16 - 168) = v11;
  *(_QWORD *)(v9 + 88) = v15;
  type metadata accessor for TransactionalPreferenceModifier();
}

void sub_187A339A8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v0 + 8) = _GraphValue.value.getter();
  *(_QWORD *)(v6 - 192) = *(_QWORD *)(v0 + 136);
  *(_DWORD *)(v6 - 184) = *(_DWORD *)(v0 + 172);
  *(_QWORD *)(v6 - 176) = *(_QWORD *)(v0 + 144);
  v7 = *(_DWORD *)(v0 + 164);
  *(_DWORD *)(v6 - 168) = *(_DWORD *)(v0 + 168);
  *(_DWORD *)(v6 - 164) = v7;
  v8 = *(_DWORD *)(v0 + 156);
  *(_DWORD *)(v6 - 160) = *(_DWORD *)(v0 + 160);
  *(_DWORD *)(v6 - 156) = v8;
  v9 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v6 - 152) = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v6 - 144) = v9;
  LODWORD(v9) = *(_DWORD *)(v0 + 124);
  *(_DWORD *)(v6 - 136) = v3;
  *(_DWORD *)(v6 - 132) = v9;
  LODWORD(v9) = *(_DWORD *)(v0 + 120);
  *(_DWORD *)(v6 - 128) = v1;
  *(_DWORD *)(v6 - 124) = v9;
  *(_DWORD *)(v6 - 120) = v5;
  *(_DWORD *)(v6 - 116) = v4;
  *(_DWORD *)(v6 - 112) = *(_DWORD *)(v0 + 12);
  v10 = _ViewInputs.transaction.getter();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v12 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 80) = v2;
  v11(v12, 1, 1, v2);
  IsAnimated.init(modifier:transaction:lastValue:lastTransaction:)(*(_DWORD *)(v0 + 8), v10, *(_DWORD **)(v0 + 32));
}

uint64_t sub_187A33A78()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 288) = AssociatedTypeWitness;
  *(_QWORD *)(v0 + 296) = v7;
  *(_QWORD *)(v0 + 304) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A, B>, v7);
  v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, v0 + 272, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(v1, v7);
  v10 = *(_DWORD *)(v5 - 192);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  v11 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v0 + 136);
  *(_DWORD *)(v5 - 184) = *(_DWORD *)(v0 + 172);
  *(_QWORD *)(v5 - 176) = v11;
  v12 = *(_DWORD *)(v0 + 164);
  *(_DWORD *)(v5 - 168) = *(_DWORD *)(v0 + 168);
  *(_DWORD *)(v5 - 164) = v12;
  v13 = *(_DWORD *)(v0 + 156);
  *(_DWORD *)(v5 - 160) = *(_DWORD *)(v0 + 160);
  *(_DWORD *)(v5 - 156) = v13;
  v14 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v5 - 152) = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v5 - 144) = v14;
  v15 = *(_DWORD *)(v0 + 56);
  v16 = *(_DWORD *)(v0 + 124);
  *(_DWORD *)(v5 - 136) = v15;
  *(_DWORD *)(v5 - 132) = v16;
  v17 = *(_DWORD *)(v0 + 120);
  *(_DWORD *)(v5 - 128) = *(_DWORD *)(v0 + 68);
  *(_DWORD *)(v5 - 124) = v17;
  v18 = *(_DWORD *)(v0 + 60);
  *(_DWORD *)(v5 - 120) = *(_DWORD *)(v0 + 64);
  *(_DWORD *)(v5 - 116) = v18;
  *(_DWORD *)(v5 - 112) = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v4;
  PreferencesInputs.remove<A>(_:)();
  v20 = *(_DWORD *)(v5 - 184);
  v21 = *(_QWORD *)(v5 - 176);
  v23 = *(_QWORD *)(v5 - 152);
  v22 = *(_QWORD *)(v5 - 144);
  v24 = *(_DWORD *)(v5 - 112);
  *(_QWORD *)(v0 + 312) = *(_QWORD *)(v5 - 192);
  *(_DWORD *)(v0 + 320) = v20;
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 424);
  *(_QWORD *)(v0 + 328) = v21;
  *(_QWORD *)(v0 + 352) = v23;
  *(_QWORD *)(v0 + 360) = v22;
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 384) = *(_QWORD *)(v5 - 120);
  *(_DWORD *)(v0 + 392) = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t))(v0 + 104))(v25, v0 + 312);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 176);
  *(_DWORD *)(v0 + 320) = v15;
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 232) = v3;
  *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 248) = v19;
  *(_DWORD *)(v0 + 256) = v10;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v27 = *(_QWORD **)(v0 + 112);
  *v27 = *(_QWORD *)(v0 + 184);
  v27[1] = *(_QWORD *)(v0 + 192);
  return result;
}

void IsAnimated.init(modifier:transaction:lastValue:lastTransaction:)(int a1@<W0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for IsAnimated();
}

uint64_t sub_187A33D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = v3 + *(int *)(a1 + 56);
  v6 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v2, v6);
  *(_QWORD *)(v3 + *(int *)(a1 + 60)) = v1;
  return result;
}

void IsAnimated.modifier.getter()
{
  type metadata accessor for TransactionalPreferenceModifier();
}

uint64_t sub_187A33DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransactionalPreferenceModifier<A, B>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  static TransactionalPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransactionalPreferenceModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransactionalPreferenceModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static IsAnimated.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
}

void IsAnimated.updateValue()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[9];
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10[1] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  v10[0] = (char *)v10 - v5;
  v6 = a1[2];
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = a1[4];
  v12 = v6;
  v13 = v3;
  v14 = v9;
  v15 = v2;
  type metadata accessor for TransactionalPreferenceModifier();
}

void sub_187A34008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 240) = a1;
  *(_QWORD *)(v2 - 224) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  IsAnimated.modifier.getter();
}

uint64_t sub_187A34044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t OutputValue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v10 - 288) = v6;
  v11 = *(int *)(v6 + 56);
  *(_QWORD *)(v10 - 264) = v1;
  v12 = v1 + v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v1 + v11, v0);
  *(_QWORD *)(v10 - 280) = v3;
  *(_QWORD *)(v10 - 176) = v3;
  *(_QWORD *)(v10 - 168) = v5;
  *(_QWORD *)(v10 - 256) = v5;
  *(_QWORD *)(v10 - 272) = v9;
  *(_QWORD *)(v10 - 160) = v9;
  *(_QWORD *)(v10 - 152) = v2;
  *(_QWORD *)(v10 - 248) = v2;
  *(_QWORD *)(v10 - 216) = v4;
  *(_QWORD *)(v10 - 144) = v4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in IsAnimated.updateValue(), v10 - 192, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], v13, v10 - 193);
  v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v14(v7, v0);
  v15 = *(unsigned __int8 *)(v10 - 193);
  if (v15 == 2 || (v15 & 1) != 0)
  {
    v14(v12, v0);
    v23 = *(_QWORD *)(v10 - 280);
    v24 = *(_QWORD *)(v23 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 16))(v12, *(_QWORD *)(v10 - 216), v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v23);
    AGGraphClearUpdate();
    closure #2 in IsAnimated.updateValue()();
  }
  v16 = *(_QWORD *)(v10 - 232);
  OutputValue = AGGraphGetOutputValue();
  v20 = *(_QWORD *)(v10 - 248);
  v19 = *(_QWORD *)(v10 - 240);
  v21 = *(_QWORD *)(v10 - 272);
  v22 = *(_QWORD *)(v10 - 288);
  if (!OutputValue)
  {
    MEMORY[0x1E0C80A78](0, v18);
    v32[0] = v21;
    v32[1] = v20;
    v33 = v25;
    v26 = *(_QWORD *)(v10 - 304);
    v27 = Attribute.syncMainIfReferences<A>(do:)();
    v29 = MEMORY[0x1E0C80A78](v27, v28);
    v33 = v22;
    v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A, B>, v22, v29);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v26, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v32, v16, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 8))(v26, v16);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v10 - 224) + 8))(*(_QWORD *)(v10 - 216), v19);
}

uint64_t closure #1 in IsAnimated.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v9, v7);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a3);
  *a4 = (v10 & 1) == 0;
  return result;
}

void closure #2 in IsAnimated.updateValue()()
{
  type metadata accessor for IsAnimated();
}

uint64_t sub_187A343E0()
{
  _QWORD *v0;

  *v0 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

void closure #3 in IsAnimated.updateValue()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for TransactionalPreferenceModifier();
}

void sub_187A34498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 112) = v0;
  *(_QWORD *)(v4 - 104) = v3;
  *(_QWORD *)(v4 - 96) = v2;
  *(_QWORD *)(v4 - 88) = v1;
  type metadata accessor for IsAnimated();
}

uint64_t sub_187A344B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3 + *(int *)(a1 + 56), v5);
  v8 = *(_QWORD *)(v1 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v2, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(v3 + *(int *)(a1 + 60));
    swift_retain();
    v6(v2, v10);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v2, v1);
  }
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance IsAnimated<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static IsAnimated.initialValue.getter(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IsAnimated<A, B>()
{
  return specialized IsAnimated.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance IsAnimated<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v21 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v21 - v14;
  static IsAnimated.initialValue.getter(v4, v3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v15, v10, AssociatedTypeWitness);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21[-2] = a2;
  v21[-1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A, B>, a2, v19);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)_s14AttributeGraph12StatefulRulePAAE5value5ValueQzvsySPyAFGXEfU_TA_0, (uint64_t)&v21[-4], AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v20);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IsAnimated<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsAnimated<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

void type metadata accessor for IsAnimated()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for implicit closure #1 in static TransactionalPreferenceModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48);
}

uint64_t type metadata completion function for IsAnimated()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IsAnimated(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  void *v15;
  const void *v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 4) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
    *(_QWORD *)(((unint64_t)v15 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for IsAnimated(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return swift_release();
}

_DWORD *initializeWithCopy for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  *(_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *initializeWithTake for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  *(_QWORD *)(((unint64_t)v9 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IsAnimated(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2)
  {
    if (((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  v15 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v17 = *(_QWORD *)((v10 + v15) & 0xFFFFFFFFFFFFF8);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    v18 = v17 - 1;
    if (v18 < 0)
      v18 = -1;
    return (v18 + 1);
  }
  else
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v15);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for IsAnimated(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_187A35110@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t result;

  *(_BYTE *)(v15 + v16) = 0;
  if (a1)
  {
    v17 = (void *)((((v15 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v14 + 4) & v10);
    if (v11 < 0x7FFFFFFE)
    {
      if (a1 > 0x7FFFFFFE)
        v19 = a1 - 0x7FFFFFFF;
      else
        v19 = a1;
      *(_QWORD *)(((unint64_t)v17 + v13) & 0xFFFFFFFFFFFFFFF8) = v19;
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v18 = a2;
      else
        v18 = 4;
      bzero(v17, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_187A35220()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_187A35230()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_187A35238()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void base witness table accessor for _AttributeBody in IsAnimated<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in IsAnimated.updateValue()@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in IsAnimated.updateValue()(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), a2);
}

void partial apply for closure #3 in IsAnimated.updateValue()()
{
  closure #3 in IsAnimated.updateValue()();
}

uint64_t specialized IsAnimated.description.getter()
{
  Swift::String v0;
  _QWORD v2[2];

  strcpy((char *)v2, "Transaction: ");
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2[0];
}

void static NavigationSplitViewVisibility.automatic.getter(BOOL *a1@<X8>)
{
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Width;
  double v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v2 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v2, sel_bounds);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v13.origin.x = v4;
  v13.origin.y = v6;
  v13.size.width = v8;
  v13.size.height = v10;
  Width = CGRectGetWidth(v13);
  v14.origin.x = v4;
  v14.origin.y = v6;
  v14.size.width = v8;
  v14.size.height = v10;
  if (CGRectGetHeight(v14) >= Width)
    v12 = 1194.0;
  else
    v12 = 1024.0;
  v15.origin.x = v4;
  v15.origin.y = v6;
  v15.size.width = v8;
  v15.size.height = v10;
  *a1 = CGRectGetWidth(v15) >= v12;
  a1[1] = 1;
}

void static NavigationSplitViewVisibility.detailOnly.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static NavigationSplitViewVisibility.all.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static NavigationSplitViewVisibility.doubleColumn.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NavigationSplitView.visibility.getter(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + *(int *)(a1 + 76) + 18) & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    return MEMORY[0x18D75B9C8]();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    return State.wrappedValue.getter();
  }
}

uint64_t NavigationSplitView.$visibility.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v4 = (uint64_t *)(v2 + *(int *)(a1 + 76));
  v5 = *v4;
  v6 = v4[1];
  if ((*((_BYTE *)v4 + 18) & 1) != 0)
  {
    v7 = *((_WORD *)v4 + 8);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_WORD *)(a2 + 16) = v7;
    swift_retain();
    return swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    return State.projectedValue.getter();
  }
}

uint64_t NavigationSplitView.$preferredCompactColumn.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = (uint64_t *)(v2 + *(int *)(a1 + 80));
  v5 = *v4;
  v6 = v4[1];
  if ((*((_BYTE *)v4 + 17) & 1) != 0)
  {
    v7 = *((_BYTE *)v4 + 16);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
    swift_retain();
    return swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    return State.projectedValue.getter();
  }
}

void NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)()
{
  type metadata accessor for NavigationSplitView();
}

uint64_t sub_187A35648(int *a1)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = a1[21];
  v12 = v4 + a1[19];
  *(_QWORD *)v12 = v8;
  *(_QWORD *)(v12 + 8) = v9;
  *(_WORD *)(v12 + 16) = v1;
  *(_BYTE *)(v12 + 18) = v5;
  *(_WORD *)(v4 + v11) = v7;
  v13 = v4 + a1[20];
  *(_QWORD *)v13 = v18;
  *(_QWORD *)(v13 + 8) = v17;
  *(_BYTE *)(v13 + 16) = v16;
  *(_BYTE *)(v13 + 17) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v4, v19, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v4 + a1[17], v20, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v4 + a1[18], v21, v3);
}

void NavigationSplitView.init(sidebar:content:detail:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = v10(v10);
  v12 = a3(v11);
  a5(v12);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init(columnVisibility:sidebar:content:detail:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  v10 = swift_release();
  v11 = a2(v10);
  v12 = a4(v11);
  a6(v12);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(sidebar:detail:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = v6();
  a3(v7);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(columnVisibility:sidebar:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  v9 = swift_retain();
  v10 = a4(v9);
  a6(v10);
  swift_release();
  swift_release();
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(columnVisibility:sidebar:detail:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  v7 = swift_release();
  v8 = a2(v7);
  a4(v8);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v21 = a3;
  v3 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v15[3] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v15[2] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  MEMORY[0x1E0C80A78](v9, v11);
  v15[1] = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v13[6];
  v19 = v13[5];
  v16 = v13[7];
  v17 = v14;
  v22 = v10;
  v23 = v6;
  v24 = v3;
  v25 = v19;
  v26 = v14;
  v27 = v16;
  type metadata accessor for NavigationSplitView.InternalBody();
}

void sub_187A35F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;

  *(_QWORD *)(v16 - 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v13 + 16))(v11, v10, v14, v21);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 264) + 16))(*(_QWORD *)(v16 - 272), v10 + *(int *)(v15 + 68), v12);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 224) + 16))(*(_QWORD *)(v16 - 240), v10 + *(int *)(v15 + 72), v9);
  NavigationSplitView.configuration.getter(v15, v16 - 144);
  v22 = *(_QWORD *)(v16 - 136);
  v23 = *(_DWORD *)(v16 - 128);
  v24 = *(_QWORD *)(v16 - 104);
  v25 = *(_BYTE *)(v16 - 96);
  *(_QWORD *)(v16 - 200) = *(_QWORD *)(v16 - 144);
  *(_QWORD *)(v16 - 192) = v22;
  *(_DWORD *)(v16 - 184) = v23;
  *(_OWORD *)(v16 - 176) = *(_OWORD *)(v16 - 120);
  *(_QWORD *)(v16 - 160) = v24;
  *(_BYTE *)(v16 - 152) = v25;
  NavigationSplitView.InternalBody.init(sidebar:content:detail:configuration:)(*(_QWORD *)(v16 - 280), v14, (uint64_t)v18);
}

uint64_t sub_187A36068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.InternalBody, v1);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 8);
  v5(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v3 - 208));
  return v5(v2, v1);
}

uint64_t NavigationSplitView.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  NavigationSplitView.$visibility.getter(a1, (uint64_t)&v16);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  v8 = *(_WORD *)(v2 + *(int *)(a1 + 84));
  NavigationSplitView.visibility.getter(a1);
  v9 = v15 >> 14;
  if (v9 < 2 || v9 == 3 && v15 == 49152)
    v10 = 2;
  else
    v10 = 3;
  result = NavigationSplitView.$preferredCompactColumn.getter(a1, (uint64_t)&v16);
  v12 = v16;
  v13 = v17;
  v14 = v18;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 18) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v13;
  *(_BYTE *)(a2 + 48) = v14;
  return result;
}

void NavigationSplitView.InternalBody.init(sidebar:content:detail:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for NavigationSplitView.InternalBody();
}

__n128 sub_187A3623C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __n128 result;
  char v10;
  uint64_t v11;
  __n128 v12;
  int v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + a1[17], v4, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + a1[18], v3, v1);
  v8 = v5 + a1[19];
  *(_QWORD *)v8 = v6;
  *(_QWORD *)(v8 + 8) = v14;
  *(_DWORD *)(v8 + 16) = v13;
  result = v12;
  *(__n128 *)(v8 + 24) = v12;
  *(_QWORD *)(v8 + 40) = v11;
  *(_BYTE *)(v8 + 48) = v10;
  return result;
}

void NavigationSplitView.init(columnVisibility:sidebar:content:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = v11();
  v13 = a4(v12);
  a6(v13);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(columnVisibility:sidebar:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = v7();
  a4(v8);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init(topColumn:sidebar:content:detail:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationSplitView.init(columnVisibility:topColumn:sidebar:content:detail:)()
{
  NavigationSplitView.init(columnVisibility:topColumn:sidebar:content:detail:)();
}

{
  NavigationSplitView.init(columnVisibility:topColumn:sidebar:content:detail:)();
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationSplitView.init<>(topColumn:sidebar:detail:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationSplitView.init<>(columnVisibility:topColumn:sidebar:detail:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationSplitView.init(preferredCompactColumn:sidebar:content:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = v11();
  v13 = a4(v12);
  a6(v13);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  v11 = swift_release();
  v12 = a3(v11);
  v13 = a5(v12);
  a7(v13);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(preferredCompactColumn:sidebar:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = v7();
  a4(v8);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(columnVisibility:preferredCompactColumn:sidebar:detail:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  v7 = swift_release();
  v8 = a3(v7);
  a5(v8);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = v12();
  v14 = a5(v13);
  a7(v14);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.init<>(columnVisibility:preferredCompactColumn:sidebar:detail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = v8();
  a5(v9);
  NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)();
}

void NavigationSplitView.InternalBody.body.getter()
{
  type metadata accessor for NavigationSplitView.SidebarContent();
}

void sub_187A37108(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v1[22] = a1;
  v4 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  v1[21] = v4;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.SidebarContent, a1);
  v1[15] = v5;
  *(_QWORD *)(v2 - 144) = &type metadata for NavigationSplitViewStyleConfiguration.Sidebar;
  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 128) = v4;
  *(_QWORD *)(v2 - 120) = v5;
  type metadata accessor for StaticSourceWriter();
}

void sub_187A3714C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = type metadata accessor for ModifiedContent();
  v9[24] = *(_QWORD *)(v17 - 8);
  v9[8] = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v9[29] = (char *)&a9 - v19;
  *(_QWORD *)(v16 - 144) = v15;
  *(_QWORD *)(v16 - 136) = v11;
  v9[3] = v10;
  *(_QWORD *)(v16 - 128) = v10;
  *(_QWORD *)(v16 - 120) = v12;
  v9[27] = v13;
  *(_QWORD *)(v16 - 112) = v13;
  *(_QWORD *)(v16 - 104) = v14;
  type metadata accessor for NavigationSplitView.ContentListContent();
}

void sub_187A371C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v1[18] = a1;
  v4 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  v1[19] = v4;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.ContentListContent, a1);
  v1[16] = v5;
  *(_QWORD *)(v2 - 144) = &type metadata for NavigationSplitViewStyleConfiguration.Content;
  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 128) = v4;
  *(_QWORD *)(v2 - 120) = v5;
  type metadata accessor for StaticSourceWriter();
}

void sub_187A37208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = type metadata accessor for ModifiedContent();
  v9[23] = *(_QWORD *)(v16 - 8);
  v9[5] = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v9[28] = (char *)&a9 - v18;
  *(_QWORD *)(v15 - 144) = v9[26];
  *(_QWORD *)(v15 - 136) = v14;
  *(_QWORD *)(v15 - 128) = v11;
  *(_QWORD *)(v15 - 120) = v12;
  v9[1] = v13;
  v9[2] = v12;
  *(_QWORD *)(v15 - 112) = v10;
  *(_QWORD *)(v15 - 104) = v13;
  type metadata accessor for NavigationSplitView.DetailContent();
}

void sub_187A37274(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v1[13] = a1;
  v4 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  v1[14] = v4;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.DetailContent, a1);
  v1[9] = v5;
  *(_QWORD *)(v2 - 144) = &type metadata for NavigationSplitViewStyleConfiguration.Detail;
  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 128) = v4;
  *(_QWORD *)(v2 - 120) = v5;
  type metadata accessor for StaticSourceWriter();
}

void sub_187A372B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  v9[7] = v16;
  v9[17] = v17;
  MEMORY[0x1E0C80A78](v16, v16);
  v9[4] = (char *)&a9 - v18;
  v19 = type metadata accessor for ModifiedContent();
  v9[11] = v19;
  v9[20] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v9[6] = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v9[12] = (char *)&a9 - v24;
  v25 = v9[10];
  v26 = (uint64_t *)(v25 + *(int *)(v10 + 76));
  v27 = *v26;
  v28 = v26[1];
  v29 = *((_DWORD *)v26 + 4);
  v30 = v26[3];
  v31 = v26[4];
  v32 = v26[5];
  LOBYTE(v26) = *((_BYTE *)v26 + 48);
  *(_QWORD *)(v15 - 144) = v27;
  *(_QWORD *)(v15 - 136) = v28;
  *(_DWORD *)(v15 - 128) = v29;
  *(_QWORD *)(v15 - 120) = v30;
  *(_QWORD *)(v15 - 112) = v31;
  *(_QWORD *)(v15 - 104) = v32;
  *(_BYTE *)(v15 - 96) = (_BYTE)v26;
  v9[52] = v11;
  v9[53] = v13;
  *v9 = v13;
  v9[54] = v9[3];
  v9[55] = v14;
  v9[56] = v9[27];
  v9[57] = v12;
  v9[58] = v25;
  lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter);
}

void sub_187A37420()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v0[42] = v0[26];
  v0[43] = v2;
  v6 = v0[1];
  v7 = v0[2];
  v0[44] = v4;
  v0[45] = v7;
  v0[46] = v0[27];
  v0[47] = v6;
  v0[48] = v1;
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 152) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[8], v5 - 160);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)partial apply for closure #2 in NavigationSplitView.InternalBody.body.getter);
}

void sub_187A374C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(v0[24] + 8))(v1, v7);
  v11 = *v0;
  v0[32] = v4;
  v0[33] = v11;
  v0[34] = v9;
  v0[35] = v6;
  v0[36] = v8;
  v0[37] = v3;
  v0[38] = v5;
  *(_QWORD *)(v10 - 176) = v2;
  *(_QWORD *)(v10 - 168) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[5], v10 - 176);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)partial apply for closure #3 in NavigationSplitView.InternalBody.body.getter);
}

uint64_t sub_187A37558()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v0[23] + 8))(v1, v4);
  *(_QWORD *)(v7 - 192) = v2;
  *(_QWORD *)(v7 - 184) = v6;
  v8 = v3;
  v9 = v3;
  v10 = v0[7];
  v11 = MEMORY[0x18D75FFDC](v8, v10, v7 - 192);
  v12 = v0[6];
  MEMORY[0x18D75B4AC](v11, v10, &type metadata for NavigationCommonModifier, v11);
  (*(void (**)(uint64_t, uint64_t))(v0[17] + 8))(v5, v10);
  v13 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  *(_QWORD *)(v7 - 208) = v11;
  *(_QWORD *)(v7 - 200) = v13;
  v14 = v0[11];
  v15 = MEMORY[0x18D75FFDC](v9, v14, v7 - 208);
  v16 = v0[12];
  static ViewBuilder.buildExpression<A>(_:)(v12, v14, v15);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v0[20] + 8);
  v17(v12, v14);
  static ViewBuilder.buildBlock<A>(_:)(v16, v14, v0[25]);
  return v17(v16, v14);
}

void closure #1 in NavigationSplitView.InternalBody.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NavigationSplitView.SidebarContent();
}

void sub_187A376DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  *(_QWORD *)(v9 - 144) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 16))(v2, v4, v8, v12);
  v13 = *(_QWORD *)(v9 - 160);
  *(_QWORD *)(v9 - 128) = v8;
  *(_QWORD *)(v9 - 120) = v13;
  *(_QWORD *)(v9 - 112) = v7;
  *(_QWORD *)(v9 - 104) = v6;
  *(_QWORD *)(v9 - 96) = v5;
  *(_QWORD *)(v9 - 88) = *(_QWORD *)(v9 - 152);
  type metadata accessor for NavigationSplitView.InternalBody();
}

void sub_187A37768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 32))(v5, v0, v4);
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = v1;
  v7 = *(_QWORD *)(v6 - 176);
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v7;
  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 168);
  *(_QWORD *)(v6 - 88) = v2;
  type metadata accessor for NavigationSplitView.SidebarContent();
}

uint64_t sub_187A377AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v4 + *(int *)(a1 + 68)) = v2;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.SidebarContent, v1);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8);
  v7(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, *(_QWORD *)(v5 - 136));
  return v7(v3, v1);
}

void closure #2 in NavigationSplitView.InternalBody.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NavigationSplitView.ContentListContent();
}

void sub_187A378BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v15 - 144) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v15 - 160) = (char *)&a9 - v18;
  *(_QWORD *)(v15 - 128) = v10;
  *(_QWORD *)(v15 - 120) = v13;
  *(_QWORD *)(v15 - 112) = v14;
  *(_QWORD *)(v15 - 104) = v12;
  *(_QWORD *)(v15 - 96) = v11;
  *(_QWORD *)(v15 - 88) = v9;
  type metadata accessor for NavigationSplitView.InternalBody();
}

void sub_187A37928(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = v1 + *(int *)(a1 + 68);
  v10 = *(_QWORD *)(v8 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v6, v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v7, v6, v4);
  *(_QWORD *)(v8 - 128) = v2;
  *(_QWORD *)(v8 - 120) = v4;
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v3;
  v11 = *(_QWORD *)(v8 - 168);
  *(_QWORD *)(v8 - 96) = *(_QWORD *)(v8 - 176);
  *(_QWORD *)(v8 - 88) = v11;
  type metadata accessor for NavigationSplitView.ContentListContent();
}

uint64_t sub_187A3798C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + *(int *)(a1 + 68)) = v2;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.ContentListContent, v1);
  v6 = *(_QWORD *)(v4 - 160);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 8);
  v7(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v6, v1, *(_QWORD *)(v4 - 136));
  return v7(v6, v1);
}

void closure #3 in NavigationSplitView.InternalBody.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NavigationSplitView.DetailContent();
}

void sub_187A37A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v7 - 144) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v7 - 128) = v2;
  *(_QWORD *)(v7 - 120) = v6;
  *(_QWORD *)(v7 - 112) = v3;
  *(_QWORD *)(v7 - 104) = v5;
  v10 = *(_QWORD *)(v7 - 160);
  *(_QWORD *)(v7 - 96) = v4;
  *(_QWORD *)(v7 - 88) = v10;
  type metadata accessor for NavigationSplitView.InternalBody();
}

uint64_t sub_187A37B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v3, *(_QWORD *)(v7 - 152) + *(int *)(a1 + 72), v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v3, v2);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.DetailContent, v1);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 144) + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v7 - 136));
  return v9(v4, v1);
}

uint64_t NavigationSplitView.SidebarContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  char v39;
  _QWORD v40[2];

  v36 = a2;
  type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarStyleContext>);
  v3 = type metadata accessor for ModifiedContent();
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v30 - v5;
  v7 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v30 - v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
  v11 = type metadata accessor for ModifiedContent();
  v35 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v30 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v31 = (char *)&v30 - v16;
  v17 = *(_QWORD *)(a1 + 40);
  v18 = v32;
  View.styleContext<A>(_:)();
  LOBYTE(v18) = *(_QWORD *)(v18 + *(int *)(a1 + 68)) == 2;
  v19 = lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<SidebarStyleContext>);
  v40[0] = v17;
  v40[1] = v19;
  v20 = MEMORY[0x1E0CE2E70];
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v40);
  View.navigationColumn(isSearchEnabled:)(v18, v3, v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
  swift_getKeyPath();
  v39 = 0;
  v22 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  v38[0] = v21;
  v38[1] = v22;
  v23 = MEMORY[0x18D75FFDC](v20, v7, v38);
  v24 = v30;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v7);
  v25 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>();
  v37[0] = v23;
  v37[1] = v25;
  v26 = MEMORY[0x18D75FFDC](v20, v11, v37);
  v27 = (uint64_t)v31;
  static ViewBuilder.buildExpression<A>(_:)(v24, v11, v26);
  v28 = *(void (**)(char *, uint64_t))(v35 + 8);
  v28(v24, v11);
  static ViewBuilder.buildBlock<A>(_:)(v27, v11, v36);
  return ((uint64_t (*)(uint64_t, uint64_t))v28)(v27, v11);
}

uint64_t NavigationSplitView.ContentListContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  char v39;
  _QWORD v40[2];

  v36 = a2;
  type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ContentListStyleContext>);
  v3 = type metadata accessor for ModifiedContent();
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v30 - v5;
  v7 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v30 - v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
  v11 = type metadata accessor for ModifiedContent();
  v35 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v30 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v31 = (char *)&v30 - v16;
  v17 = *(_QWORD *)(a1 + 48);
  v18 = v32;
  View.styleContext<A>(_:)();
  LOBYTE(v18) = *(_QWORD *)(v18 + *(int *)(a1 + 68)) == 3;
  v19 = lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<ContentListStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<ContentListStyleContext>);
  v40[0] = v17;
  v40[1] = v19;
  v20 = MEMORY[0x1E0CE2E70];
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v40);
  View.navigationColumn(isSearchEnabled:)(v18, v3, v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
  swift_getKeyPath();
  v39 = 0;
  v22 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  v38[0] = v21;
  v38[1] = v22;
  v23 = MEMORY[0x18D75FFDC](v20, v7, v38);
  v24 = v30;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v7);
  v25 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>();
  v37[0] = v23;
  v37[1] = v25;
  v26 = MEMORY[0x18D75FFDC](v20, v11, v37);
  v27 = (uint64_t)v31;
  static ViewBuilder.buildExpression<A>(_:)(v24, v11, v26);
  v28 = *(void (**)(char *, uint64_t))(v35 + 8);
  v28(v24, v11);
  static ViewBuilder.buildBlock<A>(_:)(v27, v11, v36);
  return ((uint64_t (*)(uint64_t, uint64_t))v28)(v27, v11);
}

uint64_t NavigationSplitView.DetailContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = type metadata accessor for ModifiedContent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v19 - v12;
  v14 = *(_QWORD *)(a1 + 56);
  View.navigationColumn(searchAdjustment:)(1, v4, v14);
  v15 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  v19[0] = v14;
  v19[1] = v15;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v19);
  static ViewBuilder.buildExpression<A>(_:)(v9, v5, v16);
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v9, v5);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, v5, a2);
  return ((uint64_t (*)(char *, uint64_t))v17)(v13, v5);
}

BOOL static NavigationSplitViewVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance NavigationSplitViewVisibility.Kind@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NavigationSplitViewVisibility.Kind()
{
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NavigationSplitViewVisibility.Kind()
{
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NavigationSplitViewVisibility.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x616D6F7475417369;
  else
    return 1684957547;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NavigationSplitViewVisibility.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NavigationSplitViewVisibility.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationSplitViewVisibility.CodingKeys()
{
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NavigationSplitViewVisibility.CodingKeys()
{
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NavigationSplitViewVisibility.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;

  type metadata accessor for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  v10 = *v1;
  v13 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v10;
  v15 = 0;
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t NavigationSplitViewVisibility.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  type metadata accessor for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<NavigationSplitViewVisibility.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v16 = 0;
    lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v17;
    v15 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *a2 = v11;
    a2[1] = v13 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NavigationSplitViewVisibility@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return NavigationSplitViewVisibility.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NavigationSplitViewVisibility(_QWORD *a1)
{
  return NavigationSplitViewVisibility.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToThreeColumns, &type metadata for AnyNavigationSplitVisibility.ToThreeColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToThreeColumns, &type metadata for AnyNavigationSplitVisibility.ToThreeColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToThreeColumns, &type metadata for AnyNavigationSplitVisibility.ToThreeColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns, &type metadata for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns, &type metadata for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns, &type metadata for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToTwoColumns, &type metadata for AnyNavigationSplitVisibility.ToTwoColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToTwoColumns, &type metadata for AnyNavigationSplitVisibility.ToTwoColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationSplitVisibility.ToTwoColumns, &type metadata for AnyNavigationSplitVisibility.ToTwoColumns);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns);
  }
  return result;
}

void type metadata accessor for NavigationSplitView.InternalBody()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.CodingKeys, &unk_1E1AFA090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.CodingKeys, &unk_1E1AFA090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.CodingKeys, &unk_1E1AFA090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.CodingKeys, &unk_1E1AFA090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.Kind, &type metadata for NavigationSplitViewVisibility.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.Kind, &type metadata for NavigationSplitViewVisibility.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.Kind, &type metadata for NavigationSplitViewVisibility.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewVisibility.Kind, &type metadata for NavigationSplitViewVisibility.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
    v7 = a3(a1, &unk_1E1AFA090, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationSplitView(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  uint64_t v34;
  uint64_t *v35;

  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(_QWORD *)(v10 + 64) + 7;
  v14 = v11 | *(_DWORD *)(v6 + 80) & 0xF8 | v8;
  if (v14 > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((((v13 + ((v12 + (v9 & ~v8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8) + 20 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7));
    swift_retain();
  }
  else
  {
    v19 = ~v8;
    v20 = ~v11;
    v34 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v35 = a1;
    v21 = ((unint64_t)a1 + v9) & v19;
    v22 = ((unint64_t)a2 + v9) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v21, v22, v5);
    v23 = (v22 + v12) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v21 + v12) & v20, v23, v34);
    v24 = (v13 + ((v21 + v12) & v20)) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(unsigned __int8 *)(v25 + 18);
    if (v26 >= 2)
      v26 = *(_DWORD *)v25 + 2;
    if (v26 == 1)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
      *(_WORD *)(v24 + 16) = *(_WORD *)(v25 + 16);
      swift_retain();
      v27 = 1;
    }
    else
    {
      v27 = 0;
      *(_WORD *)v24 = *(_WORD *)v25;
      *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
    }
    swift_retain();
    *(_BYTE *)(v24 + 18) = v27;
    v28 = v24 + 26;
    v29 = (v25 + 26) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(unsigned __int8 *)(v29 + 17);
    if (v30 >= 2)
      v30 = *(_DWORD *)v29 + 2;
    v31 = v28 & 0xFFFFFFFFFFFFFFF8;
    if (v30 == 1)
    {
      *(_QWORD *)v31 = *(_QWORD *)v29;
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v29 + 8);
      *(_BYTE *)(v31 + 16) = *(_BYTE *)(v29 + 16);
      swift_retain();
      v32 = 1;
    }
    else
    {
      v32 = 0;
      *(_BYTE *)v31 = *(_BYTE *)v29;
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v29 + 8);
    }
    swift_retain();
    *(_BYTE *)(v31 + 17) = v32;
    *(_WORD *)(v31 + 18) = *(_WORD *)(v29 + 18);
    return v35;
  }
  return (uint64_t *)v18;
}

uint64_t destroy for NavigationSplitView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned __int8 *)(v11 + 18);
  if (v12 >= 2)
    v12 = *(_DWORD *)v11 + 2;
  if (v12 == 1)
    swift_release();
  swift_release();
  v13 = (v11 + 26) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(unsigned __int8 *)(v13 + 17);
  if (v14 >= 2)
    v14 = *(_DWORD *)v13 + 2;
  if (v14 == 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  char v26;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(unsigned __int8 *)(v20 + 18);
  if (v21 >= 2)
    v21 = *(_DWORD *)v20 + 2;
  if (v21 == 1)
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
    *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
    swift_retain();
    v22 = 1;
  }
  else
  {
    v22 = 0;
    *(_WORD *)v19 = *(_WORD *)v20;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  }
  swift_retain();
  *(_BYTE *)(v19 + 18) = v22;
  v23 = (v20 + 26) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v23 + 17);
  if (v24 >= 2)
    v24 = *(_DWORD *)v23 + 2;
  v25 = (v19 + 26) & 0xFFFFFFFFFFFFFFF8;
  if (v24 == 1)
  {
    *(_QWORD *)v25 = *(_QWORD *)v23;
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(v23 + 8);
    *(_BYTE *)(v25 + 16) = *(_BYTE *)(v23 + 16);
    swift_retain();
    v26 = 1;
  }
  else
  {
    v26 = 0;
    *(_BYTE *)v25 = *(_BYTE *)v23;
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(v23 + 8);
  }
  swift_retain();
  *(_BYTE *)(v25 + 17) = v26;
  *(_WORD *)(v25 + 18) = *(_WORD *)(v23 + 18);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  if (v19 != v20)
  {
    v21 = *(unsigned __int8 *)(v19 + 18);
    if (v21 >= 2)
      v21 = *(_DWORD *)v19 + 2;
    if (v21 == 1)
      swift_release();
    swift_release();
    v22 = *(unsigned __int8 *)(v20 + 18);
    if (v22 >= 2)
      v22 = *(_DWORD *)v20 + 2;
    if (v22 == 1)
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
      *(_BYTE *)(v19 + 18) = 1;
      swift_retain();
    }
    else
    {
      *(_WORD *)v19 = *(_WORD *)v20;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v19 + 18) = 0;
    }
    swift_retain();
  }
  v23 = (v19 + 26) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v20 + 26) & 0xFFFFFFFFFFFFFFF8;
  if (v23 != v24)
  {
    v25 = *(unsigned __int8 *)(v23 + 17);
    if (v25 >= 2)
      v25 = *(_DWORD *)v23 + 2;
    if (v25 == 1)
      swift_release();
    swift_release();
    v26 = *(unsigned __int8 *)(v24 + 17);
    if (v26 >= 2)
      v26 = *(_DWORD *)v24 + 2;
    if (v26 == 1)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
      *(_BYTE *)(v23 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v23 = *(_BYTE *)v24;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      *(_BYTE *)(v23 + 17) = 0;
    }
    swift_retain();
  }
  *(_WORD *)(v23 + 18) = *(_WORD *)(v24 + 18);
  return a1;
}

uint64_t initializeWithTake for NavigationSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  __int128 v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  __int128 v28;
  char v29;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(unsigned __int8 *)(v20 + 18);
  if (v21 >= 2)
    v21 = *(_DWORD *)v20 + 2;
  if (v21 == 1)
  {
    v22 = *(_OWORD *)v20;
    *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
    *(_OWORD *)v19 = v22;
    v23 = 1;
  }
  else
  {
    v23 = 0;
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  *(_BYTE *)(v19 + 18) = v23;
  v24 = v19 + 26;
  v25 = (v20 + 26) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(unsigned __int8 *)(v25 + 17);
  if (v26 >= 2)
    v26 = *(_DWORD *)v25 + 2;
  v27 = v24 & 0xFFFFFFFFFFFFFFF8;
  if (v26 == 1)
  {
    v28 = *(_OWORD *)v25;
    *(_BYTE *)(v27 + 16) = *(_BYTE *)(v25 + 16);
    *(_OWORD *)v27 = v28;
    v29 = 1;
  }
  else
  {
    v29 = 0;
    *(_OWORD *)v27 = *(_OWORD *)v25;
  }
  *(_BYTE *)(v27 + 17) = v29;
  *(_WORD *)(v27 + 18) = *(_WORD *)(v25 + 18);
  return a1;
}

uint64_t assignWithTake for NavigationSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  char v30;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  if (v19 != v20)
  {
    v21 = *(unsigned __int8 *)(v19 + 18);
    if (v21 >= 2)
      v21 = *(_DWORD *)v19 + 2;
    if (v21 == 1)
      swift_release();
    swift_release();
    v22 = *(unsigned __int8 *)(v20 + 18);
    if (v22 >= 2)
      v22 = *(_DWORD *)v20 + 2;
    if (v22 == 1)
    {
      v23 = *(_OWORD *)v20;
      *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
      *(_OWORD *)v19 = v23;
      v24 = 1;
    }
    else
    {
      v24 = 0;
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    *(_BYTE *)(v19 + 18) = v24;
  }
  v25 = (v19 + 26) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v20 + 26) & 0xFFFFFFFFFFFFFFF8;
  if (v25 != v26)
  {
    v27 = *(unsigned __int8 *)(v25 + 17);
    if (v27 >= 2)
      v27 = *(_DWORD *)v25 + 2;
    if (v27 == 1)
      swift_release();
    swift_release();
    v28 = *(unsigned __int8 *)(v26 + 17);
    if (v28 >= 2)
      v28 = *(_DWORD *)v26 + 2;
    if (v28 == 1)
    {
      v29 = *(_OWORD *)v26;
      *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
      *(_OWORD *)v25 = v29;
      v30 = 1;
    }
    else
    {
      v30 = 0;
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    *(_BYTE *)(v25 + 17) = v30;
  }
  *(_WORD *)(v25 + 18) = *(_WORD *)(v26 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView(_DWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v4 = a3[3];
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 > v9)
    v9 = *(_DWORD *)(v10 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = *(_QWORD *)(v5 + 64) + v12;
  v14 = *(_QWORD *)(v7 + 64);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = *(_QWORD *)(v10 + 64) + 7;
  if (v9 < a2
    && *((_BYTE *)a1
       + ((((v16 + ((v14 + v15 + (v13 & ~v12)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8)
       + 20))
  {
    return v9 + *a1 + 1;
  }
  if (v6 == v9)
    return (*(uint64_t (**)(void))(v5 + 48))();
  v18 = ((unint64_t)a1 + v13) & ~v12;
  if (v8 == v9)
    return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v7 + 48))(v18, *(unsigned int *)(v7 + 84), v4);
  v19 = (v18 + v14 + v15) & ~v15;
  if (v11 == v9)
    return (*(uint64_t (**)(unint64_t))(v10 + 48))(v19);
  v20 = *(unsigned __int8 *)(((v16 + v19) & 0xFFFFFFFFFFFFF8) + 0x12);
  if (v20 >= 2)
    return (v20 ^ 0xFF) + 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for NavigationSplitView(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  void (*v22)(_DWORD *);
  _DWORD *v23;
  unint64_t v24;

  v6 = *(_QWORD *)(a4[2] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[3] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = *(_DWORD *)(v6 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_QWORD *)(a4[4] - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12 > v10)
    v10 = *(_DWORD *)(v11 + 84);
  if (v10 <= 0xFE)
    v13 = 254;
  else
    v13 = v10;
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14;
  v16 = *(_QWORD *)(v8 + 64);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = *(_QWORD *)(v11 + 64) + 7;
  v19 = (((v18 + ((v16 + v17 + (v15 & ~v14)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8;
  v20 = v19 + 20;
  if (v13 < a2)
  {
    v21 = ~v13 + a2;
    bzero(a1, v19 + 20);
    *a1 = v21;
    if (v13 < a3)
      *((_BYTE *)a1 + v20) = 1;
    return;
  }
  if (v13 < a3)
    *((_BYTE *)a1 + v20) = 0;
  if (a2)
  {
    if (v7 == v13)
    {
      v22 = *(void (**)(_DWORD *))(v6 + 56);
      v23 = a1;
LABEL_21:
      v22(v23);
      return;
    }
    v23 = (_DWORD *)(((unint64_t)a1 + v15) & ~v14);
    if (v9 == v13)
    {
      v22 = *(void (**)(_DWORD *))(v8 + 56);
      goto LABEL_21;
    }
    v23 = (_DWORD *)(((unint64_t)v23 + v16 + v17) & ~v17);
    if (v12 == v13)
    {
      v22 = *(void (**)(_DWORD *))(v11 + 56);
      goto LABEL_21;
    }
    v24 = ((unint64_t)v23 + v18) & 0xFFFFFFFFFFFFFFF8;
    if (a2 > 0xFE)
    {
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_DWORD *)(v24 + 15) = 0;
      *(_DWORD *)v24 = a2 - 255;
    }
    else
    {
      *(_BYTE *)(v24 + 18) = -(char)a2;
    }
  }
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewVisibility(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A39644 + 4 * byte_187C7EC85[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_187A39678 + 4 * byte_187C7EC80[v4]))();
}

uint64_t sub_187A39678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187A39680(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x187A39688);
  return result;
}

uint64_t sub_187A39694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187A3969CLL);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_187A396A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187A396A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

void sub_187A396B4()
{
  type metadata accessor for NavigationSplitView.InternalBody();
}

uint64_t sub_187A396DC(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.InternalBody, a1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewVisibility.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A39744 + 4 * byte_187C7EC8F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A39778 + 4 * byte_187C7EC8A[v4]))();
}

uint64_t sub_187A39778(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A39780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A39788);
  return result;
}

uint64_t sub_187A39794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A3979CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A397A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A397A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewVisibility.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A39800 + 4 * byte_187C7EC99[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A39834 + 4 * byte_187C7EC94[v4]))();
}

uint64_t sub_187A39834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A3983C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A39844);
  return result;
}

uint64_t sub_187A39850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A39858);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A3985C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A39864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NavigationSplitViewVisibility.CodingKeys()
{
  return &unk_1E1AFA090;
}

uint64_t type metadata completion function for NavigationSplitView.InternalBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationSplitView.InternalBody(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t *v28;

  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = *(_QWORD *)(v10 + 64) + 7;
  v14 = v11 | *(_DWORD *)(v6 + 80) & 0xF8 | v8;
  if (v14 > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v13 + ((v12 + (v9 & ~v8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 49 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v22 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    v18 = ~v8;
    v19 = ~v11;
    v27 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v28 = a1;
    v20 = ((unint64_t)a1 + v9) & v18;
    v21 = ((unint64_t)a2 + v9) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v20, v21, v5);
    v22 = v28;
    v23 = (v21 + v12) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v20 + v12) & v19, v23, v27);
    v24 = (v13 + ((v20 + v12) & v19)) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
    *(_WORD *)(v24 + 16) = *(_WORD *)(v25 + 16);
    *(_WORD *)(v24 + 18) = *(_WORD *)(v25 + 18);
    *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
    *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v22;
}

uint64_t destroy for NavigationSplitView.InternalBody(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  (*(void (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v7
                                                                             + *(_QWORD *)(v6 + 64)
                                                                             + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8)
                                                                                                  + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
  *(_WORD *)(v19 + 18) = *(_WORD *)(v20 + 18);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_retain();
  swift_release();
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
  *(_WORD *)(v19 + 18) = *(_WORD *)(v20 + 18);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  return a1;
}

uint64_t initializeWithTake for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)(v20 + 16);
  v21 = *(_OWORD *)(v20 + 32);
  v23 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  *(_OWORD *)(v19 + 16) = v22;
  *(_OWORD *)(v19 + 32) = v21;
  *(_OWORD *)v19 = v23;
  return a1;
}

uint64_t assignWithTake for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_release();
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_release();
  *(_WORD *)(v19 + 16) = *(_WORD *)(v20 + 16);
  *(_WORD *)(v19 + 18) = *(_WORD *)(v20 + 18);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  swift_release();
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  swift_release();
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.InternalBody(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v26;

  v5 = a3[2];
  v4 = a3[3];
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = *(_DWORD *)(v6 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = a3[4];
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  if (v13 > v10)
    v10 = *(_DWORD *)(v12 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14;
  v16 = *(_QWORD *)(v8 + 64);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = *(_QWORD *)(v12 + 64) + 7;
  if (v10 < a2)
  {
    v19 = ((v18 + ((v16 + v17 + (v15 & ~(_DWORD)v14)) & ~(_DWORD)v17)) & 0xFFFFFFF8) + 49;
    v20 = (a2 - v10 + 255) >> (8 * v19);
    if (v19 < 4)
      v21 = v20 + 1;
    else
      v21 = 2;
    if (v21 >= 0x10000)
      v22 = 4;
    else
      v22 = 2;
    if (v21 < 0x100)
      v22 = 1;
    if (v21 >= 2)
      v23 = v22;
    else
      v23 = 0;
    __asm { BR              X21 }
  }
  if (v7 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v13 = *(unsigned int *)(v6 + 84);
    v11 = v5;
    return v25(a1, v13, v11);
  }
  a1 = (v15 + a1) & ~v14;
  if (v9 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v13 = *(unsigned int *)(v8 + 84);
    v11 = v4;
    return v25(a1, v13, v11);
  }
  a1 = (a1 + v16 + v17) & ~v17;
  if ((_DWORD)v13 == v10)
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v25(a1, v13, v11);
  }
  v26 = *(_QWORD *)(((v18 + a1) & 0xFFFFFFFFFFFFF8) + 8);
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  return (v26 + 1);
}

void storeEnumTagSinglePayload for NavigationSplitView.InternalBody(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = ((v12 + ((v10 + v11 + ((*(_QWORD *)(v5 + 64) + v9) & ~v9)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 49;
  if (v7 >= a3)
  {
    v15 = 0u;
    if (v7 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v13 <= 3)
      v14 = ((a3 - v7 + 255) >> (8 * v13)) + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 < 2)
      v15 = 0;
    if (v7 >= a2)
LABEL_20:
      __asm { BR              X22 }
  }
  if (v13 >= 4)
    v16 = ~v7 + a2;
  else
    v16 = (~(_BYTE)v7 + a2);
  bzero(a1, ((v12 + ((v10 + v11 + ((*(_QWORD *)(v5 + 64) + v9) & ~v9)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 49);
  if ((_DWORD)v13 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_187A3A350()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A3A418);
}

void sub_187A3A358(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A3A360);
  JUMPOUT(0x187A3A418);
}

void sub_187A3A39C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A3A418);
}

void sub_187A3A3A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A3A418);
}

void sub_187A3A3AC(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (a2)
  {
    if (v3 != v4 && v2 != v4)
      JUMPOUT(0x187A3A3B8);
    JUMPOUT(0x187A3A3D0);
  }
  JUMPOUT(0x187A3A418);
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.InternalBody()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

void type metadata accessor for NavigationSplitView.SidebarContent()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for NavigationSplitView.ContentListContent()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for NavigationSplitView.DetailContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in NavigationSplitView.InternalBody.body.getter);
}

uint64_t partial apply for closure #2 in NavigationSplitView.InternalBody.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in NavigationSplitView.InternalBody.body.getter);
}

uint64_t partial apply for closure #3 in NavigationSplitView.InternalBody.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in NavigationSplitView.InternalBody.body.getter);
}

uint64_t specialized NavigationSplitViewVisibility.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616D6F7475417369 && a2 == 0xEB00000000636974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t type metadata completion function for NavigationSplitView.DetailContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.DetailContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A3A7FC + 4 * byte_187C7ECAD[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationSplitView.DetailContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for NavigationSplitView.ContentListContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationSplitView.ContentListContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for NavigationSplitView.ContentListContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitView.ContentListContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for NavigationSplitView.ContentListContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.ContentListContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_187A3ACA8 + 4 * byte_187C7ECBB[v8]))();
}

void storeEnumTagSinglePayload for NavigationSplitView.ContentListContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_187A3ADE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187A3ADF0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A3ADF8);
}

void sub_187A3AE14()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187A3AE1C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_187A3AE24(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x187A3AE2CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for NavigationSplitView.SidebarContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.SidebarContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_187A3AF2C + 4 * byte_187C7ECCA[v8]))();
}

void storeEnumTagSinglePayload for NavigationSplitView.SidebarContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_187A3B06C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187A3B074(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A3B07CLL);
}

void sub_187A3B098()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187A3B0A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_187A3B0A8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x187A3B0B0);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void sub_187A3B0C8()
{
  type metadata accessor for NavigationSplitView.SidebarContent();
}

void sub_187A3B10C(uint64_t a1)
{
  lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.SidebarContent, a1);
  type metadata accessor for StaticSourceWriter();
}

void sub_187A3B144()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for NavigationSplitView.ContentListContent();
}

void sub_187A3B174(uint64_t a1)
{
  lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.ContentListContent, a1);
  type metadata accessor for StaticSourceWriter();
}

void sub_187A3B1AC()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for NavigationSplitView.DetailContent();
}

void sub_187A3B1D8(uint64_t a1)
{
  lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitView<A, B, C>.DetailContent, a1);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187A3B210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[20];

  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v9[0] = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
  v9[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v4 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v9);
  v8[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v7[0] = MEMORY[0x18D75FFDC](v4, v1, v8);
  v7[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v6[0] = MEMORY[0x18D75FFDC](v4, v2, v7);
  v6[1] = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.DetailContent()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.ContentListContent()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>.SidebarContent()
{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E0CE5528], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<SidebarStyleContext>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for StyleContextWriter();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187A3B468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarStyleContext>);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<SidebarStyleContext>);
  v5 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  v7[0] = MEMORY[0x18D75FFDC](v5, v3, v8);
  v7[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v5, v4, v7);
}

uint64_t sub_187A3B588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 32);
  type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<ContentListStyleContext>);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<ContentListStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<ContentListStyleContext>);
  v5 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  v7[0] = MEMORY[0x18D75FFDC](v5, v3, v8);
  v7[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v5, v4, v7);
}

uint64_t sub_187A3B6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  int v28;
  uint64_t result;
  int v30;
  int v31;
  uint64_t v32;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;

  v10 = *a1;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = a2[5];
  v15 = a2[6];
  v16 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  v17 = v51;
  v18 = v52;
  v19 = v53;
  v20 = HIDWORD(v53);
  v51 = v11;
  LODWORD(v52) = v12;
  v53 = v13;
  v54 = *(_OWORD *)(a2 + 3);
  v55 = v14;
  v56 = v15;
  v57 = v16;
  v30 = v20;
  v31 = v10;
  v46 = v10;
  v36 = v18;
  v37 = v17;
  v39 = v17;
  v40 = v18;
  v35 = v19;
  LOBYTE(v41) = v19;
  HIDWORD(v41) = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ControlWidgetTemplateModifier.makeBody(modifier:inputs:fields:)((uint64_t)&v50, (uint64_t)&v47, (uint64_t)&v46, (uint64_t)&v51, (uint64_t)&v39, a5, a6);
  v21 = v50;
  v22 = v48;
  v32 = v47;
  LOBYTE(v15) = v49;
  v39 = a3;
  v40 = a4;
  v24 = type metadata accessor for ControlWidgetTemplateModifier_Content.BodyInput(0, a5, a6, v23);
  type metadata accessor for (_:_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateModifier_Content<A>.BodyInput, v24);
  _SceneInputs.append<A, B>(_:to:)();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = v21;
  v39 = v51;
  LODWORD(v40) = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v47, &v50, &v39, AssociatedTypeWitness, AssociatedConformanceWitness);
  v27 = v47;
  v28 = v48;
  if ((v15 & 1) == 0)
  {
    v47 = v32;
    v48 = v22;
    v50 = v31;
    v39 = v37;
    v40 = v36;
    LOBYTE(v41) = v35;
    HIDWORD(v41) = v30;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a7 = v27;
  *(_DWORD *)(a7 + 8) = v28;
  return result;
}

uint64_t static ControlWidgetTemplateModifier._kind.getter()
{
  return static ControlWidgetTemplateModifier._kind.getter();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static ControlWidgetTemplateModifier._controlType.getter()
{
  return static ControlWidgetTemplateModifier._controlType.getter();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static ControlWidgetTemplateModifier.makeBody(modifier:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v10 = type metadata accessor for ControlWidgetTemplateModifierBodyAccessor(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateModifierBodyAccessor<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ControlWidgetTemplateModifier_Content.BodyInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetTemplateModifier_Content.BodyInput);
}

uint64_t ControlWidgetTemplateModifierBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for ControlWidgetTemplateModifierBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateModifierBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetTemplateModifierBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return ControlWidgetTemplateModifierBodyAccessor.updateBody(of:changed:)(result, a2);
}

void ControlWidgetTemplateModifier<>.body(content:)()
{
  specialized ControlWidgetTemplateModifier<>.body(content:)();
}

uint64_t static EmptyControlWidgetTemplate._makeControlWidgetTemplate(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 14);
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 3);
  v11 = *(_OWORD *)(a2 + 5);
  v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for ControlWidgetTemplateModifier.body(content:) in conformance EmptyControlWidgetTemplate()
{
  specialized ControlWidgetTemplateModifier.controlBodyError()();
}

uint64_t ControlWidgetTemplate.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static ModifiedContent<>._kind.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t static ModifiedContent<>._controlType.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _BYTE v28[12];

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v16 = a2[3];
  v17 = a2[4];
  _GraphValue.subscript.getter();
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v24 = v16;
  v25 = v17;
  v26 = v20;
  v27 = v15;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[4];

  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v16 = *(_OWORD *)(a2 + 5);
  v13 = a2[3];
  v14 = a2[4];
  _GraphValue.subscript.getter();
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v20 = v13;
  v21 = v14;
  v22 = v16;
  v23 = v12;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a6 + 48))(v24, &v17, a4, a6);
}

void protocol witness for ControlWidgetTemplate.body.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for static ControlWidgetTemplate._kind.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return static ModifiedContent<>._kind.getter(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for static ControlWidgetTemplate._controlType.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return static ModifiedContent<>._controlType.getter(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  __int128 v23;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  _BYTE v33[12];

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v23 = *(_OWORD *)(a2 + 5);
  v18 = a2[3];
  v19 = a2[4];
  _GraphValue.subscript.getter();
  v26 = v15;
  v27 = v16;
  v28 = v17;
  v29 = v18;
  v30 = v19;
  v31 = v23;
  v32 = v24;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a7;
  *(_QWORD *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  v21 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

void protocol witness for ControlWidgetTemplateModifier.body(content:) in conformance <> ModifiedContent<A, B>()
{
  specialized ControlWidgetTemplateModifier<>.body(content:)();
}

uint64_t protocol witness for static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16));
}

uint64_t static ControlWidgetTemplateModifier_Content._kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t static ControlWidgetTemplateModifier_Content._controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t static ControlWidgetTemplateModifier_Content._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(uint64_t, _QWORD);
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 56);
  v20 = *(void (**)(uint64_t, _QWORD))a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 24);
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v9 = type metadata accessor for ControlWidgetTemplateModifier_Content.BodyInput(0, a3, a4, a4);
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateModifier_Content<A>.BodyInput, v9);
  _SceneInputs.popLast<A, B>(_:)();
  v10 = v13;
  if (v13)
  {
    v13 = v20;
    LODWORD(v14) = v21;
    v15 = v22;
    v16 = v23;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v10(v11, &v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

unint64_t static ControlWidgetTemplateModifier_Content.BodyInput.defaultValue.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;

  result = type metadata accessor for (_:_:)();
  *a1 = 0;
  return result;
}

unint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ControlWidgetTemplateModifier_Content<A>.BodyInput@<X0>(_QWORD *a1@<X8>)
{
  return static ControlWidgetTemplateModifier_Content.BodyInput.defaultValue.getter(a1);
}

uint64_t protocol witness for static ControlWidgetTemplate._kind.getter in conformance ControlWidgetTemplateModifier_Content<A>(uint64_t a1)
{
  return static ControlWidgetTemplateModifier_Content._kind.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for static ControlWidgetTemplate._controlType.getter in conformance ControlWidgetTemplateModifier_Content<A>(uint64_t a1)
{
  return static ControlWidgetTemplateModifier_Content._controlType.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:) in conformance ControlWidgetTemplateModifier_Content<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ControlWidgetTemplateModifier_Content._makeControlWidgetTemplate(control:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void specialized ControlWidgetTemplateModifier.controlBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000187BEDE10;
  v0._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ControlWidgetTemplateModifier<>.body(content:)()
{
  specialized ControlWidgetTemplateModifier.controlBodyError()();
}

uint64_t sub_187A3C5FC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_187A3C61C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t dispatch thunk of ControlWidgetTemplateModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static ControlWidgetTemplateModifier._kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static ControlWidgetTemplateModifier._controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata accessor for ControlWidgetTemplateModifier_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetTemplateModifier_Content);
}

void base witness table accessor for PropertyKey in ControlWidgetTemplateModifier_Content<A>.BodyInput()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for ControlWidgetTemplateModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateModifier_Content<A>.BodyInput);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ControlWidgetTemplateModifierBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetTemplateModifierBodyAccessor);
}

uint64_t type metadata accessor for PrimitiveDragResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PrimitiveDragResponder;
  if (!type metadata singleton initialization cache for PrimitiveDragResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PrimitiveDragResponder()
{
  return swift_initClassMetadata2();
}

uint64_t PrimitiveDragResponder.__allocating_init(inputs:)()
{
  *(_BYTE *)(swift_allocObject() + 208) = 0;
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t PrimitiveDragResponder.__allocating_init(inputs:viewSubgraph:)()
{
  *(_BYTE *)(swift_allocObject() + 208) = 0;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t ObjC metadata update function for PrimitiveDragResponder()
{
  return type metadata accessor for PrimitiveDragResponder();
}

void CustomHoverEffect.hoverEffectGroup(id:in:behavior:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectGroup.init(id:in:behavior:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CustomHoverEffect.hoverEffectGroup(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.hoverEffectGroup()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.Behavior.followsGroup.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectGroup.init(_:behavior:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectGroup.behavior(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.named(_:in:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.custom(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void HoverEffectGroup.scope(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.implicit(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.view(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static HoverEffectGroup.Scope.local.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t outlined copy of HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 - 1 <= 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 - 1 <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for HoverEffectGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for HoverEffectGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  outlined consume of HoverEffectGroupInfo.Identifier(v8, v9, v10, v11);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t assignWithTake for HoverEffectGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, v9);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectGroup(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 27))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 26);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 0;
    if (a2)
      *(_BYTE *)(result + 26) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup()
{
  return &type metadata for HoverEffectGroup;
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroup.Behavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A3CC94 + 4 * byte_187C7F495[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A3CCC8 + 4 * byte_187C7F490[v4]))();
}

uint64_t sub_187A3CCC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A3CCD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A3CCD8);
  return result;
}

uint64_t sub_187A3CCE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A3CCECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A3CCF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A3CCF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup.Behavior()
{
  return &type metadata for HoverEffectGroup.Behavior;
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroup.Scope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A3CD60 + 4 * byte_187C7F49F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A3CD94 + 4 * byte_187C7F49A[v4]))();
}

uint64_t sub_187A3CD94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A3CD9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A3CDA4);
  return result;
}

uint64_t sub_187A3CDB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A3CDB8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A3CDBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A3CDC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup.Scope()
{
  return &type metadata for HoverEffectGroup.Scope;
}

uint64_t destroy for HoverEffectGroup.Identifier(uint64_t a1)
{
  return outlined consume of HoverEffectGroupInfo.Identifier(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for HoverEffectGroup.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for HoverEffectGroup.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of HoverEffectGroupInfo.Identifier(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for HoverEffectGroup.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of HoverEffectGroupInfo.Identifier(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectGroup.Identifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroup.Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup.Identifier()
{
  return &type metadata for HoverEffectGroup.Identifier;
}

unint64_t lazy protocol witness table accessor for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier;
  if (!lazy protocol witness table cache variable for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEffectGroup.Identifier, &type metadata for HoverEffectGroup.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier);
  }
  return result;
}

void View.hoverEffectGroup(_:)()
{
  CustomHoverEffect.hoverEffectGroup(_:)();
}

void static HoverEffectGroup.Behavior.activatesGroup.getter()
{
  static HoverEffectGroup.Behavior.followsGroup.getter();
}

void static HoverEffectGroup.Behavior.ignoresGroup.getter()
{
  static HoverEffectGroup.Behavior.followsGroup.getter();
}

void static HoverEffectGroup.Scope.global.getter()
{
  static HoverEffectGroup.Scope.local.getter();
}

void View.hoverEffectGroup(id:in:behavior:)()
{
  CustomHoverEffect.hoverEffectGroup(id:in:behavior:)();
}

void static HoverEffectGroup.namespace(_:)()
{
  static HoverEffectGroup.view(_:)();
}

void static HoverEffectGroup.Behavior.== infix(_:_:)()
{
  static HoverEffectGroup.== infix(_:_:)();
}

void static HoverEffectGroup.Scope.== infix(_:_:)()
{
  static HoverEffectGroup.== infix(_:_:)();
}

uint64_t type metadata completion function for AccessibilityDetachedPropertyModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityDetachedPropertyModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_23;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v11))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
  }
  else
  {
    if (v11 <= 0xFF)
    {
      if (v11 < 2)
        goto LABEL_23;
LABEL_7:
      v10 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_23;
LABEL_14:
      v12 = (v10 - 1) << v9;
      if (v8 > 3)
        v12 = 0;
      if ((_DWORD)v7 != -1)
      {
        if (v8 <= 3)
          v13 = v7 + 1;
        else
          v13 = 4;
        __asm { BR              X12 }
      }
      v16 = v6 + v12;
      return (v16 + 1);
    }
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
  }
LABEL_23:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  v16 = (v15 + 2147483646) & 0x7FFFFFFF;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for AccessibilityDetachedPropertyModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for AccessibilityDetachedPropertyModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDetachedPropertyModifier);
}

ValueMetadata *type metadata accessor for AccessibilityDetachedPropertyWriterModifier()
{
  return &type metadata for AccessibilityDetachedPropertyWriterModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityDetachedPropertyWriterModifier()
{
  return &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityDetachedPropertyModifier<A>()
{
  return &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
}

uint64_t TabContent.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v24[12];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a5;
  v26 = a8;
  v27 = a3;
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = &v24[-v15];
  v17 = type metadata accessor for AccessibilityDetachedPropertyModifier(0, a4, a6, a7);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = &v24[-v21];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v13 + 16))(v16, a1, AssociatedTypeWitness, v20);
  AccessibilityDetachedPropertyModifier.init(value:isEnabled:)((uint64_t)v16, v25, a4, a6, a7, (uint64_t)v22);
  TabContent.modifier<A>(_:)((uint64_t)v22, v27, v17, v26);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v22, v17);
}

void View.accessibilityApplyDetachedProperties()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t AccessibilityDetachedPropertyModifier.init(value:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  result = type metadata accessor for AccessibilityDetachedPropertyModifier(0, a3, a4, a5);
  *(_BYTE *)(a6 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance AccessibilityPropertyInput(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if ((v2 & 1) != 0 || (v3 & 1) != 0)
    return v2 & v3;
  else
    return static WeakAttribute.== infix(_:_:)();
}

uint64_t static AccessibilityDetachedPropertyModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t *);
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_BYTE *)(a2 + 80);
  if ((v12 & 0x1000) != 0)
  {
    v34 = a4;
    v35 = a3;
    v45 = v7;
    v46 = v8;
    v47 = v9;
    *(_QWORD *)&v48 = __PAIR64__(v10, v11);
    *((_QWORD *)&v48 + 1) = __PAIR64__(v12, v13);
    v49 = v15;
    *(_QWORD *)&v50 = v14;
    *((_QWORD *)&v50 + 1) = v16;
    v51 = v17;
    v52 = v18;
    v53 = v19;
    lazy protocol witness table accessor for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    type metadata accessor for AccessibilityDetachedPropertyModifier(255, a5, a6, a7);
    type metadata accessor for _GraphValue();
    v24 = _GraphValue.value.getter();
    if ((v37 & 1) != 0)
    {
      LODWORD(v36) = v24;
      MEMORY[0x1E0C80A78](v24, v25);
      v32 = type metadata accessor for AccessibilityDetachedPropertyModifier.InitialProperty(0, a5, a6, a7);
      v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDetachedPropertyModifier<A>.InitialProperty, v32);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityProperties>, MEMORY[0x1E0CE58C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_30, (uint64_t)v31, v32, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v27);
    }
    else
    {
      v37 = v24;
      MEMORY[0x1E0C80A78](v24, v25);
      v32 = type metadata accessor for AccessibilityDetachedPropertyModifier.MergedProperties(0, a5, a6, a7);
      v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDetachedPropertyModifier<A>.MergedProperties, v32);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityProperties>, MEMORY[0x1E0CE58C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v31, v32, MEMORY[0x1E0DEDCE8], v28, MEMORY[0x1E0DEDD18], v29);
    }
    v36 = AGCreateWeakAttribute();
    LOBYTE(v37) = 0;
    PropertyList.subscript.setter();
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v39 = v48;
    v40 = v49;
    v41 = v50;
    v42 = v51;
    v43 = v52;
    v44 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v30 = swift_bridgeObjectRetain();
    v35(v30, &v36);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    v45 = *(_QWORD *)a2;
    v46 = v8;
    v47 = v9;
    *(_QWORD *)&v48 = __PAIR64__(v10, v11);
    *((_QWORD *)&v48 + 1) = __PAIR64__(v12, v13);
    v49 = v15;
    *(_QWORD *)&v50 = v14;
    *((_QWORD *)&v50 + 1) = v16;
    v51 = v17;
    v52 = v18;
    v53 = v19;
    return ((uint64_t (*)(uint64_t, uint64_t *))a3)(a1, &v45);
  }
}

uint64_t AccessibilityDetachedPropertyModifier.MergedProperties.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t Value;
  void (*v21)(char *, uint64_t, uint64_t);
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v28 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - v12;
  v29 = a3;
  v14 = type metadata accessor for AccessibilityDetachedPropertyModifier(0, a1, a2, a3);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - v17;
  if (!AGGraphGetWeakValue() || (v19 = swift_bridgeObjectRetain()) == 0)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v19 = Dictionary.init(minimumCapacity:)();
  }
  v32 = v19;
  Value = AGGraphGetValue();
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v21(v18, Value, v14);
  v22 = v18[*(int *)(v14 + 44)];
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v22 == 1)
  {
    v31 = v32;
    AccessibilityProperties.subscript.getter();
    v24 = AGGraphGetValue();
    v21(v18, v24, v14);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, AssociatedTypeWitness);
    v25 = v27;
    v26 = *(void (**)(char *, uint64_t))(v27 + 8);
    v26(v18, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v13, AssociatedTypeWitness);
    AccessibilityProperties.subscript.setter();
    result = ((uint64_t (*)(char *, uint64_t))v26)(v13, AssociatedTypeWitness);
  }
  *v30 = v32;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityDetachedPropertyModifier<A>.MergedProperties@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return AccessibilityDetachedPropertyModifier.MergedProperties.value.getter(a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AccessibilityDetachedPropertyModifier<A>.MergedProperties(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDetachedPropertyModifier<A>.MergedProperties, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t AccessibilityDetachedPropertyModifier.InitialProperty.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Value;
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t *v23;
  uint64_t v24;

  v23 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for AccessibilityDetachedPropertyModifier(0, a1, a2, a3);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v21 - v14;
  Value = AGGraphGetValue();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17(v15, Value, v11);
  v18 = v15[*(int *)(v11 + 44)];
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (v18 == 1)
  {
    v19 = AGGraphGetValue();
    v17(v15, v19, v11);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v15, AssociatedTypeWitness);
    AccessibilityProperties.init<A>(_:_:)();
    result = v24;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    result = Dictionary.init(minimumCapacity:)();
  }
  *v23 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityDetachedPropertyModifier<A>.InitialProperty@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return AccessibilityDetachedPropertyModifier.InitialProperty.value.getter(a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AccessibilityDetachedPropertyModifier<A>.InitialProperty(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDetachedPropertyModifier<A>.InitialProperty, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityDetachedPropertyModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityDetachedPropertyModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t *a5)
{
  return static AccessibilityDetachedPropertyModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4]);
}

uint64_t static AccessibilityDetachedPropertyWriterModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  int v15;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v7 = *((_DWORD *)a1 + 6);
  v6 = *((_DWORD *)a1 + 7);
  v12 = a1[4];
  v9 = a1[5];
  v8 = a1[6];
  v10 = *((_DWORD *)a1 + 14);
  v13 = *((_DWORD *)a1 + 15);
  v14 = *((_OWORD *)a1 + 4);
  v15 = *((_DWORD *)a1 + 20);
  *(_QWORD *)&v23 = v8;
  DWORD2(v23) = v10;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    *(_QWORD *)&v23 = v8;
    DWORD2(v23) = v10;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
      goto LABEL_4;
  }
  lazy protocol witness table accessor for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((BYTE8(v23) & 1) == 0)
  {
    *(_QWORD *)&v19 = v3;
    DWORD2(v19) = v4;
    *(_QWORD *)&v20 = v5;
    *((_QWORD *)&v20 + 1) = __PAIR64__(v6, v7);
    *(_QWORD *)&v21 = v12;
    *((_QWORD *)&v21 + 1) = v9;
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = __PAIR64__(v13, v10);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v26 = v22;
    v27 = v14;
    v28 = v15;
    v23 = v19;
    v24 = v20;
    v25 = v21;
    outlined retain of _ViewInputs((uint64_t)&v23);
    specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v18, (uint64_t)&v23, a2, a3);
    outlined release of _ViewInputs((uint64_t)&v23);
    return outlined release of _ViewInputs((uint64_t)&v23);
  }
  else
  {
LABEL_4:
    *(_QWORD *)&v23 = v3;
    DWORD2(v23) = v4;
    *(_QWORD *)&v24 = v5;
    *((_QWORD *)&v24 + 1) = __PAIR64__(v6, v7);
    *(_QWORD *)&v25 = v12;
    *((_QWORD *)&v25 + 1) = v9;
    *(_QWORD *)&v26 = v8;
    *((_QWORD *)&v26 + 1) = __PAIR64__(v13, v10);
    v27 = v14;
    v28 = v15;
    return ((uint64_t (*)(void))a2)();
  }
}

uint64_t AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (AGGraphGetWeakValue())
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    Dictionary.init(minimumCapacity:)();
  }
  AccessibilityAttachment.init(properties:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v4;
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier.value.getter(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityDetachedPropertyWriterModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPropertyInput, &unk_1E1AED3C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPropertyInput, &unk_1E1AED3C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier, &unk_1E1B098B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityDetachedPropertyModifier.InitialProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDetachedPropertyModifier.InitialProperty);
}

uint64_t type metadata accessor for AccessibilityDetachedPropertyModifier.MergedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDetachedPropertyModifier.MergedProperties);
}

void *type metadata accessor for AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier()
{
  return &unk_1E1B098B0;
}

void *type metadata accessor for AccessibilityPropertyInput()
{
  return &unk_1E1AED3C8;
}

void base witness table accessor for _AttributeBody in AccessibilityDetachedPropertyModifier<A>.InitialProperty()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityDetachedPropertyModifier<A>.MergedProperties()
{
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for PlatformListViewBase.updateViewGraphForDisplay(_:sizeThatFitsCallback:) in conformance ListTableViewHeaderFooter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PlatformListViewBase<>.updateViewGraphForDisplay(_:sizeThatFitsCallback:)(a1, a2, a3, a4, a5, a5);
}

void PlatformListViewBase<>.updateViewGraphForDisplay(_:sizeThatFitsCallback:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(a1, a2, a3, a4, a6);
}

Swift::Void __swiftcall PlatformListViewBase.updateViewGraphForDisplay(_:)(Swift::Bool a1)
{
  uint64_t v1;

  (*(void (**)(Swift::Bool, _QWORD, _QWORD))(v1 + 120))(a1, 0, 0);
}

void PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  CGRect v21;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 56);
  v11 = v10(a4, a5);
  if (v11)
  {
    v12 = (void *)v11;
    if (((_UIHostingView.isHiddenForReuse.getter() ^ a1) & 1) == 0)
      _UIHostingView.isHiddenForReuse.setter((a1 & 1) == 0);

  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
  if (v13)
  {
    v14 = (void *)v13;
    if (((_UIHostingView.isHiddenForReuse.getter() ^ a1) & 1) == 0)
      _UIHostingView.isHiddenForReuse.setter((a1 & 1) == 0);

  }
  v15 = (void *)v10(a4, a5);
  if ((a1 & 1) != 0)
  {
    if (v15)
    {
      v19 = v15;
      v16 = objc_msgSend(v15, sel_superview);
      if (v16)
      {
        v18 = v16;
        if (a2)
        {
          swift_retain();
          objc_msgSend(v18, sel_bounds);
          CGRectGetWidth(v21);
          _ProposedSize.init(width:height:)();
          v17 = swift_allocObject();
          *(_QWORD *)(v17 + 16) = a2;
          *(_QWORD *)(v17 + 24) = a3;
          swift_beginAccess();
          outlined copy of AppIntentExecutor?(a2);
          type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
          swift_retain();
          ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
          swift_endAccess();
          swift_release();
          swift_release();
          swift_beginAccess();
          swift_retain();
          ViewGraphGeometryObservers.resetObserver(for:)();
          swift_endAccess();

          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
          swift_release();

        }
        else
        {

        }
      }
      else
      {

      }
    }
  }
  else if (v15)
  {
    v20 = v15;
    swift_retain();

    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.removeAll()();
    swift_endAccess();
    swift_release();
  }
}

void PlatformListViewBase.accessibilityNodes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];

  v2 = (*(uint64_t (**)(void))(a2 + 56))();
  if (!v2)
    return;
  v3 = (void *)v2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for ModifiedContent();
  v13[0] = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v13[1] = swift_getAssociatedConformanceWitness();
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v13);
  v7 = type metadata accessor for _UIHostingView(0, v4, v5, v6);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
  v9 = ViewRendererHost.accessibilityNodes.getter(v7, v8);

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_4;
LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_4:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)MEMORY[0x18D75E3BC](0, v9);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(v9 + 32);
LABEL_7:
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();

    return;
  }
  __break(1u);
}

void implicit closure #3 in PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(void *a1@<X0>, BOOL *a2@<X8>)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a1, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_layoutDirection);

  *a2 = v4 == (id)1;
}

void UIView.invalidateRendererHostSafeAreaInsets()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;

  swift_getObjectType();
  if (swift_conformsToProtocol2())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
  {
    swift_getObjectType();
    v2 = v0;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  v3 = objc_msgSend(v0, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_8;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_15;
LABEL_8:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x18D75E3BC](i, v4);
      else
        v7 = *(id *)(v4 + 8 * i + 32);
      v8 = v7;
      UIView.invalidateRendererHostSafeAreaInsets()();

    }
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()(double *a1, double *a2, uint64_t (*a3)(double, double, double, double))
{
  return a3(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_187A3EC3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSo6CGSizeVABIegyy_A2BIegnn_TRTA_0(double *a1, double *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(double, double, double, double))(v2 + 16))(*a1, a1[1], *a2, a2[1]);
}

void partial apply for implicit closure #3 in PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(BOOL *a1@<X8>)
{
  uint64_t v1;

  implicit closure #3 in PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(*(void **)(v1 + 32), a1);
}

uint64_t key path setter for EnvironmentValues.editMode : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t EditButton.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t EditButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE v31[4];
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _BYTE v39[3];
  uint64_t v40;
  uint64_t v41;
  char v42;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v31[-v6];
  type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>();
  v34 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v35 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)v1;
  v12 = *(_QWORD *)(v1 + 8);
  v13 = *(unsigned __int8 *)(v1 + 16);
  v14 = *(unsigned __int8 *)(v1 + 17);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v11;
  *(_QWORD *)(v15 + 24) = v12;
  *(_BYTE *)(v15 + 32) = v13;
  *(_BYTE *)(v15 + 33) = v14;
  *v7 = 256;
  v16 = (uint64_t (**)())((char *)v7 + *(int *)(v4 + 36));
  *v16 = partial apply for closure #1 in EditButton.body.getter;
  v16[1] = (uint64_t (*)())v15;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined copy of Environment<Binding<Visibility>?>.Content(v11, v12, v13, v14);
  v17 = v13 | (v14 << 8);
  specialized Environment.wrappedValue.getter(v11, v12, v17, (uint64_t)&v40);
  v18 = v41;
  if (!v41)
    goto LABEL_4;
  v33 = v4;
  v19 = v40;
  v32 = v17;
  v36 = v40;
  v37 = v41;
  v38 = v42;
  type metadata accessor for Binding<EditMode>();
  MEMORY[0x18D75B9C8](v39);
  v20 = v19;
  v4 = v33;
  v17 = v32;
  outlined consume of Binding<NavigationSplitViewColumn>?(v20, v18);
  if (v39[0])
    v21 = static Text.System.done.getter();
  else
LABEL_4:
    v21 = static Text.System.edit.getter();
  v25 = (char *)v7 + *(int *)(v4 + 40);
  *(_QWORD *)v25 = v21;
  *((_QWORD *)v25 + 1) = v22;
  v25[16] = v23 & 1;
  *((_QWORD *)v25 + 3) = v24;
  outlined copy of Environment<Binding<Visibility>?>.Content(v11, v12, v13, v14);
  specialized Environment.wrappedValue.getter(v11, v12, v17, (uint64_t)&v40);
  outlined consume of Environment<DismissWindowAction>.Content(v11, v12, v13, v14);
  v26 = v41;
  if (v41)
  {
    v27 = v40;
    v36 = v40;
    v37 = v41;
    v38 = v42;
    type metadata accessor for Binding<EditMode>();
    MEMORY[0x18D75B9C8](v39);
    outlined consume of Binding<NavigationSplitViewColumn>?(v27, v26);
    LOBYTE(v26) = v39[0];
  }
  v28 = v35;
  outlined init with copy of Button<Text>((uint64_t)v7, (uint64_t)v35);
  v29 = &v28[*(int *)(v34 + 36)];
  *(_QWORD *)v29 = 0;
  v29[8] = v26;
  outlined destroy of Button<Text>((uint64_t)v7);
  return outlined init with take of ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>((uint64_t)v28, a1);
}

void type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for _AnimationModifier<EditMode>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>);
  }
}

void type metadata accessor for _AnimationModifier<EditMode>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnimationModifier<EditMode>)
  {
    lazy protocol witness table accessor for type EditMode and conformance EditMode();
    v0 = type metadata accessor for _AnimationModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnimationModifier<EditMode>);
  }
}

uint64_t closure #1 in EditButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a3 >> 8;
  v7 = (a3 >> 8) & 1;
  outlined copy of Environment<Binding<Visibility>?>.Content(a1, a2, a3, BYTE1(a3) & 1);
  specialized Environment.wrappedValue.getter(a1, a2, a3 | ((v6 & 1) << 8), (uint64_t)&v13);
  result = outlined consume of Environment<DismissWindowAction>.Content(a1, a2, a3, v7);
  v9 = v14;
  if (v14)
  {
    v10 = v13;
    v11 = static Animation.easeIn(duration:)();
    MEMORY[0x1E0C80A78](v11, v12);
    withAnimation<A>(_:_:)();
    outlined consume of Binding<NavigationSplitViewColumn>?(v10, v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_187A3F190()
{
  uint64_t v0;

  outlined consume of Environment<DismissWindowAction>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_BYTE *)(v0 + 33));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditButton.body.getter()
{
  uint64_t v0;

  return closure #1 in EditButton.body.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t outlined init with copy of Button<Text>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Button<Text>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Binding<EditMode>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<EditMode>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in EditButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in EditButton.body.getter()
{
  uint64_t v1;

  type metadata accessor for Binding<EditMode>();
  MEMORY[0x18D75B9C8](&v1);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EditButton()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  type metadata accessor for _AnimationModifier<EditMode>();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t initializeBufferWithCopyOfBuffer for EditButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(_QWORD *)a2, v4, v6, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v5;
  return a1;
}

uint64_t assignWithCopy for EditButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(_QWORD *)a2, v4, v6, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v10 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v5;
  outlined consume of Environment<DismissWindowAction>.Content(v7, v8, v10, v9);
  return a1;
}

ValueMetadata *type metadata accessor for EditButton()
{
  return &type metadata for EditButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for _AnimationModifier<EditMode>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE45E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in EditButton.body.getter()
{
  return closure #1 in closure #1 in EditButton.body.getter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void SystemShadowStyleMetrics.Separated.color.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.color.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SystemShadowStyleMetrics.Separated.color.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_187A3F6C0(uint64_t a1)
{
  id v1;

  v1 = *(id *)(a1 + 32);
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_187A3F6D8(id *a1)
{
  id v1;

  v1 = *a1;
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t _IgnoredByLayoutEffect.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _IgnoredByLayoutEffect.base.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_IgnoredByLayoutEffect.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _IgnoredByLayoutEffect._affectsLayout.getter()
{
  return 0;
}

uint64_t _IgnoredByLayoutEffect.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

__n128 _IgnoredByLayoutEffect.effectValue(size:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __n128 result;
  _OWORD v5[4];
  uint64_t v6;

  (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 24) + 24))(v5, *(_QWORD *)(a1 + 16));
  v3 = v5[3];
  *(_OWORD *)(a2 + 32) = v5[2];
  *(_OWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 64) = v6;
  result = (__n128)v5[1];
  *(_OWORD *)a2 = v5[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t _IgnoredByLayoutEffect.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t _IgnoredByLayoutEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  specialized _IgnoredByLayoutEffect.animatableData.setter(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_IgnoredByLayoutEffect.animatableData.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v7 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _IgnoredByLayoutEffect.animatableData.modify;
}

void _IgnoredByLayoutEffect.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized _IgnoredByLayoutEffect.animatableData.setter((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    specialized _IgnoredByLayoutEffect.animatableData.setter((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

__n128 protocol witness for GeometryEffect.effectValue(size:) in conformance _IgnoredByLayoutEffect<A>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __n128 result;
  _OWORD v5[4];
  uint64_t v6;

  _IgnoredByLayoutEffect.effectValue(size:)(a1, (uint64_t)v5);
  v3 = v5[3];
  *(_OWORD *)(a2 + 32) = v5[2];
  *(_OWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 64) = v6;
  result = (__n128)v5[1];
  *(_OWORD *)a2 = v5[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IgnoredByLayoutEffect<A>, a5);
  return static GeometryEffect._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IgnoredByLayoutEffect<A>, a5);
  return static GeometryEffect._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IgnoredByLayoutEffect<A>, a4);
  return static GeometryEffect._viewListCount(inputs:body:)();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  specialized _IgnoredByLayoutEffect.animatableData.setter(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _IgnoredByLayoutEffect<A>(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = v2;
  v5[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _IgnoredByLayoutEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance _IgnoredByLayoutEffect<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v4, v5);
    specialized _IgnoredByLayoutEffect.animatableData.setter((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    specialized _IgnoredByLayoutEffect.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 40), v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t static _IgnoredByLayoutEffect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> _IgnoredByLayoutEffect<A>()
{
  return static _IgnoredByLayoutEffect<>.== infix(_:_:)();
}

uint64_t GeometryEffect.ignoredByLayout()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, a1);
}

uint64_t specialized _IgnoredByLayoutEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v12 - v8, a1, v7);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v9, v3, v4);
}

uint64_t instantiation function for generic protocol witness table for _IgnoredByLayoutEffect<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IgnoredByLayoutEffect<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _IgnoredByLayoutEffect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_187A3FE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _IgnoredByLayoutEffect(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  return _IgnoredByLayoutEffect.animatableData.getter(v4);
}

uint64_t sub_187A3FE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for _IgnoredByLayoutEffect(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return specialized _IgnoredByLayoutEffect.animatableData.setter(a1, v5);
}

uint64_t sub_187A3FED0()
{
  return 16;
}

__n128 sub_187A3FEDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for _IgnoredByLayoutEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A3FF98 + 4 * byte_187C7FB60[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _IgnoredByLayoutEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _IgnoredByLayoutEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _IgnoredByLayoutEffect);
}

uint64_t getEnumTagSinglePayload for ShadowListUpdateRecorder(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187A40228 + 4 * byte_187C7FC30[v10]))();
  }
}

void storeEnumTagSinglePayload for ShadowListUpdateRecorder(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187A403A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A4041CLL);
}

void sub_187A403B0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A403B8);
  JUMPOUT(0x187A4041CLL);
}

void sub_187A403F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A4041CLL);
}

void sub_187A40400()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A4041CLL);
}

uint64_t sub_187A40408(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187A4041CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187A40418);
    JUMPOUT(0x187A40414);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void associated type witness table accessor for ListDiffable.RowIDs : BidirectionalCollection in ShadowListUpdateRecorder<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in ShadowListUpdateRecorder<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs.Sequence.Element : Hashable in ShadowListUpdateRecorder<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in ShadowListUpdateRecorder<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void ShadowListUpdateRecorder.hasUncommittedUpdates.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

BOOL sub_187A405DC()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v0);
  return (Collection.isEmpty.getter() & 1) == 0;
}

uint64_t ShadowListUpdateRecorder.withBase(do:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  a1(v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 24))(v3, v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Void __swiftcall ShadowListUpdateRecorder.clearUpdates()()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  type metadata accessor for ListUpdate();
}

void sub_187A40848()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v0);
  Array.append<A>(contentsOf:)();
  Array.removeAll(keepingCapacity:)(1);
}

void ShadowListUpdateRecorder.updateBase(to:)()
{
  ShadowListUpdateRecorder.hasUncommittedUpdates.getter();
}

uint64_t sub_187A408E4(uint64_t result)
{
  if ((result & 1) == 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for ListUpdate();
  }
  __break(1u);
  return result;
}

void ShadowListUpdateRecorder.recordUpdate(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

uint64_t sub_187A40BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v5 + 16))((char *)&v8 - v6, *(_QWORD *)(v2 - 128), a1, v4);
  type metadata accessor for Array();
  return Array.append(_:)();
}

void ListUpdate.inverse.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[6];

  v14[5] = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1, v11);
  v13 = (char *)sub_187A40D40 + 4 * byte_187C7FC3F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_187A40D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 32))(*(_QWORD *)(v2 - 88), v1, v0);
  return swift_storeEnumTagMultiPayload();
}

void ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t AssociatedConformanceWitness;
  uint64_t v66;
  _QWORD v67[59];

  v67[51] = a8;
  v67[47] = a7;
  v67[49] = a5;
  v67[37] = a4;
  v67[39] = a3;
  v67[6] = a2;
  v67[5] = a1;
  v8 = *(_QWORD *)(a6 + 16);
  v9 = *(_QWORD *)(a6 + 24);
  swift_getAssociatedTypeWitness();
  v67[0] = swift_getAssociatedConformanceWitness();
  v10 = *(_QWORD *)(v67[0] + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v67[52] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v67[17] = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v67[14] = (char *)v67 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v67[13] = (char *)v67 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v67[12] = (char *)v67 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v67[28] = (char *)v67 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v67[15] = (char *)v67 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v67[43] = (char *)v67 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v67[46] = (char *)v67 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v67[23] = (char *)v67 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v67[7] = (char *)v67 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v67[41] = (char *)v67 - v43;
  v67[29] = v9;
  v67[31] = v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v44 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v44, v45);
  v67[11] = (char *)v67 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v67[10] = (char *)v67 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v67[22] = (char *)v67 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v67[42] = (char *)v67 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v67[45] = (char *)v67 - v58;
  MEMORY[0x1E0C80A78](v59, v60);
  v67[33] = (char *)v67 - v61;
  MEMORY[0x1E0C80A78](v62, v63);
  v67[24] = (char *)v67 - v64;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v67[16] = v10;
  v66 = swift_getAssociatedConformanceWitness();
  v67[55] = v44;
  v67[56] = AssociatedTypeWitness;
  v67[40] = AssociatedConformanceWitness;
  v67[57] = AssociatedConformanceWitness;
  v67[58] = v66;
  v67[34] = v66;
  type metadata accessor for ListUpdate();
}

void ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v64 = a4;
  v65 = a5;
  v66 = a2;
  v67 = a1;
  v46 = a6;
  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v53 = (char *)&v43 - v11;
  v61 = *(_QWORD *)(a3 - 8);
  v62 = a3;
  MEMORY[0x1E0C80A78](v12, v13);
  v49 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v51 = (char *)&v43 - v17;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v19 = swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v45 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v55 = (char *)&v43 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v59 = (char *)&v43 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v50 = (char *)&v43 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v48 = (char *)&v43 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v47 = (char *)&v43 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v60 = (char *)&v43 - v39;
  swift_getAssociatedTypeWitness();
  v57 = v7;
  v58 = v8;
  swift_getAssociatedConformanceWitness();
  v40 = swift_getAssociatedTypeWitness();
  v52 = v18;
  v56 = AssociatedTypeWitness;
  v41 = swift_getAssociatedConformanceWitness();
  v42 = swift_getAssociatedConformanceWitness();
  v68 = v19;
  v69 = v40;
  v70 = v41;
  v71 = v42;
  type metadata accessor for ListUpdate();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ShadowSectionCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ShadowSectionCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t ShadowRowCollection.index(before:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  _QWORD v8[2];

  v8[1] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  v5 = (char *)v8 - v4;
  swift_checkMetadataState();
  dispatch thunk of Collection.startIndex.getter();
  swift_getAssociatedConformanceWitness();
  v6 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, AssociatedTypeWitness);
  if ((v6 & 1) != 0)
    return dispatch thunk of Collection.startIndex.getter();
  else
    return dispatch thunk of BidirectionalCollection.index(before:)();
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.RowIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.RowIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowRowCollection.index(before:));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowRowCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowRowCollection<A>(a1);
}

{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>, a3);
  JUMPOUT(0x18D75CB20);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>(a1, (void (*)(uint64_t))ShadowRowCollection.startIndex.getter, (uint64_t)&protocol conformance descriptor for ShadowRowCollection<A>, a2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ShadowRowCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ShadowRowCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t ShadowSectionCollection.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, uint64_t, double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v22 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v19 - v8;
  v10 = swift_checkMetadataState();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v19 - v14;
  v16 = *(void (**)(uint64_t, uint64_t, double))(v3 + 56);
  v16(v4, v3, v13);
  dispatch thunk of Collection.startIndex.getter();
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v15, v10);
  v19 = v5;
  swift_getAssociatedConformanceWitness();
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, AssociatedTypeWitness);
  ((void (*)(uint64_t, uint64_t))v16)(v4, v3);
  if ((v5 & 1) != 0)
    dispatch thunk of Collection.startIndex.getter();
  else
    dispatch thunk of BidirectionalCollection.index(before:)();
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v10);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.SectionIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.SectionIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowSectionCollection.index(before:));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowSectionCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowRowCollection<A>(a1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, a4);
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, a3);
  JUMPOUT(0x18D75CB20);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ShadowSectionCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>(a1, (void (*)(uint64_t))ShadowSectionCollection.startIndex.getter, (uint64_t)&protocol conformance descriptor for ShadowSectionCollection<A>, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)&v18 - v13;
  v15 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v15 + 16))(a4, v4, a1, v12);
  a2(a1);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v4, a1);
  MEMORY[0x18D75FFDC](a3, a1);
  v16 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4 + *(int *)(v16 + 36), v14, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ShadowSectionCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ShadowSectionCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ShadowRowCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA210], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ShadowRowCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_187A4393C()
{
  return 16;
}

__n128 sub_187A43948(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for implicit closure #1 in ShadowListUpdateRecorder.initialIndex(_:)()
{
  return swift_getAtKeyPath();
}

{
  return partial apply for implicit closure #1 in ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for ShadowRowCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v26 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v25 = ((((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8;
  v7 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v27 = v7;
  v11 = *(_QWORD *)(v9 + 64) + 7;
  v12 = v10 | *(_DWORD *)(v4 + 80) & 0xF8 | v6;
  if (v12 > 7
    || ((*(_DWORD *)(v9 + 80) | v6 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((v11 + ((v7 + (v25 & ~(unint64_t)v6) + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v17 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    v16 = ~(unint64_t)v6;
    v24 = v8;
    v17 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v3);
    v18 = (_QWORD *)(((unint64_t)a2 + v26 + 7) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a1 + v26 + 7) & 0xFFFFFFFFFFFFF8);
    *v19 = *v18;
    *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
    v20 = ((unint64_t)a1 + v25) & v16;
    v21 = ((unint64_t)a2 + v25) & v16;
    v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v20, v21, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v20 + v27 + v10) & ~v10, (v21 + v27 + v10) & ~v10, v24);
    *(_QWORD *)((v11 + ((v20 + v27 + v10) & ~v10)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + ((v21 + v27 + v10) & ~v10)) & 0xFFFFFFFFFFFFF8);
  }
  return v17;
}

uint64_t assignWithCopy for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  v13 = (v12 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(v13, v14, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v10 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v15 + v18 + v13) & ~v18;
  v20 = (v15 + v18 + v14) & ~v18;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 24))(v19, v20, v16);
  *(_QWORD *)((*(_QWORD *)(v17 + 64) + 7 + v19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v17 + 64) + 7 + v20) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v9 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12 + 8;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v15, AssociatedTypeWitness);
  v16 = *(_QWORD *)(v11 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v16 + v19 + v14) & ~v19;
  v21 = (v16 + v19 + v15) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v20, v21, v17);
  *(_QWORD *)((*(_QWORD *)(v18 + 64) + 7 + v20) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v18 + 64) + 7 + v21) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  v13 = (v12 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(v13, v14, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v10 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v15 + v18 + v13) & ~v18;
  v20 = (v15 + v18 + v14) & ~v18;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40))(v19, v20, v16);
  *(_QWORD *)((*(_QWORD *)(v17 + 64) + 7 + v19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v17 + 64) + 7 + v20) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowRowCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v22 = *(_DWORD *)(v4 + 84);
  if (v22 <= 0x7FFFFFFF)
    v5 = 0x7FFFFFFF;
  else
    v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = v5;
  else
    v8 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14;
  if (v10 < a2)
  {
    if (((((*(_QWORD *)(v9 + 64) + ((v15 + (v13 & ~v12)) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v10 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X3 }
  }
  if (v5 == v10)
  {
    if (v22 < 0x7FFFFFFF)
    {
      v21 = *(_QWORD *)((a1 + v11 + 7) & 0xFFFFFFFFFFFFF8);
      if (v21 >= 0xFFFFFFFF)
        LODWORD(v21) = -1;
      return (v21 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
    }
  }
  else
  {
    v20 = (v13 + a1) & ~v12;
    if (v7 == v10)
      return (*(uint64_t (**)(unint64_t))(v6 + 48))(v20);
    else
      return (*(uint64_t (**)(unint64_t))(v9 + 48))((v15 + v20) & ~v14);
  }
}

void storeEnumTagSinglePayload for ShadowRowCollection(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v9 + 64)
        + ((*(_QWORD *)(v7 + 64)
          + *(unsigned __int8 *)(v9 + 80)
          + ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + *(unsigned __int8 *)(v7 + 80)
            + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 >= a3)
  {
    v14 = 0u;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64)
         + ((*(_DWORD *)(v7 + 64)
           + *(unsigned __int8 *)(v9 + 80)
           + ((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + *(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v9 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = a3 - v10 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
  }
  if (a2 > v10)
  {
    if (((*(_DWORD *)(v9 + 64)
         + ((*(_DWORD *)(v7 + 64)
           + *(unsigned __int8 *)(v9 + 80)
           + ((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + *(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~*(unsigned __int8 *)(v9 + 80))
         + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, v11);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_187A44570(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  *(_BYTE *)(v11 + v13) = 0;
  if (a1)
  {
    if (v8 != v2)
    {
      v15 = (v5 + v11) & v7;
      if (v12 == v2)
      {
        v14 = *(void (**)(uint64_t))(v9 + 56);
      }
      else
      {
        v15 = (v4 + v15) & v6;
        v14 = *(void (**)(uint64_t))(a2 + 56);
      }
      goto LABEL_10;
    }
    if (v17 >= 0x7FFFFFFF)
    {
      v14 = *(void (**)(uint64_t))(v10 + 56);
      v15 = v11;
LABEL_10:
      v14(v15);
      return;
    }
    if (a1 < 0)
      v16 = a1 ^ 0x80000000;
    else
      v16 = (a1 - 1);
    *(_QWORD *)((v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) = v16;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ShadowSectionCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v11 = v7 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v12 = *v13;
    *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  *(_QWORD *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowSectionCollection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187A449F0 + 4 * byte_187C7FC55[v10]))();
  }
}

void storeEnumTagSinglePayload for ShadowSectionCollection(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187A44B78()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A44BECLL);
}

void sub_187A44B80(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A44B88);
  JUMPOUT(0x187A44BECLL);
}

void sub_187A44BC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A44BECLL);
}

void sub_187A44BD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A44BECLL);
}

uint64_t sub_187A44BD8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187A44BECLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187A44BE8);
    JUMPOUT(0x187A44BE4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

ValueMetadata *type metadata accessor for HostingControllerAllowedBehaviors()
{
  return &type metadata for HostingControllerAllowedBehaviors;
}

uint64_t assignWithCopy for HostingControllerOverrides(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 2)
  {
    if (v4 == 2)
    {
      outlined destroy of PushTarget(a1);
      v6 = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
      goto LABEL_9;
    }
    swift_unknownObjectWeakCopyAssign();
LABEL_8:
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_9;
  }
  if (v4 != 2)
  {
    swift_unknownObjectWeakCopyInit();
    goto LABEL_8;
  }
  v5 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v5;
LABEL_9:
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for HostingControllerOverrides(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HostingControllerOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HostingControllerOverrides()
{
  return &type metadata for HostingControllerOverrides;
}

unint64_t lazy protocol witness table accessor for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerAllowedBehaviors, &type metadata for HostingControllerAllowedBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerAllowedBehaviors, &type metadata for HostingControllerAllowedBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerAllowedBehaviors, &type metadata for HostingControllerAllowedBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerAllowedBehaviors, &type metadata for HostingControllerAllowedBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HostingControllerBridges and conformance HostingControllerBridges()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerBridges, &type metadata for HostingControllerBridges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerBridges, &type metadata for HostingControllerBridges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerBridges, &type metadata for HostingControllerBridges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingControllerBridges, &type metadata for HostingControllerBridges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateEnvironmentToAllowedBehaviors(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateEnvironmentToAllowedBehaviors(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance UpdateEnvironmentToAllowedBehaviors()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance UpdateEnvironmentToAllowedBehaviors(uint64_t a1, uint64_t a2)
{
  return specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UpdateEnvironmentToAllowedBehaviors()
{
  lazy protocol witness table accessor for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t HostingControllerOverrides.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x1E0DEE9D8];
  v1 = MEMORY[0x18D760234](v0 + 32);
  if (v1)
  {
    v3 = (void *)v1;
    v13 = v1;
    closure #1 in HostingControllerOverrides.debugDescription.getter((uint64_t)&v13, &v15, v2, 7758190, 0xE300000000000000);

  }
  v4 = MEMORY[0x18D760234](v0 + 40);
  if (v4)
  {
    v6 = (void *)v4;
    v13 = v4;
    closure #1 in HostingControllerOverrides.debugDescription.getter((uint64_t)&v13, &v15, v5, 0x74696C7073, 0xE500000000000000);

  }
  v13 = 0;
  v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v13 = 0xD00000000000001DLL;
  v14 = 0x8000000187BEDF20;
  type metadata accessor for (String, String)();
  v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10._countAndFlagsBits = MEMORY[0x18D75CF7C](v9, v8);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t closure #1 in HostingControllerOverrides.debugDescription.getter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  _print_unlocked<A, B>(_:_:)();
  v8 = (_QWORD *)*a2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
    *a2 = result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
    *a2 = result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[4 * v11];
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = 0;
  v12[7] = v13;
  return result;
}

uint64_t specialized static HostingControllerOverrides.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  BOOL v14;
  int v15;
  _BYTE v16[56];
  _BYTE v17[48];
  unsigned __int8 v18;
  _BYTE v19[40];
  uint64_t v20;
  _BYTE v21[40];
  uint64_t v22;
  _BYTE v23[32];
  uint64_t v24;
  _BYTE v25[32];
  uint64_t v26;
  char v27;

  outlined init with copy of PushTarget?(a1, (uint64_t)v23);
  outlined init with copy of PushTarget?(a2, (uint64_t)v21);
  outlined init with copy of PushTarget?((uint64_t)v23, (uint64_t)v25);
  outlined init with copy of PushTarget?((uint64_t)v21, (uint64_t)&v26);
  if (v25[8] == 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
    if (v27 == 2)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
      outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v25);
      outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v23);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for (PushTarget?, PushTarget?));
    outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v25);
    outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v23);
    goto LABEL_14;
  }
  outlined init with copy of PushTarget?((uint64_t)v25, (uint64_t)v19);
  if (v27 == 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
    outlined destroy of PushTarget((uint64_t)v19);
    goto LABEL_6;
  }
  outlined init with take of PushTarget((uint64_t)&v26, (uint64_t)v17);
  v4 = specialized static PushTarget.== infix(_:_:)((uint64_t)v19, (uint64_t)v17);
  outlined destroy of PushTarget((uint64_t)v17);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
  outlined destroy of PushTarget((uint64_t)v19);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for PushTarget?);
  outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v25);
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v23);
  if ((v4 & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v5 = (void *)MEMORY[0x18D760234](&v26);
  v6 = (void *)MEMORY[0x18D760234](&v24);
  v7 = v6;
  if (!v5)
  {
    if (!v6)
    {
      outlined destroy of HostingControllerOverrides((uint64_t)v23);
      outlined destroy of HostingControllerOverrides((uint64_t)v25);
      outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v21);
      outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v19);
      goto LABEL_19;
    }

LABEL_14:
    outlined destroy of HostingControllerOverrides((uint64_t)v23);
    outlined destroy of HostingControllerOverrides((uint64_t)v25);
    outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v21);
    outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v19);
    goto LABEL_15;
  }

  if (!v7)
    goto LABEL_14;

  outlined destroy of HostingControllerOverrides((uint64_t)v23);
  outlined destroy of HostingControllerOverrides((uint64_t)v25);
  outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v21);
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v19);
  if (v5 != v7)
    goto LABEL_15;
LABEL_19:
  v10 = (void *)MEMORY[0x18D760234](&v22);
  v11 = (void *)MEMORY[0x18D760234](&v20);
  v12 = v11;
  if (v10)
  {

    if (v12)
    {

      outlined destroy of HostingControllerOverrides((uint64_t)v19);
      outlined destroy of HostingControllerOverrides((uint64_t)v21);
      outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v17);
      outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v16);
      if (v10 == v12)
        goto LABEL_26;
LABEL_16:
      outlined destroy of HostingControllerOverrides((uint64_t)v16);
      outlined destroy of HostingControllerOverrides((uint64_t)v17);
      v8 = 0;
      return v8 & 1;
    }
LABEL_15:
    outlined destroy of HostingControllerOverrides((uint64_t)v19);
    outlined destroy of HostingControllerOverrides((uint64_t)v21);
    outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v17);
    outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v16);
    goto LABEL_16;
  }
  if (v11)
  {

    goto LABEL_15;
  }
  outlined destroy of HostingControllerOverrides((uint64_t)v19);
  outlined destroy of HostingControllerOverrides((uint64_t)v21);
  outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v17);
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v16);
LABEL_26:
  v13 = v18;
  v14 = v18 == 2;
  outlined destroy of HostingControllerOverrides((uint64_t)v17);
  v15 = v16[48];
  outlined destroy of HostingControllerOverrides((uint64_t)v16);
  v8 = v15 == 2 && v14;
  if (v13 != 2 && v15 != 2)
    v8 = ((v13 & 1) == 0) ^ v15;
  return v8 & 1;
}

uint64_t specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>);
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for (String, String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, String));
  }
}

void type metadata accessor for (PushTarget?, PushTarget?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (PushTarget?, PushTarget?))
  {
    type metadata accessor for PushTarget?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PushTarget?, PushTarget?));
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.ManagedBridgesKey()
{
  return &type metadata for EnvironmentValues.ManagedBridgesKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SuppliedBridgesKey()
{
  return &type metadata for EnvironmentValues.SuppliedBridgesKey;
}

ValueMetadata *type metadata accessor for UpdateEnvironmentToAllowedBehaviors()
{
  return &type metadata for UpdateEnvironmentToAllowedBehaviors;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in UpdateEnvironmentToAllowedBehaviors()
{
  return &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateEnvironmentToAllowedBehaviors()
{
  return &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
}

unint64_t lazy protocol witness table accessor for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateEnvironmentToAllowedBehaviors, &type metadata for UpdateEnvironmentToAllowedBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors);
  }
  return result;
}

void LinearGaugeStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ComplicationLinearGaugeStyle.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void LinearGaugeStyle.init(tint:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void LinearGaugeStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t ComplicationLinearGaugeStyle.init(tint:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

double ComplicationLinearGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  _OWORD v19[12];
  _OWORD v20[2];

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 9);
  v6 = *(_BYTE *)(a1 + 10);
  v7 = *v2;
  v15 = *(_QWORD *)a1;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  swift_bridgeObjectRetain();
  AccessoryLinearGauge.init(configuration:gradient:)(&v15, v7, (uint64_t)v19);
  v8 = v19[11];
  a2[10] = v19[10];
  a2[11] = v8;
  a2[12] = v20[0];
  *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v20 + 9);
  v9 = v19[7];
  a2[6] = v19[6];
  a2[7] = v9;
  v10 = v19[9];
  a2[8] = v19[8];
  a2[9] = v10;
  v11 = v19[3];
  a2[2] = v19[2];
  a2[3] = v11;
  v12 = v19[5];
  a2[4] = v19[4];
  a2[5] = v12;
  result = *(double *)v19;
  v14 = v19[1];
  *a2 = v19[0];
  a2[1] = v14;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in ComplicationLinearGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for GaugeStyle.makeBody(configuration:) in conformance ComplicationLinearGaugeStyle@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  _OWORD v19[12];
  _OWORD v20[2];

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 9);
  v6 = *(_BYTE *)(a1 + 10);
  v7 = *v2;
  v15 = *(_QWORD *)a1;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  swift_bridgeObjectRetain();
  AccessoryLinearGauge.init(configuration:gradient:)(&v15, v7, (uint64_t)v19);
  v8 = v19[11];
  a2[10] = v19[10];
  a2[11] = v8;
  a2[12] = v20[0];
  *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v20 + 9);
  v9 = v19[7];
  a2[6] = v19[6];
  a2[7] = v9;
  v10 = v19[9];
  a2[8] = v19[8];
  a2[9] = v10;
  v11 = v19[3];
  a2[2] = v19[2];
  a2[3] = v11;
  v12 = v19[5];
  a2[4] = v19[4];
  a2[5] = v12;
  result = *(double *)v19;
  v14 = v19[1];
  *a2 = v19[0];
  a2[1] = v14;
  return result;
}

ValueMetadata *type metadata accessor for LinearGaugeStyle()
{
  return &type metadata for LinearGaugeStyle;
}

ValueMetadata *type metadata accessor for ComplicationLinearGaugeStyle()
{
  return &type metadata for ComplicationLinearGaugeStyle;
}

void View.printRepresentation<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_187A45E5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for PrintedViewModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for PrintedViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata accessor for PrintedViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrintedViewModifier);
}

uint64_t type metadata completion function for PrintedViewModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PrintedViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_187A45FFC + 4 * byte_187C80600[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for PrintedViewModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

_UNKNOWN **base witness table accessor for ViewModifier in PrintedViewModifier<A>()
{
  return &protocol witness table for PrintedViewModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrintedViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrintedViewModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

ValueMetadata *type metadata accessor for _EmptyScene()
{
  return &type metadata for _EmptyScene;
}

uint64_t initializeWithCopy for MultimodalNavigationStackViewHost(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for MultimodalNavigationStackViewHost(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for MultimodalNavigationStackViewHost(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MultimodalNavigationStackViewHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultimodalNavigationStackViewHost);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH08ModifiedK0VyAH13_VariadicViewO4TreeVy_AH13_VStackLayoutVAH01_nO9_ChildrenVGAH16RootItemModifier33_0CB7C3A8C661577BDD4B07512497B9D9LLVGAH0juV0A1_LLVGG_AH0jU0A1_LLVs5NeverOTB503_s7f14UI25Multimodalhj23V4bodyQrvgAA0E4Item33_0wxyz35BDD4B07512497B9D9LLVSi6offset_AA0D5i4V0E7k13V14PositionedO18V7elementt_tXEfU0_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  const void *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unint64_t v61;
  _BYTE v62[168];
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  _BYTE v65[472];
  _QWORD v66[2];
  char v67;
  uint64_t v68;
  _QWORD v69[39];
  __int128 v70;
  _BYTE v71[48];
  char v72;
  uint64_t v73;
  _OWORD v74[4];
  char v75;
  char v76;
  _BYTE __src[416];
  uint64_t v78;
  _BYTE __dst[416];
  _QWORD v80[52];
  _QWORD v81[2];
  char v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  _BYTE v86[304];
  uint64_t v87[38];
  _QWORD v88[8];
  unsigned __int16 v89;
  _BYTE v90[392];
  _BYTE v91[408];
  uint64_t v92;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v78 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = v78;
  memcpy(__dst, v3, sizeof(__dst));
  memcpy(__src, v3, sizeof(__src));
  v5 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v3);
  v61 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v5);
  v8 = v7;
  v9 = v6;
  v11 = v10 & 1;
  v91[392] = v10 & 1;
  v76 = v10 & 1;
  if ((v10 & 1) != 0 && v6 > 1u)
  {
LABEL_3:
    memcpy(v65, __src, 0x1A0uLL);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v65);
    return v4;
  }
  else
  {
    v13 = 0;
    while (1)
    {
      v92 = v13;
      memcpy(v80, __src, sizeof(v80));
      outlined init with take of NavigationState.Base(v80, v90);
      outlined init with take of NavigationState.Base(v90, v91);
      v14 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v91);
      v60 = v9;
      if (v14)
      {
        v58 = v8;
        if (v14 == 1)
        {
          v15 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v91);
          memcpy(v65, v15, 0x188uLL);
          memcpy(v86, v15, 0x12BuLL);
          v55 = *(_QWORD *)&v65[304];
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
          outlined retain of NavigationState.Base((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          outlined consume of ResolvedNavigationDestinations?(v55);
          v16 = v61;
          if (v11 & 1 | (v61 != 0))
            goto LABEL_34;
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v8, v9, (uint64_t)v86, 0, (uint64_t)&v70);
          v17 = (uint64_t *)v65;
        }
        else
        {
          v28 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v91);
          v29 = *(_QWORD *)v28;
          v30 = *(_QWORD *)(v28 + 8);
          v32 = *(_QWORD *)(v28 + 16);
          v31 = *(_QWORD *)(v28 + 24);
          v34 = *(_QWORD *)(v28 + 32);
          v33 = *(_QWORD *)(v28 + 40);
          v35 = *(_QWORD *)(v28 + 48);
          v36 = *(_QWORD *)(v28 + 56);
          v37 = *(_QWORD *)(v28 + 64);
          v38 = *(_WORD *)(v28 + 72);
          v88[0] = v30;
          v88[1] = v32;
          v88[2] = v31;
          v88[3] = v34;
          v88[4] = v33;
          v88[5] = v35;
          v88[6] = v36;
          v88[7] = v37;
          v89 = v38;
          if ((v11 & 1) != 0)
            goto LABEL_33;
          v16 = v61;
          if ((v61 & 0x8000000000000000) != 0)
            goto LABEL_30;
          if (*(_QWORD *)(v29 + 16) < v61)
            goto LABEL_31;
          v51 = v38;
          v52 = v37;
          v53 = v36;
          v54 = v35;
          v57 = v33;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
          outlined retain of NavigationState.Base((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          v39 = swift_bridgeObjectRetain();
          v40 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v39, (uint64_t)v88, 0, (2 * v61) | 1);
          swift_bridgeObjectRelease();
          if (v61 >= *(_QWORD *)(v29 + 16))
            goto LABEL_32;
          memcpy(v87, (const void *)(v29 + 304 * v61 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v87);
          swift_bridgeObjectRelease();
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v61, 0, v58, v60, (uint64_t)v87, v40, (uint64_t)&v70);
          outlined copy of NavigationSplitViewState?(v30, v32, v31, v34, v57, v54, v53, v52, v51, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          v17 = v87;
        }
        outlined release of NavigationColumnState(v17);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
      }
      else
      {
        v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v91);
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned __int8 *)(v18 + 8);
        v21 = *(_QWORD *)(v18 + 16);
        v22 = v80[51];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
        v23 = static HorizontalAlignment.center.getter();
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_29;
        v24 = v23;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22 + 32, (uint64_t)&v68, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
        v66[0] = v24;
        v66[1] = 0;
        v67 = 1;
        v81[0] = 0;
        v81[1] = v19;
        v82 = v20;
        v83 = v21;
        v84 = 0;
        v85 = (_DWORD)v20 == 3;
        v56 = (void (*)(_QWORD *__return_ptr, _QWORD *))v80[49];
        v25 = v20 >= 3 ? 3 : v20;
        v59 = v25;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v66, (uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
        v69[15] = 0;
        v69[16] = v19;
        v69[17] = v20;
        v69[18] = v21;
        v69[19] = 0;
        LOBYTE(v69[20]) = (_DWORD)v20 == 3;
        BYTE1(v69[20]) = 1;
        v26 = swift_allocObject();
        *(_BYTE *)(v26 + 16) = 1;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v69, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v63 = partial apply for closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:);
        v64 = v26;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v56(v69, v81);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v62, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        memcpy(&v65[184], v69, 0x120uLL);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>();
        v27 = AnyView.init<A>(_:)();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
        memset(&v71[8], 0, 40);
        v72 = 2;
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
        *(_QWORD *)&v70 = v27;
        BYTE8(v70) = v59;
        *(_QWORD *)v71 = 0;
        v16 = v61;
      }
      v41 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v11 & 1);
      v76 = v44 & 1;
      *(_OWORD *)&v65[40] = *(_OWORD *)&v71[16];
      *(_OWORD *)&v65[56] = *(_OWORD *)&v71[32];
      v65[72] = v72;
      *(_OWORD *)&v65[8] = v70;
      *(_OWORD *)&v65[24] = *(_OWORD *)v71;
      v45 = v92;
      if (__OFADD__(v92, 1))
        break;
      v8 = v42;
      v9 = v43;
      v61 = v41;
      v74[2] = *(_OWORD *)&v65[40];
      v74[3] = *(_OWORD *)&v65[56];
      v75 = v65[72];
      v74[0] = *(_OWORD *)&v65[8];
      v74[1] = *(_OWORD *)&v65[24];
      v73 = v92;
      *(_QWORD *)v65 = v92;
      outlined init with copy of NavigationState.StackContent.PositionedView((uint64_t)v74, (uint64_t)&v65[8]);
      v46 = *(_QWORD *)&v65[8];
      swift_retain();
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)&v65[8]);
      v47 = v73;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v73, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: NavigationState.StackContent.PositionedView));
      v4 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v45 = v92;
        v4 = v78;
      }
      v49 = *(_QWORD *)(v4 + 16);
      v48 = *(_QWORD *)(v4 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1);
        v45 = v92;
        v4 = v78;
      }
      *(_QWORD *)(v4 + 16) = v49 + 1;
      v50 = v4 + 16 * v49;
      *(_QWORD *)(v50 + 32) = v46;
      *(_QWORD *)(v50 + 40) = v47;
      v11 = v76;
      v13 = v45 + 1;
      if (v76 == 1 && v9 > 1u)
        goto LABEL_3;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t MultimodalNavigationStack.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t Strong;
  Swift::UInt v6;
  Swift::UInt v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE v26[16];
  _QWORD v27[52];
  _OWORD v28[26];
  _BYTE v29[56];
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  _BYTE __src[392];
  _BYTE v34[392];
  _BYTE v35[392];
  __int128 __dst[26];
  _BYTE v37[392];

  v2 = v1;
  v4 = v1 + 80;
  outlined init with copy of NavigationAuthority(v1 + 80, (uint64_t)v34);
  Strong = swift_weakLoadStrong();
  outlined destroy of NavigationAuthority((uint64_t)v34);
  if (Strong
    && (swift_beginAccess(),
        outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v28) != 1))
  {
    __dst[6] = v28[6];
    __dst[7] = v28[7];
    __dst[8] = v28[8];
    __dst[2] = v28[2];
    __dst[3] = v28[3];
    __dst[4] = v28[4];
    __dst[5] = v28[5];
    __dst[0] = v28[0];
    v6 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v2 + 72);
    v8 = *(_BYTE *)(v2 + 64);
    LOWORD(__dst[9]) = v28[9];
    __dst[1] = v28[1];
    NavigationState.stackContent(for:)(v6, v8, v7, (uint64_t)v35);
    outlined retain of NavigationState?((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    outlined init with take of Image.Resolved?((uint64_t)v35, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)__dst);
  }
  outlined init with take of Image.Resolved?((uint64_t)__dst, (uint64_t)v37, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with copy of MultimodalNavigationStack(v2, (uint64_t)v29);
  outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v34, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v34) == 1)
  {
    v9 = v30;
    v10 = v31;
    v11 = v32;
    outlined destroy of MultimodalNavigationStack((uint64_t)v29);
    *(_QWORD *)&__dst[0] = v9;
    if (v10 == 4)
      v12 = 0;
    else
      v12 = v10;
    BYTE8(__dst[0]) = v12;
    *(_QWORD *)&__dst[1] = v11;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(__dst);
    outlined init with take of NavigationState.Base(__dst, __src);
  }
  else
  {
    outlined destroy of MultimodalNavigationStack((uint64_t)v29);
    outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  memcpy(__dst, __src, 0x188uLL);
  v13 = NavigationState.StackContent.count.getter();
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  MultimodalNavigationStack.rootView.getter((uint64_t)v28);
  outlined init with copy of MultimodalNavigationStack(v2, (uint64_t)__dst);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v13;
  outlined init with take of MultimodalNavigationStack(__dst, v14 + 24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_187BF9830;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v28, v15 + 32, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  outlined init with take of NavigationState.Base(__src, v27);
  v27[49] = partial apply for closure #1 in MultimodalNavigationStack.body.getter;
  v27[50] = v14;
  v27[51] = v15;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  memcpy(v28, v27, sizeof(v28));
  memcpy(__dst, v27, sizeof(__dst));
  v16 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH08ModifiedK0VyAH13_VariadicViewO4TreeVy_AH13_VStackLayoutVAH01_nO9_ChildrenVGAH16RootItemModifier33_0CB7C3A8C661577BDD4B07512497B9D9LLVGAH0juV0A1_LLVGG_AH0jU0A1_LLVs5NeverOTB503_s7f14UI25Multimodalhj23V4bodyQrvgAA0E4Item33_0wxyz35BDD4B07512497B9D9LLVSi6offset_AA0D5i4V0E7k13V14PositionedO18V7elementt_tXEfU0_Tf1cn_n((uint64_t)__dst, (uint64_t)v26);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v28);
  v17 = *(_BYTE *)(v2 + 136);
  v18 = *(_QWORD *)(v2 + 144);
  v19 = *(_BYTE *)(v2 + 152);
  v20 = *(_QWORD *)(v2 + 160);
  v27[0] = *(_QWORD *)(v2 + 128);
  LOBYTE(v27[1]) = v17;
  v27[2] = v18;
  LOBYTE(v27[3]) = v19;
  v27[4] = v20;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  *(_QWORD *)a1 = v16;
  memcpy((void *)(a1 + 8), __src, 0x188uLL);
  outlined init with copy of NavigationAuthority(v4, a1 + 400);
  *(_QWORD *)(a1 + 424) = v22;
  *(_BYTE *)(a1 + 432) = v23;
  *(_QWORD *)(a1 + 440) = v24;
  *(_BYTE *)(a1 + 448) = v25;
  *(_QWORD *)(a1 + 456) = swift_getKeyPath();
  *(_BYTE *)(a1 + 464) = 0;
  result = swift_getKeyPath();
  *(_QWORD *)(a1 + 472) = result;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  return result;
}

uint64_t MultimodalNavigationStack.rootView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  _BYTE *v5;
  Swift::UInt v6;
  Swift::UInt v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  _QWORD __dst[49];
  _BYTE v20[56];
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  _BYTE __src[392];
  _BYTE v25[392];
  _BYTE v26[392];
  _OWORD v27[9];
  __int16 v28;

  v2 = v1;
  outlined init with copy of NavigationAuthority(v1 + 80, (uint64_t)v20);
  Strong = swift_weakLoadStrong();
  outlined destroy of NavigationAuthority((uint64_t)v20);
  if (Strong
    && (swift_beginAccess(),
        outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)__dst, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of Image.Resolved?((uint64_t)__dst, (uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)__src) != 1))
  {
    v6 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v2 + 72);
    v8 = *(_BYTE *)(v2 + 64);
    v27[6] = *(_OWORD *)&__src[96];
    v27[7] = *(_OWORD *)&__src[112];
    v27[8] = *(_OWORD *)&__src[128];
    v28 = *(_WORD *)&__src[144];
    v27[2] = *(_OWORD *)&__src[32];
    v27[3] = *(_OWORD *)&__src[48];
    v27[4] = *(_OWORD *)&__src[64];
    v27[5] = *(_OWORD *)&__src[80];
    v27[0] = *(_OWORD *)__src;
    v27[1] = *(_OWORD *)&__src[16];
    NavigationState.stackContent(for:)(v6, v8, v7, (uint64_t)v26);
    outlined retain of NavigationState?((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    outlined init with take of Image.Resolved?((uint64_t)v26, (uint64_t)v25, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    v5 = v25;
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v26);
    v5 = v26;
  }
  outlined init with take of Image.Resolved?((uint64_t)v5, (uint64_t)v27, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with copy of MultimodalNavigationStack(v2, (uint64_t)v20);
  outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v25, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v25) == 1)
  {
    v9 = v21;
    v10 = v22;
    v11 = v23;
    outlined destroy of MultimodalNavigationStack((uint64_t)v20);
    __dst[0] = v9;
    if (v10 == 4)
      v12 = 0;
    else
      v12 = v10;
    LOBYTE(__dst[1]) = v12;
    __dst[2] = v11;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(__dst);
    outlined init with take of NavigationState.Base(__dst, __src);
  }
  else
  {
    outlined destroy of MultimodalNavigationStack((uint64_t)v20);
    outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  memcpy(__dst, __src, sizeof(__dst));
  v13 = NavigationState.StackContent.count.getter();
  v14 = static HorizontalAlignment.center.getter();
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)&__dst[3]);
  __dst[0] = v14;
  __dst[1] = 0;
  LOBYTE(__dst[2]) = 1;
  v15 = *(_QWORD *)(v2 + 112);
  v16 = *(_BYTE *)(v2 + 120);
  outlined copy of Environment<Bool>.Content(v15, v16);
  v17 = specialized Environment.wrappedValue.getter(v15, v16);
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  outlined consume of Environment<Bool>.Content(v15, v16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__dst, a1, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  *(double *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = v13 == 1;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
}

uint64_t *closure #1 in MultimodalNavigationStack.body.getter@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  _OWORD v6[3];

  v4 = *result;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = *result + 1 == a2;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    return (uint64_t *)StackItemModifier.init(index:isTopItem:topItemBarTransitionProgress:)(v4, v5, v6, a3);
  }
  return result;
}

uint64_t StackItemModifier.init(index:isTopItem:topItemBarTransitionProgress:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t result;

  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = a2;
  v5 = a3[1];
  *(_OWORD *)(a4 + 16) = *a3;
  *(_OWORD *)(a4 + 32) = v5;
  *(_OWORD *)(a4 + 41) = *(_OWORD *)((char *)a3 + 25);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 1;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_BYTE *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 136) = 0;
  *(_BYTE *)(a4 + 144) = 1;
  *(_QWORD *)(a4 + 152) = 0;
  *(_QWORD *)(a4 + 160) = 0;
  *(_BYTE *)(a4 + 168) = 1;
  *(_QWORD *)(a4 + 176) = 0;
  *(_QWORD *)(a4 + 184) = 0;
  *(_BYTE *)(a4 + 192) = 1;
  *(_QWORD *)(a4 + 200) = 0;
  *(_BYTE *)(a4 + 208) = 1;
  *(_QWORD *)(a4 + 216) = 0;
  *(_QWORD *)(a4 + 224) = swift_getKeyPath();
  *(_BYTE *)(a4 + 232) = 0;
  *(_QWORD *)(a4 + 240) = swift_getKeyPath();
  *(_BYTE *)(a4 + 248) = 0;
  *(_QWORD *)(a4 + 256) = swift_getKeyPath();
  *(_BYTE *)(a4 + 264) = 0;
  *(_QWORD *)(a4 + 272) = 0x403E000000000000;
  static Color.black.getter();
  v6 = Color.opacity(_:)();
  result = swift_release();
  *(_QWORD *)(a4 + 280) = v6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StackItem(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void closure #1 in RootItemModifier.body(content:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  specialized RootItemModifier.localizedApplicationName()();
  lazy protocol witness table accessor for type String and conformance String();
  v6 = Text.init<A>(_:)();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v15 = objc_msgSend(v14, sel_bundleIdentifier);

  v16 = objc_msgSend(v13, sel__applicationIconImageForBundleIdentifier_format_scale_, v15, 2, a3);
  if (v16)
  {
    type metadata accessor for ImageProviderBox<UIImage>();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.ResizableProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider, MEMORY[0x1E0CE71F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v17;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_BYTE *)(v18 + 56) = 1;
    if (one-time initialization token for clarityUINavigationAppIconShadow != -1)
      swift_once();
    if (one-time initialization token for navigationAppIconShadowRadius != -1)
      swift_once();
    if (one-time initialization token for navigationAppIconShadowOffset != -1)
      swift_once();
    v19 = v10 & 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<Image, _ShadowEffect>, MEMORY[0x1E0CE7298], MEMORY[0x1E0CE2400], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    v20 = AnyView.init<A>(_:)();
    outlined consume of NavigationTitleStorage?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v12;
    *(_OWORD *)(a1 + 32) = xmmword_187C662B0;
    *(_QWORD *)(a1 + 48) = v20;
    *(_BYTE *)(a1 + 56) = 3;
    swift_retain();
    outlined consume of Transaction?(1);
    *(_QWORD *)(a1 + 32) = a2;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance RootItemModifier@<X0>(void (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t result;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = v4;
  *a1 = partial apply for closure #1 in RootItemModifier.body(content:);
  a1[1] = (void (*)(uint64_t, uint64_t))result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BarTransitionProgress(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 24))
      return 1;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t StackItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[536];
  _BYTE v22[456];
  _BYTE v23[536];
  _BYTE __src[359];
  _QWORD v25[49];
  _QWORD v26[53];
  _OWORD v27[34];
  _QWORD v28[74];
  _QWORD __dst[36];
  _BYTE v30[392];
  double v31;
  char v32;
  _BYTE v33[360];

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  memcpy(__dst, v2, sizeof(__dst));
  v5 = __dst[1];
  v6 = __dst[32];
  v7 = __dst[33];
  outlined copy of Environment<Bool>.Content(__dst[32], __dst[33]);
  v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  closure #1 in StackItemModifier.body(content:)((uint64_t)__dst, (uint64_t)v33);
  if (one-time initialization token for clarityUIContentBackground != -1)
    swift_once();
  v9 = Color.opacity(_:)();
  v10 = static Edge.Set.all.getter();
  v11 = __dst[0];
  if (__dst[0])
    v12 = static AnyTransition.move(edge:)();
  else
    v12 = static AnyTransition.identity.getter();
  v13 = v12;
  memcpy(&__src[6], v33, 0x161uLL);
  memcpy((char *)v25 + 2, __src, 0x167uLL);
  LOBYTE(v25[0]) = v5;
  BYTE1(v25[0]) = v8 & 1;
  v25[46] = v9;
  LOBYTE(v25[47]) = v10;
  v25[48] = v13;
  memcpy(v30, v25, sizeof(v30));
  v31 = (double)v11;
  v32 = v5;
  if ((v5 & 1) != 0)
    v14 = 0x400000000;
  else
    v14 = 0x400000004;
  specialized View.accessibility<A>(_:_:isEnabled:)(v14, 1, v26);
  outlined release of ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>((uint64_t)v25);
  memcpy(v28, v26, 0x1A8uLL);
  v15 = swift_allocObject();
  memcpy((void *)(v15 + 16), __dst, 0x120uLL);
  v16 = swift_allocObject();
  memcpy((void *)(v16 + 16), __dst, 0x120uLL);
  v28[53] = partial apply for closure #2 in StackItemModifier.body(content:);
  v28[54] = v15;
  v28[55] = partial apply for closure #3 in StackItemModifier.body(content:);
  v28[56] = v16;
  v27[0] = *(_OWORD *)&__dst[23];
  v27[1] = *(_OWORD *)&__dst[25];
  *(_QWORD *)&v27[2] = __dst[27];
  outlined retain of StackItemModifier((uint64_t)__dst);
  outlined retain of StackItemModifier((uint64_t)__dst);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v17 = swift_allocObject();
  memcpy((void *)(v17 + 16), __dst, 0x120uLL);
  outlined retain of StackItemModifier((uint64_t)__dst);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, , (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _PreferenceActionModifier<A>);
  lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  memcpy(v22, v28, sizeof(v22));
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>((uint64_t)v22);
  memcpy(v21, v27, sizeof(v21));
  v18 = swift_allocObject();
  memcpy((void *)(v18 + 16), __dst, 0x120uLL);
  outlined retain of StackItemModifier((uint64_t)__dst);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _Valu, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTr, MEMORY[0x1E0CE5EF8]);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  memcpy(v23, v21, sizeof(v23));
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionPr((uint64_t)v23);
  v19 = swift_allocObject();
  memcpy((void *)(v19 + 16), __dst, 0x120uLL);
  memcpy((void *)v4, v28, 0x250uLL);
  *(_QWORD *)(v4 + 592) = partial apply for closure #5 in StackItemModifier.body(content:);
  *(_QWORD *)(v4 + 600) = v19;
  *(_OWORD *)(v4 + 608) = 0u;
  return outlined retain of StackItemModifier((uint64_t)__dst);
}

__n128 closure #1 in StackItemModifier.body(content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  _BYTE v55[7];
  char v56;
  _BYTE v57[7];
  char v58;
  int v59;
  __int16 v60;
  char v61;
  _BYTE v62[7];
  char v63;
  _BYTE v64[7];
  char v65;
  _BYTE v66[7];
  char v67;
  _BYTE v68[7];
  int v69;
  __int16 v70;
  _DWORD v71[2];
  _DWORD v72[2];
  _DWORD v73[2];
  _DWORD v74[2];
  _DWORD v75[2];
  _DWORD v76[6];

  v4 = (__n128 *)(a2 + 296);
  v38 = swift_allocObject();
  memcpy((void *)(v38 + 16), (const void *)a1, 0x120uLL);
  KeyPath = swift_getKeyPath();
  v36 = *(_QWORD *)(a1 + 280);
  v37 = KeyPath;
  v6 = *(_QWORD *)(a1 + 272);
  outlined retain of StackItemModifier(a1);
  swift_retain();
  v7 = static Alignment.center.getter();
  v34 = v8;
  v35 = v7;
  v39 = *(__n128 *)(a1 + 184);
  v40 = *(__n128 *)(a1 + 200);
  v41.n128_u64[0] = *(_QWORD *)(a1 + 216);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v32 = v44;
  v30 = v46;
  v31 = v45;
  v58 = 0;
  v56 = BYTE8(v45);
  v54 = BYTE8(v46);
  v33 = static HorizontalAlignment.center.getter();
  closure #3 in closure #1 in StackItemModifier.body(content:)((uint64_t)&v44);
  v28 = v45;
  v29 = v44;
  v27 = v46;
  v26 = v47;
  v25 = BYTE8(v47);
  v23 = v50;
  v24 = v48;
  v22 = v52;
  v67 = v49;
  v65 = v51;
  v63 = v53;
  v61 = 0;
  v9 = v58;
  *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)&v57[3];
  v76[0] = *(_DWORD *)v57;
  *(_DWORD *)((char *)v75 + 3) = *(_DWORD *)&v55[3];
  v75[0] = *(_DWORD *)v55;
  v10 = v54;
  *(_DWORD *)((char *)v74 + 3) = *(_DWORD *)&v68[3];
  v74[0] = *(_DWORD *)v68;
  v20 = v49;
  v21 = v56;
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)&v66[3];
  v73[0] = *(_DWORD *)v66;
  v11 = v51;
  *(_DWORD *)((char *)v72 + 3) = *(_DWORD *)&v64[3];
  v72[0] = *(_DWORD *)v64;
  v12 = v53;
  *(_DWORD *)((char *)v71 + 3) = *(_DWORD *)&v62[3];
  v71[0] = *(_DWORD *)v62;
  v70 = v60;
  v69 = v59;
  v13 = *(_OWORD *)(a1 + 112);
  v46 = *(_OWORD *)(a1 + 96);
  v47 = v13;
  v48 = *(_QWORD *)(a1 + 128);
  v14 = *(_OWORD *)(a1 + 80);
  v44 = *(_OWORD *)(a1 + 64);
  v45 = v14;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<EquatableNavigationTitle?>, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1E1AE4E08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  result = v39;
  *(_DWORD *)(a2 + 41) = v76[0];
  *(_DWORD *)(a2 + 44) = *(_DWORD *)((char *)v76 + 3);
  *(_DWORD *)(a2 + 121) = v75[0];
  *(_DWORD *)(a2 + 124) = *(_DWORD *)((char *)v75 + 3);
  *(_DWORD *)(a2 + 137) = v44;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)((char *)&v44 + 3);
  *(_DWORD *)(a2 + 201) = v74[0];
  *(_DWORD *)(a2 + 204) = *(_DWORD *)((char *)v74 + 3);
  v16 = v73[0];
  *(_DWORD *)(a2 + 220) = *(_DWORD *)((char *)v73 + 3);
  *(_DWORD *)(a2 + 217) = v16;
  v17 = v72[0];
  *(_DWORD *)(a2 + 236) = *(_DWORD *)((char *)v72 + 3);
  *(_DWORD *)(a2 + 233) = v17;
  v18 = v71[0];
  *(_DWORD *)(a2 + 252) = *(_DWORD *)((char *)v71 + 3);
  *(_DWORD *)(a2 + 249) = v18;
  v19 = v69;
  *(_WORD *)(a2 + 278) = v70;
  *(_DWORD *)(a2 + 274) = v19;
  *(_QWORD *)a2 = partial apply for closure #1 in closure #1 in StackItemModifier.body(content:);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = partial apply for closure #2 in closure #1 in StackItemModifier.body(content:);
  *(_QWORD *)(a2 + 24) = v38;
  *(_QWORD *)(a2 + 32) = v37;
  *(_BYTE *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v36;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v35;
  *(_QWORD *)(a2 + 88) = v34;
  *(_OWORD *)(a2 + 96) = v32;
  *(_QWORD *)(a2 + 112) = v31;
  *(_BYTE *)(a2 + 120) = v21;
  *(_QWORD *)(a2 + 128) = v30;
  *(_BYTE *)(a2 + 136) = v10;
  *(_OWORD *)(a2 + 144) = v29;
  *(_OWORD *)(a2 + 160) = v28;
  *(_OWORD *)(a2 + 176) = v27;
  *(_QWORD *)(a2 + 192) = v26;
  *(_BYTE *)(a2 + 200) = v25;
  *(_QWORD *)(a2 + 208) = v24;
  *(_BYTE *)(a2 + 216) = v20;
  *(_QWORD *)(a2 + 224) = v23;
  *(_BYTE *)(a2 + 232) = v11;
  *(_QWORD *)(a2 + 240) = v22;
  *(_BYTE *)(a2 + 248) = v12;
  *(_OWORD *)(a2 + 256) = xmmword_187BFE310;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 273) = 0;
  *(_QWORD *)(a2 + 280) = v33;
  *(_QWORD *)(a2 + 288) = 0;
  *v4 = v39;
  v4[1] = v40;
  v4[2] = v41;
  *(_QWORD *)(a2 + 344) = v42;
  *(_BYTE *)(a2 + 352) = v43;
  return result;
}

uint64_t closure #1 in closure #1 in StackItemModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  GeometryProxy.safeAreaInsets.getter();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  result = static Edge.Set.all.getter();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = -1;
  *(_BYTE *)(a1 + 56) = result;
  return result;
}

uint64_t *closure #2 in closure #1 in StackItemModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _BYTE v18[8];
  uint64_t v19;

  v2 = a1[3];
  v3 = (__int128 *)(a2 + 64);
  if (v2 == 1)
  {
    v4 = *(_OWORD *)(a2 + 112);
    v15 = *(_OWORD *)(a2 + 96);
    v16 = v4;
    v17[0] = *(_QWORD *)(a2 + 128);
    v5 = *(_OWORD *)(a2 + 80);
    v13 = *v3;
    v14 = v5;
    outlined init with take of TableCellFormula((uint64_t)v17, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    result = (uint64_t *)outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)&v19, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    if (!v19)
      return result;
    outlined retain of State<EquatableNavigationTitle?>((uint64_t *)&v13);
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  else
  {
    v7 = *a1;
    v8 = a1[1];
    v9 = a1[2];
    v10 = a1[4];
    v11 = *(_OWORD *)(a2 + 112);
    v15 = *(_OWORD *)(a2 + 96);
    v16 = v11;
    v17[0] = *(_QWORD *)(a2 + 128);
    v12 = *(_OWORD *)(a2 + 80);
    v13 = *v3;
    v14 = v12;
    outlined init with take of TableCellFormula((uint64_t)v17, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    result = (uint64_t *)outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)&v19, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    if (!v19)
      return result;
    outlined copy of NavigationTitleStorage?(v7, v8, v9, v2, v10);
    outlined retain of State<EquatableNavigationTitle?>((uint64_t *)&v13);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined consume of NavigationTitleStorage?(v7, v8, v9, v2, v10);
  }
  return outlined release of State<EquatableNavigationTitle?>((uint64_t *)&v13);
}

uint64_t closure #3 in closure #1 in StackItemModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;

  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<EquatableNavigationTitle?>, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1E1AE4E08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v14 == 1)
  {
    v9 = 0;
    v10 = 0;
    v7 = 0;
    v8 = 0;
    v5 = 0;
    v2 = 0;
    v6 = 0;
  }
  else
  {
    v2 = v17;
    outlined copy of Text?(v11, v12, v13, v14);
    outlined copy of Transaction?(v15);
    swift_retain();
    v9 = v12;
    v10 = v11;
    v7 = v15;
    v8 = v13;
    v6 = v18;
    outlined consume of NavigationTitleStorage?(v11, v12, v13, v14, v15);
    v5 = v16;
  }
  v3 = MEMORY[0x1E0CE7320];
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  State.wrappedValue.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))v3);
  result = State.wrappedValue.getter();
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v12;
  return result;
}

uint64_t closure #2 in StackItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 136);
  if (*(_QWORD *)(a2 + 152))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of TouchEvent((uint64_t)&v3);
  }
  return result;
}

uint64_t closure #3 in StackItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 160);
  if (*(_QWORD *)(a2 + 176))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of TouchEvent((uint64_t)&v3);
  }
  return result;
}

void StackItemModifier.updateTopItemBarTransitionProgressIfNeeded()()
{
  const void *v0;
  uint64_t v1;
  char v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[37];
  char v9;
  uint64_t v10;
  char v11;
  _QWORD __dst[36];

  memcpy(__dst, v0, sizeof(__dst));
  if (LOBYTE(__dst[1]) == 1)
  {
    v8[4] = __dst[27];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
    v8[0] = v8[36];
    LOBYTE(v8[1]) = v9;
    v8[2] = v10;
    LOBYTE(v8[3]) = v11;
    outlined retain of StackItemModifier((uint64_t)__dst);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    outlined release of StackItemModifier((uint64_t)__dst);
    v1 = __dst[30];
    v2 = __dst[31];
    outlined copy of Environment<Bool>.Content(__dst[30], __dst[31]);
    specialized Environment.wrappedValue.getter(v1, v2, v8);
    outlined consume of Environment<Bool>.Content(v1, v2);
    if (LOBYTE(v8[0]) == 1)
    {
      v3 = (void *)__dst[28];
      v4 = __dst[29];
      outlined copy of Environment<UISceneSession?>.Content((id)__dst[28], __dst[29]);
      v5 = specialized Environment.wrappedValue.getter(v3, v4);
      outlined consume of Environment<UISceneSession?>.Content(v3, v4);
      if (v5)
      {
        v6 = objc_msgSend(v5, sel_scene);

        if (v6)
        {
          v7 = objc_msgSend(v6, sel__FBSScene);

          if (v7)
          {
            memcpy(v8, __dst, 0x120uLL);
            StackItemModifier.updateScene(_:)(v7);

          }
        }
      }
    }
  }
}

void StackItemModifier.updateScene(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t, void *);
  char v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  char v12;
  uint64_t ObjectType;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char isEscapingClosureAtFileLocation;
  _QWORD v20[3];
  char v21;
  id v22;
  uint64_t aBlock;
  uint64_t v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  double v29;
  char v30;

  v3 = *(_QWORD *)(v1 + 184);
  v4 = *(_BYTE *)(v1 + 192);
  v5 = *(void (**)(uint64_t, void *))(v1 + 200);
  v6 = *(_BYTE *)(v1 + 208);
  v7 = *(uint64_t (**)(uint64_t))(v1 + 216);
  v22 = objc_msgSend(a1, sel_clientSettings);
  swift_getObjectType();
  v8 = swift_conformsToProtocol2();
  if (v8)
    v9 = v8;
  else
    v9 = 0;
  if (v8)
    v10 = v22;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_11;
  aBlock = v3;
  LOBYTE(v24) = v4;
  v25 = v5;
  LOBYTE(v26) = v6;
  v27 = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v11 = v29;
  v12 = v30;
  ObjectType = swift_getObjectType();
  v14 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9));
  if ((v15 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
LABEL_11:

      return;
    }
  }
  else if ((v30 & 1) == 0 && v14 == v29)
  {
    goto LABEL_11;
  }
  MEMORY[0x1E0C80A78](*(_QWORD *)&v14, v15);
  *(double *)&v20[2] = v11;
  v21 = v12;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in StackItemModifier.updateScene(_:);
  *(_QWORD *)(v16 + 24) = v20;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in FBSScene.updateClarityUIClientSettings(_:);
  *(_QWORD *)(v17 + 24) = v16;
  v27 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  v28 = v17;
  aBlock = MEMORY[0x1E0C809B0];
  v24 = 1107296256;
  v25 = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  v26 = &block_descriptor_78;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_updateClientSettingsWithBlock_, v18);
  _Block_release(v18);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();

  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance MultimodalNavigationStackViewHost<A>(uint64_t a1, uint64_t a2)
{
  specialized MultimodalNavigationStackViewHost.makeUIViewController(context:)(a2, a2);
}

uint64_t protocol witness for UIViewControllerRepresentable.updateUIViewController(_:context:) in conformance MultimodalNavigationStackViewHost<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MultimodalNavigationStackViewHost.updateUIViewController(_:context:)(a1, a3);
}

uint64_t static OnScrollStateChange._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v33 = *a1;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v9 = *((_DWORD *)a2 + 8);
  v10 = *((_DWORD *)a2 + 9);
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 14);
  v14 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 16);
  v16 = *((_DWORD *)a2 + 17);
  v17 = *((_DWORD *)a2 + 18);
  v18 = *((_DWORD *)a2 + 19);
  v19 = *((_DWORD *)a2 + 20);
  v62 = *a2;
  v42 = v9;
  v43 = v5;
  v63 = v5;
  v64 = v6;
  v47 = v8;
  v48 = v7;
  *(_QWORD *)&v65 = __PAIR64__(v8, v7);
  *((_QWORD *)&v65 + 1) = __PAIR64__(v10, v9);
  v45 = v13;
  v46 = v10;
  v66 = v11;
  v67 = v12;
  *(_QWORD *)&v68 = __PAIR64__(v14, v13);
  v40 = v15;
  v41 = v14;
  *((_QWORD *)&v68 + 1) = __PAIR64__(v16, v15);
  v38 = v17;
  v39 = v16;
  v69 = __PAIR64__(v18, v17);
  v36 = v19;
  v37 = v18;
  v70 = v19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollGeometryPreferenceKey>, MEMORY[0x1E0CE61C8], MEMORY[0x1E0CE61C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v52 = v62;
  v53 = v63;
  v55 = v6;
  v56 = v65;
  v57 = v11;
  v58 = v12;
  v59 = v68;
  v60 = v69;
  v61 = v70;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(&v49, v20, &v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21 = v49;
  v22 = v50;
  v52 = v49;
  v53 = v50;
  v54 = v51;
  v34 = v51;
  v23 = _ViewOutputs.subscript.getter();
  if ((v23 & 0x100000000) == 0)
  {
    LODWORD(v52) = v33;
    HIDWORD(v32) = v23;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnScrollStateChange>, (uint64_t)&unk_1E1ACF3A0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v32) = _GraphValue.value.getter();
    v52 = v4;
    v53 = v43;
    v55 = v6;
    *(_QWORD *)&v56 = __PAIR64__(v47, v48);
    *((_QWORD *)&v56 + 1) = __PAIR64__(v46, v42);
    v57 = v11;
    v58 = v12;
    *(_QWORD *)&v59 = __PAIR64__(v41, v45);
    *((_QWORD *)&v59 + 1) = __PAIR64__(v39, v40);
    v60 = __PAIR64__(v37, v38);
    v61 = v36;
    v31 = _ViewInputs.position.getter();
    v52 = v4;
    v53 = v43;
    v55 = v6;
    *(_QWORD *)&v56 = __PAIR64__(v47, v48);
    *((_QWORD *)&v56 + 1) = __PAIR64__(v46, v42);
    v57 = v11;
    v58 = v12;
    *(_QWORD *)&v59 = __PAIR64__(v41, v45);
    *((_QWORD *)&v59 + 1) = __PAIR64__(v39, v40);
    v60 = __PAIR64__(v37, v38);
    v61 = v36;
    v30 = _ViewInputs.size.getter();
    v52 = v4;
    v53 = v43;
    v55 = v6;
    *(_QWORD *)&v56 = __PAIR64__(v47, v48);
    *((_QWORD *)&v56 + 1) = __PAIR64__(v46, v42);
    v57 = v11;
    v58 = v12;
    *(_QWORD *)&v59 = __PAIR64__(v41, v45);
    *((_QWORD *)&v59 + 1) = __PAIR64__(v39, v40);
    v60 = __PAIR64__(v37, v38);
    v61 = v36;
    v29 = _ViewInputs.transform.getter();
    v52 = v4;
    v53 = v43;
    v55 = v6;
    *(_QWORD *)&v56 = __PAIR64__(v47, v48);
    *((_QWORD *)&v56 + 1) = __PAIR64__(v46, v42);
    v57 = v11;
    v58 = v12;
    *(_QWORD *)&v59 = __PAIR64__(v41, v45);
    *((_QWORD *)&v59 + 1) = __PAIR64__(v39, v40);
    v60 = __PAIR64__(v37, v38);
    v61 = v36;
    v24 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    v25 = v53;
    v26 = v54;
    v27 = v52;
    v52 = v32;
    v53 = v31;
    v54 = v30;
    v55 = __PAIR64__(v24, v29);
    *(_QWORD *)&v56 = v27;
    DWORD2(v56) = v25;
    BYTE12(v56) = v26;
    LODWORD(v57) = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollStateActionBinding and conformance ScrollStateActionBinding();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v22;
  *(_DWORD *)(a4 + 12) = v34;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollStateChange()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t *ScrollStateActionBinding.updateValue()()
{
  uint64_t v0;
  int v1;
  uint64_t *result;
  char v3;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[25];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[6];
  _OWORD v42[2];
  _BYTE v43[17];
  _BYTE v44[128];
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[128];

  v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != *(_DWORD *)(v0 + 40))
  {
    *(_DWORD *)(v0 + 40) = v1;
    *(_QWORD *)(v0 + 28) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 36) = 0;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = (uint64_t *)AGGraphGetValue();
  if ((v3 & 1) != 0)
  {
    v4 = *result;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    AGGraphGetValue();
    AGGraphSetUpdate();
    AGGraphClearUpdate();
    Value = AGGraphGetValue();
    v31 = *(_OWORD *)Value;
    v6 = *(_QWORD *)(Value + 16);
    v7 = *(_QWORD *)(Value + 24);
    AGGraphSetUpdate();
    AGGraphClearUpdate();
    v8 = AGGraphGetValue();
    v9 = *(_QWORD *)v8;
    v30 = *(_OWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 24);
    v11 = *(_QWORD *)(v8 + 32);
    swift_retain();
    v12 = AGGraphSetUpdate();
    v13 = MEMORY[0x18D755E9C](v12);
    v15 = v14;
    v33 = v31;
    *(_QWORD *)&v34 = v6;
    *((_QWORD *)&v34 + 1) = v7;
    v16 = MEMORY[0x18D75BE3C]();
    v46 = v9;
    v47 = v30;
    v48 = v10;
    v49 = v11;
    ScrollStateActionBinding.findBestStates(in:position:size:transform:)(v4, &v46, &v33, v13, v15, v16, v17);
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0CE4958];
    outlined init with take of Image.Resolved?((uint64_t)&v33, (uint64_t)v44, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
    outlined init with take of Image.Resolved?((uint64_t)v44, (uint64_t)&v46, &lazy cache variable for type metadata for ScrollGeometryState?, v18);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v46) != 1
      || (outlined init with take of Image.Resolved?((uint64_t)v41, (uint64_t)v43, &lazy cache variable for type metadata for ScrollGeometryState?, v18), outlined init with take of Image.Resolved?((uint64_t)v43, (uint64_t)v50, &lazy cache variable for type metadata for ScrollGeometryState?, v18), _s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v50) != 1))
    {
      if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
      {
        AGGraphClearUpdate();
        v19 = AGGraphGetValue();
        v20 = *(_QWORD *)(v19 + 8);
        *(_OWORD *)v32 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)&v32[9] = *(_OWORD *)(v19 + 25);
        v45 = *(_QWORD *)v19;
        v21 = v45;
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v45);
        swift_retain();
        AGGraphSetUpdate();
        v22 = swift_allocObject();
        *(_QWORD *)(v22 + 16) = v21;
        *(_QWORD *)(v22 + 24) = v20;
        *(_OWORD *)(v22 + 32) = *(_OWORD *)v32;
        *(_OWORD *)(v22 + 41) = *(_OWORD *)&v32[9];
        v23 = v41[5];
        *(_OWORD *)(v22 + 256) = v41[4];
        *(_OWORD *)(v22 + 272) = v23;
        *(_OWORD *)(v22 + 288) = v42[0];
        *(_OWORD *)(v22 + 301) = *(_OWORD *)((char *)v42 + 13);
        v24 = v41[1];
        *(_OWORD *)(v22 + 192) = v41[0];
        *(_OWORD *)(v22 + 208) = v24;
        v25 = v41[3];
        *(_OWORD *)(v22 + 224) = v41[2];
        *(_OWORD *)(v22 + 240) = v25;
        v26 = v38;
        *(_OWORD *)(v22 + 128) = v37;
        *(_OWORD *)(v22 + 144) = v26;
        v27 = v40;
        *(_OWORD *)(v22 + 160) = v39;
        *(_OWORD *)(v22 + 176) = v27;
        v28 = v34;
        *(_OWORD *)(v22 + 64) = v33;
        *(_OWORD *)(v22 + 80) = v28;
        v29 = v36;
        *(_OWORD *)(v22 + 96) = v35;
        *(_OWORD *)(v22 + 112) = v29;
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v45);
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v45);
        swift_release();
      }
    }
    return (uint64_t *)swift_release();
  }
  return result;
}

double ScrollStateActionBinding.findBestStates(in:position:size:transform:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat y;
  CGFloat v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double MaxY;
  double v41;
  double v42;
  char v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double result;
  __int128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CGPoint v69;
  CGSize v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[128];
  _BYTE v82[128];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _QWORD v99[2];
  CGRect v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  CGRect rect;
  _QWORD v105[2];
  _OWORD v106[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _OWORD v113[6];
  _OWORD v114[2];
  _BYTE v115[144];
  CGRect v116;
  CGRect v117;

  v70.width = a6;
  v70.height = a7;
  v69.x = a4;
  v69.y = a5;
  v68 = *a2;
  v66 = a2[2];
  v67 = a2[1];
  v64 = a2[4];
  v65 = a2[3];
  _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v115);
  v8 = MEMORY[0x1E0CE4958];
  outlined init with take of Image.Resolved?((uint64_t)v115, (uint64_t)v106, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
  outlined init with take of Image.Resolved?((uint64_t)v115, (uint64_t)v113, &lazy cache variable for type metadata for ScrollGeometryState?, v8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = a1 + (v9 << 7) - 32;
    for (i = v9 - 1; ; --i)
    {
      v12 = *(_QWORD *)(v10 - 64);
      v13 = *(_QWORD *)(v10 - 56);
      v14 = *(_QWORD *)(v10 - 48);
      v15 = *(_QWORD *)(v10 - 40);
      v16 = *(_QWORD *)(v10 - 32);
      v17 = *(_QWORD *)(v10 - 24);
      v18 = *(_QWORD *)(v10 - 16);
      v19 = *(_QWORD *)(v10 - 8);
      v20 = *(_QWORD *)v10;
      v21 = *(_QWORD *)(v10 + 8);
      v22 = *(_QWORD *)(v10 + 16);
      v23 = *(_QWORD *)(v10 + 24);
      v24 = *(_QWORD *)(v10 + 32);
      v25 = *(_QWORD *)(v10 + 40);
      v26 = *(_BYTE *)(v10 + 48);
      v27 = *(_QWORD *)(v10 + 49);
      *(_DWORD *)((char *)v105 + 7) = *(_DWORD *)(v10 + 56);
      v105[0] = v27;
      if ((v26 & 2) == 0)
        goto LABEL_15;
      *(_QWORD *)&v86 = v12;
      *((_QWORD *)&v86 + 1) = v13;
      *(_QWORD *)&v87 = v14;
      *((_QWORD *)&v87 + 1) = v15;
      v88 = v16;
      v89 = v17;
      v90 = v18;
      v91 = v19;
      v92 = v20;
      v93 = v21;
      v94 = v22;
      v95 = v23;
      v96 = v24;
      v97 = v25;
      v98 = v26;
      v99[0] = *(_QWORD *)(v10 + 49);
      *(_DWORD *)((char *)v99 + 7) = *(_DWORD *)(v10 + 56);
      v79 = v21;
      v80 = v20;
      v77 = v23;
      v78 = v22;
      v75 = v25;
      v76 = v24;
      ScrollGeometryState.transform.getter();
      v28 = v83;
      if (v83 == 1)
        goto LABEL_15;
      v29 = v84;
      v30 = v85;
      rect.origin.y = 0.0;
      rect.origin.x = 0.0;
      rect.size = v70;
      v101 = v68;
      *(_QWORD *)&v102 = v67;
      *((_QWORD *)&v102 + 1) = v66;
      *(_QWORD *)&v103 = v65;
      *((_QWORD *)&v103 + 1) = v64;
      swift_retain();
      ViewTransform.appendPosition(_:)(v69);
      v88 = 0;
      v86 = 0u;
      v87 = 0u;
      LOBYTE(v89) = 2;
      v83 = v101;
      v84 = v102;
      v85 = v103;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)&v86);
      v73 = v13;
      *(_QWORD *)&v86 = v12;
      *((_QWORD *)&v86 + 1) = v13;
      *(_QWORD *)&v87 = v14;
      v31 = v15;
      *((_QWORD *)&v87 + 1) = v15;
      v74 = v16;
      v88 = v16;
      v32 = v17;
      v89 = v17;
      v71 = v19;
      v72 = v18;
      v90 = v18;
      v91 = v19;
      v92 = v80;
      v93 = v79;
      v94 = v78;
      v95 = v77;
      v96 = v76;
      v97 = v75;
      ScrollGeometry.bounds.getter();
      v100.origin.y = 0.0;
      v100.origin.x = 0.0;
      v100.size.width = v33;
      v100.size.height = v34;
      v88 = 0;
      v86 = 0u;
      v87 = 0u;
      LOBYTE(v89) = 2;
      v83 = v28;
      v84 = v29;
      v85 = v30;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)&v86);
      y = rect.origin.y;
      v36 = v100.origin.y;
      if ((~*(_QWORD *)&rect.origin.y & 0x7FF0000000000000) != 0
        && (~*(_QWORD *)&v100.origin.y & 0x7FF0000000000000) != 0)
      {
        v45 = fabs(rect.origin.y);
        v46 = fabs(v100.origin.y);
        if (v45 <= v46)
          v45 = v46;
        v47 = v45 * 0.0000000149011612;
        v48 = vabdd_f64(rect.origin.y, v100.origin.y);
        v49 = v45 > 2.22507386e-308;
        v50 = 0x4000000;
        if (v49)
          *(double *)&v50 = v47;
        v37 = v12;
        v38 = v74;
        v39 = v73;
        if (v48 < *(double *)&v50)
        {
LABEL_8:
          *(_QWORD *)&v86 = v37;
          *((_QWORD *)&v86 + 1) = v39;
          *(_QWORD *)&v87 = v14;
          *((_QWORD *)&v87 + 1) = v31;
          v88 = v38;
          v89 = v32;
          v90 = v72;
          v91 = v71;
          v92 = v80;
          v93 = v79;
          v94 = v78;
          v95 = v77;
          v96 = v76;
          v97 = v75;
          v98 = v26;
          v99[0] = v105[0];
          *(_DWORD *)((char *)v99 + 7) = *(_DWORD *)((char *)v105 + 7);
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v86);
          outlined init with take of Image.Resolved?((uint64_t)&v86, (uint64_t)v106, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
        }
      }
      else
      {
        v37 = v12;
        v38 = v74;
        v39 = v73;
        if ((specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v100.origin.y, 0.0000000149011612, rect.origin.y) & 1) != 0)goto LABEL_8;
      }
      v116.origin.x = rect.origin.x;
      v116.size.width = rect.size.width;
      v116.size.height = rect.size.height;
      v116.origin.y = y;
      MaxY = CGRectGetMaxY(v116);
      v117.origin.x = v100.origin.x;
      v117.size.width = v100.size.width;
      v117.size.height = v100.size.height;
      v117.origin.y = v36;
      v41 = CGRectGetMaxY(v117);
      v42 = v41;
      if ((~*(_QWORD *)&MaxY & 0x7FF0000000000000) != 0 && (~*(_QWORD *)&v41 & 0x7FF0000000000000) != 0)
      {
        outlined consume of Transaction?(v28);
        v51 = fabs(MaxY);
        v52 = fabs(v42);
        if (v51 <= v52)
          v51 = v52;
        v53 = vabdd_f64(MaxY, v42);
        if (v51 > 2.22507386e-308)
          v54 = v51 * 0.0000000149011612;
        else
          v54 = COERCE_DOUBLE(0x4000000);
        swift_release();
        if (v53 < v54)
        {
LABEL_12:
          *(_QWORD *)&v86 = v37;
          *((_QWORD *)&v86 + 1) = v39;
          *(_QWORD *)&v87 = v14;
          *((_QWORD *)&v87 + 1) = v31;
          v88 = v38;
          v89 = v32;
          v90 = v72;
          v91 = v71;
          v92 = v80;
          v93 = v79;
          v94 = v78;
          v95 = v77;
          v96 = v76;
          v97 = v75;
          v98 = v26;
          v99[0] = v105[0];
          *(_DWORD *)((char *)v99 + 7) = *(_DWORD *)((char *)v105 + 7);
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v86);
          outlined init with take of Image.Resolved?((uint64_t)&v86, (uint64_t)v113, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
        }
      }
      else
      {
        v43 = specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v41, 0.0000000149011612, MaxY);
        outlined consume of Transaction?(v28);
        swift_release();
        if ((v43 & 1) != 0)
          goto LABEL_12;
      }
      v44 = MEMORY[0x1E0CE4958];
      outlined init with take of Image.Resolved?((uint64_t)v106, (uint64_t)&v83, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
      outlined init with take of Image.Resolved?((uint64_t)&v83, (uint64_t)&v86, &lazy cache variable for type metadata for ScrollGeometryState?, v44);
      if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v86) != 1)
      {
        outlined init with take of Image.Resolved?((uint64_t)v113, (uint64_t)v81, &lazy cache variable for type metadata for ScrollGeometryState?, v44);
        outlined init with take of Image.Resolved?((uint64_t)v81, (uint64_t)v82, &lazy cache variable for type metadata for ScrollGeometryState?, v44);
        if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v82) != 1)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          break;
        }
      }
LABEL_15:
      if (!i)
        goto LABEL_31;
      v10 -= 128;
    }
  }
  v55 = v113[5];
  a3[12] = v113[4];
  a3[13] = v55;
  a3[14] = v114[0];
  *(_OWORD *)((char *)a3 + 237) = *(_OWORD *)((char *)v114 + 13);
  v56 = v113[1];
  a3[8] = v113[0];
  a3[9] = v56;
  v57 = v113[3];
  a3[10] = v113[2];
  a3[11] = v57;
  v58 = v110;
  a3[4] = v109;
  a3[5] = v58;
  v59 = v112;
  a3[6] = v111;
  a3[7] = v59;
  v60 = v106[1];
  *a3 = v106[0];
  a3[1] = v60;
  result = *(double *)&v107;
  v62 = v108;
  a3[2] = v107;
  a3[3] = v62;
  return result;
}

unint64_t implicit closure #2 in ScrollStateActionBinding.updateValue()()
{
  return 0xD000000000000020;
}

uint64_t closure #5 in ScrollStateActionBinding.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  _BYTE v8[128];
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  _BYTE v13[128];
  _BYTE v14[128];

  v3 = MEMORY[0x1E0CE4958];
  outlined init with take of Image.Resolved?(a2, (uint64_t)v14, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
  outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)&v9, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  outlined init with take of Image.Resolved?(a2 + 128, (uint64_t)v13, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v8, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  swift_retain();
  swift_retain();
  v9 = specialized static ScrollStateActionBinding.barTransitionProgress(topState:bottomState:)((uint64_t)&v9, (uint64_t)v8);
  v10 = v4 & 1;
  v11 = v5;
  v12 = v6 & 1;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance StackItemLayout(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 0.0;
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance StackItemLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v10;
  __int16 v11;

  if (v10[1])
    v11 = 256;
  else
    v11 = 0;
  return specialized StackItemLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4, a9, a10, v11 | *v10);
}

uint64_t StackItemsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _BYTE *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *(**v31)();
  _BYTE v33[12];
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[7];
  char v60;
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  _BYTE v66[7];
  _BYTE v67[280];
  _OWORD v68[21];
  _QWORD v69[42];

  v2 = (uint64_t *)v1;
  v52 = a1;
  v3 = type metadata accessor for NSNotificationCenter.Publisher();
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v49 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>();
  MEMORY[0x1E0C80A78](v47, v6);
  v48 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = static Alignment.center.getter();
  v44 = v9;
  v45 = v8;
  v10 = *(_QWORD *)v1;
  v69[0] = *(_QWORD *)v1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v12 = v11;
  lazy protocol witness table accessor for type [StackItem] and conformance [A]();
  lazy protocol witness table accessor for type StackItem and conformance StackItem();
  swift_bridgeObjectRetain();
  v46 = v12;
  ForEach<>.init(_:content:)();
  v43 = v54;
  v41 = v56;
  v42 = v55;
  v39 = v58;
  v40 = v57;
  v13 = *(_QWORD *)(v1 + 528);
  LOBYTE(v54) = *(_BYTE *)(v1 + 520);
  *((_QWORD *)&v54 + 1) = v13;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v14 = 0;
  if ((v69[0] & 1) == 0)
  {
    if (one-time initialization token for clarityUINavigationTransition != -1)
      swift_once();
    v14 = static Animation.clarityUINavigationTransition;
    swift_retain();
  }
  v15 = *(_QWORD *)(v1 + 512);
  LOBYTE(v69[0]) = *(_BYTE *)(v1 + 504);
  v69[1] = v15;
  swift_bridgeObjectRetain();
  State.projectedValue.getter();
  v37 = *((_QWORD *)&v54 + 1);
  v38 = v54;
  v36 = v55;
  v16 = *(_QWORD *)(v1 + 496);
  LOBYTE(v69[0]) = *(_BYTE *)(v1 + 488);
  v69[1] = v16;
  State.projectedValue.getter();
  v17 = v54;
  v34 = v55;
  v35 = *(_QWORD *)(v1 + 440);
  v18 = *(_BYTE *)(v1 + 448);
  outlined init with copy of StackItemsView(v1, (uint64_t)&v54);
  v19 = swift_allocObject();
  outlined init with take of StackItemsView((uint64_t)&v54, v19 + 16);
  KeyPath = swift_getKeyPath();
  v21 = swift_getKeyPath();
  v64 = v18;
  v62 = 0;
  v60 = 0;
  v22 = swift_getKeyPath();
  *(_QWORD *)&v68[0] = v45;
  *((_QWORD *)&v68[0] + 1) = v44;
  v68[1] = v43;
  *(_QWORD *)&v68[2] = v42;
  *((_QWORD *)&v68[2] + 1) = v41;
  *(_QWORD *)&v68[3] = v40;
  *((_QWORD *)&v68[3] + 1) = v39;
  *(_QWORD *)&v68[4] = v14;
  *((_QWORD *)&v68[4] + 1) = v10;
  *(_QWORD *)&v68[5] = v38;
  *((_QWORD *)&v68[5] + 1) = v37;
  LOBYTE(v68[6]) = v36;
  *(_DWORD *)((char *)&v68[6] + 1) = *(_DWORD *)v66;
  DWORD1(v68[6]) = *(_DWORD *)&v66[3];
  *(_OWORD *)((char *)&v68[6] + 8) = v17;
  BYTE8(v68[7]) = v34;
  HIDWORD(v68[7]) = *(_DWORD *)&v65[3];
  *(_DWORD *)((char *)&v68[7] + 9) = *(_DWORD *)v65;
  *(_QWORD *)&v68[8] = v35;
  BYTE8(v68[8]) = v18;
  HIDWORD(v68[8]) = *(_DWORD *)&v63[3];
  *(_DWORD *)((char *)&v68[8] + 9) = *(_DWORD *)v63;
  *(_QWORD *)&v68[9] = partial apply for closure #2 in StackItemsView.body.getter;
  *((_QWORD *)&v68[9] + 1) = v19;
  *(_QWORD *)&v68[10] = KeyPath;
  BYTE8(v68[10]) = 0;
  *(_DWORD *)((char *)&v68[10] + 9) = *(_DWORD *)v61;
  HIDWORD(v68[10]) = *(_DWORD *)&v61[3];
  *(_QWORD *)&v68[11] = v21;
  BYTE8(v68[11]) = 0;
  *(_DWORD *)((char *)&v68[11] + 9) = *(_DWORD *)v59;
  HIDWORD(v68[11]) = *(_DWORD *)&v59[3];
  memset(&v68[12], 0, 72);
  *((_QWORD *)&v68[16] + 1) = v22;
  LOBYTE(v68[17]) = 1;
  v53 = *v2;
  outlined init with copy of StackItemsView((uint64_t)v2, (uint64_t)&v54);
  v23 = swift_allocObject();
  outlined init with take of StackItemsView((uint64_t)&v54, v23 + 16);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type [StackItem] and conformance <A> [A]();
  swift_bridgeObjectRetain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  memcpy(v67, v68, 0x111uLL);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>((uint64_t)v67);
  memcpy(v68, v69, sizeof(v68));
  v24 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for didPerformBackButtonPress != -1)
    swift_once();
  v25 = v49;
  NSNotificationCenter.publisher(for:object:)();

  outlined init with copy of StackItemsView((uint64_t)v2, (uint64_t)&v54);
  v26 = swift_allocObject();
  outlined init with take of StackItemsView((uint64_t)&v54, v26 + 16);
  v28 = v47;
  v27 = v48;
  v30 = v50;
  v29 = v51;
  (*(void (**)(char *, _BYTE *, uint64_t))(v50 + 16))(&v48[*(int *)(v47 + 52)], v25, v51);
  memcpy(v27, v68, 0x150uLL);
  v31 = (uint64_t *(**)())&v27[*(int *)(v28 + 56)];
  *v31 = partial apply for closure #4 in StackItemsView.body.getter;
  v31[1] = (uint64_t *(*)())v26;
  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v25, v29);
  return outlined init with take of TableCellFormula((uint64_t)v27, v52, (uint64_t (*)(_QWORD))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>);
}

uint64_t closure #1 in closure #1 in StackItemsView.body.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

void closure #2 in StackItemsView.body.getter(char a1)
{
  id v1;
  id v2;

  if ((a1 & 1) != 0)
  {
    v1 = objc_msgSend((id)objc_opt_self(), sel_activeInstance);
    if (v1)
    {
      v2 = v1;
      objc_msgSend(v1, sel_dismissKeyboard);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    StackItemsView.navigateBack(isAnimated:)(1);
  }
}

uint64_t *StackItemsView.navigateBack(isAnimated:)(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  int v75;
  const void *v76;
  uint64_t v77;
  __int128 v78[8];
  uint64_t v79;
  _BYTE v80[24];
  _OWORD v81[35];
  _QWORD v82[8];
  unsigned __int16 v83;
  _BYTE v84[392];
  _BYTE v85[408];

  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v84, (const void *)(v1 + 8), sizeof(v84));
  outlined init with take of NavigationState.Base(v84, v85);
  v7 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v85);
  if (!v7)
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v85);
    outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    return (uint64_t *)outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  }
  v75 = a1;
  v74 = v6;
  v76 = (const void *)(v1 + 8);
  if (v7 != 1)
  {
    v29 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v85);
    v73 = &v66;
    v30 = *(_QWORD *)v29;
    v31 = *(_QWORD *)(v29 + 8);
    v77 = v1;
    v32 = *(_QWORD *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    v34 = *(_QWORD *)(v29 + 32);
    v35 = *(_QWORD *)(v29 + 40);
    v36 = *(_QWORD *)(v29 + 48);
    v37 = *(_QWORD *)(v29 + 56);
    v38 = *(_QWORD *)(v29 + 64);
    v70 = v31;
    v71 = v38;
    v39 = *(_WORD *)(v29 + 72);
    v82[0] = v31;
    v82[1] = v32;
    v82[2] = v33;
    v82[3] = v34;
    v82[4] = v35;
    v82[5] = v36;
    v82[6] = v37;
    v82[7] = v38;
    v83 = v39;
    *(_QWORD *)&v81[0] = v30;
    v72 = *(_QWORD *)(v30 + 16);
    MEMORY[0x1E0C80A78](v29, v40);
    v65 = v82;
    outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    v41 = v31;
    v42 = v71;
    outlined copy of NavigationSplitViewState?(v41, v32, v33, v34, v35, v36, v37, v71, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    v43 = (uint64_t)specialized Sequence.reduce<A>(_:_:)(0, (_QWORD *(*)(_QWORD **__return_ptr, _QWORD **, uint64_t *))_sSl7SwiftUIAA21NavigationColumnStateV7ElementRtzSi5IndexRtzrlE18collapsedItemCount6within09splitViewE0Siqd___AA0c5SplitmE0VSgtSkRd__AcDRtd__SiAFRtd__lFS2i_SitXEfU_SayACG_APTG5TA_0, (uint64_t)&v63, 0, v72);
    v44 = v32;
    v28 = v77;
    outlined copy of NavigationSplitViewState?(v70, v44, v33, v34, v35, v36, v37, v42, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    result = (uint64_t *)outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    if (v43 <= 1)
      return result;
    goto LABEL_10;
  }
  result = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v85);
  v9 = result[21];
  if (v9 < 0)
    return result;
  v10 = result;
  v77 = v1;
  v11 = result[14];
  v12 = result[15];
  v14 = result[16];
  v13 = result[17];
  v15 = result[19];
  v71 = result[18];
  v72 = v13;
  v16 = result[20];
  v17 = result[22];
  v18 = (_QWORD *)result[23];
  v73 = *(uint64_t **)(*(_QWORD *)v9 + 88);
  outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  outlined retain of NavigationColumnState(v10);
  v64 = v17;
  v65 = v18;
  v69 = v12;
  v70 = v11;
  v19 = v11;
  v67 = v15;
  v68 = v14;
  v20 = v14;
  v21 = v71;
  v22 = v72;
  v66 = v16;
  outlined copy of NavigationColumnState.ColumnContent(v19, v12, v20, v72, v71, v15, v16, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRetain();
  v24 = ((uint64_t (*)(uint64_t))v73)(v23);
  result = (uint64_t *)swift_release();
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
    goto LABEL_26;
  }
  v27 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64 = v17;
  v65 = v18;
  outlined consume of NavigationColumnState.ColumnContent(v70, v69, v68, v22, v21, v67, v66, v9);
  outlined release of NavigationColumnState(v10);
  result = (uint64_t *)outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  if (__OFADD__(v26, v27))
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v28 = v77;
  if (v26 + v27 <= 1)
    return result;
LABEL_10:
  if ((v75 & 1) == 0)
  {
    v45 = *(_QWORD *)(v28 + 528);
    LOBYTE(v81[0]) = 1;
    if (v45)
    {
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
    }
    v81[0] = *(_OWORD *)(v28 + 536);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<Task<(), Error>?>, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Error>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
    v46 = *(_QWORD *)&v78[0];
    if (*(_QWORD *)&v78[0])
    {
      v47 = type metadata accessor for Error();
      MEMORY[0x18D75D204](v46, MEMORY[0x1E0DEE9C0] + 8, v47, MEMORY[0x1E0DEDB38]);
      swift_release();
    }
    v48 = type metadata accessor for TaskPriority();
    v49 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v74, 1, 1, v48);
    outlined init with copy of StackItemsView(v28, (uint64_t)v81);
    type metadata accessor for MainActor();
    v50 = static MainActor.shared.getter();
    v51 = swift_allocObject();
    v52 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v51 + 16) = v50;
    *(_QWORD *)(v51 + 24) = v52;
    outlined init with take of StackItemsView((uint64_t)v81, v51 + 32);
    v53 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v49, (uint64_t)&async function pointer to partial apply for closure #1 in StackItemsView.navigateBack(isAnimated:), v51);
    v54 = *(_QWORD *)(v28 + 544);
    *(_QWORD *)&v81[0] = v53;
    if (v54)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  outlined init with copy of NavigationAuthority(v28 + 400, (uint64_t)v80);
  memcpy(v81, v76, 0x188uLL);
  v55 = NavigationState.StackContent.topKey.getter();
  v57 = v56;
  v59 = v58;
  static Transaction.current.getter();
  static Transaction.current.getter();
  v60 = Transaction.disablesAnimations.getter();
  swift_release();
  if ((v60 & 1) != 0)
    v61 = 1;
  else
    v61 = Transaction.disablesAnimations.getter();
  static Transaction.current.getter();
  v62 = Transaction.animation.getter();
  swift_release();
  if (!v62)
    v62 = Transaction.animation.getter();
  swift_release();
  *(_OWORD *)((char *)v81 + 8) = 0u;
  *(_QWORD *)&v81[0] = 1;
  *((_QWORD *)&v81[3] + 1) = 0;
  *(_OWORD *)((char *)&v81[2] + 8) = 0u;
  *(_OWORD *)((char *)&v81[1] + 8) = 0u;
  LOBYTE(v81[4]) = 9;
  *((_QWORD *)&v81[4] + 1) = v55;
  *(_QWORD *)&v81[5] = v57;
  *((_QWORD *)&v81[5] + 1) = v59;
  memset(&v81[6], 0, 24);
  BYTE8(v81[7]) = v61 & 1;
  *(_QWORD *)&v81[8] = v62;
  v78[6] = 0u;
  v78[7] = v81[7];
  v79 = v62;
  v78[2] = v81[2];
  v78[3] = 0uLL;
  v78[4] = v81[4];
  v78[5] = v81[5];
  v78[0] = v81[0];
  v78[1] = v81[1];
  NavigationAuthority.enqueueRequest(_:)(v78);
  outlined release of NavigationRequest((uint64_t)v81);
  return (uint64_t *)outlined destroy of NavigationAuthority((uint64_t)v80);
}

uint64_t closure #3 in StackItemsView.body.getter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  char v8;

  v4 = *a2;
  specialized AccessibilityCoreNotification.post()(0, 0);
  v5 = *(_QWORD *)(a3 + 456);
  v6 = *(_BYTE *)(a3 + 464);
  outlined copy of Environment<Bool>.Content(v5, v6);
  specialized Environment.wrappedValue.getter(v5, v6, &v8);
  result = outlined consume of Environment<Bool>.Content(v5, v6);
  if (v8 == 1)
    return StackItemsView.updateClientSettings(allStackItems:)(v4);
  return result;
}

uint64_t StackItemsView.updateClientSettings(allStackItems:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  char v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  _QWORD v22[4];
  _QWORD aBlock[7];
  char *v24;

  v2 = v1;
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  v24 = (char *)MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    type metadata accessor for PropertyListEncoder();
    do
    {
      swift_allocObject();
      PropertyListEncoder.init()();
      lazy protocol witness table accessor for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle();
      v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      v7 = v6;
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v9 = *((_QWORD *)v3 + 2);
      v8 = *((_QWORD *)v3 + 3);
      if (v9 >= v8 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v9 + 1;
      v10 = &v3[16 * v9];
      *((_QWORD *)v10 + 4) = v5;
      *((_QWORD *)v10 + 5) = v7;
      v24 = v3;
      --v4;
    }
    while (v4);
  }
  v11 = *(void **)(v2 + 472);
  v12 = *(_BYTE *)(v2 + 480);
  outlined copy of Environment<UISceneSession?>.Content(v11, v12);
  v13 = specialized Environment.wrappedValue.getter(v11, v12);
  outlined consume of Environment<UISceneSession?>.Content(v11, v12);
  if (!v13)
    return swift_bridgeObjectRelease();
  v14 = objc_msgSend(v13, sel_scene);

  if (!v14)
    return swift_bridgeObjectRelease();
  v15 = objc_msgSend(v14, sel__FBSScene);

  if (!v15)
    return swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v16, v17);
  v22[2] = &v24;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for closure #1 in StackItemsView.updateClientSettings(allStackItems:);
  *(_QWORD *)(v18 + 24) = v22;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = closure #1 in FBSScene.updateClarityUIClientSettings(_:)partial apply;
  *(_QWORD *)(v19 + 24) = v18;
  aBlock[4] = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  aBlock[3] = &block_descriptor_73_0;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_updateClientSettingsWithBlock_, v20);
  _Block_release(v20);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();

  swift_release();
  result = swift_release();
  if ((v20 & 1) == 0)
    return swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t *closure #4 in StackItemsView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  int v4;
  _BYTE v6[40];
  __int128 v7;
  __int128 v8;

  v0 = Notification.userInfo.getter();
  if (!v0)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_10:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    goto LABEL_11;
  }
  v1 = v0;
  *(_QWORD *)&v7 = 0x646574616D696E61;
  *((_QWORD *)&v7 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v1 + 16) && (v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v3 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v6);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_10;
  if (!swift_dynamicCast())
  {
LABEL_11:
    v4 = 1;
    return StackItemsView.navigateBack(isAnimated:)(v4);
  }
  v4 = v6[0];
  return StackItemsView.navigateBack(isAnimated:)(v4);
}

uint64_t closure #1 in StackItemsView.navigateBack(isAnimated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[2] = a4;
  v4[3] = type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  v5 = (_QWORD *)swift_task_alloc();
  v4[5] = v5;
  *v5 = v4;
  v5[1] = closure #1 in StackItemsView.navigateBack(isAnimated:);
  return static Task<>.sleep(nanoseconds:)();
}

uint64_t closure #1 in StackItemsView.navigateBack(isAnimated:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = *(_QWORD *)(v1 + 528);
  *(_BYTE *)(v0 + 56) = 0;
  if (v2)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultimodalNavigationStack()
{
  type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE52E8]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t static NavigationTitleActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  unint64_t v31;
  uint64_t result;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v48;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  _BYTE v55[12];
  _BYTE v56[32];
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v33 = *a1;
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 80);
  v61 = v4;
  v44 = v7;
  v45 = v5;
  v62 = v5;
  v63 = v6;
  *(_QWORD *)&v64 = __PAIR64__(v8, v7);
  v42 = v9;
  v43 = v8;
  *((_QWORD *)&v64 + 1) = __PAIR64__(v10, v9);
  v40 = v13;
  v41 = v10;
  v65 = v11;
  v66 = v12;
  *(_QWORD *)&v67 = __PAIR64__(v14, v13);
  v38 = v15;
  v39 = v14;
  *((_QWORD *)&v67 + 1) = __PAIR64__(v16, v15);
  v36 = v18;
  v37 = v16;
  v68 = __PAIR64__(v17, v18);
  v34 = v19;
  v35 = v17;
  v69 = v19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v53 = v4;
  v54 = v62;
  *(_QWORD *)&v55[4] = v6;
  *(_OWORD *)v56 = v64;
  *(_QWORD *)&v56[16] = v11;
  *(_QWORD *)&v56[24] = v12;
  v57 = v67;
  v58 = v68;
  LODWORD(v59) = v69;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(&v50, v20, &v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21 = v50;
  v53 = v50;
  v48 = v51;
  v54 = v51;
  *(_DWORD *)v55 = v52;
  v46 = v52;
  v22 = _ViewOutputs.subscript.getter();
  if ((v22 & 0x100000000) == 0)
  {
    v23 = v22;
    LODWORD(v53) = v33;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationTitleActionModifier>, (uint64_t)&unk_1E1AFA230, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v24 = _GraphValue.value.getter();
    v25 = v6;
    v26 = v21;
    v27 = v24;
    v53 = v4;
    v54 = v45;
    *(_QWORD *)&v55[4] = v25;
    *(_DWORD *)v56 = v44;
    *(_DWORD *)&v56[4] = v43;
    *(_DWORD *)&v56[8] = v42;
    *(_DWORD *)&v56[12] = v41;
    *(_QWORD *)&v56[16] = v11;
    *(_QWORD *)&v56[24] = v12;
    *(_QWORD *)&v57 = __PAIR64__(v39, v40);
    *((_QWORD *)&v57 + 1) = __PAIR64__(v37, v38);
    v58 = __PAIR64__(v35, v36);
    LODWORD(v59) = v34;
    v28 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    v29 = v54;
    v30 = v55[0];
    v31 = v53;
    v53 = __PAIR64__(v23, v27);
    v21 = v26;
    v54 = v28;
    *(_QWORD *)v55 = v31;
    *(_DWORD *)&v55[8] = v29;
    v56[0] = v30;
    memset(&v56[4], 0, 28);
    v57 = 2uLL;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type NavigationTitleBinder and conformance NavigationTitleBinder();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v48;
  *(_DWORD *)(a4 + 12) = v46;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationTitleActionModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t NavigationTitleBinder.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t Value;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, char, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57[5];
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _BYTE v77[64];
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  char v83;

  v1 = v0;
  v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v2;
    *(_QWORD *)(v0 + 16) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 24) = 0;
    outlined consume of NavigationTitleStorage??(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = 2;
    *(_QWORD *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = 0;
    *(_QWORD *)(v0 + 64) = 0;
    *(_BYTE *)(v0 + 88) = 0;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  v5 = v4;
  result = outlined init with take of Image.Resolved?(Value, (uint64_t)v77, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  if ((v5 & 1) != 0)
  {
    v54 = *(_QWORD *)(Value + 8);
    v55 = *(_QWORD *)Value;
    v52 = *(_QWORD *)(Value + 24);
    v53 = *(_QWORD *)(Value + 16);
    v50 = *(_QWORD *)(Value + 40);
    v51 = *(_QWORD *)(Value + 32);
    v7 = *(_QWORD *)(Value + 48);
    v56 = *(_BYTE *)(Value + 56);
    v9 = *(_QWORD *)(v1 + 32);
    v8 = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 48);
    v10 = *(_QWORD *)(v1 + 56);
    v12 = *(_QWORD *)(v1 + 64);
    v13 = *(_QWORD *)(v1 + 80);
    v14 = *(_BYTE *)(v1 + 88);
    v48 = v9;
    v49 = v7;
    v46 = v11;
    v47 = v8;
    v44 = v12;
    v45 = v10;
    if ((unint64_t)(v10 - 1) >= 2)
    {
      v15 = *(_QWORD *)(v1 + 72);
      outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
    }
    else
    {
      v9 = 0;
      v8 = 0;
      v11 = 0;
      v12 = 0;
      v15 = 0;
      v13 = 0;
      v14 = 0;
      v10 = 1;
    }
    outlined init with take of Image.Resolved?((uint64_t)v77, (uint64_t)v78, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
    v16 = v79;
    if (v79 == 1)
    {
      if (v10 == 1)
      {
        v17 = outlined copy of NavigationTitleStorage?;
        return outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v17);
      }
      v24 = 0;
      v23 = 0;
      v22 = 0;
      v21 = 0;
      v20 = 0;
      v18 = 0;
      v19 = 0;
    }
    else
    {
      v19 = v78[0];
      v18 = v78[1];
      v20 = v78[2];
      v21 = v80;
      v22 = v81;
      v23 = v82;
      v24 = v83;
      if (v10 == 1)
        goto LABEL_15;
    }
    v61 = v9;
    v62 = v8;
    v63 = v11;
    v64 = v10;
    v65 = v12;
    v66 = v15;
    v67 = v13;
    v68 = v14;
    if (v79 != 1)
    {
      v57[0] = v19;
      v57[1] = v18;
      v57[2] = v20;
      v57[3] = v79;
      v57[4] = v21;
      v58 = v22;
      v59 = v23;
      v60 = v24;
      outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
      outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
      outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
      outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
      v33 = specialized static EquatableNavigationTitle.== infix(_:_:)(&v61, v57);
      v26 = v65;
      outlined consume of Text?(v61, v62, v63, v64);
      outlined consume of Transaction?(v26);
      swift_release();
      v35 = v9;
      v37 = v8;
      v27 = v9;
      v39 = v11;
      v41 = v12;
      v25 = v10;
      outlined consume of NavigationTitleStorage?(v27, v8, v11, v10, v12);
      if ((v33 & 1) != 0)
      {
LABEL_19:
        outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationTitleStorage?);
        outlined consume of NavigationTitleStorage?(v35, v37, v39, v25, v41);
        v17 = outlined consume of NavigationTitleStorage?;
        return outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v17);
      }
LABEL_17:
      outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
      outlined consume of NavigationTitleStorage??(v48, v47, v46, v45, v44);
      *(_QWORD *)(v1 + 32) = v55;
      *(_QWORD *)(v1 + 40) = v54;
      *(_QWORD *)(v1 + 48) = v53;
      *(_QWORD *)(v1 + 56) = v52;
      *(_QWORD *)(v1 + 64) = v51;
      *(_QWORD *)(v1 + 72) = v50;
      *(_QWORD *)(v1 + 80) = v49;
      *(_BYTE *)(v1 + 88) = v56;
      if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
      {
        AGGraphClearUpdate();
        v28 = (uint64_t *)AGGraphGetValue();
        v30 = *v28;
        v29 = v28[1];
        swift_retain();
        AGGraphSetUpdate();
        v31 = swift_allocObject();
        *(_QWORD *)(v31 + 16) = v30;
        *(_QWORD *)(v31 + 24) = v29;
        outlined init with take of Image.Resolved?((uint64_t)v77, v31 + 32, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
        outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
        swift_retain();
        static Update.enqueueAction(_:)();
        outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationTitleStorage?);
        outlined consume of NavigationTitleStorage?(v35, v37, v39, v25, v41);
        outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationTitleStorage?);
        swift_release();
        return swift_release();
      }
      goto LABEL_19;
    }
    v43 = v24;
    v40 = v22;
    v42 = v23;
    v36 = v20;
    v38 = v21;
    v32 = v19;
    v34 = v18;
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    outlined copy of NavigationTitleStorage?(v9, v8, v11, v10, v12);
    outlined consume of Text?(v9, v8, v11, v10);
    outlined consume of Transaction?(v12);
    swift_release();
    v19 = v32;
    v18 = v34;
    v20 = v36;
    v21 = v38;
    v22 = v40;
    v23 = v42;
    v24 = v43;
LABEL_15:
    v35 = v9;
    v37 = v8;
    v61 = v9;
    v62 = v8;
    v39 = v11;
    v41 = v12;
    v63 = v11;
    v64 = v10;
    v25 = v10;
    v65 = v12;
    v66 = v15;
    v67 = v13;
    v68 = v14;
    v69 = v19;
    v70 = v18;
    v71 = v20;
    v72 = v16;
    v73 = v21;
    v74 = v22;
    v75 = v23;
    v76 = v24;
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    outlined release of (EquatableNavigationTitle?, EquatableNavigationTitle?)(&v61);
    goto LABEL_17;
  }
  return result;
}

uint64_t implicit closure #1 in NavigationTitleBinder.updateValue()()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x8000000187BDC840;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0xD000000000000012;
  v1._object = (void *)0x8000000187BEE020;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance NavigationTitleBinder()
{
  lazy protocol witness table accessor for type NavigationTitleBinder and conformance NavigationTitleBinder();
  return static AsyncAttribute.flags.getter();
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalNavigationTitleHorizontalPaddingKey(_QWORD *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v2 = result;
  if ((result[1] & 1) != 0)
  {
    result = a2(&v5);
    v3 = v5;
    v4 = v6;
  }
  else
  {
    v4 = 0;
    v3 = *result;
  }
  *v2 = v3;
  *((_BYTE *)v2 + 8) = v4;
  return result;
}

uint64_t specialized FloatingPoint.isAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  double v5;
  double v6;

  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0 || (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
    return specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)();
  v5 = fabs(a3);
  v6 = fabs(a1);
  if (v5 <= v6)
    v5 = v6;
  if (v5 <= 2.22507386e-308)
    v5 = 2.22507386e-308;
  return vabdd_f64(a3, a1) < v5 * a2;
}

uint64_t specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  double v14;
  double v15;

  while (1)
  {
    v5 = a3;
    v6 = *(_QWORD *)&a3;
    v7 = *(_QWORD *)&a3 & 0x7FF0000000000000;
    v8 = *(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000 && v8 != 0)
      return 0;
    a3 = a1;
    v10 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v11 = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && v10 == 2047)
      return 0;
    a1 = v5;
    if (!v8)
    {
      a1 = v5;
      if (v7 == 0x7FF0000000000000)
        break;
    }
  }
  if (!v11 && v10 == 2047)
    return v5 == a3;
  v13 = Double.exponent.getter();
  v14 = specialized Double.init(sign:exponent:significand:)(v6 < 0, v13, 1.0);
  v15 = a3 * 0.5;
  if (!(v10 | v11))
    v15 = a3;
  if (v10 == 2047)
    v15 = a3;
  return specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v15, a2, v14);
}

uint64_t specialized static EquatableNavigationTitle.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v20 = a2[4];
  EnvironmentValues.init()();
  if (v5)
  {
    v18 = v7;
    outlined copy of Text?(v3, v2, v4, v5);
    outlined copy of Transaction?(v6);
    swift_retain();
    v19 = Text.resolveString(in:with:idiom:)();
    v12 = v11;
    outlined consume of Text?(v3, v2, v4, v5);
    outlined consume of Transaction?(v6);
    swift_release();
    if (!v10)
    {
      if (v12)
        goto LABEL_14;
      v13 = 0;
LABEL_12:
      swift_release();
      swift_release();
      if (!v13)
      {
        v16 = 1;
        return v16 & 1;
      }
LABEL_15:
      swift_bridgeObjectRelease();
      v16 = 0;
      return v16 & 1;
    }
    v5 = v12;
    v7 = v18;
  }
  else
  {
    v19 = 0;
    v13 = 0;
    if (!v10)
      goto LABEL_12;
  }
  outlined copy of Text?(v7, v8, v9, v10);
  outlined copy of Transaction?(v20);
  swift_retain();
  v14 = Text.resolveString(in:with:idiom:)();
  v13 = v15;
  outlined consume of Text?(v7, v8, v9, v10);
  outlined consume of Transaction?(v20);
  swift_release();
  if (!v5)
    goto LABEL_12;
  if (!v13)
  {
LABEL_14:
    swift_release();
    swift_release();
    goto LABEL_15;
  }
  if (v19 == v14 && v5 == v13)
    v16 = 1;
  else
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v16 & 1;
}

void specialized MultimodalNavigationStackViewHost.makeUIViewController(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UISecureHostingController(0, v3, *(_QWORD *)(v6 + 24), v7);
  (*(void (**)(void))(v2 + 32))();
  specialized _UISecureHostingController.__allocating_init(rootView:)((uint64_t)v5, v8, v9, v10);
}

id sub_187A4BE34(void *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  void *v8;
  id v9;
  void *v10;
  __int128 v11;
  id v12;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  result = objc_msgSend(a1, sel_view);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    objc_msgSend(v8, sel_setBackgroundColor_, v9);

    v10 = (void *)specialized UIHostingController.host.getter();
    v11 = v1[1];
    *(_OWORD *)(v5 - 96) = *v1;
    *(_OWORD *)(v5 - 80) = v11;
    *(_BYTE *)(v5 - 64) = 0;
    v12 = v10;
    _UIHostingView.explicitSafeAreaInsets.setter(v5 - 96);

    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized MultimodalNavigationStackViewHost.updateUIViewController(_:context:)(uint64_t a1, uint64_t a2)
{
  void (**v2)(void);
  void (**v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  __int128 v9;
  id v10;
  _OWORD v12[2];
  char v13;

  v3 = v2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)specialized UIHostingController.host.getter();
  v9 = *((_OWORD *)v2 + 1);
  v12[0] = *(_OWORD *)v2;
  v12[1] = v9;
  v13 = 0;
  v10 = v8;
  _UIHostingView.explicitSafeAreaInsets.setter((uint64_t)v12);

  v3[4]();
  specialized UIHostingController.rootView.setter((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleBottomPaddingKey()
{
  return &type metadata for MultimodalNavigationTitleBottomPaddingKey;
}

uint64_t destroy for MultimodalNavigationStack(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  return swift_release();
}

uint64_t initializeWithCopy for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = v5;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(_BYTE *)(a2 + 120);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 112) = v9;
  *(_BYTE *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_BYTE *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v7, v8);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 120) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  LOBYTE(v11) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = v11;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  char v9;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v7 = *(_BYTE *)(a2 + 120);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MultimodalNavigationStack()
{
  return &type metadata for MultimodalNavigationStack;
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleHorizontalPaddingKey()
{
  return &type metadata for MultimodalNavigationTitleHorizontalPaddingKey;
}

uint64_t associated type witness table accessor for View.Body : View in MultimodalNavigationStack()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MultimodalNavigationStack(a2, a1);
  return a2;
}

uint64_t outlined destroy of MultimodalNavigationStack(uint64_t a1)
{
  destroy for MultimodalNavigationStack(a1);
  return a1;
}

uint64_t sub_187A4C3FC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144));
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of MultimodalNavigationStack(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v4;
  v7 = *(__int128 *)((char *)a1 + 56);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a1 + 9);
  *(_OWORD *)(a2 + 56) = v7;
  swift_weakTakeInit();
  *(_OWORD *)(a2 + 88) = *(__int128 *)((char *)a1 + 88);
  *(_QWORD *)(a2 + 104) = *((_QWORD *)a1 + 13);
  v8 = *((_QWORD *)a1 + 14);
  *(_BYTE *)(a2 + 120) = *((_BYTE *)a1 + 120);
  *(_QWORD *)(a2 + 112) = v8;
  v9 = a1[8];
  v10 = a1[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a1 + 20);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 144) = v10;
  return a2;
}

uint64_t *partial apply for closure #1 in MultimodalNavigationStack.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in MultimodalNavigationStack.body.getter(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_187A4C500()
{
  return swift_deallocObject();
}

uint64_t sub_187A4C510@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityPrefersCrossFadeTransitions.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A4C54C()
{
  return EnvironmentValues.accessibilityPrefersCrossFadeTransitions.setter();
}

void type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _AnimationModifier<[StackItem]>(255, a4, a5);
    v8 = type metadata accessor for ModifiedContent();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>)
  {
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>, &lazy cache variable for type metadata for _AnimationModifier<[StackItem]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>);
  }
}

void type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for ZStack<ForEach<[StackItem], Int, AnyView>>, (uint64_t (*)(uint64_t))type metadata accessor for ForEach<[StackItem], Int, AnyView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74C8]);
}

void type metadata accessor for ForEach<[StackItem], Int, AnyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<[StackItem], Int, AnyView>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [StackItem] and conformance [A]();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<[StackItem], Int, AnyView>);
  }
}

unint64_t lazy protocol witness table accessor for type [StackItem] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [StackItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [StackItem] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StackItem] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<[StackItem], Int, AnyView>();
    v2 = MEMORY[0x1E0CE7508];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [StackItem] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type [StackItem] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [StackItem] and conformance <A> [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type StackItem and conformance StackItem();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF30], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StackItem] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StackItem and conformance StackItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackItem and conformance StackItem;
  if (!lazy protocol witness table cache variable for type StackItem and conformance StackItem)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackItem, &type metadata for StackItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItem and conformance StackItem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackItem and conformance StackItem;
  if (!lazy protocol witness table cache variable for type StackItem and conformance StackItem)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackItem, &type metadata for StackItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItem and conformance StackItem);
  }
  return result;
}

void type metadata accessor for _AnimationModifier<[StackItem]>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type [StackItem] and conformance <A> [A]();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t, uint64_t, unint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE52E8];
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE52E8]);
    v3 = v2;
    v4[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>();
    v4[1] = lazy protocol witness table accessor for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>(&lazy protocol witness table cache variable for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, v1, MEMORY[0x1E0CE5300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t, uint64_t, unint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE45D0];
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>, &lazy cache variable for type metadata for _AnimationModifier<[StackItem]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE45D0]);
    v3 = v2;
    v4[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<ForEach<[StackItem], Int, AnyView>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>, MEMORY[0x1E0CE74D8]);
    v4[1] = lazy protocol witness table accessor for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>(&lazy protocol witness table cache variable for type _AnimationModifier<[StackItem]> and conformance _AnimationModifier<A>, &lazy cache variable for type metadata for _AnimationModifier<[StackItem]>, v1, MEMORY[0x1E0CE45E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnimationModifier<[StackItem]>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *assignWithCopy for StackItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for StackItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for StackItem()
{
  return &type metadata for StackItem;
}

uint64_t destroy for StackItemModifier(uint64_t a1)
{
  uint64_t v2;

  swift_release();
  swift_release();
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (v2 == 1)
      goto LABEL_7;
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 96) != 1)
    swift_release();
  swift_release();
LABEL_7:
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(a1 + 224), *(_BYTE *)(a1 + 232));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 240), *(_BYTE *)(a1 + 248));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 256), *(_BYTE *)(a1 + 264));
  return swift_release();
}

uint64_t initializeWithCopy for StackItemModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  v5 = (_OWORD *)(a1 + 64);
  v6 = (_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_retain();
  if (v7)
  {
    if (v7 == 1)
    {
      v8 = v6[1];
      *v5 = *v6;
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 96) = v6[2];
      *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)v6 + 41);
      goto LABEL_9;
    }
    v10 = *(_QWORD *)(a2 + 64);
    v11 = *(_QWORD *)(a2 + 72);
    v12 = *(_BYTE *)(a2 + 80);
    outlined copy of Text.Storage(v10, v11, v12);
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v11;
    *(_BYTE *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = v6[1];
    *v5 = *v6;
    *(_OWORD *)(a1 + 80) = v9;
  }
  v13 = *(_QWORD *)(a2 + 96);
  if (v13 != 1)
    v13 = swift_retain();
  *(_QWORD *)(a1 + 96) = v13;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_retain();
LABEL_9:
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v14;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v15;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v16 = *(void **)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v17 = *(_BYTE *)(a2 + 232);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v16, v17);
  *(_QWORD *)(a1 + 224) = v16;
  *(_BYTE *)(a1 + 232) = v17;
  v18 = *(_QWORD *)(a2 + 240);
  v19 = *(_BYTE *)(a2 + 248);
  outlined copy of Environment<Bool>.Content(v18, v19);
  *(_QWORD *)(a1 + 240) = v18;
  *(_BYTE *)(a1 + 248) = v19;
  v20 = *(_QWORD *)(a2 + 256);
  v21 = *(_BYTE *)(a2 + 264);
  outlined copy of Environment<Bool>.Content(v20, v21);
  *(_QWORD *)(a1 + 256) = v20;
  *(_BYTE *)(a1 + 264) = v21;
  v22 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v22;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StackItemModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = (__int128 *)(a1 + 64);
  v7 = (__int128 *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a2 + 88);
  if (v8 != 1)
  {
    if (v9 == 1)
    {
      outlined destroy of EquatableNavigationTitle(a1 + 64);
      v14 = *(_OWORD *)(a2 + 80);
      v13 = *(_OWORD *)(a2 + 96);
      v15 = *v7;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 96) = v13;
      *v6 = v15;
      goto LABEL_28;
    }
    if (v8)
    {
      if (v9)
      {
        v16 = *(_QWORD *)(a2 + 64);
        v17 = *(_QWORD *)(a2 + 72);
        v18 = *(_BYTE *)(a2 + 80);
        outlined copy of Text.Storage(v16, v17, v18);
        v19 = *(_QWORD *)(a1 + 64);
        v20 = *(_QWORD *)(a1 + 72);
        v21 = *(_BYTE *)(a1 + 80);
        *(_QWORD *)(a1 + 64) = v16;
        *(_QWORD *)(a1 + 72) = v17;
        *(_BYTE *)(a1 + 80) = v18;
        outlined consume of Text.Storage(v19, v20, v21);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 64);
        v30 = *(_OWORD *)(a2 + 80);
        *v6 = *v7;
        *(_OWORD *)(a1 + 80) = v30;
      }
    }
    else if (v9)
    {
      v27 = *(_QWORD *)(a2 + 64);
      v28 = *(_QWORD *)(a2 + 72);
      v29 = *(_BYTE *)(a2 + 80);
      outlined copy of Text.Storage(v27, v28, v29);
      *(_QWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 72) = v28;
      *(_BYTE *)(a1 + 80) = v29;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 80);
      *v6 = *v7;
      *(_OWORD *)(a1 + 80) = v31;
    }
    v32 = (uint64_t *)(a1 + 96);
    v33 = *(_QWORD *)(a2 + 96);
    if (*(_QWORD *)(a1 + 96) == 1)
    {
      if (v33 != 1)
      {
        *v32 = v33;
        swift_retain();
        goto LABEL_27;
      }
      v34 = 1;
    }
    else
    {
      if (v33 != 1)
      {
        *v32 = v33;
        swift_retain();
        swift_release();
        goto LABEL_27;
      }
      outlined destroy of Transaction(a1 + 96);
      v34 = *(_QWORD *)(a2 + 96);
    }
    *v32 = v34;
LABEL_27:
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    goto LABEL_28;
  }
  if (v9)
  {
    if (v9 == 1)
    {
      v10 = *v7;
      v11 = *(_OWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v12;
      *v6 = v10;
      goto LABEL_28;
    }
    v23 = *(_QWORD *)(a2 + 64);
    v24 = *(_QWORD *)(a2 + 72);
    v25 = *(_BYTE *)(a2 + 80);
    outlined copy of Text.Storage(v23, v24, v25);
    *(_QWORD *)(a1 + 64) = v23;
    *(_QWORD *)(a1 + 72) = v24;
    *(_BYTE *)(a1 + 80) = v25;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 80);
    *v6 = *v7;
    *(_OWORD *)(a1 + 80) = v22;
  }
  v26 = *(_QWORD *)(a2 + 96);
  if (v26 != 1)
    v26 = swift_retain();
  *(_QWORD *)(a1 + 96) = v26;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_retain();
LABEL_28:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  v35 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v35;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_release();
  v36 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v36;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_retain();
  swift_release();
  v37 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v37;
  LOBYTE(v37) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = v37;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_retain();
  swift_release();
  v38 = *(void **)(a2 + 224);
  v39 = *(_BYTE *)(a2 + 232);
  outlined copy of Environment<UISceneSession?>.Content(v38, v39);
  v40 = *(void **)(a1 + 224);
  v41 = *(_BYTE *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v38;
  *(_BYTE *)(a1 + 232) = v39;
  outlined consume of Environment<UISceneSession?>.Content(v40, v41);
  v42 = *(_QWORD *)(a2 + 240);
  v43 = *(_BYTE *)(a2 + 248);
  outlined copy of Environment<Bool>.Content(v42, v43);
  v44 = *(_QWORD *)(a1 + 240);
  v45 = *(_BYTE *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v42;
  *(_BYTE *)(a1 + 248) = v43;
  outlined consume of Environment<Bool>.Content(v44, v45);
  v46 = *(_QWORD *)(a2 + 256);
  v47 = *(_BYTE *)(a2 + 264);
  outlined copy of Environment<Bool>.Content(v46, v47);
  v48 = *(_QWORD *)(a1 + 256);
  v49 = *(_BYTE *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v46;
  *(_BYTE *)(a1 + 264) = v47;
  outlined consume of Environment<Bool>.Content(v48, v49);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of EquatableNavigationTitle(uint64_t a1)
{
  destroy for NavigationTitleStorage(a1);
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for StackItemModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = (_OWORD *)(a1 + 64);
  v5 = (_OWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 88);
  if (v6 == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 88);
  if (v7 != 1)
  {
    if (v6)
    {
      if (v7)
      {
        v9 = *(_BYTE *)(a2 + 80);
        v10 = *(_QWORD *)(a1 + 64);
        v11 = *(_QWORD *)(a1 + 72);
        v12 = *(_BYTE *)(a1 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_BYTE *)(a1 + 80) = v9;
        outlined consume of Text.Storage(v10, v11, v12);
        *(_QWORD *)(a1 + 88) = v7;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1 + 64);
    }
    v13 = *(_OWORD *)(a2 + 80);
    *v4 = *v5;
    *(_OWORD *)(a1 + 80) = v13;
LABEL_10:
    v14 = (uint64_t *)(a1 + 96);
    v15 = *(_QWORD *)(a2 + 96);
    if (*(_QWORD *)(a1 + 96) != 1)
    {
      if (v15 != 1)
      {
        *v14 = v15;
        swift_release();
        goto LABEL_15;
      }
      outlined destroy of Transaction(a1 + 96);
      v15 = 1;
    }
    *v14 = v15;
LABEL_15:
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_release();
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    goto LABEL_16;
  }
  outlined destroy of EquatableNavigationTitle(a1 + 64);
LABEL_4:
  v8 = *(_OWORD *)(a2 + 80);
  *v4 = *v5;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
LABEL_16:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_release();
  v16 = *(_BYTE *)(a2 + 232);
  v17 = *(void **)(a1 + 224);
  v18 = *(_BYTE *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = v16;
  outlined consume of Environment<UISceneSession?>.Content(v17, v18);
  v19 = *(_BYTE *)(a2 + 248);
  v20 = *(_QWORD *)(a1 + 240);
  v21 = *(_BYTE *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = *(_BYTE *)(a2 + 264);
  v23 = *(_QWORD *)(a1 + 256);
  v24 = *(_BYTE *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StackItemModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackItemModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StackItemModifier()
{
  return &type metadata for StackItemModifier;
}

void *type metadata accessor for EquatableNavigationTitle()
{
  return &unk_1E1AE4E08;
}

ValueMetadata *type metadata accessor for RootItemModifier()
{
  return &type metadata for RootItemModifier;
}

uint64_t destroy for StackItemsView(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 8);
  a1 += 8;
  v7 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(v2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 304));
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 448), *(_BYTE *)(a1 + 456));
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(a1 + 464), *(_BYTE *)(a1 + 472));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for StackItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v26 = a2 + 464;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = v4;
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 56);
  v58 = *(_QWORD *)(a2 + 80);
  v59 = *(_QWORD *)(a2 + 72);
  v56 = *(_QWORD *)(a2 + 96);
  v57 = *(_QWORD *)(a2 + 88);
  v54 = *(_QWORD *)(a2 + 112);
  v55 = *(_QWORD *)(a2 + 104);
  v52 = *(_QWORD *)(a2 + 128);
  v53 = *(_QWORD *)(a2 + 120);
  v50 = *(_QWORD *)(a2 + 144);
  v51 = *(_QWORD *)(a2 + 136);
  v48 = *(_QWORD *)(a2 + 160);
  v49 = *(_QWORD *)(a2 + 152);
  v46 = *(_QWORD *)(a2 + 176);
  v47 = *(_QWORD *)(a2 + 168);
  v44 = *(_QWORD *)(a2 + 192);
  v45 = *(_QWORD *)(a2 + 184);
  v42 = *(_QWORD *)(a2 + 208);
  v43 = *(_QWORD *)(a2 + 200);
  v40 = *(_QWORD *)(a2 + 224);
  v41 = *(_QWORD *)(a2 + 216);
  v39 = *(_QWORD *)(a2 + 232);
  v38 = *(_QWORD *)(a2 + 240);
  v37 = *(_QWORD *)(a2 + 248);
  v36 = *(_QWORD *)(a2 + 256);
  v35 = *(_QWORD *)(a2 + 264);
  v34 = *(_QWORD *)(a2 + 272);
  v32 = *(_QWORD *)(a2 + 288);
  v33 = *(_QWORD *)(a2 + 280);
  v30 = *(_QWORD *)(a2 + 304);
  v31 = *(_QWORD *)(a2 + 296);
  v28 = *(_QWORD *)(a2 + 320);
  v29 = *(_QWORD *)(a2 + 312);
  v27 = *(_QWORD *)(a2 + 328);
  v10 = *(_QWORD *)(a2 + 336);
  v11 = *(_QWORD *)(a2 + 344);
  v12 = *(_QWORD *)(a2 + 352);
  v13 = *(_QWORD *)(a2 + 360);
  v14 = *(_QWORD *)(a2 + 368);
  v15 = *(_QWORD *)(a2 + 376);
  v24 = *(_QWORD *)(a2 + 384);
  v25 = *(_QWORD *)(a2 + 392);
  swift_bridgeObjectRetain();
  outlined copy of NavigationState.Base(v23, v22, v21, v20, v19, v18, v17, v16, v59, v58, v57, v56, v55, v54, v53, v52, v51, v50, v49,
    v48,
    v47,
    v46,
    v45,
    v44,
    v43,
    v42,
    v41,
    v40,
    v39,
    v38,
    v37,
    v36,
    v35,
    v34,
    v33,
    v32,
    v31,
    v30,
    v29);
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v59;
  *(_QWORD *)(a1 + 80) = v58;
  *(_QWORD *)(a1 + 88) = v57;
  *(_QWORD *)(a1 + 96) = v56;
  *(_QWORD *)(a1 + 104) = v55;
  *(_QWORD *)(a1 + 112) = v54;
  *(_QWORD *)(a1 + 120) = v53;
  *(_QWORD *)(a1 + 128) = v52;
  *(_QWORD *)(a1 + 136) = v51;
  *(_QWORD *)(a1 + 144) = v50;
  *(_QWORD *)(a1 + 152) = v49;
  *(_QWORD *)(a1 + 160) = v48;
  *(_QWORD *)(a1 + 168) = v47;
  *(_QWORD *)(a1 + 176) = v46;
  *(_QWORD *)(a1 + 184) = v45;
  *(_QWORD *)(a1 + 192) = v44;
  *(_QWORD *)(a1 + 200) = v43;
  *(_QWORD *)(a1 + 208) = v42;
  *(_QWORD *)(a1 + 216) = v41;
  *(_QWORD *)(a1 + 224) = v40;
  *(_QWORD *)(a1 + 232) = v39;
  *(_QWORD *)(a1 + 240) = v38;
  *(_QWORD *)(a1 + 248) = v37;
  *(_QWORD *)(a1 + 256) = v36;
  *(_QWORD *)(a1 + 264) = v35;
  *(_QWORD *)(a1 + 272) = v34;
  *(_QWORD *)(a1 + 280) = v33;
  *(_QWORD *)(a1 + 288) = v32;
  *(_QWORD *)(a1 + 296) = v31;
  *(_QWORD *)(a1 + 304) = v30;
  *(_QWORD *)(a1 + 312) = v29;
  *(_QWORD *)(a1 + 320) = v28;
  *(_QWORD *)(a1 + 328) = v27;
  *(_QWORD *)(a1 + 336) = v10;
  *(_QWORD *)(a1 + 344) = v11;
  *(_QWORD *)(a1 + 352) = v12;
  *(_QWORD *)(a1 + 360) = v13;
  *(_QWORD *)(a1 + 368) = v14;
  *(_QWORD *)(a1 + 376) = v15;
  *(_QWORD *)(a1 + 384) = v24;
  *(_QWORD *)(a1 + 392) = v25;
  swift_weakCopyInit();
  v5 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v5;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 433) = *(_OWORD *)(a2 + 433);
  v6 = *(_QWORD *)(a2 + 456);
  v7 = *(_BYTE *)(a2 + 464);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 456) = v6;
  *(_BYTE *)(a1 + 464) = v7;
  v8 = *(void **)(a2 + 472);
  LOBYTE(v6) = *(_BYTE *)(v26 + 16);
  outlined copy of Environment<UISceneSession?>.Content(v8, v6);
  *(_QWORD *)(a1 + 472) = v8;
  *(_BYTE *)(a1 + 480) = v6;
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StackItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  void *v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v65 = (_BYTE *)(a2 + 464);
  v66 = a1 + 464;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v86 = *(_QWORD *)(a2 + 32);
  v87 = *(_QWORD *)(a2 + 24);
  v84 = *(_QWORD *)(a2 + 48);
  v85 = *(_QWORD *)(a2 + 40);
  v83 = *(_QWORD *)(a2 + 56);
  v81 = *(_QWORD *)(a2 + 16);
  v82 = *(_QWORD *)(a2 + 64);
  v79 = *(_QWORD *)(a2 + 80);
  v80 = *(_QWORD *)(a2 + 72);
  v77 = *(_QWORD *)(a2 + 96);
  v78 = *(_QWORD *)(a2 + 88);
  v75 = *(_QWORD *)(a2 + 112);
  v76 = *(_QWORD *)(a2 + 104);
  v73 = *(_QWORD *)(a2 + 128);
  v74 = *(_QWORD *)(a2 + 120);
  v71 = *(_QWORD *)(a2 + 144);
  v72 = *(_QWORD *)(a2 + 136);
  v69 = *(_QWORD *)(a2 + 160);
  v70 = *(_QWORD *)(a2 + 152);
  v67 = *(_QWORD *)(a2 + 176);
  v68 = *(_QWORD *)(a2 + 168);
  v5 = *(_QWORD *)(a2 + 192);
  v4 = *(_QWORD *)(a2 + 200);
  v7 = *(_QWORD *)(a2 + 208);
  v6 = *(_QWORD *)(a2 + 216);
  v9 = *(_QWORD *)(a2 + 224);
  v8 = *(_QWORD *)(a2 + 232);
  v10 = *(_QWORD *)(a2 + 240);
  v54 = *(_QWORD *)(a2 + 248);
  v55 = *(_QWORD *)(a2 + 256);
  v45 = *(_QWORD *)(a2 + 264);
  v46 = *(_QWORD *)(a2 + 280);
  v47 = *(_QWORD *)(a2 + 184);
  v56 = *(_QWORD *)(a2 + 272);
  v57 = *(_QWORD *)(a2 + 288);
  v48 = *(_QWORD *)(a2 + 296);
  v49 = *(_QWORD *)(a2 + 312);
  v58 = *(_QWORD *)(a2 + 304);
  v59 = *(_QWORD *)(a2 + 320);
  v50 = *(_QWORD *)(a2 + 328);
  v51 = *(_QWORD *)(a2 + 344);
  v60 = *(_QWORD *)(a2 + 336);
  v61 = *(_QWORD *)(a2 + 352);
  v52 = *(_QWORD *)(a2 + 360);
  v53 = *(_QWORD *)(a2 + 376);
  v62 = *(_QWORD *)(a2 + 368);
  v63 = *(_QWORD *)(a2 + 384);
  v64 = *(_QWORD *)(a2 + 392);
  v11 = *(_QWORD *)(a2 + 8);
  outlined copy of NavigationState.Base(v11, v81, v87, v86, v85, v84, v83, v82, v80, v79, v78, v77, v76, v75, v74, v73, v72, v71, v70,
    v69,
    v68,
    v67,
    v47,
    v5,
    v4,
    v7,
    v6,
    v9,
    v8,
    v10,
    v54,
    v55,
    v45,
    v56,
    v46,
    v57,
    v48,
    v58,
    v49);
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  v13 = *(_OWORD *)(a1 + 264);
  v14 = *(_OWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 264) = v45;
  *(_QWORD *)(a1 + 280) = v46;
  v15 = *(_OWORD *)(a1 + 296);
  v16 = *(_OWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 296) = v48;
  *(_QWORD *)(a1 + 312) = v49;
  *(_QWORD *)(a1 + 328) = v50;
  *(_QWORD *)(a1 + 344) = v51;
  *(_QWORD *)(a1 + 360) = v52;
  *(_QWORD *)(a1 + 376) = v53;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v81;
  *(_QWORD *)(a1 + 24) = v87;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v86;
  *(_QWORD *)(a1 + 40) = v85;
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v84;
  *(_QWORD *)(a1 + 56) = v83;
  v23 = *(_OWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v82;
  *(_QWORD *)(a1 + 72) = v80;
  v25 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v79;
  *(_QWORD *)(a1 + 88) = v78;
  v26 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v77;
  *(_QWORD *)(a1 + 104) = v76;
  v27 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v75;
  *(_QWORD *)(a1 + 120) = v74;
  v28 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v73;
  *(_QWORD *)(a1 + 136) = v72;
  v29 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v71;
  *(_QWORD *)(a1 + 152) = v70;
  v30 = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v69;
  *(_QWORD *)(a1 + 168) = v68;
  v31 = *(_OWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v67;
  *(_QWORD *)(a1 + 184) = v47;
  v32 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 200) = v4;
  v33 = *(_OWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v7;
  *(_QWORD *)(a1 + 216) = v6;
  v34 = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v9;
  *(_QWORD *)(a1 + 232) = v8;
  v35 = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v10;
  *(_QWORD *)(a1 + 248) = v54;
  *(_QWORD *)(a1 + 256) = v55;
  *(_QWORD *)(a1 + 272) = v56;
  *(_QWORD *)(a1 + 288) = v57;
  *(_QWORD *)(a1 + 304) = v58;
  *(_QWORD *)(a1 + 320) = v59;
  *(_QWORD *)(a1 + 336) = v60;
  *(_QWORD *)(a1 + 352) = v61;
  *(_QWORD *)(a1 + 368) = v62;
  *(_QWORD *)(a1 + 384) = v63;
  *(_QWORD *)(a1 + 392) = v64;
  outlined consume of NavigationState.Base(v12, v17, v18, v19, v20, v21, v22, v24, v23, WORD4(v23), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((unint64_t *)&v15 + 1),
    v16);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_retain();
  swift_release();
  v36 = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v36;
  v37 = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v37;
  v38 = *(_QWORD *)(a2 + 456);
  LOBYTE(v10) = *(_BYTE *)(a2 + 464);
  outlined copy of Environment<Bool>.Content(v38, v10);
  v39 = *(_QWORD *)(a1 + 456);
  v40 = *(_BYTE *)(a1 + 464);
  *(_QWORD *)(a1 + 456) = v38;
  *(_BYTE *)(a1 + 464) = v10;
  outlined consume of Environment<Bool>.Content(v39, v40);
  v41 = *(void **)(a2 + 472);
  LOBYTE(v10) = v65[16];
  outlined copy of Environment<UISceneSession?>.Content(v41, v10);
  v42 = *(void **)(a1 + 472);
  v43 = *(_BYTE *)(v66 + 16);
  *(_QWORD *)(a1 + 472) = v41;
  *(_BYTE *)(v66 + 16) = v10;
  outlined consume of Environment<UISceneSession?>.Content(v42, v43);
  *(_BYTE *)(a1 + 488) = v65[24];
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 504) = v65[40];
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 520) = v65[56];
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for StackItemsView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x188uLL);
  *(_OWORD *)(swift_weakTakeInit() + 8) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 433) = *(_OWORD *)(a2 + 433);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  return a1;
}

uint64_t assignWithTake for StackItemsView(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  void *v43;
  char v44;

  v4 = (__int128 *)(a1 + 264);
  v5 = (__int128 *)(a2 + 264);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 392);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 72);
  v16 = *(_OWORD *)(a1 + 88);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_OWORD *)(a1 + 136);
  v20 = *(_OWORD *)(a1 + 152);
  v21 = *(_OWORD *)(a1 + 168);
  v22 = *(_OWORD *)(a1 + 184);
  v23 = *(_OWORD *)(a1 + 200);
  v24 = *(_OWORD *)(a1 + 216);
  v25 = *(_OWORD *)(a1 + 232);
  v26 = *(_OWORD *)(a1 + 248);
  v27 = *v4;
  v28 = v4[1];
  v29 = v4[2];
  v30 = v4[3];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  v31 = *v5;
  v32 = v5[1];
  v34 = v5[2];
  v33 = v5[3];
  v35 = v5[4];
  v36 = v5[5];
  v37 = v5[6];
  v38 = v5[7];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *v4 = v31;
  v4[1] = v32;
  v4[2] = v34;
  v4[3] = v33;
  v4[4] = v35;
  v4[5] = v36;
  v4[6] = v37;
  v4[7] = v38;
  *(_QWORD *)(a1 + 392) = v6;
  outlined consume of NavigationState.Base(v7, v8, v9, v10, v11, v12, v13, v14, v15, WORD4(v15), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((unint64_t *)&v29 + 1),
    v30);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_release();
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_release();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  v39 = *((_BYTE *)v5 + 200);
  v40 = *(_QWORD *)(a1 + 456);
  v41 = *((_BYTE *)v4 + 200);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *((_BYTE *)v4 + 200) = v39;
  outlined consume of Environment<Bool>.Content(v40, v41);
  v42 = *((_BYTE *)v5 + 216);
  v43 = *(void **)(a1 + 472);
  v44 = *((_BYTE *)v4 + 216);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *((_BYTE *)v4 + 216) = v42;
  outlined consume of Environment<UISceneSession?>.Content(v43, v44);
  *(_BYTE *)(a1 + 488) = *((_BYTE *)v5 + 224);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_release();
  *(_BYTE *)(a1 + 504) = *((_BYTE *)v5 + 240);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_release();
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_release();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_release();
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StackItemsView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 552))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackItemsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 552) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 552) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for StackItemsView()
{
  return &unk_1E1AB95C0;
}

ValueMetadata *type metadata accessor for BarTransitionProgress()
{
  return &type metadata for BarTransitionProgress;
}

unint64_t lazy protocol witness table accessor for type StackItemsView and conformance StackItemsView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackItemsView and conformance StackItemsView;
  if (!lazy protocol witness table cache variable for type StackItemsView and conformance StackItemsView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackItemsView, &unk_1E1AB95C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemsView and conformance StackItemsView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in StackItemsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in StackItem()
{
  return MEMORY[0x1E0DEB428];
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in StackItemModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RootItemModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A4E64C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in RootItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in RootItemModifier.body(content:)(a1, a2, *(double *)(v2 + 16));
}

uint64_t specialized RootItemModifier.localizedApplicationName()()
{
  id v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  result = *MEMORY[0x1E0C9AAC8];
  if (!*MEMORY[0x1E0C9AAC8])
  {
    __break(1u);
    goto LABEL_69;
  }
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  result = *MEMORY[0x1E0C9AE88];
  if (!*MEMORY[0x1E0C9AE88])
  {
LABEL_69:
    __break(1u);
    return result;
  }
  v4 = v2;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v8 = objc_msgSend(v0, sel_localizedInfoDictionary);
  v9 = MEMORY[0x1E0DEE9B8];
  if (!v8)
  {
    v40 = 0u;
    v41 = 0u;
    goto LABEL_11;
  }
  v10 = v8;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v11 + 16)
    || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x8000000187BEDF90), (v13 & 1) == 0))
  {
    v40 = 0u;
    v41 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
  {
LABEL_11:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) != 0)
    goto LABEL_32;
LABEL_12:
  v14 = objc_msgSend(v0, sel_infoDictionary);
  if (!v14)
  {
    v40 = 0u;
    v41 = 0u;
LABEL_21:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_22;
  }
  v15 = v14;
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v16 + 16)
    && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x8000000187BEDF90), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_21;
  if ((swift_dynamicCast() & 1) != 0)
    goto LABEL_32;
LABEL_22:
  v19 = objc_msgSend(v0, sel_localizedInfoDictionary);
  if (!v19)
  {
    v40 = 0u;
    v41 = 0u;
LABEL_33:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_34;
  }
  v20 = v19;
  v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v21 + 16))
  {
    swift_bridgeObjectRetain();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if ((v23 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_33;
  if ((swift_dynamicCast() & 1) != 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_63:

    return v39;
  }
LABEL_34:
  v24 = objc_msgSend(v0, sel_infoDictionary);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    v40 = 0u;
    v41 = 0u;
LABEL_43:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_44;
  }
  v25 = v24;
  v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v26 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_43;
  if ((swift_dynamicCast() & 1) != 0)
    goto LABEL_54;
LABEL_44:
  v29 = objc_msgSend(v0, sel_localizedInfoDictionary);
  if (!v29)
  {
    v40 = 0u;
    v41 = 0u;
LABEL_55:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_56;
  }
  v30 = v29;
  v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v31 + 16))
  {
    swift_bridgeObjectRetain();
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
    if ((v33 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v32, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_55;
  if ((swift_dynamicCast() & 1) != 0)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
LABEL_56:
  v34 = objc_msgSend(v0, sel_infoDictionary);
  if (v34)
  {
    v35 = v34;
    v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(_QWORD *)(v36 + 16) && (v37 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7), (v38 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v41 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_63;
      goto LABEL_66;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = 0u;
    v41 = 0u;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
LABEL_66:

  return 0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Image, _ShadowEffect>, MEMORY[0x1E0CE7298], MEMORY[0x1E0CE2400], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7238];
    v2[1] = MEMORY[0x1E0CE23F0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 312);
  v14 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(a1 + 328);
  v12 = *(_QWORD *)(a1 + 320);
  v10 = *(_QWORD *)(a1 + 336);
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v4, v5, v9, v8, v7);
  swift_release();
  outlined consume of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_release();
  swift_release();
  return a1;
}

uint64_t partial apply for closure #2 in StackItemModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in StackItemModifier.body(content:)(a1, v1 + 16);
}

uint64_t partial apply for closure #3 in StackItemModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in StackItemModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of StackItemModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v9 = *(void **)(a1 + 224);
  v8 = *(_BYTE *)(a1 + 232);
  v11 = *(_QWORD *)(a1 + 240);
  v10 = *(_BYTE *)(a1 + 248);
  v12 = *(_BYTE *)(a1 + 264);
  v13 = *(_QWORD *)(a1 + 256);
  swift_retain();
  swift_retain();
  outlined copy of NavigationTitleStorage?(v2, v3, v4, v5, v6);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v9, v8);
  outlined copy of Environment<Bool>.Content(v11, v10);
  outlined copy of Environment<Bool>.Content(v13, v12);
  swift_retain();
  return a1;
}

void partial apply for closure #4 in StackItemModifier.body(content:)()
{
  uint64_t v0;
  _BYTE v1[288];

  memcpy(v1, (const void *)(v0 + 16), sizeof(v1));
  StackItemModifier.updateTopItemBarTransitionProgressIfNeeded()();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(255, &lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleBottomPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleBottomPaddingKey);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>(255);
    type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(255, &lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ZIndexTraitKey>, MEMORY[0x1E0CE2B20], MEMORY[0x1E0CE2B10], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OverlayStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], MEMORY[0x1E0CE5280]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>);
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<StackItemLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout, (uint64_t)&unk_1E1ABD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, (void (*)(uint64_t))type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>);
    lazy protocol witness table accessor for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>();
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>);
  }
}

unint64_t lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout;
  if (!lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackItemLayout, &unk_1E1ABD280);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout;
  if (!lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackItemLayout, &unk_1E1ABD280);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _InsetViewModifier<MultimodalNavigationTitleBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar, (uint64_t)&type metadata for MultimodalNavigationTitleBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4630]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>);
  }
}

void type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, type metadata accessor for GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>);
}

void type metadata accessor for GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2758]);
}

void type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>);
}

void type metadata accessor for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<StackItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier, (uint64_t)&type metadata for StackItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>();
    v6 = type metadata accessor for MultimodalNavigationStackViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<StackItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier, (uint64_t)&type metadata for StackItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>(255);
    v2[0] = &protocol witness table for MultimodalNavigationStackViewHost<A>;
    v2[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<GradientBackground, _ShadowEffect>, (uint64_t)&type metadata for GradientBackground, MEMORY[0x1E0CE2400], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<GradientBackground, _ShadowEffect>, (uint64_t)&type metadata for GradientBackground, MEMORY[0x1E0CE2400], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type GradientBackground and conformance GradientBackground();
    v3[1] = MEMORY[0x1E0CE23F0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GradientBackground and conformance GradientBackground()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientBackground and conformance GradientBackground;
  if (!lazy protocol witness table cache variable for type GradientBackground and conformance GradientBackground)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GradientBackground, &type metadata for GradientBackground);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientBackground and conformance GradientBackground);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitleBar, &type metadata for MultimodalNavigationTitleBar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar);
  }
  return result;
}

void type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnimationModifier<EquatableNavigationTitle?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1E1AE4E08, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type EquatableNavigationTitle? and conformance <A> A?(&lazy protocol witness table cache variable for type EquatableNavigationTitle? and conformance <A> A?, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1E1AE4E08, (uint64_t (*)(void))lazy protocol witness table accessor for type EquatableNavigationTitle and conformance EquatableNavigationTitle);
    v0 = type metadata accessor for _AnimationModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnimationModifier<EquatableNavigationTitle?>);
  }
}

unint64_t lazy protocol witness table accessor for type EquatableNavigationTitle and conformance EquatableNavigationTitle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EquatableNavigationTitle and conformance EquatableNavigationTitle;
  if (!lazy protocol witness table cache variable for type EquatableNavigationTitle and conformance EquatableNavigationTitle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableNavigationTitle, &unk_1E1AE4E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EquatableNavigationTitle and conformance EquatableNavigationTitle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<StackItemLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout, (uint64_t)&unk_1E1ABD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<StackItemLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout, (uint64_t)&unk_1E1ABD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EquatableNavigationTitle? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = v7;
    v9 = a4();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE998], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = lazy protocol witness table accessor for type EquatableNavigationTitle? and conformance <A> A?(&lazy protocol witness table cache variable for type CGFloat? and conformance <A> A?, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    v9 = type metadata accessor for _PreferenceActionModifier(a1, a3, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _PreferenceActionModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _AllowsHitTestingModifier);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>();
    v3[1] = lazy protocol witness table accessor for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, (void (*)(uint64_t))type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _AnimationModifier<EquatableNavigationTitle?> and conformance _AnimationModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>, MEMORY[0x1E0CE45E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for OnScrollStateChange);
    v3[1] = lazy protocol witness table accessor for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, MEMORY[0x1E0CE2768]);
    v3[1] = &protocol witness table for NavigationTitleActionModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>;
  if (!lazy protocol witness table cache variable for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _InsetViewModifier<MultimodalNavigationTitleBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar, (uint64_t)&type metadata for MultimodalNavigationTitleBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4630]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4640], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OverlayStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], MEMORY[0x1E0CE5280]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5290], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ZIndexTraitKey>, MEMORY[0x1E0CE2B20], MEMORY[0x1E0CE2B10], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarTransitionProgress and conformance BarTransitionProgress;
  if (!lazy protocol witness table cache variable for type BarTransitionProgress and conformance BarTransitionProgress)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarTransitionProgress, &type metadata for BarTransitionProgress);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarTransitionProgress and conformance BarTransitionProgress);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 312);
  v14 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(a1 + 328);
  v12 = *(_QWORD *)(a1 + 320);
  v10 = *(_QWORD *)(a1 + 336);
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v9, v4, v5, v8, v7);
  swift_release();
  outlined consume of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionMod, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionProgress>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionProgress>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransi)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ValueActionModifier2<BarTransitionProgress>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransi);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTr()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionProgress>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, , (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _PreferenceActionModifier<A>);
    v3[1] = lazy protocol witness table accessor for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ValueActionModifier2<BarTransitionProgress>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress, (uint64_t)&type metadata for BarTransitionProgress, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionPr(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = *(_QWORD *)(a1 + 176);
  v13 = *(_QWORD *)(a1 + 312);
  v14 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(a1 + 328);
  v12 = *(_QWORD *)(a1 + 320);
  v10 = *(_QWORD *)(a1 + 336);
  v15 = *(_QWORD *)(a1 + 504);
  v16 = *(_QWORD *)(a1 + 520);
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v9, v8, v4, v7, v6);
  swift_release();
  outlined consume of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  return a1;
}

uint64_t outlined release of StackItemModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v9 = *(void **)(a1 + 224);
  v8 = *(_BYTE *)(a1 + 232);
  v11 = *(_QWORD *)(a1 + 240);
  v10 = *(_BYTE *)(a1 + 248);
  v12 = *(_BYTE *)(a1 + 264);
  v13 = *(_QWORD *)(a1 + 256);
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v2, v3, v4, v5, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v9, v8);
  outlined consume of Environment<Bool>.Content(v11, v10);
  outlined consume of Environment<Bool>.Content(v13, v12);
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in StackItemModifier.updateScene(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(unsigned __int8 *)(v2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 48))(v4, v5, ObjectType, a2);
}

uint64_t sub_187A50640()
{
  return swift_deallocObject();
}

uint64_t sub_187A50650()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm_0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    if (v1 == 1)
      goto LABEL_7;
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 112) != 1)
    swift_release();
  swift_release();
LABEL_7:
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 240), *(_BYTE *)(v0 + 248));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 264));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 272), *(_BYTE *)(v0 + 280));
  swift_release();
  return swift_deallocObject();
}

uint64_t *partial apply for closure #2 in closure #1 in StackItemModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in StackItemModifier.body(content:)(a1, v1 + 16);
}

void type metadata accessor for AnyLocation<EquatableNavigationTitle?>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyLocation<EquatableNavigationTitle?>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for AnyLocation<EquatableNavigationTitle?>, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1E1AE4E08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0EF8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<EquatableNavigationTitle?>?);
  }
}

uint64_t *outlined retain of State<EquatableNavigationTitle?>(uint64_t *a1)
{
  outlined copy of NavigationTitleStorage?(*a1, a1[1], a1[2], a1[3], a1[4]);
  swift_retain();
  return a1;
}

uint64_t *outlined release of State<EquatableNavigationTitle?>(uint64_t *a1)
{
  outlined consume of NavigationTitleStorage?(*a1, a1[1], a1[2], a1[3], a1[4]);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);

  result = lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>;
  if (!lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30];
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, v1, MEMORY[0x1E0CB1F20]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE5EF8]);
    type metadata accessor for SubscriptionView();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>)
  {
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>);
  }
}

uint64_t outlined init with copy of StackItemsView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for StackItemsView(a2, a1);
  return a2;
}

uint64_t outlined init with take of StackItemsView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  memcpy((void *)(a2 + 8), (const void *)(a1 + 8), 0x188uLL);
  *(_OWORD *)(swift_weakTakeInit() + 8) = *(_OWORD *)(a1 + 408);
  v4 = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a2 + 433) = *(_OWORD *)(a1 + 433);
  *(_OWORD *)(a2 + 424) = v4;
  v5 = *(_QWORD *)(a1 + 456);
  *(_BYTE *)(a2 + 464) = *(_BYTE *)(a1 + 464);
  *(_QWORD *)(a2 + 456) = v5;
  v6 = *(_QWORD *)(a1 + 472);
  *(_BYTE *)(a2 + 480) = *(_BYTE *)(a1 + 480);
  *(_QWORD *)(a2 + 472) = v6;
  *(_OWORD *)(a2 + 488) = *(_OWORD *)(a1 + 488);
  *(_OWORD *)(a2 + 504) = *(_OWORD *)(a1 + 504);
  *(_OWORD *)(a2 + 520) = *(_OWORD *)(a1 + 520);
  *(_OWORD *)(a2 + 536) = *(_OWORD *)(a1 + 536);
  return a2;
}

void partial apply for closure #2 in StackItemsView.body.getter(char a1)
{
  closure #2 in StackItemsView.body.getter(a1);
}

uint64_t partial apply for closure #3 in StackItemsView.body.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #3 in StackItemsView.body.getter(a1, a2, v2 + 16);
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>(uint64_t a1)
{
  char v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)(a1 + 160);
  v3 = *(_BYTE *)(a1 + 168);
  v5 = *(_BYTE *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 208);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v4, v3);
  outlined consume of Environment<Bool>.Content(v6, v5);
  swift_release();
  outlined consume of MultimodalCustomKeyboardActionKeyData?(v8, v7);
  swift_release();
  swift_release();
  return a1;
}

uint64_t objectdestroy_45Tm_0()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(v0 + 312);
  v3 = *(_OWORD *)(v0 + 280);
  v4 = *(_OWORD *)(v0 + 296);
  v2 = *(_OWORD *)(v0 + 248);
  outlined consume of NavigationState.Base(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    *(_QWORD *)(v0 + 240),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 264),
    *(_QWORD *)(v0 + 272),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(v0 + 328));
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 472), *(_BYTE *)(v0 + 480));
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 488), *(_BYTE *)(v0 + 496));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t *partial apply for closure #4 in StackItemsView.body.getter()
{
  return closure #4 in StackItemsView.body.getter();
}

void _sSl7SwiftUIAA21NavigationColumnStateV7ElementRtzSi5IndexRtzrlE18collapsedItemCount6within09splitViewE0Siqd___AA0c5SplitmE0VSgtSkRd__AcDRtd__SiAFRtd__lFS2i_SitXEfU_SayACG_APTG5TA_0(uint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

void type metadata accessor for Task<(), Error>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Task<(), Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Error>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for Task<(), Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Task<(), Error>)
  {
    type metadata accessor for Error();
    v0 = type metadata accessor for Task();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Task<(), Error>);
  }
}

uint64_t sub_187A50E10()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(v0 + 328);
  v3 = *(_OWORD *)(v0 + 296);
  v4 = *(_OWORD *)(v0 + 312);
  v2 = *(_OWORD *)(v0 + 264);
  outlined consume of NavigationState.Base(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    *(_QWORD *)(v0 + 256),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 280),
    *(_QWORD *)(v0 + 288),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(v0 + 344));
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 488), *(_BYTE *)(v0 + 496));
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 504), *(_BYTE *)(v0 + 512));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StackItemsView.navigateBack(isAnimated:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in StackItemsView.navigateBack(isAnimated:)(a1, v4, v5, v1 + 32);
}

uint64_t partial apply for closure #1 in StackItemsView.updateClientSettings(allStackItems:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16);
  v5 = swift_bridgeObjectRetain();
  return v4(v5, ObjectType, a2);
}

uint64_t sub_187A51048()
{
  return swift_deallocObject();
}

uint64_t sub_187A51058()
{
  return swift_deallocObject();
}

uint64_t initializeWithCopy for OnScrollStateChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnScrollStateChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithTake for OnScrollStateChange(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

void *type metadata accessor for OnScrollStateChange()
{
  return &unk_1E1ACF3A0;
}

void *type metadata accessor for NavigationTitleActionModifier()
{
  return &unk_1E1AFA230;
}

uint64_t storeEnumTagSinglePayload for StackItemLayout(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A511F0 + 4 * byte_187C806EB[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_187A51224 + 4 * asc_187C806E6[v4]))();
}

uint64_t sub_187A51224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187A5122C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x187A51234);
  return result;
}

uint64_t sub_187A51240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187A51248);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A5124C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187A51254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

void *type metadata accessor for StackItemLayout()
{
  return &unk_1E1ABD280;
}

uint64_t sub_187A51270()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for TransactionalPreferenceTransformModifier<A>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<RootItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier, (uint64_t)&type metadata for RootItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<RootItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier, (uint64_t)&type metadata for RootItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187A513B0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<Mu, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBo, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitl, MEMORY[0x1E0CE5EF8]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBo(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNa, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBot, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionMo);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionMo()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>,)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>,);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitl()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigati, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKe, MEMORY[0x1E0CE5EF8]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKe()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPad;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPad)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionMo();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _Valu, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTr, MEMORY[0x1E0CE5EF8]);
    v3[1] = lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPad);
  }
  return result;
}

_UNKNOWN **sub_187A5154C()
{
  return &protocol witness table for SubscriptionView<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationTitleActionModifier()
{
  return &protocol witness table for NavigationTitleActionModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollStateChange()
{
  return &protocol witness table for OnScrollStateChange;
}

unint64_t instantiation function for generic protocol witness table for StackItemLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double specialized Double.init(sign:exponent:significand:)(char a1, uint64_t a2, double a3)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = -a3;
  if ((a1 & 1) == 0)
    result = a3;
  v5 = (*(_QWORD *)&a3 >> 52) & 0x7FFLL;
  if (v5 != 2047 && v5 | *(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL)
  {
    if (a2 >= -1022)
    {
      if (a2 >= 1024)
      {
        if (a2 >= 3069)
          a2 = 3069;
        do
        {
          a2 -= 1023;
          result = result * 8.98846567e307;
        }
        while ((unint64_t)a2 > 0x3FF);
      }
    }
    else
    {
      if (a2 <= -3066)
        v6 = -3066;
      else
        v6 = a2;
      do
      {
        a2 = v6 + 1022;
        result = result * 2.22507386e-308;
        v7 = __CFADD__(v6, 2044);
        v6 += 1022;
      }
      while (!v7);
    }
    return result * COERCE_DOUBLE(((a2 << 52) + 0x3FF0000000000000) & 0x7FF0000000000000);
  }
  return result;
}

uint64_t specialized static ScrollStateActionBinding.bottomBarTransitionProgress(state:)()
{
  CGRect v1;

  if (one-time initialization token for bottomBarTransitionDistance != -1)
    swift_once();
  ScrollGeometry.contentSize.getter();
  ScrollGeometry.bounds.getter();
  CGRectGetHeight(v1);
  return ScrollGeometry.contentOffset.getter();
}

uint64_t specialized static ScrollStateActionBinding.barTransitionProgress(topState:bottomState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[8];
  _BYTE v24[128];
  _BYTE v25[128];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v3 = MEMORY[0x1E0CE4958];
  outlined init with take of Image.Resolved?(a1, (uint64_t)v24, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
  outlined init with take of Image.Resolved?(a2, (uint64_t)v25, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  outlined init with take of Image.Resolved?((uint64_t)v24, (uint64_t)&v26, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v26) == 1)
  {
LABEL_7:
    v14 = 0.0;
    goto LABEL_9;
  }
  v4 = v26;
  v5 = v27;
  v6 = v28;
  v7 = v29;
  v8 = v30;
  v9 = v31;
  v10 = v32;
  v22 = v28;
  if (one-time initialization token for topBarTransitionDistance != -1)
  {
    v20 = v27;
    v21 = v26;
    v18 = v30;
    v19 = v29;
    v16 = v32;
    v17 = v31;
    swift_once();
    v10 = v16;
    v9 = v17;
    v8 = v18;
    v7 = v19;
    v5 = v20;
    v4 = v21;
    v6 = v22;
  }
  v11 = *(double *)&static ClarityUIMetrics.topBarTransitionDistance;
  v23[0] = v4;
  v23[1] = v5;
  v23[2] = v6;
  v23[3] = v7;
  v23[4] = v8;
  v23[5] = v9;
  v23[6] = v10;
  ScrollGeometry.contentOffset.getter();
  v13 = *(double *)&v22 + v12;
  if (v11 > *(double *)&v22 + v12)
  {
    if (v13 > 0.0)
    {
      v14 = v13 / v11;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  v14 = 1.0;
LABEL_9:
  outlined init with take of Image.Resolved?((uint64_t)v25, (uint64_t)v23, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E0CE4958]);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v23) != 1)
    specialized static ScrollStateActionBinding.bottomBarTransitionProgress(state:)();
  return *(_QWORD *)&v14;
}

uint64_t specialized StackItemLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  CGFloat v8;
  CGFloat v9;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  CGRect v18;

  v8 = a1;
  if ((a7 & 0x101) == 0)
  {
    *(CGRect *)(&a3 - 2) = CGRectOffset(*(CGRect *)&a1, a3 / -3.0, 0.0);
    v8 = v11;
    a2 = v12;
  }
  v9 = a3;
  v13 = v8;
  v14 = a2;
  CGRectGetMidX(*(CGRect *)(&a3 - 2));
  v18.origin.x = v8;
  v18.origin.y = a2;
  v18.size.width = v9;
  v18.size.height = a4;
  CGRectGetMidY(v18);
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v16 = result;
    if (result)
    {
      result = 0;
      do
      {
        v17 = result + 1;
        LayoutSubviews.subscript.getter();
        static UnitPoint.center.getter();
        LayoutSubview.place(at:anchor:proposal:)();
        result = v17;
      }
      while (v16 != v17);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationTitleBinder and conformance NavigationTitleBinder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder;
  if (!lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationTitleBinder, &unk_1E1AD84B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder;
  if (!lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationTitleBinder, &unk_1E1AD84B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder);
  }
  return result;
}

uint64_t outlined consume of NavigationTitleStorage??(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 != 2)
    return outlined consume of NavigationTitleStorage?(result, a2, a3, a4, a5);
  return result;
}

uint64_t *outlined release of (EquatableNavigationTitle?, EquatableNavigationTitle?)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  outlined consume of NavigationTitleStorage?(*a1, a1[1], a1[2], a1[3], a1[4]);
  outlined consume of NavigationTitleStorage?(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_187A51C6C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    if (v1 == 1)
      return swift_deallocObject();
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 64) != 1)
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NavigationTitleBinder.updateValue()()
{
  uint64_t v0;
  uint64_t (*v1)(_BYTE *);
  _BYTE v3[64];

  v1 = *(uint64_t (**)(_BYTE *))(v0 + 16);
  outlined init with take of Image.Resolved?(v0 + 32, (uint64_t)v3, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  return v1(v3);
}

unint64_t lazy protocol witness table accessor for type ScrollStateActionBinding and conformance ScrollStateActionBinding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollStateActionBinding and conformance ScrollStateActionBinding;
  if (!lazy protocol witness table cache variable for type ScrollStateActionBinding and conformance ScrollStateActionBinding)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollStateActionBinding, &unk_1E1AE6458);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateActionBinding and conformance ScrollStateActionBinding);
  }
  return result;
}

uint64_t sub_187A51D64()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in ScrollStateActionBinding.updateValue()()
{
  uint64_t v0;

  return closure #5 in ScrollStateActionBinding.updateValue()(v0 + 16, v0 + 64);
}

__n128 __swift_memcpy44_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollStateActionBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 36);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollStateActionBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 36) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for ScrollStateActionBinding()
{
  return &unk_1E1AE6458;
}

uint64_t destroy for NavigationTitleBinder(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 56);
  if ((unint64_t)(v1 - 1) >= 2)
  {
    v2 = result;
    if (v1)
    {
      outlined consume of Text.Storage(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_BYTE *)(result + 48));
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v2 + 64) != 1)
      swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationTitleBinder(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 17) = *(_QWORD *)(a2 + 17);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    if (v6 == 1 || v6 == 2)
    {
      v7 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      return a1;
    }
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v9, v10, v11);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *v4 = *v5;
    *(_OWORD *)(a1 + 48) = v8;
  }
  v12 = *(_QWORD *)(a2 + 64);
  if (v12 != 1)
    v12 = swift_retain();
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationTitleBinder(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v4 = (__int128 *)(a1 + 32);
  v5 = (__int128 *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  if (v6 != 2)
  {
    if (v7 == 2)
    {
      outlined destroy of AccessibilityTableContext?(a1 + 32, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
LABEL_8:
      v12 = v5[1];
      v11 = v5[2];
      v13 = *v5;
      *(__int128 *)((char *)v4 + 41) = *(__int128 *)((char *)v5 + 41);
      v4[1] = v12;
      v4[2] = v11;
      *v4 = v13;
      return a1;
    }
    if (v6 == 1)
    {
      if (v7)
      {
        if (v7 == 1)
        {
LABEL_5:
          v8 = *v5;
          v9 = *(_OWORD *)(a2 + 48);
          v10 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
          *(_OWORD *)(a1 + 48) = v9;
          *(_OWORD *)(a1 + 64) = v10;
          *v4 = v8;
          return a1;
        }
        goto LABEL_12;
      }
LABEL_13:
      v17 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v17;
      goto LABEL_14;
    }
    if (v7 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1 + 32);
      goto LABEL_8;
    }
    if (v6)
    {
      if (v7)
      {
        v20 = *(_QWORD *)(a2 + 32);
        v21 = *(_QWORD *)(a2 + 40);
        v22 = *(_BYTE *)(a2 + 48);
        outlined copy of Text.Storage(v20, v21, v22);
        v23 = *(_QWORD *)(a1 + 32);
        v24 = *(_QWORD *)(a1 + 40);
        v25 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = v20;
        *(_QWORD *)(a1 + 40) = v21;
        *(_BYTE *)(a1 + 48) = v22;
        outlined consume of Text.Storage(v23, v24, v25);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 32);
        v29 = v5[1];
        *v4 = *v5;
        v4[1] = v29;
      }
    }
    else if (v7)
    {
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v26, v27, v28);
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      *(_BYTE *)(a1 + 48) = v28;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v30;
    }
    v31 = (uint64_t *)(a1 + 64);
    v32 = *(_QWORD *)(a2 + 64);
    if (*(_QWORD *)(a1 + 64) == 1)
    {
      if (v32 != 1)
      {
        *v31 = v32;
        swift_retain();
        goto LABEL_35;
      }
      v33 = 1;
    }
    else
    {
      if (v32 != 1)
      {
        *v31 = v32;
        swift_retain();
        swift_release();
        goto LABEL_35;
      }
      outlined destroy of Transaction(a1 + 64);
      v33 = *(_QWORD *)(a2 + 64);
    }
    *v31 = v33;
LABEL_35:
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    return a1;
  }
  if (!v7)
    goto LABEL_13;
  if (v7 == 1 || v7 == 2)
    goto LABEL_5;
LABEL_12:
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_BYTE *)(a2 + 48);
  outlined copy of Text.Storage(v14, v15, v16);
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  *(_BYTE *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
LABEL_14:
  v18 = *(_QWORD *)(a2 + 64);
  if (v18 != 1)
    v18 = swift_retain();
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithTake for NavigationTitleBinder(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v3 = (_OWORD *)(a1 + 32);
  v4 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 56);
  if (v5 == 2)
    goto LABEL_7;
  if (v6 != 2)
  {
    if (v5 == 1)
      goto LABEL_7;
    if (v6 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1 + 32);
      goto LABEL_7;
    }
    if (v5)
    {
      if (v6)
      {
        v10 = *(_BYTE *)(a2 + 48);
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(_BYTE *)(a1 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 48) = v10;
        outlined consume of Text.Storage(v11, v12, v13);
        *(_QWORD *)(a1 + 56) = v6;
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      outlined destroy of Text(a1 + 32);
    }
    v14 = v4[1];
    *v3 = *v4;
    v3[1] = v14;
LABEL_14:
    v15 = (uint64_t *)(a1 + 64);
    v16 = *(_QWORD *)(a2 + 64);
    if (*(_QWORD *)(a1 + 64) != 1)
    {
      if (v16 != 1)
      {
        *v15 = v16;
        swift_release();
        goto LABEL_19;
      }
      outlined destroy of Transaction(a1 + 64);
      v16 = 1;
    }
    *v15 = v16;
LABEL_19:
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_release();
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    return a1;
  }
  outlined destroy of AccessibilityTableContext?(a1 + 32, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
LABEL_7:
  v7 = v4[1];
  *v3 = *v4;
  v3[1] = v7;
  v3[2] = v4[2];
  *(_OWORD *)((char *)v3 + 41) = *(_OWORD *)((char *)v4 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationTitleBinder(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v5 = -1;
  else
    v5 = v4;
  if (v4 <= 1)
    v4 = 1;
  v6 = v4 - 2;
  if (v5 < 1)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationTitleBinder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2 + 2;
  }
  return result;
}

void *type metadata accessor for NavigationTitleBinder()
{
  return &unk_1E1AD84B8;
}

Swift::Void __swiftcall ScrollViewNode.resetBehavior(completed:)(Swift::Bool completed)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v39;
  _QWORD v40[4];
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v2 = v1;
  v3 = (_OWORD *)(v1 + 80);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 152);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = (_DWORD *)(v4 + 56);
    do
    {
      v7 = *((_QWORD *)v6 - 3);
      v8 = *((double *)v6 - 2);
      v9 = *((double *)v6 - 1);
      v10 = *v6;
      swift_unownedRetainStrong();
      swift_beginAccess();
      v11 = *(_DWORD *)(v7 + 148);
      swift_unownedRetain();
      swift_release();
      if (v11 == v10)
      {
        swift_unownedRetainStrong();
        ScrollViewNode.bindingSafeOffset(_:)(v8, v9);
        *(double *)v40 = v8;
        *(double *)&v40[1] = v9;
        *(double *)&v40[2] = v12;
        *(double *)&v40[3] = v13;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        ScrollViewNode.commitScrollTransaction(_:value:)(v40, v12, v13);
        swift_release();
      }
      swift_unownedRelease();
      v6 += 8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(v2 + 120);
  v15 = *(unsigned __int16 *)(v2 + 144) | (*(unsigned __int8 *)(v2 + 146) << 16);
  if ((v15 & 0xC00000) != 0x400000 || v14 == 0)
  {
    v39 = *(_QWORD *)(v2 + 120);
  }
  else
  {
    v17 = *(_QWORD *)(v2 + 128);
    v34 = *(_QWORD *)(v2 + 112);
    v35 = *(_QWORD *)(v2 + 136);
    v37 = *(_QWORD *)(v2 + 104);
    v18 = *(_QWORD *)(v2 + 88);
    v33 = *(_QWORD *)(v2 + 96);
    v19 = *(_QWORD *)(v2 + 80);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v14;
    *(_QWORD *)(v20 + 24) = v17;
    v36 = v3;
    v21 = v14;
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(_QWORD *)(v22 + 24) = v20;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
    *(_QWORD *)(v23 + 24) = v22;
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(_QWORD *)(v24 + 24) = v23;
    *(_BYTE *)(v24 + 32) = completed;
    swift_retain_n();
    outlined copy of ScrollViewBehavior.Phase(v19, v18, v33, v37, v34, v21, v17, v35, v15);
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v21, v17);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    v25 = v21;
    v3 = v36;
    outlined consume of ScrollViewBehavior.Phase(v19, v18, v33, v37, v34, v25, v17, v35, v15);
    swift_release();
    v39 = *(_QWORD *)(v2 + 120);
    v15 = *(unsigned __int16 *)(v2 + 144) | (*(unsigned __int8 *)(v2 + 146) << 16);
  }
  v26 = *(_QWORD *)(v2 + 80);
  v27 = *(_QWORD *)(v2 + 88);
  v28 = *(_QWORD *)(v2 + 96);
  v29 = *(_QWORD *)(v2 + 104);
  v30 = *(_QWORD *)(v2 + 112);
  v31 = *(_QWORD *)(v2 + 128);
  v32 = *(_QWORD *)(v2 + 136);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *(_BYTE *)(v2 + 146) = 0x80;
  *(_WORD *)(v2 + 144) = 0;
  ++*(_DWORD *)(v2 + 148);
  *(_QWORD *)(v2 + 152) = MEMORY[0x1E0DEE9D8];
  swift_endAccess();
  outlined consume of ScrollViewBehavior.Phase(v26, v27, v28, v29, v30, v39, v31, v32, v15);
  swift_bridgeObjectRelease();
}

uint64_t ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)@<X0>(char a1@<W0>, _BYTE *a2@<X8>)
{
  double *v2;
  double *v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t result;
  char v18;
  int v19;
  int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  v3 = v2;
  swift_beginAccess();
  v6 = v2[8];
  v7 = v2[9];
  v8 = v2[42];
  v9 = v2[43];
  swift_beginAccess();
  CGSize.inset(by:)();
  v11 = v8 - v10;
  CGSize.inset(by:)();
  v13 = v9 - v12;
  if (v11 < 0.0)
    v14 = 0.0;
  else
    v14 = v11;
  if (v13 < 0.0)
    v13 = 0.0;
  v15 = v14 - v6 > 0.5;
  if (v6 > 0.5)
    v15 |= 2u;
  if (v13 - v7 > 0.5)
    v15 |= 4u;
  if (v7 > 0.5)
    v16 = v15 | 8;
  else
    v16 = v15;
  result = swift_weakLoadStrong();
  if (result)
  {
    ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(&v25, 0);
    result = swift_release();
    v18 = ~(_BYTE)v25;
  }
  else
  {
    v18 = -1;
  }
  if (one-time initialization token for horizontal != -1)
    result = swift_once();
  v19 = (static _EventDirections.horizontal & v18);
  if ((v19 & ~v16) == 0)
    v19 = 0;
  v20 = v19 | v16;
  if ((static _EventDirections.horizontal & v16) != 0)
    v16 = v20;
  if (one-time initialization token for vertical != -1)
    result = swift_once();
  v21 = static _EventDirections.vertical;
  v22 = (static _EventDirections.vertical & v18);
  if ((v22 & ~v16) == 0)
    v22 = 0;
  v23 = v22 | v16;
  if ((static _EventDirections.vertical & v16) == 0)
    v23 = v16;
  if ((a1 & 1) != 0)
  {
    if (*((_BYTE *)v3 + 249) == 1)
    {
      v24 = static _EventDirections.horizontal;
      if ((static _EventDirections.horizontal & ~(_BYTE)v23) == 0)
        v24 = 0;
      v23 |= v24;
    }
    if (((_BYTE)v3[31] & ((static _EventDirections.vertical & ~v23) != 0)) == 0)
      v21 = 0;
    LOBYTE(v23) = v21 | v23;
  }
  *a2 = v23;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ScrollView<A>.Main@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static _ScrollView.Main._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

double static _ScrollView.Main._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  double result;
  _BYTE v70[16];
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  unint64_t v123;
  int v124;
  uint64_t v125;

  v87 = a4;
  v86 = a3;
  v81 = a5;
  v125 = *MEMORY[0x1E0C80C00];
  v83 = *a1;
  v101 = *(_QWORD *)a2;
  v97 = *(_DWORD *)(a2 + 8);
  v90 = *(_QWORD *)(a2 + 16);
  v96 = *(_DWORD *)(a2 + 24);
  v95 = *(_DWORD *)(a2 + 28);
  v89 = *(_DWORD *)(a2 + 32);
  v88 = *(_DWORD *)(a2 + 36);
  v98 = *(_QWORD *)(a2 + 40);
  v103 = *(_QWORD *)(a2 + 48);
  v5 = *(_DWORD *)(a2 + 56);
  v93 = *(_DWORD *)(a2 + 60);
  v100 = *(_DWORD *)(a2 + 64);
  v99 = *(_DWORD *)(a2 + 68);
  v94 = *(_DWORD *)(a2 + 72);
  v92 = *(_DWORD *)(a2 + 76);
  v91 = *(_DWORD *)(a2 + 80);
  type metadata accessor for ScrollViewNode();
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for External<ScrollViewNode>, v6, (uint64_t (*)(uint64_t))type metadata accessor for ScrollViewNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<ScrollViewNode> and conformance External<A>(v7, v8, v9);
  v10 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for ViewGraph();
  v11 = MEMORY[0x18D75C5F8]() + 200;
  swift_beginAccess();
  v12 = MEMORY[0x18D760234](v11);
  swift_release();
  if (v12)
  {
    swift_getObjectType();
    v13 = swift_conformsToProtocol2();
    if (v13)
      v14 = v13;
    else
      v14 = 0;
    if (v13)
      v15 = v12;
    else
      v15 = 0;
    if (v15)
      goto LABEL_12;
    swift_unknownObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  v14 = 0;
LABEL_12:
  v16 = AGCreateWeakAttribute();
  swift_allocObject();
  v17 = specialized ScrollViewNode.init(host:attribute:)(v15, v14, v16);
  swift_unknownObjectRelease();
  AGGraphSetValue();
  v118 = v90;
  v116 = v97;
  *(_QWORD *)&v119 = __PAIR64__(v95, v96);
  v120 = v98;
  v121 = v103;
  HIDWORD(v119) = v88;
  *(_QWORD *)&v122 = __PAIR64__(v93, v5);
  HIDWORD(v122) = v99;
  v123 = __PAIR64__(v92, v94);
  v124 = v91;
  _ViewInputs.size.getter();
  v115 = __PAIR64__(HIDWORD(v101), v83);
  v102 = v5;
  LODWORD(v82) = v10;
  type metadata accessor for _ScrollView.Main(255, v86, v87, v18);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static _ScrollView.Main._makeView(view:inputs:)(1, v86, v87, v19);
  AGGraphCreateOffsetAttribute2();
  LODWORD(v80) = *MEMORY[0x1E0CFED28];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ContentSize and conformance ContentSize();
  v85 = v17;
  swift_retain();
  v84 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v79 = _GraphValue.value.getter();
  LODWORD(v78) = _ViewInputs.size.getter();
  LODWORD(v77) = _ViewInputs.environment.getter();
  v76 = _ViewInputs.time.getter();
  v20 = v89;
  LODWORD(v75) = _ViewInputs.transaction.getter();
  *(_QWORD *)((char *)&v119 + 4) = __PAIR64__(v89, v95);
  *((_QWORD *)&v119 + 1) = __PAIR64__(v88, v89);
  v120 = v98;
  v121 = v103;
  v21 = v88;
  LODWORD(v122) = v102;
  *(_QWORD *)((char *)&v122 + 4) = __PAIR64__(v100, v93);
  *((_QWORD *)&v122 + 1) = __PAIR64__(v99, v100);
  v22 = v92;
  v123 = __PAIR64__(v92, v94);
  v23 = v91;
  v124 = v91;
  v24 = _ViewInputs.viewPhase.getter();
  v115 = __PAIR64__(v79, v10);
  v116 = (int)v78;
  v117 = v77;
  v118 = __PAIR64__(v75, v76);
  LODWORD(v119) = v24;
  BYTE4(v119) = 0;
  MEMORY[0x1E0C80A78](v24, v25);
  v71 = type metadata accessor for ScrollViewUpdate(0, v86, v87, v26);
  v72 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewUpdate<A>, v71);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<_ScrollViewProxy>, (uint64_t)&type metadata for _ScrollViewProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v115, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_28, (uint64_t)v70, v71, MEMORY[0x1E0DEDCE8], v27, MEMORY[0x1E0DEDD18], v28);
  v77 = 0;
  v82 = v106;
  _GraphValue.init(_:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_ScrollViewProxy>, (uint64_t)&type metadata for _ScrollViewProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v79 = _GraphValue.value.getter();
  v115 = v101;
  v118 = v90;
  v116 = v97;
  *(_QWORD *)&v119 = __PAIR64__(v95, v96);
  v29 = v20;
  *((_QWORD *)&v119 + 1) = __PAIR64__(v21, v20);
  v78 = &v121;
  v120 = v98;
  v30 = v98;
  v121 = v103;
  v31 = v21;
  *(_QWORD *)&v122 = __PAIR64__(v93, v102);
  *((_QWORD *)&v122 + 1) = __PAIR64__(v99, v100);
  v32 = v94;
  v123 = __PAIR64__(v22, v94);
  v33 = v22;
  v34 = v23;
  v124 = v23;
  v106 = v101;
  v35 = v101;
  LODWORD(v107) = v97;
  v36 = v97;
  v108 = v90;
  v37 = v90;
  *(_QWORD *)&v109 = __PAIR64__(v95, v96);
  LODWORD(v16) = v96;
  v38 = v95;
  *((_QWORD *)&v109 + 1) = __PAIR64__(v31, v29);
  v39 = v29;
  v110 = v98;
  v111 = v103;
  *(_QWORD *)&v112 = __PAIR64__(v93, v102);
  *((_QWORD *)&v112 + 1) = __PAIR64__(v99, v100);
  v113 = __PAIR64__(v33, v94);
  v114 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v76 = _ViewInputs.animatedSize()();
  v106 = v35;
  LODWORD(v17) = v36;
  LODWORD(v107) = v36;
  v108 = v37;
  *(_QWORD *)&v109 = __PAIR64__(v38, v16);
  *((_QWORD *)&v109 + 1) = __PAIR64__(v88, v39);
  v40 = v88;
  v110 = v30;
  v111 = v103;
  *(_QWORD *)&v112 = __PAIR64__(v93, v102);
  *((_QWORD *)&v112 + 1) = __PAIR64__(v99, v100);
  LODWORD(v30) = v92;
  v113 = __PAIR64__(v92, v32);
  v41 = v91;
  v114 = v91;
  v74 = _ViewInputs.animatedPosition()();
  v106 = v35;
  LODWORD(v107) = v17;
  v108 = v37;
  *(_QWORD *)&v109 = __PAIR64__(v38, v16);
  *((_QWORD *)&v109 + 1) = __PAIR64__(v40, v39);
  LODWORD(v35) = v40;
  v42 = v98;
  v110 = v98;
  v111 = v103;
  LODWORD(v16) = v93;
  *(_QWORD *)&v112 = __PAIR64__(v93, v102);
  LODWORD(v17) = v100;
  *((_QWORD *)&v112 + 1) = __PAIR64__(v99, v100);
  v113 = __PAIR64__(v30, v94);
  v114 = v41;
  v73 = _ViewInputs.transform.getter();
  v106 = v101;
  LODWORD(v107) = v97;
  v108 = v37;
  *(_QWORD *)&v109 = __PAIR64__(v38, v96);
  *((_QWORD *)&v109 + 1) = __PAIR64__(v35, v39);
  v110 = v42;
  v111 = v103;
  *(_QWORD *)&v112 = __PAIR64__(v16, v102);
  LODWORD(v42) = v16;
  LODWORD(v16) = v99;
  *((_QWORD *)&v112 + 1) = __PAIR64__(v99, v17);
  LODWORD(v17) = v94;
  v113 = __PAIR64__(v30, v94);
  v114 = v41;
  v43 = _ViewInputs.weakScrollable.getter();
  v75 = &v73;
  v106 = __PAIR64__(v74, v76);
  v107 = __PAIR64__(v84, v73);
  v44 = v84;
  v108 = v43;
  LODWORD(v109) = v80;
  MEMORY[0x1E0C80A78](v43, v45);
  v47 = type metadata accessor for _ScrollView.Main.ScrollableProvider(0, v86, v87, v46);
  v71 = v47;
  v80 = v47;
  v72 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main.ScrollableProvider, v47);
  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for Attribute<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v106, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_31, (uint64_t)v70, v47, MEMORY[0x1E0DEDCE8], v48, MEMORY[0x1E0DEDD18], v49);
  LODWORD(v77) = v104;
  _ViewInputs.scrollable.setter();
  v106 = v82 | (v44 << 32);
  LOBYTE(v107) = 0;
  lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput();
  PropertyList.subscript.setter();
  v106 = v101;
  LODWORD(v107) = v97;
  v108 = v90;
  *(_QWORD *)&v109 = __PAIR64__(v95, v96);
  *((_QWORD *)&v109 + 1) = __PAIR64__(v35, v39);
  v110 = v98;
  v111 = v103;
  *(_QWORD *)&v112 = __PAIR64__(v42, v102);
  *((_QWORD *)&v112 + 1) = __PAIR64__(v16, v100);
  v113 = __PAIR64__(v92, v17);
  v114 = v41;
  LODWORD(v106) = _ViewInputs.environment.getter();
  v50 = v85;
  v107 = v85;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewEnvironment and conformance ScrollViewEnvironment();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _ViewInputs.environment.setter();
  HIDWORD(v119) |= 2u;
  PreferenceKeys.remove<A>(_:)();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>();
  LODWORD(v106) = v79;
  v107 = v50;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewChildModifier and conformance ScrollViewChildModifier();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  v106 = v115;
  LODWORD(v107) = v116;
  v108 = v118;
  v109 = v119;
  v110 = v120;
  v111 = v121;
  v112 = v122;
  v113 = v123;
  v114 = v124;
  v51 = swift_allocObject();
  v52 = v86;
  v53 = v87;
  *(_QWORD *)(v51 + 16) = v86;
  *(_QWORD *)(v51 + 24) = v53;
  *(_DWORD *)(v51 + 32) = v83;
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ScrollViewGesture);
  swift_retain();
  v54 = v103;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55 = v102;
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v56 = swift_release();
  MEMORY[0x1E0C80A78](v56, v57);
  *(_QWORD *)&v70[-32] = v52;
  *(_QWORD *)&v70[-24] = v53;
  *(_QWORD *)&v70[-16] = &v104;
  MEMORY[0x1E0C80A78](v58, v59);
  *(_QWORD *)&v70[-32] = v80;
  *(_QWORD *)&v70[-24] = partial apply for closure #3 in static _ScrollView.Main._makeView(view:inputs:);
  *(_QWORD *)&v70[-16] = v60;
  AGGraphMutateAttribute();
  v106 = v54;
  LODWORD(v107) = v55;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v106) = 0;
    _ViewOutputs.subscript.setter();
  }
  type metadata accessor for ScrollViewResponder();
  *(_QWORD *)(swift_allocObject() + 208) = v85;
  v106 = v101;
  LODWORD(v107) = v97;
  v108 = v90;
  *(_QWORD *)&v109 = __PAIR64__(v95, v96);
  *((_QWORD *)&v109 + 1) = __PAIR64__(v88, v89);
  v110 = v98;
  v111 = v54;
  *(_QWORD *)&v112 = __PAIR64__(v93, v55);
  *((_QWORD *)&v112 + 1) = __PAIR64__(v99, v100);
  v113 = __PAIR64__(v92, v94);
  v114 = v91;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DefaultLayoutViewResponder.init(inputs:)();
  v106 = v54;
  LODWORD(v107) = v55;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  v61 = swift_bridgeObjectRelease();
  v106 = v54;
  LODWORD(v107) = v55;
  MEMORY[0x1E0C80A78](v61, v62);
  *(_DWORD *)&v70[-16] = v82;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  v63 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v63, v64);
  *(_QWORD *)&v70[-16] = &v104;
  MEMORY[0x1E0C80A78](v65, v66);
  *(_QWORD *)&v70[-16] = partial apply for closure #5 in static _ScrollView.Main._makeView(view:inputs:);
  *(_QWORD *)&v70[-8] = v67;
  AGGraphMutateAttribute();
  LOBYTE(v106) = 1;
  _ViewOutputs.layoutComputer.setter();
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v68 = v81;
  *(_QWORD *)v81 = v104;
  result = v105;
  v68[1] = v105;
  return result;
}

uint64_t closure #1 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v6 = a1 + *(int *)(type metadata accessor for _ScrollView(0, a2, a3, a4) + 36) + 40;
  v12[2] = type metadata accessor for _ScrollView.Main(0, a2, a3, v7);
  v8 = MEMORY[0x1E0CE0B90];
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_24, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t closure #2 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  int v20;
  _BYTE v21[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v20 = *((_DWORD *)a2 + 20);
  LODWORD(v27) = a3;
  type metadata accessor for _ScrollView.Main(255, a4, a5, a4);
  type metadata accessor for _GraphValue();
  v11 = a2[3];
  v12 = a2[4];
  v18 = *(_OWORD *)(a2 + 7);
  v19 = *(_OWORD *)(a2 + 5);
  v13 = a2[9];
  _GraphValue.value.getter();
  type metadata accessor for _ScrollView(0, a4, a5, v14);
  AGGraphCreateOffsetAttribute2();
  v25 = a4;
  v26 = a5;
  LODWORD(v27) = AGGraphCreateOffsetAttribute2();
  KeyPath = swift_getKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for Focus();
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v23);
  v15 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v21, v23, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  v27 = v8;
  LODWORD(KeyPath) = v9;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v19;
  v33 = v18;
  v34 = v13;
  v35 = v20;
  swift_getAssociatedConformanceWitness();
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #3 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;

  v7 = _ViewOutputs.subscript.getter();
  result = type metadata accessor for _ScrollView.Main.ScrollableProvider(0, a3, a4, v8);
  if ((v7 & 0x100000000) != 0)
    v10 = *MEMORY[0x1E0CFED28];
  else
    v10 = v7;
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t implicit closure #1 in static _ScrollView.Main._makeView(view:inputs:)()
{
  uint64_t v0;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter();
  swift_retain();
  v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

uint64_t implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ScrollViewProxy?, (uint64_t)&type metadata for _ScrollViewProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  type metadata accessor for Map<_ScrollViewProxy, _ScrollViewProxy?>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Map<_ScrollViewProxy, _ScrollViewProxy?> and conformance Map<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Map<_ScrollViewProxy, _ScrollViewProxy?>, MEMORY[0x1E0CFECC0]);
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #4 in implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return swift_retain();
}

_DWORD *_ScrollView.Main.ScrollableProvider.value.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *result;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  v12 = HIDWORD(a1);
  v13 = HIDWORD(a2);
  v14 = HIDWORD(a3);
  v15 = type metadata accessor for _ScrollView.Main.ScrollableLayoutScrollable(0, a5, a6, a4);
  a7[3] = v15;
  a7[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main.ScrollableLayoutScrollable, v15);
  result = (_DWORD *)swift_allocObject();
  *a7 = result;
  result[4] = v10;
  result[5] = v12;
  result[6] = v9;
  result[7] = v13;
  result[8] = v8;
  result[9] = v14;
  result[10] = v7;
  return result;
}

double _ScrollView.Main.ScrollableLayoutScrollable.parent.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t _ScrollView.Main.ScrollableLayoutScrollable.children.getter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*MEMORY[0x1E0CFED28] == a4)
    return 0;
  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

_DWORD *protocol witness for Rule.value.getter in conformance _ScrollView<A>.Main.ScrollableProvider@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return _ScrollView.Main.ScrollableProvider.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(unsigned int *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for ScrollableContainer.children.getter in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable()
{
  uint64_t v0;

  return _ScrollView.Main.ScrollableLayoutScrollable.children.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

double protocol witness for ScrollableContainer.parent.getter in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable@<D0>(uint64_t a1@<X8>)
{
  return _ScrollView.Main.ScrollableLayoutScrollable.parent.getter(a1);
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main.ScrollableLayoutScrollable, a4);
  return ScrollableContainer.scroll<A>(to:)();
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main.ScrollableLayoutScrollable, a3);
  return ScrollableContainer.setContentTarget(_:)();
}

BOOL protocol witness for Scrollable.adjustContentOffset(by:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, double a2, double a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main.ScrollableLayoutScrollable, a1);
  return ScrollableContainer.adjustContentOffset(by:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollView<A>.Main.ScrollableLayoutScrollable, a6);
  return ScrollableContainer.mapFirstChild<A, B>(ofType:body:)();
}

uint64_t ScrollViewUpdate.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *Value;
  int v22;
  int v23;
  uint64_t v24;
  Swift::UInt32 v25;
  _BOOL4 v26;
  _OWORD *v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  double *v74;
  double v75;
  char v76;
  BOOL v77;
  char v78;
  uint64_t v79;
  uint64_t ObjectType;
  uint64_t v81;
  double v82;
  int v83;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  char *v102;
  int v103;
  uint64_t TupleTypeMetadata2;
  uint64_t v105;
  int v106;
  _OWORD v107[5];
  uint64_t v108[7];

  v108[6] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v93 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v91 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v95 = type metadata accessor for _ScrollView(0, v3, v6, v7);
  v90 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95, v8);
  v94 = (char *)&v85 - v9;
  v88 = v3;
  v92 = v6;
  v11 = type metadata accessor for _ScrollView.Main(255, v3, v6, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v99 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v12);
  v98 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v85 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v102 = (char *)&v85 - v20;
  v101 = v2;
  type metadata accessor for ScrollViewNode();
  Value = (uint64_t *)AGGraphGetValue();
  v23 = v22;
  v24 = *Value;
  v25 = *(_DWORD *)AGGraphGetValue() >> 1;
  swift_retain();
  v26 = ScrollViewNode.update(resetSeed:)(v25);
  v27 = (_OWORD *)AGGraphGetValue();
  v97 = v28;
  if ((v28 & 1) != 0)
  {
    v30 = v27[1];
    v107[0] = *v27;
    v107[1] = v30;
    *(double *)(v24 + 352) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v24 + 360) = v31;
    ++*(_DWORD *)(v24 + 408);
    v29 = 1;
  }
  else
  {
    v29 = v26 | v23;
  }
  v103 = v29;
  v32 = TupleTypeMetadata2;
  v33 = *(int *)(TupleTypeMetadata2 + 48);
  v34 = AGGraphGetValue();
  v36 = v35;
  v37 = *(_QWORD *)(v11 - 8);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v39 = v102;
  v38(v102, v34, v11);
  v39[v33] = v36 & 1;
  v40 = *(int *)(v32 + 48);
  v100 = (void (*)(char *, char *, uint64_t))v38;
  v38(v17, (uint64_t)v39, v11);
  v96 = v36 & 1;
  v17[v40] = v36 & 1;
  v89 = v37;
  v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  v41(v17, v11);
  if ((v36 & 1) != 0)
  {
    v42 = *(int *)(v32 + 48);
    v100(v17, v39, v11);
    v17[v42] = 1;
    v43 = v90;
    v86 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    v44 = v94;
    v45 = v95;
    v86(v94, v17, v95);
    v41(v17, v11);
    v46 = v88;
    v47 = v93;
    v48 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    v87 = v41;
    v49 = (uint64_t)v91;
    v48(v91, v44, v88);
    v90 = *(_QWORD *)(v43 + 8);
    ((void (*)(char *, uint64_t))v90)(v44, v45);
    v50 = implicit closure #1 in ScrollViewUpdate.updateValue()(v49, v46, v92);
    v52 = v51;
    v53 = v49;
    v41 = v87;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v53, v46);
    *(_QWORD *)(v24 + 368) = v50;
    *(_QWORD *)(v24 + 376) = v52;
    v39 = v102;
    swift_release();
    v54 = *(int *)(TupleTypeMetadata2 + 48);
    v100(v17, v39, v11);
    v103 = 1;
    v17[v54] = 1;
    v86(v44, v17, v45);
    v41(v17, v11);
    outlined init with copy of _ScrollViewConfig((uint64_t)&v44[*(int *)(v45 + 36)], (uint64_t)v107);
    ((void (*)(char *, uint64_t))v90)(v44, v45);
    v32 = TupleTypeMetadata2;
    swift_beginAccess();
    outlined assign with take of _ScrollViewConfig((uint64_t)v107, v24 + 168);
    swift_endAccess();
    ++*(_DWORD *)(v24 + 408);
  }
  v55 = *(int *)(v32 + 48);
  v56 = v98;
  v100(v98, v39, v11);
  v57 = v96;
  v56[v55] = v96;
  if ((v97 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v56, v32);
    goto LABEL_10;
  }
  v58 = *(int *)(v32 + 48);
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v17, v56, v11);
  v17[v58] = v57;
  v41(v17, v11);
  if (v57)
LABEL_10:
    ScrollViewNode.clampContentOffset()();
  LODWORD(v100) = *(_DWORD *)(v101 + 16);
  v59 = *(_BYTE *)(v101 + 28);
  v60 = (_QWORD *)AGGraphGetValue();
  v61 = v60[1];
  if ((v62 & 1) != 0)
  {
    *(_QWORD *)&v107[0] = *v60;
    *((_QWORD *)&v107[0] + 1) = v61;
    swift_retain();
    swift_retain();
    v63 = ScrollViewNode.update(environment:)((uint64_t *)v107);
    v103 |= v63;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  swift_beginAccess();
  if (*(_BYTE *)(v24 + 200) == 1)
  {
    swift_retain();
    swift_retain();
    if ((v59 & 1) == 0 && (dispatch thunk of AnyLocation.wasRead.getter() & 1) != 0)
    {
      MEMORY[0x18D75AC90](0xD000000000000137, 0x8000000187BEE230);
      *(_BYTE *)(v101 + 28) = 1;
    }
    v64 = dispatch thunk of AnyLocation.update()();
    swift_release();
    swift_release();
    v65 = v108[3];
    v66 = v108[4];
    v67 = v64 & 1;
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = 2;
  }
  swift_beginAccess();
  v68 = *(unsigned __int8 *)(v24 + 146);
  v69 = *(unsigned __int16 *)(v24 + 144);
  AGGraphClearUpdate();
  v70 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  if (v67 == 2)
    v71 = 0;
  else
    v71 = v65;
  if (v67 == 2)
    v72 = 0;
  else
    v72 = v66;
  if (v67 == 2)
    v73 = 2;
  else
    v73 = v67 & 1;
  if ((ScrollViewNode.updateContentOffset(in:bindingOffset:)(v70, v71, v72, v73) & 1) != 0)
  {
    ++*(_DWORD *)(v24 + 408);
    v103 = 1;
  }
  if (((*(unsigned __int8 *)(v24 + 146) << 16) & 0xC00000) == 0x400000)
  {
    v74 = (double *)AGGraphGetValue();
    v75 = *v74;
    if ((v76 & 1) != 0)
    {
      v77 = ((v69 | (v68 << 16)) & 0xC00000) == 0x400000;
      v78 = v103;
      if (v77)
      {
        v108[0] = *(uint64_t *)v74;
        ScrollViewNode.iterateDeceleration(at:)(v108);
        v78 = 1;
      }
    }
    else
    {
      v78 = v103;
    }
    if (MEMORY[0x18D760234](v24 + 16))
    {
      v79 = *(_QWORD *)(v24 + 24);
      ObjectType = swift_getObjectType();
      v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 16))(ObjectType, v79);
      swift_unknownObjectRelease();
      swift_beginAccess();
      v82 = *(double *)(v81 + 376);
      if (v75 < v82)
        v82 = v75;
      *(double *)(v81 + 376) = v82;
      swift_release();
    }
  }
  else
  {
    v78 = v103;
  }
  if ((v78 & 1) != 0 || !AGGraphGetOutputValue())
  {
    v83 = *(_DWORD *)(v24 + 408) + *(_DWORD *)(v24 + 148);
    v105 = v24;
    v106 = v83;
    swift_retain();
    AGGraphSetOutputValue();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v102, TupleTypeMetadata2);
  return swift_release();
}

Swift::Bool __swiftcall ScrollViewNode.update(resetSeed:)(Swift::UInt32 resetSeed)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  Swift::UInt32 v42;
  _QWORD v43[4];
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v2 = *(_DWORD *)(v1 + 164);
  if (v2 != resetSeed)
  {
    v3 = v1;
    v41 = *(_DWORD *)(v1 + 164);
    v42 = resetSeed;
    *(_DWORD *)(v1 + 164) = resetSeed;
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    swift_beginAccess();
    *(_BYTE *)(v1 + 160) = 0;
    v4 = (_OWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    swift_beginAccess();
    v5 = *(_QWORD *)(v1 + 152);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      v7 = (_DWORD *)(v5 + 56);
      do
      {
        v8 = *((_QWORD *)v7 - 3);
        v9 = *((double *)v7 - 2);
        v10 = *((double *)v7 - 1);
        v11 = *v7;
        swift_unownedRetainStrong();
        swift_beginAccess();
        v12 = *(_DWORD *)(v8 + 148);
        swift_unownedRetain();
        swift_release();
        if (v12 == v11)
        {
          swift_unownedRetainStrong();
          ScrollViewNode.bindingSafeOffset(_:)(v9, v10);
          *(double *)v43 = v9;
          *(double *)&v43[1] = v10;
          *(double *)&v43[2] = v13;
          *(double *)&v43[3] = v14;
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          ScrollViewNode.commitScrollTransaction(_:value:)(v43, v13, v14);
          swift_release();
        }
        swift_unownedRelease();
        v7 += 8;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    v15 = *(_QWORD *)(v3 + 120);
    v16 = *(unsigned __int16 *)(v3 + 144) | (*(unsigned __int8 *)(v3 + 146) << 16);
    if ((v16 & 0xC00000) == 0x400000 && v15 != 0)
    {
      v37 = *(_QWORD *)(v3 + 136);
      v38 = v4;
      v18 = *(_QWORD *)(v3 + 128);
      v39 = *(_QWORD *)(v3 + 112);
      v19 = *(_QWORD *)(v3 + 96);
      v36 = *(_QWORD *)(v3 + 104);
      v20 = *(_QWORD *)(v3 + 80);
      v21 = *(_QWORD *)(v3 + 88);
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v15;
      *(_QWORD *)(v22 + 24) = v18;
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
      *(_QWORD *)(v23 + 24) = v22;
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
      *(_QWORD *)(v24 + 24) = v23;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
      *(_QWORD *)(v25 + 24) = v24;
      *(_BYTE *)(v25 + 32) = 0;
      swift_retain_n();
      outlined copy of ScrollViewBehavior.Phase(v20, v21, v19, v36, v39, v15, v18, v37, v16);
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v15, v18);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      swift_release();
      v26 = v18;
      v4 = v38;
      outlined consume of ScrollViewBehavior.Phase(v20, v21, v19, v36, v39, v15, v26, v37, v16);
      swift_release();
    }
    v40 = *(_QWORD *)(v3 + 120);
    v27 = *(unsigned __int16 *)(v3 + 144) | (*(unsigned __int8 *)(v3 + 146) << 16);
    v28 = *(_QWORD *)(v3 + 80);
    v29 = *(_QWORD *)(v3 + 88);
    v30 = *(_QWORD *)(v3 + 96);
    v31 = *(_QWORD *)(v3 + 104);
    v32 = *(_QWORD *)(v3 + 112);
    v34 = *(_QWORD *)(v3 + 128);
    v33 = *(_QWORD *)(v3 + 136);
    *v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *(_BYTE *)(v3 + 146) = 0x80;
    *(_WORD *)(v3 + 144) = 0;
    ++*(_DWORD *)(v3 + 148);
    *(_QWORD *)(v3 + 152) = MEMORY[0x1E0DEE9D8];
    swift_endAccess();
    outlined consume of ScrollViewBehavior.Phase(v28, v29, v30, v31, v32, v40, v34, v33, v27);
    swift_bridgeObjectRelease();
    v2 = v41;
    resetSeed = v42;
  }
  return v2 != resetSeed;
}

uint64_t (*implicit closure #1 in ScrollViewUpdate.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](a1, a1);
  v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in ScrollViewUpdate.updateValue();
}

void ScrollViewNode.clampContentOffset()()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGPoint v13;
  double v15;
  double v16;
  CGPoint v17;
  double v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v1 = v0[42];
  v2 = v0[43];
  static CGSize.invalidValue.getter();
  if (v1 != v4 || v2 != v3)
  {
    v6 = v0[42];
    v7 = v0[43];
    swift_beginAccess();
    CGSize.inset(by:)();
    v9 = v6 - v8;
    CGSize.inset(by:)();
    if (v9 < 0.0)
      v11 = 0.0;
    else
      v11 = v9;
    if (v7 - v10 < 0.0)
      v12 = 0.0;
    else
      v12 = v7 - v10;
    v13 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v12, *(unint64_t *)&v11));
    if (v13.x != v0[6] || v13.y != v0[7])
    {
      ScrollViewNode.bindingSafeOffset(_:)(v13.x, v13.y);
      v17 = v13;
      v18 = v15;
      v19 = v16;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      ScrollViewNode.commitScrollTransaction(_:value:)(&v17, v15, v16);
    }
  }
}

uint64_t ScrollViewNode.update(environment:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  int v6;
  double v7;
  double v8;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[1];
  v10 = *a1;
  EnvironmentValues.containingScrollView.getter((uint64_t)&v11);
  v3 = v11;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    swift_release();
    if (v3 && v5 == v3)
      goto LABEL_4;
  }
  else if (!v3)
  {
LABEL_4:
    v6 = 0;
    goto LABEL_7;
  }
  swift_weakAssign();
  v6 = 1;
LABEL_7:
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey>, (uint64_t)&type metadata for TopScrollIndicatorFollowsContentOffsetKey, (uint64_t)&protocol witness table for TopScrollIndicatorFollowsContentOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v10 != *(unsigned __int8 *)(v1 + 392))
  {
    *(_BYTE *)(v1 + 392) = v10;
    v6 = 1;
  }
  swift_retain();
  swift_retain();
  EnvironmentValues.pixelLength.getter();
  v8 = v7;
  swift_release();
  swift_release();
  swift_release();
  if (*(double *)(v1 + 400) == v8)
  {
    if (!v6)
      return 0;
  }
  else
  {
    *(double *)(v1 + 400) = v8;
  }
  ++*(_DWORD *)(v1 + 408);
  return 1;
}

uint64_t ScrollViewNode.updateContentOffset(in:bindingOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  double v37;
  double v38;
  int v39;
  int v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89[10];
  _BYTE v90[56];
  unint64_t v91;
  _BYTE v92[80];
  double v93;
  double v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v5 = v4;
  v8 = a4;
  if ((*(_BYTE *)(v4 + 160) & 1) != 0)
  {
LABEL_7:
    Transaction.subscript.getter(*(_DWORD *)(v4 + 40), v89);
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v89, (uint64_t)v90, &lazy cache variable for type metadata for ScrollViewCommitInfo?, (uint64_t)&type metadata for ScrollViewCommitInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (v91 >> 1 == 0xFFFFFFFF)
    {
      swift_beginAccess();
      if (*(unsigned __int8 *)(v4 + 146) >> 6)
      {
        if (v8 == 2)
          goto LABEL_63;
      }
      else
      {
        v12 = 0;
        if (((*(unsigned __int8 *)(v4 + 146) << 16) & 0x10000) == 0 || v8 == 2)
          return v12 & 1;
      }
      if ((v8 & 1) != 0 && (*(double *)(v4 + 48) != *(double *)&a2 || *(double *)(v4 + 56) != *(double *)&a3))
      {
        *(double *)(v4 + 48) = *(double *)&a2;
        *(double *)(v4 + 56) = *(double *)&a3;
        if ((Transaction.disablesAnimations.getter() & 1) == 0)
        {
          Transaction.subscript.getter();
          if (LOBYTE(v103))
          {
            if (LOBYTE(v103) != 1 || (Transaction.isContinuous.getter() & 1) == 0)
            {
              swift_beginAccess();
              v12 = ScrollViewBehavior.updateDeceleration(node:target:velocity:completion:)(v4, a2, a3, 0, 0, 0, 1, 0, 0);
              swift_endAccess();
              return v12 & 1;
            }
          }
        }
        swift_beginAccess();
        if (*(double *)(v4 + 64) != *(double *)&a2 || *(double *)(v4 + 72) != *(double *)&a3)
        {
          swift_beginAccess();
          if (((*(unsigned __int16 *)(v4 + 144) | (*(unsigned __int8 *)(v4 + 146) << 16)) & 0xC00000) == 0x400000)
          {
            v82 = *(unsigned __int16 *)(v4 + 144) | (*(unsigned __int8 *)(v4 + 146) << 16);
            v31 = *(_QWORD *)(v4 + 96);
            v32 = *(_QWORD *)(v4 + 120);
            v74 = a2;
            v76 = *(_QWORD *)(v4 + 112);
            v72 = *(_QWORD *)(v4 + 128);
            v78 = *(_QWORD *)(v4 + 104);
            v80 = *(_QWORD *)(v4 + 136);
            v33 = *(_QWORD *)(v4 + 152);
            v34 = *(_QWORD *)(v33 + 16);
            v86 = *(_QWORD *)(v4 + 88);
            v88 = *(_QWORD *)(v4 + 80);
            v84 = v31;
            if (v34)
            {
              v68 = a3;
              swift_bridgeObjectRetain();
              v35 = (_DWORD *)(v33 + 56);
              do
              {
                v36 = *((_QWORD *)v35 - 3);
                v37 = *((double *)v35 - 2);
                v38 = *((double *)v35 - 1);
                v39 = *v35;
                swift_unownedRetainStrong();
                swift_beginAccess();
                v40 = *(_DWORD *)(v36 + 148);
                swift_unownedRetain();
                swift_release();
                if (v40 == v39)
                {
                  swift_unownedRetainStrong();
                  ScrollViewNode.bindingSafeOffset(_:)(v37, v38);
                  v103 = v37;
                  v104 = v38;
                  v105 = v41;
                  v106 = v42;
                  v107 = 0u;
                  v108 = 0u;
                  v109 = 0u;
                  ScrollViewNode.commitScrollTransaction(_:value:)(&v103, v41, v42);
                  swift_release();
                }
                swift_unownedRelease();
                v35 += 8;
                --v34;
              }
              while (v34);
              swift_bridgeObjectRelease();
              a3 = v68;
              v31 = v84;
            }
            if (v32)
            {
              v62 = swift_allocObject();
              *(_QWORD *)(v62 + 16) = v32;
              *(_QWORD *)(v62 + 24) = v72;
              v63 = swift_allocObject();
              *(_QWORD *)(v63 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
              *(_QWORD *)(v63 + 24) = v62;
              v64 = swift_allocObject();
              *(_QWORD *)(v64 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
              *(_QWORD *)(v64 + 24) = v63;
              v65 = swift_allocObject();
              *(_QWORD *)(v65 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
              *(_QWORD *)(v65 + 24) = v64;
              *(_BYTE *)(v65 + 32) = 0;
              swift_retain_n();
              outlined copy of ScrollViewBehavior.Phase(v88, v86, v31, v78, v76, v32, v72, v80, v82);
              outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v32, v72);
              swift_retain();
              static Update.enqueueAction(_:)();
              swift_release();
              swift_release();
              swift_release();
              outlined consume of ScrollViewBehavior.Phase(v88, v86, v84, v78, v76, v32, v72, v80, v82);
              swift_release();
            }
            outlined consume of ScrollViewBehavior.Phase(*(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 136), *(unsigned __int16 *)(v5 + 144) | (*(unsigned __int8 *)(v5 + 146) << 16));
            *(_OWORD *)(v5 + 112) = 0u;
            *(_OWORD *)(v5 + 128) = 0u;
            *(_OWORD *)(v5 + 80) = 0u;
            *(_OWORD *)(v5 + 96) = 0u;
            *(_BYTE *)(v5 + 146) = 0x80;
            *(_WORD *)(v5 + 144) = 0;
            v66 = *(_DWORD *)(v5 + 148);
            *(_DWORD *)(v5 + 148) = v66 + 1;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v5 + 152) = MEMORY[0x1E0DEE9D8];
            *(_DWORD *)(v5 + 148) = v66 + 2;
            a2 = v74;
          }
          swift_endAccess();
          *(double *)(v5 + 64) = *(double *)&a2;
          *(double *)(v5 + 72) = *(double *)&a3;
          goto LABEL_65;
        }
      }
    }
    else
    {
      outlined init with take of ScrollViewCommitInfo((uint64_t)v90, (uint64_t)v92);
      outlined init with take of ScrollViewCommitInfo((uint64_t)v92, (uint64_t)&v93);
      v13 = v100;
      if (v100 < 0)
      {
        v100 &= ~0x8000000000000000;
        v43 = v98;
        v44 = v99;
        v45 = v101;
        v46 = v8;
        v47 = v102;
        v48 = v96;
        v49 = v97;
        if (v96 == *(double *)&a2 && v97 == *(double *)&a3)
          v50 = *(_QWORD *)&v93;
        else
          v50 = a2;
        if (v96 == *(double *)&a2 && v97 == *(double *)&a3)
          v51 = *(_QWORD *)&v94;
        else
          v51 = a3;
        if (v46 == 2)
        {
          v52 = *(_QWORD *)&v93;
        }
        else
        {
          v48 = *(double *)&a2;
          v49 = *(double *)&a3;
          v52 = v50;
        }
        if (v46 == 2)
          v53 = *(_QWORD *)&v94;
        else
          v53 = v51;
        if (v46 == 2)
          v54 = v95;
        else
          v54 = (v96 == *(double *)&a2 && v97 == *(double *)&a3) & v95;
        *(double *)(v5 + 48) = v48;
        *(double *)(v5 + 56) = v49;
        swift_beginAccess();
        v12 = ScrollViewBehavior.updateDeceleration(node:target:velocity:completion:)(v5, v52, v53, v54, v43, v44, v13 & 1, v45, v47);
        swift_endAccess();
        outlined release of ScrollViewCommitInfo?(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ScrollViewCommitInfo?);
        return v12 & 1;
      }
      v14 = v93;
      v15 = v94;
      v17 = v95;
      v16 = v96;
      swift_beginAccess();
      v18 = *(unsigned __int16 *)(v4 + 144) | (*(unsigned __int8 *)(v4 + 146) << 16);
      if ((v18 & 0xC00000) == 0x400000)
      {
        v71 = (_OWORD *)(v4 + 80);
        v73 = a2;
        v69 = *(_QWORD *)(v4 + 96);
        v70 = *(_QWORD *)(v4 + 88);
        v19 = *(_QWORD *)(v4 + 120);
        v81 = *(_QWORD *)(v4 + 112);
        v83 = *(_QWORD *)(v4 + 80);
        v77 = *(_QWORD *)(v4 + 128);
        v79 = *(_QWORD *)(v4 + 104);
        v75 = *(_QWORD *)(v4 + 136);
        v20 = *(_QWORD *)(v4 + 152);
        v21 = *(_QWORD *)(v20 + 16);
        v85 = v17;
        v87 = v16;
        if (v21)
        {
          v67 = v8;
          v22 = a3;
          swift_bridgeObjectRetain();
          v23 = (_DWORD *)(v20 + 56);
          do
          {
            v24 = *((_QWORD *)v23 - 3);
            v25 = *((double *)v23 - 2);
            v26 = *((double *)v23 - 1);
            v27 = *v23;
            swift_unownedRetainStrong();
            swift_beginAccess();
            v28 = *(_DWORD *)(v24 + 148);
            swift_unownedRetain();
            swift_release();
            if (v28 == v27)
            {
              swift_unownedRetainStrong();
              ScrollViewNode.bindingSafeOffset(_:)(v25, v26);
              v103 = v25;
              v104 = v26;
              v105 = v29;
              v106 = v30;
              v107 = 0u;
              v108 = 0u;
              v109 = 0u;
              ScrollViewNode.commitScrollTransaction(_:value:)(&v103, v29, v30);
              swift_release();
            }
            swift_unownedRelease();
            v23 += 8;
            --v21;
          }
          while (v21);
          swift_bridgeObjectRelease();
          a3 = v22;
          v8 = v67;
          v17 = v85;
          v16 = v87;
        }
        if (v19)
        {
          v55 = swift_allocObject();
          *(_QWORD *)(v55 + 16) = v19;
          *(_QWORD *)(v55 + 24) = v77;
          v56 = swift_allocObject();
          *(_QWORD *)(v56 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
          *(_QWORD *)(v56 + 24) = v55;
          v57 = swift_allocObject();
          *(_QWORD *)(v57 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
          *(_QWORD *)(v57 + 24) = v56;
          v58 = swift_allocObject();
          *(_QWORD *)(v58 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
          *(_QWORD *)(v58 + 24) = v57;
          *(_BYTE *)(v58 + 32) = 0;
          swift_retain_n();
          outlined copy of ScrollViewBehavior.Phase(v83, v70, v69, v79, v81, v19, v77, v75, v18);
          outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v19, v77);
          swift_retain();
          static Update.enqueueAction(_:)();
          swift_release();
          swift_release();
          swift_release();
          v17 = v85;
          v16 = v87;
          outlined consume of ScrollViewBehavior.Phase(v83, v70, v69, v79, v81, v19, v77, v75, v18);
          swift_release();
        }
        outlined consume of ScrollViewBehavior.Phase(*(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 136), *(unsigned __int16 *)(v5 + 144) | (*(unsigned __int8 *)(v5 + 146) << 16));
        v71[2] = 0u;
        v71[3] = 0u;
        *v71 = 0u;
        v71[1] = 0u;
        *(_BYTE *)(v5 + 146) = 0x80;
        *(_WORD *)(v5 + 144) = 0;
        v59 = *(_DWORD *)(v5 + 148);
        *(_DWORD *)(v5 + 148) = v59 + 1;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v5 + 152) = MEMORY[0x1E0DEE9D8];
        *(_DWORD *)(v5 + 148) = v59 + 2;
        a2 = v73;
      }
      swift_endAccess();
      outlined release of ScrollViewCommitInfo?(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ScrollViewCommitInfo?);
      if (v8 == 2)
        v60 = v17;
      else
        v60 = a2;
      if (v8 == 2)
        v61 = *(_QWORD *)&v16;
      else
        v61 = a3;
      *(_QWORD *)(v5 + 48) = v60;
      *(_QWORD *)(v5 + 56) = v61;
      swift_beginAccess();
      if (*(double *)(v5 + 64) != v14 || *(double *)(v5 + 72) != v15)
      {
        *(double *)(v5 + 64) = v14;
        *(double *)(v5 + 72) = v15;
LABEL_65:
        v12 = 1;
        return v12 & 1;
      }
    }
LABEL_63:
    v12 = 0;
    return v12 & 1;
  }
  result = swift_beginAccess();
  if ((*(_BYTE *)(v4 + 200) & 1) == 0)
  {
    v11 = *(_QWORD *)(v4 + 168);
    v10 = *(_QWORD *)(v4 + 176);
    swift_beginAccess();
    *(_QWORD *)(v4 + 64) = v11;
    goto LABEL_6;
  }
  if (v8 != 2)
  {
    swift_beginAccess();
    *(double *)(v4 + 64) = *(double *)&a2;
    v10 = a3;
    v11 = a2;
LABEL_6:
    *(_QWORD *)(v4 + 72) = v10;
    *(_QWORD *)(v4 + 48) = v11;
    *(_QWORD *)(v4 + 56) = v10;
    *(_BYTE *)(v4 + 160) = 1;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t ScrollViewNode.iterateDeceleration(at:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = v1;
  v3 = *a1;
  result = swift_beginAccess();
  if (((*(unsigned __int8 *)(v1 + 146) << 16) & 0xC00000) == 0x400000)
  {
    v8 = v3;
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 56);
    swift_beginAccess();
    swift_beginAccess();
    v7 = ScrollViewBehavior.iterateDeceleration(node:time:offset:estimatedTarget:)(v1, (double *)&v8, v1 + 64, v5, v6, 0);
    swift_endAccess();
    result = swift_endAccess();
    if ((v7 & 1) != 0)
      *(_OWORD *)(v2 + 64) = *(_OWORD *)(v2 + 48);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 8);
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  *a1 = v6;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized EnvironmentValues.subscript.setter(v3);
  return swift_release();
}

void protocol witness for static Rule.initialValue.getter in conformance ScrollViewChildModifier(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewChildModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Value;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(v1 + 8);
  Value = AGGraphGetValue();
  v5 = *(_QWORD *)Value;
  v6 = *(_DWORD *)(Value + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v6;
  return swift_retain();
}

uint64_t static ScrollViewGeometry._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v11 = a2[5];
  v10 = a2[6];
  v19 = *((_DWORD *)a2 + 15);
  v20 = *((_DWORD *)a2 + 14);
  v17 = *((_DWORD *)a2 + 17);
  v18 = *((_DWORD *)a2 + 16);
  v15 = *((_DWORD *)a2 + 19);
  v16 = *((_DWORD *)a2 + 18);
  v14 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v32 & 1) != 0)
    __break(1u);
  v31 = v3;
  v32 = v4;
  v33 = v5;
  *(_QWORD *)&v34 = __PAIR64__(v6, v7);
  *((_QWORD *)&v34 + 1) = __PAIR64__(v9, v8);
  v35 = v11;
  v36 = v10;
  *(_QWORD *)&v37 = __PAIR64__(v19, v20);
  *((_QWORD *)&v37 + 1) = __PAIR64__(v17, v18);
  v38 = __PAIR64__(v15, v16);
  v39 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.position.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ContentOffset and conformance ContentOffset();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.position.setter();
  _ViewInputs.size.setter();
  v22 = v3;
  v23 = v4;
  v24 = v5;
  v25 = v34;
  v26 = v11;
  v27 = v10;
  v28 = v37;
  v29 = __PAIR64__(v15, v16);
  v30 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  a3(v12, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollViewGeometry()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double ContentOffset.value.getter@<D0>(_OWORD *a1@<X8>)
{
  __int128 *Value;
  uint64_t v3;
  double result;
  __int128 v5;

  AGGraphGetValue();
  swift_beginAccess();
  AGGraphGetValue();
  swift_beginAccess();
  Value = (__int128 *)AGGraphGetValue();
  v5 = *Value;
  MEMORY[0x18D755E9C](Value, v3);
  ViewOrigin.value.setter();
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

double protocol witness for Rule.value.getter in conformance ContentOffset@<D0>(_OWORD *a1@<X8>)
{
  return ContentOffset.value.getter(a1);
}

uint64_t ContentSize.value.getter(uint64_t a1, int a2, uint64_t a3)
{
  double v5;
  double v6;

  AGGraphGetValue();
  MEMORY[0x18D75BE3C]();
  AGGraphGetValue();
  CGSize.inset(by:)();
  _ProposedSize.init(_:)();
  if (*MEMORY[0x1E0CFED28] == a2)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  LayoutComputer.sizeThatFits(_:)();
  if (*(double *)(a3 + 336) != v5 || *(double *)(a3 + 344) != v6)
  {
    *(double *)(a3 + 336) = v5;
    *(double *)(a3 + 344) = v6;
    ++*(_DWORD *)(a3 + 408);
    ScrollViewNode.clampContentOffset()();
  }
  ViewSize.init(_:proposal:)();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ContentSize()
{
  uint64_t v0;

  return ContentSize.value.getter(*(_QWORD *)v0, *(_DWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t Transaction.subscript.getter@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  Transaction.subscript.getter();
  if (*(_QWORD *)(v18 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    v6 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 80 * v4);
    v7 = v6[6];
    v8 = v6[7];
    v9 = v6[8];
    v10 = v6[9];
    v16 = v6[1];
    v17 = *v6;
    v11 = v6[2];
    v12 = v6[3];
    v13 = v6[4];
    v14 = v6[5];
    outlined copy of ScrollViewCommitInfo(*v6, v16, v11, v12, v13, v14, v7, v8, v9);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v7 = 0;
    v9 = 0;
    v10 = 0;
    v8 = 0x1FFFFFFFELL;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v14;
  a2[6] = v7;
  a2[7] = v8;
  a2[8] = v9;
  a2[9] = v10;
  return result;
}

void ScrollViewNode.bindingSafeOffset(_:)(double a1, double a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD v19[4];

  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2[50];
  (*(void (**)(char *, _QWORD, uint64_t, double))(v6 + 104))(v10, *MEMORY[0x1E0DED4F0], v5, v8);
  *(double *)v19 = a1;
  *(double *)&v19[3] = a2;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v11);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v11);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v12 = v2[42];
  v13 = v2[43];
  swift_beginAccess();
  CGSize.inset(by:)();
  v15 = v12 - v14;
  CGSize.inset(by:)();
  if (v15 < 0.0)
    v17 = 0.0;
  else
    v17 = v15;
  if (v13 - v16 < 0.0)
    v18 = 0.0;
  else
    v18 = v13 - v16;
  CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v18, *(unint64_t *)&v17));
}

uint64_t ScrollViewNode.commitScrollTransaction(_:value:)(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t ObjectType;
  unsigned int v17;
  char isUniquelyReferenced_nonNull_native;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23[2];
  double v24;

  swift_beginAccess();
  if (*(_BYTE *)(v3 + 200) == 1)
  {
    v8 = *(_QWORD *)(v3 + 184);
    v7 = *(_QWORD *)(v3 + 192);
    v9 = *(_QWORD *)(v3 + 176);
    v24 = *(double *)(v3 + 168);
    v21 = v24;
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for Binding<CGPoint>, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v11 = v10;
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](v23, v11);
    if (v23[0] != a2 || v23[1] != a3)
    {
      v17 = *(_DWORD *)(v3 + 40);
      outlined release of ScrollViewCommitInfo?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ScrollViewCommitInfo);
      Transaction.subscript.getter();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23[0] = v21;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v17, isUniquelyReferenced_nonNull_native);
      v22 = v23[0];
      swift_bridgeObjectRelease();
      v23[0] = v22;
      Transaction.subscript.setter();
      v19 = v24;
      v20 = swift_allocObject();
      *(double *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = v9;
      *(_QWORD *)(v20 + 32) = v8;
      *(_QWORD *)(v20 + 40) = v7;
      *(double *)(v20 + 48) = a2;
      *(double *)(v20 + 56) = a3;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      return swift_release();
    }
    swift_release();
    swift_release();
  }
  v12 = *(_DWORD *)(v3 + 40);
  outlined release of ScrollViewCommitInfo?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ScrollViewCommitInfo);
  Transaction.subscript.getter();
  v13 = swift_isUniquelyReferenced_nonNull_native();
  v24 = v23[0];
  v23[0] = -0.0;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v12, v13);
  v23[0] = v24;
  swift_bridgeObjectRelease();
  v24 = v23[0];
  Transaction.subscript.setter();
  if (MEMORY[0x18D760234](v3 + 16))
  {
    v14 = *(_QWORD *)(v3 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
    swift_unknownObjectRelease();
    LOBYTE(v24) = 1;
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    swift_release();
    return swift_release_n();
  }
  return swift_release();
}

uint64_t specialized closure #1 in ScrollViewNode.commitScrollTransaction(_:value:)()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t ScrollViewNode.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  outlined consume of ScrollViewBehavior.Phase(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(unsigned __int16 *)(v0 + 144) | (*(unsigned __int8 *)(v0 + 146) << 16));
  swift_bridgeObjectRelease();
  outlined destroy of _ScrollViewConfig(v0 + 168);
  swift_release();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

BOOL static _ScrollViewAnimationMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void _ScrollViewAnimationMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int _ScrollViewAnimationMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Transaction._scrollViewAnimates.getter()
{
  return Transaction.subscript.getter();
}

uint64_t Transaction._scrollViewAnimates.setter()
{
  return Transaction.subscript.setter();
}

uint64_t (*Transaction._scrollViewAnimates.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  *a1 = v1;
  Transaction.subscript.getter();
  return Transaction._scrollViewAnimates.modify;
}

uint64_t Transaction._scrollViewAnimates.modify(uint64_t a1)
{
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return Transaction.subscript.setter();
}

uint64_t protocol witness for static TransactionKey.defaultValue.getter in conformance Transaction.ScrollInfoKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static Transaction.ScrollInfoKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t ScrollViewGesture.gestureMask.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 2);
  v3 = *v0 + 168;
  swift_beginAccess();
  if (*(_BYTE *)(v3 + 129) != 1)
    return 1;
  outlined init with copy of TableColumnList(v1 + 256, (uint64_t)v10);
  v4 = v11;
  v5 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v8 = v1;
  v9 = v2;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v8, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v6;
}

uint64_t ScrollViewGesture.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  int v10;
  _QWORD v11[5];
  char v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  swift_beginAccess();
  outlined init with copy of TableColumnList(v3 + 256, (uint64_t)v11);
  v5 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  v9 = v3;
  v10 = v4;
  _ScrollViewGestureProvider.gesture(proxy:)(&v9, v5, (uint64_t)&v13);
  v6 = v13;
  v7 = v14;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  v9 = v3;
  AnyHashable.init<A>(_:)();
  v12 = 0;
  outlined init with copy of CoordinateSpace((uint64_t)v11, (uint64_t)&v9);
  outlined init with copy of CoordinateSpaceGesture<ScrollGesture.Value>((uint64_t)&v9, a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  swift_retain();
  outlined destroy of CoordinateSpaceGesture<ScrollGesture.Value>((uint64_t)&v9);
  outlined destroy of CoordinateSpace((uint64_t)v11);
  return swift_release();
}

uint64_t closure #1 in ScrollViewGesture.dispatch(phase:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[56];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with take of WeakBox<Swift.AnyObject>(a2, (uint64_t)v4, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
    swift_beginAccess();
    ScrollViewBehavior.dispatchPhase(_:node:)((uint64_t)v4);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance ScrollViewGesture(uint64_t a1))()
{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[56];

  v1 = MEMORY[0x1E0CE17C0];
  outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)v5, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
  v2 = swift_allocObject();
  swift_weakInit();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v5, v3 + 24, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))v1);
  return closure #1 in ScrollViewGesture.dispatch(phase:state:)partial apply;
}

uint64_t (*protocol witness for GestureCallbacks.cancel(state:) in conformance ScrollViewGesture())()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[3];
  char v4;

  memset(v3, 0, sizeof(v3));
  v4 = 3;
  v0 = swift_allocObject();
  swift_weakInit();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v3, v1 + 24, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
  return partial apply for closure #1 in ScrollViewGesture.dispatch(phase:state:);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollViewGesture()
{
  lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture();
  return static GestureViewModifier.makeView(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollViewGesture()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ScrollViewResponder.bindEvent(_:)(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  int i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27[40];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  type metadata accessor for DefaultLayoutViewResponder();
  v2 = (uint64_t (*)(uint64_t))method lookup function for ResponderNode();
  v3 = v2(a1);
  if (!v3)
  {
    outlined init with copy of TableColumnList(a1, (uint64_t)v27);
    PanEvent.init(_:)();
    v4 = v34;
    if (v34 != 1)
    {
      v6 = v28;
      v5 = v29;
      v7 = v30;
      v26 = v31;
      v8 = v32;
      v9 = v33;
      v11 = v35;
      v10 = v36;
      v12 = v37;
      v21 = v38;
      v22 = v39;
      ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, &v28);
      v25 = v28;
      v28 = v6;
      v29 = v5;
      v30 = v7;
      v31 = v26;
      LOBYTE(v32) = v8;
      v33 = v9;
      v34 = v4;
      v24 = v4;
      v13 = v21;
      v35 = v11;
      v36 = v10;
      v37 = v12;
      v38 = v21;
      v39 = v22;
      PanEvent.translation.getter();
      if (v14 != 0.0)
      {
        if (one-time initialization token for horizontal != -1)
          goto LABEL_24;
        goto LABEL_6;
      }
      for (i = 0; ; i = static _EventDirections.horizontal[0])
      {
        v28 = v6;
        v29 = v5;
        v30 = v7;
        v31 = v26;
        LOBYTE(v32) = v8;
        v33 = v9;
        v34 = v24;
        v35 = v11;
        v36 = v10;
        v37 = v12;
        v38 = v13;
        v39 = v22;
        PanEvent.translation.getter();
        if (v15 == 0.0)
        {
          outlined consume of PanEvent?(v6, v5, v7, v26, v8, v9, v24);
          v16 = i;
        }
        else
        {
          if (one-time initialization token for vertical != -1)
            swift_once();
          v17 = static _EventDirections.vertical;
          outlined consume of PanEvent?(v6, v5, v7, v26, v8, v9, v24);
          if ((v17 & ~i) != 0)
            v18 = v17;
          else
            v18 = 0;
          v16 = v18 | i;
        }
        if ((v16 & v25) == 0)
          return 0;
        v19 = MultiViewResponder.children.getter();
        v13 = v19;
        if ((v19 & 0xC000000000000001) != 0)
          break;
        if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v3 = *(_QWORD *)(v19 + 32);
          swift_retain();
LABEL_19:
          swift_bridgeObjectRelease();
          return v3;
        }
        __break(1u);
LABEL_24:
        swift_once();
LABEL_6:
        ;
      }
      v3 = MEMORY[0x18D75E3BC](0, v19);
      goto LABEL_19;
    }
    return 0;
  }
  return v3;
}

void ScrollViewResponder.__allocating_init(inputs:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ScrollViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ScrollViewResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ScrollViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in ScrollViewResponderFilter.updateValue()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  MultiViewResponder.children.setter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v4 + 32) = a2;
  v6 = v4;
  specialized Array._endMutation()();
  *a1 = v6;
  return swift_retain();
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance ScrollViewResponderFilter()
{
  uint64_t result;

  type metadata accessor for (_:)();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    swift_retain();
    AGGraphSetOutputValue();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ScrollViewNode()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type External<ScrollViewNode> and conformance External<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v4;

  result = lazy protocol witness table cache variable for type External<ScrollViewNode> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollViewNode> and conformance External<A>)
  {
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(255, &lazy cache variable for type metadata for External<ScrollViewNode>, a3, (uint64_t (*)(uint64_t))type metadata accessor for ScrollViewNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollViewNode> and conformance External<A>);
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:)()
{
  type metadata accessor for ScrollViewNode();
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  return static External._update(_:attribute:)();
}

uint64_t specialized ScrollViewNode.init(host:attribute:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = a3;
  v6 = HIDWORD(a3);
  *(_QWORD *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_BYTE *)(v3 + 146) = 0x80;
  *(_WORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 148) = 0;
  *(_QWORD *)(v3 + 152) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 164) = 0u;
  *(_OWORD *)(v3 + 180) = 0u;
  *(_QWORD *)(v3 + 193) = 0;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_QWORD *)(v3 + 240) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 280) = &type metadata for EmptyGestureProvider;
  *(_QWORD *)(v3 + 288) = &protocol witness table for EmptyGestureProvider;
  *(_DWORD *)(v3 + 296) = 16843008;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v3 + 336) = v7;
  *(_QWORD *)(v3 + 344) = v8;
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v3 + 352) = v9;
  *(_QWORD *)(v3 + 360) = v10;
  swift_weakInit();
  *(_BYTE *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 24) = a2;
  swift_unknownObjectWeakAssign();
  *(_DWORD *)(v3 + 32) = v4;
  *(_DWORD *)(v3 + 36) = v6;
  *(_QWORD *)(v3 + 368) = protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance PlatformItemContent;
  *(_QWORD *)(v3 + 376) = 0;
  v11 = static ScrollViewNode.nextUniqueId;
  *(_DWORD *)(v3 + 40) = static ScrollViewNode.nextUniqueId;
  static ScrollViewNode.nextUniqueId = v11 + 1;
  return v3;
}

unint64_t lazy protocol witness table accessor for type ContentSize and conformance ContentSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentSize and conformance ContentSize;
  if (!lazy protocol witness table cache variable for type ContentSize and conformance ContentSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentSize, &unk_1E1AAED80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSize and conformance ContentSize);
  }
  return result;
}

uint64_t type metadata accessor for ScrollViewUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollViewUpdate);
}

uint64_t type metadata accessor for _ScrollView.Main.ScrollableProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollView.Main.ScrollableProvider);
}

unint64_t lazy protocol witness table accessor for type ScrollViewEnvironment and conformance ScrollViewEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewEnvironment and conformance ScrollViewEnvironment;
  if (!lazy protocol witness table cache variable for type ScrollViewEnvironment and conformance ScrollViewEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewEnvironment, &unk_1E1AD8DA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewEnvironment and conformance ScrollViewEnvironment);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildModifier and conformance ScrollViewChildModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewChildModifier and conformance ScrollViewChildModifier;
  if (!lazy protocol witness table cache variable for type ScrollViewChildModifier and conformance ScrollViewChildModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewChildModifier, &unk_1E1AE2C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildModifier and conformance ScrollViewChildModifier);
  }
  return result;
}

uint64_t sub_187A57C54()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static _ScrollView.Main._makeView(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _ContentShapeModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _CoordinateSpaceModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, MEMORY[0x1E0CE4EF0], (uint64_t)&type metadata for ScrollViewGeometry, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE4EE0];
    v2[1] = &protocol witness table for ScrollViewGeometry;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #3 in static _ScrollView.Main._makeView(view:inputs:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t type metadata accessor for ScrollViewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ScrollViewResponder;
  if (!type metadata singleton initialization cache for ScrollViewResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for implicit closure #1 in static _ScrollView.Main._makeView(view:inputs:)()
{
  return implicit closure #1 in static _ScrollView.Main._makeView(view:inputs:)();
}

uint64_t partial apply for implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)()
{
  return implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)();
}

uint64_t partial apply for closure #5 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = _ViewOutputs.layoutComputer.getter();
  v3 = *MEMORY[0x1E0CFED28];
  if ((result & 0x100000000) == 0)
    v3 = result;
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode;
  if (!lazy protocol witness table cache variable for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewAnimationMode, &type metadata for _ScrollViewAnimationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode);
  }
  return result;
}

uint64_t sub_187A57EA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Transaction.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187A57EF0()
{
  return Transaction.subscript.setter();
}

uint64_t storeEnumTagSinglePayload for _ScrollViewAnimationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A57F84 + 4 * byte_187C80D65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A57FB8 + 4 * byte_187C80D60[v4]))();
}

uint64_t sub_187A57FB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A57FC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A57FC8);
  return result;
}

uint64_t sub_187A57FD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A57FDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A57FE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A57FE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ScrollViewAnimationMode()
{
  return &type metadata for _ScrollViewAnimationMode;
}

uint64_t type metadata completion function for ScrollViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ScrollViewResponder()
{
  return type metadata accessor for ScrollViewResponder();
}

void *type metadata accessor for Transaction.ScrollViewAnimatesKey()
{
  return &unk_1E1AB0AA8;
}

void *type metadata accessor for ScrollViewChildModifier()
{
  return &unk_1E1AE2C90;
}

ValueMetadata *type metadata accessor for ScrollViewGesture()
{
  return &type metadata for ScrollViewGesture;
}

ValueMetadata *type metadata accessor for ScrollViewGeometry()
{
  return &type metadata for ScrollViewGeometry;
}

void *type metadata accessor for ScrollViewEnvironment()
{
  return &unk_1E1AD8DA8;
}

uint64_t getEnumTagSinglePayload for ScrollViewUpdate(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 29))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 28);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 29) = 0;
    if (a2)
      *(_BYTE *)(result + 28) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for ContentSize()
{
  return &unk_1E1AAED80;
}

ValueMetadata *type metadata accessor for _ViewInputs.ContainingScrollViewInput()
{
  return &type metadata for _ViewInputs.ContainingScrollViewInput;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollViewGeometry()
{
  return &protocol witness table for ScrollViewGeometry;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollViewGesture()
{
  return &protocol witness table for ScrollViewGesture;
}

unint64_t lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewGesture, &type metadata for ScrollViewGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewGesture, &type metadata for ScrollViewGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewGesture, &type metadata for ScrollViewGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewGesture, &type metadata for ScrollViewGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultGestureCombiner and conformance DefaultGestureCombiner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner;
  if (!lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53C8], MEMORY[0x1E0CE53D8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner);
  }
  return result;
}

uint64_t associated type witness table accessor for GestureViewModifier.ContentGesture : Gesture in ScrollViewGesture()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    type metadata accessor for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>);
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CallbacksGesture<ScrollViewGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture, (uint64_t)&type metadata for ScrollViewGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3140]);
    lazy protocol witness table accessor for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>();
    lazy protocol witness table accessor for type ScrollGesture and conformance ScrollGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>;
  if (!lazy protocol witness table cache variable for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CallbacksGesture<ScrollViewGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture, (uint64_t)&type metadata for ScrollViewGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3140]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3150], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGesture and conformance ScrollGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGesture and conformance ScrollGesture;
  if (!lazy protocol witness table cache variable for type ScrollGesture and conformance ScrollGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollGesture, &type metadata for ScrollGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGesture and conformance ScrollGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

void base witness table accessor for _AttributeBody in _ScrollView<A>.Main.ScrollableProvider()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ScrollViewUpdate<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187A585B4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ScrollViewUpdate.updateValue()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 56))();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey>, (uint64_t)&type metadata for TopScrollIndicatorFollowsContentOffsetKey, (uint64_t)&protocol witness table for TopScrollIndicatorFollowsContentOffsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_187A586B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187A586D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of ScrollViewCommitInfo?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((unint64_t)a8 >> 1 != 0xFFFFFFFF)
    return outlined consume of ScrollViewCommitInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

uint64_t outlined consume of ScrollViewCommitInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a8 < 0)
    return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a9, a10);
  return result;
}

uint64_t type metadata accessor for _ScrollView.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollView.Main.ScrollableLayoutScrollable);
}

uint64_t sub_187A58730()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ContentOffset and conformance ContentOffset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentOffset and conformance ContentOffset;
  if (!lazy protocol witness table cache variable for type ContentOffset and conformance ContentOffset)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentOffset, &unk_1E1AB5528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentOffset and conformance ContentOffset);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<ScrollGesture.Value>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<ScrollGesture.Value>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187A58878()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A5889C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScrollViewGesture.dispatch(phase:state:)()
{
  uint64_t v0;

  return closure #1 in ScrollViewGesture.dispatch(phase:state:)(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t outlined consume of PanEvent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a7 != 1)
    return swift_release();
  return result;
}

_QWORD *outlined release of ScrollViewCommitInfo?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

uint64_t sub_187A5892C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ScrollViewNode.commitScrollTransaction(_:value:)()
{
  return specialized closure #1 in ScrollViewNode.commitScrollTransaction(_:value:)();
}

void type metadata accessor for Map<_ScrollViewProxy, _ScrollViewProxy?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Map<_ScrollViewProxy, _ScrollViewProxy?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _ScrollViewProxy?, (uint64_t)&type metadata for _ScrollViewProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Map();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Map<_ScrollViewProxy, _ScrollViewProxy?>);
  }
}

unint64_t lazy protocol witness table accessor for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter;
  if (!lazy protocol witness table cache variable for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewResponderFilter, &unk_1E1AEB758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter);
  }
  return result;
}

uint64_t sub_187A58A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 40))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_187A58A50()
{
  return 16;
}

__n128 sub_187A58A5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void *type metadata accessor for ScrollViewResponderFilter()
{
  return &unk_1E1AEB758;
}

void *type metadata accessor for ContentOffset()
{
  return &unk_1E1AB5528;
}

void *type metadata accessor for Transaction.ScrollInfoKey()
{
  return &unk_1E1AB0A48;
}

uint64_t destroy for ScrollViewCommitInfo(uint64_t *a1)
{
  return outlined consume of ScrollViewCommitInfo(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

uint64_t *initializeWithCopy for ScrollViewCommitInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  outlined copy of ScrollViewCommitInfo(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for ScrollViewCommitInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  outlined copy of ScrollViewCommitInfo(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v20 = a1[8];
  v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  outlined consume of ScrollViewCommitInfo(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t *assignWithTake for ScrollViewCommitInfo(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  outlined consume of ScrollViewCommitInfo(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewCommitInfo(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ScrollViewCommitInfo(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 2 * -a2;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollViewCommitInfo(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = *(_QWORD *)(result + 56) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewCommitInfo()
{
  return &type metadata for ScrollViewCommitInfo;
}

void base witness table accessor for Scrollable in _ScrollView<A>.Main.ScrollableLayoutScrollable()
{
  JUMPOUT(0x18D75FFDCLL);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ListRepresentable<A, B>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRepresentable<A, B>, a3);
  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v8, a4);
}

{
  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for ListRepresentable<A, B>, a4);
}

void protocol witness for View.body.getter in conformance ListRepresentable<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRepresentable<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

double protocol witness for static View._makeView(view:inputs:) in conformance PlatformViewControllerRepresentableAdaptor<A>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, a3);
  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v8, a4);
}

void protocol witness for View.body.getter in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewControllerRepresentableAdaptor<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t RemoteSheetContainerVCKey.Storage.remoteSheet.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  _BYTE v5[8];
  _BYTE v6[16];

  outlined init with copy of RemoteSheetContainerVCKey.Storage(v0, (uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30]);
  if ((v6[8] & 1) != 0)
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v6, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining, (uint64_t)&protocolRef__UIRemoteViewControllerContaining, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v1 = (void *)MEMORY[0x18D760234](v5);
    if (v1)
    {
      v2 = objc_msgSend(v1, sel__containedRemoteViewController);
      swift_unknownObjectRelease();
      outlined destroy of WeakBox<_UIRemoteViewControllerContaining>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
      if (v2)
        return swift_dynamicCastObjCProtocolUnconditional();
    }
    else
    {
      outlined destroy of WeakBox<_UIRemoteViewControllerContaining>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
      return 0;
    }
  }
  else
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v6, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteSheetContaining, (uint64_t)&protocolRef__UIRemoteSheetContaining, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    v3 = (void *)MEMORY[0x18D760234](v5);
    if (v3)
    {
      v2 = objc_msgSend(v3, sel__remoteSheet);
      swift_unknownObjectRelease();
    }
    else
    {
      v2 = 0;
    }
    outlined destroy of WeakBox<_UIRemoteViewControllerContaining>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>, &lazy cache variable for type metadata for _UIRemoteSheetContaining);
  }
  return (uint64_t)v2;
}

uint64_t PlatformViewChild.init(view:environment:transaction:phase:position:size:transform:focusedValues:parentID:bridge:importer:links:coordinator:platformView:resetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int *a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18)
{
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v19 = *a10;
  v20 = *a13;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  *(_DWORD *)(a9 + 28) = a8;
  *(_DWORD *)(a9 + 32) = v19;
  *(_QWORD *)(a9 + 40) = a11;
  *(_QWORD *)(a9 + 48) = a12;
  *(_QWORD *)(a9 + 56) = v20;
  *(_QWORD *)(a9 + 64) = a13[1];
  v21 = (int *)type metadata accessor for PlatformViewChild(0, a17, a18, a4);
  v22 = a9 + v21[20];
  swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a14, v23);
  *(_QWORD *)(a9 + v21[21]) = a15;
  *(_DWORD *)(a9 + v21[22]) = a16;
  v24 = v21[23];
  type metadata accessor for PropertyList.Tracker();
  result = PropertyList.Tracker.__allocating_init()();
  *(_QWORD *)(a9 + v24) = result;
  return result;
}

uint64_t implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v10 = type metadata accessor for PlatformViewIdentifiedViews(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewIdentifiedViews<A>, v10);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t implicit closure #4 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type FocusableBoundsTransform and conformance FocusableBoundsTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t implicit closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  id v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187C05380;
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v8 = (id)AGGraphGetAttributeGraph();
    v9 = AGGraphRef.graphIdentity()();

    v10 = MEMORY[0x1E0DEBB98];
    v11 = MEMORY[0x1E0DEBBF8];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEBB98];
    *(_QWORD *)(v6 + 64) = v11;
    *(_QWORD *)(v6 + 32) = v9;
    v12 = _typeName(_:qualified:)();
    v14 = v13;
    *(_QWORD *)(v6 + 96) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v6 + 104) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v6 + 72) = v12;
    *(_QWORD *)(v6 + 80) = v14;
    v16 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PlatformViewChild(0, a2, a3, v15) + 84));
    *(_QWORD *)(v6 + 136) = v10;
    *(_QWORD *)(v6 + 144) = v11;
    *(_QWORD *)(v6 + 112) = v16;
    return v6;
  }
  return result;
}

Swift::Void __swiftcall PlatformViewChild.resetPlatformView()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t Value;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v2 = v1;
  v3 = v0;
  v4 = *(_QWORD *)(v0 + 16);
  v76 = *(_QWORD *)(v4 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v75 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v71 = *(_QWORD *)(v9 - 8);
  v72 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v79 = (void (*)(char *, uint64_t))((char *)&v67 - v11);
  v78 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v73 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v67 - v17;
  v84 = AssociatedTypeWitness;
  v82 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v80 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v81 = (char *)&v67 - v24;
  v74 = v7;
  v77 = v4;
  v25 = swift_getAssociatedTypeWitness();
  v26 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v67 - v29;
  v31 = *(_QWORD *)(v25 - 8);
  v32 = *(_QWORD *)(v31 + 64);
  MEMORY[0x1E0C80A78](v33, v34);
  v69 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35, v36);
  v39 = (char *)&v67 - v38;
  v40 = *(int *)(v3 + 80);
  v83 = v2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v30, v2 + v40, v26, v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v30, 1, v25) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  }
  else
  {
    v41 = v31;
    v42 = v39;
    v67 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v67(v39, v30, v25);
    v43 = v78;
    v68 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
    v68(v18, v83, v3);
    v44 = v79;
    PlatformViewChild.representedViewProvider.getter(v3, (uint64_t)v79);
    v45 = *(void (**)(char *, uint64_t))(v43 + 8);
    v45(v18, v3);
    v46 = v82;
    if ((*(unsigned int (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v82 + 48))(v44, 1, v84) == 1)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v25);
      (*(void (**)(_QWORD, uint64_t))(v71 + 8))(v44, v72);
    }
    else
    {
      v71 = *(_QWORD *)(v46 + 32);
      v47 = v81;
      v48 = v44;
      v49 = v84;
      ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v71)(v81, v48, v84);
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v80, v47, v49);
      v50 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      v79 = v45;
      v51 = v69;
      v50(v69, v42, v25);
      v52 = v25;
      v53 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v54 = (v70 + *(unsigned __int8 *)(v41 + 80) + v53) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      v72 = (uint64_t)v42;
      v55 = (v32 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
      v56 = swift_allocObject();
      v78 = v41;
      v57 = v77;
      v58 = v74;
      *(_QWORD *)(v56 + 16) = v77;
      *(_QWORD *)(v56 + 24) = v58;
      ((void (*)(unint64_t, char *, uint64_t))v71)(v56 + v53, v80, v84);
      v59 = v51;
      v60 = v52;
      v67((char *)(v56 + v54), v59, v52);
      *(_QWORD *)(v56 + v55) = v83;
      v61 = v73;
      ((void (*)(char *))v68)(v73);
      Value = AGGraphGetValue();
      v64 = v75;
      v63 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, Value, v57);
      v79(v61, v3);
      v65 = v81;
      v66 = v72;
      (*(void (**)(char *, uint64_t, void (*)(), uint64_t, uint64_t, uint64_t))(v58 + 56))(v81, v72, partial apply for closure #1 in PlatformViewChild.resetPlatformView(), v56, v57, v58);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v57);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v65, v84);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v66, v60);
      swift_release();
    }
  }
}

uint64_t closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  swift_getObjectType();
  return ViewRendererHost.performExternalUpdate(_:)();
}

uint64_t static PlatformViewChild.scrapeContent(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  AGGraphGetAttributeInfo();
  v7 = v6;
  result = type metadata accessor for PlatformViewChild(0, a1, a2, v8);
  v10 = *(void **)(v7 + *(int *)(result + 84));
  if (v10)
  {
    *(_QWORD *)(swift_allocObject() + 16) = v10;
    v11 = v10;
    result = ScrapeableContent.Item.init(_:ids:_:position:size:transform:)();
    v12 = v17;
    v13 = v18;
    *(_OWORD *)a3 = v14;
    *(_OWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 32) = v16;
  }
  else
  {
    v12 = 0uLL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)(a3 + 32) = 1;
    v13 = 0uLL;
  }
  *(_OWORD *)(a3 + 40) = v12;
  *(_OWORD *)(a3 + 56) = v13;
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PlatformViewChild<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ViewLeafView(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance PlatformViewChild<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return static PlatformViewChild.scrapeContent(from:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvalidatableLeafLayoutComputer<A>()
{
  return 0xD00000000000001FLL;
}

double *PlatformViewIdentifiedViews.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double *result;
  uint64_t Value;
  uint64_t v13;

  v6 = type metadata accessor for ViewLeafView(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v13 - v9;
  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, Value, v6);
    AGGraphClearUpdate();
    closure #1 in PlatformViewIdentifiedViews.value.getter((uint64_t)v10, a2, a3);
    AGGraphSetUpdate();
    return (double *)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t closure #1 in PlatformViewIdentifiedViews.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v13 - v8;
  v11 = type metadata accessor for ViewLeafView(0, a2, a3, v10);
  PlatformViewHost.updateHostedViewBounds()();
  ViewLeafView.representedViewProvider.getter(v11, (uint64_t)v9);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 88))(v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

double protocol witness for static Rule.initialValue.getter in conformance PlatformViewIdentifiedViews<A>@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 160) = -1;
  return result;
}

double *protocol witness for Rule.value.getter in conformance PlatformViewIdentifiedViews<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return PlatformViewIdentifiedViews.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t (*ViewResponderFilter.preferredFocusableView.getter(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (*(_DWORD *)(v1 + 36) == *MEMORY[0x1E0CFED28])
    return (uint64_t (*)())1;
  type metadata accessor for WeakBox<UIView>(255, (unint64_t *)&lazy cache variable for type metadata for UIView?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  if (!*Value)
    return 0;
  v8 = Value[1];
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v5;
  v9[3] = v4;
  v9[4] = v7;
  v9[5] = v8;
  swift_retain();
  return partial apply for thunk for @callee_guaranteed () -> (@out TaskActionsContainer<A, B>);
}

uint64_t PlatformArchivedDisplayList.value.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  DisplayList.Version.init(forUpdate:)();
  v2 = swift_allocObject();
  v4 = type metadata accessor for PlatformArchivedDisplayList.Factory(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v3);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformArchivedDisplayList<A>.Factory, v4);
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  AGGraphGetValue();
  v5 = swift_retain();
  MEMORY[0x18D75BE3C](v5);
  DisplayList.Item.init(_:frame:identity:version:)();
  outlined copy of DisplayList.Item.Value(v7, v8);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v7, v8);
}

void protocol witness for PlatformViewFactory.makePlatformView() in conformance PlatformArchivedDisplayList<A>.Factory()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for PlatformViewFactory.updatePlatformView(_:) in conformance PlatformArchivedDisplayList<A>.Factory()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id ViewLeafView.updatePlatformView(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  swift_unknownObjectRelease();
  v5 = *(void **)(v2 + *(int *)(a2 + 36));
  *a1 = v5;
  return v5;
}

uint64_t ViewLeafView.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;

  v6[1] = *(_OWORD *)(a3 + 16);
  v7 = a2;
  v8 = a1;
  v9 = a4;
  v10 = a5;
  return MEMORY[0x18D75B938](partial apply for closure #1 in ViewLeafView.renderPlatformView(in:size:renderer:), v6);
}

void ViewLeafView.unifiedLayoutSize(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  double width;
  double height;
  CGSize v11;
  unint64_t v12;
  unint64_t v13;
  CGSize v14;
  double v15;
  double v16;
  char v17;
  _BOOL8 v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  *(_QWORD *)&v21 = *a1;
  BYTE8(v21) = v4;
  v22 = v5;
  v23 = v6;
  _ProposedSize.width.getter();
  if ((v7 & 1) != 0
    || (*(_QWORD *)&v21 = v3, BYTE8(v21) = v4, v22 = v5, v23 = v6, _ProposedSize.height.getter(), (v8 & 1) != 0))
  {
    ViewLeafView.layoutTraits()(a2, &v21);
    _LayoutTraits.idealSize.getter();
    v14 = _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)__PAIR128__(v13, v12));
    height = v14.height;
    width = v14.width;
  }
  else
  {
    *(_QWORD *)&v21 = v3;
    BYTE8(v21) = v4;
    v22 = v5;
    v23 = v6;
    v11 = _ProposedSize.fixingUnspecifiedDimensions()();
    height = v11.height;
    width = v11.width;
  }
  if (width <= 50000.0)
    v15 = width;
  else
    v15 = 50000.0;
  *(_QWORD *)&v21 = v3;
  BYTE8(v21) = v4;
  if (height <= 50000.0)
    v16 = height;
  else
    v16 = 50000.0;
  v22 = v5;
  v23 = v6;
  _ProposedSize.width.getter();
  *(_QWORD *)&v21 = v3;
  BYTE8(v21) = v4;
  v18 = v15 != 0.0 && (v17 & 1) == 0;
  v22 = v5;
  v23 = v6;
  _ProposedSize.height.getter();
  v20 = 2;
  if (v19 & 1 | (v16 == 0.0))
    v20 = 0;
  PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(v20 | v18, v15, v16);
}

uint64_t protocol witness for PlatformViewFactory.makePlatformView() in conformance ViewLeafView<A>(uint64_t a1)
{
  ShadowSectionCollection.count.getter(a1);
  return swift_unknownObjectRetain();
}

double protocol witness for static View._makeView(view:inputs:) in conformance ViewLeafView<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static ViewLeafView._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewLeafView<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewLeafView<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewLeafView<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewLeafView<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ViewLeafView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewLeafView<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t PlatformViewHost.focusView.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v5;

  v0 = (void *)PlatformViewHost.representedView.getter();
  swift_getObjectType();
  v1 = swift_conformsToProtocol2();
  if (v1)
    v2 = v1;
  else
    v2 = 0;
  if (v1)
    v3 = v0;
  else
    v3 = 0;
  if (v3)
  {
    ObjectType = swift_getObjectType();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);

    return v5;
  }
  else
  {

    return PlatformViewHost.representedView.getter();
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PlatformViewHost<A>.UnarySubtreeSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance RemoteSheetContainerViewGraphFeature()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<RemoteSheetContainerVCKey>, (uint64_t)&type metadata for RemoteSheetContainerVCKey, (uint64_t)&protocol witness table for RemoteSheetContainerVCKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<RemoteSheetContainerVCKey> and conformance _AnyPreferenceKey<A>();
  return PreferenceKeys.add(_:)();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance RemoteSheetContainerViewGraphFeature()
{
  uint64_t *v0;
  uint64_t result;

  _ViewOutputs.subscript.getter();
  result = AGCreateWeakAttribute();
  *v0 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RemoteSheetContainerVCKey(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  _BYTE v6[16];
  _QWORD v7[2];

  v4 = outlined init with take of Binding<SearchFieldState>(a1, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v6[8] == 255)
  {
    a2(v7, v4);
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  }
  else
  {
    outlined init with copy of RemoteSheetContainerVCKey.Storage((uint64_t)v6, (uint64_t)v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF58]);
  }
  return outlined init with take of Binding<SearchFieldState>((uint64_t)v7, a1, (uint64_t)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

uint64_t RemoteSheetContainerVCWriter.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned __int8 v36;

  v4 = v3;
  v33 = a3;
  v6 = type metadata accessor for ViewLeafView(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v32 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v32 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v32 - v22;
  v32 = v4;
  ViewResponderFilter.view.getter(a1, v24, (uint64_t)v10);
  ViewLeafView.representedViewProvider.getter(v6, (uint64_t)v23);
  v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26 = v33;
  v25(v10, v6);
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = -1;
  v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v27(v19, v23, AssociatedTypeWitness);
  type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UIRemoteSheetContaining);
  if (swift_dynamicCast())
  {
    swift_unknownObjectWeakInit();
    v28 = swift_unknownObjectWeakAssign();
    outlined init with take of Binding<SearchFieldState>(v28, (uint64_t)&v35, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteSheetContaining, (uint64_t)&protocolRef__UIRemoteSheetContaining, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    swift_unknownObjectRelease();
    outlined destroy of AccessibilityTableContext?(v26, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v36 = 0;
LABEL_5:
    outlined init with take of Binding<SearchFieldState>((uint64_t)&v35, v26, (uint64_t)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    goto LABEL_6;
  }
  v27(v15, v23, AssociatedTypeWitness);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_unknownObjectWeakInit();
    v29 = swift_unknownObjectWeakAssign();
    outlined init with take of Binding<SearchFieldState>(v29, (uint64_t)&v35, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining, (uint64_t)&protocolRef__UIRemoteViewControllerContaining, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    swift_unknownObjectRelease();
    outlined destroy of AccessibilityTableContext?(v26, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    v36 = 1;
    goto LABEL_5;
  }
LABEL_6:
  outlined init with copy of SwiftUIAnySortComparator?(v26, (uint64_t)&v35, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  v30 = v36;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v35, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v30 != 255 && swift_weakLoadStrong())
  {
    v35 = AGCreateWeakAttribute();
    v34 = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v23, AssociatedTypeWitness);
}

void protocol witness for static Rule.initialValue.getter in conformance RemoteSheetContainerVCWriter<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -2;
}

uint64_t protocol witness for GraphMutation.apply() in conformance EnableTransparentBackgroundMutation()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    return AGGraphSetValue();
  return result;
}

ValueMetadata *type metadata accessor for PlatformViewLayoutInvalidator()
{
  return &type metadata for PlatformViewLayoutInvalidator;
}

void protocol witness for View.body.getter in conformance ListRepresentable<A, B>()
{
  specialized PrimitiveView.body.getter();
}

double protocol witness for static View._makeView(view:inputs:) in conformance PlatformViewRepresentableAdaptor<A>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, a3);
  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v8, a4);
}

void protocol witness for View.body.getter in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, a1);
  specialized PrimitiveView.body.getter();
}

void specialized View.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_187A5AC70()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

void partial apply for closure #1 in PlatformViewChild.resetPlatformView()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v2 + 64))(v0 + v4, v0 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v1, v2);
  v8 = type metadata accessor for PlatformViewChild(0, v1, v2, v7);
  PlatformViewChild.reset()(v8);
}

uint64_t sub_187A5AE40()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t *v0;

  return implicit closure #1 in PlatformViewChild.updateValue()(v0[4], v0[2], v0[3]);
}

uint64_t partial apply for closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return closure #1 in PlatformViewChild.updateValue()(v4[4], v4[2], v4[3], a4);
}

uint64_t partial apply for closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[8];
  AGGraphClearUpdate();
  closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v3, v4, v5, v6, v7, v1, v2);
  return AGGraphSetUpdate();
}

uint64_t _s7SwiftUI17PlatformViewChildV11updateValueyyFyyXEfU_yyXEfU3_yyXEfU_7performL_4workyyyXE_tAA0cD13RepresentableRzlFyyXEfU_TA_0()
{
  swift_getObjectType();
  return ViewRendererHost.performExternalUpdate(_:)();
}

void type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for _UISceneBSActionHandler(255, a3);
    v4 = type metadata accessor for WeakBox();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined destroy of WeakBox<_UIRemoteViewControllerContaining>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t partial apply for implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(v4[4], v4[2], v4[3], a4);
}

uint64_t type metadata accessor for RemoteSheetContainerVCWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RemoteSheetContainerVCWriter);
}

void type metadata accessor for Attribute<RemoteSheetContainerVCKey.Storage?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<RemoteSheetContainerVCKey.Storage?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<RemoteSheetContainerVCKey.Storage?>);
  }
}

uint64_t type metadata accessor for PlatformArchivedDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformArchivedDisplayList);
}

ValueMetadata *type metadata accessor for RemoteSheetContainerViewGraphFeature()
{
  return &type metadata for RemoteSheetContainerViewGraphFeature;
}

ValueMetadata *type metadata accessor for EnableTransparentBackgroundMutation()
{
  return &type metadata for EnableTransparentBackgroundMutation;
}

uint64_t type metadata accessor for PlatformArchivedDisplayList.Factory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformArchivedDisplayList.Factory);
}

_QWORD *initializeWithCopy for RemoteSheetContainerVCWriter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

_QWORD *initializeWithTake for RemoteSheetContainerVCWriter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

ValueMetadata *type metadata accessor for RemoteSheetContainerVCKey.Storage()
{
  return &type metadata for RemoteSheetContainerVCKey.Storage;
}

uint64_t assignWithCopy for ViewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for ViewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for RemoteSheetContainerVCKey()
{
  return &type metadata for RemoteSheetContainerVCKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformViewChild(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  void *v37;
  const void *v38;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);
  _QWORD *v40;
  void **v41;
  void *v42;
  _DWORD *v43;
  _DWORD *v44;
  id v45;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((((v8 + 7 + ((v7 + 72) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v14 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v15 = *v16;
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v17 = *v18;
    v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v19 = *v20;
    v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFCLL);
    v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v23 = *v24;
    v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFCLL);
    v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v25 = *v26;
    v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v27 = *v28;
    v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFCLL);
    v30 = (_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v29 = *v30;
    v31 = (_QWORD *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v32;
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = (_OWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    v36 = (_OWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v36;
    v37 = (void *)(((unint64_t)v35 + v7 + 16) & ~v7);
    v38 = (const void *)(((unint64_t)v36 + v7 + 16) & ~v7);
    v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v39(v38, 1, v14))
    {
      memcpy(v37, v38, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v37, v38, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v37, 0, 1, v14);
    }
    v40 = (_QWORD *)(((unint64_t)v37 + v9) & 0xFFFFFFFFFFFFFFF8);
    v41 = (void **)(((unint64_t)v38 + v9) & 0xFFFFFFFFFFFFFFF8);
    v42 = *v41;
    *v40 = *v41;
    v43 = (_DWORD *)(((unint64_t)v40 + 11) & 0xFFFFFFFFFFFFF8);
    v44 = (_DWORD *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v43 = *v44;
    *(_QWORD *)(((unint64_t)v43 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v44 + 11) & 0xFFFFFFFFFFFFF8);
    v45 = v42;
  }
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for PlatformViewChild(_DWORD *a1, int *a2)
{
  unint64_t v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  id v38;

  v4 = *a2;
  v3 = (unint64_t)a2 + 7;
  *a1 = v4;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v14 = *v15;
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = *(_DWORD *)v19;
  v19 += 11;
  *(_DWORD *)v18 = v20;
  v18 += 11;
  v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v22 &= 0xFFFFFFFFFFFFFFF8;
  v21 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v22 = *(_QWORD *)v21;
  swift_retain();
  swift_release();
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
  *(_DWORD *)(v23 + 12) = *(_DWORD *)(v24 + 12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (void *)((v27 + 16 + v23) & ~v27);
  v29 = (void *)((v27 + 16 + v24) & ~v27);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  LODWORD(v24) = v30(v28, 1, AssociatedTypeWitness);
  v31 = v30(v29, 1, AssociatedTypeWitness);
  if ((_DWORD)v24)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v28, v29, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v28, v29, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v28, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v26 + 84))
    v32 = *(_QWORD *)(v26 + 64);
  else
    v32 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v28, v29, v32);
LABEL_10:
  if (*(_DWORD *)(v26 + 84))
    v33 = *(_QWORD *)(v26 + 64);
  else
    v33 = *(_QWORD *)(v26 + 64) + 1;
  v34 = ((unint64_t)v28 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = ((unint64_t)v29 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(void **)v35;
  v35 += 11;
  v37 = *(void **)v34;
  *(_QWORD *)v34 = v36;
  v34 += 11;
  v38 = v36;

  *(_DWORD *)(v34 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v35 & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(((v34 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v35 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *initializeWithTake for PlatformViewChild(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  int v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _DWORD *v36;
  _DWORD *v37;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (void *)(((unint64_t)v23 + v27 + 16) & ~v27);
  v29 = (const void *)(((unint64_t)v24 + v27 + 16) & ~v27);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v29, 1, AssociatedTypeWitness))
  {
    v30 = *(_DWORD *)(v26 + 84);
    v31 = *(_QWORD *)(v26 + 64);
    if (v30)
      v32 = v31;
    else
      v32 = v31 + 1;
    memcpy(v28, v29, v32);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v28, v29, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, AssociatedTypeWitness);
    v30 = *(_DWORD *)(v26 + 84);
    v31 = *(_QWORD *)(v26 + 64);
  }
  if (v30)
    v33 = v31;
  else
    v33 = v31 + 1;
  v34 = (_QWORD *)(((unint64_t)v28 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)(((unint64_t)v29 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = (_DWORD *)(((unint64_t)v34 + 11) & 0xFFFFFFFFFFFFF8);
  v37 = (_DWORD *)(((unint64_t)v35 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  *(_QWORD *)(((unint64_t)v36 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v37 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for PlatformViewChild(_DWORD *a1, int *a2)
{
  unint64_t v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;

  v4 = *a2;
  v3 = (unint64_t)a2 + 7;
  *a1 = v4;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFCLL);
  v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v14 = *v15;
  v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL;
  v20 = *(_DWORD *)v19;
  v19 += 11;
  *v18 = v20;
  v21 = (_QWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  v22 = (v19 & 0xFFFFFFFFFFFFF8) + 15;
  *v21 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 &= 0xFFFFFFFFFFFFF8uLL;
  *v23 = *(_QWORD *)v22;
  swift_release();
  v24 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_DWORD *)(v24 + 8) = *(_DWORD *)(v25 + 8);
  *(_DWORD *)(v24 + 12) = *(_DWORD *)(v25 + 12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (void *)((v28 + 16 + v24) & ~v28);
  v30 = (void *)((v28 + 16 + v25) & ~v28);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v25) = v31(v29, 1, AssociatedTypeWitness);
  v32 = v31(v30, 1, AssociatedTypeWitness);
  if ((_DWORD)v25)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v29, v30, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v29, v30, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v29, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v27 + 84))
    v33 = *(_QWORD *)(v27 + 64);
  else
    v33 = *(_QWORD *)(v27 + 64) + 1;
  memcpy(v29, v30, v33);
LABEL_10:
  if (*(_DWORD *)(v27 + 84))
    v34 = *(_QWORD *)(v27 + 64);
  else
    v34 = *(_QWORD *)(v27 + 64) + 1;
  v35 = ((unint64_t)v29 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((unint64_t)v30 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_QWORD *)v36;
  v36 += 11;
  v38 = *(void **)v35;
  *(_QWORD *)v35 = v37;
  v35 += 11;

  *(_DWORD *)(v35 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v36 & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(((v35 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v36 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewChild(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 72) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X16 }
  }
  v14 = (uint64_t *)((((((((((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 11) & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0x80000000) != 0)
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                   + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                 + v9
                                                                 + 16) & ~v9);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
  else
  {
    v15 = *v14;
    if ((unint64_t)*v14 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    return (v15 + 1);
  }
}

void storeEnumTagSinglePayload for PlatformViewChild(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (v10 < a3)
  {
    if ((((((((_DWORD)v12 + (((_DWORD)v11 + 72) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = a3 - v10 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((_DWORD)v12 + (((_DWORD)v11 + 72) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((v12 + ((v11 + 72) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_187A5BE34@<X0>(size_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t result;

  *(_BYTE *)(v6 + v7) = 0;
  if (v5)
  {
    v8 = (_QWORD *)((((((((((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 11) & 0xFFFFFFFFFFFFFFF8);
    if ((a2 & 0x80000000) != 0)
    {
      if (a2 >= v5)
      {
        return (*(uint64_t (**)(unint64_t, _QWORD))(v2 + 56))(((((((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v3 + 16) & v4, v5 + 1);
      }
      else if ((_DWORD)a1)
      {
        if (a1 <= 3)
          v10 = a1;
        else
          v10 = 4;
        bzero((void *)(((((((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v3 + 16) & v4), a1);
        __asm { BR              X10 }
      }
    }
    else
    {
      if ((v5 & 0x80000000) != 0)
        v9 = v5 ^ 0x80000000;
      else
        v9 = v5 - 1;
      *v8 = v9;
    }
  }
  return result;
}

void sub_187A5BF78()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_187A5BF80()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_187A5BF90()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t initializeWithTake for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewLeafView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v7 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  if (a2 <= v12)
    goto LABEL_27;
  v15 = ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14) + *(_QWORD *)(v9 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_27:
      if ((_DWORD)v7 == v12)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v22 = (unint64_t *)((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)v22 + v14 + 8) & ~v14, v10, AssociatedTypeWitness);
      v23 = *v22;
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_27;
LABEL_18:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v21 = v15;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v12 + v20 + 1;
}

void storeEnumTagSinglePayload for ViewLeafView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = ((*(unsigned __int8 *)(v9 + 80) + ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v11)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformViewRepresentableContext(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 33) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    v12 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    v13 = a2[3];
    v14 = *((_BYTE *)a2 + 32);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v13;
    *(_BYTE *)(a1 + 32) = v14;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))((a1 + v6 + 33) & ~v6, ((unint64_t)a2 + v6 + 33) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t assignWithCopy for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewRepresentableContext(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((v7 + 33) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_7;
  v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10)
      goto LABEL_15;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_24;
LABEL_7:
      v10 = *((unsigned __int8 *)a1 + v8);
      if (!*((_BYTE *)a1 + v8))
        goto LABEL_24;
LABEL_15:
      v13 = (v10 - 1) << v9;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = v8;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      v16 = v6 + v13;
      return (v16 + 1);
    }
    v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(_WORD *)((char *)a1 + v8))
      goto LABEL_15;
  }
LABEL_24:
  if (v5 > 0x7FFFFFFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 33) & ~v7);
  v15 = *a1;
  if (*a1 >= 0xFFFFFFFFuLL)
    LODWORD(v15) = -1;
  v16 = v15 - 1;
  if (v16 < 0)
    v16 = -1;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for PlatformViewRepresentableContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFEu)
    v7 = 2147483646;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void base witness table accessor for AnyViewFactory in ViewLeafView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for View in ViewLeafView<A>()
{
  return &protocol witness table for ViewLeafView<A>;
}

void base witness table accessor for _AttributeBody in PlatformArchivedDisplayList<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in RemoteSheetContainerVCWriter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for AnyViewFactory in PlatformArchivedDisplayList<A>.Factory()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in PlatformViewChild.destroy()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[3] + 64))(v0[4], v0[5]);
}

uint64_t outlined init with copy of RemoteSheetContainerVCKey.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unsigned int v4;
  BOOL v5;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  v5 = v4 == 1;
  result = a3(a2, a1);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t specialized EnableTransparentBackgroundMutation.combine<A>(with:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return swift_dynamicCast();
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<RemoteSheetContainerVCKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<RemoteSheetContainerVCKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<RemoteSheetContainerVCKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<RemoteSheetContainerVCKey>, (uint64_t)&type metadata for RemoteSheetContainerVCKey, (uint64_t)&protocol witness table for RemoteSheetContainerVCKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<RemoteSheetContainerVCKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t sub_187A5CDF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187A5CE18()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_187A5CE3C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewLeafView.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for ViewLeafView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return DisplayList.GraphicsRenderer.renderPlatformView(_:in:size:viewType:)();
}

uint64_t storeEnumTagSinglePayload for PlatformViewDisplayList(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 34) = v3;
  return result;
}

void *type metadata accessor for LeafLayoutEnvironment()
{
  return &unk_1E1AD7AA0;
}

uint64_t sub_187A5CF0C()
{
  return lazy protocol witness table accessor for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<UIView> and conformance AnyIterator<A>, &lazy cache variable for type metadata for AnyIterator<UIView>, MEMORY[0x1E0DEC1C0], MEMORY[0x1E0DEC1E8]);
}

uint64_t outlined assign with take of PlatformViewLayoutInvalidator?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?, (uint64_t)&type metadata for PlatformViewLayoutInvalidator, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformViewLayoutEngine(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(unint64_t, unint64_t, uint64_t);
  id v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v38;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 & 0xF8 | v10;
  v12 = v11 | 7;
  v13 = ~v12;
  v14 = *(_QWORD *)(v6 + 64) + 7;
  v15 = v10 + 8;
  v16 = ((v10 + 8 + (v14 & 0xFFFFFFFFFFFFFFF8)) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v11 > 7
    || ((*(_DWORD *)(v9 + 80) | v7) & 0x100000) != 0
    || ((((v16 + ((v12 + 161) & ~v12) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v19 + ((v12 + 16) & v13);
    swift_retain();
  }
  else
  {
    v20 = ~v10;
    v21 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v21;
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    v22 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v22;
    v23 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v23;
    v24 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    v25 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v25;
    v26 = (a1 + 168) & v13;
    v27 = (unint64_t)(a2 + 21) & v13;
    v38 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v26, v27, v5);
    v28 = (_QWORD *)((v14 + v26) & 0xFFFFFFFFFFFFFFF8);
    v29 = (void **)((v14 + v27) & 0xFFFFFFFFFFFFFFF8);
    v30 = *v29;
    *v28 = *v29;
    v31 = ((unint64_t)v28 + v15) & v20;
    v32 = ((unint64_t)v29 + v15) & v20;
    v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v34 = v30;
    v33(v31, v32, v38);
    v35 = (_DWORD *)(((v26 | 3) + v16) & 0xFFFFFFFFFFFFFCLL);
    v36 = (_DWORD *)(((v27 | 3) + v16) & 0xFFFFFFFFFFFFFCLL);
    *v35 = *v36;
    *(_DWORD *)(((unint64_t)v35 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v36 + 7) & 0xFFFFFFFFFFFFFCLL);
  }
  return a1;
}

uint64_t assignWithCopy for PlatformViewLayoutEngine(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  void *v26;
  void *v27;
  id v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)a1 = v5;
  v8 = *(__int128 *)((char *)a2 + 56);
  v9 = *(__int128 *)((char *)a2 + 72);
  v10 = *(__int128 *)((char *)a2 + 88);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  v11 = a2[7];
  v12 = a2[8];
  v13 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 112) = v11;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v16 | v19 | 7;
  v21 = (v20 + 161 + a1) & ~v20;
  v22 = ((unint64_t)a2 + v20 + 161) & ~v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(v21, v22, v14);
  v23 = *(_QWORD *)(v15 + 64) + 7;
  v24 = (void **)((v23 + v21) & 0xFFFFFFFFFFFFFFF8);
  v25 = (void **)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = *v24;
  *v24 = *v25;
  v28 = v26;

  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 24))(((unint64_t)v24 + v19 + 8) & ~v19, ((unint64_t)v25 + v19 + 8) & ~v19, AssociatedTypeWitness);
  v29 = *(_QWORD *)(v18 + 64) + ((v19 + 8 + (v23 & 0xFFFFFFFFFFFFFFF8)) & ~v19) + 3;
  v30 = (_DWORD *)((v29 + v21) & 0xFFFFFFFFFFFFFFFCLL);
  v31 = (_DWORD *)((v29 + v22) & 0xFFFFFFFFFFFFFFFCLL);
  *v30 = *v31;
  *(_DWORD *)(((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t initializeWithTake for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;

  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 | v15 | 7;
  v17 = (v16 + 161 + a1) & ~v16;
  v18 = (v16 + 161 + a2) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v17, v18, v10);
  v19 = *(_QWORD *)(v11 + 64) + 7;
  v20 = (_QWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v20 + v15 + 8) & ~v15, ((unint64_t)v21 + v15 + 8) & ~v15, AssociatedTypeWitness);
  v22 = ((v15 + 8 + (v19 & 0xFFFFFFFFFFFFFFF8)) & ~v15) + *(_QWORD *)(v14 + 64) + 3;
  v23 = (_DWORD *)((v22 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  v24 = (_DWORD *)((v22 + v18) & 0xFFFFFFFFFFFFFFFCLL);
  *v23 = *v24;
  *(_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 112) = v6;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 | v14 | 7;
  v16 = (v15 + 161 + a1) & ~v15;
  v17 = (v15 + 161 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v16, v17, v9);
  v18 = *(_QWORD *)(v10 + 64) + 7;
  v19 = (void **)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (void **)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v19;
  *v19 = *v20;

  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 40))(((unint64_t)v19 + v14 + 8) & ~v14, ((unint64_t)v20 + v14 + 8) & ~v14, AssociatedTypeWitness);
  v22 = *(_QWORD *)(v13 + 64) + ((v14 + 8 + (v18 & 0xFFFFFFFFFFFFFFF8)) & ~v14) + 3;
  v23 = (_DWORD *)((v22 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  v24 = (_DWORD *)((v22 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  *v23 = *v24;
  *(_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewLayoutEngine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v7 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = AssociatedTypeWitness;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = *(_DWORD *)(v6 + 80) & 0xF8 | v14 | 7;
  v16 = *(_QWORD *)(v6 + 64) + 7;
  v17 = v14 + 8;
  if (v12 < a2)
  {
    if (((((((*(_QWORD *)(v9 + 64) + ((v17 + (v16 & 0xFFFFFFFFFFFFFFF8)) & ~v14) + ((v15 + 161) & ~v15) + 3) & 0xFFFFFFFFFFFFFFFCLL)
           + 7) & 0xFFFFFFFFFFFFFFFCLL)
         + 4) & 0xFFFFFFFC) != 0)
      v18 = 2;
    else
      v18 = a2 - v12 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X3 }
  }
  v22 = (a1 + v15 + 161) & ~v15;
  if ((_DWORD)v7 == v12)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v22, v7, v5);
  v23 = (uint64_t *)((v16 + v22) & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)v23 + v17) & ~v14, v10, v13);
  v24 = *v23;
  if ((unint64_t)*v23 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  return (v24 + 1);
}

void storeEnumTagSinglePayload for PlatformViewLayoutEngine(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v7 = *(_DWORD **)(*(_QWORD *)(a4 + 16) - 8);
  v8 = v7[21];
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = v7[20] & 0xF8 | v12 | 7;
  if (v11 >= a3)
  {
    v16 = 0u;
    if (a2 <= v11)
      goto LABEL_20;
  }
  else
  {
    if (((((*(_DWORD *)(v9 + 64)
           + (((_DWORD)v12 + 8 + ((v7[16] + 7) & 0xFFFFFFF8)) & ~(_DWORD)v12)
           + (((_DWORD)v13 + 161) & ~(_DWORD)v13)
           + 3) & 0xFFFFFFFC)
         + 7) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v14 = a3 - v11 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (a2 <= v11)
LABEL_20:
      __asm { BR              X0 }
  }
  if (((((*(_DWORD *)(v9 + 64)
         + (((_DWORD)v12 + 8 + ((v7[16] + 7) & 0xFFFFFFF8)) & ~(_DWORD)v12)
         + (((_DWORD)v13 + 161) & ~(_DWORD)v13)
         + 3) & 0xFFFFFFFC)
       + 7) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v17 = ~v11 + a2;
    bzero(a1, ((((*(_QWORD *)(v9 + 64)+ ((v12 + 8 + ((*((_QWORD *)v7 + 8) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12)+ ((v13 + 161) & ~v13)+ 3) & 0xFFFFFFFFFFFFFFFCLL)+ 7) & 0xFFFFFFFFFFFFFFFCLL)+ 4);
    *a1 = v17;
  }
  __asm { BR              X10 }
}

void sub_187A5D924()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x187A5D9C0);
}

void sub_187A5D92C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187A5D934);
  JUMPOUT(0x187A5D9C0);
}

void sub_187A5D974()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x187A5D9C0);
}

void sub_187A5D97C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x187A5D9C0);
}

void sub_187A5D984()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (v2)
  {
    if (v4 != v1)
    {
      if ((v0 & 0x80000000) == 0)
      {
        if ((v2 & 0x80000000) == 0)
          JUMPOUT(0x187A5D9BCLL);
        JUMPOUT(0x187A5D9B8);
      }
      JUMPOUT(0x187A5D990);
    }
    JUMPOUT(0x187A5D9A0);
  }
  JUMPOUT(0x187A5D9C0);
}

double partial apply for closure #1 in PlatformViewLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 40);
  v8 = *(_BYTE *)(v4 + 48);
  v9 = *(_QWORD *)(v4 + 56);
  v10 = *(_BYTE *)(v4 + 64);
  v12 = *(_DWORD *)(v4 + 68);
  v11 = *(_DWORD *)(v4 + 72);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v13 = type metadata accessor for ViewLeafView(0, v5, v6, a4);
  return ViewLeafView.sizeThatFits(in:environment:context:)(&v15, v12, v11, v13);
}

uint64_t partial apply for closure #1 in ViewLeafView.sizeThatFits(in:environment:context:)()
{
  uint64_t v0;

  return closure #1 in ViewLeafView.sizeThatFits(in:environment:context:)(*(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40), *(unsigned int *)(v0 + 44), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_QWORD *)(v0 + 64), *(unsigned __int8 *)(v0 + 72), *(uint64_t **)(v0 + 80), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t key path getter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 + a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ());
  a4[1] = (uint64_t (*)())v8;
  return swift_retain();
}

uint64_t key path setter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>(uint64_t *a1, uint64_t (**a2)(), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = a4 + a3;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ());
  a2[1] = (uint64_t (*)())v8;
  return result;
}

uint64_t ControlWidgetTemplate.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v20 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v19 - v10;
  v12 = type metadata accessor for _PreferenceWritingModifier();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, a2, AssociatedTypeWitness, v15);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4);
  _PreferenceWritingModifier.init(key:value:)();
  ControlWidgetTemplate.modifier<A>(_:)((uint64_t)v17, v20, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v12);
}

uint64_t ControlWidgetTemplate.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a5);
  swift_retain();
  v9[0] = _PreferenceTransformModifier.init(key:transform:)();
  v9[1] = v6;
  v7 = type metadata accessor for _PreferenceTransformModifier();
  ControlWidgetTemplate.modifier<A>(_:)((uint64_t)v9, a4, v7);
  return swift_release();
}

uint64_t static _PreferenceWritingModifier._makeControlWidgetTemplate(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v6 = a1[5];
  v5 = a1[6];
  v7 = *((_DWORD *)a1 + 14);
  v22 = *a1;
  v23 = v3;
  v25 = *(_OWORD *)(a1 + 3);
  v24 = v4;
  v26 = v6;
  v27 = v5;
  v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  v13 = v22;
  v14 = v23;
  v15 = v4;
  v16 = v25;
  v17 = v6;
  v18 = v5;
  v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v5;
  v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v10 = v21;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;

  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  v4 = v6;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t OffsetAttribute2;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  v5 = _GraphValue.value.getter();
  v18 = a2;
  v19 = a3;
  KeyPath = swift_getKeyPath();
  v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v8 & 1) != 0)
  {
    v16 = v5;
    v17 = KeyPath;
    MEMORY[0x1E0C80A78](v7, v8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v13[2] = swift_getFunctionTypeMetadata();
    v14 = type metadata accessor for Focus();
    v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v14);
    v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v13, v14, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t protocol witness for static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2);
}

uint64_t sub_187A5E21C(_QWORD *a1)
{
  return get_witness_table_7SwiftUI21ControlWidgetTemplateRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CE60E0], (uint64_t)&protocol witness table for _PreferenceWritingModifier<A>);
}

uint64_t sub_187A5E230(_QWORD *a1)
{
  return get_witness_table_7SwiftUI21ControlWidgetTemplateRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CE63C0], (uint64_t)&protocol witness table for _PreferenceTransformModifier<A>);
}

uint64_t get_witness_table_7SwiftUI21ControlWidgetTemplateRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  a2(255, a1[1], a1[3]);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t sub_187A5E2B4()
{
  return 16;
}

__n128 sub_187A5E2C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A5E2CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t View.zoomPresentationTransitionSource<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.presentationSource<A>(id:configuration:)(a1, (uint64_t)closure #1 in View.presentationSource<A>(id:), 0, a2, a3, a4, a5);
}

uint64_t View.presentationSource<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.presentationSource<A>(id:configuration:)(a1, (uint64_t)closure #1 in View.presentationSource<A>(id:), 0, a2, a3, a4, a5);
}

uint64_t closure #1 in View.presentationSource<A>(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  *(_BYTE *)(a2 + 48) = v4;
  swift_retain();
  return swift_retain();
}

uint64_t View.presentationSource<A>(id:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v13 = a1;
  if (one-time initialization token for _sharedNamespaceID != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, static _PresentationTransitionCompatibility._sharedNamespaceID);
  v16[2] = a2;
  v16[3] = a3;
  return View.matchedTransitionSource<A, B>(id:in:configuration:)(v13, v14, (uint64_t)partial apply for closure #1 in View.presentationSource<A>(id:configuration:), (uint64_t)v16, a4, a5, (uint64_t)&unk_1E1AD1DD8, a6, a7, (uint64_t)&protocol witness table for BridgedConfiguration);
}

uint64_t View.presentationSource<A>(id:cornerRadius:style:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  char v7;
  _QWORD v9[3];
  char v10;

  v7 = *a2;
  *(double *)&v9[2] = a7;
  v10 = v7;
  return View.presentationSource<A>(id:configuration:)(a1, (uint64_t)partial apply for closure #1 in View.presentationSource<A>(id:cornerRadius:style:), (uint64_t)v9, a3, a4, a5, a6);
}

uint64_t closure #1 in View.presentationSource<A>(id:cornerRadius:style:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 32) = v4;
  *(double *)(a3 + 40) = a4;
  *(_BYTE *)(a3 + 48) = a2 & 1;
  swift_retain();
  return swift_retain();
}

uint64_t PresentationSourceConfiguration.cornerRadius(_:stye:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;

  v4 = *a1;
  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v5;
  *(double *)(a2 + 40) = a3;
  *(_BYTE *)(a2 + 48) = v4;
  swift_retain();
  return swift_retain();
}

double partial apply for closure #1 in View.presentationSource<A>(id:configuration:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void (*v3)(_OWORD *__return_ptr, _OWORD *);
  uint64_t v4;
  double result;
  char v6;
  __int128 v7;
  _OWORD v8[3];
  char v9;
  _OWORD v10[2];
  uint64_t v11;
  double v12;
  char v13;

  v3 = *(void (**)(_OWORD *__return_ptr, _OWORD *))(v1 + 16);
  memset(v8, 0, sizeof(v8));
  v9 = 1;
  v3(v10, v8);
  v4 = v11;
  result = v12;
  v6 = v13;
  v7 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v4;
  *(double *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 48) = v6;
  return result;
}

uint64_t partial apply for closure #1 in View.presentationSource<A>(id:cornerRadius:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in View.presentationSource<A>(id:cornerRadius:style:)(a1, *(_BYTE *)(v2 + 24), a2, *(double *)(v2 + 16));
}

uint64_t PresentationSourceConfiguration.shadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v7 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(v5 + 40);
  v9 = *(_BYTE *)(v5 + 48);
  *(_QWORD *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(_BYTE *)(a2 + 48) = v9;
  swift_retain();
  return swift_retain();
}

uint64_t PresentationSourceConfiguration.backgroundColor(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_BYTE *)(v2 + 48);
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a2 + 40) = v3;
  *(_BYTE *)(a2 + 48) = v4;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance BridgedConfiguration(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[5];
  v8 = *((_BYTE *)v1 + 48);
  *(_QWORD *)(a1 + 32) = v1[4];
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  if (v3)
  {
    swift_retain();
    result = swift_release();
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return result;
}

id UIView.findPresentationSourceView<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for _sharedNamespaceID != -1)
    swift_once();
  return UIView.findMatchedTransitionSource<A>(id:in:)(a1, static _PresentationTransitionCompatibility._sharedNamespaceID, a2, a3);
}

id UIView.findPresentationSourceView<A>(id:zoomingViewController:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for _sharedNamespaceID != -1)
    swift_once();
  return UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:)(a1, static _PresentationTransitionCompatibility._sharedNamespaceID, a2, a3, a4);
}

ValueMetadata *type metadata accessor for PresentationSourceConfiguration()
{
  return &type metadata for PresentationSourceConfiguration;
}

ValueMetadata *type metadata accessor for PresentationSourceConfiguration.Shadow()
{
  return &type metadata for PresentationSourceConfiguration.Shadow;
}

uint64_t initializeWithCopy for PresentationSourceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PresentationSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for PresentationSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationSourceConfiguration(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationSourceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void *type metadata accessor for BridgedConfiguration()
{
  return &unk_1E1AD1DD8;
}

uint64_t specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a1;
  v44 = a5;
  v7 = a3;
  v8 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v43 - v13;
  v15 = type metadata accessor for CommandGroupPlacementBox(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v43 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v43 - v26;
  if (v7 == 3)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, (uint64_t)&v43 - v26, type metadata accessor for CommandGroupPlacement);
    v28 = *(_QWORD **)a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
      v28 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28);
    v28[2] = v30 + 1;
    outlined init with take of TableCellFormula((uint64_t)v27, (uint64_t)v28+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v30, type metadata accessor for CommandGroupPlacementBox);
    *(_QWORD *)a2 = v28;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, (uint64_t)v14, type metadata accessor for CommandGroupPlacement);
  v31 = *(_QWORD *)(a2 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v23, type metadata accessor for CommandGroupPlacement);
  if (*(_QWORD *)(v31 + 16) && (v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v33 & 1) != 0))
  {
    v34 = (uint64_t *)(*(_QWORD *)(v31 + 56) + 16 * v32);
    v35 = *v34;
    v36 = v34[1];
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, type metadata accessor for CommandGroupPlacementBox);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for CommandGroupPlacement);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, type metadata accessor for CommandGroupPlacementBox);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for CommandGroupPlacement);
    v35 = AnyView.init<A>(_:)();
    v36 = MEMORY[0x1E0DEE9E8];
  }
  v47 = v35;
  v48 = v36;
  specialized CommandAccumulator.visit<A>(_:operation:)(v44, v43);
  v37 = a4;
  v38 = v45;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, v45, type metadata accessor for CommandGroupPlacement);
  v39 = v47;
  v40 = v48;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v38, (uint64_t)v19, type metadata accessor for CommandGroupPlacement);
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v46 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v39, v40, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a2 + 8) = v46;
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, type metadata accessor for CommandGroupPlacementBox);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v38, type metadata accessor for CommandGroupPlacement);
  swift_bridgeObjectRelease();
  return swift_release();
}

void specialized CommandAccumulator.visit<A>(_:operation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  _QWORD v28[3];
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v32 = a1;
  v3 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v31 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v30 = (char *)v28 - v8;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
  v28[2] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>), v9);
  v28[1] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v29 = type metadata accessor for CommandOperation();
  v14 = *(_QWORD *)(v29 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v29, v16);
  v17 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v28 - v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  v25 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v26 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v17, v26 + v25, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>);
  v27 = (uint64_t (**)(uint64_t))&v24[*(int *)(v19 + 36)];
  *v27 = partial apply for closure #1 in CommandAccumulator.visit<A>(_:operation:);
  v27[1] = (uint64_t (*)(uint64_t))v26;
  __asm { BR              X10 }
}

uint64_t sub_187A5EF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, v0, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
  v4 = AnyView.init<A>(_:)();
  v5 = *(uint64_t **)(v3 - 96);
  swift_release();
  v7 = *(_QWORD *)(v3 - 112);
  v6 = *(_QWORD *)(v3 - 104);
  v8 = *(_QWORD *)(v3 - 120);
  *v5 = v4;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(v8 + 20), v6, type metadata accessor for CommandGroupPlacement);
  specialized Set._Variant.insert(_:)(v7, v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, type metadata accessor for CommandGroupPlacementBox);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
}

uint64_t specialized CommandGroup.init(after:addition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (**v46)();
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t *v61;
  _BYTE *v62;
  _BYTE *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE v69[12];
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  unsigned int v79;
  _BYTE *v80;
  __int128 v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;

  v73 = a3;
  v87 = a1;
  v90 = a5;
  v79 = a4 >> 8;
  v8 = (a4 >> 8) & 1;
  type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>();
  *(_QWORD *)&v81 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v69[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
  MEMORY[0x1E0C80A78](v13, v14);
  v78 = &v69[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v17 = v16;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = &v69[-v19];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
  v76 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = &v69[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(0);
  v83 = v25;
  v26 = *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64);
  v88 = *(_QWORD *)(v25 - 8);
  v89 = v26;
  MEMORY[0x1E0C80A78](v25, v27);
  v80 = &v69[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = type metadata accessor for CommandGroupPlacement(0);
  v30 = *(_QWORD *)(v29 - 8);
  v84 = *(_QWORD *)(v30 + 64);
  v85 = v30;
  MEMORY[0x1E0C80A78](v29, v31);
  v82 = &v69[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = &v69[-v35];
  v74 = &v69[-v35];
  v77 = type metadata accessor for CommandOperation();
  MEMORY[0x1E0C80A78](v77, v37);
  v75 = &v69[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v39, v40);
  v86 = &v69[-v41];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v36, type metadata accessor for CommandGroupPlacement);
  v42 = swift_allocObject();
  v43 = a2;
  *(_QWORD *)(v42 + 16) = a2;
  v44 = v73;
  *(_QWORD *)(v42 + 24) = v73;
  v45 = a4;
  *(_BYTE *)(v42 + 32) = a4;
  *(_BYTE *)(v42 + 33) = v8;
  *v20 = 256;
  v46 = (uint64_t (**)())((char *)v20 + *(int *)(v17 + 36));
  *v46 = partial apply for closure #1 in closure #1 in InspectorCommands.body.getter;
  v46[1] = (uint64_t (*)())v42;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v47 = (uint64_t)v20 + *(int *)(v17 + 40);
  LOBYTE(v17) = v45;
  v70 = v45;
  v48 = v45;
  LOBYTE(v45) = v8;
  v72 = v8;
  outlined copy of Environment<DismissWindowAction>.Content(v43, v44, v48, v8);
  swift_retain();
  v71 = v43;
  closure #2 in closure #1 in InspectorCommands.body.getter(v43, v44, v17 | ((v79 & 1) << 8), v47);
  swift_release();
  KeyPath = swift_getKeyPath();
  outlined init with copy of Button<Text>((uint64_t)v20, (uint64_t)v12);
  v50 = &v12[*(int *)(v81 + 36)];
  *(_QWORD *)v50 = KeyPath;
  v81 = xmmword_187C82820;
  *(_OWORD *)(v50 + 8) = xmmword_187C82820;
  *((_QWORD *)v50 + 3) = 20;
  v50[32] = 0;
  v51 = v78;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v51, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  v52 = &v24[*(int *)(v76 + 36)];
  *(_OWORD *)v52 = v81;
  *((_QWORD *)v52 + 2) = 20;
  v52[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  outlined destroy of Button<Text>((uint64_t)v20);
  v91 = v43;
  v92 = v44;
  v53 = v44;
  v54 = v70;
  v93 = v70;
  v94 = v45;
  LOBYTE(v17) = InspectorCommands.inspectorPresented.getter() == 2;
  v55 = swift_getKeyPath();
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = v17;
  v57 = v80;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v24, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  v58 = (uint64_t *)&v57[*(int *)(v83 + 36)];
  *v58 = v55;
  v58[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v58[2] = v56;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  v59 = v77;
  v60 = v75;
  v61 = (uint64_t *)&v75[*(int *)(v77 + 24)];
  *v61 = 0;
  v61[1] = 0;
  *v60 = 0;
  v62 = v74;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v74, (uint64_t)&v60[*(int *)(v59 + 20)], type metadata accessor for CommandGroupPlacement);
  v63 = v82;
  outlined init with take of TableCellFormula((uint64_t)v62, (uint64_t)v82, type metadata accessor for CommandGroupPlacement);
  v64 = (*(unsigned __int8 *)(v85 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  v65 = (v84 + *(unsigned __int8 *)(v88 + 80) + v64) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
  v66 = swift_allocObject();
  *(_BYTE *)(v66 + 16) = 0;
  outlined init with take of TableCellFormula((uint64_t)v63, v66 + v64, type metadata accessor for CommandGroupPlacement);
  outlined init with take of TableCellFormula((uint64_t)v57, v66 + v65, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v61);
  *v61 = (uint64_t)partial apply for specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:);
  v61[1] = v66;
  v67 = v86;
  outlined init with take of TableCellFormula((uint64_t)v60, (uint64_t)v86, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v87, type metadata accessor for CommandGroupPlacement);
  outlined init with take of TableCellFormula((uint64_t)v67, v90, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  return outlined consume of Environment<DismissWindowAction>.Content(v71, v53, v54, v72);
}

uint64_t CommandGroup.init(after:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CommandGroup.init(after:addition:)(a1, a2, a3, a4, 0, a5);
}

uint64_t CommandGroup.MakeList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v4 = type metadata accessor for CommandGroup(0, a2, a3, a4);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v18 - v7;
  v9 = type metadata accessor for CommandsList.Item(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, Value, v4);
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(_QWORD *)&v13[*(int *)(v9 + 20)] = v18[1];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>, type metadata accessor for CommandsList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
  outlined init with take of TableCellFormula((uint64_t)v13, v16 + v15, type metadata accessor for CommandsList.Item);
  return v16;
}

uint64_t protocol witness for Rule.value.getter in conformance CommandGroup<A>.MakeList@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  unsigned int *v3;
  uint64_t result;

  result = CommandGroup.MakeList.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  *a3 = result;
  return result;
}

uint64_t static CommandGroup._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  _BYTE v12[16];
  uint64_t List;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  type metadata accessor for CommandGroup(255, a2, a3, a4);
  type metadata accessor for _GraphValue();
  v11 = _GraphValue.value.getter();
  List = type metadata accessor for CommandGroup.MakeList(0, a2, a3, v6);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandGroup<A>.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<CommandsList>, (uint64_t)&type metadata for CommandsList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v12, List, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10;
}

uint64_t CommandGroup.init(before:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CommandGroup.init(after:addition:)(a1, a2, a3, a4, 1, a5);
}

uint64_t partial apply for implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)(*(unsigned int *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t CommandGroup.init(replacing:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CommandGroup.init(after:addition:)(a1, a2, a3, a4, 2, a5);
}

uint64_t CommandGroup.init(after:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a6;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CommandOperation();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v16, type metadata accessor for CommandGroupPlacement);
  a2(v21);
  CommandOperation.init<A>(mutation:placement:content:)(a5, (uint64_t)v16, (uint64_t)v12, a3, a4, v20);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for CommandGroupPlacement);
  return outlined init with take of TableCellFormula((uint64_t)v20, v24, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
}

uint64_t CommandGroup._resolve(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t (*v4)(uint64_t, uint64_t);

  result = type metadata accessor for CommandOperation();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + *(int *)(result + 24));
  if (v4)
    return v4(v1, a1);
  return result;
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance CommandGroup<A>@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroup._makeCommands(content:inputs:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommandGroupPlacementBox()
{
  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  UUID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommandGroupPlacementBox()
{
  type metadata accessor for CommandGroupPlacement(0);
  return UUID.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommandGroupPlacementBox()
{
  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  UUID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommandGroupPlacementBox()
{
  type metadata accessor for CommandGroupPlacement(0);
  return static UUID.== infix(_:_:)();
}

uint64_t one-time initialization function for appInfo()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appInfo);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appInfo);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82830;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appInfo, (uint64_t)static CommandGroupPlacement.appInfo, a1);
}

uint64_t one-time initialization function for appSettings()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appSettings);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appSettings);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82840;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appSettings.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appSettings, (uint64_t)static CommandGroupPlacement.appSettings, a1);
}

uint64_t one-time initialization function for systemServices()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.systemServices);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.systemServices);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82850;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.systemServices.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for systemServices, (uint64_t)static CommandGroupPlacement.systemServices, a1);
}

uint64_t one-time initialization function for appVisibility()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appVisibility);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appVisibility);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82860;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appVisibility.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appVisibility, (uint64_t)static CommandGroupPlacement.appVisibility, a1);
}

uint64_t one-time initialization function for appTermination()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appTermination);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appTermination);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82870;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appTermination.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appTermination, (uint64_t)static CommandGroupPlacement.appTermination, a1);
}

uint64_t one-time initialization function for newItem()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.newItem);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.newItem);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82880;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.newItem.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for newItem, (uint64_t)static CommandGroupPlacement.newItem, a1);
}

uint64_t one-time initialization function for saveItem()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.saveItem);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.saveItem);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82890;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.saveItem.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for saveItem, (uint64_t)static CommandGroupPlacement.saveItem, a1);
}

uint64_t one-time initialization function for importExport()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.importExport);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.importExport);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)v1 = 0xD000000000000012;
  *(_QWORD *)(v1 + 8) = 0x8000000187BEE4D0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.importExport.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for importExport, (uint64_t)static CommandGroupPlacement.importExport, a1);
}

uint64_t one-time initialization function for printItem()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.printItem);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.printItem);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C828A0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.printItem.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for printItem, (uint64_t)static CommandGroupPlacement.printItem, a1);
}

uint64_t one-time initialization function for undoRedo()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.undoRedo);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.undoRedo);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C828B0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.undoRedo.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for undoRedo, (uint64_t)static CommandGroupPlacement.undoRedo, a1);
}

uint64_t one-time initialization function for pasteboard()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.pasteboard);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.pasteboard);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C828C0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.pasteboard.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for pasteboard, (uint64_t)static CommandGroupPlacement.pasteboard, a1);
}

uint64_t one-time initialization function for textEditing()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.textEditing);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.textEditing);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C828D0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.textEditing.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for textEditing, (uint64_t)static CommandGroupPlacement.textEditing, a1);
}

uint64_t one-time initialization function for textFormatting()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.textFormatting);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.textFormatting);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C828E0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.textFormatting.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for textFormatting, (uint64_t)static CommandGroupPlacement.textFormatting, a1);
}

uint64_t one-time initialization function for toolbar()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.toolbar);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.toolbar);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C828F0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.toolbar.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for toolbar, (uint64_t)static CommandGroupPlacement.toolbar, a1);
}

uint64_t static CommandGroupPlacement.sidebar.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for sidebar, (uint64_t)static CommandGroupPlacement.sidebar, a1);
}

uint64_t one-time initialization function for windowSize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.windowSize);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.windowSize);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82910;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.windowSize.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for windowSize, (uint64_t)static CommandGroupPlacement.windowSize, a1);
}

void static CommandGroupPlacement.windowList.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t one-time initialization function for windowArrangement()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.windowArrangement);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.windowArrangement);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)v1 = 0xD000000000000012;
  *(_QWORD *)(v1 + 8) = 0x8000000187BEE4B0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.windowArrangement.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for windowArrangement, (uint64_t)static CommandGroupPlacement.windowArrangement, a1);
}

uint64_t one-time initialization function for help()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.help);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.help);
  v2 = MEMORY[0x1E0DEE9D8];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)v1 = xmmword_187C82920;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.help.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for help, (uint64_t)static CommandGroupPlacement.help, a1);
}

uint64_t static CommandGroupPlacement.appInfo.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for CommandGroupPlacement(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v6, a3, type metadata accessor for CommandGroupPlacement);
}

uint64_t associated type witness table accessor for Commands.Body : Commands in CommandGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for CommandGroup()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommandOperation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CommandGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for CommandOperation();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(v4 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = *(_QWORD *)((char *)a2 + v7);
    v11 = *(_QWORD *)((char *)a2 + v7 + 8);
    v12 = *((_BYTE *)a2 + v7 + 16);
    outlined copy of Text.Storage(v10, v11, v12);
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = v11;
    v8[16] = v12;
    *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
    v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for UUID();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    v18 = *(int *)(v6 + 24);
    v19 = (_QWORD *)((char *)a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    if (*v20)
    {
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
  }
  return a1;
}

uint64_t destroy for CommandGroup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = type metadata accessor for CommandOperation();
  v3 = a1 + *(int *)(v2 + 20);
  outlined consume of Text.Storage(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v5 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(a1 + *(int *)(v2 + 24)))
    return swift_release();
  return result;
}

_BYTE *initializeWithCopy for CommandGroup(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  *a1 = *a2;
  v4 = type metadata accessor for CommandOperation();
  v5 = *(int *)(v4 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_QWORD *)&a2[v5];
  v9 = *(_QWORD *)&a2[v5 + 8];
  v10 = a2[v5 + 16];
  outlined copy of Text.Storage(v8, v9, v10);
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  v6[16] = v10;
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for UUID();
  v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v16 = *(int *)(v4 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  if (*v18)
  {
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  return a1;
}

_BYTE *assignWithCopy for CommandGroup(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v4 = type metadata accessor for CommandOperation();
  v5 = *(int *)(v4 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_QWORD *)&a2[v5];
  v9 = *(_QWORD *)&a2[v5 + 8];
  v10 = a2[v5 + 16];
  outlined copy of Text.Storage(v8, v9, v10);
  v11 = *(_QWORD *)v6;
  v12 = *((_QWORD *)v6 + 1);
  v13 = v6[16];
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  v6[16] = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v15 = &v6[v14];
  v16 = &v7[v14];
  v17 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(v4 + 24);
  v19 = &a1[v18];
  v20 = (uint64_t *)&a2[v18];
  v21 = *(_QWORD *)&a1[v18];
  v22 = *v20;
  if (!v21)
  {
    if (v22)
    {
      v24 = v20[1];
      *v19 = v22;
      v19[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  if (!v22)
  {
    swift_release();
    goto LABEL_7;
  }
  v23 = v20[1];
  *v19 = v22;
  v19[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *initializeWithTake for CommandGroup(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = type metadata accessor for CommandOperation();
  v5 = *(int *)(v4 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_OWORD *)&a2[v5 + 16];
  *v6 = *(_OWORD *)&a2[v5];
  v6[1] = v8;
  v9 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v10 = (char *)v6 + v9;
  v11 = &v7[v9];
  v12 = type metadata accessor for UUID();
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = *(int *)(v4 + 24);
  v14 = &a1[v13];
  v15 = (uint64_t *)&a2[v13];
  v16 = *v15;
  if (*v15)
  {
    v17 = v15[1];
    *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  return a1;
}

_BYTE *assignWithTake for CommandGroup(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v4 = type metadata accessor for CommandOperation();
  v5 = *(int *)(v4 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  LOBYTE(v5) = a2[v5 + 16];
  v8 = *(_QWORD *)v6;
  v9 = *((_QWORD *)v6 + 1);
  v10 = v6[16];
  *(_OWORD *)v6 = *(_OWORD *)v7;
  v6[16] = v5;
  outlined consume of Text.Storage(v8, v9, v10);
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  swift_bridgeObjectRelease();
  v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = *(int *)(v4 + 24);
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v18 = *(_QWORD *)&a1[v15];
  v19 = *v17;
  if (!v18)
  {
    if (v19)
    {
      v21 = v17[1];
      *v16 = v19;
      v16[1] = v21;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_7;
  }
  v20 = v17[1];
  *v16 = v19;
  v16[1] = v20;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandGroup()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A6130C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_4(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
}

uint64_t storeEnumTagSinglePayload for CommandGroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A61324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
}

uint64_t type metadata accessor for CommandGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandGroup);
}

unint64_t initializeBufferWithCopyOfBuffer for CommandGroupPlacement(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = *(int *)(a3 + 20);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for UUID();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for CommandGroupPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t assignWithCopy for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 20);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for CommandGroupPlacement(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_187A61680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_187A616FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

_UNKNOWN **sub_187A61770()
{
  return &protocol witness table for EmptyCommands;
}

unint64_t initializeBufferWithCopyOfBuffer for CommandGroupPlacementBox(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for CommandGroupPlacement(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = *(int *)(v6 + 20);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for UUID();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

